
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08018138  08018138  00028138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184e0  080184e0  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  080184e0  080184e0  000284e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184e8  080184e8  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184e8  080184e8  000284e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184ec  080184ec  000284ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080184f0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003908  200000c8  080185b8  000300c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200039d0  080185b8  000339d0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049334  00000000  00000000  00030141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000790a  00000000  00000000  00079475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003388  00000000  00000000  00080d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000027bf  00000000  00000000  00084108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000381f8  00000000  00000000  000868c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b994  00000000  00000000  000beabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00160ae9  00000000  00000000  000fa453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ee2c  00000000  00000000  0025af3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00269d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000c8 	.word	0x200000c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08018120 	.word	0x08018120

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000cc 	.word	0x200000cc
 800023c:	08018120 	.word	0x08018120

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2f>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b44:	bf24      	itt	cs
 8000b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4e:	d90d      	bls.n	8000b6c <__aeabi_d2f+0x30>
 8000b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b64:	bf08      	it	eq
 8000b66:	f020 0001 	biceq.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b70:	d121      	bne.n	8000bb6 <__aeabi_d2f+0x7a>
 8000b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b76:	bfbc      	itt	lt
 8000b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	4770      	bxlt	lr
 8000b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b86:	f1c2 0218 	rsb	r2, r2, #24
 8000b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b92:	fa20 f002 	lsr.w	r0, r0, r2
 8000b96:	bf18      	it	ne
 8000b98:	f040 0001 	orrne.w	r0, r0, #1
 8000b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba8:	ea40 000c 	orr.w	r0, r0, ip
 8000bac:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb4:	e7cc      	b.n	8000b50 <__aeabi_d2f+0x14>
 8000bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bba:	d107      	bne.n	8000bcc <__aeabi_d2f+0x90>
 8000bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bca:	4770      	bxne	lr
 8000bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b982 	b.w	8000ef8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c12:	460d      	mov	r5, r1
 8000c14:	4604      	mov	r4, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d146      	bne.n	8000caa <__udivmoddi4+0x9e>
 8000c1c:	428a      	cmp	r2, r1
 8000c1e:	4694      	mov	ip, r2
 8000c20:	d95e      	bls.n	8000ce0 <__udivmoddi4+0xd4>
 8000c22:	fab2 f382 	clz	r3, r2
 8000c26:	b143      	cbz	r3, 8000c3a <__udivmoddi4+0x2e>
 8000c28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c2c:	f1c3 0220 	rsb	r2, r3, #32
 8000c30:	409f      	lsls	r7, r3
 8000c32:	409c      	lsls	r4, r3
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	4317      	orrs	r7, r2
 8000c3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3e:	fa1f f58c 	uxth.w	r5, ip
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c54:	4290      	cmp	r0, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x5e>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x5c>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f200 8134 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000c68:	4639      	mov	r1, r7
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	fb00 f505 	mul.w	r5, r0, r5
 8000c7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x88>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x86>
 8000c8c:	42a5      	cmp	r5, r4
 8000c8e:	f200 8119 	bhi.w	8000ec4 <__udivmoddi4+0x2b8>
 8000c92:	4610      	mov	r0, r2
 8000c94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11e      	cbz	r6, 8000ca6 <__udivmoddi4+0x9a>
 8000c9e:	40dc      	lsrs	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0xb4>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	f000 80fc 	beq.w	8000eac <__udivmoddi4+0x2a0>
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc0:	fab3 f183 	clz	r1, r3
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	d14c      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	f0c0 80f2 	bcc.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f240 80ef 	bls.w	8000eb2 <__udivmoddi4+0x2a6>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e5      	beq.n	8000ca6 <__udivmoddi4+0x9a>
 8000cda:	e9c6 4700 	strd	r4, r7, [r6]
 8000cde:	e7e2      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xd8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f382 	clz	r3, r2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 809f 	bne.w	8000e2c <__udivmoddi4+0x220>
 8000cee:	1a8a      	subs	r2, r1, r2
 8000cf0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb2 f5fe 	udiv	r5, r2, lr
 8000cfe:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d08:	fb07 f005 	mul.w	r0, r7, r5
 8000d0c:	4290      	cmp	r0, r2
 8000d0e:	d90f      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d10:	eb1c 0202 	adds.w	r2, ip, r2
 8000d14:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d18:	bf2c      	ite	cs
 8000d1a:	f04f 0901 	movcs.w	r9, #1
 8000d1e:	f04f 0900 	movcc.w	r9, #0
 8000d22:	4290      	cmp	r0, r2
 8000d24:	d903      	bls.n	8000d2e <__udivmoddi4+0x122>
 8000d26:	f1b9 0f00 	cmp.w	r9, #0
 8000d2a:	f000 80ce 	beq.w	8000eca <__udivmoddi4+0x2be>
 8000d2e:	4645      	mov	r5, r8
 8000d30:	1a12      	subs	r2, r2, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d38:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d44:	42a7      	cmp	r7, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x14e>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x14c>
 8000d52:	42a7      	cmp	r7, r4
 8000d54:	f200 80b3 	bhi.w	8000ebe <__udivmoddi4+0x2b2>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	1be4      	subs	r4, r4, r7
 8000d5c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d60:	e79c      	b.n	8000c9c <__udivmoddi4+0x90>
 8000d62:	f1c1 0420 	rsb	r4, r1, #32
 8000d66:	408b      	lsls	r3, r1
 8000d68:	fa05 fc01 	lsl.w	ip, r5, r1
 8000d6c:	fa22 f704 	lsr.w	r7, r2, r4
 8000d70:	40e5      	lsrs	r5, r4
 8000d72:	408a      	lsls	r2, r1
 8000d74:	431f      	orrs	r7, r3
 8000d76:	fa20 f304 	lsr.w	r3, r0, r4
 8000d7a:	4088      	lsls	r0, r1
 8000d7c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d80:	ea43 030c 	orr.w	r3, r3, ip
 8000d84:	fa1f fc87 	uxth.w	ip, r7
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb5 fef8 	udiv	lr, r5, r8
 8000d90:	fb08 551e 	mls	r5, r8, lr, r5
 8000d94:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a9      	cmp	r9, r5
 8000d9e:	d90e      	bls.n	8000dbe <__udivmoddi4+0x1b2>
 8000da0:	197d      	adds	r5, r7, r5
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	bf2c      	ite	cs
 8000da8:	f04f 0b01 	movcs.w	fp, #1
 8000dac:	f04f 0b00 	movcc.w	fp, #0
 8000db0:	45a9      	cmp	r9, r5
 8000db2:	d903      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000db4:	f1bb 0f00 	cmp.w	fp, #0
 8000db8:	f000 808d 	beq.w	8000ed6 <__udivmoddi4+0x2ca>
 8000dbc:	46d6      	mov	lr, sl
 8000dbe:	eba5 0509 	sub.w	r5, r5, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000dca:	fb08 5513 	mls	r5, r8, r3, r5
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd6:	45ac      	cmp	ip, r5
 8000dd8:	d906      	bls.n	8000de8 <__udivmoddi4+0x1dc>
 8000dda:	197d      	adds	r5, r7, r5
 8000ddc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000de0:	d201      	bcs.n	8000de6 <__udivmoddi4+0x1da>
 8000de2:	45ac      	cmp	ip, r5
 8000de4:	d87e      	bhi.n	8000ee4 <__udivmoddi4+0x2d8>
 8000de6:	4643      	mov	r3, r8
 8000de8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000dec:	eba5 050c 	sub.w	r5, r5, ip
 8000df0:	fba3 9802 	umull	r9, r8, r3, r2
 8000df4:	4545      	cmp	r5, r8
 8000df6:	46ce      	mov	lr, r9
 8000df8:	46c4      	mov	ip, r8
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x1f6>
 8000dfc:	d106      	bne.n	8000e0c <__udivmoddi4+0x200>
 8000dfe:	4548      	cmp	r0, r9
 8000e00:	d204      	bcs.n	8000e0c <__udivmoddi4+0x200>
 8000e02:	3b01      	subs	r3, #1
 8000e04:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e08:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d06f      	beq.n	8000ef0 <__udivmoddi4+0x2e4>
 8000e10:	ebb0 020e 	subs.w	r2, r0, lr
 8000e14:	eb65 050c 	sbc.w	r5, r5, ip
 8000e18:	40ca      	lsrs	r2, r1
 8000e1a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e1e:	40cd      	lsrs	r5, r1
 8000e20:	4618      	mov	r0, r3
 8000e22:	4314      	orrs	r4, r2
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 4500 	strd	r4, r5, [r6]
 8000e2a:	e73c      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	f1c3 0220 	rsb	r2, r3, #32
 8000e34:	4099      	lsls	r1, r3
 8000e36:	409c      	lsls	r4, r3
 8000e38:	40d5      	lsrs	r5, r2
 8000e3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e42:	fa1f f78c 	uxth.w	r7, ip
 8000e46:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e50:	0c11      	lsrs	r1, r2, #16
 8000e52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e56:	fb00 f507 	mul.w	r5, r0, r7
 8000e5a:	428d      	cmp	r5, r1
 8000e5c:	d90e      	bls.n	8000e7c <__udivmoddi4+0x270>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0901 	movcs.w	r9, #1
 8000e6c:	f04f 0900 	movcc.w	r9, #0
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d902      	bls.n	8000e7a <__udivmoddi4+0x26e>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d031      	beq.n	8000ede <__udivmoddi4+0x2d2>
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5fe 	udiv	r5, r1, lr
 8000e84:	fb0e 1115 	mls	r1, lr, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f107 	mul.w	r1, r5, r7
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x298>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x296>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d823      	bhi.n	8000eea <__udivmoddi4+0x2de>
 8000ea2:	4645      	mov	r5, r8
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eaa:	e726      	b.n	8000cfa <__udivmoddi4+0xee>
 8000eac:	4631      	mov	r1, r6
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e6f9      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000eb2:	1a84      	subs	r4, r0, r2
 8000eb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4617      	mov	r7, r2
 8000ebc:	e70b      	b.n	8000cd6 <__udivmoddi4+0xca>
 8000ebe:	4464      	add	r4, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74a      	b.n	8000d5a <__udivmoddi4+0x14e>
 8000ec4:	4464      	add	r4, ip
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	e6e4      	b.n	8000c94 <__udivmoddi4+0x88>
 8000eca:	3d02      	subs	r5, #2
 8000ecc:	4462      	add	r2, ip
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	3902      	subs	r1, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e6c9      	b.n	8000c6a <__udivmoddi4+0x5e>
 8000ed6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eda:	443d      	add	r5, r7
 8000edc:	e76f      	b.n	8000dbe <__udivmoddi4+0x1b2>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	e7cb      	b.n	8000e7c <__udivmoddi4+0x270>
 8000ee4:	3b02      	subs	r3, #2
 8000ee6:	443d      	add	r5, r7
 8000ee8:	e77e      	b.n	8000de8 <__udivmoddi4+0x1dc>
 8000eea:	3d02      	subs	r5, #2
 8000eec:	4462      	add	r2, ip
 8000eee:	e7d9      	b.n	8000ea4 <__udivmoddi4+0x298>
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	e6d7      	b.n	8000ca6 <__udivmoddi4+0x9a>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f0c:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f16:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f20:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f2a:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f34:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f3e:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f48:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_ADC_ConvCpltCallback+0x70>)
 8000f52:	81da      	strh	r2, [r3, #14]

	vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f013 fdd1 	bl	8014b00 <vTaskResume>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000e4 	.word	0x200000e4
 8000f6c:	20000104 	.word	0x20000104
 8000f70:	20000234 	.word	0x20000234

08000f74 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8000f7a:	4b91      	ldr	r3, [pc, #580]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f86:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f96:	4b8d      	ldr	r3, [pc, #564]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8000f9c:	4b88      	ldr	r3, [pc, #544]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000f9e:	89db      	ldrh	r3, [r3, #14]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fa8:	eddf 6a86 	vldr	s13, [pc, #536]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb8:	4b84      	ldr	r3, [pc, #528]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000fba:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8000fbe:	4b80      	ldr	r3, [pc, #512]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000fc0:	891b      	ldrh	r3, [r3, #8]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fda:	4b7c      	ldr	r3, [pc, #496]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000fdc:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8000fe0:	4b77      	ldr	r3, [pc, #476]	; (80011c0 <_Z18DistanceSensorTaskv+0x24c>)
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	eddf 6a75 	vldr	s13, [pc, #468]	; 80011c4 <_Z18DistanceSensorTaskv+0x250>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80011c8 <_Z18DistanceSensorTaskv+0x254>
 8000ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffc:	4b73      	ldr	r3, [pc, #460]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8000ffe:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e0a1      	b.n	800114c <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a70      	ldr	r2, [pc, #448]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a6d      	ldr	r2, [pc, #436]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001018:	3304      	adds	r3, #4
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001024:	2300      	movs	r3, #0
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	e03a      	b.n	80010a0 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	f1c3 0305 	rsb	r3, r3, #5
 8001030:	4618      	mov	r0, r3
 8001032:	ed97 0a00 	vldr	s0, [r7]
 8001036:	f000 f8d1 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800103a:	ec55 4b10 	vmov	r4, r5, d0
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	4a63      	ldr	r2, [pc, #396]	; (80011d0 <_Z18DistanceSensorTaskv+0x25c>)
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa6f 	bl	800052c <__aeabi_f2d>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4620      	mov	r0, r4
 8001054:	4629      	mov	r1, r5
 8001056:	f7ff fac1 	bl	80005dc <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a59      	ldr	r2, [pc, #356]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001066:	3304      	adds	r3, #4
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa5c 	bl	800052c <__aeabi_f2d>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8f8 	bl	8000270 <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	79fc      	ldrb	r4, [r7, #7]
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd57 	bl	8000b3c <__aeabi_d2f>
 800108e:	4602      	mov	r2, r0
 8001090:	494e      	ldr	r1, [pc, #312]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001092:	1d23      	adds	r3, r4, #4
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	3301      	adds	r3, #1
 800109e:	71bb      	strb	r3, [r7, #6]
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d9c1      	bls.n	800102a <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a48      	ldr	r2, [pc, #288]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80010ba:	3302      	adds	r3, #2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 80010c4:	2300      	movs	r3, #0
 80010c6:	71bb      	strb	r3, [r7, #6]
 80010c8:	e03a      	b.n	8001140 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 80010ca:	79bb      	ldrb	r3, [r7, #6]
 80010cc:	f1c3 0305 	rsb	r3, r3, #5
 80010d0:	4618      	mov	r0, r3
 80010d2:	ed97 0a00 	vldr	s0, [r7]
 80010d6:	f000 f881 	bl	80011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010da:	ec55 4b10 	vmov	r4, r5, d0
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	4a3c      	ldr	r2, [pc, #240]	; (80011d4 <_Z18DistanceSensorTaskv+0x260>)
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1f 	bl	800052c <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fa71 	bl	80005dc <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4614      	mov	r4, r2
 8001100:	461d      	mov	r5, r3
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001106:	3306      	adds	r3, #6
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa0c 	bl	800052c <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff f8a8 	bl	8000270 <__adddf3>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	79fc      	ldrb	r4, [r7, #7]
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd07 	bl	8000b3c <__aeabi_d2f>
 800112e:	4602      	mov	r2, r0
 8001130:	4926      	ldr	r1, [pc, #152]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001132:	1da3      	adds	r3, r4, #6
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	3301      	adds	r3, #1
 800113e:	71bb      	strb	r3, [r7, #6]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b05      	cmp	r3, #5
 8001144:	d9c1      	bls.n	80010ca <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	3301      	adds	r3, #1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f43f af5a 	beq.w	8001008 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001156:	edd3 7a06 	vldr	s15, [r3, #24]
 800115a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	da09      	bge.n	800117c <_Z18DistanceSensorTaskv+0x208>
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800116a:	edd3 7a07 	vldr	s15, [r3, #28]
 800116e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	db04      	blt.n	8001186 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e003      	b.n	800118e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800118c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 8001190:	edd3 7a08 	vldr	s15, [r3, #32]
 8001194:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 800119e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80011a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80011a8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011d8 <_Z18DistanceSensorTaskv+0x264>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_Z18DistanceSensorTaskv+0x258>)
 80011b2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000104 	.word	0x20000104
 80011c4:	45800000 	.word	0x45800000
 80011c8:	40533333 	.word	0x40533333
 80011cc:	20000114 	.word	0x20000114
 80011d0:	20000018 	.word	0x20000018
 80011d4:	20000000 	.word	0x20000000
 80011d8:	42c80000 	.word	0x42c80000

080011dc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f99f 	bl	800052c <__aeabi_f2d>
 80011ee:	4604      	mov	r4, r0
 80011f0:	460d      	mov	r5, r1
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f7ff f988 	bl	8000508 <__aeabi_i2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	ec43 2b11 	vmov	d1, r2, r3
 8001200:	ec45 4b10 	vmov	d0, r4, r5
 8001204:	f015 f880 	bl	8016308 <pow>
 8001208:	eeb0 7a40 	vmov.f32	s14, s0
 800120c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001210:	eeb0 0a47 	vmov.f32	s0, s14
 8001214:	eef0 0a67 	vmov.f32	s1, s15
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001220 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e05c      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	429a      	cmp	r2, r3
 8001250:	d103      	bne.n	800125a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
 8001258:	e053      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d927      	bls.n	80012b4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0310 	and.w	r3, r3, #16
 800126e:	2b10      	cmp	r3, #16
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d010      	beq.n	800129e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	b29a      	uxth	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	b29b      	uxth	r3, r3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	b21a      	sxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	801a      	strh	r2, [r3, #0]
 800129c:	e031      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	801a      	strh	r2, [r3, #0]
 80012b2:	e026      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b10      	cmp	r3, #16
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00a      	beq.n	80012e2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	e00f      	b.n	8001302 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000144 	.word	0x20000144

08001318 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8001330:	f013 fd26 	bl	8014d80 <xTaskGetTickCount>
 8001334:	4603      	mov	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 8001338:	491e      	ldr	r1, [pc, #120]	; (80013b4 <_Z12Encoder_TaskPv+0x9c>)
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 800133c:	f7ff ff70 	bl	8001220 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001342:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	1c59      	adds	r1, r3, #1
 800134a:	75f9      	strb	r1, [r7, #23]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3318      	adds	r3, #24
 8001350:	443b      	add	r3, r7
 8001352:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d101      	bne.n	8001360 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8001368:	2300      	movs	r3, #0
 800136a:	75bb      	strb	r3, [r7, #22]
 800136c:	e018      	b.n	80013a0 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001370:	ed93 7a02 	vldr	s14, [r3, #8]
 8001374:	7dbb      	ldrb	r3, [r7, #22]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	3318      	adds	r3, #24
 800137a:	443b      	add	r3, r7
 800137c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001388:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800138c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <_Z12Encoder_TaskPv+0xa0>)
 8001396:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	3301      	adds	r3, #1
 800139e:	75bb      	strb	r3, [r7, #22]
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d9e3      	bls.n	800136e <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2101      	movs	r1, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f013 fa97 	bl	80148e0 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 80013b2:	e7c1      	b.n	8001338 <_Z12Encoder_TaskPv+0x20>
 80013b4:	200006c0 	.word	0x200006c0
 80013b8:	20000138 	.word	0x20000138

080013bc <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu = {0};

uint8_t readByteFromIMU(uint8_t address)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	2364      	movs	r3, #100	; 0x64
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	21d6      	movs	r1, #214	; 0xd6
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <_Z15readByteFromIMUh+0x3c>)
 80013d6:	f00a ff09 	bl	800c1ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 80013da:	f107 020f 	add.w	r2, r7, #15
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	21d7      	movs	r1, #215	; 0xd7
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <_Z15readByteFromIMUh+0x3c>)
 80013e8:	f00a fff4 	bl	800c3d4 <HAL_I2C_Master_Receive>
	return ret;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000310 	.word	0x20000310
 80013fc:	00000000 	.word	0x00000000

08001400 <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <_Z8IMU_Taskv+0x1e8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d13f      	bne.n	800148e <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800140e:	2300      	movs	r3, #0
 8001410:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 8001412:	230f      	movs	r3, #15
 8001414:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 8001416:	f107 0209 	add.w	r2, r7, #9
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	21d6      	movs	r1, #214	; 0xd6
 8001422:	4872      	ldr	r0, [pc, #456]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001424:	f00a fee2 	bl	800c1ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 8001428:	f107 020a 	add.w	r2, r7, #10
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	21d7      	movs	r1, #215	; 0xd7
 8001434:	486d      	ldr	r0, [pc, #436]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001436:	f00a ffcd 	bl	800c3d4 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 800143a:	7abb      	ldrb	r3, [r7, #10]
 800143c:	2b6a      	cmp	r3, #106	; 0x6a
 800143e:	f040 80c8 	bne.w	80015d2 <_Z8IMU_Taskv+0x1d2>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 8001442:	f246 0310 	movw	r3, #24592	; 0x6010
 8001446:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 8001448:	2311      	movs	r3, #17
 800144a:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 800144c:	1d3a      	adds	r2, r7, #4
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	21d6      	movs	r1, #214	; 0xd6
 8001456:	4865      	ldr	r0, [pc, #404]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001458:	f00a fec8 	bl	800c1ec <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 800145c:	2012      	movs	r0, #18
 800145e:	f7ff ffad 	bl	80013bc <_Z15readByteFromIMUh>
 8001462:	4603      	mov	r3, r0
 8001464:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 800146e:	2312      	movs	r3, #18
 8001470:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8001476:	1d3a      	adds	r2, r7, #4
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2302      	movs	r3, #2
 800147e:	21d6      	movs	r1, #214	; 0xd6
 8001480:	485a      	ldr	r0, [pc, #360]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 8001482:	f00a feb3 	bl	800c1ec <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 8001486:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <_Z8IMU_Taskv+0x1e8>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e0a2      	b.n	80015d4 <_Z8IMU_Taskv+0x1d4>
	}
	else
	{
		uint8_t status = 0u;
 800148e:	2300      	movs	r3, #0
 8001490:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 8001492:	231e      	movs	r3, #30
 8001494:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8001496:	1cba      	adds	r2, r7, #2
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	21d6      	movs	r1, #214	; 0xd6
 80014a0:	4852      	ldr	r0, [pc, #328]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 80014a2:	f00a fea3 	bl	800c1ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 80014a6:	1cfa      	adds	r2, r7, #3
 80014a8:	2364      	movs	r3, #100	; 0x64
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	21d7      	movs	r1, #215	; 0xd7
 80014b0:	484e      	ldr	r0, [pc, #312]	; (80015ec <_Z8IMU_Taskv+0x1ec>)
 80014b2:	f00a ff8f 	bl	800c3d4 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d053      	beq.n	8001568 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 80014c0:	2028      	movs	r0, #40	; 0x28
 80014c2:	f7ff ff7b 	bl	80013bc <_Z15readByteFromIMUh>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 80014ca:	2029      	movs	r0, #41	; 0x29
 80014cc:	f7ff ff76 	bl	80013bc <_Z15readByteFromIMUh>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	021b      	lsls	r3, r3, #8
 80014d8:	b21a      	sxth	r2, r3
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ea:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80015f0 <_Z8IMU_Taskv+0x1f0>
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 80014f8:	202a      	movs	r0, #42	; 0x2a
 80014fa:	f7ff ff5f 	bl	80013bc <_Z15readByteFromIMUh>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 8001502:	202a      	movs	r0, #42	; 0x2a
 8001504:	f7ff ff5a 	bl	80013bc <_Z15readByteFromIMUh>
 8001508:	4603      	mov	r3, r0
 800150a:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001522:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80015f0 <_Z8IMU_Taskv+0x1f0>
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 800152c:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 8001530:	202c      	movs	r0, #44	; 0x2c
 8001532:	f7ff ff43 	bl	80013bc <_Z15readByteFromIMUh>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 800153a:	202c      	movs	r0, #44	; 0x2c
 800153c:	f7ff ff3e 	bl	80013bc <_Z15readByteFromIMUh>
 8001540:	4603      	mov	r3, r0
 8001542:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80015f0 <_Z8IMU_Taskv+0x1f0>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 8001564:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d030      	beq.n	80015d4 <_Z8IMU_Taskv+0x1d4>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 8001572:	2026      	movs	r0, #38	; 0x26
 8001574:	f7ff ff22 	bl	80013bc <_Z15readByteFromIMUh>
 8001578:	4603      	mov	r3, r0
 800157a:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 800157c:	2027      	movs	r0, #39	; 0x27
 800157e:	f7ff ff1d 	bl	80013bc <_Z15readByteFromIMUh>
 8001582:	4603      	mov	r3, r0
 8001584:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453;
 8001586:	7b3b      	ldrb	r3, [r7, #12]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21b      	sxth	r3, r3
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015f8 <_Z8IMU_Taskv+0x1f8>
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80015fc <_Z8IMU_Taskv+0x1fc>
 80015a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ac:	ee16 0a90 	vmov	r0, s13
 80015b0:	f7fe ffbc 	bl	800052c <__aeabi_f2d>
 80015b4:	a30a      	add	r3, pc, #40	; (adr r3, 80015e0 <_Z8IMU_Taskv+0x1e0>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f80f 	bl	80005dc <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fab9 	bl	8000b3c <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <_Z8IMU_Taskv+0x1f4>)
 80015ce:	60d3      	str	r3, [r2, #12]
 80015d0:	e000      	b.n	80015d4 <_Z8IMU_Taskv+0x1d4>
			return;
 80015d2:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	00de4c51 	.word	0x00de4c51
 80015e4:	3f91df33 	.word	0x3f91df33
 80015e8:	20000145 	.word	0x20000145
 80015ec:	20000310 	.word	0x20000310
 80015f0:	3d79db23 	.word	0x3d79db23
 80015f4:	20000148 	.word	0x20000148
 80015f8:	407423e2 	.word	0x407423e2
 80015fc:	447a0000 	.word	0x447a0000

08001600 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);

}

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	f00a fd25 	bl	800c068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3302      	adds	r3, #2
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	f00a fd1b 	bl	800c068 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
 8001636:	e011      	b.n	800165c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 8001646:	f107 0116 	add.w	r1, r7, #22
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	2201      	movs	r2, #1
 8001650:	482d      	ldr	r0, [pc, #180]	; (8001708 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8001652:	f00d fba0 	bl	800ed96 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	3301      	adds	r3, #1
 800165a:	75fb      	strb	r3, [r7, #23]
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d9ea      	bls.n	8001638 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	4619      	mov	r1, r3
 800166e:	f00a fcfb 	bl	800c068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	f00a fcf3 	bl	800c068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	f00a fceb 	bl	800c068 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
 8001696:	e011      	b.n	80016bc <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	fa22 f303 	lsr.w	r3, r2, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 80016a6:	f107 0115 	add.w	r1, r7, #21
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	2201      	movs	r2, #1
 80016b0:	4815      	ldr	r0, [pc, #84]	; (8001708 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 80016b2:	f00d fb70 	bl	800ed96 <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	3301      	adds	r3, #1
 80016ba:	75fb      	strb	r3, [r7, #23]
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d9ea      	bls.n	8001698 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3304      	adds	r3, #4
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	3302      	adds	r3, #2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4619      	mov	r1, r3
 80016d2:	f00a fcc9 	bl	800c068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3302      	adds	r3, #2
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	f00a fcbf 	bl	800c068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3304      	adds	r3, #4
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	3302      	adds	r3, #2
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	f00a fcb5 	bl	800c068 <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200005ac 	.word	0x200005ac

0800170c <_Z14LineSensorTaskv>:
		HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
	}

}
void LineSensorTask(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af02      	add	r7, sp, #8
#ifdef LINE_SENSOR_LED_TEST
	static uint32_t leds_front = 1u;
	static uint32_t leds_rear = 0x80000000;

	leds_front = leds_front << 1u;
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <_Z14LineSensorTaskv+0x10c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <_Z14LineSensorTaskv+0x10c>)
 800171a:	6013      	str	r3, [r2, #0]
	leds_rear = leds_rear >> 1u;
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <_Z14LineSensorTaskv+0x110>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	085b      	lsrs	r3, r3, #1
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <_Z14LineSensorTaskv+0x110>)
 8001724:	6013      	str	r3, [r2, #0]
	if(leds_front == 0u)
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <_Z14LineSensorTaskv+0x10c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <_Z14LineSensorTaskv+0x30>
	{
		leds_front = 1u;
 800172e:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <_Z14LineSensorTaskv+0x10c>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
		leds_rear = 0x80000000;
 8001734:	4b39      	ldr	r3, [pc, #228]	; (800181c <_Z14LineSensorTaskv+0x110>)
 8001736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800173a:	601a      	str	r2, [r3, #0]
	}
	//TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, leds_front, leds_rear);

	//infra led test
	TurnOnLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_oe_pins, 0x00000000, 0x80000001);
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <_Z14LineSensorTaskv+0x114>)
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4b37      	ldr	r3, [pc, #220]	; (8001824 <_Z14LineSensorTaskv+0x118>)
 8001746:	4a38      	ldr	r2, [pc, #224]	; (8001828 <_Z14LineSensorTaskv+0x11c>)
 8001748:	4938      	ldr	r1, [pc, #224]	; (800182c <_Z14LineSensorTaskv+0x120>)
 800174a:	4839      	ldr	r0, [pc, #228]	; (8001830 <_Z14LineSensorTaskv+0x124>)
 800174c:	f7ff ff58 	bl	8001600 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//TurnOffInfraLEDs(infra_oe_ports, infra_oe_pins);
	uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <_Z14LineSensorTaskv+0x128>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	60bb      	str	r3, [r7, #8]
	while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8001758:	bf00      	nop
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <_Z14LineSensorTaskv+0x128>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2bf9      	cmp	r3, #249	; 0xf9
 8001766:	bf94      	ite	ls
 8001768:	2301      	movls	r3, #1
 800176a:	2300      	movhi	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f3      	bne.n	800175a <_Z14LineSensorTaskv+0x4e>
	uint8_t i,j;
	uint8_t tmp[2] = {0, 7<<3u};
 8001772:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001776:	80bb      	strh	r3, [r7, #4]
			while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);

		}
		HAL_GPIO_WritePin(rear_adc_cs_ports[i], rear_adc_cs_pins[i], GPIO_PIN_SET);
	}*/
	for(i = 0; i < 32; ++i)
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e027      	b.n	80017ce <_Z14LineSensorTaskv+0xc2>
	{
		HAL_GPIO_WritePin(ADCR4_CS_GPIO_Port, ADCR4_CS_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001784:	482c      	ldr	r0, [pc, #176]	; (8001838 <_Z14LineSensorTaskv+0x12c>)
 8001786:	f00a fc6f 	bl	800c068 <HAL_GPIO_WritePin>
		//HAL_SPI_TransmitReceive(&hspi1, tmp, &infra_adc_data[0], 2, HAL_MAX_DELAY);
		HAL_SPI_TransmitReceive(&hspi1, tmp, &infra_adc_data[i*2], 1, HAL_MAX_DELAY);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4a2b      	ldr	r2, [pc, #172]	; (800183c <_Z14LineSensorTaskv+0x130>)
 8001790:	441a      	add	r2, r3
 8001792:	1d39      	adds	r1, r7, #4
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	4828      	ldr	r0, [pc, #160]	; (8001840 <_Z14LineSensorTaskv+0x134>)
 800179e:	f00d fc68 	bl	800f072 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(ADCR4_CS_GPIO_Port, ADCR4_CS_Pin, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <_Z14LineSensorTaskv+0x12c>)
 80017aa:	f00a fc5d 	bl	800c068 <HAL_GPIO_WritePin>
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 80017ae:	bf00      	nop
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <_Z14LineSensorTaskv+0x128>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2bf9      	cmp	r3, #249	; 0xf9
 80017bc:	bf94      	ite	ls
 80017be:	2301      	movls	r3, #1
 80017c0:	2300      	movhi	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f3      	bne.n	80017b0 <_Z14LineSensorTaskv+0xa4>
	for(i = 0; i < 32; ++i)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3301      	adds	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b1f      	cmp	r3, #31
 80017d2:	d9d4      	bls.n	800177e <_Z14LineSensorTaskv+0x72>
	}


	for(i = 0; i < 32; ++i)
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	e015      	b.n	8001806 <_Z14LineSensorTaskv+0xfa>
	{
		infra_adc_values_test[i] = (uint16_t)(infra_adc_data[2*i] << 8u) | (infra_adc_data[2*i + 1]);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <_Z14LineSensorTaskv+0x130>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b299      	uxth	r1, r3
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a13      	ldr	r2, [pc, #76]	; (800183c <_Z14LineSensorTaskv+0x130>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	b291      	uxth	r1, r2
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_Z14LineSensorTaskv+0x138>)
 80017fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i = 0; i < 32; ++i)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b1f      	cmp	r3, #31
 800180a:	d9e6      	bls.n	80017da <_Z14LineSensorTaskv+0xce>
	ls_data.position_front /= 528.0f;
	ls_data.position_rear /= 528.0f;


#endif
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000048 	.word	0x20000048
 800181c:	2000004c 	.word	0x2000004c
 8001820:	80000001 	.word	0x80000001
 8001824:	20000044 	.word	0x20000044
 8001828:	2000003c 	.word	0x2000003c
 800182c:	20000038 	.word	0x20000038
 8001830:	20000030 	.word	0x20000030
 8001834:	20000758 	.word	0x20000758
 8001838:	42020c00 	.word	0x42020c00
 800183c:	200001a0 	.word	0x200001a0
 8001840:	20000548 	.word	0x20000548
 8001844:	20000160 	.word	0x20000160

08001848 <_Z16MotorControlTaskv>:
extern TIM_HandleTypeDef htim5;

float pi_integral_error = 0;

void MotorControlTask()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	2108      	movs	r1, #8
 8001852:	4835      	ldr	r0, [pc, #212]	; (8001928 <_Z16MotorControlTaskv+0xe0>)
 8001854:	f00a fc08 	bl	800c068 <HAL_GPIO_WritePin>
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <_Z16MotorControlTaskv+0xe4>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001864:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001930 <_Z16MotorControlTaskv+0xe8>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001934 <_Z16MotorControlTaskv+0xec>
 8001870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001874:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001878:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <_Z16MotorControlTaskv+0xf0>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <_Z16MotorControlTaskv+0xe4>)
 8001884:	885b      	ldrh	r3, [r3, #2]
 8001886:	ee07 3a90 	vmov	s15, r3
 800188a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800188e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001930 <_Z16MotorControlTaskv+0xe8>
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001934 <_Z16MotorControlTaskv+0xec>
 800189a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800193c <_Z16MotorControlTaskv+0xf4>
 80018a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80018a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001940 <_Z16MotorControlTaskv+0xf8>
 80018aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <_Z16MotorControlTaskv+0xf0>)
 80018b0:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 80018b4:	4b20      	ldr	r3, [pc, #128]	; (8001938 <_Z16MotorControlTaskv+0xf0>)
 80018b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <_Z16MotorControlTaskv+0xf0>)
 80018bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c4:	edc7 7a03 	vstr	s15, [r7, #12]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	60bb      	str	r3, [r7, #8]
	pi_integral_error = pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 80018cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80018d0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001944 <_Z16MotorControlTaskv+0xfc>
 80018d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <_Z16MotorControlTaskv+0x100>)
 80018da:	edc3 7a00 	vstr	s15, [r3]

	//float duty_cycle = pi_integral_error + pi_proportional_error;
	float duty_cycle = 0.6f;
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <_Z16MotorControlTaskv+0x104>)
 80018e0:	607b      	str	r3, [r7, #4]
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, duty_cycle * PWM_COUNTER_PREIOD);
 80018e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001950 <_Z16MotorControlTaskv+0x108>
 80018ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <_Z16MotorControlTaskv+0x10c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f6:	ee17 2a90 	vmov	r2, s15
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (duty_cycle * PWM_COUNTER_PREIOD));
 80018fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001900:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001950 <_Z16MotorControlTaskv+0x108>
 8001904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001908:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001950 <_Z16MotorControlTaskv+0x108>
 800190c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_Z16MotorControlTaskv+0x10c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001918:	ee17 2a90 	vmov	r2, s15
 800191c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	42021400 	.word	0x42021400
 800192c:	20000104 	.word	0x20000104
 8001930:	45800000 	.word	0x45800000
 8001934:	40533333 	.word	0x40533333
 8001938:	200001e0 	.word	0x200001e0
 800193c:	3fd47ae1 	.word	0x3fd47ae1
 8001940:	3c0ce704 	.word	0x3c0ce704
 8001944:	43480000 	.word	0x43480000
 8001948:	200001f4 	.word	0x200001f4
 800194c:	3f19999a 	.word	0x3f19999a
 8001950:	44e54000 	.word	0x44e54000
 8001954:	2000070c 	.word	0x2000070c

08001958 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 800195c:	220c      	movs	r2, #12
 800195e:	4903      	ldr	r1, [pc, #12]	; (800196c <_Z10Radio_Initv+0x14>)
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <_Z10Radio_Initv+0x18>)
 8001962:	f00f fdcd 	bl	8011500 <HAL_UART_Receive_IT>

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001f8 	.word	0x200001f8
 8001970:	200003f8 	.word	0x200003f8

08001974 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af02      	add	r7, sp, #8
 800197a:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 800197c:	220c      	movs	r2, #12
 800197e:	4922      	ldr	r1, [pc, #136]	; (8001a08 <HAL_UART_RxCpltCallback+0x94>)
 8001980:	4822      	ldr	r0, [pc, #136]	; (8001a0c <HAL_UART_RxCpltCallback+0x98>)
 8001982:	f00f fdbd 	bl	8011500 <HAL_UART_Receive_IT>
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e009      	b.n	80019a0 <HAL_UART_RxCpltCallback+0x2c>
    {
    	if(radio_rxBuffer[i] == '\r')
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_UART_RxCpltCallback+0x94>)
 8001990:	5cd3      	ldrb	r3, [r2, r3]
 8001992:	2b0d      	cmp	r3, #13
 8001994:	d101      	bne.n	800199a <HAL_UART_RxCpltCallback+0x26>
    	{
    		length = i;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3301      	adds	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	2b0b      	cmp	r3, #11
 80019a4:	d9f2      	bls.n	800198c <HAL_UART_RxCpltCallback+0x18>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 80019a6:	7bbb      	ldrb	r3, [r7, #14]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d103      	bne.n	80019b4 <HAL_UART_RxCpltCallback+0x40>
    {
    	countdown_value = radio_rxBuffer[0];
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_UART_RxCpltCallback+0x94>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_UART_RxCpltCallback+0x9c>)
 80019b2:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d115      	bne.n	80019e6 <HAL_UART_RxCpltCallback+0x72>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 80019ba:	4913      	ldr	r1, [pc, #76]	; (8001a08 <HAL_UART_RxCpltCallback+0x94>)
 80019bc:	4815      	ldr	r0, [pc, #84]	; (8001a14 <HAL_UART_RxCpltCallback+0xa0>)
 80019be:	f7fe fc3f 	bl	8000240 <strcmp>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <HAL_UART_RxCpltCallback+0x5c>
    	{
    		flood_active = true;
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_UART_RxCpltCallback+0xa4>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e010      	b.n	80019f2 <HAL_UART_RxCpltCallback+0x7e>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_UART_RxCpltCallback+0xa8>)
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_UART_RxCpltCallback+0xac>)
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_RxCpltCallback+0xb0>)
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_UART_RxCpltCallback+0xb4>)
 80019dc:	4913      	ldr	r1, [pc, #76]	; (8001a2c <HAL_UART_RxCpltCallback+0xb8>)
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <HAL_UART_RxCpltCallback+0x94>)
 80019e0:	f015 fda8 	bl	8017534 <siscanf>
 80019e4:	e005      	b.n	80019f2 <HAL_UART_RxCpltCallback+0x7e>
    	}
    }

    else
    {
    	flood_counter++;
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_UART_RxCpltCallback+0xbc>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_UART_RxCpltCallback+0xbc>)
 80019f0:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <HAL_UART_RxCpltCallback+0xbc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b0a      	cmp	r3, #10
 80019f8:	d902      	bls.n	8001a00 <HAL_UART_RxCpltCallback+0x8c>
    {
    	flood_active = false;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_UART_RxCpltCallback+0xa4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
    }

}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200001f8 	.word	0x200001f8
 8001a0c:	200003f8 	.word	0x200003f8
 8001a10:	20000050 	.word	0x20000050
 8001a14:	08018138 	.word	0x08018138
 8001a18:	20000204 	.word	0x20000204
 8001a1c:	2000020c 	.word	0x2000020c
 8001a20:	20000208 	.word	0x20000208
 8001a24:	20000207 	.word	0x20000207
 8001a28:	20000206 	.word	0x20000206
 8001a2c:	08018140 	.word	0x08018140
 8001a30:	20000205 	.word	0x20000205

08001a34 <_Z16SetSteeringAnglef>:
#include "main.h"

extern TIM_HandleTypeDef htim8;
/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + ((angle)/ 90.0f * SERVO_RANGE);
 8001a3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a42:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001a78 <_Z16SetSteeringAnglef+0x44>
 8001a46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a4a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001a7c <_Z16SetSteeringAnglef+0x48>
 8001a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a52:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a7c <_Z16SetSteeringAnglef+0x48>
 8001a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5e:	ee17 3a90 	vmov	r3, s15
 8001a62:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <_Z16SetSteeringAnglef+0x4c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	89fa      	ldrh	r2, [r7, #14]
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	42b40000 	.word	0x42b40000
 8001a7c:	44bb8000 	.word	0x44bb8000
 8001a80:	200007a4 	.word	0x200007a4

08001a84 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	2300      	movs	r3, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aba:	d205      	bcs.n	8001ac8 <_ZSt16__deque_buf_sizej+0x1c>
 8001abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	e000      	b.n	8001aca <_ZSt16__deque_buf_sizej+0x1e>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fd71 	bl	80055c8 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f)
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001afc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b00:	ed87 1a00 	vstr	s2, [r7]
            : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	ed97 0a00 	vldr	s0, [r7]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f853 	bl	8001bd0 <_ZN3jlb8Odometry15normalize_angleEf>
 8001b2a:	eef0 7a40 	vmov.f32	s15, s0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	edc3 7a04 	vstr	s15, [r3, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3330      	adds	r3, #48	; 0x30
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ffb0 	bl	8001ad6 <_ZNSt5dequeIfSaIfEEC1Ev>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3358      	adds	r3, #88	; 0x58
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ffab 	bl	8001ad6 <_ZNSt5dequeIfSaIfEEC1Ev>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b9c:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f7fe fcc3 	bl	800052c <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ed97 1b00 	vldr	d1, [r7]
 8001bae:	ec43 2b10 	vmov	d0, r2, r3
 8001bb2:	f014 fb7b 	bl	80162ac <fmod>
 8001bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bba:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc2:	eef0 0a67 	vmov.f32	s1, s15
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <_ZN3jlb8Odometry15normalize_angleEf>:
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
        }

        float normalize_angle(float angle)
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8001bdc:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001c38 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8001be0:	ed97 0a00 	vldr	s0, [r7]
 8001be4:	f7ff ffd5 	bl	8001b92 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001be8:	ec53 2b10 	vmov	r2, r3, d0
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ffa4 	bl	8000b3c <__aeabi_d2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f)
 8001bf8:	edd7 7a00 	vldr	s15, [r7]
 8001bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d50f      	bpl.n	8001c26 <_ZN3jlb8Odometry15normalize_angleEf+0x56>
            {
                angle += 2.0f * M_PI;
 8001c06:	6838      	ldr	r0, [r7, #0]
 8001c08:	f7fe fc90 	bl	800052c <__aeabi_f2d>
 8001c0c:	a30a      	add	r3, pc, #40	; (adr r3, 8001c38 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fb2d 	bl	8000270 <__adddf3>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff8d 	bl	8000b3c <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	603b      	str	r3, [r7, #0]
            }
            return angle;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	ee07 3a90 	vmov	s15, r3
        }
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	54442d18 	.word	0x54442d18
 8001c3c:	401921fb 	.word	0x401921fb

08001c40 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fccd 	bl	80055ea <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ffeb 	bl	8001c40 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction = Direction::STRAIGHT;
        Mission mission = Mission::LABYRINTH;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} {}
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2210      	movs	r2, #16
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2210      	movs	r2, #16
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3360      	adds	r3, #96	; 0x60
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffcb 	bl	8001c5a <_ZNSt6vectorIfSaIfEEC1Ev>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	336c      	adds	r3, #108	; 0x6c
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ffc6 	bl	8001c5a <_ZNSt6vectorIfSaIfEEC1Ev>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	679a      	str	r2, [r3, #120]	; 0x78
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>:
                const Controller &controller;
                const ASState &as_state;

#ifdef STM32
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_) : odometry(odometry_), controller(controller_), as_state(as_state_)
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
                {
                }
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f003 fc8b 	bl	800565a <_ZNSaIN3jlb4EdgeEED1Ev>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fc6e 	bl	800563a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffeb 	bl	8001d4e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_ZN3jlb4NodeC1Ecff>:
        char name;
        float x;
        float y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d90:	edc7 0a00 	vstr	s1, [r7]
 8001d94:	72fb      	strb	r3, [r7, #11]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	7afa      	ldrb	r2, [r7, #11]
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	330c      	adds	r3, #12
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ffdb 	bl	8001d68 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	330c      	adds	r3, #12
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fc6f 	bl	80056ac <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3308      	adds	r3, #8
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fcb9 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f)
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b08d      	sub	sp, #52	; 0x34
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6178      	str	r0, [r7, #20]
 8001dfc:	60fa      	str	r2, [r7, #12]
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	74fb      	strb	r3, [r7, #19]
        {
            edges.push_back(Edge{name_, direction_, prev_nodes_, weight_});
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f103 040c 	add.w	r4, r3, #12
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	763b      	strb	r3, [r7, #24]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	61fb      	str	r3, [r7, #28]
 8001e16:	f107 0318 	add.w	r3, r7, #24
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fc5f 	bl	80056e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e28:	f107 0318 	add.w	r3, r7, #24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f003 fcaf 	bl	8005792 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ffcd 	bl	8001dd8 <_ZN3jlb4EdgeD1Ev>
        }
 8001e3e:	bf00      	nop
 8001e40:	3734      	adds	r7, #52	; 0x34
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}

08001e46 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fcaf 	bl	80057b4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ffeb 	bl	8001e46 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	0000      	movs	r0, r0
 8001e7c:	0000      	movs	r0, r0
	...

08001e80 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001e8c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001e90:	6018      	str	r0, [r3, #0]
        {
 8001e92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001e96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ffdf 	bl	8001e60 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 8001ea2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001ea6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001eaa:	681c      	ldr	r4, [r3, #0]
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	eddf 0af3 	vldr	s1, [pc, #972]	; 8002280 <_ZN3jlb5GraphC1Ev+0x400>
 8001eb4:	ed9f 0af3 	vldr	s0, [pc, #972]	; 8002284 <_ZN3jlb5GraphC1Ev+0x404>
 8001eb8:	2141      	movs	r1, #65	; 0x41
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff61 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f003 fc84 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff73 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8001ed6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001eda:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001ede:	681c      	ldr	r4, [r3, #0]
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 8001ee8:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 8002284 <_ZN3jlb5GraphC1Ev+0x404>
 8001eec:	2142      	movs	r1, #66	; 0x42
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ff47 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4620      	mov	r0, r4
 8001efc:	f003 fc6a 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001f00:	f107 0320 	add.w	r3, r7, #32
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff59 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8001f0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001f12:	681c      	ldr	r4, [r3, #0]
 8001f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f18:	eddf 0adb 	vldr	s1, [pc, #876]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 8001f1c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001f20:	2143      	movs	r1, #67	; 0x43
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff2d 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001f28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f003 fc50 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001f34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff3f 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8001f3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f42:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001f46:	681c      	ldr	r4, [r3, #0]
 8001f48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f4c:	eddf 0acf 	vldr	s1, [pc, #828]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 8001f50:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001f54:	2144      	movs	r1, #68	; 0x44
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff13 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001f5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f60:	4619      	mov	r1, r3
 8001f62:	4620      	mov	r0, r4
 8001f64:	f003 fc36 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001f68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff25 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 8001f72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001f76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001f7a:	681c      	ldr	r4, [r3, #0]
 8001f7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f80:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001f84:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001f88:	2145      	movs	r1, #69	; 0x45
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fef9 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001f90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f94:	4619      	mov	r1, r3
 8001f96:	4620      	mov	r0, r4
 8001f98:	f003 fc1c 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001f9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff0b 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 8001fa6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001faa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001fae:	681c      	ldr	r4, [r3, #0]
 8001fb0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fb4:	eddf 0ab2 	vldr	s1, [pc, #712]	; 8002280 <_ZN3jlb5GraphC1Ev+0x400>
 8001fb8:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 8001fbc:	2146      	movs	r1, #70	; 0x46
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fedf 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001fc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f003 fc02 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8001fd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fef1 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8001fda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8001fde:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8001fe2:	681c      	ldr	r4, [r3, #0]
 8001fe4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fe8:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 8001fec:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 8001ff0:	2147      	movs	r1, #71	; 0x47
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fec5 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8001ff8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4620      	mov	r0, r4
 8002000:	f003 fbe8 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002004:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fed7 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 800200e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002012:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800201c:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 8002020:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 8002024:	2148      	movs	r1, #72	; 0x48
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff feab 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 800202c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002030:	4619      	mov	r1, r3
 8002032:	4620      	mov	r0, r4
 8002034:	f003 fbce 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002038:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff febd 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8002042:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002046:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800204a:	681c      	ldr	r4, [r3, #0]
 800204c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002050:	eddf 0a8e 	vldr	s1, [pc, #568]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 8002054:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 8002058:	2149      	movs	r1, #73	; 0x49
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fe91 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002060:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002064:	4619      	mov	r1, r3
 8002066:	4620      	mov	r0, r4
 8002068:	f003 fbb4 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800206c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fea3 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 8002076:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800207a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800207e:	681c      	ldr	r4, [r3, #0]
 8002080:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002084:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8002088:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 800208c:	214a      	movs	r1, #74	; 0x4a
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fe77 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002094:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002098:	4619      	mov	r1, r3
 800209a:	4620      	mov	r0, r4
 800209c:	f003 fb9a 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80020a0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fe89 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 80020aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80020ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80020b2:	681c      	ldr	r4, [r3, #0]
 80020b4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020b8:	eddf 0a71 	vldr	s1, [pc, #452]	; 8002280 <_ZN3jlb5GraphC1Ev+0x400>
 80020bc:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002280 <_ZN3jlb5GraphC1Ev+0x400>
 80020c0:	214b      	movs	r1, #75	; 0x4b
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fe5d 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 80020c8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020cc:	4619      	mov	r1, r3
 80020ce:	4620      	mov	r0, r4
 80020d0:	f003 fb80 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80020d4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe6f 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 80020de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80020e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80020e6:	681c      	ldr	r4, [r3, #0]
 80020e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020ec:	eddf 0a69 	vldr	s1, [pc, #420]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 80020f0:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8002280 <_ZN3jlb5GraphC1Ev+0x400>
 80020f4:	214c      	movs	r1, #76	; 0x4c
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe43 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 80020fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002100:	4619      	mov	r1, r3
 8002102:	4620      	mov	r0, r4
 8002104:	f003 fb66 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002108:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fe55 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 8002112:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002116:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800211a:	681c      	ldr	r4, [r3, #0]
 800211c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002120:	eddf 0a59 	vldr	s1, [pc, #356]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 8002124:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 8002128:	214d      	movs	r1, #77	; 0x4d
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fe29 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002130:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002134:	4619      	mov	r1, r3
 8002136:	4620      	mov	r0, r4
 8002138:	f003 fb4c 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800213c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fe3b 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 8002146:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800214a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800214e:	681c      	ldr	r4, [r3, #0]
 8002150:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002154:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 8002158:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 800215c:	214e      	movs	r1, #78	; 0x4e
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fe0f 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002164:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002168:	4619      	mov	r1, r3
 800216a:	4620      	mov	r0, r4
 800216c:	f003 fb32 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002170:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fe21 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 800217a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800217e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002182:	681c      	ldr	r4, [r3, #0]
 8002184:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002188:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800218c:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 8002190:	214f      	movs	r1, #79	; 0x4f
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fdf5 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002198:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800219c:	4619      	mov	r1, r3
 800219e:	4620      	mov	r0, r4
 80021a0:	f003 fb18 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80021a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fe07 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 80021ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80021b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80021b6:	681c      	ldr	r4, [r3, #0]
 80021b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80021bc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80021c0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80021c4:	2150      	movs	r1, #80	; 0x50
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fddb 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 80021cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80021d0:	4619      	mov	r1, r3
 80021d2:	4620      	mov	r0, r4
 80021d4:	f003 fafe 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80021d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fded 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 80021e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80021e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80021ea:	681c      	ldr	r4, [r3, #0]
 80021ec:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80021f0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8002288 <_ZN3jlb5GraphC1Ev+0x408>
 80021f4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80021f8:	2151      	movs	r1, #81	; 0x51
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fdc1 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002200:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002204:	4619      	mov	r1, r3
 8002206:	4620      	mov	r0, r4
 8002208:	f003 fae4 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800220c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fdd3 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 8002216:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800221a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800221e:	681c      	ldr	r4, [r3, #0]
 8002220:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002224:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002280 <_ZN3jlb5GraphC1Ev+0x400>
 8002228:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800222c:	2152      	movs	r1, #82	; 0x52
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fda7 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002234:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002238:	4619      	mov	r1, r3
 800223a:	4620      	mov	r0, r4
 800223c:	f003 faca 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002240:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fdb9 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 800224a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800224e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002252:	681c      	ldr	r4, [r3, #0]
 8002254:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002258:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800228c <_ZN3jlb5GraphC1Ev+0x40c>
 800225c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002260:	2153      	movs	r1, #83	; 0x53
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fd8d 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002268:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800226c:	4619      	mov	r1, r3
 800226e:	4620      	mov	r0, r4
 8002270:	f003 fab0 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002274:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fd9f 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
 800227e:	e011      	b.n	80022a4 <_ZN3jlb5GraphC1Ev+0x424>
 8002280:	40866667 	.word	0x40866667
 8002284:	40d33334 	.word	0x40d33334
 8002288:	40666667 	.word	0x40666667
 800228c:	4099999a 	.word	0x4099999a
 8002290:	40d33334 	.word	0x40d33334
 8002294:	40accccd 	.word	0x40accccd
 8002298:	4019999a 	.word	0x4019999a
 800229c:	40866667 	.word	0x40866667
 80022a0:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 80022a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022a8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80022ac:	681c      	ldr	r4, [r3, #0]
 80022ae:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80022b2:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 80022b6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80022ba:	2154      	movs	r1, #84	; 0x54
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fd60 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 80022c2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4620      	mov	r0, r4
 80022ca:	f003 fa83 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80022ce:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fd72 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 80022d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80022dc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80022e0:	681c      	ldr	r4, [r3, #0]
 80022e2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80022e6:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8002290 <_ZN3jlb5GraphC1Ev+0x410>
 80022ea:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80022ee:	2155      	movs	r1, #85	; 0x55
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fd46 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 80022f6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80022fa:	4619      	mov	r1, r3
 80022fc:	4620      	mov	r0, r4
 80022fe:	f003 fa69 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002302:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd58 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 800230c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002310:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002314:	681c      	ldr	r4, [r3, #0]
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 800229c <_ZN3jlb5GraphC1Ev+0x41c>
 800231e:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8002298 <_ZN3jlb5GraphC1Ev+0x418>
 8002322:	2156      	movs	r1, #86	; 0x56
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fd2c 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	4619      	mov	r1, r3
 8002330:	4620      	mov	r0, r4
 8002332:	f003 fa4f 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fd3e 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8002340:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002344:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002348:	681c      	ldr	r4, [r3, #0]
 800234a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800234e:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8002294 <_ZN3jlb5GraphC1Ev+0x414>
 8002352:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8002298 <_ZN3jlb5GraphC1Ev+0x418>
 8002356:	2157      	movs	r1, #87	; 0x57
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fd12 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 800235e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002362:	4619      	mov	r1, r3
 8002364:	4620      	mov	r0, r4
 8002366:	f003 fa35 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800236a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fd24 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8002374:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002378:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800237c:	681c      	ldr	r4, [r3, #0]
 800237e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002382:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 800229c <_ZN3jlb5GraphC1Ev+0x41c>
 8002386:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 80022a0 <_ZN3jlb5GraphC1Ev+0x420>
 800238a:	2158      	movs	r1, #88	; 0x58
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fcf8 	bl	8001d82 <_ZN3jlb4NodeC1Ecff>
 8002392:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002396:	4619      	mov	r1, r3
 8002398:	4620      	mov	r0, r4
 800239a:	f003 fa1b 	bl	80057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800239e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fd0a 	bl	8001dbc <_ZN3jlb4NodeD1Ev>

            const auto UNIT = SQUARE_LENGTH;
 80023a8:	4be9      	ldr	r3, [pc, #932]	; (8002750 <_ZN3jlb5GraphC1Ev+0x8d0>)
 80023aa:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 80023ae:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 80023b0:	a3e5      	add	r3, pc, #916	; (adr r3, 8002748 <_ZN3jlb5GraphC1Ev+0x8c8>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 80023ba:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 80023be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023c2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023c6:	2141      	movs	r1, #65	; 0x41
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f002 ff7f 	bl	80052cc <_ZN3jlb5GraphixEc>
 80023ce:	4604      	mov	r4, r0
 80023d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023d4:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80023d8:	4ade      	ldr	r2, [pc, #888]	; (8002754 <_ZN3jlb5GraphC1Ev+0x8d4>)
 80023da:	8812      	ldrh	r2, [r2, #0]
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023e2:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80023e6:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80023f0:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80023f4:	2202      	movs	r2, #2
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023fc:	4618      	mov	r0, r3
 80023fe:	f013 ff42 	bl	8016286 <_ZNSaIcEC1Ev>
 8002402:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002406:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800240a:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 800240e:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8002412:	ca06      	ldmia	r2, {r1, r2}
 8002414:	f003 f9ef 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002418:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800241c:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8002760 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002420:	2200      	movs	r2, #0
 8002422:	2143      	movs	r1, #67	; 0x43
 8002424:	4620      	mov	r0, r4
 8002426:	f7ff fce5 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800242a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f994 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002434:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002438:	4618      	mov	r0, r3
 800243a:	f013 ff26 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 800243e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002442:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002446:	2141      	movs	r1, #65	; 0x41
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f002 ff3f 	bl	80052cc <_ZN3jlb5GraphixEc>
 800244e:	4604      	mov	r4, r0
 8002450:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002454:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8002458:	2243      	movs	r2, #67	; 0x43
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002460:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8002464:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800246e:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8002472:	2201      	movs	r2, #1
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800247a:	4618      	mov	r0, r3
 800247c:	f013 ff03 	bl	8016286 <_ZNSaIcEC1Ev>
 8002480:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8002484:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002488:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 800248c:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8002490:	ca06      	ldmia	r2, {r1, r2}
 8002492:	f003 f9b0 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002496:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800249a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8002758 <_ZN3jlb5GraphC1Ev+0x8d8>
 800249e:	2202      	movs	r2, #2
 80024a0:	2142      	movs	r1, #66	; 0x42
 80024a2:	4620      	mov	r0, r4
 80024a4:	f7ff fca6 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80024a8:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 f955 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80024b2:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80024b6:	4618      	mov	r0, r3
 80024b8:	f013 fee7 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 80024bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024c0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024c4:	2141      	movs	r1, #65	; 0x41
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	f002 ff00 	bl	80052cc <_ZN3jlb5GraphixEc>
 80024cc:	4604      	mov	r4, r0
 80024ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024d2:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 80024d6:	2243      	movs	r2, #67	; 0x43
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024de:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80024e2:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80024ec:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80024f0:	2201      	movs	r2, #1
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80024f8:	4618      	mov	r0, r3
 80024fa:	f013 fec4 	bl	8016286 <_ZNSaIcEC1Ev>
 80024fe:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002502:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002506:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 800250a:	f507 7020 	add.w	r0, r7, #640	; 0x280
 800250e:	ca06      	ldmia	r2, {r1, r2}
 8002510:	f003 f971 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002514:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8002518:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002760 <_ZN3jlb5GraphC1Ev+0x8e0>
 800251c:	2201      	movs	r2, #1
 800251e:	2144      	movs	r1, #68	; 0x44
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff fc67 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002526:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f916 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002530:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002534:	4618      	mov	r0, r3
 8002536:	f013 fea8 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 800253a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800253e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002542:	2142      	movs	r1, #66	; 0x42
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	f002 fec1 	bl	80052cc <_ZN3jlb5GraphixEc>
 800254a:	4604      	mov	r4, r0
 800254c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002550:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8002554:	2245      	movs	r2, #69	; 0x45
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800255c:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8002560:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800256a:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 800256e:	2201      	movs	r2, #1
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002576:	4618      	mov	r0, r3
 8002578:	f013 fe85 	bl	8016286 <_ZNSaIcEC1Ev>
 800257c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8002580:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002584:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8002588:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 800258c:	ca06      	ldmia	r2, {r1, r2}
 800258e:	f003 f932 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002592:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8002596:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002758 <_ZN3jlb5GraphC1Ev+0x8d8>
 800259a:	2202      	movs	r2, #2
 800259c:	2141      	movs	r1, #65	; 0x41
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff fc28 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80025a4:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80025a8:	4618      	mov	r0, r3
 80025aa:	f003 f8d7 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80025ae:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80025b2:	4618      	mov	r0, r3
 80025b4:	f013 fe69 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 80025b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025bc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025c0:	2142      	movs	r1, #66	; 0x42
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	f002 fe82 	bl	80052cc <_ZN3jlb5GraphixEc>
 80025c8:	4604      	mov	r4, r0
 80025ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025ce:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 80025d2:	4a62      	ldr	r2, [pc, #392]	; (800275c <_ZN3jlb5GraphC1Ev+0x8dc>)
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025dc:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80025e0:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80025ea:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 80025ee:	2202      	movs	r2, #2
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f013 fe45 	bl	8016286 <_ZNSaIcEC1Ev>
 80025fc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002600:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002604:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8002608:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 800260c:	ca06      	ldmia	r2, {r1, r2}
 800260e:	f003 f8f2 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002612:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002616:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8002760 <_ZN3jlb5GraphC1Ev+0x8e0>
 800261a:	2201      	movs	r2, #1
 800261c:	2145      	movs	r1, #69	; 0x45
 800261e:	4620      	mov	r0, r4
 8002620:	f7ff fbe8 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002624:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002628:	4618      	mov	r0, r3
 800262a:	f003 f897 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800262e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8002632:	4618      	mov	r0, r3
 8002634:	f013 fe29 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8002638:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800263c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002640:	2142      	movs	r1, #66	; 0x42
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	f002 fe42 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002648:	4604      	mov	r4, r0
 800264a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800264e:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8002652:	2245      	movs	r2, #69	; 0x45
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800265a:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 800265e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002668:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 800266c:	2201      	movs	r2, #1
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002674:	4618      	mov	r0, r3
 8002676:	f013 fe06 	bl	8016286 <_ZNSaIcEC1Ev>
 800267a:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 800267e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002682:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8002686:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 800268a:	ca06      	ldmia	r2, {r1, r2}
 800268c:	f003 f8b3 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002690:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8002694:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002760 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002698:	2200      	movs	r2, #0
 800269a:	2144      	movs	r1, #68	; 0x44
 800269c:	4620      	mov	r0, r4
 800269e:	f7ff fba9 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80026a2:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 f858 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80026ac:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80026b0:	4618      	mov	r0, r3
 80026b2:	f013 fdea 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 80026b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80026be:	2143      	movs	r1, #67	; 0x43
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	f002 fe03 	bl	80052cc <_ZN3jlb5GraphixEc>
 80026c6:	4604      	mov	r4, r0
 80026c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026cc:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 80026d0:	2246      	movs	r2, #70	; 0x46
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026d8:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80026dc:	f507 7241 	add.w	r2, r7, #772	; 0x304
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80026e6:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 80026ea:	2201      	movs	r2, #1
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80026f2:	4618      	mov	r0, r3
 80026f4:	f013 fdc7 	bl	8016286 <_ZNSaIcEC1Ev>
 80026f8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80026fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002700:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8002704:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8002708:	ca06      	ldmia	r2, {r1, r2}
 800270a:	f003 f874 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800270e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002712:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002760 <_ZN3jlb5GraphC1Ev+0x8e0>
 8002716:	2201      	movs	r2, #1
 8002718:	2141      	movs	r1, #65	; 0x41
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fb6a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002720:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002724:	4618      	mov	r0, r3
 8002726:	f003 f819 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800272a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800272e:	4618      	mov	r0, r3
 8002730:	f013 fdab 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8002734:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002738:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800273c:	2143      	movs	r1, #67	; 0x43
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f002 fdc4 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002744:	e00e      	b.n	8002764 <_ZN3jlb5GraphC1Ev+0x8e4>
 8002746:	bf00      	nop
 8002748:	460698c7 	.word	0x460698c7
 800274c:	3fee28c7 	.word	0x3fee28c7
 8002750:	3f19999a 	.word	0x3f19999a
 8002754:	08018158 	.word	0x08018158
 8002758:	3f99999a 	.word	0x3f99999a
 800275c:	0801815c 	.word	0x0801815c
 8002760:	3f71463a 	.word	0x3f71463a
 8002764:	4604      	mov	r4, r0
 8002766:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800276a:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 800276e:	2241      	movs	r2, #65	; 0x41
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002776:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 800277a:	f507 7248 	add.w	r2, r7, #800	; 0x320
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002784:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8002788:	2201      	movs	r2, #1
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002790:	4618      	mov	r0, r3
 8002792:	f013 fd78 	bl	8016286 <_ZNSaIcEC1Ev>
 8002796:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800279a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800279e:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 80027a2:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 80027a6:	ca06      	ldmia	r2, {r1, r2}
 80027a8:	f003 f825 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80027ac:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80027b0:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8002760 <_ZN3jlb5GraphC1Ev+0x8e0>
 80027b4:	2200      	movs	r2, #0
 80027b6:	2146      	movs	r1, #70	; 0x46
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff fb1b 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80027be:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 ffca 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80027c8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80027cc:	4618      	mov	r0, r3
 80027ce:	f013 fd5c 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 80027d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80027da:	2144      	movs	r1, #68	; 0x44
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	f002 fd75 	bl	80052cc <_ZN3jlb5GraphixEc>
 80027e2:	4604      	mov	r4, r0
 80027e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027e8:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 80027ec:	4ae5      	ldr	r2, [pc, #916]	; (8002b84 <_ZN3jlb5GraphC1Ev+0xd04>)
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	4611      	mov	r1, r2
 80027f2:	8019      	strh	r1, [r3, #0]
 80027f4:	3302      	adds	r3, #2
 80027f6:	0c12      	lsrs	r2, r2, #16
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80027fe:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8002802:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800280c:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8002810:	2203      	movs	r2, #3
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002818:	4618      	mov	r0, r3
 800281a:	f013 fd34 	bl	8016286 <_ZNSaIcEC1Ev>
 800281e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002822:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002826:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 800282a:	f507 704a 	add.w	r0, r7, #808	; 0x328
 800282e:	ca06      	ldmia	r2, {r1, r2}
 8002830:	f002 ffe1 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002834:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8002838:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8002b94 <_ZN3jlb5GraphC1Ev+0xd14>
 800283c:	2200      	movs	r2, #0
 800283e:	2141      	movs	r1, #65	; 0x41
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff fad7 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002846:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff86 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002850:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002854:	4618      	mov	r0, r3
 8002856:	f013 fd18 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 800285a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800285e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002862:	2144      	movs	r1, #68	; 0x44
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	f002 fd31 	bl	80052cc <_ZN3jlb5GraphixEc>
 800286a:	4604      	mov	r4, r0
 800286c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002870:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8002874:	4ac3      	ldr	r2, [pc, #780]	; (8002b84 <_ZN3jlb5GraphC1Ev+0xd04>)
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	4611      	mov	r1, r2
 800287a:	8019      	strh	r1, [r3, #0]
 800287c:	3302      	adds	r3, #2
 800287e:	0c12      	lsrs	r2, r2, #16
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002886:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 800288a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002894:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8002898:	2203      	movs	r2, #3
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80028a0:	4618      	mov	r0, r3
 80028a2:	f013 fcf0 	bl	8016286 <_ZNSaIcEC1Ev>
 80028a6:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80028aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80028ae:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 80028b2:	f507 7051 	add.w	r0, r7, #836	; 0x344
 80028b6:	ca06      	ldmia	r2, {r1, r2}
 80028b8:	f002 ff9d 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80028bc:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80028c0:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002b94 <_ZN3jlb5GraphC1Ev+0xd14>
 80028c4:	2201      	movs	r2, #1
 80028c6:	2142      	movs	r1, #66	; 0x42
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7ff fa93 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80028ce:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 ff42 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80028d8:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80028dc:	4618      	mov	r0, r3
 80028de:	f013 fcd4 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 80028e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80028ea:	2144      	movs	r1, #68	; 0x44
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	f002 fced 	bl	80052cc <_ZN3jlb5GraphixEc>
 80028f2:	4604      	mov	r4, r0
 80028f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80028f8:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 80028fc:	4aa2      	ldr	r2, [pc, #648]	; (8002b88 <_ZN3jlb5GraphC1Ev+0xd08>)
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002906:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 800290a:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002914:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8002918:	2202      	movs	r2, #2
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8002920:	4618      	mov	r0, r3
 8002922:	f013 fcb0 	bl	8016286 <_ZNSaIcEC1Ev>
 8002926:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800292a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800292e:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 8002932:	f507 7058 	add.w	r0, r7, #864	; 0x360
 8002936:	ca06      	ldmia	r2, {r1, r2}
 8002938:	f002 ff5d 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800293c:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002940:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002b94 <_ZN3jlb5GraphC1Ev+0xd14>
 8002944:	2200      	movs	r2, #0
 8002946:	2147      	movs	r1, #71	; 0x47
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff fa53 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800294e:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8002952:	4618      	mov	r0, r3
 8002954:	f002 ff02 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002958:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800295c:	4618      	mov	r0, r3
 800295e:	f013 fc94 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 8002962:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002966:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800296a:	2144      	movs	r1, #68	; 0x44
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f002 fcad 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002972:	4604      	mov	r4, r0
 8002974:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002978:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 800297c:	4a82      	ldr	r2, [pc, #520]	; (8002b88 <_ZN3jlb5GraphC1Ev+0xd08>)
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	801a      	strh	r2, [r3, #0]
 8002982:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002986:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 800298a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002994:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8002998:	2202      	movs	r2, #2
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80029a0:	4618      	mov	r0, r3
 80029a2:	f013 fc70 	bl	8016286 <_ZNSaIcEC1Ev>
 80029a6:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80029aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80029ae:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 80029b2:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 80029b6:	ca06      	ldmia	r2, {r1, r2}
 80029b8:	f002 ff1d 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80029bc:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80029c0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002b8c <_ZN3jlb5GraphC1Ev+0xd0c>
 80029c4:	2202      	movs	r2, #2
 80029c6:	2149      	movs	r1, #73	; 0x49
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fa13 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80029ce:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fec2 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80029d8:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80029dc:	4618      	mov	r0, r3
 80029de:	f013 fc54 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 80029e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80029ea:	2144      	movs	r1, #68	; 0x44
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	f002 fc6d 	bl	80052cc <_ZN3jlb5GraphixEc>
 80029f2:	4604      	mov	r4, r0
 80029f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80029f8:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 80029fc:	4a62      	ldr	r2, [pc, #392]	; (8002b88 <_ZN3jlb5GraphC1Ev+0xd08>)
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	801a      	strh	r2, [r3, #0]
 8002a02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a06:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002a0a:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a14:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8002a18:	2202      	movs	r2, #2
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f013 fc30 	bl	8016286 <_ZNSaIcEC1Ev>
 8002a26:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a2a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002a2e:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 8002a32:	f507 7066 	add.w	r0, r7, #920	; 0x398
 8002a36:	ca06      	ldmia	r2, {r1, r2}
 8002a38:	f002 fedd 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002a3c:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002a40:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8002b94 <_ZN3jlb5GraphC1Ev+0xd14>
 8002a44:	2201      	movs	r2, #1
 8002a46:	2146      	movs	r1, #70	; 0x46
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff f9d3 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002a4e:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8002a52:	4618      	mov	r0, r3
 8002a54:	f002 fe82 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002a58:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f013 fc14 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 8002a62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a66:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002a6a:	2145      	movs	r1, #69	; 0x45
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	f002 fc2d 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002a72:	4604      	mov	r4, r0
 8002a74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a78:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8002a7c:	4a44      	ldr	r2, [pc, #272]	; (8002b90 <_ZN3jlb5GraphC1Ev+0xd10>)
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	801a      	strh	r2, [r3, #0]
 8002a82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a86:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8002a8a:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002a94:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8002a98:	2202      	movs	r2, #2
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f013 fbf0 	bl	8016286 <_ZNSaIcEC1Ev>
 8002aa6:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002aaa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002aae:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 8002ab2:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 8002ab6:	ca06      	ldmia	r2, {r1, r2}
 8002ab8:	f002 fe9d 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002abc:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8002ac0:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8002b94 <_ZN3jlb5GraphC1Ev+0xd14>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2142      	movs	r1, #66	; 0x42
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff f993 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002ace:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fe42 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002ad8:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8002adc:	4618      	mov	r0, r3
 8002ade:	f013 fbd4 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8002ae2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ae6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002aea:	2145      	movs	r1, #69	; 0x45
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	f002 fbed 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002af2:	4604      	mov	r4, r0
 8002af4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002af8:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8002afc:	2242      	movs	r2, #66	; 0x42
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b04:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8002b08:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b12:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8002b16:	2201      	movs	r2, #1
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f013 fbb1 	bl	8016286 <_ZNSaIcEC1Ev>
 8002b24:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002b28:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002b2c:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8002b30:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 8002b34:	ca06      	ldmia	r2, {r1, r2}
 8002b36:	f002 fe5e 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002b3a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b3e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002b8c <_ZN3jlb5GraphC1Ev+0xd0c>
 8002b42:	2202      	movs	r2, #2
 8002b44:	214a      	movs	r1, #74	; 0x4a
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff f954 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002b4c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 fe03 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002b56:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f013 fb95 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8002b60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b64:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002b68:	2145      	movs	r1, #69	; 0x45
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	f002 fbae 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002b70:	4604      	mov	r4, r0
 8002b72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b76:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002b7a:	2242      	movs	r2, #66	; 0x42
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002b82:	e009      	b.n	8002b98 <_ZN3jlb5GraphC1Ev+0xd18>
 8002b84:	08018160 	.word	0x08018160
 8002b88:	08018164 	.word	0x08018164
 8002b8c:	3f99999a 	.word	0x3f99999a
 8002b90:	08018168 	.word	0x08018168
 8002b94:	3f71463a 	.word	0x3f71463a
 8002b98:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8002b9c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ba6:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8002baa:	2201      	movs	r2, #1
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f013 fb67 	bl	8016286 <_ZNSaIcEC1Ev>
 8002bb8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002bbc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002bc0:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8002bc4:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8002bc8:	ca06      	ldmia	r2, {r1, r2}
 8002bca:	f002 fe14 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002bce:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002bd2:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8002b94 <_ZN3jlb5GraphC1Ev+0xd14>
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	2147      	movs	r1, #71	; 0x47
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7ff f90a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002be0:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fdb9 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002bea:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f013 fb4b 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8002bf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002bf8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002bfc:	2146      	movs	r1, #70	; 0x46
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	f002 fb64 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002c04:	4604      	mov	r4, r0
 8002c06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c0a:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8002c0e:	4ae4      	ldr	r2, [pc, #912]	; (8002fa0 <_ZN3jlb5GraphC1Ev+0x1120>)
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4611      	mov	r1, r2
 8002c14:	8019      	strh	r1, [r3, #0]
 8002c16:	3302      	adds	r3, #2
 8002c18:	0c12      	lsrs	r2, r2, #16
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c20:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002c24:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c2e:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002c32:	2203      	movs	r2, #3
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f013 fb23 	bl	8016286 <_ZNSaIcEC1Ev>
 8002c40:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c44:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002c48:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8002c4c:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8002c50:	ca06      	ldmia	r2, {r1, r2}
 8002c52:	f002 fdd0 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002c56:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002c5a:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8002fa4 <_ZN3jlb5GraphC1Ev+0x1124>
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2143      	movs	r1, #67	; 0x43
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7ff f8c6 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002c68:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f002 fd75 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002c72:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c76:	4618      	mov	r0, r3
 8002c78:	f013 fb07 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 8002c7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c80:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002c84:	2146      	movs	r1, #70	; 0x46
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	f002 fb20 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002c92:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8002c96:	4ac4      	ldr	r2, [pc, #784]	; (8002fa8 <_ZN3jlb5GraphC1Ev+0x1128>)
 8002c98:	8812      	ldrh	r2, [r2, #0]
 8002c9a:	801a      	strh	r2, [r3, #0]
 8002c9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ca0:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8002ca4:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002cae:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f013 fae3 	bl	8016286 <_ZNSaIcEC1Ev>
 8002cc0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002cc4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002cc8:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8002ccc:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8002cd0:	ca06      	ldmia	r2, {r1, r2}
 8002cd2:	f002 fd90 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002cd6:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002cda:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002fa4 <_ZN3jlb5GraphC1Ev+0x1124>
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2144      	movs	r1, #68	; 0x44
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff f886 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002ce8:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fd35 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002cf2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f013 fac7 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8002cfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002d04:	2146      	movs	r1, #70	; 0x46
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	f002 fae0 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d12:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8002d16:	4aa4      	ldr	r2, [pc, #656]	; (8002fa8 <_ZN3jlb5GraphC1Ev+0x1128>)
 8002d18:	8812      	ldrh	r2, [r2, #0]
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d20:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002d24:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d2e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8002d32:	2202      	movs	r2, #2
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f013 faa3 	bl	8016286 <_ZNSaIcEC1Ev>
 8002d40:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002d44:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002d48:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8002d4c:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8002d50:	ca06      	ldmia	r2, {r1, r2}
 8002d52:	f002 fd50 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002d56:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002d5a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002fac <_ZN3jlb5GraphC1Ev+0x112c>
 8002d5e:	2202      	movs	r2, #2
 8002d60:	2147      	movs	r1, #71	; 0x47
 8002d62:	4620      	mov	r0, r4
 8002d64:	f7ff f846 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002d68:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fcf5 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002d72:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002d76:	4618      	mov	r0, r3
 8002d78:	f013 fa87 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 8002d7c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d80:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002d84:	2146      	movs	r1, #70	; 0x46
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	f002 faa0 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002d92:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002d96:	4a84      	ldr	r2, [pc, #528]	; (8002fa8 <_ZN3jlb5GraphC1Ev+0x1128>)
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002da0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002da4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002dae:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002db2:	2202      	movs	r2, #2
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f013 fa63 	bl	8016286 <_ZNSaIcEC1Ev>
 8002dc0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002dc4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002dc8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8002dcc:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8002dd0:	ca06      	ldmia	r2, {r1, r2}
 8002dd2:	f002 fd10 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002dd6:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002dda:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002fa4 <_ZN3jlb5GraphC1Ev+0x1124>
 8002dde:	2201      	movs	r2, #1
 8002de0:	2149      	movs	r1, #73	; 0x49
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff f806 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002de8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 fcb5 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002df2:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8002df6:	4618      	mov	r0, r3
 8002df8:	f013 fa47 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8002dfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e00:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002e04:	2146      	movs	r1, #70	; 0x46
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	f002 fa60 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e12:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8002e16:	4a62      	ldr	r2, [pc, #392]	; (8002fa0 <_ZN3jlb5GraphC1Ev+0x1120>)
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	8019      	strh	r1, [r3, #0]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	0c12      	lsrs	r2, r2, #16
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e28:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8002e2c:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e36:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002e42:	4618      	mov	r0, r3
 8002e44:	f013 fa1f 	bl	8016286 <_ZNSaIcEC1Ev>
 8002e48:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002e4c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002e50:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 8002e54:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8002e58:	ca06      	ldmia	r2, {r1, r2}
 8002e5a:	f002 fccc 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002e5e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002e62:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002fa4 <_ZN3jlb5GraphC1Ev+0x1124>
 8002e66:	2200      	movs	r2, #0
 8002e68:	2148      	movs	r1, #72	; 0x48
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7fe ffc2 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002e70:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 fc71 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002e7a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f013 fa03 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 8002e84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e88:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002e8c:	2147      	movs	r1, #71	; 0x47
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	f002 fa1c 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002e94:	4604      	mov	r4, r0
 8002e96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002e9a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8002e9e:	4a44      	ldr	r2, [pc, #272]	; (8002fb0 <_ZN3jlb5GraphC1Ev+0x1130>)
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002ea8:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8002eac:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002eb6:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8002eba:	2202      	movs	r2, #2
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f013 f9df 	bl	8016286 <_ZNSaIcEC1Ev>
 8002ec8:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002ecc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002ed0:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8002ed4:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8002ed8:	ca06      	ldmia	r2, {r1, r2}
 8002eda:	f002 fc8c 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002ede:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002ee2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002fac <_ZN3jlb5GraphC1Ev+0x112c>
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	2146      	movs	r1, #70	; 0x46
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7fe ff82 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002ef0:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fc31 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002efa:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8002efe:	4618      	mov	r0, r3
 8002f00:	f013 f9c3 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 8002f04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f08:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002f0c:	2147      	movs	r1, #71	; 0x47
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f002 f9dc 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002f14:	4604      	mov	r4, r0
 8002f16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f1a:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8002f1e:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <_ZN3jlb5GraphC1Ev+0x1130>)
 8002f20:	8812      	ldrh	r2, [r2, #0]
 8002f22:	801a      	strh	r2, [r3, #0]
 8002f24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f28:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8002f2c:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f36:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002f42:	4618      	mov	r0, r3
 8002f44:	f013 f99f 	bl	8016286 <_ZNSaIcEC1Ev>
 8002f48:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002f4c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002f50:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 8002f54:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8002f58:	ca06      	ldmia	r2, {r1, r2}
 8002f5a:	f002 fc4c 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002f5e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002f62:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002fa4 <_ZN3jlb5GraphC1Ev+0x1124>
 8002f66:	2201      	movs	r2, #1
 8002f68:	2144      	movs	r1, #68	; 0x44
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7fe ff42 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8002f70:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 fbf1 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8002f7a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f013 f983 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8002f84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f88:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002f8c:	2147      	movs	r1, #71	; 0x47
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	f002 f99c 	bl	80052cc <_ZN3jlb5GraphixEc>
 8002f94:	4604      	mov	r4, r0
 8002f96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002f9a:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8002f9e:	e009      	b.n	8002fb4 <_ZN3jlb5GraphC1Ev+0x1134>
 8002fa0:	0801816c 	.word	0x0801816c
 8002fa4:	3f71463a 	.word	0x3f71463a
 8002fa8:	08018170 	.word	0x08018170
 8002fac:	3f99999a 	.word	0x3f99999a
 8002fb0:	08018174 	.word	0x08018174
 8002fb4:	4ae6      	ldr	r2, [pc, #920]	; (8003350 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	8019      	strh	r1, [r3, #0]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	0c12      	lsrs	r2, r2, #16
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fc6:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8002fca:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8002fd4:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8002fd8:	2203      	movs	r2, #3
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f013 f950 	bl	8016286 <_ZNSaIcEC1Ev>
 8002fe6:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8002fea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8002fee:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8002ff2:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8002ff6:	ca06      	ldmia	r2, {r1, r2}
 8002ff8:	f002 fbfd 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8002ffc:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8003000:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8003354 <_ZN3jlb5GraphC1Ev+0x14d4>
 8003004:	2200      	movs	r2, #0
 8003006:	2145      	movs	r1, #69	; 0x45
 8003008:	4620      	mov	r0, r4
 800300a:	f7fe fef3 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800300e:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8003012:	4618      	mov	r0, r3
 8003014:	f002 fba2 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003018:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800301c:	4618      	mov	r0, r3
 800301e:	f013 f934 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8003022:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003026:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800302a:	2147      	movs	r1, #71	; 0x47
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f002 f94d 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003032:	4604      	mov	r4, r0
 8003034:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003038:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 800303c:	4ac4      	ldr	r2, [pc, #784]	; (8003350 <_ZN3jlb5GraphC1Ev+0x14d0>)
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4611      	mov	r1, r2
 8003042:	8019      	strh	r1, [r3, #0]
 8003044:	3302      	adds	r3, #2
 8003046:	0c12      	lsrs	r2, r2, #16
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800304e:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8003052:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800305c:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8003060:	2203      	movs	r2, #3
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8003068:	4618      	mov	r0, r3
 800306a:	f013 f90c 	bl	8016286 <_ZNSaIcEC1Ev>
 800306e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8003072:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003076:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 800307a:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 800307e:	ca06      	ldmia	r2, {r1, r2}
 8003080:	f002 fbb9 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003084:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003088:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8003354 <_ZN3jlb5GraphC1Ev+0x14d4>
 800308c:	2201      	movs	r2, #1
 800308e:	214a      	movs	r1, #74	; 0x4a
 8003090:	4620      	mov	r0, r4
 8003092:	f7fe feaf 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003096:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fb5e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80030a0:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80030a4:	4618      	mov	r0, r3
 80030a6:	f013 f8f0 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 80030aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80030b2:	2147      	movs	r1, #71	; 0x47
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	f002 f909 	bl	80052cc <_ZN3jlb5GraphixEc>
 80030ba:	4604      	mov	r4, r0
 80030bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030c0:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 80030c4:	4aa4      	ldr	r2, [pc, #656]	; (8003358 <_ZN3jlb5GraphC1Ev+0x14d8>)
 80030c6:	8812      	ldrh	r2, [r2, #0]
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030ce:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80030d2:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80030dc:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 80030e0:	2202      	movs	r2, #2
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80030e8:	4618      	mov	r0, r3
 80030ea:	f013 f8cc 	bl	8016286 <_ZNSaIcEC1Ev>
 80030ee:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80030f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80030f6:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 80030fa:	f207 5004 	addw	r0, r7, #1284	; 0x504
 80030fe:	ca06      	ldmia	r2, {r1, r2}
 8003100:	f002 fb79 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003104:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8003108:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003354 <_ZN3jlb5GraphC1Ev+0x14d4>
 800310c:	2200      	movs	r2, #0
 800310e:	2149      	movs	r1, #73	; 0x49
 8003110:	4620      	mov	r0, r4
 8003112:	f7fe fe6f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003116:	f207 5304 	addw	r3, r7, #1284	; 0x504
 800311a:	4618      	mov	r0, r3
 800311c:	f002 fb1e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003120:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8003124:	4618      	mov	r0, r3
 8003126:	f013 f8b0 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 800312a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800312e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003132:	2148      	movs	r1, #72	; 0x48
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	f002 f8c9 	bl	80052cc <_ZN3jlb5GraphixEc>
 800313a:	4604      	mov	r4, r0
 800313c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003140:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8003144:	4a85      	ldr	r2, [pc, #532]	; (800335c <_ZN3jlb5GraphC1Ev+0x14dc>)
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800314e:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8003152:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800315c:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8003160:	2202      	movs	r2, #2
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003168:	4618      	mov	r0, r3
 800316a:	f013 f88c 	bl	8016286 <_ZNSaIcEC1Ev>
 800316e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003172:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003176:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 800317a:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 800317e:	ca06      	ldmia	r2, {r1, r2}
 8003180:	f002 fb39 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003184:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003188:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8003354 <_ZN3jlb5GraphC1Ev+0x14d4>
 800318c:	2201      	movs	r2, #1
 800318e:	2146      	movs	r1, #70	; 0x46
 8003190:	4620      	mov	r0, r4
 8003192:	f7fe fe2f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003196:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fade 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80031a0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80031a4:	4618      	mov	r0, r3
 80031a6:	f013 f870 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 80031aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80031b2:	2148      	movs	r1, #72	; 0x48
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f002 f889 	bl	80052cc <_ZN3jlb5GraphixEc>
 80031ba:	4604      	mov	r4, r0
 80031bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031c0:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 80031c4:	2246      	movs	r2, #70	; 0x46
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031cc:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80031d0:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80031da:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 80031de:	2201      	movs	r2, #1
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80031e6:	4618      	mov	r0, r3
 80031e8:	f013 f84d 	bl	8016286 <_ZNSaIcEC1Ev>
 80031ec:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80031f0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80031f4:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 80031f8:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 80031fc:	ca06      	ldmia	r2, {r1, r2}
 80031fe:	f002 fafa 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003202:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8003206:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003354 <_ZN3jlb5GraphC1Ev+0x14d4>
 800320a:	2200      	movs	r2, #0
 800320c:	214b      	movs	r1, #75	; 0x4b
 800320e:	4620      	mov	r0, r4
 8003210:	f7fe fdf0 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003214:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fa9f 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800321e:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8003222:	4618      	mov	r0, r3
 8003224:	f013 f831 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8003228:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800322c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003230:	2148      	movs	r1, #72	; 0x48
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	f002 f84a 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003238:	4604      	mov	r4, r0
 800323a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800323e:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8003242:	2246      	movs	r2, #70	; 0x46
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800324a:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 800324e:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003258:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 800325c:	2201      	movs	r2, #1
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8003264:	4618      	mov	r0, r3
 8003266:	f013 f80e 	bl	8016286 <_ZNSaIcEC1Ev>
 800326a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800326e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003272:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 8003276:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 800327a:	ca06      	ldmia	r2, {r1, r2}
 800327c:	f002 fabb 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003280:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8003284:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003364 <_ZN3jlb5GraphC1Ev+0x14e4>
 8003288:	2202      	movs	r2, #2
 800328a:	214d      	movs	r1, #77	; 0x4d
 800328c:	4620      	mov	r0, r4
 800328e:	f7fe fdb1 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003292:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fa60 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800329c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80032a0:	4618      	mov	r0, r3
 80032a2:	f012 fff2 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80032a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80032ae:	2149      	movs	r1, #73	; 0x49
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	f002 f80b 	bl	80052cc <_ZN3jlb5GraphixEc>
 80032b6:	4604      	mov	r4, r0
 80032b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032bc:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 80032c0:	4a27      	ldr	r2, [pc, #156]	; (8003360 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4611      	mov	r1, r2
 80032c6:	8019      	strh	r1, [r3, #0]
 80032c8:	3302      	adds	r3, #2
 80032ca:	0c12      	lsrs	r2, r2, #16
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032d2:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 80032d6:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80032e0:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 80032e4:	2203      	movs	r2, #3
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80032ec:	4618      	mov	r0, r3
 80032ee:	f012 ffca 	bl	8016286 <_ZNSaIcEC1Ev>
 80032f2:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80032f6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80032fa:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 80032fe:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8003302:	ca06      	ldmia	r2, {r1, r2}
 8003304:	f002 fa77 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003308:	f207 5374 	addw	r3, r7, #1396	; 0x574
 800330c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003354 <_ZN3jlb5GraphC1Ev+0x14d4>
 8003310:	2200      	movs	r2, #0
 8003312:	2146      	movs	r1, #70	; 0x46
 8003314:	4620      	mov	r0, r4
 8003316:	f7fe fd6d 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800331a:	f207 5374 	addw	r3, r7, #1396	; 0x574
 800331e:	4618      	mov	r0, r3
 8003320:	f002 fa1c 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003324:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8003328:	4618      	mov	r0, r3
 800332a:	f012 ffae 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 800332e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003332:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003336:	2149      	movs	r1, #73	; 0x49
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	f001 ffc7 	bl	80052cc <_ZN3jlb5GraphixEc>
 800333e:	4604      	mov	r4, r0
 8003340:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003344:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8003348:	4a05      	ldr	r2, [pc, #20]	; (8003360 <_ZN3jlb5GraphC1Ev+0x14e0>)
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	4611      	mov	r1, r2
 800334e:	e00b      	b.n	8003368 <_ZN3jlb5GraphC1Ev+0x14e8>
 8003350:	08018178 	.word	0x08018178
 8003354:	3f71463a 	.word	0x3f71463a
 8003358:	08018174 	.word	0x08018174
 800335c:	0801817c 	.word	0x0801817c
 8003360:	08018180 	.word	0x08018180
 8003364:	3f99999a 	.word	0x3f99999a
 8003368:	8019      	strh	r1, [r3, #0]
 800336a:	3302      	adds	r3, #2
 800336c:	0c12      	lsrs	r2, r2, #16
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003374:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8003378:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003382:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8003386:	2203      	movs	r2, #3
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800338e:	4618      	mov	r0, r3
 8003390:	f012 ff79 	bl	8016286 <_ZNSaIcEC1Ev>
 8003394:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8003398:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800339c:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 80033a0:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 80033a4:	ca06      	ldmia	r2, {r1, r2}
 80033a6:	f002 fa26 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80033aa:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80033ae:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8003364 <_ZN3jlb5GraphC1Ev+0x14e4>
 80033b2:	2202      	movs	r2, #2
 80033b4:	2144      	movs	r1, #68	; 0x44
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7fe fd1c 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80033bc:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 f9cb 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80033c6:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80033ca:	4618      	mov	r0, r3
 80033cc:	f012 ff5d 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80033d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033d4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80033d8:	2149      	movs	r1, #73	; 0x49
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	f001 ff76 	bl	80052cc <_ZN3jlb5GraphixEc>
 80033e0:	4604      	mov	r4, r0
 80033e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033e6:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 80033ea:	4ae7      	ldr	r2, [pc, #924]	; (8003788 <_ZN3jlb5GraphC1Ev+0x1908>)
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	4611      	mov	r1, r2
 80033f0:	8019      	strh	r1, [r3, #0]
 80033f2:	3302      	adds	r3, #2
 80033f4:	0c12      	lsrs	r2, r2, #16
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80033fc:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8003400:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800340a:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 800340e:	2203      	movs	r2, #3
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8003416:	4618      	mov	r0, r3
 8003418:	f012 ff35 	bl	8016286 <_ZNSaIcEC1Ev>
 800341c:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8003420:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003424:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8003428:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 800342c:	ca06      	ldmia	r2, {r1, r2}
 800342e:	f002 f9e2 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003432:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8003436:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800378c <_ZN3jlb5GraphC1Ev+0x190c>
 800343a:	2201      	movs	r2, #1
 800343c:	2147      	movs	r1, #71	; 0x47
 800343e:	4620      	mov	r0, r4
 8003440:	f7fe fcd8 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003444:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8003448:	4618      	mov	r0, r3
 800344a:	f002 f987 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800344e:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8003452:	4618      	mov	r0, r3
 8003454:	f012 ff19 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8003458:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800345c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003460:	2149      	movs	r1, #73	; 0x49
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	f001 ff32 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003468:	4604      	mov	r4, r0
 800346a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800346e:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8003472:	4ac7      	ldr	r2, [pc, #796]	; (8003790 <_ZN3jlb5GraphC1Ev+0x1910>)
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	4611      	mov	r1, r2
 8003478:	8019      	strh	r1, [r3, #0]
 800347a:	3302      	adds	r3, #2
 800347c:	0c12      	lsrs	r2, r2, #16
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003484:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8003488:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003492:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8003496:	2203      	movs	r2, #3
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800349e:	4618      	mov	r0, r3
 80034a0:	f012 fef1 	bl	8016286 <_ZNSaIcEC1Ev>
 80034a4:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80034a8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80034ac:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 80034b0:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 80034b4:	ca06      	ldmia	r2, {r1, r2}
 80034b6:	f002 f99e 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80034ba:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80034be:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800378c <_ZN3jlb5GraphC1Ev+0x190c>
 80034c2:	2200      	movs	r2, #0
 80034c4:	214c      	movs	r1, #76	; 0x4c
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7fe fc94 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80034cc:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 f943 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80034d6:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80034da:	4618      	mov	r0, r3
 80034dc:	f012 fed5 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 80034e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034e4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80034e8:	2149      	movs	r1, #73	; 0x49
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	f001 feee 	bl	80052cc <_ZN3jlb5GraphixEc>
 80034f0:	4604      	mov	r4, r0
 80034f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80034f6:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 80034fa:	4aa5      	ldr	r2, [pc, #660]	; (8003790 <_ZN3jlb5GraphC1Ev+0x1910>)
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	4611      	mov	r1, r2
 8003500:	8019      	strh	r1, [r3, #0]
 8003502:	3302      	adds	r3, #2
 8003504:	0c12      	lsrs	r2, r2, #16
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800350c:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8003510:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800351a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800351e:	2203      	movs	r2, #3
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8003526:	4618      	mov	r0, r3
 8003528:	f012 fead 	bl	8016286 <_ZNSaIcEC1Ev>
 800352c:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8003530:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003534:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8003538:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 800353c:	ca06      	ldmia	r2, {r1, r2}
 800353e:	f002 f95a 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003542:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8003546:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8003794 <_ZN3jlb5GraphC1Ev+0x1914>
 800354a:	2202      	movs	r2, #2
 800354c:	214e      	movs	r1, #78	; 0x4e
 800354e:	4620      	mov	r0, r4
 8003550:	f7fe fc50 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003554:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8003558:	4618      	mov	r0, r3
 800355a:	f002 f8ff 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800355e:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8003562:	4618      	mov	r0, r3
 8003564:	f012 fe91 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8003568:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800356c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003570:	2149      	movs	r1, #73	; 0x49
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	f001 feaa 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003578:	4604      	mov	r4, r0
 800357a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800357e:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8003582:	4a83      	ldr	r2, [pc, #524]	; (8003790 <_ZN3jlb5GraphC1Ev+0x1910>)
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	4611      	mov	r1, r2
 8003588:	8019      	strh	r1, [r3, #0]
 800358a:	3302      	adds	r3, #2
 800358c:	0c12      	lsrs	r2, r2, #16
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003594:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8003598:	f207 6214 	addw	r2, r7, #1556	; 0x614
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035a2:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 80035a6:	2203      	movs	r2, #3
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80035ae:	4618      	mov	r0, r3
 80035b0:	f012 fe69 	bl	8016286 <_ZNSaIcEC1Ev>
 80035b4:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80035b8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80035bc:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 80035c0:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 80035c4:	ca06      	ldmia	r2, {r1, r2}
 80035c6:	f002 f916 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80035ca:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80035ce:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800378c <_ZN3jlb5GraphC1Ev+0x190c>
 80035d2:	2201      	movs	r2, #1
 80035d4:	214b      	movs	r1, #75	; 0x4b
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7fe fc0c 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80035dc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80035e0:	4618      	mov	r0, r3
 80035e2:	f002 f8bb 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80035e6:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80035ea:	4618      	mov	r0, r3
 80035ec:	f012 fe4d 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80035f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80035f4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80035f8:	214a      	movs	r1, #74	; 0x4a
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	f001 fe66 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003600:	4604      	mov	r4, r0
 8003602:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003606:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 800360a:	224c      	movs	r2, #76	; 0x4c
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003612:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8003616:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003620:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8003624:	2201      	movs	r2, #1
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800362c:	4618      	mov	r0, r3
 800362e:	f012 fe2a 	bl	8016286 <_ZNSaIcEC1Ev>
 8003632:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003636:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800363a:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 800363e:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8003642:	ca06      	ldmia	r2, {r1, r2}
 8003644:	f002 f8d7 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003648:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800364c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800378c <_ZN3jlb5GraphC1Ev+0x190c>
 8003650:	2200      	movs	r2, #0
 8003652:	2147      	movs	r1, #71	; 0x47
 8003654:	4620      	mov	r0, r4
 8003656:	f7fe fbcd 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800365a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 800365e:	4618      	mov	r0, r3
 8003660:	f002 f87c 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003664:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8003668:	4618      	mov	r0, r3
 800366a:	f012 fe0e 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 800366e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003672:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003676:	214a      	movs	r1, #74	; 0x4a
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	f001 fe27 	bl	80052cc <_ZN3jlb5GraphixEc>
 800367e:	4604      	mov	r4, r0
 8003680:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003684:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8003688:	224c      	movs	r2, #76	; 0x4c
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003690:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8003694:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800369e:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80036a2:	2201      	movs	r2, #1
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80036aa:	4618      	mov	r0, r3
 80036ac:	f012 fdeb 	bl	8016286 <_ZNSaIcEC1Ev>
 80036b0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80036b4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80036b8:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 80036bc:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 80036c0:	ca06      	ldmia	r2, {r1, r2}
 80036c2:	f002 f898 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80036c6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80036ca:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003794 <_ZN3jlb5GraphC1Ev+0x1914>
 80036ce:	2202      	movs	r2, #2
 80036d0:	2145      	movs	r1, #69	; 0x45
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7fe fb8e 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80036d8:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 f83d 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80036e2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80036e6:	4618      	mov	r0, r3
 80036e8:	f012 fdcf 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 80036ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80036f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80036f4:	214a      	movs	r1, #74	; 0x4a
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	f001 fde8 	bl	80052cc <_ZN3jlb5GraphixEc>
 80036fc:	4604      	mov	r4, r0
 80036fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003702:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8003706:	4a24      	ldr	r2, [pc, #144]	; (8003798 <_ZN3jlb5GraphC1Ev+0x1918>)
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003710:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8003714:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800371e:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8003722:	2202      	movs	r2, #2
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800372a:	4618      	mov	r0, r3
 800372c:	f012 fdab 	bl	8016286 <_ZNSaIcEC1Ev>
 8003730:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003734:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003738:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 800373c:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8003740:	ca06      	ldmia	r2, {r1, r2}
 8003742:	f002 f858 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003746:	f207 6354 	addw	r3, r7, #1620	; 0x654
 800374a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800378c <_ZN3jlb5GraphC1Ev+0x190c>
 800374e:	2201      	movs	r2, #1
 8003750:	214c      	movs	r1, #76	; 0x4c
 8003752:	4620      	mov	r0, r4
 8003754:	f7fe fb4e 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003758:	f207 6354 	addw	r3, r7, #1620	; 0x654
 800375c:	4618      	mov	r0, r3
 800375e:	f001 fffd 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003762:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8003766:	4618      	mov	r0, r3
 8003768:	f012 fd8f 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 800376c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003770:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003774:	214b      	movs	r1, #75	; 0x4b
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	f001 fda8 	bl	80052cc <_ZN3jlb5GraphixEc>
 800377c:	4604      	mov	r4, r0
 800377e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003782:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8003786:	e009      	b.n	800379c <_ZN3jlb5GraphC1Ev+0x191c>
 8003788:	08018180 	.word	0x08018180
 800378c:	3f71463a 	.word	0x3f71463a
 8003790:	08018184 	.word	0x08018184
 8003794:	3f99999a 	.word	0x3f99999a
 8003798:	08018188 	.word	0x08018188
 800379c:	4ae4      	ldr	r2, [pc, #912]	; (8003b30 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	4611      	mov	r1, r2
 80037a2:	8019      	strh	r1, [r3, #0]
 80037a4:	3302      	adds	r3, #2
 80037a6:	0c12      	lsrs	r2, r2, #16
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037ae:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80037b2:	f207 6284 	addw	r2, r7, #1668	; 0x684
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80037bc:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 80037c0:	2203      	movs	r2, #3
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80037c8:	4618      	mov	r0, r3
 80037ca:	f012 fd5c 	bl	8016286 <_ZNSaIcEC1Ev>
 80037ce:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80037d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80037d6:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 80037da:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 80037de:	ca06      	ldmia	r2, {r1, r2}
 80037e0:	f002 f809 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80037e4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80037e8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8003b34 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80037ec:	2201      	movs	r2, #1
 80037ee:	2148      	movs	r1, #72	; 0x48
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7fe faff 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80037f6:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 ffae 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003800:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8003804:	4618      	mov	r0, r3
 8003806:	f012 fd40 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 800380a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800380e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003812:	214b      	movs	r1, #75	; 0x4b
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	f001 fd59 	bl	80052cc <_ZN3jlb5GraphixEc>
 800381a:	4604      	mov	r4, r0
 800381c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003820:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8003824:	4ac4      	ldr	r2, [pc, #784]	; (8003b38 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8003826:	8812      	ldrh	r2, [r2, #0]
 8003828:	801a      	strh	r2, [r3, #0]
 800382a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800382e:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8003832:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800383c:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8003840:	2202      	movs	r2, #2
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003848:	4618      	mov	r0, r3
 800384a:	f012 fd1c 	bl	8016286 <_ZNSaIcEC1Ev>
 800384e:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003852:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003856:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 800385a:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 800385e:	ca06      	ldmia	r2, {r1, r2}
 8003860:	f001 ffc9 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003864:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8003868:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8003b34 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800386c:	2200      	movs	r2, #0
 800386e:	2149      	movs	r1, #73	; 0x49
 8003870:	4620      	mov	r0, r4
 8003872:	f7fe fabf 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003876:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 800387a:	4618      	mov	r0, r3
 800387c:	f001 ff6e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003880:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8003884:	4618      	mov	r0, r3
 8003886:	f012 fd00 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 800388a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800388e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003892:	214b      	movs	r1, #75	; 0x4b
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f001 fd19 	bl	80052cc <_ZN3jlb5GraphixEc>
 800389a:	4604      	mov	r4, r0
 800389c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038a0:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 80038a4:	4aa4      	ldr	r2, [pc, #656]	; (8003b38 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 80038a6:	8812      	ldrh	r2, [r2, #0]
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038ae:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80038b2:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80038bc:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80038c0:	2202      	movs	r2, #2
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f012 fcdc 	bl	8016286 <_ZNSaIcEC1Ev>
 80038ce:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80038d2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80038d6:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80038da:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 80038de:	ca06      	ldmia	r2, {r1, r2}
 80038e0:	f001 ff89 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80038e4:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80038e8:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8003b3c <_ZN3jlb5GraphC1Ev+0x1cbc>
 80038ec:	2202      	movs	r2, #2
 80038ee:	214c      	movs	r1, #76	; 0x4c
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7fe fa7f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80038f6:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 ff2e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003900:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003904:	4618      	mov	r0, r3
 8003906:	f012 fcc0 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 800390a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800390e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003912:	214b      	movs	r1, #75	; 0x4b
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	f001 fcd9 	bl	80052cc <_ZN3jlb5GraphixEc>
 800391a:	4604      	mov	r4, r0
 800391c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003920:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8003924:	4a84      	ldr	r2, [pc, #528]	; (8003b38 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800392e:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8003932:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800393c:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8003940:	2202      	movs	r2, #2
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003948:	4618      	mov	r0, r3
 800394a:	f012 fc9c 	bl	8016286 <_ZNSaIcEC1Ev>
 800394e:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003952:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003956:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 800395a:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 800395e:	ca06      	ldmia	r2, {r1, r2}
 8003960:	f001 ff49 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003964:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 8003968:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8003b34 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800396c:	2201      	movs	r2, #1
 800396e:	214e      	movs	r1, #78	; 0x4e
 8003970:	4620      	mov	r0, r4
 8003972:	f7fe fa3f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003976:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 800397a:	4618      	mov	r0, r3
 800397c:	f001 feee 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003980:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8003984:	4618      	mov	r0, r3
 8003986:	f012 fc80 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 800398a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800398e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003992:	214b      	movs	r1, #75	; 0x4b
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f001 fc99 	bl	80052cc <_ZN3jlb5GraphixEc>
 800399a:	4604      	mov	r4, r0
 800399c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039a0:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 80039a4:	4a62      	ldr	r2, [pc, #392]	; (8003b30 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4611      	mov	r1, r2
 80039aa:	8019      	strh	r1, [r3, #0]
 80039ac:	3302      	adds	r3, #2
 80039ae:	0c12      	lsrs	r2, r2, #16
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039b6:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80039ba:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80039c4:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80039c8:	2203      	movs	r2, #3
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80039d0:	4618      	mov	r0, r3
 80039d2:	f012 fc58 	bl	8016286 <_ZNSaIcEC1Ev>
 80039d6:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80039da:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80039de:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 80039e2:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 80039e6:	ca06      	ldmia	r2, {r1, r2}
 80039e8:	f001 ff05 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80039ec:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80039f0:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003b34 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80039f4:	2200      	movs	r2, #0
 80039f6:	214d      	movs	r1, #77	; 0x4d
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7fe f9fb 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80039fe:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 feaa 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003a08:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f012 fc3c 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8003a12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a1a:	214c      	movs	r1, #76	; 0x4c
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	f001 fc55 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003a22:	4604      	mov	r4, r0
 8003a24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a28:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8003a2c:	4a44      	ldr	r2, [pc, #272]	; (8003b40 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8003a2e:	8812      	ldrh	r2, [r2, #0]
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a36:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8003a3a:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a44:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8003a48:	2202      	movs	r2, #2
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003a50:	4618      	mov	r0, r3
 8003a52:	f012 fc18 	bl	8016286 <_ZNSaIcEC1Ev>
 8003a56:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003a5a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003a5e:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 8003a62:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 8003a66:	ca06      	ldmia	r2, {r1, r2}
 8003a68:	f001 fec5 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003a6c:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003a70:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003b3c <_ZN3jlb5GraphC1Ev+0x1cbc>
 8003a74:	2202      	movs	r2, #2
 8003a76:	214b      	movs	r1, #75	; 0x4b
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7fe f9bb 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003a7e:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fe6a 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003a88:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f012 fbfc 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 8003a92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003a96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003a9a:	214c      	movs	r1, #76	; 0x4c
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	f001 fc15 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003aa8:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	801a      	strh	r2, [r3, #0]
 8003ab2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ab6:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8003aba:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ac4:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8003ac8:	2202      	movs	r2, #2
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f012 fbd8 	bl	8016286 <_ZNSaIcEC1Ev>
 8003ad6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003ada:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003ade:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 8003ae2:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 8003ae6:	ca06      	ldmia	r2, {r1, r2}
 8003ae8:	f001 fe85 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003aec:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8003af0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003b34 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8003af4:	2201      	movs	r2, #1
 8003af6:	2149      	movs	r1, #73	; 0x49
 8003af8:	4620      	mov	r0, r4
 8003afa:	f7fe f97b 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003afe:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fe2a 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003b08:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f012 fbbc 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8003b12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003b1a:	214c      	movs	r1, #76	; 0x4c
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	f001 fbd5 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003b22:	4604      	mov	r4, r0
 8003b24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b28:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8003b2c:	e00a      	b.n	8003b44 <_ZN3jlb5GraphC1Ev+0x1cc4>
 8003b2e:	bf00      	nop
 8003b30:	0801818c 	.word	0x0801818c
 8003b34:	3f71463a 	.word	0x3f71463a
 8003b38:	08018190 	.word	0x08018190
 8003b3c:	3f99999a 	.word	0x3f99999a
 8003b40:	08018194 	.word	0x08018194
 8003b44:	4ae4      	ldr	r2, [pc, #912]	; (8003ed8 <_ZN3jlb5GraphC1Ev+0x2058>)
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	8019      	strh	r1, [r3, #0]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	0c12      	lsrs	r2, r2, #16
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b56:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8003b5a:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003b64:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8003b68:	2203      	movs	r2, #3
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8003b70:	4618      	mov	r0, r3
 8003b72:	f012 fb88 	bl	8016286 <_ZNSaIcEC1Ev>
 8003b76:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8003b7a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003b7e:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 8003b82:	f207 7034 	addw	r0, r7, #1844	; 0x734
 8003b86:	ca06      	ldmia	r2, {r1, r2}
 8003b88:	f001 fe35 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003b8c:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8003b90:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8003edc <_ZN3jlb5GraphC1Ev+0x205c>
 8003b94:	2200      	movs	r2, #0
 8003b96:	214a      	movs	r1, #74	; 0x4a
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7fe f92b 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003b9e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fdda 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003ba8:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8003bac:	4618      	mov	r0, r3
 8003bae:	f012 fb6c 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8003bb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bb6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003bba:	214c      	movs	r1, #76	; 0x4c
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	f001 fb85 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bc8:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8003bcc:	4ac2      	ldr	r2, [pc, #776]	; (8003ed8 <_ZN3jlb5GraphC1Ev+0x2058>)
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	8019      	strh	r1, [r3, #0]
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	0c12      	lsrs	r2, r2, #16
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bde:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8003be2:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003bec:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f012 fb44 	bl	8016286 <_ZNSaIcEC1Ev>
 8003bfe:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003c02:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003c06:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8003c0a:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8003c0e:	ca06      	ldmia	r2, {r1, r2}
 8003c10:	f001 fdf1 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003c14:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003c18:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8003edc <_ZN3jlb5GraphC1Ev+0x205c>
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	214f      	movs	r1, #79	; 0x4f
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7fe f8e7 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003c26:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 fd96 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003c30:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003c34:	4618      	mov	r0, r3
 8003c36:	f012 fb28 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8003c3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003c42:	214c      	movs	r1, #76	; 0x4c
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f001 fb41 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c50:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8003c54:	4aa2      	ldr	r2, [pc, #648]	; (8003ee0 <_ZN3jlb5GraphC1Ev+0x2060>)
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c5e:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003c62:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003c6c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8003c70:	2202      	movs	r2, #2
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f012 fb04 	bl	8016286 <_ZNSaIcEC1Ev>
 8003c7e:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003c82:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003c86:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 8003c8a:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8003c8e:	ca06      	ldmia	r2, {r1, r2}
 8003c90:	f001 fdb1 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003c94:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8003c98:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8003edc <_ZN3jlb5GraphC1Ev+0x205c>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	214e      	movs	r1, #78	; 0x4e
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7fe f8a7 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003ca6:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fd56 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003cb0:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f012 fae8 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8003cba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cbe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003cc2:	214d      	movs	r1, #77	; 0x4d
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	f001 fb01 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003cca:	4604      	mov	r4, r0
 8003ccc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cd0:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003cd4:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <_ZN3jlb5GraphC1Ev+0x2064>)
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4611      	mov	r1, r2
 8003cda:	8019      	strh	r1, [r3, #0]
 8003cdc:	3302      	adds	r3, #2
 8003cde:	0c12      	lsrs	r2, r2, #16
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ce6:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003cea:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003cf4:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f012 fac0 	bl	8016286 <_ZNSaIcEC1Ev>
 8003d06:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003d0a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003d0e:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 8003d12:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 8003d16:	ca06      	ldmia	r2, {r1, r2}
 8003d18:	f001 fd6d 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003d1c:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8003d20:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8003ee8 <_ZN3jlb5GraphC1Ev+0x2068>
 8003d24:	2202      	movs	r2, #2
 8003d26:	2148      	movs	r1, #72	; 0x48
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7fe f863 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003d2e:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fd12 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003d38:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f012 faa4 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 8003d42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d46:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003d4a:	214d      	movs	r1, #77	; 0x4d
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f001 fabd 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003d52:	4604      	mov	r4, r0
 8003d54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d58:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8003d5c:	4a61      	ldr	r2, [pc, #388]	; (8003ee4 <_ZN3jlb5GraphC1Ev+0x2064>)
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4611      	mov	r1, r2
 8003d62:	8019      	strh	r1, [r3, #0]
 8003d64:	3302      	adds	r3, #2
 8003d66:	0c12      	lsrs	r2, r2, #16
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d6e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8003d72:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003d7c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8003d80:	2203      	movs	r2, #3
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f012 fa7c 	bl	8016286 <_ZNSaIcEC1Ev>
 8003d8e:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8003d92:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003d96:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8003d9a:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8003d9e:	ca06      	ldmia	r2, {r1, r2}
 8003da0:	f001 fd29 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003da4:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8003da8:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003edc <_ZN3jlb5GraphC1Ev+0x205c>
 8003dac:	2201      	movs	r2, #1
 8003dae:	214b      	movs	r1, #75	; 0x4b
 8003db0:	4620      	mov	r0, r4
 8003db2:	f7fe f81f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003db6:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 fcce 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003dc0:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f012 fa60 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8003dca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003dd2:	214d      	movs	r1, #77	; 0x4d
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f001 fa79 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003dda:	4604      	mov	r4, r0
 8003ddc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003de0:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8003de4:	4a41      	ldr	r2, [pc, #260]	; (8003eec <_ZN3jlb5GraphC1Ev+0x206c>)
 8003de6:	8812      	ldrh	r2, [r2, #0]
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dee:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8003df2:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003dfc:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8003e00:	2202      	movs	r2, #2
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f012 fa3c 	bl	8016286 <_ZNSaIcEC1Ev>
 8003e0e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8003e12:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003e16:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8003e1a:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8003e1e:	ca06      	ldmia	r2, {r1, r2}
 8003e20:	f001 fce9 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003e24:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8003e28:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003edc <_ZN3jlb5GraphC1Ev+0x205c>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2152      	movs	r1, #82	; 0x52
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7fd ffdf 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003e36:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 fc8e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003e40:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8003e44:	4618      	mov	r0, r3
 8003e46:	f012 fa20 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8003e4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e4e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003e52:	214d      	movs	r1, #77	; 0x4d
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	f001 fa39 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e60:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003e64:	4a21      	ldr	r2, [pc, #132]	; (8003eec <_ZN3jlb5GraphC1Ev+0x206c>)
 8003e66:	8812      	ldrh	r2, [r2, #0]
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e6e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8003e72:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003e7c:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8003e80:	2202      	movs	r2, #2
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f012 f9fc 	bl	8016286 <_ZNSaIcEC1Ev>
 8003e8e:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8003e92:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003e96:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8003e9a:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8003e9e:	ca06      	ldmia	r2, {r1, r2}
 8003ea0:	f001 fca9 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003ea4:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8003ea8:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003ef0 <_ZN3jlb5GraphC1Ev+0x2070>
 8003eac:	2202      	movs	r2, #2
 8003eae:	2151      	movs	r1, #81	; 0x51
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7fd ff9f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003eb6:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fc4e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003ec0:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f012 f9e0 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8003eca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ece:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003ed2:	214d      	movs	r1, #77	; 0x4d
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	e00d      	b.n	8003ef4 <_ZN3jlb5GraphC1Ev+0x2074>
 8003ed8:	08018198 	.word	0x08018198
 8003edc:	3f71463a 	.word	0x3f71463a
 8003ee0:	08018194 	.word	0x08018194
 8003ee4:	0801819c 	.word	0x0801819c
 8003ee8:	3f99999a 	.word	0x3f99999a
 8003eec:	080181a0 	.word	0x080181a0
 8003ef0:	3f19999a 	.word	0x3f19999a
 8003ef4:	f001 f9ea 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003efe:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8003f02:	4ae5      	ldr	r2, [pc, #916]	; (8004298 <_ZN3jlb5GraphC1Ev+0x2418>)
 8003f04:	8812      	ldrh	r2, [r2, #0]
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f0c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003f10:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f1a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003f1e:	2202      	movs	r2, #2
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003f26:	4618      	mov	r0, r3
 8003f28:	f012 f9ad 	bl	8016286 <_ZNSaIcEC1Ev>
 8003f2c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003f30:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003f34:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8003f38:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8003f3c:	ca06      	ldmia	r2, {r1, r2}
 8003f3e:	f001 fc5a 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003f42:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003f46:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800429c <_ZN3jlb5GraphC1Ev+0x241c>
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	2150      	movs	r1, #80	; 0x50
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7fd ff50 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003f54:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fbff 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003f5e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003f62:	4618      	mov	r0, r3
 8003f64:	f012 f991 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8003f68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f6c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003f70:	214e      	movs	r1, #78	; 0x4e
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	f001 f9aa 	bl	80052cc <_ZN3jlb5GraphixEc>
 8003f78:	4604      	mov	r4, r0
 8003f7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f7e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8003f82:	4ac7      	ldr	r2, [pc, #796]	; (80042a0 <_ZN3jlb5GraphC1Ev+0x2420>)
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	4611      	mov	r1, r2
 8003f88:	8019      	strh	r1, [r3, #0]
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	0c12      	lsrs	r2, r2, #16
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003f94:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8003f98:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003fa2:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f012 f969 	bl	8016286 <_ZNSaIcEC1Ev>
 8003fb4:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003fb8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8003fbc:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8003fc0:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8003fc4:	ca06      	ldmia	r2, {r1, r2}
 8003fc6:	f001 fc16 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8003fca:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8003fce:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800429c <_ZN3jlb5GraphC1Ev+0x241c>
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	214b      	movs	r1, #75	; 0x4b
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7fd ff0c 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8003fdc:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 fbbb 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8003fe6:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003fea:	4618      	mov	r0, r3
 8003fec:	f012 f94d 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8003ff0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8003ff4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8003ff8:	214e      	movs	r1, #78	; 0x4e
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	f001 f966 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004000:	4604      	mov	r4, r0
 8004002:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004006:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 800400a:	4aa5      	ldr	r2, [pc, #660]	; (80042a0 <_ZN3jlb5GraphC1Ev+0x2420>)
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	4611      	mov	r1, r2
 8004010:	8019      	strh	r1, [r3, #0]
 8004012:	3302      	adds	r3, #2
 8004014:	0c12      	lsrs	r2, r2, #16
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800401c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8004020:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800402a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 800402e:	2203      	movs	r2, #3
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8004036:	4618      	mov	r0, r3
 8004038:	f012 f925 	bl	8016286 <_ZNSaIcEC1Ev>
 800403c:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8004040:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004044:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8004048:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 800404c:	ca06      	ldmia	r2, {r1, r2}
 800404e:	f001 fbd2 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004052:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8004056:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80042a4 <_ZN3jlb5GraphC1Ev+0x2424>
 800405a:	2202      	movs	r2, #2
 800405c:	2149      	movs	r1, #73	; 0x49
 800405e:	4620      	mov	r0, r4
 8004060:	f7fd fec8 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004064:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fb77 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800406e:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8004072:	4618      	mov	r0, r3
 8004074:	f012 f909 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8004078:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800407c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004080:	214e      	movs	r1, #78	; 0x4e
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	f001 f922 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004088:	4604      	mov	r4, r0
 800408a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800408e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004092:	4a83      	ldr	r2, [pc, #524]	; (80042a0 <_ZN3jlb5GraphC1Ev+0x2420>)
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	4611      	mov	r1, r2
 8004098:	8019      	strh	r1, [r3, #0]
 800409a:	3302      	adds	r3, #2
 800409c:	0c12      	lsrs	r2, r2, #16
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040a4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80040a8:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80040b2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80040b6:	2203      	movs	r2, #3
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80040be:	4618      	mov	r0, r3
 80040c0:	f012 f8e1 	bl	8016286 <_ZNSaIcEC1Ev>
 80040c4:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80040c8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80040cc:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 80040d0:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 80040d4:	ca06      	ldmia	r2, {r1, r2}
 80040d6:	f001 fb8e 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80040da:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 80040de:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800429c <_ZN3jlb5GraphC1Ev+0x241c>
 80040e2:	2201      	movs	r2, #1
 80040e4:	214c      	movs	r1, #76	; 0x4c
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7fd fe84 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80040ec:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fb33 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80040f6:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80040fa:	4618      	mov	r0, r3
 80040fc:	f012 f8c5 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8004100:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004104:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004108:	214e      	movs	r1, #78	; 0x4e
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	f001 f8de 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004110:	4604      	mov	r4, r0
 8004112:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004116:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800411a:	4a63      	ldr	r2, [pc, #396]	; (80042a8 <_ZN3jlb5GraphC1Ev+0x2428>)
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	4611      	mov	r1, r2
 8004120:	8019      	strh	r1, [r3, #0]
 8004122:	3302      	adds	r3, #2
 8004124:	0c12      	lsrs	r2, r2, #16
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800412c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8004130:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800413a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800413e:	2203      	movs	r2, #3
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8004146:	4618      	mov	r0, r3
 8004148:	f012 f89d 	bl	8016286 <_ZNSaIcEC1Ev>
 800414c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8004150:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004154:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8004158:	f607 0068 	addw	r0, r7, #2152	; 0x868
 800415c:	ca06      	ldmia	r2, {r1, r2}
 800415e:	f001 fb4a 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004162:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8004166:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800429c <_ZN3jlb5GraphC1Ev+0x241c>
 800416a:	2200      	movs	r2, #0
 800416c:	2154      	movs	r1, #84	; 0x54
 800416e:	4620      	mov	r0, r4
 8004170:	f7fd fe40 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004174:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8004178:	4618      	mov	r0, r3
 800417a:	f001 faef 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800417e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8004182:	4618      	mov	r0, r3
 8004184:	f012 f881 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 8004188:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800418c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004190:	214e      	movs	r1, #78	; 0x4e
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	f001 f89a 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004198:	4604      	mov	r4, r0
 800419a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800419e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80041a2:	4a41      	ldr	r2, [pc, #260]	; (80042a8 <_ZN3jlb5GraphC1Ev+0x2428>)
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4611      	mov	r1, r2
 80041a8:	8019      	strh	r1, [r3, #0]
 80041aa:	3302      	adds	r3, #2
 80041ac:	0c12      	lsrs	r2, r2, #16
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041b4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80041b8:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80041c2:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80041c6:	2203      	movs	r2, #3
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80041ce:	4618      	mov	r0, r3
 80041d0:	f012 f859 	bl	8016286 <_ZNSaIcEC1Ev>
 80041d4:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 80041d8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80041dc:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80041e0:	f607 0084 	addw	r0, r7, #2180	; 0x884
 80041e4:	ca06      	ldmia	r2, {r1, r2}
 80041e6:	f001 fb06 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80041ea:	f607 0384 	addw	r3, r7, #2180	; 0x884
 80041ee:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80042ac <_ZN3jlb5GraphC1Ev+0x242c>
 80041f2:	2202      	movs	r2, #2
 80041f4:	2153      	movs	r1, #83	; 0x53
 80041f6:	4620      	mov	r0, r4
 80041f8:	f7fd fdfc 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80041fc:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8004200:	4618      	mov	r0, r3
 8004202:	f001 faab 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004206:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 800420a:	4618      	mov	r0, r3
 800420c:	f012 f83d 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8004210:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004214:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004218:	214e      	movs	r1, #78	; 0x4e
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	f001 f856 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004220:	4604      	mov	r4, r0
 8004222:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004226:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800422a:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <_ZN3jlb5GraphC1Ev+0x2428>)
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4611      	mov	r1, r2
 8004230:	8019      	strh	r1, [r3, #0]
 8004232:	3302      	adds	r3, #2
 8004234:	0c12      	lsrs	r2, r2, #16
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800423c:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8004240:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800424a:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 800424e:	2203      	movs	r2, #3
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8004256:	4618      	mov	r0, r3
 8004258:	f012 f815 	bl	8016286 <_ZNSaIcEC1Ev>
 800425c:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8004260:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004264:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 8004268:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 800426c:	ca06      	ldmia	r2, {r1, r2}
 800426e:	f001 fac2 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004272:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8004276:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800429c <_ZN3jlb5GraphC1Ev+0x241c>
 800427a:	2201      	movs	r2, #1
 800427c:	2152      	movs	r1, #82	; 0x52
 800427e:	4620      	mov	r0, r4
 8004280:	f7fd fdb8 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004284:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8004288:	4618      	mov	r0, r3
 800428a:	f001 fa67 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800428e:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8004292:	4618      	mov	r0, r3
 8004294:	e00c      	b.n	80042b0 <_ZN3jlb5GraphC1Ev+0x2430>
 8004296:	bf00      	nop
 8004298:	080181a0 	.word	0x080181a0
 800429c:	3f71463a 	.word	0x3f71463a
 80042a0:	080181a4 	.word	0x080181a4
 80042a4:	3f99999a 	.word	0x3f99999a
 80042a8:	080181a8 	.word	0x080181a8
 80042ac:	3f19999a 	.word	0x3f19999a
 80042b0:	f011 ffeb 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 80042b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80042bc:	214f      	movs	r1, #79	; 0x4f
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	f001 f804 	bl	80052cc <_ZN3jlb5GraphixEc>
 80042c4:	4604      	mov	r4, r0
 80042c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042ca:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 80042ce:	4aeb      	ldr	r2, [pc, #940]	; (800467c <_ZN3jlb5GraphC1Ev+0x27fc>)
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	4611      	mov	r1, r2
 80042d4:	8019      	strh	r1, [r3, #0]
 80042d6:	3302      	adds	r3, #2
 80042d8:	0c12      	lsrs	r2, r2, #16
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042e0:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80042e4:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80042ee:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 80042f2:	2203      	movs	r2, #3
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f011 ffc3 	bl	8016286 <_ZNSaIcEC1Ev>
 8004300:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8004304:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004308:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800430c:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8004310:	ca06      	ldmia	r2, {r1, r2}
 8004312:	f001 fa70 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004316:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 800431a:	ed9f 0adc 	vldr	s0, [pc, #880]	; 800468c <_ZN3jlb5GraphC1Ev+0x280c>
 800431e:	2200      	movs	r2, #0
 8004320:	214c      	movs	r1, #76	; 0x4c
 8004322:	4620      	mov	r0, r4
 8004324:	f7fd fd66 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004328:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fa15 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004332:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8004336:	4618      	mov	r0, r3
 8004338:	f011 ffa7 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 800433c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004340:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004344:	214f      	movs	r1, #79	; 0x4f
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f000 ffc0 	bl	80052cc <_ZN3jlb5GraphixEc>
 800434c:	4604      	mov	r4, r0
 800434e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004352:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8004356:	224c      	movs	r2, #76	; 0x4c
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800435e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8004362:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800436c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8004370:	2201      	movs	r2, #1
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8004378:	4618      	mov	r0, r3
 800437a:	f011 ff84 	bl	8016286 <_ZNSaIcEC1Ev>
 800437e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8004382:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004386:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 800438a:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 800438e:	ca06      	ldmia	r2, {r1, r2}
 8004390:	f001 fa31 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004394:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8004398:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800468c <_ZN3jlb5GraphC1Ev+0x280c>
 800439c:	2200      	movs	r2, #0
 800439e:	2155      	movs	r1, #85	; 0x55
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7fd fd27 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80043a6:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f9d6 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80043b0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f011 ff68 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 80043ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80043c2:	214f      	movs	r1, #79	; 0x4f
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	f000 ff81 	bl	80052cc <_ZN3jlb5GraphixEc>
 80043ca:	4604      	mov	r4, r0
 80043cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043d0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80043d4:	224c      	movs	r2, #76	; 0x4c
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043dc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80043e0:	f607 1208 	addw	r2, r7, #2312	; 0x908
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80043ea:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80043ee:	2201      	movs	r2, #1
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80043f6:	4618      	mov	r0, r3
 80043f8:	f011 ff45 	bl	8016286 <_ZNSaIcEC1Ev>
 80043fc:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8004400:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004404:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8004408:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 800440c:	ca06      	ldmia	r2, {r1, r2}
 800440e:	f001 f9f2 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004412:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8004416:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8004680 <_ZN3jlb5GraphC1Ev+0x2800>
 800441a:	2202      	movs	r2, #2
 800441c:	2157      	movs	r1, #87	; 0x57
 800441e:	4620      	mov	r0, r4
 8004420:	f7fd fce8 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004424:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f997 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800442e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8004432:	4618      	mov	r0, r3
 8004434:	f011 ff29 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8004438:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800443c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004440:	214f      	movs	r1, #79	; 0x4f
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	f000 ff42 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004448:	4604      	mov	r4, r0
 800444a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800444e:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8004452:	224c      	movs	r2, #76	; 0x4c
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800445a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800445e:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004468:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800446c:	2201      	movs	r2, #1
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8004474:	4618      	mov	r0, r3
 8004476:	f011 ff06 	bl	8016286 <_ZNSaIcEC1Ev>
 800447a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800447e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004482:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8004486:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 800448a:	ca06      	ldmia	r2, {r1, r2}
 800448c:	f001 f9b3 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004490:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8004494:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800468c <_ZN3jlb5GraphC1Ev+0x280c>
 8004498:	2201      	movs	r2, #1
 800449a:	2154      	movs	r1, #84	; 0x54
 800449c:	4620      	mov	r0, r4
 800449e:	f7fd fca9 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80044a2:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f958 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80044ac:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80044b0:	4618      	mov	r0, r3
 80044b2:	f011 feea 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 80044b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80044be:	2150      	movs	r1, #80	; 0x50
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	f000 ff03 	bl	80052cc <_ZN3jlb5GraphixEc>
 80044c6:	4604      	mov	r4, r0
 80044c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044cc:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80044d0:	2250      	movs	r2, #80	; 0x50
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044d8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80044dc:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80044e6:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80044ea:	2201      	movs	r2, #1
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80044f2:	4618      	mov	r0, r3
 80044f4:	f011 fec7 	bl	8016286 <_ZNSaIcEC1Ev>
 80044f8:	f607 1344 	addw	r3, r7, #2372	; 0x944
 80044fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004500:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8004504:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8004508:	ca06      	ldmia	r2, {r1, r2}
 800450a:	f001 f974 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800450e:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8004512:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800468c <_ZN3jlb5GraphC1Ev+0x280c>
 8004516:	2200      	movs	r2, #0
 8004518:	214d      	movs	r1, #77	; 0x4d
 800451a:	4620      	mov	r0, r4
 800451c:	f7fd fc6a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004520:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f919 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800452a:	f607 1344 	addw	r3, r7, #2372	; 0x944
 800452e:	4618      	mov	r0, r3
 8004530:	f011 feab 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8004534:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004538:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800453c:	2150      	movs	r1, #80	; 0x50
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	f000 fec4 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004544:	4604      	mov	r4, r0
 8004546:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800454a:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 800454e:	2250      	movs	r2, #80	; 0x50
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004556:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800455a:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004564:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004568:	2201      	movs	r2, #1
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8004570:	4618      	mov	r0, r3
 8004572:	f011 fe88 	bl	8016286 <_ZNSaIcEC1Ev>
 8004576:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800457a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800457e:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8004582:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8004586:	ca06      	ldmia	r2, {r1, r2}
 8004588:	f001 f935 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800458c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8004590:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8004688 <_ZN3jlb5GraphC1Ev+0x2808>
 8004594:	2202      	movs	r2, #2
 8004596:	2151      	movs	r1, #81	; 0x51
 8004598:	4620      	mov	r0, r4
 800459a:	f7fd fc2b 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800459e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f8da 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80045a8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80045ac:	4618      	mov	r0, r3
 80045ae:	f011 fe6c 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 80045b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045ba:	2151      	movs	r1, #81	; 0x51
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	f000 fe85 	bl	80052cc <_ZN3jlb5GraphixEc>
 80045c2:	4604      	mov	r4, r0
 80045c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045c8:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80045cc:	2252      	movs	r2, #82	; 0x52
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045d4:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80045d8:	f607 1278 	addw	r2, r7, #2424	; 0x978
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045e2:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80045e6:	2201      	movs	r2, #1
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80045ee:	4618      	mov	r0, r3
 80045f0:	f011 fe49 	bl	8016286 <_ZNSaIcEC1Ev>
 80045f4:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 80045f8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80045fc:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8004600:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8004604:	ca06      	ldmia	r2, {r1, r2}
 8004606:	f001 f8f6 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800460a:	f607 1364 	addw	r3, r7, #2404	; 0x964
 800460e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004688 <_ZN3jlb5GraphC1Ev+0x2808>
 8004612:	2202      	movs	r2, #2
 8004614:	2150      	movs	r1, #80	; 0x50
 8004616:	4620      	mov	r0, r4
 8004618:	f7fd fbec 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800461c:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f89b 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004626:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 800462a:	4618      	mov	r0, r3
 800462c:	f011 fe2d 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8004630:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004634:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004638:	2151      	movs	r1, #81	; 0x51
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	f000 fe46 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004640:	4604      	mov	r4, r0
 8004642:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004646:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <_ZN3jlb5GraphC1Ev+0x2804>)
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004654:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8004658:	f607 1294 	addw	r2, r7, #2452	; 0x994
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004662:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8004666:	2202      	movs	r2, #2
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	f607 1398 	addw	r3, r7, #2456	; 0x998
 800466e:	4618      	mov	r0, r3
 8004670:	f011 fe09 	bl	8016286 <_ZNSaIcEC1Ev>
 8004674:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8004678:	e00c      	b.n	8004694 <_ZN3jlb5GraphC1Ev+0x2814>
 800467a:	bf00      	nop
 800467c:	080181ac 	.word	0x080181ac
 8004680:	3fc56fea 	.word	0x3fc56fea
 8004684:	080181b0 	.word	0x080181b0
 8004688:	3f19999a 	.word	0x3f19999a
 800468c:	3f71463a 	.word	0x3f71463a
 8004690:	401c518f 	.word	0x401c518f
 8004694:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004698:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800469c:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 80046a0:	ca06      	ldmia	r2, {r1, r2}
 80046a2:	f001 f8a8 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80046a6:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80046aa:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8004688 <_ZN3jlb5GraphC1Ev+0x2808>
 80046ae:	2202      	movs	r2, #2
 80046b0:	214d      	movs	r1, #77	; 0x4d
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7fd fb9e 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80046b8:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 f84d 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80046c2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80046c6:	4618      	mov	r0, r3
 80046c8:	f011 fddf 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 80046cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046d0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046d4:	2151      	movs	r1, #81	; 0x51
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	f000 fdf8 	bl	80052cc <_ZN3jlb5GraphixEc>
 80046dc:	4604      	mov	r4, r0
 80046de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046e2:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80046e6:	2250      	movs	r2, #80	; 0x50
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046ee:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80046f2:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046fc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8004700:	2201      	movs	r2, #1
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004708:	4618      	mov	r0, r3
 800470a:	f011 fdbc 	bl	8016286 <_ZNSaIcEC1Ev>
 800470e:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004712:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004716:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 800471a:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 800471e:	ca06      	ldmia	r2, {r1, r2}
 8004720:	f001 f869 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004724:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8004728:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8004688 <_ZN3jlb5GraphC1Ev+0x2808>
 800472c:	2202      	movs	r2, #2
 800472e:	2152      	movs	r1, #82	; 0x52
 8004730:	4620      	mov	r0, r4
 8004732:	f7fd fb5f 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004736:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f80e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004740:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8004744:	4618      	mov	r0, r3
 8004746:	f011 fda0 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 800474a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800474e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004752:	2151      	movs	r1, #81	; 0x51
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f000 fdb9 	bl	80052cc <_ZN3jlb5GraphixEc>
 800475a:	4604      	mov	r4, r0
 800475c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004760:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8004764:	224d      	movs	r2, #77	; 0x4d
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800476c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8004770:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800477a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800477e:	2201      	movs	r2, #1
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004786:	4618      	mov	r0, r3
 8004788:	f011 fd7d 	bl	8016286 <_ZNSaIcEC1Ev>
 800478c:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004790:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004794:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8004798:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 800479c:	ca06      	ldmia	r2, {r1, r2}
 800479e:	f001 f82a 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80047a2:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80047a6:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 800468c <_ZN3jlb5GraphC1Ev+0x280c>
 80047aa:	2200      	movs	r2, #0
 80047ac:	2156      	movs	r1, #86	; 0x56
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7fd fb20 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80047b4:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 ffcf 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80047be:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f011 fd61 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80047c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047d0:	2151      	movs	r1, #81	; 0x51
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	f000 fd7a 	bl	80052cc <_ZN3jlb5GraphixEc>
 80047d8:	4604      	mov	r4, r0
 80047da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047de:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80047e2:	224d      	movs	r2, #77	; 0x4d
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047ea:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80047ee:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047f8:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80047fc:	2201      	movs	r2, #1
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004804:	4618      	mov	r0, r3
 8004806:	f011 fd3e 	bl	8016286 <_ZNSaIcEC1Ev>
 800480a:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 800480e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004812:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8004816:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 800481a:	ca06      	ldmia	r2, {r1, r2}
 800481c:	f000 ffeb 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004820:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8004824:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8004690 <_ZN3jlb5GraphC1Ev+0x2810>
 8004828:	2202      	movs	r2, #2
 800482a:	2158      	movs	r1, #88	; 0x58
 800482c:	4620      	mov	r0, r4
 800482e:	f7fd fae1 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004832:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ff90 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800483c:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8004840:	4618      	mov	r0, r3
 8004842:	f011 fd22 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8004846:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800484a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800484e:	2152      	movs	r1, #82	; 0x52
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f000 fd3b 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004856:	4604      	mov	r4, r0
 8004858:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800485c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8004860:	4ae6      	ldr	r2, [pc, #920]	; (8004bfc <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8004862:	8812      	ldrh	r2, [r2, #0]
 8004864:	801a      	strh	r2, [r3, #0]
 8004866:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800486a:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800486e:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004878:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800487c:	2202      	movs	r2, #2
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8004884:	4618      	mov	r0, r3
 8004886:	f011 fcfe 	bl	8016286 <_ZNSaIcEC1Ev>
 800488a:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800488e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004892:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8004896:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 800489a:	ca06      	ldmia	r2, {r1, r2}
 800489c:	f000 ffab 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80048a0:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80048a4:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8004c00 <_ZN3jlb5GraphC1Ev+0x2d80>
 80048a8:	2202      	movs	r2, #2
 80048aa:	2151      	movs	r1, #81	; 0x51
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7fd faa1 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80048b2:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 ff50 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80048bc:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80048c0:	4618      	mov	r0, r3
 80048c2:	f011 fce2 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 80048c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048ca:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048ce:	2152      	movs	r1, #82	; 0x52
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	f000 fcfb 	bl	80052cc <_ZN3jlb5GraphixEc>
 80048d6:	4604      	mov	r4, r0
 80048d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048dc:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80048e0:	4ac6      	ldr	r2, [pc, #792]	; (8004bfc <_ZN3jlb5GraphC1Ev+0x2d7c>)
 80048e2:	8812      	ldrh	r2, [r2, #0]
 80048e4:	801a      	strh	r2, [r3, #0]
 80048e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048ea:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80048ee:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048f8:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80048fc:	2202      	movs	r2, #2
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004904:	4618      	mov	r0, r3
 8004906:	f011 fcbe 	bl	8016286 <_ZNSaIcEC1Ev>
 800490a:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800490e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004912:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8004916:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 800491a:	ca06      	ldmia	r2, {r1, r2}
 800491c:	f000 ff6b 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004920:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8004924:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8004c0c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004928:	2201      	movs	r2, #1
 800492a:	214d      	movs	r1, #77	; 0x4d
 800492c:	4620      	mov	r0, r4
 800492e:	f7fd fa61 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004932:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8004936:	4618      	mov	r0, r3
 8004938:	f000 ff10 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800493c:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8004940:	4618      	mov	r0, r3
 8004942:	f011 fca2 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 8004946:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800494a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800494e:	2152      	movs	r1, #82	; 0x52
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	f000 fcbb 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004956:	4604      	mov	r4, r0
 8004958:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800495c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8004960:	4aa8      	ldr	r2, [pc, #672]	; (8004c04 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800496a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800496e:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004978:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800497c:	2202      	movs	r2, #2
 800497e:	605a      	str	r2, [r3, #4]
 8004980:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004984:	4618      	mov	r0, r3
 8004986:	f011 fc7e 	bl	8016286 <_ZNSaIcEC1Ev>
 800498a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800498e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004992:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8004996:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 800499a:	ca06      	ldmia	r2, {r1, r2}
 800499c:	f000 ff2b 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80049a0:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80049a4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004c0c <_ZN3jlb5GraphC1Ev+0x2d8c>
 80049a8:	2200      	movs	r2, #0
 80049aa:	214e      	movs	r1, #78	; 0x4e
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7fd fa21 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80049b2:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fed0 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80049bc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049c0:	4618      	mov	r0, r3
 80049c2:	f011 fc62 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 80049c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049ca:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80049ce:	2152      	movs	r1, #82	; 0x52
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f000 fc7b 	bl	80052cc <_ZN3jlb5GraphixEc>
 80049d6:	4604      	mov	r4, r0
 80049d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049dc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80049e0:	4a88      	ldr	r2, [pc, #544]	; (8004c04 <_ZN3jlb5GraphC1Ev+0x2d84>)
 80049e2:	8812      	ldrh	r2, [r2, #0]
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049ea:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80049ee:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049f8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80049fc:	2202      	movs	r2, #2
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004a04:	4618      	mov	r0, r3
 8004a06:	f011 fc3e 	bl	8016286 <_ZNSaIcEC1Ev>
 8004a0a:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004a0e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a12:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8004a16:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8004a1a:	ca06      	ldmia	r2, {r1, r2}
 8004a1c:	f000 feeb 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a20:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8004a24:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8004c00 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004a28:	2202      	movs	r2, #2
 8004a2a:	2153      	movs	r1, #83	; 0x53
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f7fd f9e1 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004a32:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fe90 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004a3c:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8004a40:	4618      	mov	r0, r3
 8004a42:	f011 fc22 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 8004a46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a4a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a4e:	2153      	movs	r1, #83	; 0x53
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	f000 fc3b 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004a56:	4604      	mov	r4, r0
 8004a58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a5c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8004a60:	2254      	movs	r2, #84	; 0x54
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a6c:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004a82:	4618      	mov	r0, r3
 8004a84:	f011 fbff 	bl	8016286 <_ZNSaIcEC1Ev>
 8004a88:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004a8c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004a90:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8004a94:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8004a98:	ca06      	ldmia	r2, {r1, r2}
 8004a9a:	f000 feac 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004a9e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8004aa2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8004c00 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	2152      	movs	r1, #82	; 0x52
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f7fd f9a2 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ab0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fe51 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004aba:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f011 fbe3 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 8004ac4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ac8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004acc:	2153      	movs	r1, #83	; 0x53
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f000 fbfc 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ada:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004ade:	4a4a      	ldr	r2, [pc, #296]	; (8004c08 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8004ae0:	8812      	ldrh	r2, [r2, #0]
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ae8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004aec:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004af6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004afa:	2202      	movs	r2, #2
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004b02:	4618      	mov	r0, r3
 8004b04:	f011 fbbf 	bl	8016286 <_ZNSaIcEC1Ev>
 8004b08:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004b0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b10:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8004b14:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8004b18:	ca06      	ldmia	r2, {r1, r2}
 8004b1a:	f000 fe6c 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b1e:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8004b22:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004c00 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004b26:	2202      	movs	r2, #2
 8004b28:	214e      	movs	r1, #78	; 0x4e
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7fd f962 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004b30:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fe11 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004b3a:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f011 fba3 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8004b44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b4c:	2153      	movs	r1, #83	; 0x53
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	f000 fbbc 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004b54:	4604      	mov	r4, r0
 8004b56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004b5e:	2252      	movs	r2, #82	; 0x52
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004b6a:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b74:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004b78:	2201      	movs	r2, #1
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f011 fb80 	bl	8016286 <_ZNSaIcEC1Ev>
 8004b86:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b8a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b8e:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8004b92:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 8004b96:	ca06      	ldmia	r2, {r1, r2}
 8004b98:	f000 fe2d 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b9c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004ba0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004c00 <_ZN3jlb5GraphC1Ev+0x2d80>
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	2154      	movs	r1, #84	; 0x54
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7fd f923 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004bae:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fdd2 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004bb8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f011 fb64 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 8004bc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bc6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004bca:	2153      	movs	r1, #83	; 0x53
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	f000 fb7d 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bd8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004bdc:	224e      	movs	r2, #78	; 0x4e
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004be4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004be8:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bf2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	e009      	b.n	8004c10 <_ZN3jlb5GraphC1Ev+0x2d90>
 8004bfc:	080181b4 	.word	0x080181b4
 8004c00:	3f19999a 	.word	0x3f19999a
 8004c04:	080181b8 	.word	0x080181b8
 8004c08:	080181bc 	.word	0x080181bc
 8004c0c:	3f71463a 	.word	0x3f71463a
 8004c10:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004c14:	4618      	mov	r0, r3
 8004c16:	f011 fb36 	bl	8016286 <_ZNSaIcEC1Ev>
 8004c1a:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004c1e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c22:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c26:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8004c2a:	ca06      	ldmia	r2, {r1, r2}
 8004c2c:	f000 fde3 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c30:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004c34:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8004c0c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2157      	movs	r1, #87	; 0x57
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f7fd f8d9 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004c42:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fd88 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004c4c:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8004c50:	4618      	mov	r0, r3
 8004c52:	f011 fb1a 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8004c56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c5a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c5e:	2153      	movs	r1, #83	; 0x53
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f000 fb33 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004c66:	4604      	mov	r4, r0
 8004c68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c70:	224e      	movs	r2, #78	; 0x4e
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c7c:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004c92:	4618      	mov	r0, r3
 8004c94:	f011 faf7 	bl	8016286 <_ZNSaIcEC1Ev>
 8004c98:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004c9c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004ca0:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8004ca4:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8004ca8:	ca06      	ldmia	r2, {r1, r2}
 8004caa:	f000 fda4 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004cae:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8004cb2:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8004c0c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2156      	movs	r1, #86	; 0x56
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f7fd f89a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004cc0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fd49 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004cca:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f011 fadb 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8004cd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cd8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004cdc:	2154      	movs	r1, #84	; 0x54
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	f000 faf4 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004cee:	4ae9      	ldr	r2, [pc, #932]	; (8005094 <_ZN3jlb5GraphC1Ev+0x3214>)
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cf8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004cfc:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8004d12:	4618      	mov	r0, r3
 8004d14:	f011 fab7 	bl	8016286 <_ZNSaIcEC1Ev>
 8004d18:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8004d1c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004d20:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8004d24:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8004d28:	ca06      	ldmia	r2, {r1, r2}
 8004d2a:	f000 fd64 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d2e:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8004d32:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8005098 <_ZN3jlb5GraphC1Ev+0x3218>
 8004d36:	2202      	movs	r2, #2
 8004d38:	2153      	movs	r1, #83	; 0x53
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7fd f85a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d40:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fd09 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004d4a:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f011 fa9b 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 8004d54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d58:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d5c:	2154      	movs	r1, #84	; 0x54
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	f000 fab4 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004d64:	4604      	mov	r4, r0
 8004d66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d6a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d6e:	4ac9      	ldr	r2, [pc, #804]	; (8005094 <_ZN3jlb5GraphC1Ev+0x3214>)
 8004d70:	8812      	ldrh	r2, [r2, #0]
 8004d72:	801a      	strh	r2, [r3, #0]
 8004d74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d78:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d7c:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004d92:	4618      	mov	r0, r3
 8004d94:	f011 fa77 	bl	8016286 <_ZNSaIcEC1Ev>
 8004d98:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004d9c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004da0:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8004da4:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8004da8:	ca06      	ldmia	r2, {r1, r2}
 8004daa:	f000 fd24 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004dae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004db2:	ed9f 0abd 	vldr	s0, [pc, #756]	; 80050a8 <_ZN3jlb5GraphC1Ev+0x3228>
 8004db6:	2201      	movs	r2, #1
 8004db8:	214e      	movs	r1, #78	; 0x4e
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7fd f81a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004dc0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fcc9 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004dca:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f011 fa5b 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8004dd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dd8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ddc:	2154      	movs	r1, #84	; 0x54
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	f000 fa74 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004de4:	4604      	mov	r4, r0
 8004de6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dee:	4aab      	ldr	r2, [pc, #684]	; (800509c <_ZN3jlb5GraphC1Ev+0x321c>)
 8004df0:	8812      	ldrh	r2, [r2, #0]
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004df8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004dfc:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8004e12:	4618      	mov	r0, r3
 8004e14:	f011 fa37 	bl	8016286 <_ZNSaIcEC1Ev>
 8004e18:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8004e1c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004e20:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8004e24:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8004e28:	ca06      	ldmia	r2, {r1, r2}
 8004e2a:	f000 fce4 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004e2e:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8004e32:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80050a8 <_ZN3jlb5GraphC1Ev+0x3228>
 8004e36:	2200      	movs	r2, #0
 8004e38:	214f      	movs	r1, #79	; 0x4f
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7fc ffda 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004e40:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fc89 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004e4a:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f011 fa1b 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 8004e54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e58:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e5c:	2154      	movs	r1, #84	; 0x54
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	f000 fa34 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004e64:	4604      	mov	r4, r0
 8004e66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e6e:	4a8b      	ldr	r2, [pc, #556]	; (800509c <_ZN3jlb5GraphC1Ev+0x321c>)
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	801a      	strh	r2, [r3, #0]
 8004e74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e7c:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8004e92:	4618      	mov	r0, r3
 8004e94:	f011 f9f7 	bl	8016286 <_ZNSaIcEC1Ev>
 8004e98:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8004e9c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004ea0:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8004ea4:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8004ea8:	ca06      	ldmia	r2, {r1, r2}
 8004eaa:	f000 fca4 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004eae:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004eb2:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80050a4 <_ZN3jlb5GraphC1Ev+0x3224>
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	2155      	movs	r1, #85	; 0x55
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7fc ff9a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ec0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fc49 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004eca:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f011 f9db 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8004ed4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ed8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004edc:	2155      	movs	r1, #85	; 0x55
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f000 f9f4 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	2355      	movs	r3, #85	; 0x55
 8004ee8:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8004eec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ef0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ef4:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004efe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f02:	2201      	movs	r2, #1
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f011 f9bb 	bl	8016286 <_ZNSaIcEC1Ev>
 8004f10:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8004f14:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004f18:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f1c:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8004f20:	ca06      	ldmia	r2, {r1, r2}
 8004f22:	f000 fc68 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004f26:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8004f2a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80050a4 <_ZN3jlb5GraphC1Ev+0x3224>
 8004f2e:	2202      	movs	r2, #2
 8004f30:	2154      	movs	r1, #84	; 0x54
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7fc ff5e 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004f38:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fc0d 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004f42:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8004f46:	4618      	mov	r0, r3
 8004f48:	f011 f99f 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8004f4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f50:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f54:	2155      	movs	r1, #85	; 0x55
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	f000 f9b8 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	2355      	movs	r3, #85	; 0x55
 8004f60:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8004f64:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8004f68:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 8004f72:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8004f76:	4618      	mov	r0, r3
 8004f78:	f011 f985 	bl	8016286 <_ZNSaIcEC1Ev>
 8004f7c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8004f80:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 8004f84:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8004f88:	ca06      	ldmia	r2, {r1, r2}
 8004f8a:	f000 fc34 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004f8e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8004f92:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80050a8 <_ZN3jlb5GraphC1Ev+0x3228>
 8004f96:	2201      	movs	r2, #1
 8004f98:	214f      	movs	r1, #79	; 0x4f
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7fc ff2a 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004fa0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fbd9 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8004faa:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f011 f96b 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 8004fb4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fb8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fbc:	2156      	movs	r1, #86	; 0x56
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	f000 f984 	bl	80052cc <_ZN3jlb5GraphixEc>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <_ZN3jlb5GraphC1Ev+0x3220>)
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8004fce:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8004fd2:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8004fdc:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f011 f950 	bl	8016286 <_ZNSaIcEC1Ev>
 8004fe6:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8004fea:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8004fee:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8004ff2:	ca06      	ldmia	r2, {r1, r2}
 8004ff4:	f000 fbff 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ff8:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8004ffc:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80050a8 <_ZN3jlb5GraphC1Ev+0x3228>
 8005000:	2201      	movs	r2, #1
 8005002:	2151      	movs	r1, #81	; 0x51
 8005004:	4620      	mov	r0, r4
 8005006:	f7fc fef5 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800500a:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fba4 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8005014:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8005018:	4618      	mov	r0, r3
 800501a:	f011 f936 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 800501e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005022:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005026:	2156      	movs	r1, #86	; 0x56
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	f000 f94f 	bl	80052cc <_ZN3jlb5GraphixEc>
 800502e:	4604      	mov	r4, r0
 8005030:	2351      	movs	r3, #81	; 0x51
 8005032:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 8005036:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 800503a:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 800503e:	2301      	movs	r3, #1
 8005040:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8005044:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8005048:	4618      	mov	r0, r3
 800504a:	f011 f91c 	bl	8016286 <_ZNSaIcEC1Ev>
 800504e:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8005052:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 8005056:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 800505a:	ca06      	ldmia	r2, {r1, r2}
 800505c:	f000 fbcb 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005060:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8005064:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80050a8 <_ZN3jlb5GraphC1Ev+0x3228>
 8005068:	2200      	movs	r2, #0
 800506a:	2153      	movs	r1, #83	; 0x53
 800506c:	4620      	mov	r0, r4
 800506e:	f7fc fec1 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005072:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb70 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 800507c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8005080:	4618      	mov	r0, r3
 8005082:	f011 f902 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 8005086:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800508a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800508e:	2156      	movs	r1, #86	; 0x56
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	e00b      	b.n	80050ac <_ZN3jlb5GraphC1Ev+0x322c>
 8005094:	080181c0 	.word	0x080181c0
 8005098:	3f19999a 	.word	0x3f19999a
 800509c:	080181b4 	.word	0x080181b4
 80050a0:	080181c4 	.word	0x080181c4
 80050a4:	3f99999a 	.word	0x3f99999a
 80050a8:	3f71463a 	.word	0x3f71463a
 80050ac:	f000 f90e 	bl	80052cc <_ZN3jlb5GraphixEc>
 80050b0:	4604      	mov	r4, r0
 80050b2:	2351      	movs	r3, #81	; 0x51
 80050b4:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 80050b8:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80050bc:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 80050c0:	2301      	movs	r3, #1
 80050c2:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 80050c6:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f011 f8db 	bl	8016286 <_ZNSaIcEC1Ev>
 80050d0:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 80050d4:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 80050d8:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 80050dc:	ca06      	ldmia	r2, {r1, r2}
 80050de:	f000 fb8a 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80050e2:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 80050e6:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 80050a4 <_ZN3jlb5GraphC1Ev+0x3224>
 80050ea:	2202      	movs	r2, #2
 80050ec:	2157      	movs	r1, #87	; 0x57
 80050ee:	4620      	mov	r0, r4
 80050f0:	f7fc fe80 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80050f4:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fb2f 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80050fe:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8005102:	4618      	mov	r0, r3
 8005104:	f011 f8c1 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8005108:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800510c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005110:	2157      	movs	r1, #87	; 0x57
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	f000 f8da 	bl	80052cc <_ZN3jlb5GraphixEc>
 8005118:	4604      	mov	r4, r0
 800511a:	234f      	movs	r3, #79	; 0x4f
 800511c:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8005120:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8005124:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8005128:	2301      	movs	r3, #1
 800512a:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 800512e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005132:	4618      	mov	r0, r3
 8005134:	f011 f8a7 	bl	8016286 <_ZNSaIcEC1Ev>
 8005138:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800513c:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8005140:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 8005144:	ca06      	ldmia	r2, {r1, r2}
 8005146:	f000 fb56 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800514a:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 800514e:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 80050a4 <_ZN3jlb5GraphC1Ev+0x3224>
 8005152:	2202      	movs	r2, #2
 8005154:	2156      	movs	r1, #86	; 0x56
 8005156:	4620      	mov	r0, r4
 8005158:	f7fc fe4c 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800515c:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fafb 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8005166:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800516a:	4618      	mov	r0, r3
 800516c:	f011 f88d 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 8005170:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005174:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005178:	2157      	movs	r1, #87	; 0x57
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	f000 f8a6 	bl	80052cc <_ZN3jlb5GraphixEc>
 8005180:	4604      	mov	r4, r0
 8005182:	234f      	movs	r3, #79	; 0x4f
 8005184:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 8005188:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 800518c:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8005190:	2301      	movs	r3, #1
 8005192:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8005196:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800519a:	4618      	mov	r0, r3
 800519c:	f011 f873 	bl	8016286 <_ZNSaIcEC1Ev>
 80051a0:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80051a4:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 80051a8:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80051ac:	ca06      	ldmia	r2, {r1, r2}
 80051ae:	f000 fb22 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80051b2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80051b6:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 80050a8 <_ZN3jlb5GraphC1Ev+0x3228>
 80051ba:	2201      	movs	r2, #1
 80051bc:	2153      	movs	r1, #83	; 0x53
 80051be:	4620      	mov	r0, r4
 80051c0:	f7fc fe18 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80051c4:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fac7 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80051ce:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80051d2:	4618      	mov	r0, r3
 80051d4:	f011 f859 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 80051d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051dc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80051e0:	2157      	movs	r1, #87	; 0x57
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	f000 f872 	bl	80052cc <_ZN3jlb5GraphixEc>
 80051e8:	4604      	mov	r4, r0
 80051ea:	4b35      	ldr	r3, [pc, #212]	; (80052c0 <_ZN3jlb5GraphC1Ev+0x3440>)
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 80051f2:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 80051f6:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 80051fa:	2302      	movs	r3, #2
 80051fc:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8005200:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8005204:	4618      	mov	r0, r3
 8005206:	f011 f83e 	bl	8016286 <_ZNSaIcEC1Ev>
 800520a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800520e:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 8005212:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 8005216:	ca06      	ldmia	r2, {r1, r2}
 8005218:	f000 faed 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800521c:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005220:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80052c4 <_ZN3jlb5GraphC1Ev+0x3444>
 8005224:	2202      	movs	r2, #2
 8005226:	214f      	movs	r1, #79	; 0x4f
 8005228:	4620      	mov	r0, r4
 800522a:	f7fc fde3 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800522e:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa92 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 8005238:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800523c:	4618      	mov	r0, r3
 800523e:	f011 f824 	bl	801628a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8005242:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005246:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800524a:	2158      	movs	r1, #88	; 0x58
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f000 f83d 	bl	80052cc <_ZN3jlb5GraphixEc>
 8005252:	4604      	mov	r4, r0
 8005254:	2358      	movs	r3, #88	; 0x58
 8005256:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 800525a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 800525e:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 8005262:	2301      	movs	r3, #1
 8005264:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 8005268:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 800526c:	4618      	mov	r0, r3
 800526e:	f011 f80a 	bl	8016286 <_ZNSaIcEC1Ev>
 8005272:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8005276:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 800527a:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 800527e:	ca06      	ldmia	r2, {r1, r2}
 8005280:	f000 fab9 	bl	80057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005284:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 8005288:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80052c8 <_ZN3jlb5GraphC1Ev+0x3448>
 800528c:	2202      	movs	r2, #2
 800528e:	2151      	movs	r1, #81	; 0x51
 8005290:	4620      	mov	r0, r4
 8005292:	f7fc fdaf 	bl	8001df4 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005296:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fa5e 	bl	800575c <_ZNSt6vectorIcSaIcEED1Ev>
 80052a0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80052a4:	4618      	mov	r0, r3
 80052a6:	f010 fff0 	bl	801628a <_ZNSaIcED1Ev>
        }
 80052aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd90      	pop	{r4, r7, pc}
 80052be:	bf00      	nop
 80052c0:	080181c8 	.word	0x080181c8
 80052c4:	3fc56fea 	.word	0x3fc56fea
 80052c8:	401c518f 	.word	0x401c518f

080052cc <_ZN3jlb5GraphixEc>:

        ~Graph() {}

        Node &operator[](char name)
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty())
                throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X')
                throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	3b41      	subs	r3, #65	; 0x41
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f000 faa9 	bl	8005838 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 80052e6:	4603      	mov	r3, r0
        }
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
        Controller controller;
        ASState as_state;
        Graph graph;
        SignalSender signal_sender = SignalSender(odometry, controller, as_state);

        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6178      	str	r0, [r7, #20]
 80052f8:	6139      	str	r1, [r7, #16]
 80052fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80052fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8005302:	ed87 1a01 	vstr	s2, [r7, #4]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	ed97 1a01 	vldr	s2, [r7, #4]
 800530c:	edd7 0a02 	vldr	s1, [r7, #8]
 8005310:	ed97 0a03 	vldr	s0, [r7, #12]
 8005314:	4618      	mov	r0, r3
 8005316:	f7fc fbeb 	bl	8001af0 <_ZN3jlb8OdometryC1Efff>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	3384      	adds	r3, #132	; 0x84
 800531e:	6939      	ldr	r1, [r7, #16]
 8005320:	4618      	mov	r0, r3
 8005322:	f7fc fca7 	bl	8001c74 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800532c:	4618      	mov	r0, r3
 800532e:	f7fc fda7 	bl	8001e80 <_ZN3jlb5GraphC1Ev>
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005346:	f7fc fcdc 	bl	8001d02 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateE>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2255      	movs	r2, #85	; 0x55
 8005366:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2255      	movs	r2, #85	; 0x55
 800536e:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_Z19RegistrateUserTasksv>:
{ .name = "EncoderTask", .stack_size = 128 * 4, .priority = (osPriority_t) osPriorityRealtime2 };



void RegistrateUserTasks()
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8005380:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <_Z19RegistrateUserTasksv+0x38>)
 8005382:	2100      	movs	r1, #0
 8005384:	480c      	ldr	r0, [pc, #48]	; (80053b8 <_Z19RegistrateUserTasksv+0x3c>)
 8005386:	f00e fb89 	bl	8013a9c <osThreadNew>
 800538a:	4603      	mov	r3, r0
 800538c:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <_Z19RegistrateUserTasksv+0x40>)
 800538e:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8005390:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <_Z19RegistrateUserTasksv+0x44>)
 8005392:	2100      	movs	r1, #0
 8005394:	480b      	ldr	r0, [pc, #44]	; (80053c4 <_Z19RegistrateUserTasksv+0x48>)
 8005396:	f00e fb81 	bl	8013a9c <osThreadNew>
 800539a:	4603      	mov	r3, r0
 800539c:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <_Z19RegistrateUserTasksv+0x4c>)
 800539e:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <_Z19RegistrateUserTasksv+0x50>)
 80053a2:	2100      	movs	r1, #0
 80053a4:	480a      	ldr	r0, [pc, #40]	; (80053d0 <_Z19RegistrateUserTasksv+0x54>)
 80053a6:	f00e fb79 	bl	8013a9c <osThreadNew>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a09      	ldr	r2, [pc, #36]	; (80053d4 <_Z19RegistrateUserTasksv+0x58>)
 80053ae:	6013      	str	r3, [r2, #0]

}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	0801826c 	.word	0x0801826c
 80053b8:	080053d9 	.word	0x080053d9
 80053bc:	20000230 	.word	0x20000230
 80053c0:	08018290 	.word	0x08018290
 80053c4:	08005409 	.word	0x08005409
 80053c8:	20000234 	.word	0x20000234
 80053cc:	080182b4 	.word	0x080182b4
 80053d0:	08001319 	.word	0x08001319
 80053d4:	20000238 	.word	0x20000238

080053d8 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80053e0:	f00f fcce 	bl	8014d80 <xTaskGetTickCount>
 80053e4:	4603      	mov	r3, r0
 80053e6:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80053e8:	2208      	movs	r2, #8
 80053ea:	4905      	ldr	r1, [pc, #20]	; (8005400 <_Z7ADCTaskPv+0x28>)
 80053ec:	4805      	ldr	r0, [pc, #20]	; (8005404 <_Z7ADCTaskPv+0x2c>)
 80053ee:	f004 ff41 	bl	800a274 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 80053f2:	f107 030c 	add.w	r3, r7, #12
 80053f6:	2105      	movs	r1, #5
 80053f8:	4618      	mov	r0, r3
 80053fa:	f00f fa71 	bl	80148e0 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 80053fe:	e7f3      	b.n	80053e8 <_Z7ADCTaskPv+0x10>
 8005400:	200000e4 	.word	0x200000e4
 8005404:	20000240 	.word	0x20000240

08005408 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800540e:	af00      	add	r7, sp, #0
 8005410:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8005414:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8005418:	6018      	str	r0, [r3, #0]
	static uint8_t direction = 1u;
	static uint8_t index = 0u;
	uint8_t i;
	jlb::Logic logic;
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8005590 <_Z8MainTaskPv+0x188>
 8005422:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8005590 <_Z8MainTaskPv+0x188>
 8005426:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8005590 <_Z8MainTaskPv+0x188>
 800542a:	2102      	movs	r1, #2
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff5f 	bl	80052f0 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 8005432:	4b58      	ldr	r3, [pc, #352]	; (8005594 <_Z8MainTaskPv+0x18c>)
 8005434:	899b      	ldrh	r3, [r3, #12]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543e:	eddf 6a56 	vldr	s13, [pc, #344]	; 8005598 <_Z8MainTaskPv+0x190>
 8005442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005446:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800559c <_Z8MainTaskPv+0x194>
 800544a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80055a0 <_Z8MainTaskPv+0x198>
 8005452:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005456:	ee16 0a90 	vmov	r0, s13
 800545a:	f7fb f867 	bl	800052c <__aeabi_f2d>
 800545e:	a34a      	add	r3, pc, #296	; (adr r3, 8005588 <_Z8MainTaskPv+0x180>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fb f8ba 	bl	80005dc <__aeabi_dmul>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	f7fb fb64 	bl	8000b3c <__aeabi_d2f>
 8005474:	4603      	mov	r3, r0
 8005476:	4a4b      	ldr	r2, [pc, #300]	; (80055a4 <_Z8MainTaskPv+0x19c>)
 8005478:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 800547a:	f7fc f947 	bl	800170c <_Z14LineSensorTaskv>
		MotorControlTask();
 800547e:	f7fc f9e3 	bl	8001848 <_Z16MotorControlTaskv>
		IMU_Task();
 8005482:	f7fb ffbd 	bl	8001400 <_Z8IMU_Taskv>
		DistanceSensorTask();
 8005486:	f7fb fd75 	bl	8000f74 <_Z18DistanceSensorTaskv>

		rpm_averaging_array[index++] = enc_instance_mot.rpm;
 800548a:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <_Z8MainTaskPv+0x1a0>)
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	4b47      	ldr	r3, [pc, #284]	; (80055ac <_Z8MainTaskPv+0x1a4>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	b2c8      	uxtb	r0, r1
 8005496:	4945      	ldr	r1, [pc, #276]	; (80055ac <_Z8MainTaskPv+0x1a4>)
 8005498:	7008      	strb	r0, [r1, #0]
 800549a:	4945      	ldr	r1, [pc, #276]	; (80055b0 <_Z8MainTaskPv+0x1a8>)
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	601a      	str	r2, [r3, #0]

		if(index == 5)
 80054a2:	4b42      	ldr	r3, [pc, #264]	; (80055ac <_Z8MainTaskPv+0x1a4>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d102      	bne.n	80054b0 <_Z8MainTaskPv+0xa8>
		{
			index = 0;
 80054aa:	4b40      	ldr	r3, [pc, #256]	; (80055ac <_Z8MainTaskPv+0x1a4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]
		}

		averaged_rpm = 0.0f;
 80054b0:	4b40      	ldr	r3, [pc, #256]	; (80055b4 <_Z8MainTaskPv+0x1ac>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
		for(i = 0 ; i < 5; ++i)
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80054be:	e017      	b.n	80054f0 <_Z8MainTaskPv+0xe8>
		{
			averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80054c0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80054c4:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <_Z8MainTaskPv+0x1a8>)
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	edd3 7a00 	vldr	s15, [r3]
 80054ce:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80054d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80054d6:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <_Z8MainTaskPv+0x1ac>)
 80054d8:	edd3 7a00 	vldr	s15, [r3]
 80054dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e0:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <_Z8MainTaskPv+0x1ac>)
 80054e2:	edc3 7a00 	vstr	s15, [r3]
		for(i = 0 ; i < 5; ++i)
 80054e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80054ea:	3301      	adds	r3, #1
 80054ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80054f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d9e3      	bls.n	80054c0 <_Z8MainTaskPv+0xb8>
		}

		averaged_rpm *= -1.36f;
 80054f8:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <_Z8MainTaskPv+0x1ac>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80055b8 <_Z8MainTaskPv+0x1b0>
 8005502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005506:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <_Z8MainTaskPv+0x1ac>)
 8005508:	edc3 7a00 	vstr	s15, [r3]

#ifdef TESTING
		SetSteeringAngle(0.0f);
 800550c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005590 <_Z8MainTaskPv+0x188>
 8005510:	f7fc fa90 	bl	8001a34 <_Z16SetSteeringAnglef>
		if(pwm_servo_test > 22.0f)
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <_Z8MainTaskPv+0x1b4>)
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800551e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005526:	dd03      	ble.n	8005530 <_Z8MainTaskPv+0x128>
		{
			direction = 0u;
 8005528:	4b25      	ldr	r3, [pc, #148]	; (80055c0 <_Z8MainTaskPv+0x1b8>)
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e00c      	b.n	800554a <_Z8MainTaskPv+0x142>
		}
		else if(pwm_servo_test < -22.0f)
 8005530:	4b22      	ldr	r3, [pc, #136]	; (80055bc <_Z8MainTaskPv+0x1b4>)
 8005532:	edd3 7a00 	vldr	s15, [r3]
 8005536:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 800553a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005542:	d502      	bpl.n	800554a <_Z8MainTaskPv+0x142>
		{
			direction = 1u;
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <_Z8MainTaskPv+0x1b8>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
		}
		if(direction == 1u)
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <_Z8MainTaskPv+0x1b8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10a      	bne.n	8005568 <_Z8MainTaskPv+0x160>
		{
			pwm_servo_test+= 0.5f;
 8005552:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <_Z8MainTaskPv+0x1b4>)
 8005554:	edd3 7a00 	vldr	s15, [r3]
 8005558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800555c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005560:	4b16      	ldr	r3, [pc, #88]	; (80055bc <_Z8MainTaskPv+0x1b4>)
 8005562:	edc3 7a00 	vstr	s15, [r3]
 8005566:	e009      	b.n	800557c <_Z8MainTaskPv+0x174>
		}
		else
		{
			pwm_servo_test-= 0.5f;
 8005568:	4b14      	ldr	r3, [pc, #80]	; (80055bc <_Z8MainTaskPv+0x1b4>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005572:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005576:	4b11      	ldr	r3, [pc, #68]	; (80055bc <_Z8MainTaskPv+0x1b4>)
 8005578:	edc3 7a00 	vstr	s15, [r3]
		MotorControlTask();

		logic.signal_sender.send_telemetry();

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 800557c:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <_Z8MainTaskPv+0x1bc>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f00f fa2f 	bl	80149e4 <vTaskSuspend>
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 8005586:	e754      	b.n	8005432 <_Z8MainTaskPv+0x2a>
 8005588:	2cba732e 	.word	0x2cba732e
 800558c:	3ff0b626 	.word	0x3ff0b626
 8005590:	00000000 	.word	0x00000000
 8005594:	20000104 	.word	0x20000104
 8005598:	45800000 	.word	0x45800000
 800559c:	40533333 	.word	0x40533333
 80055a0:	3e7df3b6 	.word	0x3e7df3b6
 80055a4:	20000210 	.word	0x20000210
 80055a8:	20000138 	.word	0x20000138
 80055ac:	2000023c 	.word	0x2000023c
 80055b0:	20000214 	.word	0x20000214
 80055b4:	20000228 	.word	0x20000228
 80055b8:	bfae147b 	.word	0xbfae147b
 80055bc:	2000022c 	.word	0x2000022c
 80055c0:	20000051 	.word	0x20000051
 80055c4:	20000234 	.word	0x20000234

080055c8 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f95a 	bl	800588c <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f966 	bl	80058ac <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9bd 	bl	8005972 <_ZNSaIfEC1Ev>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f9c5 	bl	800598a <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <_ZSt4copyIPKcPcET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800560a:	b590      	push	{r4, r7, lr}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f9cb 	bl	80059b2 <_ZSt12__miter_baseIPKcET_S2_>
 800561c:	4604      	mov	r4, r0
 800561e:	68b8      	ldr	r0, [r7, #8]
 8005620:	f000 f9c7 	bl	80059b2 <_ZSt12__miter_baseIPKcET_S2_>
 8005624:	4603      	mov	r3, r0
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4619      	mov	r1, r3
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f9cc 	bl	80059c8 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 8005630:	4603      	mov	r3, r0
    }
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}

0800563a <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9e3 	bl	8005a0e <_ZNSaIN3jlb4EdgeEEC1Ev>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f9eb 	bl	8005a26 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <_ZNSaIN3jlb4EdgeEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	10db      	asrs	r3, r3, #3
 8005688:	4a07      	ldr	r2, [pc, #28]	; (80056a8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800568a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800568e:	461a      	mov	r2, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9dc 	bl	8005a4e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	f7fc fb4c 	bl	8001d36 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	aaaaaaab 	.word	0xaaaaaaab

080056ac <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80056ac:	b5b0      	push	{r4, r5, r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681c      	ldr	r4, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f9d8 	bl	8005a74 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80056c4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80056c6:	461a      	mov	r2, r3
 80056c8:	4629      	mov	r1, r5
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f9dd 	bl	8005a8a <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ffcc 	bl	8005670 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bdb0      	pop	{r4, r5, r7, pc}

080056e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 80056e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80056ec:	687c      	ldr	r4, [r7, #4]
 80056ee:	6838      	ldr	r0, [r7, #0]
 80056f0:	f000 f9d9 	bl	8005aa6 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80056f4:	4605      	mov	r5, r0
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f9f1 	bl	8005ae0 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80056fe:	4602      	mov	r2, r0
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f9dc 	bl	8005ac4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	461a      	mov	r2, r3
 8005712:	4629      	mov	r1, r5
 8005714:	4620      	mov	r0, r4
 8005716:	f000 f9fa 	bl	8005b0e <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	4618      	mov	r0, r3
 8005720:	f010 fdb3 	bl	801628a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005724:	6838      	ldr	r0, [r7, #0]
 8005726:	f000 fa1e 	bl	8005b66 <_ZNKSt6vectorIcSaIcEE5beginEv>
 800572a:	4605      	mov	r5, r0
 800572c:	6838      	ldr	r0, [r7, #0]
 800572e:	f000 fa2a 	bl	8005b86 <_ZNKSt6vectorIcSaIcEE3endEv>
 8005732:	4606      	mov	r6, r0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fa34 	bl	8005ba8 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8005740:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8005742:	4622      	mov	r2, r4
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fa39 	bl	8005bbe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800574c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	605a      	str	r2, [r3, #4]
      }
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800575c <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800575c:	b5b0      	push	{r4, r5, r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681c      	ldr	r4, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fa1a 	bl	8005ba8 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8005774:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005776:	461a      	mov	r2, r3
 8005778:	4629      	mov	r1, r5
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fa30 	bl	8005be0 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f9d7 	bl	8005b36 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bdb0      	pop	{r4, r5, r7, pc}

08005792 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800579c:	6838      	ldr	r0, [r7, #0]
 800579e:	f000 fa2d 	bl	8005bfc <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa33 	bl	8005c12 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80057ac:	bf00      	nop
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa5b 	bl	8005c78 <_ZNSaIN3jlb4NodeEEC1Ev>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fa63 	bl	8005c90 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80057de:	6838      	ldr	r0, [r7, #0]
 80057e0:	f000 fa96 	bl	8005d10 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa9c 	bl	8005d26 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 80057f6:	b5b0      	push	{r4, r5, r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	1d38      	adds	r0, r7, #4
 8005800:	e880 0006 	stmia.w	r0, {r1, r2}
 8005804:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fabe 	bl	8005d8c <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8005810:	1d3b      	adds	r3, r7, #4
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fac9 	bl	8005daa <_ZNKSt16initializer_listIcE5beginEv>
 8005818:	4604      	mov	r4, r0
 800581a:	1d3b      	adds	r3, r7, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fad0 	bl	8005dc2 <_ZNKSt16initializer_listIcE3endEv>
 8005822:	4602      	mov	r2, r0
 8005824:	462b      	mov	r3, r5
 8005826:	4621      	mov	r1, r4
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 faef 	bl	8005e0c <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bdb0      	pop	{r4, r5, r7, pc}

08005838 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	440b      	add	r3, r1
      }
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	10db      	asrs	r3, r3, #3
 8005874:	4a04      	ldr	r2, [pc, #16]	; (8005888 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	aaaaaaab 	.word	0xaaaaaaab

0800588c <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f86c 	bl	8005972 <_ZNSaIfEC1Ev>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 faed 	bl	8005e7c <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80058ac:	b590      	push	{r4, r7, lr}
 80058ae:	b089      	sub	sp, #36	; 0x24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80058b6:	2004      	movs	r0, #4
 80058b8:	f7fc f8f8 	bl	8001aac <_ZSt16__deque_buf_sizej>
 80058bc:	4602      	mov	r2, r0
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80058c8:	2308      	movs	r3, #8
 80058ca:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	3302      	adds	r3, #2
 80058d0:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80058d2:	f107 0210 	add.w	r2, r7, #16
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fae6 	bl	8005eae <_ZSt3maxIjERKT_S2_S2_>
 80058e2:	4603      	mov	r3, r0
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 faf0 	bl	8005ed6 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 80058f6:	4602      	mov	r2, r0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6859      	ldr	r1, [r3, #4]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	1acb      	subs	r3, r1, r3
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800590c:	4413      	add	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4413      	add	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 faf6 	bl	8005f10 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3308      	adds	r3, #8
 8005928:	69b9      	ldr	r1, [r7, #24]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fb0b 	bl	8005f46 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f103 0218 	add.w	r2, r3, #24
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	3b04      	subs	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f000 fb02 	bl	8005f46 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800594e:	2004      	movs	r0, #4
 8005950:	f7fc f8ac 	bl	8001aac <_ZSt16__deque_buf_sizej>
 8005954:	4602      	mov	r2, r0
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	fbb3 f1f2 	udiv	r1, r3, r2
 800595c:	fb01 f202 	mul.w	r2, r1, r2
 8005960:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	619a      	str	r2, [r3, #24]
    }
 800596a:	bf00      	nop
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd90      	pop	{r4, r7, pc}

08005972 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb32 	bl	8005fe4 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	609a      	str	r2, [r3, #8]
	{ }
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4618      	mov	r0, r3
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80059c8:	b5b0      	push	{r4, r5, r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fb10 	bl	8005ffa <_ZSt12__niter_baseIPKcET_S2_>
 80059da:	4604      	mov	r4, r0
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f000 fb0c 	bl	8005ffa <_ZSt12__niter_baseIPKcET_S2_>
 80059e2:	4605      	mov	r5, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fb12 	bl	8006010 <_ZSt12__niter_baseIPcET_S1_>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	4629      	mov	r1, r5
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fb17 	bl	8006026 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 80059f8:	4602      	mov	r2, r0
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fb21 	bl	8006046 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8005a04:	4603      	mov	r3, r0
    }
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bdb0      	pop	{r4, r5, r7, pc}

08005a0e <_ZNSaIN3jlb4EdgeEEC1Ev>:
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb21 	bl	800605e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
	{ }
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fb04 	bl	8006074 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fb0a 	bl	80060b2 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fb03 	bl	80060de <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f010 fbc3 	bl	801628a <_ZNSaIcED1Ev>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 faea 	bl	80060f8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 faf8 	bl	800611c <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fafe 	bl	8006150 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff ffcd 	bl	8005af6 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	f107 030c 	add.w	r3, r7, #12
 8005b74:	4611      	mov	r1, r2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fafd 	bl	8006176 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	f107 030c 	add.w	r3, r7, #12
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 faec 	bl	8006176 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fae0 	bl	8006196 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fae3 	bl	80061ba <_ZSt8_DestroyIPcEvT_S1_>
    }
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8005c12:	b5b0      	push	{r4, r5, r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d012      	beq.n	8005c4e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005c28:	687c      	ldr	r4, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685d      	ldr	r5, [r3, #4]
 8005c2e:	6838      	ldr	r0, [r7, #0]
 8005c30:	f000 fad9 	bl	80061e6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 fb35 	bl	80062aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f103 0218 	add.w	r2, r3, #24
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	e00c      	b.n	8005c68 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fb3d 	bl	80062ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8005c54:	4604      	mov	r4, r0
 8005c56:	6838      	ldr	r0, [r7, #0]
 8005c58:	f000 fac5 	bl	80061e6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4621      	mov	r1, r4
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fb44 	bl	80062f0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fbcb 	bl	8006404 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 8005c6e:	4603      	mov	r3, r0
#endif
      }
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bdb0      	pop	{r4, r5, r7, pc}

08005c78 <_ZNSaIN3jlb4NodeEEC1Ev>:
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fbda 	bl	800643a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
	{ }
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
	if (__p)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fbbd 	bl	8006450 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fbc3 	bl	800648e <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8005d26:	b5b0      	push	{r4, r5, r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d012      	beq.n	8005d62 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005d3c:	687c      	ldr	r4, [r7, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685d      	ldr	r5, [r3, #4]
 8005d42:	6838      	ldr	r0, [r7, #0]
 8005d44:	f000 fbb9 	bl	80064ba <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 fbf5 	bl	800653e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f103 0218 	add.w	r2, r3, #24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	e00c      	b.n	8005d7c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fbfd 	bl	8006562 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	6838      	ldr	r0, [r7, #0]
 8005d6c:	f000 fba5 	bl	80064ba <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	4621      	mov	r1, r4
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fc04 	bl	8006584 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fc95 	bl	80066ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 8005d82:	4603      	mov	r3, r0
      }
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bdb0      	pop	{r4, r5, r7, pc}

08005d8c <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 f9ac 	bl	80060f8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4618      	mov	r0, r3
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8005dc2:	b590      	push	{r4, r7, lr}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff ffed 	bl	8005daa <_ZNKSt16initializer_listIcE5beginEv>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fc85 	bl	80066e2 <_ZNKSt16initializer_listIcE4sizeEv>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4423      	add	r3, r4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd90      	pop	{r4, r7, pc}

08005de4 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005de4:	b5b0      	push	{r4, r5, r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8005dee:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f000 fc81 	bl	80066fa <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8005df8:	462a      	mov	r2, r5
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 fc86 	bl	800670e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8005e02:	4603      	mov	r3, r0
    }
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}

08005e0c <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68b8      	ldr	r0, [r7, #8]
 8005e1e:	f7ff ffe1 	bl	8005de4 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8005e22:	4603      	mov	r3, r0
 8005e24:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8005e26:	68fc      	ldr	r4, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff febc 	bl	8005ba8 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8005e30:	4603      	mov	r3, r0
 8005e32:	4619      	mov	r1, r3
 8005e34:	6978      	ldr	r0, [r7, #20]
 8005e36:	f000 fc79 	bl	800672c <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 fc9c 	bl	800677c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fea3 	bl	8005ba8 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8005e62:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8005e64:	4622      	mov	r2, r4
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	68b8      	ldr	r0, [r7, #8]
 8005e6a:	f000 fc9b 	bl	80067a4 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 8005e6e:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	605a      	str	r2, [r3, #4]
	}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}

08005e7c <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3308      	adds	r3, #8
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fc96 	bl	80067c6 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fc91 	bl	80067c6 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d201      	bcs.n	8005ec8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	e000      	b.n	8005eca <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005ec8:	687b      	ldr	r3, [r7, #4]
    }
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005ed6:	b590      	push	{r4, r7, lr}
 8005ed8:	b085      	sub	sp, #20
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005ee0:	f107 030c 	add.w	r3, r7, #12
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f846 	bl	8005f78 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005eec:	f107 030c 	add.w	r3, r7, #12
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fc7e 	bl	80067f4 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	bf00      	nop
      }
 8005efc:	f107 030c 	add.w	r3, r7, #12
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f84a 	bl	8005f9a <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005f06:	4623      	mov	r3, r4
      }
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e008      	b.n	8005f34 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f844 	bl	8005fb0 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3304      	adds	r3, #4
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3f2      	bcc.n	8005f22 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 8005f3c:	bf00      	nop
 8005f3e:	bf00      	nop
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005f46:	b590      	push	{r4, r7, lr}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685c      	ldr	r4, [r3, #4]
 8005f62:	f000 f837 	bl	8005fd4 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8005f66:	4603      	mov	r3, r0
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	18e2      	adds	r2, r4, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
      }
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd90      	pop	{r4, r7, pc}

08005f78 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8005f82:	6838      	ldr	r0, [r7, #0]
 8005f84:	f000 fc56 	bl	8006834 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fc5c 	bl	800684a <_ZNSaIPfEC1IfEERKSaIT_E>
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8005fb0:	b590      	push	{r4, r7, lr}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8005fb8:	687c      	ldr	r4, [r7, #4]
 8005fba:	2004      	movs	r0, #4
 8005fbc:	f7fb fd76 	bl	8001aac <_ZSt16__deque_buf_sizej>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fc4d 	bl	8006864 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8005fca:	4603      	mov	r3, r0
      }
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd90      	pop	{r4, r7, pc}

08005fd4 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8005fd8:	2004      	movs	r0, #4
 8005fda:	f7fb fd67 	bl	8001aac <_ZSt16__deque_buf_sizej>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fc34 	bl	80068a4 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800603c:	4603      	mov	r3, r0
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800608c:	f7fb fcfa 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 8006096:	69b8      	ldr	r0, [r7, #24]
 8006098:	f010 f8e0 	bl	801625c <_ZdlPv>
	    return;
 800609c:	e005      	b.n	80060aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	69b9      	ldr	r1, [r7, #24]
 80060a2:	69f8      	ldr	r0, [r7, #28]
 80060a4:	f000 ff92 	bl	8006fcc <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80060bc:	f7fb fce2 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc45 	bl	8006958 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 80060ce:	e003      	b.n	80060d8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fc40 	bl	8006958 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f010 f8cc 	bl	8016288 <_ZNSaIcEC1ERKS_>
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f010 f8bf 	bl	8016288 <_ZNSaIcEC1ERKS_>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fc3c 	bl	800698a <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fb27 	bl	800677c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	441a      	add	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	609a      	str	r2, [r3, #8]
      }
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
	if (__p)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fbd6 	bl	800691a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fc01 	bl	80069b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 80061b0:	4603      	mov	r3, r0
    }
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80061c4:	f7fb fc5e 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d004      	beq.n	80061d8 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fbfe 	bl	80069d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 80061d6:	e003      	b.n	80061e0 <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fc12 	bl	8006a04 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	4611      	mov	r1, r2
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fc04 	bl	8006a1a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ffe5 	bl	80061fc <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 0208 	add.w	r2, r3, #8
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f7ff ffda 	bl	800621c <_ZNSt6vectorIcSaIcEEC1EOS1_>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695a      	ldr	r2, [r3, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	615a      	str	r2, [r3, #20]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800627a:	b5b0      	push	{r4, r5, r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006284:	6838      	ldr	r0, [r7, #0]
 8006286:	f7ff ffae 	bl	80061e6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800628a:	4605      	mov	r5, r0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4619      	mov	r1, r3
 8006290:	2018      	movs	r0, #24
 8006292:	f7fb fbff 	bl	8001a94 <_ZnwjPv>
 8006296:	4604      	mov	r4, r0
 8006298:	4629      	mov	r1, r5
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff ffce 	bl	800623c <_ZN3jlb4EdgeC1EOS0_>
 80062a0:	4623      	mov	r3, r4
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bdb0      	pop	{r4, r5, r7, pc}

080062aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff95 	bl	80061e6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80062bc:	4603      	mov	r3, r0
 80062be:	4619      	mov	r1, r3
 80062c0:	68b8      	ldr	r0, [r7, #8]
 80062c2:	f7ff ffda 	bl	800627a <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	f107 030c 	add.w	r3, r7, #12
 80062de:	4611      	mov	r1, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fbb5 	bl	8006a50 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80062f0:	b5b0      	push	{r4, r5, r7, lr}
 80062f2:	b08c      	sub	sp, #48	; 0x30
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80062fc:	4a3f      	ldr	r2, [pc, #252]	; (80063fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 80062fe:	2101      	movs	r1, #1
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fbb5 	bl	8006a70 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 8006306:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fbf2 	bl	8006afe <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800631a:	4603      	mov	r3, r0
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	f107 0214 	add.w	r2, r7, #20
 8006322:	f107 0308 	add.w	r3, r7, #8
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fbf9 	bl	8006b20 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800632e:	4603      	mov	r3, r0
 8006330:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fc0c 	bl	8006b54 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800633c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8006342:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	189d      	adds	r5, r3, r2
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ff46 	bl	80061e6 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800635a:	4603      	mov	r3, r0
 800635c:	461a      	mov	r2, r3
 800635e:	4629      	mov	r1, r5
 8006360:	4620      	mov	r0, r4
 8006362:	f7ff ffa2 	bl	80062aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800636a:	f107 0308 	add.w	r3, r7, #8
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fc18 	bl	8006ba4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006374:	4603      	mov	r3, r0
 8006376:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fb7a 	bl	8005a74 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006380:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	4621      	mov	r1, r4
 8006386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006388:	f000 fbf8 	bl	8006b7c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800638c:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	3318      	adds	r3, #24
 8006392:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006394:	f107 0308 	add.w	r3, r7, #8
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fc03 	bl	8006ba4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800639e:	4603      	mov	r3, r0
 80063a0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fb65 	bl	8005a74 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80063aa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fbe3 	bl	8006b7c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80063b6:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80063b8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	10db      	asrs	r3, r3, #3
 80063c4:	4a0e      	ldr	r2, [pc, #56]	; (8006400 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 80063ca:	461a      	mov	r2, r3
 80063cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ce:	f7ff fb3e 	bl	8005a4e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	69fa      	ldr	r2, [r7, #28]
 80063d6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80063de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e0:	4613      	mov	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	4413      	add	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	461a      	mov	r2, r3
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	441a      	add	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	609a      	str	r2, [r3, #8]
    }
 80063f2:	bf00      	nop
 80063f4:	3730      	adds	r7, #48	; 0x30
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bdb0      	pop	{r4, r5, r7, pc}
 80063fa:	bf00      	nop
 80063fc:	080181ec 	.word	0x080181ec
 8006400:	aaaaaaab 	.word	0xaaaaaaab

08006404 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff5e 	bl	80062ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8006412:	4603      	mov	r3, r0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	2101      	movs	r1, #1
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fbd8 	bl	8006bd2 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 8006422:	4603      	mov	r3, r0
 8006424:	60bb      	str	r3, [r7, #8]
 8006426:	f107 0308 	add.w	r3, r7, #8
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fbed 	bl	8006c0a <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 8006430:	4603      	mov	r3, r0
      }
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006468:	f7fb fb0c 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006472:	69b8      	ldr	r0, [r7, #24]
 8006474:	f00f fef2 	bl	801625c <_ZdlPv>
	    return;
 8006478:	e005      	b.n	8006486 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	69f8      	ldr	r0, [r7, #28]
 8006480:	f000 fe6e 	bl	8007160 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8006498:	f7fb faf4 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80064a2:	6839      	ldr	r1, [r7, #0]
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fbbc 	bl	8006c22 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 80064aa:	e003      	b.n	80064b4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fbb7 	bl	8006c22 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f103 020c 	add.w	r2, r3, #12
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	4619      	mov	r1, r3
 80064fe:	4610      	mov	r0, r2
 8006500:	f000 fba8 	bl	8006c54 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800650e:	b5b0      	push	{r4, r5, r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006518:	6838      	ldr	r0, [r7, #0]
 800651a:	f7ff ffce 	bl	80064ba <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800651e:	4605      	mov	r5, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4619      	mov	r1, r3
 8006524:	2018      	movs	r0, #24
 8006526:	f7fb fab5 	bl	8001a94 <_ZnwjPv>
 800652a:	4604      	mov	r4, r0
 800652c:	4629      	mov	r1, r5
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff ffce 	bl	80064d0 <_ZN3jlb4NodeC1ERKS0_>
 8006534:	4623      	mov	r3, r4
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bdb0      	pop	{r4, r5, r7, pc}

0800653e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff ffb5 	bl	80064ba <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006550:	4603      	mov	r3, r0
 8006552:	4619      	mov	r1, r3
 8006554:	68b8      	ldr	r0, [r7, #8]
 8006556:	f7ff ffda 	bl	800650e <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	1d1a      	adds	r2, r3, #4
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fbaa 	bl	8006cce <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006584:	b5b0      	push	{r4, r5, r7, lr}
 8006586:	b08c      	sub	sp, #48	; 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006590:	4a44      	ldr	r2, [pc, #272]	; (80066a4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 8006592:	2101      	movs	r1, #1
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fbaa 	bl	8006cee <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800659a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fbe7 	bl	8006d7c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 80065ae:	4603      	mov	r3, r0
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	f107 0214 	add.w	r2, r7, #20
 80065b6:	f107 0308 	add.w	r3, r7, #8
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fbed 	bl	8006d9c <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80065c2:	4603      	mov	r3, r0
 80065c4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fc00 	bl	8006dd0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 80065d0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80065d6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	189d      	adds	r5, r3, r2
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff66 	bl	80064ba <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	4629      	mov	r1, r5
 80065f4:	4620      	mov	r0, r4
 80065f6:	f7ff ffa2 	bl	800653e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80065fa:	2300      	movs	r3, #0
 80065fc:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 80065fe:	f107 0308 	add.w	r3, r7, #8
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fbf8 	bl	8006df8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006608:	4603      	mov	r3, r0
 800660a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fb65 	bl	8005cde <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006614:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	4621      	mov	r1, r4
 800661a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661c:	f000 fbf7 	bl	8006e0e <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8006620:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	3318      	adds	r3, #24
 8006626:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fbe3 	bl	8006df8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006632:	4603      	mov	r3, r0
 8006634:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fb50 	bl	8005cde <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800663e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fbe2 	bl	8006e0e <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800664a:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fb45 	bl	8005cde <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800665a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665c:	f7ff fb4a 	bl	8005cf4 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8006660:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	10db      	asrs	r3, r3, #3
 800666c:	4a0e      	ldr	r2, [pc, #56]	; (80066a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800666e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8006672:	461a      	mov	r2, r3
 8006674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006676:	f7ff fb1f 	bl	8005cb8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006688:	4613      	mov	r3, r2
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	4413      	add	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	461a      	mov	r2, r3
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	609a      	str	r2, [r3, #8]
    }
 800669a:	bf00      	nop
 800669c:	3730      	adds	r7, #48	; 0x30
 800669e:	46bd      	mov	sp, r7
 80066a0:	bdb0      	pop	{r4, r5, r7, pc}
 80066a2:	bf00      	nop
 80066a4:	080181ec 	.word	0x080181ec
 80066a8:	aaaaaaab 	.word	0xaaaaaaab

080066ac <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff54 	bl	8006562 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 80066ba:	4603      	mov	r3, r0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	f107 030c 	add.w	r3, r7, #12
 80066c2:	2101      	movs	r1, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fbbb 	bl	8006e40 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 80066ca:	4603      	mov	r3, r0
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	f107 0308 	add.w	r3, r7, #8
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fbd0 	bl	8006e78 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 80066d8:	4603      	mov	r3, r0
      }
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
    }
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800672c:	b590      	push	{r4, r7, lr}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f00f fda3 	bl	8016288 <_ZNSaIcEC1ERKS_>
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fbae 	bl	8006ea8 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4293      	cmp	r3, r2
 8006752:	bf8c      	ite	hi
 8006754:	2301      	movhi	r3, #1
 8006756:	2300      	movls	r3, #0
 8006758:	b2dc      	uxtb	r4, r3
 800675a:	f107 030c 	add.w	r3, r7, #12
 800675e:	4618      	mov	r0, r3
 8006760:	f00f fd93 	bl	801628a <_ZNSaIcED1Ev>
 8006764:	2c00      	cmp	r4, #0
 8006766:	d002      	beq.n	800676e <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8006768:	4803      	ldr	r0, [pc, #12]	; (8006778 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800676a:	f00f fd95 	bl	8016298 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800676e:	687b      	ldr	r3, [r7, #4]
      }
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	bd90      	pop	{r4, r7, pc}
 8006778:	08018208 	.word	0x08018208

0800677c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f8a4 	bl	80068de <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8006796:	4603      	mov	r3, r0
 8006798:	e000      	b.n	800679c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800679a:	2300      	movs	r3, #0
      }
 800679c:	4618      	mov	r0, r3
 800679e:	3708      	adds	r7, #8
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fb90 	bl	8006edc <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 80067bc:	4603      	mov	r3, r0
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006806:	f7fb f93d 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4618      	mov	r0, r3
 8006816:	f00f fd25 	bl	8016264 <_Znwj>
 800681a:	4603      	mov	r3, r0
 800681c:	e006      	b.n	800682c <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800681e:	2200      	movs	r2, #0
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fdb0 	bl	8007388 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8006828:	4603      	mov	r3, r0
 800682a:	bf00      	nop
      { return __a.allocate(__n); }
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fb53 	bl	8006f00 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8006876:	f7fb f905 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d006      	beq.n	800688e <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f00f fced 	bl	8016264 <_Znwj>
 800688a:	4603      	mov	r3, r0
 800688c:	e006      	b.n	800689c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800688e:	2200      	movs	r2, #0
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fdae 	bl	80073f4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8006898:	4603      	mov	r3, r0
 800689a:	bf00      	nop
      { return __a.allocate(__n); }
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80068b0:	f7fb f8e8 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d006      	beq.n	80068c8 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fb3d 	bl	8006f3e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 80068c4:	4603      	mov	r3, r0
 80068c6:	e006      	b.n	80068d6 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fb58 	bl	8006f82 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 80068d2:	4603      	mov	r3, r0
 80068d4:	bf00      	nop
    }
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80068f0:	f7fb f8c8 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f00f fcb2 	bl	8016264 <_Znwj>
 8006900:	4603      	mov	r3, r0
 8006902:	e006      	b.n	8006912 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8006904:	2200      	movs	r2, #0
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fda9 	bl	8007460 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800690e:	4603      	mov	r3, r0
 8006910:	bf00      	nop
      { return __a.allocate(__n); }
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006932:	f7fb f8a7 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800693c:	69b8      	ldr	r0, [r7, #24]
 800693e:	f00f fc8d 	bl	801625c <_ZdlPv>
	    return;
 8006942:	e005      	b.n	8006950 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	69b9      	ldr	r1, [r7, #24]
 8006948:	69f8      	ldr	r0, [r7, #28]
 800694a:	f000 fdab 	bl	80074a4 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006962:	e009      	b.n	8006978 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fb43 	bl	8006ff0 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800696a:	4603      	mov	r3, r0
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fb4a 	bl	8007006 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3318      	adds	r3, #24
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d1f1      	bne.n	8006964 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]
	{ }
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fb2a 	bl	800701c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 80069c8:	4603      	mov	r3, r0
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80069dc:	e009      	b.n	80069f2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fae9 	bl	8006fb6 <_ZSt11__addressofIcEPT_RS0_>
 80069e4:	4603      	mov	r3, r0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fb30 	bl	800704c <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3301      	adds	r3, #1
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d1f1      	bne.n	80069de <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8006a1a:	b590      	push	{r4, r7, lr}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8006a24:	6838      	ldr	r0, [r7, #0]
 8006a26:	f000 fb1c 	bl	8007062 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f00f fc2a 	bl	8016288 <_ZNSaIcEC1ERKS_>
 8006a34:	687c      	ldr	r4, [r7, #4]
 8006a36:	6838      	ldr	r0, [r7, #0]
 8006a38:	f000 fb13 	bl	8007062 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fb19 	bl	8007078 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd90      	pop	{r4, r7, pc}

08006a50 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fb1e 	bl	80070be <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8006a82:	4604      	mov	r4, r0
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7fe feeb 	bl	8005860 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	1ae2      	subs	r2, r4, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	bf34      	ite	cc
 8006a94:	2301      	movcc	r3, #1
 8006a96:	2300      	movcs	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f00f fbfa 	bl	8016298 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7fe fedb 	bl	8005860 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006aaa:	4604      	mov	r4, r0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7fe fed7 	bl	8005860 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	f107 0208 	add.w	r2, r7, #8
 8006aba:	f107 0310 	add.w	r3, r7, #16
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff f9f4 	bl	8005eae <_ZSt3maxIjERKT_S2_S2_>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4423      	add	r3, r4
 8006acc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7fe fec6 	bl	8005860 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d306      	bcc.n	8006aea <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 faee 	bl	80070be <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d904      	bls.n	8006af4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fae7 	bl	80070be <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 8006af0:	4603      	mov	r3, r0
 8006af2:	e000      	b.n	8006af6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 8006af4:	697b      	ldr	r3, [r7, #20]
      }
 8006af6:	4618      	mov	r0, r3
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}

08006afe <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	f107 030c 	add.w	r3, r7, #12
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff ff9e 	bl	8006a50 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f83a 	bl	8006ba4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006b30:	4603      	mov	r3, r0
 8006b32:	681c      	ldr	r4, [r3, #0]
 8006b34:	6838      	ldr	r0, [r7, #0]
 8006b36:	f000 f835 	bl	8006ba4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	1ae3      	subs	r3, r4, r3
 8006b40:	10db      	asrs	r3, r3, #3
 8006b42:	4a03      	ldr	r2, [pc, #12]	; (8006b50 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8006b44:	fb02 f303 	mul.w	r3, r2, r3
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd90      	pop	{r4, r7, pc}
 8006b50:	aaaaaaab 	.word	0xaaaaaaab

08006b54 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fab9 	bl	80070e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	e000      	b.n	8006b74 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 8006b72:	2300      	movs	r3, #0
      }
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8006b8a:	f88d 4000 	strb.w	r4, [sp]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fac6 	bl	8007126 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8006b9a:	4603      	mov	r3, r0
      }
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd90      	pop	{r4, r7, pc}

08006ba4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f000 fac0 	bl	800714a <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6819      	ldr	r1, [r3, #0]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	4613      	mov	r3, r2
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	4413      	add	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	425b      	negs	r3, r3
 8006bec:	440b      	add	r3, r1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	f107 020c 	add.w	r2, r7, #12
 8006bf4:	f107 0308 	add.w	r3, r7, #8
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff28 	bl	8006a50 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006c2c:	e009      	b.n	8006c42 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 faa8 	bl	8007184 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8006c34:	4603      	mov	r3, r0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 faaf 	bl	800719a <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3318      	adds	r3, #24
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d1f1      	bne.n	8006c2e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 8006c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8006c5e:	687c      	ldr	r4, [r7, #4]
 8006c60:	6838      	ldr	r0, [r7, #0]
 8006c62:	f7fe fdfd 	bl	8005860 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8006c66:	4605      	mov	r5, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 faae 	bl	80071cc <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006c70:	4602      	mov	r2, r0
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4611      	mov	r1, r2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fa99 	bl	80071b0 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 8006c7e:	f107 030c 	add.w	r3, r7, #12
 8006c82:	461a      	mov	r2, r3
 8006c84:	4629      	mov	r1, r5
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 faab 	bl	80071e2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 8006c8c:	f107 030c 	add.w	r3, r7, #12
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fce2 	bl	800565a <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006c96:	6838      	ldr	r0, [r7, #0]
 8006c98:	f000 fab7 	bl	800720a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	6838      	ldr	r0, [r7, #0]
 8006ca0:	f000 fac3 	bl	800722a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe fee1 	bl	8005a74 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 8006cb2:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f000 fac7 	bl	800724c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 8006cbe:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	605a      	str	r2, [r3, #4]
      }
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cce <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8006cee:	b590      	push	{r4, r7, lr}
 8006cf0:	b087      	sub	sp, #28
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fab7 	bl	800726e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8006d00:	4604      	mov	r4, r0
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fac4 	bl	8007290 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	1ae2      	subs	r2, r4, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bf34      	ite	cc
 8006d12:	2301      	movcc	r3, #1
 8006d14:	2300      	movcs	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f00f fabb 	bl	8016298 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fab4 	bl	8007290 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fab0 	bl	8007290 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8006d30:	4603      	mov	r3, r0
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	f107 0208 	add.w	r2, r7, #8
 8006d38:	f107 0310 	add.w	r3, r7, #16
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff f8b5 	bl	8005eae <_ZSt3maxIjERKT_S2_S2_>
 8006d44:	4603      	mov	r3, r0
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4423      	add	r3, r4
 8006d4a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 fa9f 	bl	8007290 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 8006d52:	4602      	mov	r2, r0
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d306      	bcc.n	8006d68 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fa87 	bl	800726e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8006d60:	4602      	mov	r2, r0
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d904      	bls.n	8006d72 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fa80 	bl	800726e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	e000      	b.n	8006d74 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 8006d72:	697b      	ldr	r3, [r7, #20]
      }
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd90      	pop	{r4, r7, pc}

08006d7c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	f107 030c 	add.w	r3, r7, #12
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff ff9e 	bl	8006cce <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006d9c:	b590      	push	{r4, r7, lr}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f826 	bl	8006df8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006dac:	4603      	mov	r3, r0
 8006dae:	681c      	ldr	r4, [r3, #0]
 8006db0:	6838      	ldr	r0, [r7, #0]
 8006db2:	f000 f821 	bl	8006df8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 8006db6:	4603      	mov	r3, r0
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	1ae3      	subs	r3, r4, r3
 8006dbc:	10db      	asrs	r3, r3, #3
 8006dbe:	4a03      	ldr	r2, [pc, #12]	; (8006dcc <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 8006dc0:	fb02 f303 	mul.w	r3, r2, r3
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd90      	pop	{r4, r7, pc}
 8006dcc:	aaaaaaab 	.word	0xaaaaaaab

08006dd0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fa69 	bl	80072bc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 8006dea:	4603      	mov	r3, r0
 8006dec:	e000      	b.n	8006df0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 8006dee:	2300      	movs	r3, #0
      }
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006e0e:	b590      	push	{r4, r7, lr}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fa70 	bl	8007302 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 8006e22:	4604      	mov	r4, r0
 8006e24:	68b8      	ldr	r0, [r7, #8]
 8006e26:	f000 fa6c 	bl	8007302 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fa71 	bl	8007318 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 8006e36:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd90      	pop	{r4, r7, pc}

08006e40 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6819      	ldr	r1, [r3, #0]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4613      	mov	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	4413      	add	r3, r2
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	425b      	negs	r3, r3
 8006e5a:	440b      	add	r3, r1
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	f107 020c 	add.w	r2, r7, #12
 8006e62:	f107 0308 	add.w	r3, r7, #8
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff30 	bl	8006cce <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
      }
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006eb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006eb4:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ffea 	bl	8006e90 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006ec0:	f107 0208 	add.w	r2, r7, #8
 8006ec4:	f107 030c 	add.w	r3, r7, #12
 8006ec8:	4611      	mov	r1, r2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f823 	bl	8006f16 <_ZSt3minIjERKT_S2_S2_>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	681b      	ldr	r3, [r3, #0]
      }
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fa2d 	bl	8007350 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 8006ef6:	4603      	mov	r3, r0
    }
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d201      	bcs.n	8006f30 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	e000      	b.n	8006f32 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006f30:	687b      	ldr	r3, [r7, #4]
    }
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006f3e:	b480      	push	{r7}
 8006f40:	b087      	sub	sp, #28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e00c      	b.n	8006f6e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3301      	adds	r3, #1
 8006f66:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	dcef      	bgt.n	8006f54 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 8006f74:	687b      	ldr	r3, [r7, #4]
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b086      	sub	sp, #24
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	68f9      	ldr	r1, [r7, #12]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f010 faf4 	bl	8017590 <memmove>
	  return __result + _Num;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4413      	add	r3, r2
	}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	4413      	add	r3, r2
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68b8      	ldr	r0, [r7, #8]
 8006fe6:	f00f f93b 	bl	8016260 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f89b 	bl	800714a <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fa48 	bl	80074be <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800702e:	4604      	mov	r4, r0
 8007030:	68b8      	ldr	r0, [r7, #8]
 8007032:	f000 fa44 	bl	80074be <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 8007036:	4603      	mov	r3, r0
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4619      	mov	r1, r3
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fa49 	bl	80074d4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 8007042:	4603      	mov	r3, r0
    }
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bd90      	pop	{r4, r7, pc}

0800704c <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fa60 	bl	800751a <_ZSt10destroy_atIcEvPT_>
    }
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f87f 	bl	80071cc <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fa3b 	bl	800754c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 80070d6:	4603      	mov	r3, r0
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80070f2:	f7fa fcc7 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d009      	beq.n	8007110 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	4413      	add	r3, r2
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4618      	mov	r0, r3
 8007108:	f00f f8ac 	bl	8016264 <_Znwj>
 800710c:	4603      	mov	r3, r0
 800710e:	e006      	b.n	800711e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007110:	2200      	movs	r2, #0
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fb15 	bl	8007744 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800711a:	4603      	mov	r3, r0
 800711c:	bf00      	nop
      { return __a.allocate(__n); }
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 fa22 	bl	8007584 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8007140:	4603      	mov	r3, r0
      }
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fa fe40 	bl	8001dd8 <_ZN3jlb4EdgeD1Ev>
    }
 8007158:	bf00      	nop
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4413      	add	r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	4619      	mov	r1, r3
 8007178:	68b8      	ldr	r0, [r7, #8]
 800717a:	f00f f871 	bl	8016260 <_ZdlPvj>
      }
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f8c9 	bl	800733a <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f9fd 	bl	80075be <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f9f0 	bl	80075d8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f9fe 	bl	80075fc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fa0c 	bl	8007638 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	1d1a      	adds	r2, r3, #4
 8007236:	f107 030c 	add.w	r3, r7, #12
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f000 f9fb 	bl	8007638 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f9fa 	bl	8007658 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 8007264:	4603      	mov	r3, r0
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fa29 	bl	80076d0 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800727e:	4603      	mov	r3, r0
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fa09 	bl	8007698 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 8007286:	4603      	mov	r3, r0
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	10db      	asrs	r3, r3, #3
 80072a4:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 80072a6:	fb02 f303 	mul.w	r3, r2, r3
 80072aa:	4618      	mov	r0, r3
 80072ac:	370c      	adds	r7, #12
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	aaaaaaab 	.word	0xaaaaaaab

080072bc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80072ce:	f7fa fbd9 	bl	8001a84 <_ZSt21is_constant_evaluatedv>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	4613      	mov	r3, r2
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	4413      	add	r3, r2
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	4618      	mov	r0, r3
 80072e4:	f00e ffbe 	bl	8016264 <_Znwj>
 80072e8:	4603      	mov	r3, r0
 80072ea:	e006      	b.n	80072fa <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80072ec:	2200      	movs	r2, #0
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 faf3 	bl	80078dc <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 80072f6:	4603      	mov	r3, r0
 80072f8:	bf00      	nop
      { return __a.allocate(__n); }
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f9db 	bl	80076e6 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 8007330:	4603      	mov	r3, r0
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fa fd3a 	bl	8001dbc <_ZN3jlb4NodeD1Ev>
    }
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7fe f952 	bl	800560a <_ZSt4copyIPKcPcET0_T_S4_S3_>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007378:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff ffeb 	bl	8007370 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 800739a:	4602      	mov	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4293      	cmp	r3, r2
 80073a0:	bf8c      	ite	hi
 80073a2:	2301      	movhi	r3, #1
 80073a4:	2300      	movls	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bf14      	ite	ne
 80073ac:	2301      	movne	r3, #1
 80073ae:	2300      	moveq	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073bc:	d301      	bcc.n	80073c2 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80073be:	f00e ff68 	bl	8016292 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80073c2:	f00e ff63 	bl	801628c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f00e ff4a 	bl	8016264 <_Znwj>
 80073d0:	4603      	mov	r3, r0
 80073d2:	bf00      	nop
      }
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80073e4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff ffeb 	bl	80073dc <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8007406:	4602      	mov	r2, r0
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4293      	cmp	r3, r2
 800740c:	bf8c      	ite	hi
 800740e:	2301      	movhi	r3, #1
 8007410:	2300      	movls	r3, #0
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf14      	ite	ne
 8007418:	2301      	movne	r3, #1
 800741a:	2300      	moveq	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d007      	beq.n	8007432 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007428:	d301      	bcc.n	800742e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800742a:	f00e ff32 	bl	8016292 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800742e:	f00e ff2d 	bl	801628c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f00e ff14 	bl	8016264 <_Znwj>
 800743c:	4603      	mov	r3, r0
 800743e:	bf00      	nop
      }
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007450:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff ffeb 	bl	8007448 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8007472:	4602      	mov	r2, r0
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4293      	cmp	r3, r2
 8007478:	bf8c      	ite	hi
 800747a:	2301      	movhi	r3, #1
 800747c:	2300      	movls	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	bf14      	ite	ne
 8007484:	2301      	movne	r3, #1
 8007486:	2300      	moveq	r3, #0
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800748e:	f00e fefd 	bl	801628c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007492:	68b8      	ldr	r0, [r7, #8]
 8007494:	f00e fee6 	bl	8016264 <_Znwj>
 8007498:	4603      	mov	r3, r0
 800749a:	bf00      	nop
      }
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f00e fed4 	bl	8016260 <_ZdlPvj>
      }
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80074d4:	b5b0      	push	{r4, r5, r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 f912 	bl	800770a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80074e6:	4604      	mov	r4, r0
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f000 f90e 	bl	800770a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80074ee:	4605      	mov	r5, r0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fd8c 	bl	8006010 <_ZSt12__niter_baseIPcET_S1_>
 80074f8:	4603      	mov	r3, r0
 80074fa:	461a      	mov	r2, r3
 80074fc:	4629      	mov	r1, r5
 80074fe:	4620      	mov	r0, r4
 8007500:	f7fe fd91 	bl	8006026 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8007504:	4602      	mov	r2, r0
 8007506:	1d3b      	adds	r3, r7, #4
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fd9b 	bl	8006046 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8007510:	4603      	mov	r3, r0
    }
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bdb0      	pop	{r4, r5, r7, pc}

0800751a <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
    }
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8007538:	4b03      	ldr	r3, [pc, #12]	; (8007548 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	0aaaaaaa 	.word	0x0aaaaaaa

0800754c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8007554:	4b0a      	ldr	r3, [pc, #40]	; (8007580 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8007556:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ffe9 	bl	8007530 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 800755e:	4603      	mov	r3, r0
 8007560:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007562:	f107 0208 	add.w	r2, r7, #8
 8007566:	f107 030c 	add.w	r3, r7, #12
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fcd2 	bl	8006f16 <_ZSt3minIjERKT_S2_S2_>
 8007572:	4603      	mov	r3, r0
 8007574:	681b      	ldr	r3, [r3, #0]
      }
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	05555555 	.word	0x05555555

08007584 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007584:	b5b0      	push	{r4, r5, r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f906 	bl	80077a4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8007598:	4604      	mov	r4, r0
 800759a:	68b8      	ldr	r0, [r7, #8]
 800759c:	f000 f902 	bl	80077a4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 80075a0:	4605      	mov	r5, r0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f8fe 	bl	80077a4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 80075a8:	4602      	mov	r2, r0
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	4629      	mov	r1, r5
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 f903 	bl	80077ba <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 80075b4:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bdb0      	pop	{r4, r5, r7, pc}

080075be <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f91b 	bl	8007806 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f90e 	bl	8007806 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fa1a 	bl	8005a26 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff faa3 	bl	8006b54 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800760e:	4602      	mov	r2, r0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6819      	ldr	r1, [r3, #0]
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	00db      	lsls	r3, r3, #3
 800762a:	18ca      	adds	r2, r1, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	609a      	str	r2, [r3, #8]
      }
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f8f4 	bl	800785a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 8007672:	4603      	mov	r3, r0
    }
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8007684:	4b03      	ldr	r3, [pc, #12]	; (8007694 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 8007686:	4618      	mov	r0, r3
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	0aaaaaaa 	.word	0x0aaaaaaa

08007698 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80076a0:	4b0a      	ldr	r3, [pc, #40]	; (80076cc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 80076a2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff ffe9 	bl	800767c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 80076aa:	4603      	mov	r3, r0
 80076ac:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80076ae:	f107 0208 	add.w	r2, r7, #8
 80076b2:	f107 030c 	add.w	r3, r7, #12
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fc2c 	bl	8006f16 <_ZSt3minIjERKT_S2_S2_>
 80076be:	4603      	mov	r3, r0
 80076c0:	681b      	ldr	r3, [r3, #0]
      }
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	05555555 	.word	0x05555555

080076d0 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b086      	sub	sp, #24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f91e 	bl	800793c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 8007700:	4603      	mov	r3, r0
    }
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f931 	bl	800797c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800771a:	4603      	mov	r3, r0
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007730:	4b03      	ldr	r3, [pc, #12]	; (8007740 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	05555555 	.word	0x05555555

08007744 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff ffe9 	bl	8007728 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 8007756:	4602      	mov	r2, r0
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4293      	cmp	r3, r2
 800775c:	bf8c      	ite	hi
 800775e:	2301      	movhi	r3, #1
 8007760:	2300      	movls	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d007      	beq.n	8007782 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	4a0a      	ldr	r2, [pc, #40]	; (80077a0 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800777a:	f00e fd8a 	bl	8016292 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800777e:	f00e fd85 	bl	801628c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	4613      	mov	r3, r2
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	4413      	add	r3, r2
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4618      	mov	r0, r3
 800778e:	f00e fd69 	bl	8016264 <_Znwj>
 8007792:	4603      	mov	r3, r0
 8007794:	bf00      	nop
      }
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	0aaaaaaa 	.word	0x0aaaaaaa

080077a4 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
    { return __it; }
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80077ba:	b590      	push	{r4, r7, lr}
 80077bc:	b087      	sub	sp, #28
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80077cc:	e012      	b.n	80077f4 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f7ff fc0e 	bl	8006ff0 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80077d4:	4604      	mov	r4, r0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff fc0a 	bl	8006ff0 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80077dc:	4603      	mov	r3, r0
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	4619      	mov	r1, r3
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 f8d5 	bl	8007992 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3318      	adds	r3, #24
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	3318      	adds	r3, #24
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d1e8      	bne.n	80077ce <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 80077fc:	697b      	ldr	r3, [r7, #20]
    }
 80077fe:	4618      	mov	r0, r3
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd90      	pop	{r4, r7, pc}

08007806 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8d8 	bl	80079c8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f103 0218 	add.w	r2, r3, #24
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	601a      	str	r2, [r3, #0]
	return *this;
 800784c:	687b      	ldr	r3, [r7, #4]
      }
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800785a:	b590      	push	{r4, r7, lr}
 800785c:	b087      	sub	sp, #28
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800786a:	e015      	b.n	8007898 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800786c:	6978      	ldr	r0, [r7, #20]
 800786e:	f7ff fbbf 	bl	8006ff0 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8007872:	4604      	mov	r4, r0
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f8c9 	bl	8007a10 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800787e:	4603      	mov	r3, r0
 8007880:	4619      	mov	r1, r3
 8007882:	4620      	mov	r0, r4
 8007884:	f000 f8ef 	bl	8007a66 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8007888:	f107 030c 	add.w	r3, r7, #12
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff ffd3 	bl	8007838 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	3318      	adds	r3, #24
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	f107 0208 	add.w	r2, r7, #8
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	4611      	mov	r1, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 f89c 	bl	80079e0 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f083 0301 	eor.w	r3, r3, #1
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1db      	bne.n	800786c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 80078b4:	697b      	ldr	r3, [r7, #20]
	}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}
	...

080078c0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80078c8:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	05555555 	.word	0x05555555

080078dc <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff ffe9 	bl	80078c0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bf8c      	ite	hi
 80078f6:	2301      	movhi	r3, #1
 80078f8:	2300      	movls	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d007      	beq.n	800791a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4a0a      	ldr	r2, [pc, #40]	; (8007938 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d901      	bls.n	8007916 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8007912:	f00e fcbe 	bl	8016292 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8007916:	f00e fcb9 	bl	801628c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4613      	mov	r3, r2
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	4413      	add	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4618      	mov	r0, r3
 8007926:	f00e fc9d 	bl	8016264 <_Znwj>
 800792a:	4603      	mov	r3, r0
 800792c:	bf00      	nop
      }
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	0aaaaaaa 	.word	0x0aaaaaaa

0800793c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800794c:	e00d      	b.n	800796a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7ff fc18 	bl	8007184 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8007954:	4603      	mov	r3, r0
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 f89a 	bl	8007a92 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3318      	adds	r3, #24
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	3318      	adds	r3, #24
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	d1ed      	bne.n	800794e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 8007972:	697b      	ldr	r3, [r7, #20]
	}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800799e:	68b8      	ldr	r0, [r7, #8]
 80079a0:	f7fe f92c 	bl	8005bfc <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 80079a4:	4603      	mov	r3, r0
 80079a6:	461a      	mov	r2, r3
 80079a8:	68f9      	ldr	r1, [r7, #12]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7fe fc7d 	bl	80062aa <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80079b0:	68b8      	ldr	r0, [r7, #8]
 80079b2:	f7ff fb1d 	bl	8006ff0 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80079b6:	4603      	mov	r3, r0
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff f8fd 	bl	8006bba <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff ff19 	bl	8007822 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 80079f0:	4603      	mov	r3, r0
 80079f2:	681c      	ldr	r4, [r3, #0]
 80079f4:	6838      	ldr	r0, [r7, #0]
 80079f6:	f7ff ff14 	bl	8007822 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 80079fa:	4603      	mov	r3, r0
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429c      	cmp	r4, r3
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd90      	pop	{r4, r7, pc}

08007a10 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	605a      	str	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 0208 	add.w	r2, r3, #8
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f7fd fe47 	bl	80056e2 <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	615a      	str	r2, [r3, #20]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007a66:	b590      	push	{r4, r7, lr}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8007a70:	6838      	ldr	r0, [r7, #0]
 8007a72:	f000 f824 	bl	8007abe <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007a76:	4604      	mov	r4, r0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	2018      	movs	r0, #24
 8007a7e:	f7fa f809 	bl	8001a94 <_ZnwjPv>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4621      	mov	r1, r4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff ffce 	bl	8007a28 <_ZN3jlb4EdgeC1ERKS0_>
    }
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd90      	pop	{r4, r7, pc}

08007a92 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8007a92:	b590      	push	{r4, r7, lr}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8007a9c:	6838      	ldr	r0, [r7, #0]
 8007a9e:	f000 f819 	bl	8007ad4 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	2018      	movs	r0, #24
 8007aaa:	f7f9 fff3 	bl	8001a94 <_ZnwjPv>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fd0c 	bl	80064d0 <_ZN3jlb4NodeC1ERKS0_>
    }
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd90      	pop	{r4, r7, pc}

08007abe <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
	...

08007aec <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007af4:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007af8:	4907      	ldr	r1, [pc, #28]	; (8007b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4013      	ands	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	40021000 	.word	0x40021000

08007b1c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8007b24:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <LL_APB1_GRP2_EnableClock+0x2c>)
 8007b32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4013      	ands	r3, r2
 8007b38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	40021000 	.word	0x40021000

08007b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007b50:	f001 ffff 	bl	8009b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b54:	f000 f858 	bl	8007c08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b58:	f000 ffae 	bl	8008ab8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8007b5c:	f000 ff82 	bl	8008a64 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8007b60:	f000 fa58 	bl	8008014 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8007b64:	f000 fb78 	bl	8008258 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8007b68:	f000 ff18 	bl	800899c <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8007b6c:	f000 ff4c 	bl	8008a08 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 8007b70:	f000 fab2 	bl	80080d8 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8007b74:	f000 fbc4 	bl	8008300 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8007b78:	f000 fc04 	bl	8008384 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8007b7c:	f000 fc44 	bl	8008408 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8007b80:	f000 fc84 	bl	800848c <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8007b84:	f000 fd22 	bl	80085cc <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 8007b88:	f000 fb06 	bl	8008198 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8007b8c:	f000 f8ac 	bl	8007ce8 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8007b90:	f000 fd7c 	bl	800868c <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8007b94:	f000 f9d2 	bl	8007f3c <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 8007b98:	f000 fa1e 	bl	8007fd8 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 8007b9c:	f000 fe16 	bl	80087cc <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8007ba0:	f000 fe54 	bl	800884c <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 8007ba4:	f7f9 fed8 	bl	8001958 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007ba8:	2100      	movs	r1, #0
 8007baa:	4810      	ldr	r0, [pc, #64]	; (8007bec <main+0xa0>)
 8007bac:	f007 ff60 	bl	800fa70 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	480f      	ldr	r0, [pc, #60]	; (8007bf0 <main+0xa4>)
 8007bb4:	f007 ff5c 	bl	800fa70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8007bb8:	210c      	movs	r1, #12
 8007bba:	480d      	ldr	r0, [pc, #52]	; (8007bf0 <main+0xa4>)
 8007bbc:	f007 ff58 	bl	800fa70 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8007bc0:	213c      	movs	r1, #60	; 0x3c
 8007bc2:	480c      	ldr	r0, [pc, #48]	; (8007bf4 <main+0xa8>)
 8007bc4:	f008 f961 	bl	800fe8a <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 8007bc8:	480b      	ldr	r0, [pc, #44]	; (8007bf8 <main+0xac>)
 8007bca:	f007 fe21 	bl	800f810 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007bce:	f00b ff1b 	bl	8013a08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007bd2:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <main+0xb0>)
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	480a      	ldr	r0, [pc, #40]	; (8007c00 <main+0xb4>)
 8007bd8:	f00b ff60 	bl	8013a9c <osThreadNew>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	4a09      	ldr	r2, [pc, #36]	; (8007c04 <main+0xb8>)
 8007be0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 8007be2:	f7fd fbcb 	bl	800537c <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007be6:	f00b ff33 	bl	8013a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007bea:	e7fe      	b.n	8007bea <main+0x9e>
 8007bec:	200007a4 	.word	0x200007a4
 8007bf0:	2000070c 	.word	0x2000070c
 8007bf4:	200006c0 	.word	0x200006c0
 8007bf8:	20000758 	.word	0x20000758
 8007bfc:	080182d8 	.word	0x080182d8
 8007c00:	08008d1d 	.word	0x08008d1d
 8007c04:	20000ae4 	.word	0x20000ae4

08007c08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b098      	sub	sp, #96	; 0x60
 8007c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c0e:	f107 0318 	add.w	r3, r7, #24
 8007c12:	2248      	movs	r2, #72	; 0x48
 8007c14:	2100      	movs	r1, #0
 8007c16:	4618      	mov	r0, r3
 8007c18:	f00f fcd4 	bl	80175c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	60da      	str	r2, [r3, #12]
 8007c28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f005 f944 	bl	800ceb8 <HAL_PWREx_ControlVoltageScaling>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8007c40:	f001 f88b 	bl	8008d5a <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007c44:	f005 f91a 	bl	800ce7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007c48:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <_Z18SystemClock_Configv+0xdc>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4e:	4a25      	ldr	r2, [pc, #148]	; (8007ce4 <_Z18SystemClock_Configv+0xdc>)
 8007c50:	f023 0318 	bic.w	r3, r3, #24
 8007c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8007c58:	2334      	movs	r3, #52	; 0x34
 8007c5a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007c5c:	2381      	movs	r3, #129	; 0x81
 8007c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007c60:	2301      	movs	r3, #1
 8007c62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007c64:	2301      	movs	r3, #1
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007c6c:	2360      	movs	r3, #96	; 0x60
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c70:	2302      	movs	r3, #2
 8007c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007c74:	2301      	movs	r3, #1
 8007c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8007c7c:	2337      	movs	r3, #55	; 0x37
 8007c7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007c80:	2307      	movs	r3, #7
 8007c82:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007c84:	2302      	movs	r3, #2
 8007c86:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c8c:	f107 0318 	add.w	r3, r7, #24
 8007c90:	4618      	mov	r0, r3
 8007c92:	f005 f9a1 	bl	800cfd8 <HAL_RCC_OscConfig>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bf14      	ite	ne
 8007c9c:	2301      	movne	r3, #1
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8007ca6:	f001 f858 	bl	8008d5a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007caa:	230f      	movs	r3, #15
 8007cac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007cbe:	1d3b      	adds	r3, r7, #4
 8007cc0:	2105      	movs	r1, #5
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f005 fe5e 	bl	800d984 <HAL_RCC_ClockConfig>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8007cd8:	f001 f83f 	bl	8008d5a <Error_Handler>
  }
}
 8007cdc:	bf00      	nop
 8007cde:	3760      	adds	r7, #96	; 0x60
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40021000 	.word	0x40021000

08007ce8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007cee:	f107 031c 	add.w	r3, r7, #28
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	605a      	str	r2, [r3, #4]
 8007cf8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	609a      	str	r2, [r3, #8]
 8007d04:	60da      	str	r2, [r3, #12]
 8007d06:	611a      	str	r2, [r3, #16]
 8007d08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007d0a:	4b82      	ldr	r3, [pc, #520]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d0c:	4a82      	ldr	r2, [pc, #520]	; (8007f18 <_ZL12MX_ADC1_Initv+0x230>)
 8007d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007d10:	4b80      	ldr	r3, [pc, #512]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007d18:	4b7e      	ldr	r3, [pc, #504]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007d1e:	4b7d      	ldr	r3, [pc, #500]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007d24:	4b7b      	ldr	r3, [pc, #492]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007d2a:	4b7a      	ldr	r3, [pc, #488]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8007d30:	4b78      	ldr	r3, [pc, #480]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007d36:	4b77      	ldr	r3, [pc, #476]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8007d3c:	4b75      	ldr	r3, [pc, #468]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d3e:	2208      	movs	r2, #8
 8007d40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007d42:	4b74      	ldr	r3, [pc, #464]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007d4a:	4b72      	ldr	r3, [pc, #456]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007d50:	4b70      	ldr	r3, [pc, #448]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007d56:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007d5e:	4b6d      	ldr	r3, [pc, #436]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007d64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8007d66:	4b6b      	ldr	r3, [pc, #428]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8007d6e:	4b69      	ldr	r3, [pc, #420]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d70:	2214      	movs	r2, #20
 8007d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8007d74:	4b67      	ldr	r3, [pc, #412]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d76:	22c0      	movs	r2, #192	; 0xc0
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8007d7a:	4b66      	ldr	r3, [pc, #408]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8007d80:	4b64      	ldr	r3, [pc, #400]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007d86:	4863      	ldr	r0, [pc, #396]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007d88:	f002 f928 	bl	8009fdc <HAL_ADC_Init>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bf14      	ite	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	2300      	moveq	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 8007d9c:	f000 ffdd 	bl	8008d5a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007da0:	2300      	movs	r3, #0
 8007da2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007da4:	f107 031c 	add.w	r3, r7, #28
 8007da8:	4619      	mov	r1, r3
 8007daa:	485a      	ldr	r0, [pc, #360]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007dac:	f003 faaa 	bl	800b304 <HAL_ADCEx_MultiModeConfigChannel>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bf14      	ite	ne
 8007db6:	2301      	movne	r3, #1
 8007db8:	2300      	moveq	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 8007dc0:	f000 ffcb 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007dc4:	4b55      	ldr	r3, [pc, #340]	; (8007f1c <_ZL12MX_ADC1_Initv+0x234>)
 8007dc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007dc8:	2306      	movs	r3, #6
 8007dca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007dd0:	237f      	movs	r3, #127	; 0x7f
 8007dd2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ddc:	1d3b      	adds	r3, r7, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	484c      	ldr	r0, [pc, #304]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007de2:	f002 fd33 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	bf14      	ite	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 8007df6:	f000 ffb0 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007dfa:	4b49      	ldr	r3, [pc, #292]	; (8007f20 <_ZL12MX_ADC1_Initv+0x238>)
 8007dfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8007dfe:	230c      	movs	r3, #12
 8007e00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	4619      	mov	r1, r3
 8007e06:	4843      	ldr	r0, [pc, #268]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007e08:	f002 fd20 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 8007e1c:	f000 ff9d 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007e20:	4b40      	ldr	r3, [pc, #256]	; (8007f24 <_ZL12MX_ADC1_Initv+0x23c>)
 8007e22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8007e24:	2312      	movs	r3, #18
 8007e26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e28:	1d3b      	adds	r3, r7, #4
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4839      	ldr	r0, [pc, #228]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007e2e:	f002 fd0d 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 8007e42:	f000 ff8a 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007e46:	4b38      	ldr	r3, [pc, #224]	; (8007f28 <_ZL12MX_ADC1_Initv+0x240>)
 8007e48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007e4a:	2318      	movs	r3, #24
 8007e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e4e:	1d3b      	adds	r3, r7, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4830      	ldr	r0, [pc, #192]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007e54:	f002 fcfa 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bf14      	ite	ne
 8007e5e:	2301      	movne	r3, #1
 8007e60:	2300      	moveq	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8007e68:	f000 ff77 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007e6c:	4b2f      	ldr	r3, [pc, #188]	; (8007f2c <_ZL12MX_ADC1_Initv+0x244>)
 8007e6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e76:	1d3b      	adds	r3, r7, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4826      	ldr	r0, [pc, #152]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007e7c:	f002 fce6 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	bf14      	ite	ne
 8007e86:	2301      	movne	r3, #1
 8007e88:	2300      	moveq	r3, #0
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 8007e90:	f000 ff63 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8007e94:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <_ZL12MX_ADC1_Initv+0x248>)
 8007e96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8007e98:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007e9e:	1d3b      	adds	r3, r7, #4
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	481c      	ldr	r0, [pc, #112]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007ea4:	f002 fcd2 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 8007eb8:	f000 ff4f 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007ebc:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <_ZL12MX_ADC1_Initv+0x24c>)
 8007ebe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8007ec0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8007ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4812      	ldr	r0, [pc, #72]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007ecc:	f002 fcbe 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bf14      	ite	ne
 8007ed6:	2301      	movne	r3, #1
 8007ed8:	2300      	moveq	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 8007ee0:	f000 ff3b 	bl	8008d5a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8007ee4:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <_ZL12MX_ADC1_Initv+0x250>)
 8007ee6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8007ee8:	f44f 7389 	mov.w	r3, #274	; 0x112
 8007eec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007eee:	1d3b      	adds	r3, r7, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4808      	ldr	r0, [pc, #32]	; (8007f14 <_ZL12MX_ADC1_Initv+0x22c>)
 8007ef4:	f002 fcaa 	bl	800a84c <HAL_ADC_ConfigChannel>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2301      	movne	r3, #1
 8007f00:	2300      	moveq	r3, #0
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8007f08:	f000 ff27 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007f0c:	bf00      	nop
 8007f0e:	3728      	adds	r7, #40	; 0x28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000240 	.word	0x20000240
 8007f18:	42028000 	.word	0x42028000
 8007f1c:	04300002 	.word	0x04300002
 8007f20:	08600004 	.word	0x08600004
 8007f24:	0c900008 	.word	0x0c900008
 8007f28:	1d500080 	.word	0x1d500080
 8007f2c:	21800100 	.word	0x21800100
 8007f30:	25b00200 	.word	0x25b00200
 8007f34:	32601000 	.word	0x32601000
 8007f38:	43210000 	.word	0x43210000

08007f3c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f40:	4b22      	ldr	r3, [pc, #136]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f42:	4a23      	ldr	r2, [pc, #140]	; (8007fd0 <_ZL12MX_I2C1_Initv+0x94>)
 8007f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 8007f46:	4b21      	ldr	r3, [pc, #132]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f48:	4a22      	ldr	r2, [pc, #136]	; (8007fd4 <_ZL12MX_I2C1_Initv+0x98>)
 8007f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007f4c:	4b1f      	ldr	r3, [pc, #124]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f52:	4b1e      	ldr	r3, [pc, #120]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f58:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007f5e:	4b1b      	ldr	r3, [pc, #108]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007f64:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f6a:	4b18      	ldr	r3, [pc, #96]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f70:	4b16      	ldr	r3, [pc, #88]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f76:	4815      	ldr	r0, [pc, #84]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f78:	f004 f8a8 	bl	800c0cc <HAL_I2C_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bf14      	ite	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	2300      	moveq	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8007f8c:	f000 fee5 	bl	8008d5a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007f90:	2100      	movs	r1, #0
 8007f92:	480e      	ldr	r0, [pc, #56]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007f94:	f004 fda6 	bl	800cae4 <HAL_I2CEx_ConfigAnalogFilter>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bf14      	ite	ne
 8007f9e:	2301      	movne	r3, #1
 8007fa0:	2300      	moveq	r3, #0
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8007fa8:	f000 fed7 	bl	8008d5a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007fac:	2100      	movs	r1, #0
 8007fae:	4807      	ldr	r0, [pc, #28]	; (8007fcc <_ZL12MX_I2C1_Initv+0x90>)
 8007fb0:	f004 fde3 	bl	800cb7a <HAL_I2CEx_ConfigDigitalFilter>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8007fc4:	f000 fec9 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007fc8:	bf00      	nop
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20000310 	.word	0x20000310
 8007fd0:	40005400 	.word	0x40005400
 8007fd4:	60514452 	.word	0x60514452

08007fd8 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8007fdc:	2000      	movs	r0, #0
 8007fde:	f004 fe19 	bl	800cc14 <HAL_ICACHE_ConfigAssociativityMode>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8007ff2:	f000 feb2 	bl	8008d5a <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8007ff6:	f004 fe2d 	bl	800cc54 <HAL_ICACHE_Enable>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bf14      	ite	ne
 8008000:	2301      	movne	r3, #1
 8008002:	2300      	moveq	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 800800a:	f000 fea6 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800800e:	bf00      	nop
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008018:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800801a:	4a2d      	ldr	r2, [pc, #180]	; (80080d0 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 800801c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800801e:	4b2b      	ldr	r3, [pc, #172]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008020:	4a2c      	ldr	r2, [pc, #176]	; (80080d4 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 8008022:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008024:	4b29      	ldr	r3, [pc, #164]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800802a:	4b28      	ldr	r3, [pc, #160]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800802c:	2200      	movs	r2, #0
 800802e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008030:	4b26      	ldr	r3, [pc, #152]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008032:	2200      	movs	r2, #0
 8008034:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008036:	4b25      	ldr	r3, [pc, #148]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008038:	220c      	movs	r2, #12
 800803a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800803c:	4b23      	ldr	r3, [pc, #140]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800803e:	2200      	movs	r2, #0
 8008040:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008042:	4b22      	ldr	r3, [pc, #136]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008044:	2200      	movs	r2, #0
 8008046:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008048:	4b20      	ldr	r3, [pc, #128]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800804a:	2200      	movs	r2, #0
 800804c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800804e:	4b1f      	ldr	r3, [pc, #124]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008050:	2200      	movs	r2, #0
 8008052:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008056:	2200      	movs	r2, #0
 8008058:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800805a:	481c      	ldr	r0, [pc, #112]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800805c:	f009 fa00 	bl	8011460 <HAL_UART_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	bf14      	ite	ne
 8008066:	2301      	movne	r3, #1
 8008068:	2300      	moveq	r3, #0
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8008070:	f000 fe73 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008074:	2100      	movs	r1, #0
 8008076:	4815      	ldr	r0, [pc, #84]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008078:	f00b f9c3 	bl	8013402 <HAL_UARTEx_SetTxFifoThreshold>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	bf14      	ite	ne
 8008082:	2301      	movne	r3, #1
 8008084:	2300      	moveq	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 800808c:	f000 fe65 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008090:	2100      	movs	r1, #0
 8008092:	480e      	ldr	r0, [pc, #56]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008094:	f00b f9f3 	bl	801347e <HAL_UARTEx_SetRxFifoThreshold>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	bf14      	ite	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	2300      	moveq	r3, #0
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80080a8:	f000 fe57 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80080ac:	4807      	ldr	r0, [pc, #28]	; (80080cc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80080ae:	f00b f96f 	bl	8013390 <HAL_UARTEx_DisableFifoMode>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bf14      	ite	ne
 80080b8:	2301      	movne	r3, #1
 80080ba:	2300      	moveq	r3, #0
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 80080c2:	f000 fe4a 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80080c6:	bf00      	nop
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000364 	.word	0x20000364
 80080d0:	40008000 	.word	0x40008000
 80080d4:	00033324 	.word	0x00033324

080080d8 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80080dc:	4b2c      	ldr	r3, [pc, #176]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 80080de:	4a2d      	ldr	r2, [pc, #180]	; (8008194 <_ZL13MX_UART4_Initv+0xbc>)
 80080e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80080e2:	4b2b      	ldr	r3, [pc, #172]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 80080e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80080ea:	4b29      	ldr	r3, [pc, #164]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80080f0:	4b27      	ldr	r3, [pc, #156]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80080f6:	4b26      	ldr	r3, [pc, #152]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80080fc:	4b24      	ldr	r3, [pc, #144]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 80080fe:	2204      	movs	r2, #4
 8008100:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008102:	4b23      	ldr	r3, [pc, #140]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 8008104:	2200      	movs	r2, #0
 8008106:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008108:	4b21      	ldr	r3, [pc, #132]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 800810a:	2200      	movs	r2, #0
 800810c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800810e:	4b20      	ldr	r3, [pc, #128]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 8008110:	2200      	movs	r2, #0
 8008112:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008114:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 8008116:	2200      	movs	r2, #0
 8008118:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800811a:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 800811c:	2200      	movs	r2, #0
 800811e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8008120:	481b      	ldr	r0, [pc, #108]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 8008122:	f009 f99d 	bl	8011460 <HAL_UART_Init>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	bf14      	ite	ne
 800812c:	2301      	movne	r3, #1
 800812e:	2300      	moveq	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8008136:	f000 fe10 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800813a:	2100      	movs	r1, #0
 800813c:	4814      	ldr	r0, [pc, #80]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 800813e:	f00b f960 	bl	8013402 <HAL_UARTEx_SetTxFifoThreshold>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	bf14      	ite	ne
 8008148:	2301      	movne	r3, #1
 800814a:	2300      	moveq	r3, #0
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8008152:	f000 fe02 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008156:	2100      	movs	r1, #0
 8008158:	480d      	ldr	r0, [pc, #52]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 800815a:	f00b f990 	bl	801347e <HAL_UARTEx_SetRxFifoThreshold>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 800816e:	f000 fdf4 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8008172:	4807      	ldr	r0, [pc, #28]	; (8008190 <_ZL13MX_UART4_Initv+0xb8>)
 8008174:	f00b f90c 	bl	8013390 <HAL_UARTEx_DisableFifoMode>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	bf14      	ite	ne
 800817e:	2301      	movne	r3, #1
 8008180:	2300      	moveq	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8008188:	f000 fde7 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800818c:	bf00      	nop
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200003f8 	.word	0x200003f8
 8008194:	40004c00 	.word	0x40004c00

08008198 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800819c:	4b2c      	ldr	r3, [pc, #176]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800819e:	4a2d      	ldr	r2, [pc, #180]	; (8008254 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80081a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80081a2:	4b2b      	ldr	r3, [pc, #172]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80081aa:	4b29      	ldr	r3, [pc, #164]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80081b0:	4b27      	ldr	r3, [pc, #156]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80081b6:	4b26      	ldr	r3, [pc, #152]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80081bc:	4b24      	ldr	r3, [pc, #144]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081be:	220c      	movs	r2, #12
 80081c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081c2:	4b23      	ldr	r3, [pc, #140]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80081c8:	4b21      	ldr	r3, [pc, #132]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80081ce:	4b20      	ldr	r3, [pc, #128]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80081d4:	4b1e      	ldr	r3, [pc, #120]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80081da:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081dc:	2200      	movs	r2, #0
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80081e0:	481b      	ldr	r0, [pc, #108]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081e2:	f009 f93d 	bl	8011460 <HAL_UART_Init>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf14      	ite	ne
 80081ec:	2301      	movne	r3, #1
 80081ee:	2300      	moveq	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80081f6:	f000 fdb0 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80081fa:	2100      	movs	r1, #0
 80081fc:	4814      	ldr	r0, [pc, #80]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80081fe:	f00b f900 	bl	8013402 <HAL_UARTEx_SetTxFifoThreshold>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8008212:	f000 fda2 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008216:	2100      	movs	r1, #0
 8008218:	480d      	ldr	r0, [pc, #52]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800821a:	f00b f930 	bl	801347e <HAL_UARTEx_SetRxFifoThreshold>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf14      	ite	ne
 8008224:	2301      	movne	r3, #1
 8008226:	2300      	moveq	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800822e:	f000 fd94 	bl	8008d5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008232:	4807      	ldr	r0, [pc, #28]	; (8008250 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8008234:	f00b f8ac 	bl	8013390 <HAL_UARTEx_DisableFifoMode>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	bf14      	ite	ne
 800823e:	2301      	movne	r3, #1
 8008240:	2300      	moveq	r3, #0
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8008248:	f000 fd87 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800824c:	bf00      	nop
 800824e:	bd80      	pop	{r7, pc}
 8008250:	2000048c 	.word	0x2000048c
 8008254:	40004400 	.word	0x40004400

08008258 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800825e:	463b      	mov	r3, r7
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	605a      	str	r2, [r3, #4]
 8008266:	609a      	str	r2, [r3, #8]
 8008268:	60da      	str	r2, [r3, #12]
 800826a:	611a      	str	r2, [r3, #16]
 800826c:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800826e:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 8008270:	4a22      	ldr	r2, [pc, #136]	; (80082fc <_ZL11MX_RTC_Initv+0xa4>)
 8008272:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 8008276:	2200      	movs	r2, #0
 8008278:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800827a:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 800827c:	227f      	movs	r2, #127	; 0x7f
 800827e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008280:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 8008282:	22ff      	movs	r2, #255	; 0xff
 8008284:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008286:	4b1c      	ldr	r3, [pc, #112]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 8008288:	2200      	movs	r2, #0
 800828a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 800828e:	2200      	movs	r2, #0
 8008290:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008292:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 8008294:	2200      	movs	r2, #0
 8008296:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 800829a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800829e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80082a0:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80082a6:	4814      	ldr	r0, [pc, #80]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 80082a8:	f006 fb98 	bl	800e9dc <HAL_RTC_Init>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bf14      	ite	ne
 80082b2:	2301      	movne	r3, #1
 80082b4:	2300      	moveq	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 80082bc:	f000 fd4d 	bl	8008d5a <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80082c0:	2300      	movs	r3, #0
 80082c2:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80082d0:	463b      	mov	r3, r7
 80082d2:	4619      	mov	r1, r3
 80082d4:	4808      	ldr	r0, [pc, #32]	; (80082f8 <_ZL11MX_RTC_Initv+0xa0>)
 80082d6:	f006 fc8f 	bl	800ebf8 <HAL_RTCEx_PrivilegeModeSet>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bf14      	ite	ne
 80082e0:	2301      	movne	r3, #1
 80082e2:	2300      	moveq	r3, #0
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 80082ea:	f000 fd36 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80082ee:	bf00      	nop
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20000520 	.word	0x20000520
 80082fc:	40002800 	.word	0x40002800

08008300 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008304:	4b1d      	ldr	r3, [pc, #116]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008306:	4a1e      	ldr	r2, [pc, #120]	; (8008380 <_ZL12MX_SPI1_Initv+0x80>)
 8008308:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800830a:	4b1c      	ldr	r3, [pc, #112]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 800830c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008310:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008312:	4b1a      	ldr	r3, [pc, #104]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008314:	2200      	movs	r2, #0
 8008316:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8008318:	4b18      	ldr	r3, [pc, #96]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 800831a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800831e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008320:	4b16      	ldr	r3, [pc, #88]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008322:	2200      	movs	r2, #0
 8008324:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008326:	4b15      	ldr	r3, [pc, #84]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008328:	2200      	movs	r2, #0
 800832a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800832c:	4b13      	ldr	r3, [pc, #76]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 800832e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008332:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008334:	4b11      	ldr	r3, [pc, #68]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008336:	2220      	movs	r2, #32
 8008338:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 800833c:	2200      	movs	r2, #0
 800833e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008340:	4b0e      	ldr	r3, [pc, #56]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008342:	2200      	movs	r2, #0
 8008344:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008348:	2200      	movs	r2, #0
 800834a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800834c:	4b0b      	ldr	r3, [pc, #44]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 800834e:	2207      	movs	r2, #7
 8008350:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008352:	4b0a      	ldr	r3, [pc, #40]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008354:	2200      	movs	r2, #0
 8008356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008358:	4b08      	ldr	r3, [pc, #32]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 800835a:	2208      	movs	r2, #8
 800835c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800835e:	4807      	ldr	r0, [pc, #28]	; (800837c <_ZL12MX_SPI1_Initv+0x7c>)
 8008360:	f006 fc76 	bl	800ec50 <HAL_SPI_Init>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	bf14      	ite	ne
 800836a:	2301      	movne	r3, #1
 800836c:	2300      	moveq	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8008374:	f000 fcf1 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008378:	bf00      	nop
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000548 	.word	0x20000548
 8008380:	40013000 	.word	0x40013000

08008384 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008388:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 800838a:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <_ZL12MX_SPI2_Initv+0x80>)
 800838c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800838e:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 8008390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008394:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008396:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 8008398:	2200      	movs	r2, #0
 800839a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800839c:	4b18      	ldr	r3, [pc, #96]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 800839e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80083a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80083aa:	4b15      	ldr	r3, [pc, #84]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80083b0:	4b13      	ldr	r3, [pc, #76]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80083b8:	4b11      	ldr	r3, [pc, #68]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083ba:	2218      	movs	r2, #24
 80083bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80083be:	4b10      	ldr	r3, [pc, #64]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083c0:	2280      	movs	r2, #128	; 0x80
 80083c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ca:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80083d0:	4b0b      	ldr	r3, [pc, #44]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083d2:	2207      	movs	r2, #7
 80083d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80083dc:	4b08      	ldr	r3, [pc, #32]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083de:	2208      	movs	r2, #8
 80083e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80083e2:	4807      	ldr	r0, [pc, #28]	; (8008400 <_ZL12MX_SPI2_Initv+0x7c>)
 80083e4:	f006 fc34 	bl	800ec50 <HAL_SPI_Init>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bf14      	ite	ne
 80083ee:	2301      	movne	r3, #1
 80083f0:	2300      	moveq	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 80083f8:	f000 fcaf 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80083fc:	bf00      	nop
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	200005ac 	.word	0x200005ac
 8008404:	40003800 	.word	0x40003800

08008408 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800840c:	4b1d      	ldr	r3, [pc, #116]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 800840e:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <_ZL12MX_SPI3_Initv+0x80>)
 8008410:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008418:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800841a:	4b1a      	ldr	r3, [pc, #104]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 800841c:	2200      	movs	r2, #0
 800841e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008420:	4b18      	ldr	r3, [pc, #96]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008422:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008426:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008428:	4b16      	ldr	r3, [pc, #88]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 800842a:	2200      	movs	r2, #0
 800842c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800842e:	4b15      	ldr	r3, [pc, #84]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008430:	2200      	movs	r2, #0
 8008432:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008434:	4b13      	ldr	r3, [pc, #76]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800843a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800843c:	4b11      	ldr	r3, [pc, #68]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 800843e:	2218      	movs	r2, #24
 8008440:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008444:	2200      	movs	r2, #0
 8008446:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008448:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 800844a:	2200      	movs	r2, #0
 800844c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800844e:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008450:	2200      	movs	r2, #0
 8008452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008454:	4b0b      	ldr	r3, [pc, #44]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008456:	2207      	movs	r2, #7
 8008458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800845a:	4b0a      	ldr	r3, [pc, #40]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008460:	4b08      	ldr	r3, [pc, #32]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008462:	2208      	movs	r2, #8
 8008464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008466:	4807      	ldr	r0, [pc, #28]	; (8008484 <_ZL12MX_SPI3_Initv+0x7c>)
 8008468:	f006 fbf2 	bl	800ec50 <HAL_SPI_Init>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	bf14      	ite	ne
 8008472:	2301      	movne	r3, #1
 8008474:	2300      	moveq	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800847c:	f000 fc6d 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000610 	.word	0x20000610
 8008488:	40003c00 	.word	0x40003c00

0800848c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08c      	sub	sp, #48	; 0x30
 8008490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008492:	f107 0320 	add.w	r3, r7, #32
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	605a      	str	r2, [r3, #4]
 800849c:	609a      	str	r2, [r3, #8]
 800849e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80084ac:	1d3b      	adds	r3, r7, #4
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	609a      	str	r2, [r3, #8]
 80084b6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80084b8:	4b42      	ldr	r3, [pc, #264]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084ba:	4a43      	ldr	r2, [pc, #268]	; (80085c8 <_ZL12MX_TIM1_Initv+0x13c>)
 80084bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 80084be:	4b41      	ldr	r3, [pc, #260]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084c0:	226e      	movs	r2, #110	; 0x6e
 80084c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084c4:	4b3f      	ldr	r3, [pc, #252]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80084ca:	4b3e      	ldr	r3, [pc, #248]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084d2:	4b3c      	ldr	r3, [pc, #240]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80084d8:	4b3a      	ldr	r3, [pc, #232]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084da:	2200      	movs	r2, #0
 80084dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084de:	4b39      	ldr	r3, [pc, #228]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084e0:	2280      	movs	r2, #128	; 0x80
 80084e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80084e4:	4837      	ldr	r0, [pc, #220]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80084e6:	f007 f93b 	bl	800f760 <HAL_TIM_Base_Init>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bf14      	ite	ne
 80084f0:	2301      	movne	r3, #1
 80084f2:	2300      	moveq	r3, #0
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 80084fa:	f000 fc2e 	bl	8008d5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80084fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008502:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008504:	f107 0320 	add.w	r3, r7, #32
 8008508:	4619      	mov	r1, r3
 800850a:	482e      	ldr	r0, [pc, #184]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 800850c:	f008 f81a 	bl	8010544 <HAL_TIM_ConfigClockSource>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf14      	ite	ne
 8008516:	2301      	movne	r3, #1
 8008518:	2300      	moveq	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 8008520:	f000 fc1b 	bl	8008d5a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8008524:	4827      	ldr	r0, [pc, #156]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 8008526:	f007 fba9 	bl	800fc7c <HAL_TIM_IC_Init>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	bf14      	ite	ne
 8008530:	2301      	movne	r3, #1
 8008532:	2300      	moveq	r3, #0
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800853a:	f000 fc0e 	bl	8008d5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008542:	2300      	movs	r3, #0
 8008544:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800854a:	f107 0314 	add.w	r3, r7, #20
 800854e:	4619      	mov	r1, r3
 8008550:	481c      	ldr	r0, [pc, #112]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 8008552:	f008 fe3f 	bl	80111d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 8008566:	f000 fbf8 	bl	8008d5a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800856a:	2300      	movs	r3, #0
 800856c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800856e:	2301      	movs	r3, #1
 8008570:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800857a:	1d3b      	adds	r3, r7, #4
 800857c:	2208      	movs	r2, #8
 800857e:	4619      	mov	r1, r3
 8008580:	4810      	ldr	r0, [pc, #64]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 8008582:	f007 fe2f 	bl	80101e4 <HAL_TIM_IC_ConfigChannel>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	bf14      	ite	ne
 800858c:	2301      	movne	r3, #1
 800858e:	2300      	moveq	r3, #0
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d001      	beq.n	800859a <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8008596:	f000 fbe0 	bl	8008d5a <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	220c      	movs	r2, #12
 800859e:	4619      	mov	r1, r3
 80085a0:	4808      	ldr	r0, [pc, #32]	; (80085c4 <_ZL12MX_TIM1_Initv+0x138>)
 80085a2:	f007 fe1f 	bl	80101e4 <HAL_TIM_IC_ConfigChannel>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bf14      	ite	ne
 80085ac:	2301      	movne	r3, #1
 80085ae:	2300      	moveq	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 80085b6:	f000 fbd0 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80085ba:	bf00      	nop
 80085bc:	3730      	adds	r7, #48	; 0x30
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000674 	.word	0x20000674
 80085c8:	40012c00 	.word	0x40012c00

080085cc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	; 0x30
 80085d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	2224      	movs	r2, #36	; 0x24
 80085d8:	2100      	movs	r1, #0
 80085da:	4618      	mov	r0, r3
 80085dc:	f00e fff2 	bl	80175c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085e0:	463b      	mov	r3, r7
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	605a      	str	r2, [r3, #4]
 80085e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80085ea:	4b26      	ldr	r3, [pc, #152]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 80085ec:	4a26      	ldr	r2, [pc, #152]	; (8008688 <_ZL12MX_TIM3_Initv+0xbc>)
 80085ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80085f0:	4b24      	ldr	r3, [pc, #144]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085f6:	4b23      	ldr	r3, [pc, #140]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80085fc:	4b21      	ldr	r3, [pc, #132]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 80085fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008602:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008604:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 8008606:	2200      	movs	r2, #0
 8008608:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800860a:	4b1e      	ldr	r3, [pc, #120]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 800860c:	2200      	movs	r2, #0
 800860e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008610:	2303      	movs	r3, #3
 8008612:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008614:	2300      	movs	r3, #0
 8008616:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008618:	2301      	movs	r3, #1
 800861a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800861c:	2300      	movs	r3, #0
 800861e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008624:	2300      	movs	r3, #0
 8008626:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008628:	2301      	movs	r3, #1
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800862c:	2300      	movs	r3, #0
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	4619      	mov	r1, r3
 800863a:	4812      	ldr	r0, [pc, #72]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 800863c:	f007 fb7f 	bl	800fd3e <HAL_TIM_Encoder_Init>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	bf14      	ite	ne
 8008646:	2301      	movne	r3, #1
 8008648:	2300      	moveq	r3, #0
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8008650:	f000 fb83 	bl	8008d5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008654:	2300      	movs	r3, #0
 8008656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800865c:	463b      	mov	r3, r7
 800865e:	4619      	mov	r1, r3
 8008660:	4808      	ldr	r0, [pc, #32]	; (8008684 <_ZL12MX_TIM3_Initv+0xb8>)
 8008662:	f008 fdb7 	bl	80111d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	bf14      	ite	ne
 800866c:	2301      	movne	r3, #1
 800866e:	2300      	moveq	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8008676:	f000 fb70 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800867a:	bf00      	nop
 800867c:	3730      	adds	r7, #48	; 0x30
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200006c0 	.word	0x200006c0
 8008688:	40000400 	.word	0x40000400

0800868c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08e      	sub	sp, #56	; 0x38
 8008690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	605a      	str	r2, [r3, #4]
 800869c:	609a      	str	r2, [r3, #8]
 800869e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086a0:	f107 031c 	add.w	r3, r7, #28
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	605a      	str	r2, [r3, #4]
 80086aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80086ac:	463b      	mov	r3, r7
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	605a      	str	r2, [r3, #4]
 80086b4:	609a      	str	r2, [r3, #8]
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	611a      	str	r2, [r3, #16]
 80086ba:	615a      	str	r2, [r3, #20]
 80086bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80086be:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086c0:	4a41      	ldr	r2, [pc, #260]	; (80087c8 <_ZL12MX_TIM5_Initv+0x13c>)
 80086c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80086c4:	4b3f      	ldr	r3, [pc, #252]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80086ca:	4b3e      	ldr	r3, [pc, #248]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086cc:	2220      	movs	r2, #32
 80086ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 80086d0:	4b3c      	ldr	r3, [pc, #240]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086d2:	f240 722a 	movw	r2, #1834	; 0x72a
 80086d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086d8:	4b3a      	ldr	r3, [pc, #232]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086da:	2200      	movs	r2, #0
 80086dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80086de:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086e0:	2280      	movs	r2, #128	; 0x80
 80086e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80086e4:	4837      	ldr	r0, [pc, #220]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80086e6:	f007 f83b 	bl	800f760 <HAL_TIM_Base_Init>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 80086fa:	f000 fb2e 	bl	8008d5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80086fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008708:	4619      	mov	r1, r3
 800870a:	482e      	ldr	r0, [pc, #184]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 800870c:	f007 ff1a 	bl	8010544 <HAL_TIM_ConfigClockSource>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	bf14      	ite	ne
 8008716:	2301      	movne	r3, #1
 8008718:	2300      	moveq	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8008720:	f000 fb1b 	bl	8008d5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8008724:	4827      	ldr	r0, [pc, #156]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 8008726:	f007 f94b 	bl	800f9c0 <HAL_TIM_PWM_Init>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	bf14      	ite	ne
 8008730:	2301      	movne	r3, #1
 8008732:	2300      	moveq	r3, #0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800873a:	f000 fb0e 	bl	8008d5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800873e:	2300      	movs	r3, #0
 8008740:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008746:	f107 031c 	add.w	r3, r7, #28
 800874a:	4619      	mov	r1, r3
 800874c:	481d      	ldr	r0, [pc, #116]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 800874e:	f008 fd41 	bl	80111d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	bf14      	ite	ne
 8008758:	2301      	movne	r3, #1
 800875a:	2300      	moveq	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8008762:	f000 fafa 	bl	8008d5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008766:	2360      	movs	r3, #96	; 0x60
 8008768:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800876a:	2300      	movs	r3, #0
 800876c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008776:	463b      	mov	r3, r7
 8008778:	2200      	movs	r2, #0
 800877a:	4619      	mov	r1, r3
 800877c:	4811      	ldr	r0, [pc, #68]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 800877e:	f007 fdcd 	bl	801031c <HAL_TIM_PWM_ConfigChannel>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	bf14      	ite	ne
 8008788:	2301      	movne	r3, #1
 800878a:	2300      	moveq	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8008792:	f000 fae2 	bl	8008d5a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008796:	463b      	mov	r3, r7
 8008798:	220c      	movs	r2, #12
 800879a:	4619      	mov	r1, r3
 800879c:	4809      	ldr	r0, [pc, #36]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 800879e:	f007 fdbd 	bl	801031c <HAL_TIM_PWM_ConfigChannel>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 80087b2:	f000 fad2 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80087b6:	4803      	ldr	r0, [pc, #12]	; (80087c4 <_ZL12MX_TIM5_Initv+0x138>)
 80087b8:	f000 ff24 	bl	8009604 <HAL_TIM_MspPostInit>

}
 80087bc:	bf00      	nop
 80087be:	3738      	adds	r7, #56	; 0x38
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	2000070c 	.word	0x2000070c
 80087c8:	40000c00 	.word	0x40000c00

080087cc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087d2:	1d3b      	adds	r3, r7, #4
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80087dc:	4b19      	ldr	r3, [pc, #100]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 80087de:	4a1a      	ldr	r2, [pc, #104]	; (8008848 <_ZL12MX_TIM6_Initv+0x7c>)
 80087e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 80087e2:	4b18      	ldr	r3, [pc, #96]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 80087e4:	226e      	movs	r2, #110	; 0x6e
 80087e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087e8:	4b16      	ldr	r3, [pc, #88]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80087ee:	4b15      	ldr	r3, [pc, #84]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 80087f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087f6:	4b13      	ldr	r3, [pc, #76]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80087fc:	4811      	ldr	r0, [pc, #68]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 80087fe:	f006 ffaf 	bl	800f760 <HAL_TIM_Base_Init>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	bf14      	ite	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2300      	moveq	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8008812:	f000 faa2 	bl	8008d5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800881e:	1d3b      	adds	r3, r7, #4
 8008820:	4619      	mov	r1, r3
 8008822:	4808      	ldr	r0, [pc, #32]	; (8008844 <_ZL12MX_TIM6_Initv+0x78>)
 8008824:	f008 fcd6 	bl	80111d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	bf14      	ite	ne
 800882e:	2301      	movne	r3, #1
 8008830:	2300      	moveq	r3, #0
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8008838:	f000 fa8f 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20000758 	.word	0x20000758
 8008848:	40001000 	.word	0x40001000

0800884c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b098      	sub	sp, #96	; 0x60
 8008850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008852:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	605a      	str	r2, [r3, #4]
 800885c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800885e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	605a      	str	r2, [r3, #4]
 8008868:	609a      	str	r2, [r3, #8]
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	611a      	str	r2, [r3, #16]
 800886e:	615a      	str	r2, [r3, #20]
 8008870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008872:	1d3b      	adds	r3, r7, #4
 8008874:	2234      	movs	r2, #52	; 0x34
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f00e fea3 	bl	80175c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800887e:	4b45      	ldr	r3, [pc, #276]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 8008880:	4a45      	ldr	r2, [pc, #276]	; (8008998 <_ZL12MX_TIM8_Initv+0x14c>)
 8008882:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 8008884:	4b43      	ldr	r3, [pc, #268]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 8008886:	226e      	movs	r2, #110	; 0x6e
 8008888:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800888a:	4b42      	ldr	r3, [pc, #264]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 800888c:	2200      	movs	r2, #0
 800888e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8008890:	4b40      	ldr	r3, [pc, #256]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 8008892:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008896:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008898:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 800889a:	2200      	movs	r2, #0
 800889c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800889e:	4b3d      	ldr	r3, [pc, #244]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088a4:	4b3b      	ldr	r3, [pc, #236]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80088aa:	483a      	ldr	r0, [pc, #232]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 80088ac:	f007 f888 	bl	800f9c0 <HAL_TIM_PWM_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bf14      	ite	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	2300      	moveq	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 80088c0:	f000 fa4b 	bl	8008d5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80088c4:	2300      	movs	r3, #0
 80088c6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80088c8:	2300      	movs	r3, #0
 80088ca:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80088d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80088d4:	4619      	mov	r1, r3
 80088d6:	482f      	ldr	r0, [pc, #188]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 80088d8:	f008 fc7c 	bl	80111d4 <HAL_TIMEx_MasterConfigSynchronization>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf14      	ite	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	2300      	moveq	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 80088ec:	f000 fa35 	bl	8008d5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088f0:	2360      	movs	r3, #96	; 0x60
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088f8:	2300      	movs	r3, #0
 80088fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80088fc:	2300      	movs	r3, #0
 80088fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008900:	2300      	movs	r3, #0
 8008902:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008904:	2300      	movs	r3, #0
 8008906:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008908:	2300      	movs	r3, #0
 800890a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800890c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008910:	2200      	movs	r2, #0
 8008912:	4619      	mov	r1, r3
 8008914:	481f      	ldr	r0, [pc, #124]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 8008916:	f007 fd01 	bl	801031c <HAL_TIM_PWM_ConfigChannel>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	bf14      	ite	ne
 8008920:	2301      	movne	r3, #1
 8008922:	2300      	moveq	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 800892a:	f000 fa16 	bl	8008d5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800892e:	2300      	movs	r3, #0
 8008930:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008932:	2300      	movs	r3, #0
 8008934:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008946:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800894c:	2300      	movs	r3, #0
 800894e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008954:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800895e:	2300      	movs	r3, #0
 8008960:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008962:	2300      	movs	r3, #0
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008966:	1d3b      	adds	r3, r7, #4
 8008968:	4619      	mov	r1, r3
 800896a:	480a      	ldr	r0, [pc, #40]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 800896c:	f008 fcba 	bl	80112e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf14      	ite	ne
 8008976:	2301      	movne	r3, #1
 8008978:	2300      	moveq	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 8008980:	f000 f9eb 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8008984:	4803      	ldr	r0, [pc, #12]	; (8008994 <_ZL12MX_TIM8_Initv+0x148>)
 8008986:	f000 fe3d 	bl	8009604 <HAL_TIM_MspPostInit>

}
 800898a:	bf00      	nop
 800898c:	3760      	adds	r7, #96	; 0x60
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200007a4 	.word	0x200007a4
 8008998:	40013400 	.word	0x40013400

0800899c <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089a2:	463b      	mov	r3, r7
 80089a4:	2200      	movs	r2, #0
 80089a6:	601a      	str	r2, [r3, #0]
 80089a8:	605a      	str	r2, [r3, #4]
 80089aa:	609a      	str	r2, [r3, #8]
 80089ac:	60da      	str	r2, [r3, #12]
 80089ae:	611a      	str	r2, [r3, #16]
 80089b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80089b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80089b6:	f7ff f8b1 	bl	8007b1c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80089ba:	2002      	movs	r0, #2
 80089bc:	f7ff f896 	bl	8007aec <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80089c0:	2001      	movs	r0, #1
 80089c2:	f7ff f893 	bl	8007aec <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80089c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80089cc:	2303      	movs	r3, #3
 80089ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80089d0:	2300      	movs	r3, #0
 80089d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089d4:	463b      	mov	r3, r7
 80089d6:	4619      	mov	r1, r3
 80089d8:	4809      	ldr	r0, [pc, #36]	; (8008a00 <_ZL13MX_UCPD1_Initv+0x64>)
 80089da:	f00a ff28 	bl	801382e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80089de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80089e4:	2303      	movs	r3, #3
 80089e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80089e8:	2300      	movs	r3, #0
 80089ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ec:	463b      	mov	r3, r7
 80089ee:	4619      	mov	r1, r3
 80089f0:	4804      	ldr	r0, [pc, #16]	; (8008a04 <_ZL13MX_UCPD1_Initv+0x68>)
 80089f2:	f00a ff1c 	bl	801382e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80089f6:	bf00      	nop
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	42020400 	.word	0x42020400
 8008a04:	42020000 	.word	0x42020000

08008a08 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a0e:	4a14      	ldr	r2, [pc, #80]	; (8008a60 <_ZL15MX_USB_PCD_Initv+0x58>)
 8008a10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a14:	2208      	movs	r2, #8
 8008a16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a20:	2202      	movs	r2, #2
 8008a22:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8008a24:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a30:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a36:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a3c:	4807      	ldr	r0, [pc, #28]	; (8008a5c <_ZL15MX_USB_PCD_Initv+0x54>)
 8008a3e:	f004 f919 	bl	800cc74 <HAL_PCD_Init>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	bf14      	ite	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8008a52:	f000 f982 	bl	8008d5a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	200007f0 	.word	0x200007f0
 8008a60:	4000d400 	.word	0x4000d400

08008a64 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008a6a:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <_ZL11MX_DMA_Initv+0x50>)
 8008a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a6e:	4a11      	ldr	r2, [pc, #68]	; (8008ab4 <_ZL11MX_DMA_Initv+0x50>)
 8008a70:	f043 0304 	orr.w	r3, r3, #4
 8008a74:	6493      	str	r3, [r2, #72]	; 0x48
 8008a76:	4b0f      	ldr	r3, [pc, #60]	; (8008ab4 <_ZL11MX_DMA_Initv+0x50>)
 8008a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a7a:	f003 0304 	and.w	r3, r3, #4
 8008a7e:	607b      	str	r3, [r7, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008a82:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <_ZL11MX_DMA_Initv+0x50>)
 8008a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a86:	4a0b      	ldr	r2, [pc, #44]	; (8008ab4 <_ZL11MX_DMA_Initv+0x50>)
 8008a88:	f043 0301 	orr.w	r3, r3, #1
 8008a8c:	6493      	str	r3, [r2, #72]	; 0x48
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <_ZL11MX_DMA_Initv+0x50>)
 8008a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2105      	movs	r1, #5
 8008a9e:	201d      	movs	r0, #29
 8008aa0:	f002 fd8c 	bl	800b5bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008aa4:	201d      	movs	r0, #29
 8008aa6:	f002 fda3 	bl	800b5f0 <HAL_NVIC_EnableIRQ>

}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40021000 	.word	0x40021000

08008ab8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08c      	sub	sp, #48	; 0x30
 8008abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008abe:	f107 031c 	add.w	r3, r7, #28
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
 8008ac8:	609a      	str	r2, [r3, #8]
 8008aca:	60da      	str	r2, [r3, #12]
 8008acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008ace:	4b8b      	ldr	r3, [pc, #556]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	4a8a      	ldr	r2, [pc, #552]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008ad4:	f043 0310 	orr.w	r3, r3, #16
 8008ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ada:	4b88      	ldr	r3, [pc, #544]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	f003 0310 	and.w	r3, r3, #16
 8008ae2:	61bb      	str	r3, [r7, #24]
 8008ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ae6:	4b85      	ldr	r3, [pc, #532]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aea:	4a84      	ldr	r2, [pc, #528]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008aec:	f043 0304 	orr.w	r3, r3, #4
 8008af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008af2:	4b82      	ldr	r3, [pc, #520]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008afe:	4b7f      	ldr	r3, [pc, #508]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b02:	4a7e      	ldr	r2, [pc, #504]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b04:	f043 0320 	orr.w	r3, r3, #32
 8008b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b0a:	4b7c      	ldr	r3, [pc, #496]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b16:	4b79      	ldr	r3, [pc, #484]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	4a78      	ldr	r2, [pc, #480]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b1c:	f043 0301 	orr.w	r3, r3, #1
 8008b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b22:	4b76      	ldr	r3, [pc, #472]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b2e:	4b73      	ldr	r3, [pc, #460]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b32:	4a72      	ldr	r2, [pc, #456]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b34:	f043 0302 	orr.w	r3, r3, #2
 8008b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b3a:	4b70      	ldr	r3, [pc, #448]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	60bb      	str	r3, [r7, #8]
 8008b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008b46:	4b6d      	ldr	r3, [pc, #436]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b4a:	4a6c      	ldr	r2, [pc, #432]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b4c:	f043 0308 	orr.w	r3, r3, #8
 8008b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b52:	4b6a      	ldr	r3, [pc, #424]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008b5e:	4b67      	ldr	r3, [pc, #412]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b62:	4a66      	ldr	r2, [pc, #408]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b6a:	4b64      	ldr	r3, [pc, #400]	; (8008cfc <_ZL12MX_GPIO_Initv+0x244>)
 8008b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8008b76:	f004 f9fb 	bl	800cf70 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f24e 0108 	movw	r1, #57352	; 0xe008
 8008b80:	485f      	ldr	r0, [pc, #380]	; (8008d00 <_ZL12MX_GPIO_Initv+0x248>)
 8008b82:	f003 fa71 	bl	800c068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8008b86:	2200      	movs	r2, #0
 8008b88:	21a4      	movs	r1, #164	; 0xa4
 8008b8a:	485e      	ldr	r0, [pc, #376]	; (8008d04 <_ZL12MX_GPIO_Initv+0x24c>)
 8008b8c:	f003 fa6c 	bl	800c068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8008b90:	2200      	movs	r2, #0
 8008b92:	f64f 7187 	movw	r1, #65415	; 0xff87
 8008b96:	485c      	ldr	r0, [pc, #368]	; (8008d08 <_ZL12MX_GPIO_Initv+0x250>)
 8008b98:	f003 fa66 	bl	800c068 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	2180      	movs	r1, #128	; 0x80
 8008ba0:	485a      	ldr	r0, [pc, #360]	; (8008d0c <_ZL12MX_GPIO_Initv+0x254>)
 8008ba2:	f003 fa61 	bl	800c068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bac:	4858      	ldr	r0, [pc, #352]	; (8008d10 <_ZL12MX_GPIO_Initv+0x258>)
 8008bae:	f003 fa5b 	bl	800c068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8008bb8:	4856      	ldr	r0, [pc, #344]	; (8008d14 <_ZL12MX_GPIO_Initv+0x25c>)
 8008bba:	f003 fa55 	bl	800c068 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8008bbe:	2308      	movs	r3, #8
 8008bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8008bce:	f107 031c 	add.w	r3, r7, #28
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	484a      	ldr	r0, [pc, #296]	; (8008d00 <_ZL12MX_GPIO_Initv+0x248>)
 8008bd6:	f003 f8c7 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 8008bda:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8008bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008be0:	2300      	movs	r3, #0
 8008be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008be8:	f107 031c 	add.w	r3, r7, #28
 8008bec:	4619      	mov	r1, r3
 8008bee:	4844      	ldr	r0, [pc, #272]	; (8008d00 <_ZL12MX_GPIO_Initv+0x248>)
 8008bf0:	f003 f8ba 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8008bf4:	23a4      	movs	r3, #164	; 0xa4
 8008bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c00:	2300      	movs	r3, #0
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c04:	f107 031c 	add.w	r3, r7, #28
 8008c08:	4619      	mov	r1, r3
 8008c0a:	483e      	ldr	r0, [pc, #248]	; (8008d04 <_ZL12MX_GPIO_Initv+0x24c>)
 8008c0c:	f003 f8ac 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8008c10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8008c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c16:	2301      	movs	r3, #1
 8008c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c22:	f107 031c 	add.w	r3, r7, #28
 8008c26:	4619      	mov	r1, r3
 8008c28:	4835      	ldr	r0, [pc, #212]	; (8008d00 <_ZL12MX_GPIO_Initv+0x248>)
 8008c2a:	f003 f89d 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8008c2e:	f643 6301 	movw	r3, #15873	; 0x3e01
 8008c32:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c34:	2300      	movs	r3, #0
 8008c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008c3c:	f107 031c 	add.w	r3, r7, #28
 8008c40:	4619      	mov	r1, r3
 8008c42:	4835      	ldr	r0, [pc, #212]	; (8008d18 <_ZL12MX_GPIO_Initv+0x260>)
 8008c44:	f003 f890 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8008c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008c4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8008c58:	f107 031c 	add.w	r3, r7, #28
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4829      	ldr	r0, [pc, #164]	; (8008d04 <_ZL12MX_GPIO_Initv+0x24c>)
 8008c60:	f003 f882 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8008c64:	f64f 7387 	movw	r3, #65415	; 0xff87
 8008c68:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c72:	2300      	movs	r3, #0
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c76:	f107 031c 	add.w	r3, r7, #28
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4822      	ldr	r0, [pc, #136]	; (8008d08 <_ZL12MX_GPIO_Initv+0x250>)
 8008c7e:	f003 f873 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 8008c82:	2370      	movs	r3, #112	; 0x70
 8008c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c86:	2300      	movs	r3, #0
 8008c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008c8e:	f107 031c 	add.w	r3, r7, #28
 8008c92:	4619      	mov	r1, r3
 8008c94:	481f      	ldr	r0, [pc, #124]	; (8008d14 <_ZL12MX_GPIO_Initv+0x25c>)
 8008c96:	f003 f867 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8008caa:	f107 031c 	add.w	r3, r7, #28
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4816      	ldr	r0, [pc, #88]	; (8008d0c <_ZL12MX_GPIO_Initv+0x254>)
 8008cb2:	f003 f859 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8008cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8008cc8:	f107 031c 	add.w	r3, r7, #28
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4810      	ldr	r0, [pc, #64]	; (8008d10 <_ZL12MX_GPIO_Initv+0x258>)
 8008cd0:	f003 f84a 	bl	800bd68 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8008cd4:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8008cd8:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008ce6:	f107 031c 	add.w	r3, r7, #28
 8008cea:	4619      	mov	r1, r3
 8008cec:	4809      	ldr	r0, [pc, #36]	; (8008d14 <_ZL12MX_GPIO_Initv+0x25c>)
 8008cee:	f003 f83b 	bl	800bd68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008cf2:	bf00      	nop
 8008cf4:	3730      	adds	r7, #48	; 0x30
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	42021400 	.word	0x42021400
 8008d04:	42020400 	.word	0x42020400
 8008d08:	42020c00 	.word	0x42020c00
 8008d0c:	42020800 	.word	0x42020800
 8008d10:	42020000 	.word	0x42020000
 8008d14:	42021800 	.word	0x42021800
 8008d18:	42021000 	.word	0x42021000

08008d1c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8008d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d28:	4803      	ldr	r0, [pc, #12]	; (8008d38 <_Z16StartDefaultTaskPv+0x1c>)
 8008d2a:	f003 f9b5 	bl	800c098 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 8008d2e:	2064      	movs	r0, #100	; 0x64
 8008d30:	f00b fe34 	bl	801499c <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8008d34:	e7f6      	b.n	8008d24 <_Z16StartDefaultTaskPv+0x8>
 8008d36:	bf00      	nop
 8008d38:	42020000 	.word	0x42020000

08008d3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4c:	d101      	bne.n	8008d52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008d4e:	f000 ff1b 	bl	8009b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008d5e:	b672      	cpsid	i
}
 8008d60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008d62:	e7fe      	b.n	8008d62 <Error_Handler+0x8>

08008d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d6a:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <HAL_MspInit+0x4c>)
 8008d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d6e:	4a10      	ldr	r2, [pc, #64]	; (8008db0 <HAL_MspInit+0x4c>)
 8008d70:	f043 0301 	orr.w	r3, r3, #1
 8008d74:	6613      	str	r3, [r2, #96]	; 0x60
 8008d76:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <HAL_MspInit+0x4c>)
 8008d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	607b      	str	r3, [r7, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d82:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <HAL_MspInit+0x4c>)
 8008d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d86:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <HAL_MspInit+0x4c>)
 8008d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d8e:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <HAL_MspInit+0x4c>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2107      	movs	r1, #7
 8008d9e:	f06f 0001 	mvn.w	r0, #1
 8008da2:	f002 fc0b 	bl	800b5bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	40021000 	.word	0x40021000

08008db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08c      	sub	sp, #48	; 0x30
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dbc:	f107 031c 	add.w	r3, r7, #28
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a4b      	ldr	r2, [pc, #300]	; (8008f00 <HAL_ADC_MspInit+0x14c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	f040 8090 	bne.w	8008ef8 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008dd8:	4b4a      	ldr	r3, [pc, #296]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ddc:	4a49      	ldr	r2, [pc, #292]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008dde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008de2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008de4:	4b47      	ldr	r3, [pc, #284]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008df0:	4b44      	ldr	r3, [pc, #272]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df4:	4a43      	ldr	r2, [pc, #268]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008df6:	f043 0304 	orr.w	r3, r3, #4
 8008dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dfc:	4b41      	ldr	r3, [pc, #260]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e08:	4b3e      	ldr	r3, [pc, #248]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e0c:	4a3d      	ldr	r2, [pc, #244]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e14:	4b3b      	ldr	r3, [pc, #236]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e20:	4b38      	ldr	r3, [pc, #224]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e24:	4a37      	ldr	r2, [pc, #220]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008e26:	f043 0302 	orr.w	r3, r3, #2
 8008e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e2c:	4b35      	ldr	r3, [pc, #212]	; (8008f04 <HAL_ADC_MspInit+0x150>)
 8008e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 8008e38:	230f      	movs	r3, #15
 8008e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e44:	f107 031c 	add.w	r3, r7, #28
 8008e48:	4619      	mov	r1, r3
 8008e4a:	482f      	ldr	r0, [pc, #188]	; (8008f08 <HAL_ADC_MspInit+0x154>)
 8008e4c:	f002 ff8c 	bl	800bd68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8008e50:	239c      	movs	r3, #156	; 0x9c
 8008e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e54:	2303      	movs	r3, #3
 8008e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5c:	f107 031c 	add.w	r3, r7, #28
 8008e60:	4619      	mov	r1, r3
 8008e62:	482a      	ldr	r0, [pc, #168]	; (8008f0c <HAL_ADC_MspInit+0x158>)
 8008e64:	f002 ff80 	bl	800bd68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e74:	f107 031c 	add.w	r3, r7, #28
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4825      	ldr	r0, [pc, #148]	; (8008f10 <HAL_ADC_MspInit+0x15c>)
 8008e7c:	f002 ff74 	bl	800bd68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008e80:	4b24      	ldr	r3, [pc, #144]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008e82:	4a25      	ldr	r2, [pc, #148]	; (8008f18 <HAL_ADC_MspInit+0x164>)
 8008e84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008e88:	2205      	movs	r2, #5
 8008e8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e92:	4b20      	ldr	r3, [pc, #128]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008e98:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008e9a:	2280      	movs	r2, #128	; 0x80
 8008e9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008e9e:	4b1d      	ldr	r3, [pc, #116]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ea4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008ea6:	4b1b      	ldr	r3, [pc, #108]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008eae:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008eb4:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008eba:	4816      	ldr	r0, [pc, #88]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008ebc:	f002 fba6 	bl	800b60c <HAL_DMA_Init>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 8008ec6:	f7ff ff48 	bl	8008d5a <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8008eca:	2110      	movs	r1, #16
 8008ecc:	4811      	ldr	r0, [pc, #68]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008ece:	f002 fe7b 	bl	800bbc8 <HAL_DMA_ConfigChannelAttributes>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 8008ed8:	f7ff ff3f 	bl	8008d5a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a0d      	ldr	r2, [pc, #52]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008ee0:	651a      	str	r2, [r3, #80]	; 0x50
 8008ee2:	4a0c      	ldr	r2, [pc, #48]	; (8008f14 <HAL_ADC_MspInit+0x160>)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2105      	movs	r1, #5
 8008eec:	2025      	movs	r0, #37	; 0x25
 8008eee:	f002 fb65 	bl	800b5bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008ef2:	2025      	movs	r0, #37	; 0x25
 8008ef4:	f002 fb7c 	bl	800b5f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008ef8:	bf00      	nop
 8008efa:	3730      	adds	r7, #48	; 0x30
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	42028000 	.word	0x42028000
 8008f04:	40021000 	.word	0x40021000
 8008f08:	42020800 	.word	0x42020800
 8008f0c:	42020000 	.word	0x42020000
 8008f10:	42020400 	.word	0x42020400
 8008f14:	200002a8 	.word	0x200002a8
 8008f18:	40020008 	.word	0x40020008

08008f1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b0ae      	sub	sp, #184	; 0xb8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	605a      	str	r2, [r3, #4]
 8008f2e:	609a      	str	r2, [r3, #8]
 8008f30:	60da      	str	r2, [r3, #12]
 8008f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f34:	f107 0310 	add.w	r3, r7, #16
 8008f38:	2294      	movs	r2, #148	; 0x94
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f00e fb41 	bl	80175c4 <memset>
  if(hi2c->Instance==I2C1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a21      	ldr	r2, [pc, #132]	; (8008fcc <HAL_I2C_MspInit+0xb0>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d13b      	bne.n	8008fc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8008f4c:	2340      	movs	r3, #64	; 0x40
 8008f4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008f50:	2300      	movs	r3, #0
 8008f52:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f54:	f107 0310 	add.w	r3, r7, #16
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f005 f829 	bl	800dfb0 <HAL_RCCEx_PeriphCLKConfig>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008f64:	f7ff fef9 	bl	8008d5a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f68:	4b19      	ldr	r3, [pc, #100]	; (8008fd0 <HAL_I2C_MspInit+0xb4>)
 8008f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6c:	4a18      	ldr	r2, [pc, #96]	; (8008fd0 <HAL_I2C_MspInit+0xb4>)
 8008f6e:	f043 0302 	orr.w	r3, r3, #2
 8008f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f74:	4b16      	ldr	r3, [pc, #88]	; (8008fd0 <HAL_I2C_MspInit+0xb4>)
 8008f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f88:	2312      	movs	r3, #18
 8008f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f94:	2300      	movs	r3, #0
 8008f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008f9a:	2304      	movs	r3, #4
 8008f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	480b      	ldr	r0, [pc, #44]	; (8008fd4 <HAL_I2C_MspInit+0xb8>)
 8008fa8:	f002 fede 	bl	800bd68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008fac:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <HAL_I2C_MspInit+0xb4>)
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	4a07      	ldr	r2, [pc, #28]	; (8008fd0 <HAL_I2C_MspInit+0xb4>)
 8008fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <HAL_I2C_MspInit+0xb4>)
 8008fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fc0:	60bb      	str	r3, [r7, #8]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008fc4:	bf00      	nop
 8008fc6:	37b8      	adds	r7, #184	; 0xb8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40005400 	.word	0x40005400
 8008fd0:	40021000 	.word	0x40021000
 8008fd4:	42020400 	.word	0x42020400

08008fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b0b2      	sub	sp, #200	; 0xc8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fe0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	605a      	str	r2, [r3, #4]
 8008fea:	609a      	str	r2, [r3, #8]
 8008fec:	60da      	str	r2, [r3, #12]
 8008fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ff0:	f107 0320 	add.w	r3, r7, #32
 8008ff4:	2294      	movs	r2, #148	; 0x94
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f00e fae3 	bl	80175c4 <memset>
  if(huart->Instance==LPUART1)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a67      	ldr	r2, [pc, #412]	; (80091a0 <HAL_UART_MspInit+0x1c8>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d13e      	bne.n	8009086 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009008:	2320      	movs	r3, #32
 800900a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800900c:	2300      	movs	r3, #0
 800900e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009010:	f107 0320 	add.w	r3, r7, #32
 8009014:	4618      	mov	r0, r3
 8009016:	f004 ffcb 	bl	800dfb0 <HAL_RCCEx_PeriphCLKConfig>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009020:	f7ff fe9b 	bl	8008d5a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009024:	4b5f      	ldr	r3, [pc, #380]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009028:	4a5e      	ldr	r2, [pc, #376]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009030:	4b5c      	ldr	r3, [pc, #368]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800903c:	4b59      	ldr	r3, [pc, #356]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 800903e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009040:	4a58      	ldr	r2, [pc, #352]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009048:	4b56      	ldr	r3, [pc, #344]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 800904a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8009054:	f003 ff8c 	bl	800cf70 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8009058:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800905c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009060:	2302      	movs	r3, #2
 8009062:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009066:	2300      	movs	r3, #0
 8009068:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800906c:	2300      	movs	r3, #0
 800906e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8009072:	2308      	movs	r3, #8
 8009074:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009078:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800907c:	4619      	mov	r1, r3
 800907e:	484a      	ldr	r0, [pc, #296]	; (80091a8 <HAL_UART_MspInit+0x1d0>)
 8009080:	f002 fe72 	bl	800bd68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009084:	e088      	b.n	8009198 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a48      	ldr	r2, [pc, #288]	; (80091ac <HAL_UART_MspInit+0x1d4>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d143      	bne.n	8009118 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8009090:	2308      	movs	r3, #8
 8009092:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8009094:	2300      	movs	r3, #0
 8009096:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009098:	f107 0320 	add.w	r3, r7, #32
 800909c:	4618      	mov	r0, r3
 800909e:	f004 ff87 	bl	800dfb0 <HAL_RCCEx_PeriphCLKConfig>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80090a8:	f7ff fe57 	bl	8008d5a <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80090ac:	4b3d      	ldr	r3, [pc, #244]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 80090ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b0:	4a3c      	ldr	r2, [pc, #240]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 80090b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090b6:	6593      	str	r3, [r2, #88]	; 0x58
 80090b8:	4b3a      	ldr	r3, [pc, #232]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 80090ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090c4:	4b37      	ldr	r3, [pc, #220]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 80090c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090c8:	4a36      	ldr	r2, [pc, #216]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 80090ca:	f043 0301 	orr.w	r3, r3, #1
 80090ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090d0:	4b34      	ldr	r3, [pc, #208]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 80090d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	613b      	str	r3, [r7, #16]
 80090da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80090dc:	2303      	movs	r3, #3
 80090de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090e2:	2302      	movs	r3, #2
 80090e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80090f4:	2308      	movs	r3, #8
 80090f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090fe:	4619      	mov	r1, r3
 8009100:	482b      	ldr	r0, [pc, #172]	; (80091b0 <HAL_UART_MspInit+0x1d8>)
 8009102:	f002 fe31 	bl	800bd68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8009106:	2200      	movs	r2, #0
 8009108:	2105      	movs	r1, #5
 800910a:	2040      	movs	r0, #64	; 0x40
 800910c:	f002 fa56 	bl	800b5bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8009110:	2040      	movs	r0, #64	; 0x40
 8009112:	f002 fa6d 	bl	800b5f0 <HAL_NVIC_EnableIRQ>
}
 8009116:	e03f      	b.n	8009198 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a25      	ldr	r2, [pc, #148]	; (80091b4 <HAL_UART_MspInit+0x1dc>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d13a      	bne.n	8009198 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009122:	2302      	movs	r3, #2
 8009124:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009126:	2300      	movs	r3, #0
 8009128:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800912a:	f107 0320 	add.w	r3, r7, #32
 800912e:	4618      	mov	r0, r3
 8009130:	f004 ff3e 	bl	800dfb0 <HAL_RCCEx_PeriphCLKConfig>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800913a:	f7ff fe0e 	bl	8008d5a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800913e:	4b19      	ldr	r3, [pc, #100]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009142:	4a18      	ldr	r2, [pc, #96]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009148:	6593      	str	r3, [r2, #88]	; 0x58
 800914a:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 800914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009156:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915a:	4a12      	ldr	r2, [pc, #72]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 800915c:	f043 0308 	orr.w	r3, r3, #8
 8009160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009162:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <HAL_UART_MspInit+0x1cc>)
 8009164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	60bb      	str	r3, [r7, #8]
 800916c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 800916e:	2360      	movs	r3, #96	; 0x60
 8009170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009174:	2302      	movs	r3, #2
 8009176:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917a:	2300      	movs	r3, #0
 800917c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009186:	2307      	movs	r3, #7
 8009188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800918c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009190:	4619      	mov	r1, r3
 8009192:	4809      	ldr	r0, [pc, #36]	; (80091b8 <HAL_UART_MspInit+0x1e0>)
 8009194:	f002 fde8 	bl	800bd68 <HAL_GPIO_Init>
}
 8009198:	bf00      	nop
 800919a:	37c8      	adds	r7, #200	; 0xc8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40008000 	.word	0x40008000
 80091a4:	40021000 	.word	0x40021000
 80091a8:	42021800 	.word	0x42021800
 80091ac:	40004c00 	.word	0x40004c00
 80091b0:	42020000 	.word	0x42020000
 80091b4:	40004400 	.word	0x40004400
 80091b8:	42020c00 	.word	0x42020c00

080091bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b0a8      	sub	sp, #160	; 0xa0
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80091c4:	f107 030c 	add.w	r3, r7, #12
 80091c8:	2294      	movs	r2, #148	; 0x94
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f00e f9f9 	bl	80175c4 <memset>
  if(hrtc->Instance==RTC)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a16      	ldr	r2, [pc, #88]	; (8009230 <HAL_RTC_MspInit+0x74>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d124      	bne.n	8009226 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80091dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80091e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	4618      	mov	r0, r3
 80091f0:	f004 fede 	bl	800dfb0 <HAL_RCCEx_PeriphCLKConfig>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80091fa:	f7ff fdae 	bl	8008d5a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80091fe:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <HAL_RTC_MspInit+0x78>)
 8009200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009204:	4a0b      	ldr	r2, [pc, #44]	; (8009234 <HAL_RTC_MspInit+0x78>)
 8009206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800920e:	4b09      	ldr	r3, [pc, #36]	; (8009234 <HAL_RTC_MspInit+0x78>)
 8009210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009212:	4a08      	ldr	r2, [pc, #32]	; (8009234 <HAL_RTC_MspInit+0x78>)
 8009214:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009218:	6593      	str	r3, [r2, #88]	; 0x58
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <HAL_RTC_MspInit+0x78>)
 800921c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009222:	60bb      	str	r3, [r7, #8]
 8009224:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8009226:	bf00      	nop
 8009228:	37a0      	adds	r7, #160	; 0xa0
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40002800 	.word	0x40002800
 8009234:	40021000 	.word	0x40021000

08009238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b090      	sub	sp, #64	; 0x40
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	605a      	str	r2, [r3, #4]
 800924a:	609a      	str	r2, [r3, #8]
 800924c:	60da      	str	r2, [r3, #12]
 800924e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a62      	ldr	r2, [pc, #392]	; (80093e0 <HAL_SPI_MspInit+0x1a8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d145      	bne.n	80092e6 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800925a:	4b62      	ldr	r3, [pc, #392]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 800925c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925e:	4a61      	ldr	r2, [pc, #388]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009264:	6613      	str	r3, [r2, #96]	; 0x60
 8009266:	4b5f      	ldr	r3, [pc, #380]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800926a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009270:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009272:	4b5c      	ldr	r3, [pc, #368]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009276:	4a5b      	ldr	r2, [pc, #364]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800927e:	4b59      	ldr	r3, [pc, #356]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	627b      	str	r3, [r7, #36]	; 0x24
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800928a:	4b56      	ldr	r3, [pc, #344]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 800928c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800928e:	4a55      	ldr	r2, [pc, #340]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009290:	f043 0310 	orr.w	r3, r3, #16
 8009294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009296:	4b53      	ldr	r3, [pc, #332]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	623b      	str	r3, [r7, #32]
 80092a0:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 80092a2:	2360      	movs	r3, #96	; 0x60
 80092a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092a6:	2302      	movs	r3, #2
 80092a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092ae:	2300      	movs	r3, #0
 80092b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80092b2:	2305      	movs	r3, #5
 80092b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092ba:	4619      	mov	r1, r3
 80092bc:	484a      	ldr	r0, [pc, #296]	; (80093e8 <HAL_SPI_MspInit+0x1b0>)
 80092be:	f002 fd53 	bl	800bd68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 80092c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092c8:	2302      	movs	r3, #2
 80092ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092d0:	2300      	movs	r3, #0
 80092d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80092d4:	2305      	movs	r3, #5
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 80092d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092dc:	4619      	mov	r1, r3
 80092de:	4843      	ldr	r0, [pc, #268]	; (80093ec <HAL_SPI_MspInit+0x1b4>)
 80092e0:	f002 fd42 	bl	800bd68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80092e4:	e078      	b.n	80093d8 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a41      	ldr	r2, [pc, #260]	; (80093f0 <HAL_SPI_MspInit+0x1b8>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d145      	bne.n	800937c <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80092f0:	4b3c      	ldr	r3, [pc, #240]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 80092f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f4:	4a3b      	ldr	r2, [pc, #236]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 80092f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092fa:	6593      	str	r3, [r2, #88]	; 0x58
 80092fc:	4b39      	ldr	r3, [pc, #228]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 80092fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009304:	61fb      	str	r3, [r7, #28]
 8009306:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 800930a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930c:	4a35      	ldr	r2, [pc, #212]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 800930e:	f043 0302 	orr.w	r3, r3, #2
 8009312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009314:	4b33      	ldr	r3, [pc, #204]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009320:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009324:	4a2f      	ldr	r2, [pc, #188]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009326:	f043 0308 	orr.w	r3, r3, #8
 800932a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800932c:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 800932e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800933e:	2302      	movs	r3, #2
 8009340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009342:	2300      	movs	r3, #0
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009346:	2300      	movs	r3, #0
 8009348:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800934a:	2305      	movs	r3, #5
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800934e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009352:	4619      	mov	r1, r3
 8009354:	4827      	ldr	r0, [pc, #156]	; (80093f4 <HAL_SPI_MspInit+0x1bc>)
 8009356:	f002 fd07 	bl	800bd68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800935a:	2318      	movs	r3, #24
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800935e:	2302      	movs	r3, #2
 8009360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009362:	2300      	movs	r3, #0
 8009364:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009366:	2300      	movs	r3, #0
 8009368:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800936a:	2305      	movs	r3, #5
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800936e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009372:	4619      	mov	r1, r3
 8009374:	4820      	ldr	r0, [pc, #128]	; (80093f8 <HAL_SPI_MspInit+0x1c0>)
 8009376:	f002 fcf7 	bl	800bd68 <HAL_GPIO_Init>
}
 800937a:	e02d      	b.n	80093d8 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a1e      	ldr	r2, [pc, #120]	; (80093fc <HAL_SPI_MspInit+0x1c4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d128      	bne.n	80093d8 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009386:	4b17      	ldr	r3, [pc, #92]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938a:	4a16      	ldr	r2, [pc, #88]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 800938c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009390:	6593      	str	r3, [r2, #88]	; 0x58
 8009392:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 8009394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800939e:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 80093a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a2:	4a10      	ldr	r2, [pc, #64]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 80093a4:	f043 0304 	orr.w	r3, r3, #4
 80093a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093aa:	4b0e      	ldr	r3, [pc, #56]	; (80093e4 <HAL_SPI_MspInit+0x1ac>)
 80093ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80093b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093bc:	2302      	movs	r3, #2
 80093be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093c4:	2300      	movs	r3, #0
 80093c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80093c8:	2306      	movs	r3, #6
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80093d0:	4619      	mov	r1, r3
 80093d2:	480b      	ldr	r0, [pc, #44]	; (8009400 <HAL_SPI_MspInit+0x1c8>)
 80093d4:	f002 fcc8 	bl	800bd68 <HAL_GPIO_Init>
}
 80093d8:	bf00      	nop
 80093da:	3740      	adds	r7, #64	; 0x40
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40013000 	.word	0x40013000
 80093e4:	40021000 	.word	0x40021000
 80093e8:	42020000 	.word	0x42020000
 80093ec:	42021000 	.word	0x42021000
 80093f0:	40003800 	.word	0x40003800
 80093f4:	42020400 	.word	0x42020400
 80093f8:	42020c00 	.word	0x42020c00
 80093fc:	40003c00 	.word	0x40003c00
 8009400:	42020800 	.word	0x42020800

08009404 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08c      	sub	sp, #48	; 0x30
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800940c:	f107 031c 	add.w	r3, r7, #28
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	605a      	str	r2, [r3, #4]
 8009416:	609a      	str	r2, [r3, #8]
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a3c      	ldr	r2, [pc, #240]	; (8009514 <HAL_TIM_Base_MspInit+0x110>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d146      	bne.n	80094b4 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009426:	4b3c      	ldr	r3, [pc, #240]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 8009428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800942a:	4a3b      	ldr	r2, [pc, #236]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 800942c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009430:	6613      	str	r3, [r2, #96]	; 0x60
 8009432:	4b39      	ldr	r3, [pc, #228]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 8009434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800943a:	61bb      	str	r3, [r7, #24]
 800943c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800943e:	4b36      	ldr	r3, [pc, #216]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 8009440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009442:	4a35      	ldr	r2, [pc, #212]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 8009444:	f043 0310 	orr.w	r3, r3, #16
 8009448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800944a:	4b33      	ldr	r3, [pc, #204]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 800944c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009456:	4b30      	ldr	r3, [pc, #192]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 8009458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945a:	4a2f      	ldr	r2, [pc, #188]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009462:	4b2d      	ldr	r3, [pc, #180]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 8009464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 800946e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009474:	2302      	movs	r3, #2
 8009476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009478:	2300      	movs	r3, #0
 800947a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800947c:	2300      	movs	r3, #0
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009480:	2301      	movs	r3, #1
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8009484:	f107 031c 	add.w	r3, r7, #28
 8009488:	4619      	mov	r1, r3
 800948a:	4824      	ldr	r0, [pc, #144]	; (800951c <HAL_TIM_Base_MspInit+0x118>)
 800948c:	f002 fc6c 	bl	800bd68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8009490:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009496:	2302      	movs	r3, #2
 8009498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800949a:	2300      	movs	r3, #0
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800949e:	2300      	movs	r3, #0
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80094a2:	2301      	movs	r3, #1
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094a6:	f107 031c 	add.w	r3, r7, #28
 80094aa:	4619      	mov	r1, r3
 80094ac:	481c      	ldr	r0, [pc, #112]	; (8009520 <HAL_TIM_Base_MspInit+0x11c>)
 80094ae:	f002 fc5b 	bl	800bd68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80094b2:	e02a      	b.n	800950a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1a      	ldr	r2, [pc, #104]	; (8009524 <HAL_TIM_Base_MspInit+0x120>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d10c      	bne.n	80094d8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80094be:	4b16      	ldr	r3, [pc, #88]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 80094c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c2:	4a15      	ldr	r2, [pc, #84]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 80094c4:	f043 0308 	orr.w	r3, r3, #8
 80094c8:	6593      	str	r3, [r2, #88]	; 0x58
 80094ca:	4b13      	ldr	r3, [pc, #76]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 80094cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	e018      	b.n	800950a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM6)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a12      	ldr	r2, [pc, #72]	; (8009528 <HAL_TIM_Base_MspInit+0x124>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d113      	bne.n	800950a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80094e2:	4b0d      	ldr	r3, [pc, #52]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 80094e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e6:	4a0c      	ldr	r2, [pc, #48]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 80094e8:	f043 0310 	orr.w	r3, r3, #16
 80094ec:	6593      	str	r3, [r2, #88]	; 0x58
 80094ee:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <HAL_TIM_Base_MspInit+0x114>)
 80094f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f2:	f003 0310 	and.w	r3, r3, #16
 80094f6:	60bb      	str	r3, [r7, #8]
 80094f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 80094fa:	2200      	movs	r2, #0
 80094fc:	2105      	movs	r1, #5
 80094fe:	2031      	movs	r0, #49	; 0x31
 8009500:	f002 f85c 	bl	800b5bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8009504:	2031      	movs	r0, #49	; 0x31
 8009506:	f002 f873 	bl	800b5f0 <HAL_NVIC_EnableIRQ>
}
 800950a:	bf00      	nop
 800950c:	3730      	adds	r7, #48	; 0x30
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	40012c00 	.word	0x40012c00
 8009518:	40021000 	.word	0x40021000
 800951c:	42021000 	.word	0x42021000
 8009520:	42020000 	.word	0x42020000
 8009524:	40000c00 	.word	0x40000c00
 8009528:	40001000 	.word	0x40001000

0800952c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08a      	sub	sp, #40	; 0x28
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009534:	f107 0314 	add.w	r3, r7, #20
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	609a      	str	r2, [r3, #8]
 8009540:	60da      	str	r2, [r3, #12]
 8009542:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a1b      	ldr	r2, [pc, #108]	; (80095b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d12f      	bne.n	80095ae <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800954e:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <HAL_TIM_Encoder_MspInit+0x90>)
 8009550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009552:	4a1a      	ldr	r2, [pc, #104]	; (80095bc <HAL_TIM_Encoder_MspInit+0x90>)
 8009554:	f043 0302 	orr.w	r3, r3, #2
 8009558:	6593      	str	r3, [r2, #88]	; 0x58
 800955a:	4b18      	ldr	r3, [pc, #96]	; (80095bc <HAL_TIM_Encoder_MspInit+0x90>)
 800955c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	613b      	str	r3, [r7, #16]
 8009564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <HAL_TIM_Encoder_MspInit+0x90>)
 8009568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800956a:	4a14      	ldr	r2, [pc, #80]	; (80095bc <HAL_TIM_Encoder_MspInit+0x90>)
 800956c:	f043 0310 	orr.w	r3, r3, #16
 8009570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009572:	4b12      	ldr	r3, [pc, #72]	; (80095bc <HAL_TIM_Encoder_MspInit+0x90>)
 8009574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 800957e:	2318      	movs	r3, #24
 8009580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009582:	2302      	movs	r3, #2
 8009584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800958a:	2300      	movs	r3, #0
 800958c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800958e:	2302      	movs	r3, #2
 8009590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009592:	f107 0314 	add.w	r3, r7, #20
 8009596:	4619      	mov	r1, r3
 8009598:	4809      	ldr	r0, [pc, #36]	; (80095c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800959a:	f002 fbe5 	bl	800bd68 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800959e:	2200      	movs	r2, #0
 80095a0:	2105      	movs	r1, #5
 80095a2:	202e      	movs	r0, #46	; 0x2e
 80095a4:	f002 f80a 	bl	800b5bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80095a8:	202e      	movs	r0, #46	; 0x2e
 80095aa:	f002 f821 	bl	800b5f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80095ae:	bf00      	nop
 80095b0:	3728      	adds	r7, #40	; 0x28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	40000400 	.word	0x40000400
 80095bc:	40021000 	.word	0x40021000
 80095c0:	42021000 	.word	0x42021000

080095c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a0a      	ldr	r2, [pc, #40]	; (80095fc <HAL_TIM_PWM_MspInit+0x38>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d10b      	bne.n	80095ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80095d6:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <HAL_TIM_PWM_MspInit+0x3c>)
 80095d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095da:	4a09      	ldr	r2, [pc, #36]	; (8009600 <HAL_TIM_PWM_MspInit+0x3c>)
 80095dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80095e0:	6613      	str	r3, [r2, #96]	; 0x60
 80095e2:	4b07      	ldr	r3, [pc, #28]	; (8009600 <HAL_TIM_PWM_MspInit+0x3c>)
 80095e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80095ee:	bf00      	nop
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	40013400 	.word	0x40013400
 8009600:	40021000 	.word	0x40021000

08009604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800960c:	f107 0314 	add.w	r3, r7, #20
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	609a      	str	r2, [r3, #8]
 8009618:	60da      	str	r2, [r3, #12]
 800961a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a22      	ldr	r2, [pc, #136]	; (80096ac <HAL_TIM_MspPostInit+0xa8>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d11d      	bne.n	8009662 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009626:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <HAL_TIM_MspPostInit+0xac>)
 8009628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962a:	4a21      	ldr	r2, [pc, #132]	; (80096b0 <HAL_TIM_MspPostInit+0xac>)
 800962c:	f043 0320 	orr.w	r3, r3, #32
 8009630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009632:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <HAL_TIM_MspPostInit+0xac>)
 8009634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	613b      	str	r3, [r7, #16]
 800963c:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 800963e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009644:	2302      	movs	r3, #2
 8009646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800964c:	2300      	movs	r3, #0
 800964e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009650:	2302      	movs	r3, #2
 8009652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009654:	f107 0314 	add.w	r3, r7, #20
 8009658:	4619      	mov	r1, r3
 800965a:	4816      	ldr	r0, [pc, #88]	; (80096b4 <HAL_TIM_MspPostInit+0xb0>)
 800965c:	f002 fb84 	bl	800bd68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009660:	e020      	b.n	80096a4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a14      	ldr	r2, [pc, #80]	; (80096b8 <HAL_TIM_MspPostInit+0xb4>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d11b      	bne.n	80096a4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800966c:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <HAL_TIM_MspPostInit+0xac>)
 800966e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009670:	4a0f      	ldr	r2, [pc, #60]	; (80096b0 <HAL_TIM_MspPostInit+0xac>)
 8009672:	f043 0304 	orr.w	r3, r3, #4
 8009676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009678:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <HAL_TIM_MspPostInit+0xac>)
 800967a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009684:	2340      	movs	r3, #64	; 0x40
 8009686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009688:	2302      	movs	r3, #2
 800968a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009690:	2300      	movs	r3, #0
 8009692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009694:	2303      	movs	r3, #3
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	4619      	mov	r1, r3
 800969e:	4807      	ldr	r0, [pc, #28]	; (80096bc <HAL_TIM_MspPostInit+0xb8>)
 80096a0:	f002 fb62 	bl	800bd68 <HAL_GPIO_Init>
}
 80096a4:	bf00      	nop
 80096a6:	3728      	adds	r7, #40	; 0x28
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40021000 	.word	0x40021000
 80096b4:	42021400 	.word	0x42021400
 80096b8:	40013400 	.word	0x40013400
 80096bc:	42020800 	.word	0x42020800

080096c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b0ae      	sub	sp, #184	; 0xb8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	605a      	str	r2, [r3, #4]
 80096d2:	609a      	str	r2, [r3, #8]
 80096d4:	60da      	str	r2, [r3, #12]
 80096d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	2294      	movs	r2, #148	; 0x94
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00d ff6f 	bl	80175c4 <memset>
  if(hpcd->Instance==USB)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a22      	ldr	r2, [pc, #136]	; (8009774 <HAL_PCD_MspInit+0xb4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d13d      	bne.n	800976c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80096f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80096f6:	2300      	movs	r3, #0
 80096f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80096fc:	f107 0310 	add.w	r3, r7, #16
 8009700:	4618      	mov	r0, r3
 8009702:	f004 fc55 	bl	800dfb0 <HAL_RCCEx_PeriphCLKConfig>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800970c:	f7ff fb25 	bl	8008d5a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <HAL_PCD_MspInit+0xb8>)
 8009712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009714:	4a18      	ldr	r2, [pc, #96]	; (8009778 <HAL_PCD_MspInit+0xb8>)
 8009716:	f043 0301 	orr.w	r3, r3, #1
 800971a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800971c:	4b16      	ldr	r3, [pc, #88]	; (8009778 <HAL_PCD_MspInit+0xb8>)
 800971e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009728:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800972c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009730:	2302      	movs	r3, #2
 8009732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009736:	2300      	movs	r3, #0
 8009738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800973c:	2300      	movs	r3, #0
 800973e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8009742:	230a      	movs	r3, #10
 8009744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009748:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800974c:	4619      	mov	r1, r3
 800974e:	480b      	ldr	r0, [pc, #44]	; (800977c <HAL_PCD_MspInit+0xbc>)
 8009750:	f002 fb0a 	bl	800bd68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009754:	4b08      	ldr	r3, [pc, #32]	; (8009778 <HAL_PCD_MspInit+0xb8>)
 8009756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009758:	4a07      	ldr	r2, [pc, #28]	; (8009778 <HAL_PCD_MspInit+0xb8>)
 800975a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800975e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <HAL_PCD_MspInit+0xb8>)
 8009762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009768:	60bb      	str	r3, [r7, #8]
 800976a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800976c:	bf00      	nop
 800976e:	37b8      	adds	r7, #184	; 0xb8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	4000d400 	.word	0x4000d400
 8009778:	40021000 	.word	0x40021000
 800977c:	42020000 	.word	0x42020000

08009780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08c      	sub	sp, #48	; 0x30
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8009790:	2200      	movs	r2, #0
 8009792:	6879      	ldr	r1, [r7, #4]
 8009794:	202d      	movs	r0, #45	; 0x2d
 8009796:	f001 ff11 	bl	800b5bc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800979a:	202d      	movs	r0, #45	; 0x2d
 800979c:	f001 ff28 	bl	800b5f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80097a0:	4b1f      	ldr	r3, [pc, #124]	; (8009820 <HAL_InitTick+0xa0>)
 80097a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a4:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <HAL_InitTick+0xa0>)
 80097a6:	f043 0301 	orr.w	r3, r3, #1
 80097aa:	6593      	str	r3, [r2, #88]	; 0x58
 80097ac:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <HAL_InitTick+0xa0>)
 80097ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b0:	f003 0301 	and.w	r3, r3, #1
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80097b8:	f107 0210 	add.w	r2, r7, #16
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	4611      	mov	r1, r2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f004 faf0 	bl	800dda8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80097c8:	f004 fac6 	bl	800dd58 <HAL_RCC_GetPCLK1Freq>
 80097cc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	4a14      	ldr	r2, [pc, #80]	; (8009824 <HAL_InitTick+0xa4>)
 80097d2:	fba2 2303 	umull	r2, r3, r2, r3
 80097d6:	0c9b      	lsrs	r3, r3, #18
 80097d8:	3b01      	subs	r3, #1
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80097dc:	4b12      	ldr	r3, [pc, #72]	; (8009828 <HAL_InitTick+0xa8>)
 80097de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80097e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80097e4:	4b10      	ldr	r3, [pc, #64]	; (8009828 <HAL_InitTick+0xa8>)
 80097e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80097ea:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80097ec:	4a0e      	ldr	r2, [pc, #56]	; (8009828 <HAL_InitTick+0xa8>)
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80097f2:	4b0d      	ldr	r3, [pc, #52]	; (8009828 <HAL_InitTick+0xa8>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <HAL_InitTick+0xa8>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80097fe:	480a      	ldr	r0, [pc, #40]	; (8009828 <HAL_InitTick+0xa8>)
 8009800:	f005 ffae 	bl	800f760 <HAL_TIM_Base_Init>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d104      	bne.n	8009814 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800980a:	4807      	ldr	r0, [pc, #28]	; (8009828 <HAL_InitTick+0xa8>)
 800980c:	f006 f868 	bl	800f8e0 <HAL_TIM_Base_Start_IT>
 8009810:	4603      	mov	r3, r0
 8009812:	e000      	b.n	8009816 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
}
 8009816:	4618      	mov	r0, r3
 8009818:	3730      	adds	r7, #48	; 0x30
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	40021000 	.word	0x40021000
 8009824:	431bde83 	.word	0x431bde83
 8009828:	20000ae8 	.word	0x20000ae8

0800982c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009830:	e7fe      	b.n	8009830 <NMI_Handler+0x4>

08009832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009832:	b480      	push	{r7}
 8009834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009836:	e7fe      	b.n	8009836 <HardFault_Handler+0x4>

08009838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800983c:	e7fe      	b.n	800983c <MemManage_Handler+0x4>

0800983e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800983e:	b480      	push	{r7}
 8009840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009842:	e7fe      	b.n	8009842 <BusFault_Handler+0x4>

08009844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009848:	e7fe      	b.n	8009848 <UsageFault_Handler+0x4>

0800984a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800984a:	b480      	push	{r7}
 800984c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800984e:	bf00      	nop
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800985c:	4802      	ldr	r0, [pc, #8]	; (8009868 <DMA1_Channel1_IRQHandler+0x10>)
 800985e:	f002 f8b3 	bl	800b9c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009862:	bf00      	nop
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200002a8 	.word	0x200002a8

0800986c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009870:	4802      	ldr	r0, [pc, #8]	; (800987c <ADC1_2_IRQHandler+0x10>)
 8009872:	f000 fdb3 	bl	800a3dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8009876:	bf00      	nop
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000240 	.word	0x20000240

08009880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009884:	4802      	ldr	r0, [pc, #8]	; (8009890 <TIM2_IRQHandler+0x10>)
 8009886:	f006 fb8e 	bl	800ffa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800988a:	bf00      	nop
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000ae8 	.word	0x20000ae8

08009894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009898:	4802      	ldr	r0, [pc, #8]	; (80098a4 <TIM3_IRQHandler+0x10>)
 800989a:	f006 fb84 	bl	800ffa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800989e:	bf00      	nop
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200006c0 	.word	0x200006c0

080098a8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80098ac:	4802      	ldr	r0, [pc, #8]	; (80098b8 <TIM6_IRQHandler+0x10>)
 80098ae:	f006 fb7a 	bl	800ffa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000758 	.word	0x20000758

080098bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80098c0:	4802      	ldr	r0, [pc, #8]	; (80098cc <UART4_IRQHandler+0x10>)
 80098c2:	f007 fe69 	bl	8011598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80098c6:	bf00      	nop
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	200003f8 	.word	0x200003f8

080098d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
  return 1;
 80098d4:	2301      	movs	r3, #1
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <_kill>:

int _kill(int pid, int sig)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80098ea:	f00d fec7 	bl	801767c <__errno>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2216      	movs	r2, #22
 80098f2:	601a      	str	r2, [r3, #0]
  return -1;
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <_exit>:

void _exit (int status)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009908:	f04f 31ff 	mov.w	r1, #4294967295
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff ffe7 	bl	80098e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009912:	e7fe      	b.n	8009912 <_exit+0x12>

08009914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800991c:	4a14      	ldr	r2, [pc, #80]	; (8009970 <_sbrk+0x5c>)
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <_sbrk+0x60>)
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009928:	4b13      	ldr	r3, [pc, #76]	; (8009978 <_sbrk+0x64>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009930:	4b11      	ldr	r3, [pc, #68]	; (8009978 <_sbrk+0x64>)
 8009932:	4a12      	ldr	r2, [pc, #72]	; (800997c <_sbrk+0x68>)
 8009934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009936:	4b10      	ldr	r3, [pc, #64]	; (8009978 <_sbrk+0x64>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4413      	add	r3, r2
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	429a      	cmp	r2, r3
 8009942:	d207      	bcs.n	8009954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009944:	f00d fe9a 	bl	801767c <__errno>
 8009948:	4603      	mov	r3, r0
 800994a:	220c      	movs	r2, #12
 800994c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	e009      	b.n	8009968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009954:	4b08      	ldr	r3, [pc, #32]	; (8009978 <_sbrk+0x64>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <_sbrk+0x64>)
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4413      	add	r3, r2
 8009962:	4a05      	ldr	r2, [pc, #20]	; (8009978 <_sbrk+0x64>)
 8009964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009966:	68fb      	ldr	r3, [r7, #12]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3718      	adds	r7, #24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	20030000 	.word	0x20030000
 8009974:	00000400 	.word	0x00000400
 8009978:	20000b34 	.word	0x20000b34
 800997c:	200039d0 	.word	0x200039d0

08009980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009984:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <SystemInit+0x20>)
 8009986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800998a:	4a05      	ldr	r2, [pc, #20]	; (80099a0 <SystemInit+0x20>)
 800998c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009994:	bf00      	nop
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	e000ed00 	.word	0xe000ed00

080099a4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80099aa:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 0308 	and.w	r3, r3, #8
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d107      	bne.n	80099c6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80099b6:	4b4c      	ldr	r3, [pc, #304]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 80099b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099bc:	0a1b      	lsrs	r3, r3, #8
 80099be:	f003 030f 	and.w	r3, r3, #15
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e005      	b.n	80099d2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80099c6:	4b48      	ldr	r3, [pc, #288]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	091b      	lsrs	r3, r3, #4
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80099d2:	4a46      	ldr	r2, [pc, #280]	; (8009aec <SystemCoreClockUpdate+0x148>)
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099da:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099dc:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 030c 	and.w	r3, r3, #12
 80099e4:	2b0c      	cmp	r3, #12
 80099e6:	d866      	bhi.n	8009ab6 <SystemCoreClockUpdate+0x112>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <SystemCoreClockUpdate+0x4c>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a25 	.word	0x08009a25
 80099f4:	08009ab7 	.word	0x08009ab7
 80099f8:	08009ab7 	.word	0x08009ab7
 80099fc:	08009ab7 	.word	0x08009ab7
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	08009ab7 	.word	0x08009ab7
 8009a08:	08009ab7 	.word	0x08009ab7
 8009a0c:	08009ab7 	.word	0x08009ab7
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009ab7 	.word	0x08009ab7
 8009a18:	08009ab7 	.word	0x08009ab7
 8009a1c:	08009ab7 	.word	0x08009ab7
 8009a20:	08009a3d 	.word	0x08009a3d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8009a24:	4a32      	ldr	r2, [pc, #200]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	6013      	str	r3, [r2, #0]
      break;
 8009a2a:	e048      	b.n	8009abe <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8009a2c:	4b30      	ldr	r3, [pc, #192]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009a2e:	4a31      	ldr	r2, [pc, #196]	; (8009af4 <SystemCoreClockUpdate+0x150>)
 8009a30:	601a      	str	r2, [r3, #0]
      break;
 8009a32:	e044      	b.n	8009abe <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8009a34:	4b2e      	ldr	r3, [pc, #184]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009a36:	4a30      	ldr	r2, [pc, #192]	; (8009af8 <SystemCoreClockUpdate+0x154>)
 8009a38:	601a      	str	r2, [r3, #0]
      break;
 8009a3a:	e040      	b.n	8009abe <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009a3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f003 0303 	and.w	r3, r3, #3
 8009a44:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8009a46:	4b28      	ldr	r3, [pc, #160]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	091b      	lsrs	r3, r3, #4
 8009a4c:	f003 030f 	and.w	r3, r3, #15
 8009a50:	3301      	adds	r3, #1
 8009a52:	60bb      	str	r3, [r7, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d003      	beq.n	8009a62 <SystemCoreClockUpdate+0xbe>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d006      	beq.n	8009a6e <SystemCoreClockUpdate+0xca>
 8009a60:	e00b      	b.n	8009a7a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8009a62:	4a24      	ldr	r2, [pc, #144]	; (8009af4 <SystemCoreClockUpdate+0x150>)
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6a:	613b      	str	r3, [r7, #16]
          break;
 8009a6c:	e00b      	b.n	8009a86 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8009a6e:	4a22      	ldr	r2, [pc, #136]	; (8009af8 <SystemCoreClockUpdate+0x154>)
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a76:	613b      	str	r3, [r7, #16]
          break;
 8009a78:	e005      	b.n	8009a86 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a82:	613b      	str	r3, [r7, #16]
          break;
 8009a84:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	fb02 f303 	mul.w	r3, r2, r3
 8009a96:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8009a98:	4b13      	ldr	r3, [pc, #76]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	0e5b      	lsrs	r3, r3, #25
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	005b      	lsls	r3, r3, #1
 8009aa6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009ab2:	6013      	str	r3, [r2, #0]
      break;
 8009ab4:	e003      	b.n	8009abe <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8009ab6:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	6013      	str	r3, [r2, #0]
      break;
 8009abc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <SystemCoreClockUpdate+0x144>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	091b      	lsrs	r3, r3, #4
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	4a0c      	ldr	r2, [pc, #48]	; (8009afc <SystemCoreClockUpdate+0x158>)
 8009aca:	5cd3      	ldrb	r3, [r2, r3]
 8009acc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8009ace:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad8:	4a05      	ldr	r2, [pc, #20]	; (8009af0 <SystemCoreClockUpdate+0x14c>)
 8009ada:	6013      	str	r3, [r2, #0]
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	40021000 	.word	0x40021000
 8009aec:	08018314 	.word	0x08018314
 8009af0:	20000054 	.word	0x20000054
 8009af4:	00f42400 	.word	0x00f42400
 8009af8:	007a1200 	.word	0x007a1200
 8009afc:	080182fc 	.word	0x080182fc

08009b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8009b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009b04:	f7ff ff3c 	bl	8009980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009b08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009b0a:	e003      	b.n	8009b14 <LoopCopyDataInit>

08009b0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009b0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009b10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009b12:	3104      	adds	r1, #4

08009b14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009b14:	480a      	ldr	r0, [pc, #40]	; (8009b40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009b18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009b1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009b1c:	d3f6      	bcc.n	8009b0c <CopyDataInit>
	ldr	r2, =_sbss
 8009b1e:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009b20:	e002      	b.n	8009b28 <LoopFillZerobss>

08009b22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009b22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009b24:	f842 3b04 	str.w	r3, [r2], #4

08009b28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <LoopForever+0x16>)
	cmp	r2, r3
 8009b2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009b2c:	d3f9      	bcc.n	8009b22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009b2e:	f00d fdab 	bl	8017688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009b32:	f7fe f80b 	bl	8007b4c <main>

08009b36 <LoopForever>:

LoopForever:
    b LoopForever
 8009b36:	e7fe      	b.n	8009b36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8009b38:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8009b3c:	080184f0 	.word	0x080184f0
	ldr	r0, =_sdata
 8009b40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009b44:	200000c8 	.word	0x200000c8
	ldr	r2, =_sbss
 8009b48:	200000c8 	.word	0x200000c8
	ldr	r3, = _ebss
 8009b4c:	200039d0 	.word	0x200039d0

08009b50 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009b50:	e7fe      	b.n	8009b50 <COMP_IRQHandler>

08009b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8009b5c:	2004      	movs	r0, #4
 8009b5e:	f001 fd22 	bl	800b5a6 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8009b62:	f7ff ff1f 	bl	80099a4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009b66:	2007      	movs	r0, #7
 8009b68:	f7ff fe0a 	bl	8009780 <HAL_InitTick>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	71fb      	strb	r3, [r7, #7]
 8009b76:	e001      	b.n	8009b7c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009b78:	f7ff f8f4 	bl	8008d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <HAL_IncTick+0x20>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	4b06      	ldr	r3, [pc, #24]	; (8009bac <HAL_IncTick+0x24>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4413      	add	r3, r2
 8009b98:	4a04      	ldr	r2, [pc, #16]	; (8009bac <HAL_IncTick+0x24>)
 8009b9a:	6013      	str	r3, [r2, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	2000005c 	.word	0x2000005c
 8009bac:	20000b38 	.word	0x20000b38

08009bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <HAL_GetTick+0x14>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000b38 	.word	0x20000b38

08009bc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	609a      	str	r2, [r3, #8]
}
 8009be2:	bf00      	nop
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	609a      	str	r2, [r3, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3360      	adds	r3, #96	; 0x60
 8009c42:	461a      	mov	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <LL_ADC_SetOffset+0x44>)
 8009c52:	4013      	ands	r3, r2
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	03fff000 	.word	0x03fff000

08009c78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	3360      	adds	r3, #96	; 0x60
 8009c86:	461a      	mov	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3360      	adds	r3, #96	; 0x60
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009cce:	bf00      	nop
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	615a      	str	r2, [r3, #20]
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009d14:	2301      	movs	r3, #1
 8009d16:	e000      	b.n	8009d1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b087      	sub	sp, #28
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3330      	adds	r3, #48	; 0x30
 8009d36:	461a      	mov	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	0a1b      	lsrs	r3, r3, #8
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	f003 030c 	and.w	r3, r3, #12
 8009d42:	4413      	add	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f003 031f 	and.w	r3, r3, #31
 8009d50:	211f      	movs	r1, #31
 8009d52:	fa01 f303 	lsl.w	r3, r1, r3
 8009d56:	43db      	mvns	r3, r3
 8009d58:	401a      	ands	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0e9b      	lsrs	r3, r3, #26
 8009d5e:	f003 011f 	and.w	r1, r3, #31
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f003 031f 	and.w	r3, r3, #31
 8009d68:	fa01 f303 	lsl.w	r3, r1, r3
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009d72:	bf00      	nop
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e000      	b.n	8009d98 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3314      	adds	r3, #20
 8009db4:	461a      	mov	r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	0e5b      	lsrs	r3, r3, #25
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	4413      	add	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	0d1b      	lsrs	r3, r3, #20
 8009dcc:	f003 031f 	and.w	r3, r3, #31
 8009dd0:	2107      	movs	r1, #7
 8009dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd6:	43db      	mvns	r3, r3
 8009dd8:	401a      	ands	r2, r3
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	0d1b      	lsrs	r3, r3, #20
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	fa01 f303 	lsl.w	r3, r1, r3
 8009de8:	431a      	orrs	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009dee:	bf00      	nop
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e14:	43db      	mvns	r3, r3
 8009e16:	401a      	ands	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f003 0318 	and.w	r3, r3, #24
 8009e1e:	4908      	ldr	r1, [pc, #32]	; (8009e40 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009e20:	40d9      	lsrs	r1, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	400b      	ands	r3, r1
 8009e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	0007ffff 	.word	0x0007ffff

08009e44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 031f 	and.w	r3, r3, #31
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009e8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6093      	str	r3, [r2, #8]
}
 8009e94:	bf00      	nop
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb4:	d101      	bne.n	8009eba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e000      	b.n	8009ebc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	370c      	adds	r7, #12
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009edc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f04:	d101      	bne.n	8009f0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e000      	b.n	8009f0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009f2c:	f043 0201 	orr.w	r2, r3, #1
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <LL_ADC_IsEnabled+0x18>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <LL_ADC_IsEnabled+0x1a>
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009f7a:	f043 0204 	orr.w	r2, r3, #4
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f003 0304 	and.w	r3, r3, #4
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d101      	bne.n	8009fa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e000      	b.n	8009fa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d101      	bne.n	8009fcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
	...

08009fdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009fdc:	b590      	push	{r4, r7, lr}
 8009fde:	b089      	sub	sp, #36	; 0x24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e12e      	b.n	800a254 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7fe fed5 	bl	8008db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff ff3f 	bl	8009ea0 <LL_ADC_IsDeepPowerDownEnabled>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff ff25 	bl	8009e7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff ff5a 	bl	8009ef0 <LL_ADC_IsInternalRegulatorEnabled>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d115      	bne.n	800a06e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff ff3e 	bl	8009ec8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a04c:	4b83      	ldr	r3, [pc, #524]	; (800a25c <HAL_ADC_Init+0x280>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	099b      	lsrs	r3, r3, #6
 800a052:	4a83      	ldr	r2, [pc, #524]	; (800a260 <HAL_ADC_Init+0x284>)
 800a054:	fba2 2303 	umull	r2, r3, r2, r3
 800a058:	099b      	lsrs	r3, r3, #6
 800a05a:	3301      	adds	r3, #1
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a060:	e002      	b.n	800a068 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3b01      	subs	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1f9      	bne.n	800a062 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff ff3c 	bl	8009ef0 <LL_ADC_IsInternalRegulatorEnabled>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10d      	bne.n	800a09a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a082:	f043 0210 	orr.w	r2, r3, #16
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08e:	f043 0201 	orr.w	r2, r3, #1
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff ff75 	bl	8009f8e <LL_ADC_REG_IsConversionOngoing>
 800a0a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f040 80c7 	bne.w	800a242 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f040 80c3 	bne.w	800a242 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a0c4:	f043 0202 	orr.w	r2, r3, #2
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff ff35 	bl	8009f40 <LL_ADC_IsEnabled>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d110      	bne.n	800a0fe <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a0dc:	4861      	ldr	r0, [pc, #388]	; (800a264 <HAL_ADC_Init+0x288>)
 800a0de:	f7ff ff2f 	bl	8009f40 <LL_ADC_IsEnabled>
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4860      	ldr	r0, [pc, #384]	; (800a268 <HAL_ADC_Init+0x28c>)
 800a0e6:	f7ff ff2b 	bl	8009f40 <LL_ADC_IsEnabled>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	4323      	orrs	r3, r4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d105      	bne.n	800a0fe <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	485c      	ldr	r0, [pc, #368]	; (800a26c <HAL_ADC_Init+0x290>)
 800a0fa:	f7ff fd65 	bl	8009bc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	7e5b      	ldrb	r3, [r3, #25]
 800a102:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a108:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a10e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a114:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a11c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a11e:	4313      	orrs	r3, r2
 800a120:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d106      	bne.n	800a13a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	3b01      	subs	r3, #1
 800a132:	045b      	lsls	r3, r3, #17
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	4313      	orrs	r3, r2
 800a138:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d009      	beq.n	800a156 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a146:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	4313      	orrs	r3, r2
 800a154:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68da      	ldr	r2, [r3, #12]
 800a15c:	4b44      	ldr	r3, [pc, #272]	; (800a270 <HAL_ADC_Init+0x294>)
 800a15e:	4013      	ands	r3, r2
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	6812      	ldr	r2, [r2, #0]
 800a164:	69b9      	ldr	r1, [r7, #24]
 800a166:	430b      	orrs	r3, r1
 800a168:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff ff20 	bl	8009fb4 <LL_ADC_INJ_IsConversionOngoing>
 800a174:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d140      	bne.n	800a1fe <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d13d      	bne.n	800a1fe <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	7e1b      	ldrb	r3, [r3, #24]
 800a18a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a18c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a194:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a196:	4313      	orrs	r3, r2
 800a198:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1a4:	f023 0306 	bic.w	r3, r3, #6
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6812      	ldr	r2, [r2, #0]
 800a1ac:	69b9      	ldr	r1, [r7, #24]
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d118      	bne.n	800a1ee <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a1c6:	f023 0304 	bic.w	r3, r3, #4
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a1d2:	4311      	orrs	r1, r2
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a1d8:	4311      	orrs	r1, r2
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f042 0201 	orr.w	r2, r2, #1
 800a1ea:	611a      	str	r2, [r3, #16]
 800a1ec:	e007      	b.n	800a1fe <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	691a      	ldr	r2, [r3, #16]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f022 0201 	bic.w	r2, r2, #1
 800a1fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d10c      	bne.n	800a220 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20c:	f023 010f 	bic.w	r1, r3, #15
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	1e5a      	subs	r2, r3, #1
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	430a      	orrs	r2, r1
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30
 800a21e:	e007      	b.n	800a230 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 020f 	bic.w	r2, r2, #15
 800a22e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a234:	f023 0303 	bic.w	r3, r3, #3
 800a238:	f043 0201 	orr.w	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	659a      	str	r2, [r3, #88]	; 0x58
 800a240:	e007      	b.n	800a252 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a246:	f043 0210 	orr.w	r2, r3, #16
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a252:	7ffb      	ldrb	r3, [r7, #31]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3724      	adds	r7, #36	; 0x24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd90      	pop	{r4, r7, pc}
 800a25c:	20000054 	.word	0x20000054
 800a260:	053e2d63 	.word	0x053e2d63
 800a264:	42028000 	.word	0x42028000
 800a268:	42028100 	.word	0x42028100
 800a26c:	42028300 	.word	0x42028300
 800a270:	fff0c007 	.word	0xfff0c007

0800a274 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a280:	4850      	ldr	r0, [pc, #320]	; (800a3c4 <HAL_ADC_Start_DMA+0x150>)
 800a282:	f7ff fddf 	bl	8009e44 <LL_ADC_GetMultimode>
 800a286:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fe7e 	bl	8009f8e <LL_ADC_REG_IsConversionOngoing>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	f040 808e 	bne.w	800a3b6 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_ADC_Start_DMA+0x34>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e089      	b.n	800a3bc <HAL_ADC_Start_DMA+0x148>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	2b05      	cmp	r3, #5
 800a2ba:	d002      	beq.n	800a2c2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d172      	bne.n	800a3a8 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 feac 	bl	800b020 <ADC_Enable>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d165      	bne.n	800a39e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a37      	ldr	r2, [pc, #220]	; (800a3c8 <HAL_ADC_Start_DMA+0x154>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d002      	beq.n	800a2f6 <HAL_ADC_Start_DMA+0x82>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	e000      	b.n	800a2f8 <HAL_ADC_Start_DMA+0x84>
 800a2f6:	4b35      	ldr	r3, [pc, #212]	; (800a3cc <HAL_ADC_Start_DMA+0x158>)
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	6812      	ldr	r2, [r2, #0]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d002      	beq.n	800a306 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a30a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d006      	beq.n	800a32c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a322:	f023 0206 	bic.w	r2, r3, #6
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	65da      	str	r2, [r3, #92]	; 0x5c
 800a32a:	e002      	b.n	800a332 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a336:	4a26      	ldr	r2, [pc, #152]	; (800a3d0 <HAL_ADC_Start_DMA+0x15c>)
 800a338:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33e:	4a25      	ldr	r2, [pc, #148]	; (800a3d4 <HAL_ADC_Start_DMA+0x160>)
 800a340:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a346:	4a24      	ldr	r2, [pc, #144]	; (800a3d8 <HAL_ADC_Start_DMA+0x164>)
 800a348:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	221c      	movs	r2, #28
 800a350:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0210 	orr.w	r2, r2, #16
 800a368:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68da      	ldr	r2, [r3, #12]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f042 0201 	orr.w	r2, r2, #1
 800a378:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3340      	adds	r3, #64	; 0x40
 800a384:	4619      	mov	r1, r3
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f001 f9e7 	bl	800b75c <HAL_DMA_Start_IT>
 800a38e:	4603      	mov	r3, r0
 800a390:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fde5 	bl	8009f66 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a39c:	e00d      	b.n	800a3ba <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800a3a6:	e008      	b.n	800a3ba <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800a3b4:	e001      	b.n	800a3ba <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	42028300 	.word	0x42028300
 800a3c8:	42028100 	.word	0x42028100
 800a3cc:	42028000 	.word	0x42028000
 800a3d0:	0800b12d 	.word	0x0800b12d
 800a3d4:	0800b205 	.word	0x0800b205
 800a3d8:	0800b221 	.word	0x0800b221

0800a3dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08a      	sub	sp, #40	; 0x28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a3f8:	4882      	ldr	r0, [pc, #520]	; (800a604 <HAL_ADC_IRQHandler+0x228>)
 800a3fa:	f7ff fd23 	bl	8009e44 <LL_ADC_GetMultimode>
 800a3fe:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d017      	beq.n	800a43a <HAL_ADC_IRQHandler+0x5e>
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	f003 0302 	and.w	r3, r3, #2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d012      	beq.n	800a43a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a418:	f003 0310 	and.w	r3, r3, #16
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d105      	bne.n	800a42c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a424:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 ff5f 	bl	800b2f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2202      	movs	r2, #2
 800a438:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <HAL_ADC_IRQHandler+0x72>
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10a      	bne.n	800a464 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 8083 	beq.w	800a560 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	f003 0308 	and.w	r3, r3, #8
 800a460:	2b00      	cmp	r3, #0
 800a462:	d07d      	beq.n	800a560 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a468:	f003 0310 	and.w	r3, r3, #16
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d105      	bne.n	800a47c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a474:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fc3d 	bl	8009d00 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d062      	beq.n	800a552 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a5d      	ldr	r2, [pc, #372]	; (800a608 <HAL_ADC_IRQHandler+0x22c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d002      	beq.n	800a49c <HAL_ADC_IRQHandler+0xc0>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	e000      	b.n	800a49e <HAL_ADC_IRQHandler+0xc2>
 800a49c:	4b5b      	ldr	r3, [pc, #364]	; (800a60c <HAL_ADC_IRQHandler+0x230>)
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6812      	ldr	r2, [r2, #0]
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d008      	beq.n	800a4b8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d002      	beq.n	800a4b8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b09      	cmp	r3, #9
 800a4b6:	d104      	bne.n	800a4c2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	623b      	str	r3, [r7, #32]
 800a4c0:	e00c      	b.n	800a4dc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a50      	ldr	r2, [pc, #320]	; (800a608 <HAL_ADC_IRQHandler+0x22c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d002      	beq.n	800a4d2 <HAL_ADC_IRQHandler+0xf6>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	e000      	b.n	800a4d4 <HAL_ADC_IRQHandler+0xf8>
 800a4d2:	4b4e      	ldr	r3, [pc, #312]	; (800a60c <HAL_ADC_IRQHandler+0x230>)
 800a4d4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d135      	bne.n	800a552 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d12e      	bne.n	800a552 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fd48 	bl	8009f8e <LL_ADC_REG_IsConversionOngoing>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d11a      	bne.n	800a53a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 020c 	bic.w	r2, r2, #12
 800a512:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d112      	bne.n	800a552 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a530:	f043 0201 	orr.w	r2, r3, #1
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	659a      	str	r2, [r3, #88]	; 0x58
 800a538:	e00b      	b.n	800a552 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53e:	f043 0210 	orr.w	r2, r3, #16
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54a:	f043 0201 	orr.w	r2, r3, #1
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7f6 fcd2 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	220c      	movs	r2, #12
 800a55e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b00      	cmp	r3, #0
 800a568:	d004      	beq.n	800a574 <HAL_ADC_IRQHandler+0x198>
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	f003 0320 	and.w	r3, r3, #32
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10b      	bne.n	800a58c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 809f 	beq.w	800a6be <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 8099 	beq.w	800a6be <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b00      	cmp	r3, #0
 800a596:	d105      	bne.n	800a5a4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a59c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff fbe8 	bl	8009d7e <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a5ae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff fba3 	bl	8009d00 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a5ba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a11      	ldr	r2, [pc, #68]	; (800a608 <HAL_ADC_IRQHandler+0x22c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d002      	beq.n	800a5cc <HAL_ADC_IRQHandler+0x1f0>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	e000      	b.n	800a5ce <HAL_ADC_IRQHandler+0x1f2>
 800a5cc:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <HAL_ADC_IRQHandler+0x230>)
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d008      	beq.n	800a5e8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b06      	cmp	r3, #6
 800a5e0:	d002      	beq.n	800a5e8 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b07      	cmp	r3, #7
 800a5e6:	d104      	bne.n	800a5f2 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	623b      	str	r3, [r7, #32]
 800a5f0:	e013      	b.n	800a61a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a04      	ldr	r2, [pc, #16]	; (800a608 <HAL_ADC_IRQHandler+0x22c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d009      	beq.n	800a610 <HAL_ADC_IRQHandler+0x234>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	e007      	b.n	800a612 <HAL_ADC_IRQHandler+0x236>
 800a602:	bf00      	nop
 800a604:	42028300 	.word	0x42028300
 800a608:	42028100 	.word	0x42028100
 800a60c:	42028000 	.word	0x42028000
 800a610:	4b7d      	ldr	r3, [pc, #500]	; (800a808 <HAL_ADC_IRQHandler+0x42c>)
 800a612:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d047      	beq.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <HAL_ADC_IRQHandler+0x25e>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d03f      	beq.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a636:	2b00      	cmp	r3, #0
 800a638:	d13a      	bne.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a644:	2b40      	cmp	r3, #64	; 0x40
 800a646:	d133      	bne.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d12e      	bne.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fcac 	bl	8009fb4 <LL_ADC_INJ_IsConversionOngoing>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11a      	bne.n	800a698 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a670:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a686:	2b00      	cmp	r3, #0
 800a688:	d112      	bne.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68e:	f043 0201 	orr.w	r2, r3, #1
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	659a      	str	r2, [r3, #88]	; 0x58
 800a696:	e00b      	b.n	800a6b0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69c:	f043 0210 	orr.w	r2, r3, #16
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a8:	f043 0201 	orr.w	r2, r3, #1
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fdf5 	bl	800b2a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2260      	movs	r2, #96	; 0x60
 800a6bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d011      	beq.n	800a6ec <HAL_ADC_IRQHandler+0x310>
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00c      	beq.n	800a6ec <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f8a0 	bl	800a824 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2280      	movs	r2, #128	; 0x80
 800a6ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d012      	beq.n	800a71c <HAL_ADC_IRQHandler+0x340>
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00d      	beq.n	800a71c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a704:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fddb 	bl	800b2c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a71a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a722:	2b00      	cmp	r3, #0
 800a724:	d012      	beq.n	800a74c <HAL_ADC_IRQHandler+0x370>
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00d      	beq.n	800a74c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a734:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fdcd 	bl	800b2dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a74a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f003 0310 	and.w	r3, r3, #16
 800a752:	2b00      	cmp	r3, #0
 800a754:	d036      	beq.n	800a7c4 <HAL_ADC_IRQHandler+0x3e8>
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f003 0310 	and.w	r3, r3, #16
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d031      	beq.n	800a7c4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800a768:	2301      	movs	r3, #1
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24
 800a76c:	e014      	b.n	800a798 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a774:	4825      	ldr	r0, [pc, #148]	; (800a80c <HAL_ADC_IRQHandler+0x430>)
 800a776:	f7ff fb73 	bl	8009e60 <LL_ADC_GetMultiDMATransfer>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800a780:	2301      	movs	r3, #1
 800a782:	627b      	str	r3, [r7, #36]	; 0x24
 800a784:	e008      	b.n	800a798 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800a794:	2301      	movs	r3, #1
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10e      	bne.n	800a7bc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ae:	f043 0202 	orr.w	r2, r3, #2
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f83e 	bl	800a838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2210      	movs	r2, #16
 800a7c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d018      	beq.n	800a800 <HAL_ADC_IRQHandler+0x424>
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7dc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e8:	f043 0208 	orr.w	r2, r3, #8
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7f8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fd5a 	bl	800b2b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a800:	bf00      	nop
 800a802:	3728      	adds	r7, #40	; 0x28
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	42028000 	.word	0x42028000
 800a80c:	42028300 	.word	0x42028300

0800a810 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a84c:	b590      	push	{r4, r7, lr}
 800a84e:	b0b7      	sub	sp, #220	; 0xdc
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a866:	2b01      	cmp	r3, #1
 800a868:	d101      	bne.n	800a86e <HAL_ADC_ConfigChannel+0x22>
 800a86a:	2302      	movs	r3, #2
 800a86c:	e3c1      	b.n	800aff2 <HAL_ADC_ConfigChannel+0x7a6>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fb87 	bl	8009f8e <LL_ADC_REG_IsConversionOngoing>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	f040 83a6 	bne.w	800afd4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	6859      	ldr	r1, [r3, #4]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	461a      	mov	r2, r3
 800a896:	f7ff fa46 	bl	8009d26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff fb75 	bl	8009f8e <LL_ADC_REG_IsConversionOngoing>
 800a8a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fb81 	bl	8009fb4 <LL_ADC_INJ_IsConversionOngoing>
 800a8b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a8b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f040 81c1 	bne.w	800ac42 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a8c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f040 81bc 	bne.w	800ac42 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d2:	d10f      	bne.n	800a8f4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6818      	ldr	r0, [r3, #0]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4619      	mov	r1, r3
 800a8e0:	f7ff fa60 	bl	8009da4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff f9f4 	bl	8009cda <LL_ADC_SetSamplingTimeCommonConfig>
 800a8f2:	e00e      	b.n	800a912 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6818      	ldr	r0, [r3, #0]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	6819      	ldr	r1, [r3, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	461a      	mov	r2, r3
 800a902:	f7ff fa4f 	bl	8009da4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff f9e4 	bl	8009cda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	695a      	ldr	r2, [r3, #20]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	08db      	lsrs	r3, r3, #3
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	005b      	lsls	r3, r3, #1
 800a924:	fa02 f303 	lsl.w	r3, r2, r3
 800a928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	2b04      	cmp	r3, #4
 800a932:	d00a      	beq.n	800a94a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6818      	ldr	r0, [r3, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	6919      	ldr	r1, [r3, #16]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a944:	f7ff f974 	bl	8009c30 <LL_ADC_SetOffset>
 800a948:	e17b      	b.n	800ac42 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f7ff f991 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800a956:	4603      	mov	r3, r0
 800a958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <HAL_ADC_ConfigChannel+0x12a>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2100      	movs	r1, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff f986 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800a96c:	4603      	mov	r3, r0
 800a96e:	0e9b      	lsrs	r3, r3, #26
 800a970:	f003 021f 	and.w	r2, r3, #31
 800a974:	e01e      	b.n	800a9b4 <HAL_ADC_ConfigChannel+0x168>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff f97b 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800a982:	4603      	mov	r3, r0
 800a984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a988:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a98c:	fa93 f3a3 	rbit	r3, r3
 800a990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a99c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800a9a4:	2320      	movs	r3, #32
 800a9a6:	e004      	b.n	800a9b2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 800a9a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a9ac:	fab3 f383 	clz	r3, r3
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d105      	bne.n	800a9cc <HAL_ADC_ConfigChannel+0x180>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	0e9b      	lsrs	r3, r3, #26
 800a9c6:	f003 031f 	and.w	r3, r3, #31
 800a9ca:	e018      	b.n	800a9fe <HAL_ADC_ConfigChannel+0x1b2>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a9d8:	fa93 f3a3 	rbit	r3, r3
 800a9dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a9e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a9e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	e004      	b.n	800a9fe <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 800a9f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a9f8:	fab3 f383 	clz	r3, r3
 800a9fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d106      	bne.n	800aa10 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2200      	movs	r2, #0
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7ff f94a 	bl	8009ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2101      	movs	r1, #1
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7ff f92e 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10a      	bne.n	800aa3c <HAL_ADC_ConfigChannel+0x1f0>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff f923 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800aa32:	4603      	mov	r3, r0
 800aa34:	0e9b      	lsrs	r3, r3, #26
 800aa36:	f003 021f 	and.w	r2, r3, #31
 800aa3a:	e01e      	b.n	800aa7a <HAL_ADC_ConfigChannel+0x22e>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2101      	movs	r1, #1
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff f918 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa52:	fa93 f3a3 	rbit	r3, r3
 800aa56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800aa5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800aa62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800aa6a:	2320      	movs	r3, #32
 800aa6c:	e004      	b.n	800aa78 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800aa6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa72:	fab3 f383 	clz	r3, r3
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d105      	bne.n	800aa92 <HAL_ADC_ConfigChannel+0x246>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	0e9b      	lsrs	r3, r3, #26
 800aa8c:	f003 031f 	and.w	r3, r3, #31
 800aa90:	e018      	b.n	800aac4 <HAL_ADC_ConfigChannel+0x278>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa9e:	fa93 f3a3 	rbit	r3, r3
 800aaa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800aaa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aaaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800aaae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d101      	bne.n	800aaba <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800aab6:	2320      	movs	r3, #32
 800aab8:	e004      	b.n	800aac4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800aaba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aabe:	fab3 f383 	clz	r3, r3
 800aac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d106      	bne.n	800aad6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2200      	movs	r2, #0
 800aace:	2101      	movs	r1, #1
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff f8e7 	bl	8009ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2102      	movs	r1, #2
 800aadc:	4618      	mov	r0, r3
 800aade:	f7ff f8cb 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <HAL_ADC_ConfigChannel+0x2b6>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff f8c0 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	0e9b      	lsrs	r3, r3, #26
 800aafc:	f003 021f 	and.w	r2, r3, #31
 800ab00:	e01e      	b.n	800ab40 <HAL_ADC_ConfigChannel+0x2f4>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2102      	movs	r1, #2
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff f8b5 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab18:	fa93 f3a3 	rbit	r3, r3
 800ab1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800ab20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800ab28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 800ab30:	2320      	movs	r3, #32
 800ab32:	e004      	b.n	800ab3e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 800ab34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab38:	fab3 f383 	clz	r3, r3
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d105      	bne.n	800ab58 <HAL_ADC_ConfigChannel+0x30c>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	0e9b      	lsrs	r3, r3, #26
 800ab52:	f003 031f 	and.w	r3, r3, #31
 800ab56:	e016      	b.n	800ab86 <HAL_ADC_ConfigChannel+0x33a>
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab64:	fa93 f3a3 	rbit	r3, r3
 800ab68:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800ab6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800ab70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800ab78:	2320      	movs	r3, #32
 800ab7a:	e004      	b.n	800ab86 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800ab7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab80:	fab3 f383 	clz	r3, r3
 800ab84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d106      	bne.n	800ab98 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2102      	movs	r1, #2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff f886 	bl	8009ca4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2103      	movs	r1, #3
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff f86a 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <HAL_ADC_ConfigChannel+0x378>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2103      	movs	r1, #3
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff f85f 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800abba:	4603      	mov	r3, r0
 800abbc:	0e9b      	lsrs	r3, r3, #26
 800abbe:	f003 021f 	and.w	r2, r3, #31
 800abc2:	e017      	b.n	800abf4 <HAL_ADC_ConfigChannel+0x3a8>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2103      	movs	r1, #3
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff f854 	bl	8009c78 <LL_ADC_GetOffsetChannel>
 800abd0:	4603      	mov	r3, r0
 800abd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abd6:	fa93 f3a3 	rbit	r3, r3
 800abda:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800abdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abde:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800abe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800abe6:	2320      	movs	r3, #32
 800abe8:	e003      	b.n	800abf2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800abea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abec:	fab3 f383 	clz	r3, r3
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d105      	bne.n	800ac0c <HAL_ADC_ConfigChannel+0x3c0>
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	0e9b      	lsrs	r3, r3, #26
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	e011      	b.n	800ac30 <HAL_ADC_ConfigChannel+0x3e4>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac14:	fa93 f3a3 	rbit	r3, r3
 800ac18:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800ac1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800ac1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 800ac24:	2320      	movs	r3, #32
 800ac26:	e003      	b.n	800ac30 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800ac28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2a:	fab3 f383 	clz	r3, r3
 800ac2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d106      	bne.n	800ac42 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2103      	movs	r1, #3
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7ff f831 	bl	8009ca4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff f97a 	bl	8009f40 <LL_ADC_IsEnabled>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f040 81c9 	bne.w	800afe6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6818      	ldr	r0, [r3, #0]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	6819      	ldr	r1, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	461a      	mov	r2, r3
 800ac62:	f7ff f8cb 	bl	8009dfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	4a8f      	ldr	r2, [pc, #572]	; (800aea8 <HAL_ADC_ConfigChannel+0x65c>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	f040 8131 	bne.w	800aed4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10b      	bne.n	800ac9a <HAL_ADC_ConfigChannel+0x44e>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	0e9b      	lsrs	r3, r3, #26
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f003 031f 	and.w	r3, r3, #31
 800ac8e:	2b09      	cmp	r3, #9
 800ac90:	bf94      	ite	ls
 800ac92:	2301      	movls	r3, #1
 800ac94:	2300      	movhi	r3, #0
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	e019      	b.n	800acce <HAL_ADC_ConfigChannel+0x482>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aca2:	fa93 f3a3 	rbit	r3, r3
 800aca6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800aca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acaa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800acac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800acb2:	2320      	movs	r3, #32
 800acb4:	e003      	b.n	800acbe <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800acb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acb8:	fab3 f383 	clz	r3, r3
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	3301      	adds	r3, #1
 800acc0:	f003 031f 	and.w	r3, r3, #31
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	bf94      	ite	ls
 800acc8:	2301      	movls	r3, #1
 800acca:	2300      	movhi	r3, #0
 800accc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d079      	beq.n	800adc6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d107      	bne.n	800acee <HAL_ADC_ConfigChannel+0x4a2>
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	0e9b      	lsrs	r3, r3, #26
 800ace4:	3301      	adds	r3, #1
 800ace6:	069b      	lsls	r3, r3, #26
 800ace8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800acec:	e015      	b.n	800ad1a <HAL_ADC_ConfigChannel+0x4ce>
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf6:	fa93 f3a3 	rbit	r3, r3
 800acfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800acfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800ad00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800ad06:	2320      	movs	r3, #32
 800ad08:	e003      	b.n	800ad12 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800ad0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad0c:	fab3 f383 	clz	r3, r3
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	3301      	adds	r3, #1
 800ad14:	069b      	lsls	r3, r3, #26
 800ad16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d109      	bne.n	800ad3a <HAL_ADC_ConfigChannel+0x4ee>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	0e9b      	lsrs	r3, r3, #26
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	f003 031f 	and.w	r3, r3, #31
 800ad32:	2101      	movs	r1, #1
 800ad34:	fa01 f303 	lsl.w	r3, r1, r3
 800ad38:	e017      	b.n	800ad6a <HAL_ADC_ConfigChannel+0x51e>
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad42:	fa93 f3a3 	rbit	r3, r3
 800ad46:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800ad48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad4a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800ad4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800ad52:	2320      	movs	r3, #32
 800ad54:	e003      	b.n	800ad5e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800ad56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad58:	fab3 f383 	clz	r3, r3
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	3301      	adds	r3, #1
 800ad60:	f003 031f 	and.w	r3, r3, #31
 800ad64:	2101      	movs	r1, #1
 800ad66:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6a:	ea42 0103 	orr.w	r1, r2, r3
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10a      	bne.n	800ad90 <HAL_ADC_ConfigChannel+0x544>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	0e9b      	lsrs	r3, r3, #26
 800ad80:	3301      	adds	r3, #1
 800ad82:	f003 021f 	and.w	r2, r3, #31
 800ad86:	4613      	mov	r3, r2
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	4413      	add	r3, r2
 800ad8c:	051b      	lsls	r3, r3, #20
 800ad8e:	e018      	b.n	800adc2 <HAL_ADC_ConfigChannel+0x576>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad98:	fa93 f3a3 	rbit	r3, r3
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800ada2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800ada8:	2320      	movs	r3, #32
 800adaa:	e003      	b.n	800adb4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800adac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adae:	fab3 f383 	clz	r3, r3
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	3301      	adds	r3, #1
 800adb6:	f003 021f 	and.w	r2, r3, #31
 800adba:	4613      	mov	r3, r2
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	4413      	add	r3, r2
 800adc0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800adc2:	430b      	orrs	r3, r1
 800adc4:	e081      	b.n	800aeca <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adce:	2b00      	cmp	r3, #0
 800add0:	d107      	bne.n	800ade2 <HAL_ADC_ConfigChannel+0x596>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	0e9b      	lsrs	r3, r3, #26
 800add8:	3301      	adds	r3, #1
 800adda:	069b      	lsls	r3, r3, #26
 800addc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ade0:	e015      	b.n	800ae0e <HAL_ADC_ConfigChannel+0x5c2>
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	fa93 f3a3 	rbit	r3, r3
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800adfa:	2320      	movs	r3, #32
 800adfc:	e003      	b.n	800ae06 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800adfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae00:	fab3 f383 	clz	r3, r3
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	3301      	adds	r3, #1
 800ae08:	069b      	lsls	r3, r3, #26
 800ae0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d109      	bne.n	800ae2e <HAL_ADC_ConfigChannel+0x5e2>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	0e9b      	lsrs	r3, r3, #26
 800ae20:	3301      	adds	r3, #1
 800ae22:	f003 031f 	and.w	r3, r3, #31
 800ae26:	2101      	movs	r1, #1
 800ae28:	fa01 f303 	lsl.w	r3, r1, r3
 800ae2c:	e017      	b.n	800ae5e <HAL_ADC_ConfigChannel+0x612>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	fa93 f3a3 	rbit	r3, r3
 800ae3a:	61fb      	str	r3, [r7, #28]
  return result;
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 800ae46:	2320      	movs	r3, #32
 800ae48:	e003      	b.n	800ae52 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	fab3 f383 	clz	r3, r3
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	3301      	adds	r3, #1
 800ae54:	f003 031f 	and.w	r3, r3, #31
 800ae58:	2101      	movs	r1, #1
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	ea42 0103 	orr.w	r1, r2, r3
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10d      	bne.n	800ae8a <HAL_ADC_ConfigChannel+0x63e>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	0e9b      	lsrs	r3, r3, #26
 800ae74:	3301      	adds	r3, #1
 800ae76:	f003 021f 	and.w	r2, r3, #31
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	4413      	add	r3, r2
 800ae80:	3b1e      	subs	r3, #30
 800ae82:	051b      	lsls	r3, r3, #20
 800ae84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ae88:	e01e      	b.n	800aec8 <HAL_ADC_ConfigChannel+0x67c>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	fa93 f3a3 	rbit	r3, r3
 800ae96:	613b      	str	r3, [r7, #16]
  return result;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 800aea2:	2320      	movs	r3, #32
 800aea4:	e006      	b.n	800aeb4 <HAL_ADC_ConfigChannel+0x668>
 800aea6:	bf00      	nop
 800aea8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	fab3 f383 	clz	r3, r3
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	f003 021f 	and.w	r2, r3, #31
 800aeba:	4613      	mov	r3, r2
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	4413      	add	r3, r2
 800aec0:	3b1e      	subs	r3, #30
 800aec2:	051b      	lsls	r3, r3, #20
 800aec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aec8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aece:	4619      	mov	r1, r3
 800aed0:	f7fe ff68 	bl	8009da4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	4b48      	ldr	r3, [pc, #288]	; (800affc <HAL_ADC_ConfigChannel+0x7b0>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f000 8082 	beq.w	800afe6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aee2:	4847      	ldr	r0, [pc, #284]	; (800b000 <HAL_ADC_ConfigChannel+0x7b4>)
 800aee4:	f7fe fe96 	bl	8009c14 <LL_ADC_GetCommonPathInternalCh>
 800aee8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aeec:	4845      	ldr	r0, [pc, #276]	; (800b004 <HAL_ADC_ConfigChannel+0x7b8>)
 800aeee:	f7ff f827 	bl	8009f40 <LL_ADC_IsEnabled>
 800aef2:	4604      	mov	r4, r0
 800aef4:	4844      	ldr	r0, [pc, #272]	; (800b008 <HAL_ADC_ConfigChannel+0x7bc>)
 800aef6:	f7ff f823 	bl	8009f40 <LL_ADC_IsEnabled>
 800aefa:	4603      	mov	r3, r0
 800aefc:	4323      	orrs	r3, r4
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d15e      	bne.n	800afc0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a41      	ldr	r2, [pc, #260]	; (800b00c <HAL_ADC_ConfigChannel+0x7c0>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d127      	bne.n	800af5c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800af0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d121      	bne.n	800af5c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a39      	ldr	r2, [pc, #228]	; (800b004 <HAL_ADC_ConfigChannel+0x7b8>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d161      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af2a:	4619      	mov	r1, r3
 800af2c:	4834      	ldr	r0, [pc, #208]	; (800b000 <HAL_ADC_ConfigChannel+0x7b4>)
 800af2e:	f7fe fe5e 	bl	8009bee <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800af32:	4b37      	ldr	r3, [pc, #220]	; (800b010 <HAL_ADC_ConfigChannel+0x7c4>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	099b      	lsrs	r3, r3, #6
 800af38:	4a36      	ldr	r2, [pc, #216]	; (800b014 <HAL_ADC_ConfigChannel+0x7c8>)
 800af3a:	fba2 2303 	umull	r2, r3, r2, r3
 800af3e:	099b      	lsrs	r3, r3, #6
 800af40:	1c5a      	adds	r2, r3, #1
 800af42:	4613      	mov	r3, r2
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	4413      	add	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800af4a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800af4c:	e002      	b.n	800af54 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3b01      	subs	r3, #1
 800af52:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1f9      	bne.n	800af4e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af5a:	e044      	b.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a2d      	ldr	r2, [pc, #180]	; (800b018 <HAL_ADC_ConfigChannel+0x7cc>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d113      	bne.n	800af8e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800af66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10d      	bne.n	800af8e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a23      	ldr	r2, [pc, #140]	; (800b004 <HAL_ADC_ConfigChannel+0x7b8>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d134      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af84:	4619      	mov	r1, r3
 800af86:	481e      	ldr	r0, [pc, #120]	; (800b000 <HAL_ADC_ConfigChannel+0x7b4>)
 800af88:	f7fe fe31 	bl	8009bee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af8c:	e02b      	b.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a22      	ldr	r2, [pc, #136]	; (800b01c <HAL_ADC_ConfigChannel+0x7d0>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d126      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800af98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d120      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a16      	ldr	r2, [pc, #88]	; (800b004 <HAL_ADC_ConfigChannel+0x7b8>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d11b      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800afae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800afb6:	4619      	mov	r1, r3
 800afb8:	4811      	ldr	r0, [pc, #68]	; (800b000 <HAL_ADC_ConfigChannel+0x7b4>)
 800afba:	f7fe fe18 	bl	8009bee <LL_ADC_SetCommonPathInternalCh>
 800afbe:	e012      	b.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc4:	f043 0220 	orr.w	r2, r3, #32
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800afd2:	e008      	b.n	800afe6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd8:	f043 0220 	orr.w	r2, r3, #32
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800afee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	37dc      	adds	r7, #220	; 0xdc
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd90      	pop	{r4, r7, pc}
 800affa:	bf00      	nop
 800affc:	80080000 	.word	0x80080000
 800b000:	42028300 	.word	0x42028300
 800b004:	42028000 	.word	0x42028000
 800b008:	42028100 	.word	0x42028100
 800b00c:	c7520000 	.word	0xc7520000
 800b010:	20000054 	.word	0x20000054
 800b014:	053e2d63 	.word	0x053e2d63
 800b018:	cb840000 	.word	0xcb840000
 800b01c:	80000001 	.word	0x80000001

0800b020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b028:	2300      	movs	r3, #0
 800b02a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4618      	mov	r0, r3
 800b032:	f7fe ff85 	bl	8009f40 <LL_ADC_IsEnabled>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d169      	bne.n	800b110 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689a      	ldr	r2, [r3, #8]
 800b042:	4b36      	ldr	r3, [pc, #216]	; (800b11c <ADC_Enable+0xfc>)
 800b044:	4013      	ands	r3, r2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00d      	beq.n	800b066 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b04e:	f043 0210 	orr.w	r2, r3, #16
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b05a:	f043 0201 	orr.w	r2, r3, #1
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e055      	b.n	800b112 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe ff54 	bl	8009f18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b070:	482b      	ldr	r0, [pc, #172]	; (800b120 <ADC_Enable+0x100>)
 800b072:	f7fe fdcf 	bl	8009c14 <LL_ADC_GetCommonPathInternalCh>
 800b076:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d013      	beq.n	800b0a8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b080:	4b28      	ldr	r3, [pc, #160]	; (800b124 <ADC_Enable+0x104>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	099b      	lsrs	r3, r3, #6
 800b086:	4a28      	ldr	r2, [pc, #160]	; (800b128 <ADC_Enable+0x108>)
 800b088:	fba2 2303 	umull	r2, r3, r2, r3
 800b08c:	099b      	lsrs	r3, r3, #6
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	4613      	mov	r3, r2
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	4413      	add	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b09a:	e002      	b.n	800b0a2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1f9      	bne.n	800b09c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b0a8:	f7fe fd82 	bl	8009bb0 <HAL_GetTick>
 800b0ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0ae:	e028      	b.n	800b102 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fe ff43 	bl	8009f40 <LL_ADC_IsEnabled>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d104      	bne.n	800b0ca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe ff27 	bl	8009f18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b0ca:	f7fe fd71 	bl	8009bb0 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d914      	bls.n	800b102 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0301 	and.w	r3, r3, #1
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d00d      	beq.n	800b102 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ea:	f043 0210 	orr.w	r2, r3, #16
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0f6:	f043 0201 	orr.w	r2, r3, #1
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e007      	b.n	800b112 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0301 	and.w	r3, r3, #1
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d1cf      	bne.n	800b0b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	8000003f 	.word	0x8000003f
 800b120:	42028300 	.word	0x42028300
 800b124:	20000054 	.word	0x20000054
 800b128:	053e2d63 	.word	0x053e2d63

0800b12c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b138:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b142:	2b00      	cmp	r3, #0
 800b144:	d14b      	bne.n	800b1de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0308 	and.w	r3, r3, #8
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d021      	beq.n	800b1a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f7fe fdcb 	bl	8009d00 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d032      	beq.n	800b1d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d12b      	bne.n	800b1d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d11f      	bne.n	800b1d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19a:	f043 0201 	orr.w	r2, r3, #1
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	659a      	str	r2, [r3, #88]	; 0x58
 800b1a2:	e018      	b.n	800b1d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f003 0302 	and.w	r3, r3, #2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d111      	bne.n	800b1d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ce:	f043 0201 	orr.w	r2, r3, #1
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7f5 fe90 	bl	8000efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b1dc:	e00e      	b.n	800b1fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e2:	f003 0310 	and.w	r3, r3, #16
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f7ff fb24 	bl	800a838 <HAL_ADC_ErrorCallback>
}
 800b1f0:	e004      	b.n	800b1fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
}
 800b1fc:	bf00      	nop
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b210:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7ff fafc 	bl	800a810 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b218:	bf00      	nop
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b232:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23e:	f043 0204 	orr.w	r2, r3, #4
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b246:	68f8      	ldr	r0, [r7, #12]
 800b248:	f7ff faf6 	bl	800a838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b24c:	bf00      	nop
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <LL_ADC_IsEnabled>:
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b01      	cmp	r3, #1
 800b266:	d101      	bne.n	800b26c <LL_ADC_IsEnabled+0x18>
 800b268:	2301      	movs	r3, #1
 800b26a:	e000      	b.n	800b26e <LL_ADC_IsEnabled+0x1a>
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <LL_ADC_REG_IsConversionOngoing>:
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f003 0304 	and.w	r3, r3, #4
 800b28a:	2b04      	cmp	r3, #4
 800b28c:	d101      	bne.n	800b292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b304:	b590      	push	{r4, r7, lr}
 800b306:	b0a1      	sub	sp, #132	; 0x84
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d101      	bne.n	800b322 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b31e:	2302      	movs	r3, #2
 800b320:	e089      	b.n	800b436 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b32a:	2300      	movs	r3, #0
 800b32c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b32e:	2300      	movs	r3, #0
 800b330:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a42      	ldr	r2, [pc, #264]	; (800b440 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d102      	bne.n	800b342 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b33c:	4b41      	ldr	r3, [pc, #260]	; (800b444 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e001      	b.n	800b346 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d10b      	bne.n	800b364 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b350:	f043 0220 	orr.w	r2, r3, #32
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e068      	b.n	800b436 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff ff87 	bl	800b27a <LL_ADC_REG_IsConversionOngoing>
 800b36c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff ff81 	bl	800b27a <LL_ADC_REG_IsConversionOngoing>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d14a      	bne.n	800b414 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b380:	2b00      	cmp	r3, #0
 800b382:	d147      	bne.n	800b414 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b384:	4b30      	ldr	r3, [pc, #192]	; (800b448 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800b386:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d027      	beq.n	800b3e0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	6859      	ldr	r1, [r3, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3a2:	035b      	lsls	r3, r3, #13
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b3ac:	4824      	ldr	r0, [pc, #144]	; (800b440 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800b3ae:	f7ff ff51 	bl	800b254 <LL_ADC_IsEnabled>
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4823      	ldr	r0, [pc, #140]	; (800b444 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800b3b6:	f7ff ff4d 	bl	800b254 <LL_ADC_IsEnabled>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4323      	orrs	r3, r4
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d132      	bne.n	800b428 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b3c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b3ca:	f023 030f 	bic.w	r3, r3, #15
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	6811      	ldr	r1, [r2, #0]
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	6892      	ldr	r2, [r2, #8]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	431a      	orrs	r2, r3
 800b3da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b3de:	e023      	b.n	800b428 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b3e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b3ec:	4814      	ldr	r0, [pc, #80]	; (800b440 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800b3ee:	f7ff ff31 	bl	800b254 <LL_ADC_IsEnabled>
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	4813      	ldr	r0, [pc, #76]	; (800b444 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800b3f6:	f7ff ff2d 	bl	800b254 <LL_ADC_IsEnabled>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4323      	orrs	r3, r4
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d112      	bne.n	800b428 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800b40a:	f023 030f 	bic.w	r3, r3, #15
 800b40e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b410:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b412:	e009      	b.n	800b428 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b418:	f043 0220 	orr.w	r2, r3, #32
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b426:	e000      	b.n	800b42a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800b432:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b436:	4618      	mov	r0, r3
 800b438:	3784      	adds	r7, #132	; 0x84
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd90      	pop	{r4, r7, pc}
 800b43e:	bf00      	nop
 800b440:	42028000 	.word	0x42028000
 800b444:	42028100 	.word	0x42028100
 800b448:	42028300 	.word	0x42028300

0800b44c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <__NVIC_SetPriorityGrouping+0x44>)
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b468:	4013      	ands	r3, r2
 800b46a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b47c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b47e:	4a04      	ldr	r2, [pc, #16]	; (800b490 <__NVIC_SetPriorityGrouping+0x44>)
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	60d3      	str	r3, [r2, #12]
}
 800b484:	bf00      	nop
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	e000ed00 	.word	0xe000ed00

0800b494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <__NVIC_GetPriorityGrouping+0x18>)
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	0a1b      	lsrs	r3, r3, #8
 800b49e:	f003 0307 	and.w	r3, r3, #7
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	e000ed00 	.word	0xe000ed00

0800b4b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	db0b      	blt.n	800b4da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4c2:	79fb      	ldrb	r3, [r7, #7]
 800b4c4:	f003 021f 	and.w	r2, r3, #31
 800b4c8:	4907      	ldr	r1, [pc, #28]	; (800b4e8 <__NVIC_EnableIRQ+0x38>)
 800b4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ce:	095b      	lsrs	r3, r3, #5
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	fa00 f202 	lsl.w	r2, r0, r2
 800b4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b4da:	bf00      	nop
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	e000e100 	.word	0xe000e100

0800b4ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	6039      	str	r1, [r7, #0]
 800b4f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	db0a      	blt.n	800b516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	b2da      	uxtb	r2, r3
 800b504:	490c      	ldr	r1, [pc, #48]	; (800b538 <__NVIC_SetPriority+0x4c>)
 800b506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b50a:	0152      	lsls	r2, r2, #5
 800b50c:	b2d2      	uxtb	r2, r2
 800b50e:	440b      	add	r3, r1
 800b510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b514:	e00a      	b.n	800b52c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	4908      	ldr	r1, [pc, #32]	; (800b53c <__NVIC_SetPriority+0x50>)
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	f003 030f 	and.w	r3, r3, #15
 800b522:	3b04      	subs	r3, #4
 800b524:	0152      	lsls	r2, r2, #5
 800b526:	b2d2      	uxtb	r2, r2
 800b528:	440b      	add	r3, r1
 800b52a:	761a      	strb	r2, [r3, #24]
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	e000e100 	.word	0xe000e100
 800b53c:	e000ed00 	.word	0xe000ed00

0800b540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b540:	b480      	push	{r7}
 800b542:	b089      	sub	sp, #36	; 0x24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	f1c3 0307 	rsb	r3, r3, #7
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	bf28      	it	cs
 800b55e:	2303      	movcs	r3, #3
 800b560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	3303      	adds	r3, #3
 800b566:	2b06      	cmp	r3, #6
 800b568:	d902      	bls.n	800b570 <NVIC_EncodePriority+0x30>
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	3b04      	subs	r3, #4
 800b56e:	e000      	b.n	800b572 <NVIC_EncodePriority+0x32>
 800b570:	2300      	movs	r3, #0
 800b572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b574:	f04f 32ff 	mov.w	r2, #4294967295
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	fa02 f303 	lsl.w	r3, r2, r3
 800b57e:	43da      	mvns	r2, r3
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	401a      	ands	r2, r3
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b588:	f04f 31ff 	mov.w	r1, #4294967295
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	fa01 f303 	lsl.w	r3, r1, r3
 800b592:	43d9      	mvns	r1, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b598:	4313      	orrs	r3, r2
         );
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3724      	adds	r7, #36	; 0x24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff ff4c 	bl	800b44c <__NVIC_SetPriorityGrouping>
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b5ca:	f7ff ff63 	bl	800b494 <__NVIC_GetPriorityGrouping>
 800b5ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	6978      	ldr	r0, [r7, #20]
 800b5d6:	f7ff ffb3 	bl	800b540 <NVIC_EncodePriority>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff ff82 	bl	800b4ec <__NVIC_SetPriority>
}
 800b5e8:	bf00      	nop
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b5fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ff56 	bl	800b4b0 <__NVIC_EnableIRQ>
}
 800b604:	bf00      	nop
 800b606:	3708      	adds	r7, #8
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e08d      	b.n	800b73a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	4b47      	ldr	r3, [pc, #284]	; (800b744 <HAL_DMA_Init+0x138>)
 800b626:	429a      	cmp	r2, r3
 800b628:	d80f      	bhi.n	800b64a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	461a      	mov	r2, r3
 800b630:	4b45      	ldr	r3, [pc, #276]	; (800b748 <HAL_DMA_Init+0x13c>)
 800b632:	4413      	add	r3, r2
 800b634:	4a45      	ldr	r2, [pc, #276]	; (800b74c <HAL_DMA_Init+0x140>)
 800b636:	fba2 2303 	umull	r2, r3, r2, r3
 800b63a:	091b      	lsrs	r3, r3, #4
 800b63c:	009a      	lsls	r2, r3, #2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a42      	ldr	r2, [pc, #264]	; (800b750 <HAL_DMA_Init+0x144>)
 800b646:	649a      	str	r2, [r3, #72]	; 0x48
 800b648:	e00e      	b.n	800b668 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	4b40      	ldr	r3, [pc, #256]	; (800b754 <HAL_DMA_Init+0x148>)
 800b652:	4413      	add	r3, r2
 800b654:	4a3d      	ldr	r2, [pc, #244]	; (800b74c <HAL_DMA_Init+0x140>)
 800b656:	fba2 2303 	umull	r2, r3, r2, r3
 800b65a:	091b      	lsrs	r3, r3, #4
 800b65c:	009a      	lsls	r2, r3, #2
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a3c      	ldr	r2, [pc, #240]	; (800b758 <HAL_DMA_Init+0x14c>)
 800b666:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2202      	movs	r2, #2
 800b66c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800b67e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800b682:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b68c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 faf2 	bl	800bca4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6c8:	d102      	bne.n	800b6d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685a      	ldr	r2, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b6e4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d010      	beq.n	800b710 <HAL_DMA_Init+0x104>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d80c      	bhi.n	800b710 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fb12 	bl	800bd20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b70c:	605a      	str	r2, [r3, #4]
 800b70e:	e008      	b.n	800b722 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	40020407 	.word	0x40020407
 800b748:	bffdfff8 	.word	0xbffdfff8
 800b74c:	cccccccd 	.word	0xcccccccd
 800b750:	40020000 	.word	0x40020000
 800b754:	bffdfbf8 	.word	0xbffdfbf8
 800b758:	40020400 	.word	0x40020400

0800b75c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_DMA_Start_IT+0x20>
 800b778:	2302      	movs	r3, #2
 800b77a:	e066      	b.n	800b84a <HAL_DMA_Start_IT+0xee>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d155      	bne.n	800b83c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2202      	movs	r2, #2
 800b794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f022 0201 	bic.w	r2, r2, #1
 800b7ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	68b9      	ldr	r1, [r7, #8]
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f000 fa37 	bl	800bc28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d008      	beq.n	800b7d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f042 020e 	orr.w	r2, r2, #14
 800b7d0:	601a      	str	r2, [r3, #0]
 800b7d2:	e00f      	b.n	800b7f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 0204 	bic.w	r2, r2, #4
 800b7e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 020a 	orr.w	r2, r2, #10
 800b7f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d007      	beq.n	800b812 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b810:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d007      	beq.n	800b82a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b828:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f042 0201 	orr.w	r2, r2, #1
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	e005      	b.n	800b848 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b844:	2302      	movs	r3, #2
 800b846:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b852:	b480      	push	{r7}
 800b854:	b085      	sub	sp, #20
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b02      	cmp	r3, #2
 800b868:	d008      	beq.n	800b87c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2204      	movs	r2, #4
 800b86e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e040      	b.n	800b8fe <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f022 020e 	bic.w	r2, r2, #14
 800b88a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b89a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f022 0201 	bic.w	r2, r2, #1
 800b8aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b0:	f003 021c 	and.w	r2, r3, #28
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	fa01 f202 	lsl.w	r2, r1, r2
 800b8be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b8c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00c      	beq.n	800b8ec <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b8ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d005      	beq.n	800b92e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2204      	movs	r2, #4
 800b926:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	73fb      	strb	r3, [r7, #15]
 800b92c:	e047      	b.n	800b9be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f022 020e 	bic.w	r2, r2, #14
 800b93c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f022 0201 	bic.w	r2, r2, #1
 800b94c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b95c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b962:	f003 021c 	and.w	r2, r3, #28
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b96a:	2101      	movs	r1, #1
 800b96c:	fa01 f202 	lsl.w	r2, r1, r2
 800b970:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b97a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00c      	beq.n	800b99e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b98e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b992:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800b99c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	4798      	blx	r3
    }
  }
  return status;
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e4:	f003 031c 	and.w	r3, r3, #28
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	409a      	lsls	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d053      	beq.n	800ba9c <HAL_DMA_IRQHandler+0xd4>
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f003 0304 	and.w	r3, r3, #4
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d04e      	beq.n	800ba9c <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d024      	beq.n	800ba56 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba10:	f003 021c 	and.w	r2, r3, #28
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba18:	2104      	movs	r1, #4
 800ba1a:	fa01 f202 	lsl.w	r2, r1, r2
 800ba1e:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d109      	bne.n	800ba42 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 80c0 	beq.w	800bbb8 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ba40:	e0ba      	b.n	800bbb8 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f000 80b6 	beq.w	800bbb8 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ba54:	e0b0      	b.n	800bbb8 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d107      	bne.n	800ba74 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f022 0204 	bic.w	r2, r2, #4
 800ba72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba78:	f003 021c 	and.w	r2, r3, #28
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba80:	2104      	movs	r1, #4
 800ba82:	fa01 f202 	lsl.w	r2, r1, r2
 800ba86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 8093 	beq.w	800bbb8 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800ba9a:	e08d      	b.n	800bbb8 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baa0:	f003 031c 	and.w	r3, r3, #28
 800baa4:	2202      	movs	r2, #2
 800baa6:	409a      	lsls	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4013      	ands	r3, r2
 800baac:	2b00      	cmp	r3, #0
 800baae:	d04e      	beq.n	800bb4e <HAL_DMA_IRQHandler+0x186>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d049      	beq.n	800bb4e <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d018      	beq.n	800bafa <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d108      	bne.n	800bae8 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bada:	2b00      	cmp	r3, #0
 800badc:	d06e      	beq.n	800bbbc <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bae6:	e069      	b.n	800bbbc <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d065      	beq.n	800bbbc <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800baf8:	e060      	b.n	800bbbc <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0320 	and.w	r3, r3, #32
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10b      	bne.n	800bb20 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f022 020a 	bic.w	r2, r2, #10
 800bb16:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb24:	f003 021c 	and.w	r2, r3, #28
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb2c:	2102      	movs	r1, #2
 800bb2e:	fa01 f202 	lsl.w	r2, r1, r2
 800bb32:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d03b      	beq.n	800bbbc <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bb4c:	e036      	b.n	800bbbc <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb52:	f003 031c 	and.w	r3, r3, #28
 800bb56:	2208      	movs	r2, #8
 800bb58:	409a      	lsls	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d02e      	beq.n	800bbc0 <HAL_DMA_IRQHandler+0x1f8>
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	f003 0308 	and.w	r3, r3, #8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d029      	beq.n	800bbc0 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f022 020e 	bic.w	r2, r2, #14
 800bb7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb80:	f003 021c 	and.w	r2, r3, #28
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb88:	2101      	movs	r1, #1
 800bb8a:	fa01 f202 	lsl.w	r2, r1, r2
 800bb8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d008      	beq.n	800bbc0 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bbb6:	e002      	b.n	800bbbe <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bbb8:	bf00      	nop
 800bbba:	e000      	b.n	800bbbe <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800bbbc:	bf00      	nop
  return;
 800bbbe:	bf00      	nop
 800bbc0:	bf00      	nop
}
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d103      	bne.n	800bbe4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	72fb      	strb	r3, [r7, #11]
    return status;
 800bbe0:	7afb      	ldrb	r3, [r7, #11]
 800bbe2:	e01b      	b.n	800bc1c <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	f003 0310 	and.w	r3, r3, #16
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00d      	beq.n	800bc12 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d004      	beq.n	800bc0a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	e003      	b.n	800bc12 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bc10:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	601a      	str	r2, [r3, #0]

  return status;
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bc3e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800bc50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc56:	f003 021c 	and.w	r2, r3, #28
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc5e:	2101      	movs	r1, #1
 800bc60:	fa01 f202 	lsl.w	r2, r1, r2
 800bc64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	2b10      	cmp	r3, #16
 800bc74:	d108      	bne.n	800bc88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 800bc86:	e007      	b.n	800bc98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	60da      	str	r2, [r3, #12]
}
 800bc98:	bf00      	nop
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	4b17      	ldr	r3, [pc, #92]	; (800bd10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d80a      	bhi.n	800bcce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcbc:	089b      	lsrs	r3, r3, #2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bcc4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	6513      	str	r3, [r2, #80]	; 0x50
 800bccc:	e007      	b.n	800bcde <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd2:	089b      	lsrs	r3, r3, #2
 800bcd4:	009a      	lsls	r2, r3, #2
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bcd8:	4413      	add	r3, r2
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	3b08      	subs	r3, #8
 800bce6:	4a0c      	ldr	r2, [pc, #48]	; (800bd18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bce8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcec:	091b      	lsrs	r3, r3, #4
 800bcee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a0a      	ldr	r2, [pc, #40]	; (800bd1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bcf4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f003 031f 	and.w	r3, r3, #31
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	409a      	lsls	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	659a      	str	r2, [r3, #88]	; 0x58
}
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	40020407 	.word	0x40020407
 800bd14:	40020820 	.word	0x40020820
 800bd18:	cccccccd 	.word	0xcccccccd
 800bd1c:	40020880 	.word	0x40020880

0800bd20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	4b0b      	ldr	r3, [pc, #44]	; (800bd60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a08      	ldr	r2, [pc, #32]	; (800bd64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bd42:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	f003 0303 	and.w	r3, r3, #3
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	409a      	lsls	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bd54:	bf00      	nop
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	1000823f 	.word	0x1000823f
 800bd64:	40020940 	.word	0x40020940

0800bd68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bd76:	e158      	b.n	800c02a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	fa01 f303 	lsl.w	r3, r1, r3
 800bd84:	4013      	ands	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 814a 	beq.w	800c024 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d005      	beq.n	800bda8 <HAL_GPIO_Init+0x40>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d130      	bne.n	800be0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb8:	43db      	mvns	r3, r3
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdcc:	693a      	ldr	r2, [r7, #16]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdde:	2201      	movs	r2, #1
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	fa02 f303 	lsl.w	r3, r2, r3
 800bde6:	43db      	mvns	r3, r3
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	4013      	ands	r3, r2
 800bdec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	091b      	lsrs	r3, r3, #4
 800bdf4:	f003 0201 	and.w	r2, r3, #1
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d017      	beq.n	800be46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	2203      	movs	r2, #3
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	43db      	mvns	r3, r3
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	4013      	ands	r3, r2
 800be2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	fa02 f303 	lsl.w	r3, r2, r3
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d123      	bne.n	800be9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	08da      	lsrs	r2, r3, #3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3208      	adds	r2, #8
 800be5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	f003 0307 	and.w	r3, r3, #7
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	220f      	movs	r2, #15
 800be6a:	fa02 f303 	lsl.w	r3, r2, r3
 800be6e:	43db      	mvns	r3, r3
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4013      	ands	r3, r2
 800be74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f003 0307 	and.w	r3, r3, #7
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	fa02 f303 	lsl.w	r3, r2, r3
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	4313      	orrs	r3, r2
 800be8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	08da      	lsrs	r2, r3, #3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3208      	adds	r2, #8
 800be94:	6939      	ldr	r1, [r7, #16]
 800be96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	2203      	movs	r2, #3
 800bea6:	fa02 f303 	lsl.w	r3, r2, r3
 800beaa:	43db      	mvns	r3, r3
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	4013      	ands	r3, r2
 800beb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f003 0203 	and.w	r2, r3, #3
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 80a4 	beq.w	800c024 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800bedc:	4a5a      	ldr	r2, [pc, #360]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	089b      	lsrs	r3, r3, #2
 800bee2:	3318      	adds	r3, #24
 800bee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f003 0303 	and.w	r3, r3, #3
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	220f      	movs	r2, #15
 800bef4:	fa02 f303 	lsl.w	r3, r2, r3
 800bef8:	43db      	mvns	r3, r3
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	4013      	ands	r3, r2
 800befe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a52      	ldr	r2, [pc, #328]	; (800c04c <HAL_GPIO_Init+0x2e4>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d025      	beq.n	800bf54 <HAL_GPIO_Init+0x1ec>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a51      	ldr	r2, [pc, #324]	; (800c050 <HAL_GPIO_Init+0x2e8>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d01f      	beq.n	800bf50 <HAL_GPIO_Init+0x1e8>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a50      	ldr	r2, [pc, #320]	; (800c054 <HAL_GPIO_Init+0x2ec>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d019      	beq.n	800bf4c <HAL_GPIO_Init+0x1e4>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a4f      	ldr	r2, [pc, #316]	; (800c058 <HAL_GPIO_Init+0x2f0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d013      	beq.n	800bf48 <HAL_GPIO_Init+0x1e0>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a4e      	ldr	r2, [pc, #312]	; (800c05c <HAL_GPIO_Init+0x2f4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d00d      	beq.n	800bf44 <HAL_GPIO_Init+0x1dc>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a4d      	ldr	r2, [pc, #308]	; (800c060 <HAL_GPIO_Init+0x2f8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d007      	beq.n	800bf40 <HAL_GPIO_Init+0x1d8>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a4c      	ldr	r2, [pc, #304]	; (800c064 <HAL_GPIO_Init+0x2fc>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d101      	bne.n	800bf3c <HAL_GPIO_Init+0x1d4>
 800bf38:	2306      	movs	r3, #6
 800bf3a:	e00c      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf3c:	2307      	movs	r3, #7
 800bf3e:	e00a      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf40:	2305      	movs	r3, #5
 800bf42:	e008      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf44:	2304      	movs	r3, #4
 800bf46:	e006      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e004      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	e002      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf50:	2301      	movs	r3, #1
 800bf52:	e000      	b.n	800bf56 <HAL_GPIO_Init+0x1ee>
 800bf54:	2300      	movs	r3, #0
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	f002 0203 	and.w	r2, r2, #3
 800bf5c:	00d2      	lsls	r2, r2, #3
 800bf5e:	4093      	lsls	r3, r2
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800bf66:	4938      	ldr	r1, [pc, #224]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	089b      	lsrs	r3, r3, #2
 800bf6c:	3318      	adds	r3, #24
 800bf6e:	693a      	ldr	r2, [r7, #16]
 800bf70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf74:	4b34      	ldr	r3, [pc, #208]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	43db      	mvns	r3, r3
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4013      	ands	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf98:	4a2b      	ldr	r2, [pc, #172]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bf9e:	4b2a      	ldr	r3, [pc, #168]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	43db      	mvns	r3, r3
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d003      	beq.n	800bfc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bfc2:	4a21      	ldr	r2, [pc, #132]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800bfc8:	4b1f      	ldr	r3, [pc, #124]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bfca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	43db      	mvns	r3, r3
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800bfe6:	693a      	ldr	r2, [r7, #16]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bfee:	4a16      	ldr	r2, [pc, #88]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800bff6:	4b14      	ldr	r3, [pc, #80]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800bff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	43db      	mvns	r3, r3
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	4013      	ands	r3, r2
 800c006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c01c:	4a0a      	ldr	r2, [pc, #40]	; (800c048 <HAL_GPIO_Init+0x2e0>)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	3301      	adds	r3, #1
 800c028:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	fa22 f303 	lsr.w	r3, r2, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	f47f ae9f 	bne.w	800bd78 <HAL_GPIO_Init+0x10>
  }
}
 800c03a:	bf00      	nop
 800c03c:	bf00      	nop
 800c03e:	371c      	adds	r7, #28
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	4002f400 	.word	0x4002f400
 800c04c:	42020000 	.word	0x42020000
 800c050:	42020400 	.word	0x42020400
 800c054:	42020800 	.word	0x42020800
 800c058:	42020c00 	.word	0x42020c00
 800c05c:	42021000 	.word	0x42021000
 800c060:	42021400 	.word	0x42021400
 800c064:	42021800 	.word	0x42021800

0800c068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	807b      	strh	r3, [r7, #2]
 800c074:	4613      	mov	r3, r2
 800c076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c078:	787b      	ldrb	r3, [r7, #1]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c07e:	887a      	ldrh	r2, [r7, #2]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c084:	e002      	b.n	800c08c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c086:	887a      	ldrh	r2, [r7, #2]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c08c:	bf00      	nop
 800c08e:	370c      	adds	r7, #12
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c0aa:	887a      	ldrh	r2, [r7, #2]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	041a      	lsls	r2, r3, #16
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	43d9      	mvns	r1, r3
 800c0b6:	887b      	ldrh	r3, [r7, #2]
 800c0b8:	400b      	ands	r3, r1
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	619a      	str	r2, [r3, #24]
}
 800c0c0:	bf00      	nop
 800c0c2:	3714      	adds	r7, #20
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e081      	b.n	800c1e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d106      	bne.n	800c0f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7fc ff12 	bl	8008f1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2224      	movs	r2, #36	; 0x24
 800c0fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f022 0201 	bic.w	r2, r2, #1
 800c10e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c11c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c12c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d107      	bne.n	800c146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689a      	ldr	r2, [r3, #8]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c142:	609a      	str	r2, [r3, #8]
 800c144:	e006      	b.n	800c154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689a      	ldr	r2, [r3, #8]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d104      	bne.n	800c166 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68da      	ldr	r2, [r3, #12]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691a      	ldr	r2, [r3, #16]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	69d9      	ldr	r1, [r3, #28]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a1a      	ldr	r2, [r3, #32]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0201 	orr.w	r2, r2, #1
 800c1c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af02      	add	r7, sp, #8
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	607a      	str	r2, [r7, #4]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	817b      	strh	r3, [r7, #10]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b20      	cmp	r3, #32
 800c20a:	f040 80da 	bne.w	800c3c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c214:	2b01      	cmp	r3, #1
 800c216:	d101      	bne.n	800c21c <HAL_I2C_Master_Transmit+0x30>
 800c218:	2302      	movs	r3, #2
 800c21a:	e0d3      	b.n	800c3c4 <HAL_I2C_Master_Transmit+0x1d8>
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c224:	f7fd fcc4 	bl	8009bb0 <HAL_GetTick>
 800c228:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	2319      	movs	r3, #25
 800c230:	2201      	movs	r2, #1
 800c232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 f9e6 	bl	800c608 <I2C_WaitOnFlagUntilTimeout>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e0be      	b.n	800c3c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2221      	movs	r2, #33	; 0x21
 800c24a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2210      	movs	r2, #16
 800c252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	893a      	ldrh	r2, [r7, #8]
 800c266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c272:	b29b      	uxth	r3, r3
 800c274:	2bff      	cmp	r3, #255	; 0xff
 800c276:	d90e      	bls.n	800c296 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	22ff      	movs	r2, #255	; 0xff
 800c27c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c282:	b2da      	uxtb	r2, r3
 800c284:	8979      	ldrh	r1, [r7, #10]
 800c286:	4b51      	ldr	r3, [pc, #324]	; (800c3cc <HAL_I2C_Master_Transmit+0x1e0>)
 800c288:	9300      	str	r3, [sp, #0]
 800c28a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 fbf6 	bl	800ca80 <I2C_TransferConfig>
 800c294:	e06c      	b.n	800c370 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	8979      	ldrh	r1, [r7, #10]
 800c2a8:	4b48      	ldr	r3, [pc, #288]	; (800c3cc <HAL_I2C_Master_Transmit+0x1e0>)
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 fbe5 	bl	800ca80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c2b6:	e05b      	b.n	800c370 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	6a39      	ldr	r1, [r7, #32]
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f000 f9f2 	bl	800c6a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e07b      	b.n	800c3c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	781a      	ldrb	r2, [r3, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	1c5a      	adds	r2, r3, #1
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c300:	b29b      	uxth	r3, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d034      	beq.n	800c370 <HAL_I2C_Master_Transmit+0x184>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d130      	bne.n	800c370 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	2200      	movs	r2, #0
 800c316:	2180      	movs	r1, #128	; 0x80
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f000 f975 	bl	800c608 <I2C_WaitOnFlagUntilTimeout>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	e04d      	b.n	800c3c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	2bff      	cmp	r3, #255	; 0xff
 800c330:	d90e      	bls.n	800c350 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	22ff      	movs	r2, #255	; 0xff
 800c336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	8979      	ldrh	r1, [r7, #10]
 800c340:	2300      	movs	r3, #0
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f000 fb99 	bl	800ca80 <I2C_TransferConfig>
 800c34e:	e00f      	b.n	800c370 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c354:	b29a      	uxth	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	8979      	ldrh	r1, [r7, #10]
 800c362:	2300      	movs	r3, #0
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 fb88 	bl	800ca80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c374:	b29b      	uxth	r3, r3
 800c376:	2b00      	cmp	r3, #0
 800c378:	d19e      	bne.n	800c2b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	6a39      	ldr	r1, [r7, #32]
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 f9d8 	bl	800c734 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800c38a:	2301      	movs	r3, #1
 800c38c:	e01a      	b.n	800c3c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2220      	movs	r2, #32
 800c394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6859      	ldr	r1, [r3, #4]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <HAL_I2C_Master_Transmit+0x1e4>)
 800c3a2:	400b      	ands	r3, r1
 800c3a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2220      	movs	r2, #32
 800c3aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e000      	b.n	800c3c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800c3c2:	2302      	movs	r3, #2
  }
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	80002000 	.word	0x80002000
 800c3d0:	fe00e800 	.word	0xfe00e800

0800c3d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b088      	sub	sp, #32
 800c3d8:	af02      	add	r7, sp, #8
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	607a      	str	r2, [r7, #4]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	817b      	strh	r3, [r7, #10]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b20      	cmp	r3, #32
 800c3f2:	f040 80db 	bne.w	800c5ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d101      	bne.n	800c404 <HAL_I2C_Master_Receive+0x30>
 800c400:	2302      	movs	r3, #2
 800c402:	e0d4      	b.n	800c5ae <HAL_I2C_Master_Receive+0x1da>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c40c:	f7fd fbd0 	bl	8009bb0 <HAL_GetTick>
 800c410:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	2319      	movs	r3, #25
 800c418:	2201      	movs	r2, #1
 800c41a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f000 f8f2 	bl	800c608 <I2C_WaitOnFlagUntilTimeout>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e0bf      	b.n	800c5ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2222      	movs	r2, #34	; 0x22
 800c432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2210      	movs	r2, #16
 800c43a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	893a      	ldrh	r2, [r7, #8]
 800c44e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	2bff      	cmp	r3, #255	; 0xff
 800c45e:	d90e      	bls.n	800c47e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	22ff      	movs	r2, #255	; 0xff
 800c464:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	8979      	ldrh	r1, [r7, #10]
 800c46e:	4b52      	ldr	r3, [pc, #328]	; (800c5b8 <HAL_I2C_Master_Receive+0x1e4>)
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 fb02 	bl	800ca80 <I2C_TransferConfig>
 800c47c:	e06d      	b.n	800c55a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c482:	b29a      	uxth	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	8979      	ldrh	r1, [r7, #10]
 800c490:	4b49      	ldr	r3, [pc, #292]	; (800c5b8 <HAL_I2C_Master_Receive+0x1e4>)
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 faf1 	bl	800ca80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800c49e:	e05c      	b.n	800c55a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	6a39      	ldr	r1, [r7, #32]
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 f989 	bl	800c7bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e07c      	b.n	800c5ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4be:	b2d2      	uxtb	r2, r2
 800c4c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	b29a      	uxth	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d034      	beq.n	800c55a <HAL_I2C_Master_Receive+0x186>
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d130      	bne.n	800c55a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	6a3b      	ldr	r3, [r7, #32]
 800c4fe:	2200      	movs	r2, #0
 800c500:	2180      	movs	r1, #128	; 0x80
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f000 f880 	bl	800c608 <I2C_WaitOnFlagUntilTimeout>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e04d      	b.n	800c5ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c516:	b29b      	uxth	r3, r3
 800c518:	2bff      	cmp	r3, #255	; 0xff
 800c51a:	d90e      	bls.n	800c53a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	22ff      	movs	r2, #255	; 0xff
 800c520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c526:	b2da      	uxtb	r2, r3
 800c528:	8979      	ldrh	r1, [r7, #10]
 800c52a:	2300      	movs	r3, #0
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 faa4 	bl	800ca80 <I2C_TransferConfig>
 800c538:	e00f      	b.n	800c55a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c53e:	b29a      	uxth	r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	8979      	ldrh	r1, [r7, #10]
 800c54c:	2300      	movs	r3, #0
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 fa93 	bl	800ca80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c55e:	b29b      	uxth	r3, r3
 800c560:	2b00      	cmp	r3, #0
 800c562:	d19d      	bne.n	800c4a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	6a39      	ldr	r1, [r7, #32]
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 f8e3 	bl	800c734 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e01a      	b.n	800c5ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2220      	movs	r2, #32
 800c57e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6859      	ldr	r1, [r3, #4]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	4b0c      	ldr	r3, [pc, #48]	; (800c5bc <HAL_I2C_Master_Receive+0x1e8>)
 800c58c:	400b      	ands	r3, r1
 800c58e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2220      	movs	r2, #32
 800c594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	e000      	b.n	800c5ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c5ac:	2302      	movs	r3, #2
  }
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	80002400 	.word	0x80002400
 800c5bc:	fe00e800 	.word	0xfe00e800

0800c5c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	699b      	ldr	r3, [r3, #24]
 800c5ce:	f003 0302 	and.w	r3, r3, #2
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d103      	bne.n	800c5de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d007      	beq.n	800c5fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	699a      	ldr	r2, [r3, #24]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f042 0201 	orr.w	r2, r2, #1
 800c5fa:	619a      	str	r2, [r3, #24]
  }
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	603b      	str	r3, [r7, #0]
 800c614:	4613      	mov	r3, r2
 800c616:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c618:	e031      	b.n	800c67e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c620:	d02d      	beq.n	800c67e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c622:	f7fd fac5 	bl	8009bb0 <HAL_GetTick>
 800c626:	4602      	mov	r2, r0
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	683a      	ldr	r2, [r7, #0]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d302      	bcc.n	800c638 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d122      	bne.n	800c67e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	699a      	ldr	r2, [r3, #24]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	4013      	ands	r3, r2
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	429a      	cmp	r2, r3
 800c646:	bf0c      	ite	eq
 800c648:	2301      	moveq	r3, #1
 800c64a:	2300      	movne	r3, #0
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	461a      	mov	r2, r3
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	429a      	cmp	r2, r3
 800c654:	d113      	bne.n	800c67e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c65a:	f043 0220 	orr.w	r2, r3, #32
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2220      	movs	r2, #32
 800c666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800c67a:	2301      	movs	r3, #1
 800c67c:	e00f      	b.n	800c69e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	699a      	ldr	r2, [r3, #24]
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	4013      	ands	r3, r2
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	bf0c      	ite	eq
 800c68e:	2301      	moveq	r3, #1
 800c690:	2300      	movne	r3, #0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	461a      	mov	r2, r3
 800c696:	79fb      	ldrb	r3, [r7, #7]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d0be      	beq.n	800c61a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c6b2:	e033      	b.n	800c71c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	68b9      	ldr	r1, [r7, #8]
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 f901 	bl	800c8c0 <I2C_IsErrorOccurred>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e031      	b.n	800c72c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ce:	d025      	beq.n	800c71c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6d0:	f7fd fa6e 	bl	8009bb0 <HAL_GetTick>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d302      	bcc.n	800c6e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d11a      	bne.n	800c71c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d013      	beq.n	800c71c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6f8:	f043 0220 	orr.w	r2, r3, #32
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2220      	movs	r2, #32
 800c704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e007      	b.n	800c72c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	f003 0302 	and.w	r3, r3, #2
 800c726:	2b02      	cmp	r3, #2
 800c728:	d1c4      	bne.n	800c6b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c740:	e02f      	b.n	800c7a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	68b9      	ldr	r1, [r7, #8]
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f000 f8ba 	bl	800c8c0 <I2C_IsErrorOccurred>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	e02d      	b.n	800c7b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c756:	f7fd fa2b 	bl	8009bb0 <HAL_GetTick>
 800c75a:	4602      	mov	r2, r0
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	429a      	cmp	r2, r3
 800c764:	d302      	bcc.n	800c76c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d11a      	bne.n	800c7a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	f003 0320 	and.w	r3, r3, #32
 800c776:	2b20      	cmp	r3, #32
 800c778:	d013      	beq.n	800c7a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c77e:	f043 0220 	orr.w	r2, r3, #32
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	2220      	movs	r2, #32
 800c78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e007      	b.n	800c7b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b20      	cmp	r3, #32
 800c7ae:	d1c8      	bne.n	800c742 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c7c8:	e06b      	b.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	68b9      	ldr	r1, [r7, #8]
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f000 f876 	bl	800c8c0 <I2C_IsErrorOccurred>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e069      	b.n	800c8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	f003 0320 	and.w	r3, r3, #32
 800c7e8:	2b20      	cmp	r3, #32
 800c7ea:	d138      	bne.n	800c85e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	f003 0304 	and.w	r3, r3, #4
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	d105      	bne.n	800c806 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800c802:	2300      	movs	r3, #0
 800c804:	e055      	b.n	800c8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	f003 0310 	and.w	r3, r3, #16
 800c810:	2b10      	cmp	r3, #16
 800c812:	d107      	bne.n	800c824 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2210      	movs	r2, #16
 800c81a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2204      	movs	r2, #4
 800c820:	645a      	str	r2, [r3, #68]	; 0x44
 800c822:	e002      	b.n	800c82a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2220      	movs	r2, #32
 800c830:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6859      	ldr	r1, [r3, #4]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	4b1f      	ldr	r3, [pc, #124]	; (800c8bc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800c83e:	400b      	ands	r3, r1
 800c840:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2220      	movs	r2, #32
 800c846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e029      	b.n	800c8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c85e:	f7fd f9a7 	bl	8009bb0 <HAL_GetTick>
 800c862:	4602      	mov	r2, r0
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d302      	bcc.n	800c874 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d116      	bne.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	f003 0304 	and.w	r3, r3, #4
 800c87e:	2b04      	cmp	r3, #4
 800c880:	d00f      	beq.n	800c8a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c886:	f043 0220 	orr.w	r2, r3, #32
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2220      	movs	r2, #32
 800c892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e007      	b.n	800c8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d18c      	bne.n	800c7ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	fe00e800 	.word	0xfe00e800

0800c8c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08a      	sub	sp, #40	; 0x28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	699b      	ldr	r3, [r3, #24]
 800c8d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	f003 0310 	and.w	r3, r3, #16
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d068      	beq.n	800c9be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2210      	movs	r2, #16
 800c8f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c8f4:	e049      	b.n	800c98a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fc:	d045      	beq.n	800c98a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c8fe:	f7fd f957 	bl	8009bb0 <HAL_GetTick>
 800c902:	4602      	mov	r2, r0
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d302      	bcc.n	800c914 <I2C_IsErrorOccurred+0x54>
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d13a      	bne.n	800c98a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c91e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c926:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c936:	d121      	bne.n	800c97c <I2C_IsErrorOccurred+0xbc>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c93e:	d01d      	beq.n	800c97c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c940:	7cfb      	ldrb	r3, [r7, #19]
 800c942:	2b20      	cmp	r3, #32
 800c944:	d01a      	beq.n	800c97c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c954:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c956:	f7fd f92b 	bl	8009bb0 <HAL_GetTick>
 800c95a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c95c:	e00e      	b.n	800c97c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c95e:	f7fd f927 	bl	8009bb0 <HAL_GetTick>
 800c962:	4602      	mov	r2, r0
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	2b19      	cmp	r3, #25
 800c96a:	d907      	bls.n	800c97c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	f043 0320 	orr.w	r3, r3, #32
 800c972:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c97a:	e006      	b.n	800c98a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	f003 0320 	and.w	r3, r3, #32
 800c986:	2b20      	cmp	r3, #32
 800c988:	d1e9      	bne.n	800c95e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	f003 0320 	and.w	r3, r3, #32
 800c994:	2b20      	cmp	r3, #32
 800c996:	d003      	beq.n	800c9a0 <I2C_IsErrorOccurred+0xe0>
 800c998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d0aa      	beq.n	800c8f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d103      	bne.n	800c9b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c9b0:	6a3b      	ldr	r3, [r7, #32]
 800c9b2:	f043 0304 	orr.w	r3, r3, #4
 800c9b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
 800c9d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00b      	beq.n	800ca0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c9f2:	6a3b      	ldr	r3, [r7, #32]
 800c9f4:	f043 0308 	orr.w	r3, r3, #8
 800c9f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00b      	beq.n	800ca2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	f043 0302 	orr.w	r3, r3, #2
 800ca1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ca2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01c      	beq.n	800ca6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f7ff fdc3 	bl	800c5c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	6859      	ldr	r1, [r3, #4]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	4b0d      	ldr	r3, [pc, #52]	; (800ca7c <I2C_IsErrorOccurred+0x1bc>)
 800ca46:	400b      	ands	r3, r1
 800ca48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	431a      	orrs	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2220      	movs	r2, #32
 800ca5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ca6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3728      	adds	r7, #40	; 0x28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	fe00e800 	.word	0xfe00e800

0800ca80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	607b      	str	r3, [r7, #4]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	817b      	strh	r3, [r7, #10]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ca92:	897b      	ldrh	r3, [r7, #10]
 800ca94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ca98:	7a7b      	ldrb	r3, [r7, #9]
 800ca9a:	041b      	lsls	r3, r3, #16
 800ca9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800caa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800caa6:	6a3b      	ldr	r3, [r7, #32]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	0d5b      	lsrs	r3, r3, #21
 800caba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cabe:	4b08      	ldr	r3, [pc, #32]	; (800cae0 <I2C_TransferConfig+0x60>)
 800cac0:	430b      	orrs	r3, r1
 800cac2:	43db      	mvns	r3, r3
 800cac4:	ea02 0103 	and.w	r1, r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	430a      	orrs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cad2:	bf00      	nop
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	03ff63ff 	.word	0x03ff63ff

0800cae4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b20      	cmp	r3, #32
 800caf8:	d138      	bne.n	800cb6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d101      	bne.n	800cb08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cb04:	2302      	movs	r3, #2
 800cb06:	e032      	b.n	800cb6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2224      	movs	r2, #36	; 0x24
 800cb14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f022 0201 	bic.w	r2, r2, #1
 800cb26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6819      	ldr	r1, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f042 0201 	orr.w	r2, r2, #1
 800cb56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2220      	movs	r2, #32
 800cb5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	e000      	b.n	800cb6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cb6c:	2302      	movs	r3, #2
  }
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cb7a:	b480      	push	{r7}
 800cb7c:	b085      	sub	sp, #20
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b20      	cmp	r3, #32
 800cb8e:	d139      	bne.n	800cc04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d101      	bne.n	800cb9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	e033      	b.n	800cc06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2224      	movs	r2, #36	; 0x24
 800cbaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0201 	bic.w	r2, r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cbcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f042 0201 	orr.w	r2, r2, #1
 800cbee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2220      	movs	r2, #32
 800cbf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	e000      	b.n	800cc06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cc04:	2302      	movs	r3, #2
  }
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
	...

0800cc14 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800cc20:	4b0b      	ldr	r3, [pc, #44]	; (800cc50 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 0301 	and.w	r3, r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	73fb      	strb	r3, [r7, #15]
 800cc30:	e007      	b.n	800cc42 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800cc32:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f023 0204 	bic.w	r2, r3, #4
 800cc3a:	4905      	ldr	r1, [pc, #20]	; (800cc50 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	600b      	str	r3, [r1, #0]
  }

  return status;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	40030400 	.word	0x40030400

0800cc54 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800cc54:	b480      	push	{r7}
 800cc56:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800cc58:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <HAL_ICACHE_Enable+0x1c>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a04      	ldr	r2, [pc, #16]	; (800cc70 <HAL_ICACHE_Enable+0x1c>)
 800cc5e:	f043 0301 	orr.w	r3, r3, #1
 800cc62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	40030400 	.word	0x40030400

0800cc74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc76:	b08b      	sub	sp, #44	; 0x2c
 800cc78:	af06      	add	r7, sp, #24
 800cc7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e0cb      	b.n	800ce1e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d106      	bne.n	800cca0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f7fc fd10 	bl	80096c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2203      	movs	r2, #3
 800cca4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f006 fe2b 	bl	8013908 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
 800ccb6:	e040      	b.n	800cd3a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	440b      	add	r3, r1
 800ccc8:	3301      	adds	r3, #1
 800ccca:	2201      	movs	r2, #1
 800cccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4413      	add	r3, r2
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	440b      	add	r3, r1
 800ccde:	7bfa      	ldrb	r2, [r7, #15]
 800cce0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	440b      	add	r3, r1
 800ccf2:	3303      	adds	r3, #3
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ccf8:	7bfa      	ldrb	r2, [r7, #15]
 800ccfa:	6879      	ldr	r1, [r7, #4]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	4413      	add	r3, r2
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	440b      	add	r3, r1
 800cd06:	3338      	adds	r3, #56	; 0x38
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cd0c:	7bfa      	ldrb	r2, [r7, #15]
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	440b      	add	r3, r1
 800cd1a:	333c      	adds	r3, #60	; 0x3c
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cd20:	7bfa      	ldrb	r2, [r7, #15]
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	4613      	mov	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	440b      	add	r3, r1
 800cd2e:	3340      	adds	r3, #64	; 0x40
 800cd30:	2200      	movs	r2, #0
 800cd32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	3301      	adds	r3, #1
 800cd38:	73fb      	strb	r3, [r7, #15]
 800cd3a:	7bfa      	ldrb	r2, [r7, #15]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d3b9      	bcc.n	800ccb8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd44:	2300      	movs	r3, #0
 800cd46:	73fb      	strb	r3, [r7, #15]
 800cd48:	e044      	b.n	800cdd4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cd4a:	7bfa      	ldrb	r2, [r7, #15]
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	4413      	add	r3, r2
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	440b      	add	r3, r1
 800cd58:	f203 1369 	addw	r3, r3, #361	; 0x169
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cd60:	7bfa      	ldrb	r2, [r7, #15]
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	440b      	add	r3, r1
 800cd6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cd72:	7bfa      	ldrb	r2, [r7, #15]
 800cd74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cd76:	7bfa      	ldrb	r2, [r7, #15]
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	440b      	add	r3, r1
 800cd84:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800cd88:	2200      	movs	r2, #0
 800cd8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cd8c:	7bfa      	ldrb	r2, [r7, #15]
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	440b      	add	r3, r1
 800cd9a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cd9e:	2200      	movs	r2, #0
 800cda0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cda2:	7bfa      	ldrb	r2, [r7, #15]
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	4613      	mov	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	440b      	add	r3, r1
 800cdb0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cdb8:	7bfa      	ldrb	r2, [r7, #15]
 800cdba:	6879      	ldr	r1, [r7, #4]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4413      	add	r3, r2
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	440b      	add	r3, r1
 800cdc6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800cdca:	2200      	movs	r2, #0
 800cdcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
 800cdd4:	7bfa      	ldrb	r2, [r7, #15]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d3b5      	bcc.n	800cd4a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	603b      	str	r3, [r7, #0]
 800cde4:	687e      	ldr	r6, [r7, #4]
 800cde6:	466d      	mov	r5, sp
 800cde8:	f106 0410 	add.w	r4, r6, #16
 800cdec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	602b      	str	r3, [r5, #0]
 800cdf4:	1d33      	adds	r3, r6, #4
 800cdf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdf8:	6838      	ldr	r0, [r7, #0]
 800cdfa:	f006 fda0 	bl	801393e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d102      	bne.n	800ce1c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f805 	bl	800ce26 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3714      	adds	r7, #20
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b085      	sub	sp, #20
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	f043 0301 	orr.w	r3, r3, #1
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	f043 0302 	orr.w	r3, r3, #2
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
	...

0800ce7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce80:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a04      	ldr	r2, [pc, #16]	; (800ce98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ce86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce8a:	6013      	str	r3, [r2, #0]
}
 800ce8c:	bf00      	nop
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	40007000 	.word	0x40007000

0800ce9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800cea0:	4b04      	ldr	r3, [pc, #16]	; (800ceb4 <HAL_PWREx_GetVoltageRange+0x18>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	40007000 	.word	0x40007000

0800ceb8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800cec0:	4b27      	ldr	r3, [pc, #156]	; (800cf60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cec8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800ceca:	f000 f861 	bl	800cf90 <HAL_PWREx_SMPS_GetEffectiveMode>
 800cece:	4603      	mov	r3, r0
 800ced0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ced4:	d101      	bne.n	800ceda <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e03e      	b.n	800cf58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800ceda:	4b21      	ldr	r3, [pc, #132]	; (800cf60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cee6:	d101      	bne.n	800ceec <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e035      	b.n	800cf58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d101      	bne.n	800cef8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	e02f      	b.n	800cf58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800cef8:	4b19      	ldr	r3, [pc, #100]	; (800cf60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800cf00:	4917      	ldr	r1, [pc, #92]	; (800cf60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800cf08:	4b16      	ldr	r3, [pc, #88]	; (800cf64 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	095b      	lsrs	r3, r3, #5
 800cf0e:	4a16      	ldr	r2, [pc, #88]	; (800cf68 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800cf10:	fba2 2303 	umull	r2, r3, r2, r3
 800cf14:	09db      	lsrs	r3, r3, #7
 800cf16:	2232      	movs	r2, #50	; 0x32
 800cf18:	fb02 f303 	mul.w	r3, r2, r3
 800cf1c:	4a13      	ldr	r2, [pc, #76]	; (800cf6c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800cf1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf22:	08db      	lsrs	r3, r3, #3
 800cf24:	3301      	adds	r3, #1
 800cf26:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf28:	e002      	b.n	800cf30 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cf30:	4b0b      	ldr	r3, [pc, #44]	; (800cf60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf3c:	d102      	bne.n	800cf44 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1f2      	bne.n	800cf2a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cf44:	4b06      	ldr	r3, [pc, #24]	; (800cf60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf50:	d101      	bne.n	800cf56 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e000      	b.n	800cf58 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	40007000 	.word	0x40007000
 800cf64:	20000054 	.word	0x20000054
 800cf68:	0a7c5ac5 	.word	0x0a7c5ac5
 800cf6c:	cccccccd 	.word	0xcccccccd

0800cf70 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800cf70:	b480      	push	{r7}
 800cf72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <HAL_PWREx_EnableVddIO2+0x1c>)
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	4a04      	ldr	r2, [pc, #16]	; (800cf8c <HAL_PWREx_EnableVddIO2+0x1c>)
 800cf7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf7e:	6053      	str	r3, [r2, #4]
}
 800cf80:	bf00      	nop
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	40007000 	.word	0x40007000

0800cf90 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800cf96:	4b0f      	ldr	r3, [pc, #60]	; (800cfd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800cfa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfaa:	607b      	str	r3, [r7, #4]
 800cfac:	e00a      	b.n	800cfc4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800cfb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfbc:	607b      	str	r3, [r7, #4]
 800cfbe:	e001      	b.n	800cfc4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800cfc4:	687b      	ldr	r3, [r7, #4]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop
 800cfd4:	40007000 	.word	0x40007000

0800cfd8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d102      	bne.n	800cfec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	f000 bcc2 	b.w	800d970 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfec:	4b99      	ldr	r3, [pc, #612]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f003 030c 	and.w	r3, r3, #12
 800cff4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cff6:	4b97      	ldr	r3, [pc, #604]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 0310 	and.w	r3, r3, #16
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 80e9 	beq.w	800d1e0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d006      	beq.n	800d022 <HAL_RCC_OscConfig+0x4a>
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b0c      	cmp	r3, #12
 800d018:	f040 8083 	bne.w	800d122 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d17f      	bne.n	800d122 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d022:	4b8c      	ldr	r3, [pc, #560]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 0302 	and.w	r3, r3, #2
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d006      	beq.n	800d03c <HAL_RCC_OscConfig+0x64>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d102      	bne.n	800d03c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800d036:	2301      	movs	r3, #1
 800d038:	f000 bc9a 	b.w	800d970 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d040:	4b84      	ldr	r3, [pc, #528]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 0308 	and.w	r3, r3, #8
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d004      	beq.n	800d056 <HAL_RCC_OscConfig+0x7e>
 800d04c:	4b81      	ldr	r3, [pc, #516]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d054:	e005      	b.n	800d062 <HAL_RCC_OscConfig+0x8a>
 800d056:	4b7f      	ldr	r3, [pc, #508]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d05c:	091b      	lsrs	r3, r3, #4
 800d05e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d062:	4293      	cmp	r3, r2
 800d064:	d224      	bcs.n	800d0b0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 fece 	bl	800de0c <RCC_SetFlashLatencyFromMSIRange>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d002      	beq.n	800d07c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	f000 bc7a 	b.w	800d970 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d07c:	4b75      	ldr	r3, [pc, #468]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a74      	ldr	r2, [pc, #464]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d082:	f043 0308 	orr.w	r3, r3, #8
 800d086:	6013      	str	r3, [r2, #0]
 800d088:	4b72      	ldr	r3, [pc, #456]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	496f      	ldr	r1, [pc, #444]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d096:	4313      	orrs	r3, r2
 800d098:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d09a:	4b6e      	ldr	r3, [pc, #440]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	021b      	lsls	r3, r3, #8
 800d0a8:	496a      	ldr	r1, [pc, #424]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	604b      	str	r3, [r1, #4]
 800d0ae:	e026      	b.n	800d0fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d0b0:	4b68      	ldr	r3, [pc, #416]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a67      	ldr	r2, [pc, #412]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0b6:	f043 0308 	orr.w	r3, r3, #8
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	4b65      	ldr	r3, [pc, #404]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c8:	4962      	ldr	r1, [pc, #392]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d0ce:	4b61      	ldr	r3, [pc, #388]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a1b      	ldr	r3, [r3, #32]
 800d0da:	021b      	lsls	r3, r3, #8
 800d0dc:	495d      	ldr	r1, [pc, #372]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10a      	bne.n	800d0fe <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fe8d 	bl	800de0c <RCC_SetFlashLatencyFromMSIRange>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f000 bc39 	b.w	800d970 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d0fe:	f000 fe17 	bl	800dd30 <HAL_RCC_GetHCLKFreq>
 800d102:	4603      	mov	r3, r0
 800d104:	4a54      	ldr	r2, [pc, #336]	; (800d258 <HAL_RCC_OscConfig+0x280>)
 800d106:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800d108:	4b54      	ldr	r3, [pc, #336]	; (800d25c <HAL_RCC_OscConfig+0x284>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fc fb37 	bl	8009780 <HAL_InitTick>
 800d112:	4603      	mov	r3, r0
 800d114:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d060      	beq.n	800d1de <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	f000 bc27 	b.w	800d970 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d039      	beq.n	800d19e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d12a:	4b4a      	ldr	r3, [pc, #296]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a49      	ldr	r2, [pc, #292]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d130:	f043 0301 	orr.w	r3, r3, #1
 800d134:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d136:	f7fc fd3b 	bl	8009bb0 <HAL_GetTick>
 800d13a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d13c:	e00f      	b.n	800d15e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d13e:	f7fc fd37 	bl	8009bb0 <HAL_GetTick>
 800d142:	4602      	mov	r2, r0
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d908      	bls.n	800d15e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d14c:	4b41      	ldr	r3, [pc, #260]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 0302 	and.w	r3, r3, #2
 800d154:	2b00      	cmp	r3, #0
 800d156:	d102      	bne.n	800d15e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800d158:	2303      	movs	r3, #3
 800d15a:	f000 bc09 	b.w	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d15e:	4b3d      	ldr	r3, [pc, #244]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	2b00      	cmp	r3, #0
 800d168:	d0e9      	beq.n	800d13e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d16a:	4b3a      	ldr	r3, [pc, #232]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a39      	ldr	r2, [pc, #228]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d170:	f043 0308 	orr.w	r3, r3, #8
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	4b37      	ldr	r3, [pc, #220]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d182:	4934      	ldr	r1, [pc, #208]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d184:	4313      	orrs	r3, r2
 800d186:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d188:	4b32      	ldr	r3, [pc, #200]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6a1b      	ldr	r3, [r3, #32]
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	492f      	ldr	r1, [pc, #188]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	604b      	str	r3, [r1, #4]
 800d19c:	e020      	b.n	800d1e0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d19e:	4b2d      	ldr	r3, [pc, #180]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a2c      	ldr	r2, [pc, #176]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d1a4:	f023 0301 	bic.w	r3, r3, #1
 800d1a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d1aa:	f7fc fd01 	bl	8009bb0 <HAL_GetTick>
 800d1ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d1b0:	e00e      	b.n	800d1d0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d1b2:	f7fc fcfd 	bl	8009bb0 <HAL_GetTick>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d907      	bls.n	800d1d0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d1c0:	4b24      	ldr	r3, [pc, #144]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0302 	and.w	r3, r3, #2
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d001      	beq.n	800d1d0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e3cf      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d1d0:	4b20      	ldr	r3, [pc, #128]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f003 0302 	and.w	r3, r3, #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1ea      	bne.n	800d1b2 <HAL_RCC_OscConfig+0x1da>
 800d1dc:	e000      	b.n	800d1e0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d1de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 0301 	and.w	r3, r3, #1
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d07e      	beq.n	800d2ea <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2b08      	cmp	r3, #8
 800d1f0:	d005      	beq.n	800d1fe <HAL_RCC_OscConfig+0x226>
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	2b0c      	cmp	r3, #12
 800d1f6:	d10e      	bne.n	800d216 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d10b      	bne.n	800d216 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1fe:	4b15      	ldr	r3, [pc, #84]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d206:	2b00      	cmp	r3, #0
 800d208:	d06e      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x310>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d16a      	bne.n	800d2e8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e3ac      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d21e:	d106      	bne.n	800d22e <HAL_RCC_OscConfig+0x256>
 800d220:	4b0c      	ldr	r3, [pc, #48]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a0b      	ldr	r2, [pc, #44]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	e024      	b.n	800d278 <HAL_RCC_OscConfig+0x2a0>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d236:	d113      	bne.n	800d260 <HAL_RCC_OscConfig+0x288>
 800d238:	4b06      	ldr	r3, [pc, #24]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a05      	ldr	r2, [pc, #20]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d23e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	4b03      	ldr	r3, [pc, #12]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a02      	ldr	r2, [pc, #8]	; (800d254 <HAL_RCC_OscConfig+0x27c>)
 800d24a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	e012      	b.n	800d278 <HAL_RCC_OscConfig+0x2a0>
 800d252:	bf00      	nop
 800d254:	40021000 	.word	0x40021000
 800d258:	20000054 	.word	0x20000054
 800d25c:	20000058 	.word	0x20000058
 800d260:	4b8b      	ldr	r3, [pc, #556]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a8a      	ldr	r2, [pc, #552]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d26a:	6013      	str	r3, [r2, #0]
 800d26c:	4b88      	ldr	r3, [pc, #544]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a87      	ldr	r2, [pc, #540]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d019      	beq.n	800d2b4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d280:	f7fc fc96 	bl	8009bb0 <HAL_GetTick>
 800d284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d286:	e00e      	b.n	800d2a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d288:	f7fc fc92 	bl	8009bb0 <HAL_GetTick>
 800d28c:	4602      	mov	r2, r0
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	2b64      	cmp	r3, #100	; 0x64
 800d294:	d907      	bls.n	800d2a6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d296:	4b7e      	ldr	r3, [pc, #504]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d101      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e364      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d2a6:	4b7a      	ldr	r3, [pc, #488]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d0ea      	beq.n	800d288 <HAL_RCC_OscConfig+0x2b0>
 800d2b2:	e01a      	b.n	800d2ea <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2b4:	f7fc fc7c 	bl	8009bb0 <HAL_GetTick>
 800d2b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d2ba:	e00e      	b.n	800d2da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2bc:	f7fc fc78 	bl	8009bb0 <HAL_GetTick>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b64      	cmp	r3, #100	; 0x64
 800d2c8:	d907      	bls.n	800d2da <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d2ca:	4b71      	ldr	r3, [pc, #452]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	e34a      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d2da:	4b6d      	ldr	r3, [pc, #436]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1ea      	bne.n	800d2bc <HAL_RCC_OscConfig+0x2e4>
 800d2e6:	e000      	b.n	800d2ea <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 0302 	and.w	r3, r3, #2
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d06c      	beq.n	800d3d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d005      	beq.n	800d308 <HAL_RCC_OscConfig+0x330>
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b0c      	cmp	r3, #12
 800d300:	d119      	bne.n	800d336 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d116      	bne.n	800d336 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d308:	4b61      	ldr	r3, [pc, #388]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d310:	2b00      	cmp	r3, #0
 800d312:	d005      	beq.n	800d320 <HAL_RCC_OscConfig+0x348>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	e327      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d320:	4b5b      	ldr	r3, [pc, #364]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	061b      	lsls	r3, r3, #24
 800d32e:	4958      	ldr	r1, [pc, #352]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d330:	4313      	orrs	r3, r2
 800d332:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d334:	e04c      	b.n	800d3d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d029      	beq.n	800d392 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d33e:	4b54      	ldr	r3, [pc, #336]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a53      	ldr	r2, [pc, #332]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d34a:	f7fc fc31 	bl	8009bb0 <HAL_GetTick>
 800d34e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d350:	e00e      	b.n	800d370 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d352:	f7fc fc2d 	bl	8009bb0 <HAL_GetTick>
 800d356:	4602      	mov	r2, r0
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	d907      	bls.n	800d370 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d360:	4b4b      	ldr	r3, [pc, #300]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e2ff      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d370:	4b47      	ldr	r3, [pc, #284]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0ea      	beq.n	800d352 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d37c:	4b44      	ldr	r3, [pc, #272]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	061b      	lsls	r3, r3, #24
 800d38a:	4941      	ldr	r1, [pc, #260]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d38c:	4313      	orrs	r3, r2
 800d38e:	604b      	str	r3, [r1, #4]
 800d390:	e01e      	b.n	800d3d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d392:	4b3f      	ldr	r3, [pc, #252]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a3e      	ldr	r2, [pc, #248]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d39c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d39e:	f7fc fc07 	bl	8009bb0 <HAL_GetTick>
 800d3a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d3a4:	e00e      	b.n	800d3c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3a6:	f7fc fc03 	bl	8009bb0 <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d907      	bls.n	800d3c4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d3b4:	4b36      	ldr	r3, [pc, #216]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e2d5      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d3c4:	4b32      	ldr	r3, [pc, #200]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1ea      	bne.n	800d3a6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f003 0308 	and.w	r3, r3, #8
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d062      	beq.n	800d4a2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	695b      	ldr	r3, [r3, #20]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d038      	beq.n	800d456 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d108      	bne.n	800d3fe <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800d3ec:	4b28      	ldr	r3, [pc, #160]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d3ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d3f2:	4a27      	ldr	r2, [pc, #156]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d3f4:	f023 0310 	bic.w	r3, r3, #16
 800d3f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800d3fc:	e007      	b.n	800d40e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800d3fe:	4b24      	ldr	r3, [pc, #144]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d404:	4a22      	ldr	r2, [pc, #136]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d406:	f043 0310 	orr.w	r3, r3, #16
 800d40a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d40e:	4b20      	ldr	r3, [pc, #128]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d414:	4a1e      	ldr	r2, [pc, #120]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d416:	f043 0301 	orr.w	r3, r3, #1
 800d41a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d41e:	f7fc fbc7 	bl	8009bb0 <HAL_GetTick>
 800d422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d424:	e00f      	b.n	800d446 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d426:	f7fc fbc3 	bl	8009bb0 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	2b07      	cmp	r3, #7
 800d432:	d908      	bls.n	800d446 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d434:	4b16      	ldr	r3, [pc, #88]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d43a:	f003 0302 	and.w	r3, r3, #2
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e294      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d446:	4b12      	ldr	r3, [pc, #72]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d44c:	f003 0302 	and.w	r3, r3, #2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0e8      	beq.n	800d426 <HAL_RCC_OscConfig+0x44e>
 800d454:	e025      	b.n	800d4a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d456:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d45c:	4a0c      	ldr	r2, [pc, #48]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d45e:	f023 0301 	bic.w	r3, r3, #1
 800d462:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d466:	f7fc fba3 	bl	8009bb0 <HAL_GetTick>
 800d46a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d46c:	e012      	b.n	800d494 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d46e:	f7fc fb9f 	bl	8009bb0 <HAL_GetTick>
 800d472:	4602      	mov	r2, r0
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	2b07      	cmp	r3, #7
 800d47a:	d90b      	bls.n	800d494 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d47c:	4b04      	ldr	r3, [pc, #16]	; (800d490 <HAL_RCC_OscConfig+0x4b8>)
 800d47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d482:	f003 0302 	and.w	r3, r3, #2
 800d486:	2b00      	cmp	r3, #0
 800d488:	d004      	beq.n	800d494 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e270      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
 800d48e:	bf00      	nop
 800d490:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d494:	4ba8      	ldr	r3, [pc, #672]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d49a:	f003 0302 	and.w	r3, r3, #2
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e5      	bne.n	800d46e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 812d 	beq.w	800d70a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800d4b4:	4ba0      	ldr	r3, [pc, #640]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10d      	bne.n	800d4dc <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4c0:	4b9d      	ldr	r3, [pc, #628]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4c4:	4a9c      	ldr	r2, [pc, #624]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d4c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4ca:	6593      	str	r3, [r2, #88]	; 0x58
 800d4cc:	4b9a      	ldr	r3, [pc, #616]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4d4:	60bb      	str	r3, [r7, #8]
 800d4d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d4dc:	4b97      	ldr	r3, [pc, #604]	; (800d73c <HAL_RCC_OscConfig+0x764>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d11e      	bne.n	800d526 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4e8:	4b94      	ldr	r3, [pc, #592]	; (800d73c <HAL_RCC_OscConfig+0x764>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a93      	ldr	r2, [pc, #588]	; (800d73c <HAL_RCC_OscConfig+0x764>)
 800d4ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d4f4:	f7fc fb5c 	bl	8009bb0 <HAL_GetTick>
 800d4f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d4fa:	e00e      	b.n	800d51a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d4fc:	f7fc fb58 	bl	8009bb0 <HAL_GetTick>
 800d500:	4602      	mov	r2, r0
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	2b02      	cmp	r3, #2
 800d508:	d907      	bls.n	800d51a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d50a:	4b8c      	ldr	r3, [pc, #560]	; (800d73c <HAL_RCC_OscConfig+0x764>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d516:	2303      	movs	r3, #3
 800d518:	e22a      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d51a:	4b88      	ldr	r3, [pc, #544]	; (800d73c <HAL_RCC_OscConfig+0x764>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0ea      	beq.n	800d4fc <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d01f      	beq.n	800d572 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f003 0304 	and.w	r3, r3, #4
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d010      	beq.n	800d560 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d53e:	4b7e      	ldr	r3, [pc, #504]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d544:	4a7c      	ldr	r2, [pc, #496]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d546:	f043 0304 	orr.w	r3, r3, #4
 800d54a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d54e:	4b7a      	ldr	r3, [pc, #488]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d554:	4a78      	ldr	r2, [pc, #480]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d556:	f043 0301 	orr.w	r3, r3, #1
 800d55a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d55e:	e018      	b.n	800d592 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d560:	4b75      	ldr	r3, [pc, #468]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d566:	4a74      	ldr	r2, [pc, #464]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d568:	f043 0301 	orr.w	r3, r3, #1
 800d56c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d570:	e00f      	b.n	800d592 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d572:	4b71      	ldr	r3, [pc, #452]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d578:	4a6f      	ldr	r2, [pc, #444]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d57a:	f023 0301 	bic.w	r3, r3, #1
 800d57e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d582:	4b6d      	ldr	r3, [pc, #436]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d588:	4a6b      	ldr	r2, [pc, #428]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d58a:	f023 0304 	bic.w	r3, r3, #4
 800d58e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	689b      	ldr	r3, [r3, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d068      	beq.n	800d66c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d59a:	f7fc fb09 	bl	8009bb0 <HAL_GetTick>
 800d59e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5a0:	e011      	b.n	800d5c6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5a2:	f7fc fb05 	bl	8009bb0 <HAL_GetTick>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d908      	bls.n	800d5c6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5b4:	4b60      	ldr	r3, [pc, #384]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e1d4      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5c6:	4b5c      	ldr	r3, [pc, #368]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d0e6      	beq.n	800d5a2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d022      	beq.n	800d626 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d5e0:	4b55      	ldr	r3, [pc, #340]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5e6:	4a54      	ldr	r2, [pc, #336]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d5f0:	e011      	b.n	800d616 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5f2:	f7fc fadd 	bl	8009bb0 <HAL_GetTick>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d600:	4293      	cmp	r3, r2
 800d602:	d908      	bls.n	800d616 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d604:	4b4c      	ldr	r3, [pc, #304]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d60a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d101      	bne.n	800d616 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	e1ac      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800d616:	4b48      	ldr	r3, [pc, #288]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d620:	2b00      	cmp	r3, #0
 800d622:	d0e6      	beq.n	800d5f2 <HAL_RCC_OscConfig+0x61a>
 800d624:	e068      	b.n	800d6f8 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d626:	4b44      	ldr	r3, [pc, #272]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d62c:	4a42      	ldr	r2, [pc, #264]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d62e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d636:	e011      	b.n	800d65c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d638:	f7fc faba 	bl	8009bb0 <HAL_GetTick>
 800d63c:	4602      	mov	r2, r0
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	f241 3288 	movw	r2, #5000	; 0x1388
 800d646:	4293      	cmp	r3, r2
 800d648:	d908      	bls.n	800d65c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d64a:	4b3b      	ldr	r3, [pc, #236]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800d658:	2303      	movs	r3, #3
 800d65a:	e189      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d65c:	4b36      	ldr	r3, [pc, #216]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1e6      	bne.n	800d638 <HAL_RCC_OscConfig+0x660>
 800d66a:	e045      	b.n	800d6f8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d66c:	f7fc faa0 	bl	8009bb0 <HAL_GetTick>
 800d670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d672:	e011      	b.n	800d698 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d674:	f7fc fa9c 	bl	8009bb0 <HAL_GetTick>
 800d678:	4602      	mov	r2, r0
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	1ad3      	subs	r3, r2, r3
 800d67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d682:	4293      	cmp	r3, r2
 800d684:	d908      	bls.n	800d698 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d686:	4b2c      	ldr	r3, [pc, #176]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d68c:	f003 0302 	and.w	r3, r3, #2
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800d694:	2303      	movs	r3, #3
 800d696:	e16b      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d698:	4b27      	ldr	r3, [pc, #156]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d69e:	f003 0302 	and.w	r3, r3, #2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e6      	bne.n	800d674 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800d6a6:	4b24      	ldr	r3, [pc, #144]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d021      	beq.n	800d6f8 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800d6b4:	4b20      	ldr	r3, [pc, #128]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ba:	4a1f      	ldr	r2, [pc, #124]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d6bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d6c4:	e011      	b.n	800d6ea <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d6c6:	f7fc fa73 	bl	8009bb0 <HAL_GetTick>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d908      	bls.n	800d6ea <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d6d8:	4b17      	ldr	r3, [pc, #92]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800d6e6:	2303      	movs	r3, #3
 800d6e8:	e142      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800d6ea:	4b13      	ldr	r3, [pc, #76]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1e6      	bne.n	800d6c6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d6f8:	7ffb      	ldrb	r3, [r7, #31]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d105      	bne.n	800d70a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6fe:	4b0e      	ldr	r3, [pc, #56]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d702:	4a0d      	ldr	r2, [pc, #52]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 0320 	and.w	r3, r3, #32
 800d712:	2b00      	cmp	r3, #0
 800d714:	d04f      	beq.n	800d7b6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d028      	beq.n	800d770 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d71e:	4b06      	ldr	r3, [pc, #24]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d724:	4a04      	ldr	r2, [pc, #16]	; (800d738 <HAL_RCC_OscConfig+0x760>)
 800d726:	f043 0301 	orr.w	r3, r3, #1
 800d72a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d72e:	f7fc fa3f 	bl	8009bb0 <HAL_GetTick>
 800d732:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d734:	e014      	b.n	800d760 <HAL_RCC_OscConfig+0x788>
 800d736:	bf00      	nop
 800d738:	40021000 	.word	0x40021000
 800d73c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d740:	f7fc fa36 	bl	8009bb0 <HAL_GetTick>
 800d744:	4602      	mov	r2, r0
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d908      	bls.n	800d760 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d74e:	4b8a      	ldr	r3, [pc, #552]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d754:	f003 0302 	and.w	r3, r3, #2
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800d75c:	2303      	movs	r3, #3
 800d75e:	e107      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d760:	4b85      	ldr	r3, [pc, #532]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d766:	f003 0302 	and.w	r3, r3, #2
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d0e8      	beq.n	800d740 <HAL_RCC_OscConfig+0x768>
 800d76e:	e022      	b.n	800d7b6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d770:	4b81      	ldr	r3, [pc, #516]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d776:	4a80      	ldr	r2, [pc, #512]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d778:	f023 0301 	bic.w	r3, r3, #1
 800d77c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d780:	f7fc fa16 	bl	8009bb0 <HAL_GetTick>
 800d784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d786:	e00f      	b.n	800d7a8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d788:	f7fc fa12 	bl	8009bb0 <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	2b02      	cmp	r3, #2
 800d794:	d908      	bls.n	800d7a8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d796:	4b78      	ldr	r3, [pc, #480]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d79c:	f003 0302 	and.w	r3, r3, #2
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d001      	beq.n	800d7a8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	e0e3      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d7a8:	4b73      	ldr	r3, [pc, #460]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7ae:	f003 0302 	and.w	r3, r3, #2
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1e8      	bne.n	800d788 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 80d7 	beq.w	800d96e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d7c0:	4b6d      	ldr	r3, [pc, #436]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	f003 030c 	and.w	r3, r3, #12
 800d7c8:	2b0c      	cmp	r3, #12
 800d7ca:	f000 8091 	beq.w	800d8f0 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d166      	bne.n	800d8a4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7d6:	4b68      	ldr	r3, [pc, #416]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a67      	ldr	r2, [pc, #412]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d7dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d7e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7e2:	f7fc f9e5 	bl	8009bb0 <HAL_GetTick>
 800d7e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7e8:	e00e      	b.n	800d808 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7ea:	f7fc f9e1 	bl	8009bb0 <HAL_GetTick>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d907      	bls.n	800d808 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7f8:	4b5f      	ldr	r3, [pc, #380]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d800:	2b00      	cmp	r3, #0
 800d802:	d001      	beq.n	800d808 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800d804:	2303      	movs	r3, #3
 800d806:	e0b3      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d808:	4b5b      	ldr	r3, [pc, #364]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1ea      	bne.n	800d7ea <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d814:	4b58      	ldr	r3, [pc, #352]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d816:	68da      	ldr	r2, [r3, #12]
 800d818:	4b58      	ldr	r3, [pc, #352]	; (800d97c <HAL_RCC_OscConfig+0x9a4>)
 800d81a:	4013      	ands	r3, r2
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d824:	3a01      	subs	r2, #1
 800d826:	0112      	lsls	r2, r2, #4
 800d828:	4311      	orrs	r1, r2
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d82e:	0212      	lsls	r2, r2, #8
 800d830:	4311      	orrs	r1, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d836:	0852      	lsrs	r2, r2, #1
 800d838:	3a01      	subs	r2, #1
 800d83a:	0552      	lsls	r2, r2, #21
 800d83c:	4311      	orrs	r1, r2
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d842:	0852      	lsrs	r2, r2, #1
 800d844:	3a01      	subs	r2, #1
 800d846:	0652      	lsls	r2, r2, #25
 800d848:	4311      	orrs	r1, r2
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d84e:	06d2      	lsls	r2, r2, #27
 800d850:	430a      	orrs	r2, r1
 800d852:	4949      	ldr	r1, [pc, #292]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d854:	4313      	orrs	r3, r2
 800d856:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d858:	4b47      	ldr	r3, [pc, #284]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a46      	ldr	r2, [pc, #280]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d85e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d862:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d864:	4b44      	ldr	r3, [pc, #272]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	4a43      	ldr	r2, [pc, #268]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d86a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d86e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d870:	f7fc f99e 	bl	8009bb0 <HAL_GetTick>
 800d874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d876:	e00e      	b.n	800d896 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d878:	f7fc f99a 	bl	8009bb0 <HAL_GetTick>
 800d87c:	4602      	mov	r2, r0
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	2b02      	cmp	r3, #2
 800d884:	d907      	bls.n	800d896 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d886:	4b3c      	ldr	r3, [pc, #240]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d101      	bne.n	800d896 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e06c      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d896:	4b38      	ldr	r3, [pc, #224]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d0ea      	beq.n	800d878 <HAL_RCC_OscConfig+0x8a0>
 800d8a2:	e064      	b.n	800d96e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8a4:	4b34      	ldr	r3, [pc, #208]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a33      	ldr	r2, [pc, #204]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d8ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b0:	f7fc f97e 	bl	8009bb0 <HAL_GetTick>
 800d8b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8b6:	e00e      	b.n	800d8d6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8b8:	f7fc f97a 	bl	8009bb0 <HAL_GetTick>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d907      	bls.n	800d8d6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8c6:	4b2c      	ldr	r3, [pc, #176]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e04c      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d8d6:	4b28      	ldr	r3, [pc, #160]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1ea      	bne.n	800d8b8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800d8e2:	4b25      	ldr	r3, [pc, #148]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8e4:	68da      	ldr	r2, [r3, #12]
 800d8e6:	4924      	ldr	r1, [pc, #144]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8e8:	4b25      	ldr	r3, [pc, #148]	; (800d980 <HAL_RCC_OscConfig+0x9a8>)
 800d8ea:	4013      	ands	r3, r2
 800d8ec:	60cb      	str	r3, [r1, #12]
 800d8ee:	e03e      	b.n	800d96e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d101      	bne.n	800d8fc <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e039      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800d8fc:	4b1e      	ldr	r3, [pc, #120]	; (800d978 <HAL_RCC_OscConfig+0x9a0>)
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f003 0203 	and.w	r2, r3, #3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d12c      	bne.n	800d96a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91a:	3b01      	subs	r3, #1
 800d91c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800d91e:	429a      	cmp	r2, r3
 800d920:	d123      	bne.n	800d96a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d92e:	429a      	cmp	r2, r3
 800d930:	d11b      	bne.n	800d96a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d93c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d93e:	429a      	cmp	r2, r3
 800d940:	d113      	bne.n	800d96a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94c:	085b      	lsrs	r3, r3, #1
 800d94e:	3b01      	subs	r3, #1
 800d950:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d952:	429a      	cmp	r2, r3
 800d954:	d109      	bne.n	800d96a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d960:	085b      	lsrs	r3, r3, #1
 800d962:	3b01      	subs	r3, #1
 800d964:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d966:	429a      	cmp	r2, r3
 800d968:	d001      	beq.n	800d96e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	e000      	b.n	800d970 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3720      	adds	r7, #32
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	40021000 	.word	0x40021000
 800d97c:	019f800c 	.word	0x019f800c
 800d980:	feeefffc 	.word	0xfeeefffc

0800d984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d98e:	2300      	movs	r3, #0
 800d990:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	e11c      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d99c:	4b90      	ldr	r3, [pc, #576]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f003 030f 	and.w	r3, r3, #15
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d910      	bls.n	800d9cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9aa:	4b8d      	ldr	r3, [pc, #564]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f023 020f 	bic.w	r2, r3, #15
 800d9b2:	498b      	ldr	r1, [pc, #556]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9ba:	4b89      	ldr	r3, [pc, #548]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f003 030f 	and.w	r3, r3, #15
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d001      	beq.n	800d9cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	e104      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f003 0302 	and.w	r3, r3, #2
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d010      	beq.n	800d9fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	689a      	ldr	r2, [r3, #8]
 800d9dc:	4b81      	ldr	r3, [pc, #516]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d908      	bls.n	800d9fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9e8:	4b7e      	ldr	r3, [pc, #504]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	497b      	ldr	r1, [pc, #492]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 8085 	beq.w	800db12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	d11f      	bne.n	800da50 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800da10:	4b74      	ldr	r3, [pc, #464]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d101      	bne.n	800da20 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800da1c:	2301      	movs	r3, #1
 800da1e:	e0da      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800da20:	f000 fa58 	bl	800ded4 <RCC_GetSysClockFreqFromPLLSource>
 800da24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	4a6f      	ldr	r2, [pc, #444]	; (800dbe8 <HAL_RCC_ClockConfig+0x264>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d947      	bls.n	800dabe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800da2e:	4b6d      	ldr	r3, [pc, #436]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d141      	bne.n	800dabe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800da3a:	4b6a      	ldr	r3, [pc, #424]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da3c:	689b      	ldr	r3, [r3, #8]
 800da3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800da42:	4a68      	ldr	r2, [pc, #416]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800da4a:	2380      	movs	r3, #128	; 0x80
 800da4c:	617b      	str	r3, [r7, #20]
 800da4e:	e036      	b.n	800dabe <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	2b02      	cmp	r3, #2
 800da56:	d107      	bne.n	800da68 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800da58:	4b62      	ldr	r3, [pc, #392]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d115      	bne.n	800da90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e0b6      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d107      	bne.n	800da80 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800da70:	4b5c      	ldr	r3, [pc, #368]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f003 0302 	and.w	r3, r3, #2
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d109      	bne.n	800da90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	e0aa      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da80:	4b58      	ldr	r3, [pc, #352]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e0a2      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800da90:	f000 f8b0 	bl	800dbf4 <HAL_RCC_GetSysClockFreq>
 800da94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	4a53      	ldr	r2, [pc, #332]	; (800dbe8 <HAL_RCC_ClockConfig+0x264>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d90f      	bls.n	800dabe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800da9e:	4b51      	ldr	r3, [pc, #324]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800daaa:	4b4e      	ldr	r3, [pc, #312]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800daac:	689b      	ldr	r3, [r3, #8]
 800daae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dab2:	4a4c      	ldr	r2, [pc, #304]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800dab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dab8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800daba:	2380      	movs	r3, #128	; 0x80
 800dabc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dabe:	4b49      	ldr	r3, [pc, #292]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f023 0203 	bic.w	r2, r3, #3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	4946      	ldr	r1, [pc, #280]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800dacc:	4313      	orrs	r3, r2
 800dace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dad0:	f7fc f86e 	bl	8009bb0 <HAL_GetTick>
 800dad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dad6:	e013      	b.n	800db00 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dad8:	f7fc f86a 	bl	8009bb0 <HAL_GetTick>
 800dadc:	4602      	mov	r2, r0
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d90a      	bls.n	800db00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800daea:	4b3e      	ldr	r3, [pc, #248]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f003 020c 	and.w	r2, r3, #12
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d001      	beq.n	800db00 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e06a      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db00:	4b38      	ldr	r3, [pc, #224]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db02:	689b      	ldr	r3, [r3, #8]
 800db04:	f003 020c 	and.w	r2, r3, #12
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	429a      	cmp	r2, r3
 800db10:	d1e2      	bne.n	800dad8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b80      	cmp	r3, #128	; 0x80
 800db16:	d105      	bne.n	800db24 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800db18:	4b32      	ldr	r3, [pc, #200]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	4a31      	ldr	r2, [pc, #196]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db22:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f003 0302 	and.w	r3, r3, #2
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d010      	beq.n	800db52 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	689a      	ldr	r2, [r3, #8]
 800db34:	4b2b      	ldr	r3, [pc, #172]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d208      	bcs.n	800db52 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db40:	4b28      	ldr	r3, [pc, #160]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	4925      	ldr	r1, [pc, #148]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db4e:	4313      	orrs	r3, r2
 800db50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800db52:	4b23      	ldr	r3, [pc, #140]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f003 030f 	and.w	r3, r3, #15
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d210      	bcs.n	800db82 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db60:	4b1f      	ldr	r3, [pc, #124]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f023 020f 	bic.w	r2, r3, #15
 800db68:	491d      	ldr	r1, [pc, #116]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db70:	4b1b      	ldr	r3, [pc, #108]	; (800dbe0 <HAL_RCC_ClockConfig+0x25c>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f003 030f 	and.w	r3, r3, #15
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d001      	beq.n	800db82 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	e029      	b.n	800dbd6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 0304 	and.w	r3, r3, #4
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d008      	beq.n	800dba0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db8e:	4b15      	ldr	r3, [pc, #84]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	4912      	ldr	r1, [pc, #72]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800db9c:	4313      	orrs	r3, r2
 800db9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 0308 	and.w	r3, r3, #8
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d009      	beq.n	800dbc0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dbac:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	00db      	lsls	r3, r3, #3
 800dbba:	490a      	ldr	r1, [pc, #40]	; (800dbe4 <HAL_RCC_ClockConfig+0x260>)
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800dbc0:	f000 f8b6 	bl	800dd30 <HAL_RCC_GetHCLKFreq>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	4a09      	ldr	r2, [pc, #36]	; (800dbec <HAL_RCC_ClockConfig+0x268>)
 800dbc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800dbca:	4b09      	ldr	r3, [pc, #36]	; (800dbf0 <HAL_RCC_ClockConfig+0x26c>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fb fdd6 	bl	8009780 <HAL_InitTick>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	40022000 	.word	0x40022000
 800dbe4:	40021000 	.word	0x40021000
 800dbe8:	04c4b400 	.word	0x04c4b400
 800dbec:	20000054 	.word	0x20000054
 800dbf0:	20000058 	.word	0x20000058

0800dbf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b089      	sub	sp, #36	; 0x24
 800dbf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	61fb      	str	r3, [r7, #28]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc02:	4b47      	ldr	r3, [pc, #284]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	f003 030c 	and.w	r3, r3, #12
 800dc0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dc0c:	4b44      	ldr	r3, [pc, #272]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	f003 0303 	and.w	r3, r3, #3
 800dc14:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <HAL_RCC_GetSysClockFreq+0x34>
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	2b0c      	cmp	r3, #12
 800dc20:	d121      	bne.n	800dc66 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d11e      	bne.n	800dc66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800dc28:	4b3d      	ldr	r3, [pc, #244]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 0308 	and.w	r3, r3, #8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d107      	bne.n	800dc44 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800dc34:	4b3a      	ldr	r3, [pc, #232]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc3a:	0a1b      	lsrs	r3, r3, #8
 800dc3c:	f003 030f 	and.w	r3, r3, #15
 800dc40:	61fb      	str	r3, [r7, #28]
 800dc42:	e005      	b.n	800dc50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800dc44:	4b36      	ldr	r3, [pc, #216]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	091b      	lsrs	r3, r3, #4
 800dc4a:	f003 030f 	and.w	r3, r3, #15
 800dc4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800dc50:	4a34      	ldr	r2, [pc, #208]	; (800dd24 <HAL_RCC_GetSysClockFreq+0x130>)
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc58:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10d      	bne.n	800dc7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800dc64:	e00a      	b.n	800dc7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b04      	cmp	r3, #4
 800dc6a:	d102      	bne.n	800dc72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dc6c:	4b2e      	ldr	r3, [pc, #184]	; (800dd28 <HAL_RCC_GetSysClockFreq+0x134>)
 800dc6e:	61bb      	str	r3, [r7, #24]
 800dc70:	e004      	b.n	800dc7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	d101      	bne.n	800dc7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800dc78:	4b2c      	ldr	r3, [pc, #176]	; (800dd2c <HAL_RCC_GetSysClockFreq+0x138>)
 800dc7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	2b0c      	cmp	r3, #12
 800dc80:	d146      	bne.n	800dd10 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800dc82:	4b27      	ldr	r3, [pc, #156]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	f003 0303 	and.w	r3, r3, #3
 800dc8a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dc8c:	4b24      	ldr	r3, [pc, #144]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	091b      	lsrs	r3, r3, #4
 800dc92:	f003 030f 	and.w	r3, r3, #15
 800dc96:	3301      	adds	r3, #1
 800dc98:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2b02      	cmp	r3, #2
 800dc9e:	d003      	beq.n	800dca8 <HAL_RCC_GetSysClockFreq+0xb4>
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d00d      	beq.n	800dcc2 <HAL_RCC_GetSysClockFreq+0xce>
 800dca6:	e019      	b.n	800dcdc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dca8:	4a1f      	ldr	r2, [pc, #124]	; (800dd28 <HAL_RCC_GetSysClockFreq+0x134>)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcb0:	4a1b      	ldr	r2, [pc, #108]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dcb2:	68d2      	ldr	r2, [r2, #12]
 800dcb4:	0a12      	lsrs	r2, r2, #8
 800dcb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dcba:	fb02 f303 	mul.w	r3, r2, r3
 800dcbe:	617b      	str	r3, [r7, #20]
        break;
 800dcc0:	e019      	b.n	800dcf6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dcc2:	4a1a      	ldr	r2, [pc, #104]	; (800dd2c <HAL_RCC_GetSysClockFreq+0x138>)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcca:	4a15      	ldr	r2, [pc, #84]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dccc:	68d2      	ldr	r2, [r2, #12]
 800dcce:	0a12      	lsrs	r2, r2, #8
 800dcd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dcd4:	fb02 f303 	mul.w	r3, r2, r3
 800dcd8:	617b      	str	r3, [r7, #20]
        break;
 800dcda:	e00c      	b.n	800dcf6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dcdc:	69fa      	ldr	r2, [r7, #28]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dce4:	4a0e      	ldr	r2, [pc, #56]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dce6:	68d2      	ldr	r2, [r2, #12]
 800dce8:	0a12      	lsrs	r2, r2, #8
 800dcea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dcee:	fb02 f303 	mul.w	r3, r2, r3
 800dcf2:	617b      	str	r3, [r7, #20]
        break;
 800dcf4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800dcf6:	4b0a      	ldr	r3, [pc, #40]	; (800dd20 <HAL_RCC_GetSysClockFreq+0x12c>)
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	0e5b      	lsrs	r3, r3, #25
 800dcfc:	f003 0303 	and.w	r3, r3, #3
 800dd00:	3301      	adds	r3, #1
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800dd10:	69bb      	ldr	r3, [r7, #24]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3724      	adds	r7, #36	; 0x24
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	40021000 	.word	0x40021000
 800dd24:	08018314 	.word	0x08018314
 800dd28:	00f42400 	.word	0x00f42400
 800dd2c:	007a1200 	.word	0x007a1200

0800dd30 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800dd34:	f7ff ff5e 	bl	800dbf4 <HAL_RCC_GetSysClockFreq>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	4b05      	ldr	r3, [pc, #20]	; (800dd50 <HAL_RCC_GetHCLKFreq+0x20>)
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	091b      	lsrs	r3, r3, #4
 800dd40:	f003 030f 	and.w	r3, r3, #15
 800dd44:	4903      	ldr	r1, [pc, #12]	; (800dd54 <HAL_RCC_GetHCLKFreq+0x24>)
 800dd46:	5ccb      	ldrb	r3, [r1, r3]
 800dd48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	40021000 	.word	0x40021000
 800dd54:	080182fc 	.word	0x080182fc

0800dd58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dd5c:	f7ff ffe8 	bl	800dd30 <HAL_RCC_GetHCLKFreq>
 800dd60:	4602      	mov	r2, r0
 800dd62:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	0a1b      	lsrs	r3, r3, #8
 800dd68:	f003 0307 	and.w	r3, r3, #7
 800dd6c:	4903      	ldr	r1, [pc, #12]	; (800dd7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800dd6e:	5ccb      	ldrb	r3, [r1, r3]
 800dd70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	40021000 	.word	0x40021000
 800dd7c:	0801830c 	.word	0x0801830c

0800dd80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dd84:	f7ff ffd4 	bl	800dd30 <HAL_RCC_GetHCLKFreq>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	4b05      	ldr	r3, [pc, #20]	; (800dda0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	0adb      	lsrs	r3, r3, #11
 800dd90:	f003 0307 	and.w	r3, r3, #7
 800dd94:	4903      	ldr	r1, [pc, #12]	; (800dda4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dd96:	5ccb      	ldrb	r3, [r1, r3]
 800dd98:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	40021000 	.word	0x40021000
 800dda4:	0801830c 	.word	0x0801830c

0800dda8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	220f      	movs	r2, #15
 800ddb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ddb8:	4b12      	ldr	r3, [pc, #72]	; (800de04 <HAL_RCC_GetClockConfig+0x5c>)
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	f003 0203 	and.w	r2, r3, #3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ddc4:	4b0f      	ldr	r3, [pc, #60]	; (800de04 <HAL_RCC_GetClockConfig+0x5c>)
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ddd0:	4b0c      	ldr	r3, [pc, #48]	; (800de04 <HAL_RCC_GetClockConfig+0x5c>)
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800dddc:	4b09      	ldr	r3, [pc, #36]	; (800de04 <HAL_RCC_GetClockConfig+0x5c>)
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	08db      	lsrs	r3, r3, #3
 800dde2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ddea:	4b07      	ldr	r3, [pc, #28]	; (800de08 <HAL_RCC_GetClockConfig+0x60>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 020f 	and.w	r2, r3, #15
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	601a      	str	r2, [r3, #0]
}
 800ddf6:	bf00      	nop
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	40021000 	.word	0x40021000
 800de08:	40022000 	.word	0x40022000

0800de0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b086      	sub	sp, #24
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800de18:	4b2c      	ldr	r3, [pc, #176]	; (800decc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800de1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d003      	beq.n	800de2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800de24:	f7ff f83a 	bl	800ce9c <HAL_PWREx_GetVoltageRange>
 800de28:	6138      	str	r0, [r7, #16]
 800de2a:	e014      	b.n	800de56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800de2c:	4b27      	ldr	r3, [pc, #156]	; (800decc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800de2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de30:	4a26      	ldr	r2, [pc, #152]	; (800decc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800de32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de36:	6593      	str	r3, [r2, #88]	; 0x58
 800de38:	4b24      	ldr	r3, [pc, #144]	; (800decc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800de3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800de44:	f7ff f82a 	bl	800ce9c <HAL_PWREx_GetVoltageRange>
 800de48:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800de4a:	4b20      	ldr	r3, [pc, #128]	; (800decc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800de4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de4e:	4a1f      	ldr	r2, [pc, #124]	; (800decc <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800de50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d003      	beq.n	800de64 <RCC_SetFlashLatencyFromMSIRange+0x58>
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de62:	d10b      	bne.n	800de7c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b80      	cmp	r3, #128	; 0x80
 800de68:	d919      	bls.n	800de9e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2ba0      	cmp	r3, #160	; 0xa0
 800de6e:	d902      	bls.n	800de76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800de70:	2302      	movs	r3, #2
 800de72:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800de74:	e013      	b.n	800de9e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800de76:	2301      	movs	r3, #1
 800de78:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800de7a:	e010      	b.n	800de9e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b80      	cmp	r3, #128	; 0x80
 800de80:	d902      	bls.n	800de88 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800de82:	2303      	movs	r3, #3
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	e00a      	b.n	800de9e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b80      	cmp	r3, #128	; 0x80
 800de8c:	d102      	bne.n	800de94 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800de8e:	2302      	movs	r3, #2
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	e004      	b.n	800de9e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b70      	cmp	r3, #112	; 0x70
 800de98:	d101      	bne.n	800de9e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800de9a:	2301      	movs	r3, #1
 800de9c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f023 020f 	bic.w	r2, r3, #15
 800dea6:	490a      	ldr	r1, [pc, #40]	; (800ded0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	4313      	orrs	r3, r2
 800deac:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800deae:	4b08      	ldr	r3, [pc, #32]	; (800ded0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f003 030f 	and.w	r3, r3, #15
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d001      	beq.n	800dec0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	e000      	b.n	800dec2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3718      	adds	r7, #24
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	40021000 	.word	0x40021000
 800ded0:	40022000 	.word	0x40022000

0800ded4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800deda:	4b31      	ldr	r3, [pc, #196]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f003 0303 	and.w	r3, r3, #3
 800dee2:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dee4:	4b2e      	ldr	r3, [pc, #184]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	091b      	lsrs	r3, r3, #4
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	3301      	adds	r3, #1
 800def0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b03      	cmp	r3, #3
 800def6:	d015      	beq.n	800df24 <RCC_GetSysClockFreqFromPLLSource+0x50>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b03      	cmp	r3, #3
 800defc:	d839      	bhi.n	800df72 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d01c      	beq.n	800df3e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b02      	cmp	r3, #2
 800df08:	d133      	bne.n	800df72 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df0a:	4a26      	ldr	r2, [pc, #152]	; (800dfa4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df12:	4a23      	ldr	r2, [pc, #140]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800df14:	68d2      	ldr	r2, [r2, #12]
 800df16:	0a12      	lsrs	r2, r2, #8
 800df18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800df1c:	fb02 f303 	mul.w	r3, r2, r3
 800df20:	613b      	str	r3, [r7, #16]
      break;
 800df22:	e029      	b.n	800df78 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df24:	4a20      	ldr	r2, [pc, #128]	; (800dfa8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	fbb2 f3f3 	udiv	r3, r2, r3
 800df2c:	4a1c      	ldr	r2, [pc, #112]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800df2e:	68d2      	ldr	r2, [r2, #12]
 800df30:	0a12      	lsrs	r2, r2, #8
 800df32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800df36:	fb02 f303 	mul.w	r3, r2, r3
 800df3a:	613b      	str	r3, [r7, #16]
      break;
 800df3c:	e01c      	b.n	800df78 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800df3e:	4b18      	ldr	r3, [pc, #96]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f003 0308 	and.w	r3, r3, #8
 800df46:	2b00      	cmp	r3, #0
 800df48:	d107      	bne.n	800df5a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800df4a:	4b15      	ldr	r3, [pc, #84]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800df4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df50:	0a1b      	lsrs	r3, r3, #8
 800df52:	f003 030f 	and.w	r3, r3, #15
 800df56:	617b      	str	r3, [r7, #20]
 800df58:	e005      	b.n	800df66 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	091b      	lsrs	r3, r3, #4
 800df60:	f003 030f 	and.w	r3, r3, #15
 800df64:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800df66:	4a11      	ldr	r2, [pc, #68]	; (800dfac <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df6e:	613b      	str	r3, [r7, #16]
        break;
 800df70:	e002      	b.n	800df78 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800df72:	2300      	movs	r3, #0
 800df74:	613b      	str	r3, [r7, #16]
      break;
 800df76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800df78:	4b09      	ldr	r3, [pc, #36]	; (800dfa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	0e5b      	lsrs	r3, r3, #25
 800df7e:	f003 0303 	and.w	r3, r3, #3
 800df82:	3301      	adds	r3, #1
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800df92:	683b      	ldr	r3, [r7, #0]
}
 800df94:	4618      	mov	r0, r3
 800df96:	371c      	adds	r7, #28
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	40021000 	.word	0x40021000
 800dfa4:	00f42400 	.word	0x00f42400
 800dfa8:	007a1200 	.word	0x007a1200
 800dfac:	08018314 	.word	0x08018314

0800dfb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dfb8:	2300      	movs	r3, #0
 800dfba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d040      	beq.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfd0:	2b80      	cmp	r3, #128	; 0x80
 800dfd2:	d02a      	beq.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dfd4:	2b80      	cmp	r3, #128	; 0x80
 800dfd6:	d825      	bhi.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800dfd8:	2b60      	cmp	r3, #96	; 0x60
 800dfda:	d026      	beq.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dfdc:	2b60      	cmp	r3, #96	; 0x60
 800dfde:	d821      	bhi.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800dfe0:	2b40      	cmp	r3, #64	; 0x40
 800dfe2:	d006      	beq.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800dfe4:	2b40      	cmp	r3, #64	; 0x40
 800dfe6:	d81d      	bhi.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d009      	beq.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800dfec:	2b20      	cmp	r3, #32
 800dfee:	d010      	beq.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800dff0:	e018      	b.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800dff2:	4b8f      	ldr	r3, [pc, #572]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	4a8e      	ldr	r2, [pc, #568]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800dff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dffc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800dffe:	e015      	b.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	3304      	adds	r3, #4
 800e004:	2100      	movs	r1, #0
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fb56 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e00c:	4603      	mov	r3, r0
 800e00e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e010:	e00c      	b.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	3320      	adds	r3, #32
 800e016:	2100      	movs	r1, #0
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fc33 	bl	800e884 <RCCEx_PLLSAI2_Config>
 800e01e:	4603      	mov	r3, r0
 800e020:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e022:	e003      	b.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	77fb      	strb	r3, [r7, #31]
        break;
 800e028:	e000      	b.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800e02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e02c:	7ffb      	ldrb	r3, [r7, #31]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10b      	bne.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e032:	4b7f      	ldr	r3, [pc, #508]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e034:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e038:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e040:	497b      	ldr	r1, [pc, #492]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e042:	4313      	orrs	r3, r2
 800e044:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e048:	e001      	b.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e04a:	7ffb      	ldrb	r3, [r7, #31]
 800e04c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d047      	beq.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e062:	d030      	beq.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e068:	d82a      	bhi.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e06a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e06e:	d02a      	beq.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800e070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e074:	d824      	bhi.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e07a:	d008      	beq.n	800e08e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800e07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e080:	d81e      	bhi.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00a      	beq.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800e086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e08a:	d010      	beq.n	800e0ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e08c:	e018      	b.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e08e:	4b68      	ldr	r3, [pc, #416]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	4a67      	ldr	r2, [pc, #412]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e098:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e09a:	e015      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 fb08 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e0ac:	e00c      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3320      	adds	r3, #32
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f000 fbe5 	bl	800e884 <RCCEx_PLLSAI2_Config>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800e0be:	e003      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	77fb      	strb	r3, [r7, #31]
        break;
 800e0c4:	e000      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800e0c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0c8:	7ffb      	ldrb	r3, [r7, #31]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10b      	bne.n	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e0ce:	4b58      	ldr	r3, [pc, #352]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e0d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e0d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0dc:	4954      	ldr	r1, [pc, #336]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800e0e4:	e001      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0e6:	7ffb      	ldrb	r3, [r7, #31]
 800e0e8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 80ab 	beq.w	800e24e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e0fc:	4b4c      	ldr	r3, [pc, #304]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10d      	bne.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e108:	4b49      	ldr	r3, [pc, #292]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e10c:	4a48      	ldr	r2, [pc, #288]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e112:	6593      	str	r3, [r2, #88]	; 0x58
 800e114:	4b46      	ldr	r3, [pc, #280]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e11c:	60fb      	str	r3, [r7, #12]
 800e11e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e120:	2301      	movs	r3, #1
 800e122:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e124:	4b43      	ldr	r3, [pc, #268]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a42      	ldr	r2, [pc, #264]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e12e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e130:	f7fb fd3e 	bl	8009bb0 <HAL_GetTick>
 800e134:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e136:	e00f      	b.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e138:	f7fb fd3a 	bl	8009bb0 <HAL_GetTick>
 800e13c:	4602      	mov	r2, r0
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	2b02      	cmp	r3, #2
 800e144:	d908      	bls.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e146:	4b3b      	ldr	r3, [pc, #236]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d109      	bne.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800e152:	2303      	movs	r3, #3
 800e154:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800e156:	e006      	b.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e158:	4b36      	ldr	r3, [pc, #216]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e160:	2b00      	cmp	r3, #0
 800e162:	d0e9      	beq.n	800e138 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800e164:	e000      	b.n	800e168 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800e166:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800e168:	7ffb      	ldrb	r3, [r7, #31]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d164      	bne.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e16e:	4b30      	ldr	r3, [pc, #192]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e178:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d01f      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d019      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e18c:	4b28      	ldr	r3, [pc, #160]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e196:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e198:	4b25      	ldr	r3, [pc, #148]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e19e:	4a24      	ldr	r2, [pc, #144]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e1a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e1a8:	4b21      	ldr	r3, [pc, #132]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ae:	4a20      	ldr	r2, [pc, #128]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e1b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e1b8:	4a1d      	ldr	r2, [pc, #116]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d01f      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1ca:	f7fb fcf1 	bl	8009bb0 <HAL_GetTick>
 800e1ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1d0:	e012      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1d2:	f7fb fced 	bl	8009bb0 <HAL_GetTick>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d909      	bls.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1e4:	4b12      	ldr	r3, [pc, #72]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ea:	f003 0302 	and.w	r3, r3, #2
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10a      	bne.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800e1f2:	2303      	movs	r3, #3
 800e1f4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800e1f6:	e007      	b.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1f8:	4b0d      	ldr	r3, [pc, #52]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1fe:	f003 0302 	and.w	r3, r3, #2
 800e202:	2b00      	cmp	r3, #0
 800e204:	d0e5      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e206:	e000      	b.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 800e208:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 800e20a:	7ffb      	ldrb	r3, [r7, #31]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10c      	bne.n	800e22a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e220:	4903      	ldr	r1, [pc, #12]	; (800e230 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800e222:	4313      	orrs	r3, r2
 800e224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e228:	e008      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e22a:	7ffb      	ldrb	r3, [r7, #31]
 800e22c:	77bb      	strb	r3, [r7, #30]
 800e22e:	e005      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800e230:	40021000 	.word	0x40021000
 800e234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e238:	7ffb      	ldrb	r3, [r7, #31]
 800e23a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d105      	bne.n	800e24e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e242:	4b9c      	ldr	r3, [pc, #624]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e246:	4a9b      	ldr	r2, [pc, #620]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e24c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f003 0301 	and.w	r3, r3, #1
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00a      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e25a:	4b96      	ldr	r3, [pc, #600]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e260:	f023 0203 	bic.w	r2, r3, #3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e268:	4992      	ldr	r1, [pc, #584]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e26a:	4313      	orrs	r3, r2
 800e26c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f003 0302 	and.w	r3, r3, #2
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00a      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e27c:	4b8d      	ldr	r3, [pc, #564]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e282:	f023 020c 	bic.w	r2, r3, #12
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28a:	498a      	ldr	r1, [pc, #552]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e28c:	4313      	orrs	r3, r2
 800e28e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00a      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e29e:	4b85      	ldr	r3, [pc, #532]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ac:	4981      	ldr	r1, [pc, #516]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 0308 	and.w	r3, r3, #8
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00a      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e2c0:	4b7c      	ldr	r3, [pc, #496]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ce:	4979      	ldr	r1, [pc, #484]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f003 0310 	and.w	r3, r3, #16
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00a      	beq.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e2e2:	4b74      	ldr	r3, [pc, #464]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f0:	4970      	ldr	r1, [pc, #448]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e2f2:	4313      	orrs	r3, r2
 800e2f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f003 0320 	and.w	r3, r3, #32
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e304:	4b6b      	ldr	r3, [pc, #428]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e30a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e312:	4968      	ldr	r1, [pc, #416]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e314:	4313      	orrs	r3, r2
 800e316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e326:	4b63      	ldr	r3, [pc, #396]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e32c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e334:	495f      	ldr	r1, [pc, #380]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e336:	4313      	orrs	r3, r2
 800e338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e348:	4b5a      	ldr	r3, [pc, #360]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e34e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e356:	4957      	ldr	r1, [pc, #348]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e358:	4313      	orrs	r3, r2
 800e35a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800e36a:	4b52      	ldr	r3, [pc, #328]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e378:	494e      	ldr	r1, [pc, #312]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e37a:	4313      	orrs	r3, r2
 800e37c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d031      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e394:	d00e      	beq.n	800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800e396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e39a:	d814      	bhi.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d015      	beq.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800e3a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e3a4:	d10f      	bne.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3a6:	4b43      	ldr	r3, [pc, #268]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	4a42      	ldr	r2, [pc, #264]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e3ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3b0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e3b2:	e00c      	b.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3304      	adds	r3, #4
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 f97c 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800e3c4:	e003      	b.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	77fb      	strb	r3, [r7, #31]
        break;
 800e3ca:	e000      	b.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800e3cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3ce:	7ffb      	ldrb	r3, [r7, #31]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10b      	bne.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e3d4:	4b37      	ldr	r3, [pc, #220]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3e2:	4934      	ldr	r1, [pc, #208]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e3ea:	e001      	b.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3ec:	7ffb      	ldrb	r3, [r7, #31]
 800e3ee:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00a      	beq.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e3fc:	4b2d      	ldr	r3, [pc, #180]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e40a:	492a      	ldr	r1, [pc, #168]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e40c:	4313      	orrs	r3, r2
 800e40e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00a      	beq.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e41e:	4b25      	ldr	r3, [pc, #148]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e42c:	4921      	ldr	r1, [pc, #132]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e42e:	4313      	orrs	r3, r2
 800e430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e440:	4b1c      	ldr	r3, [pc, #112]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e44e:	4919      	ldr	r1, [pc, #100]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e450:	4313      	orrs	r3, r2
 800e452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e462:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e464:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e468:	f023 0203 	bic.w	r2, r3, #3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e470:	4910      	ldr	r1, [pc, #64]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e472:	4313      	orrs	r3, r2
 800e474:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d02b      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e484:	4b0b      	ldr	r3, [pc, #44]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e48a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e492:	4908      	ldr	r1, [pc, #32]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e494:	4313      	orrs	r3, r2
 800e496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e49e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4a2:	d109      	bne.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e4a4:	4b03      	ldr	r3, [pc, #12]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	4a02      	ldr	r2, [pc, #8]	; (800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800e4aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4ae:	60d3      	str	r3, [r2, #12]
 800e4b0:	e014      	b.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800e4b2:	bf00      	nop
 800e4b4:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e4c0:	d10c      	bne.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f000 f8f5 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800e4d2:	7ffb      	ldrb	r3, [r7, #31]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800e4d8:	7ffb      	ldrb	r3, [r7, #31]
 800e4da:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d04a      	beq.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4f0:	d108      	bne.n	800e504 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800e4f2:	4b70      	ldr	r3, [pc, #448]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e4f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e4f8:	4a6e      	ldr	r2, [pc, #440]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e4fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800e502:	e012      	b.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800e504:	4b6b      	ldr	r3, [pc, #428]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e50a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e512:	4968      	ldr	r1, [pc, #416]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e514:	4313      	orrs	r3, r2
 800e516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800e51a:	4b66      	ldr	r3, [pc, #408]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e51c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e520:	4a64      	ldr	r2, [pc, #400]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e526:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e52e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e532:	d10d      	bne.n	800e550 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3304      	adds	r3, #4
 800e538:	2101      	movs	r1, #1
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 f8bc 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e540:	4603      	mov	r3, r0
 800e542:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e544:	7ffb      	ldrb	r3, [r7, #31]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d019      	beq.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800e54a:	7ffb      	ldrb	r3, [r7, #31]
 800e54c:	77bb      	strb	r3, [r7, #30]
 800e54e:	e016      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e558:	d106      	bne.n	800e568 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e55a:	4b56      	ldr	r3, [pc, #344]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	4a55      	ldr	r2, [pc, #340]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e564:	60d3      	str	r3, [r2, #12]
 800e566:	e00a      	b.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e56c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e570:	d105      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e572:	4b50      	ldr	r3, [pc, #320]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	4a4f      	ldr	r2, [pc, #316]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e57c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e586:	2b00      	cmp	r3, #0
 800e588:	d028      	beq.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e58a:	4b4a      	ldr	r3, [pc, #296]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e590:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e598:	4946      	ldr	r1, [pc, #280]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e59a:	4313      	orrs	r3, r2
 800e59c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e5a8:	d106      	bne.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e5aa:	4b42      	ldr	r3, [pc, #264]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	4a41      	ldr	r2, [pc, #260]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e5b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5b4:	60d3      	str	r3, [r2, #12]
 800e5b6:	e011      	b.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e5c0:	d10c      	bne.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 f875 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e5d2:	7ffb      	ldrb	r3, [r7, #31]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d001      	beq.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800e5d8:	7ffb      	ldrb	r3, [r7, #31]
 800e5da:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d01e      	beq.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e5e8:	4b32      	ldr	r3, [pc, #200]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5f8:	492e      	ldr	r1, [pc, #184]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e60a:	d10c      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3304      	adds	r3, #4
 800e610:	2102      	movs	r1, #2
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f850 	bl	800e6b8 <RCCEx_PLLSAI1_Config>
 800e618:	4603      	mov	r3, r0
 800e61a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e61c:	7ffb      	ldrb	r3, [r7, #31]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d001      	beq.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800e622:	7ffb      	ldrb	r3, [r7, #31]
 800e624:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d00b      	beq.n	800e64a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e632:	4b20      	ldr	r3, [pc, #128]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e638:	f023 0204 	bic.w	r2, r3, #4
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e642:	491c      	ldr	r1, [pc, #112]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e644:	4313      	orrs	r3, r2
 800e646:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00b      	beq.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e656:	4b17      	ldr	r3, [pc, #92]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e65c:	f023 0218 	bic.w	r2, r3, #24
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e666:	4913      	ldr	r1, [pc, #76]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e668:	4313      	orrs	r3, r2
 800e66a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e676:	2b00      	cmp	r3, #0
 800e678:	d017      	beq.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e67a:	4b0e      	ldr	r3, [pc, #56]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e67c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e68a:	490a      	ldr	r1, [pc, #40]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e68c:	4313      	orrs	r3, r2
 800e68e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e69c:	d105      	bne.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e69e:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	4a04      	ldr	r2, [pc, #16]	; (800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800e6a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6a8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800e6aa:	7fbb      	ldrb	r3, [r7, #30]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3720      	adds	r7, #32
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	40021000 	.word	0x40021000

0800e6b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d018      	beq.n	800e700 <RCCEx_PLLSAI1_Config+0x48>
 800e6ce:	2b03      	cmp	r3, #3
 800e6d0:	d81f      	bhi.n	800e712 <RCCEx_PLLSAI1_Config+0x5a>
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d002      	beq.n	800e6dc <RCCEx_PLLSAI1_Config+0x24>
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d009      	beq.n	800e6ee <RCCEx_PLLSAI1_Config+0x36>
 800e6da:	e01a      	b.n	800e712 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e6dc:	4b65      	ldr	r3, [pc, #404]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 0302 	and.w	r3, r3, #2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d117      	bne.n	800e718 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6ec:	e014      	b.n	800e718 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e6ee:	4b61      	ldr	r3, [pc, #388]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d110      	bne.n	800e71c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6fe:	e00d      	b.n	800e71c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800e700:	4b5c      	ldr	r3, [pc, #368]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d109      	bne.n	800e720 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800e70c:	2301      	movs	r3, #1
 800e70e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e710:	e006      	b.n	800e720 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	73fb      	strb	r3, [r7, #15]
      break;
 800e716:	e004      	b.n	800e722 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800e718:	bf00      	nop
 800e71a:	e002      	b.n	800e722 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800e71c:	bf00      	nop
 800e71e:	e000      	b.n	800e722 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800e720:	bf00      	nop
  }

  if (status == HAL_OK)
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	2b00      	cmp	r3, #0
 800e726:	f040 809f 	bne.w	800e868 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800e72a:	4b52      	ldr	r3, [pc, #328]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a51      	ldr	r2, [pc, #324]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e736:	f7fb fa3b 	bl	8009bb0 <HAL_GetTick>
 800e73a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e73c:	e00f      	b.n	800e75e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e73e:	f7fb fa37 	bl	8009bb0 <HAL_GetTick>
 800e742:	4602      	mov	r2, r0
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d908      	bls.n	800e75e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e74c:	4b49      	ldr	r3, [pc, #292]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e754:	2b00      	cmp	r3, #0
 800e756:	d009      	beq.n	800e76c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800e758:	2303      	movs	r3, #3
 800e75a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e75c:	e006      	b.n	800e76c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e75e:	4b45      	ldr	r3, [pc, #276]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1e9      	bne.n	800e73e <RCCEx_PLLSAI1_Config+0x86>
 800e76a:	e000      	b.n	800e76e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800e76c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d179      	bne.n	800e868 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d116      	bne.n	800e7a8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e77a:	4b3e      	ldr	r3, [pc, #248]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e77c:	691a      	ldr	r2, [r3, #16]
 800e77e:	4b3e      	ldr	r3, [pc, #248]	; (800e878 <RCCEx_PLLSAI1_Config+0x1c0>)
 800e780:	4013      	ands	r3, r2
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6892      	ldr	r2, [r2, #8]
 800e786:	0211      	lsls	r1, r2, #8
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	68d2      	ldr	r2, [r2, #12]
 800e78c:	06d2      	lsls	r2, r2, #27
 800e78e:	4311      	orrs	r1, r2
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	6852      	ldr	r2, [r2, #4]
 800e794:	3a01      	subs	r2, #1
 800e796:	0112      	lsls	r2, r2, #4
 800e798:	4311      	orrs	r1, r2
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	6812      	ldr	r2, [r2, #0]
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	4934      	ldr	r1, [pc, #208]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	610b      	str	r3, [r1, #16]
 800e7a6:	e033      	b.n	800e810 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d118      	bne.n	800e7e0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7ae:	4b31      	ldr	r3, [pc, #196]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e7b0:	691a      	ldr	r2, [r3, #16]
 800e7b2:	4b32      	ldr	r3, [pc, #200]	; (800e87c <RCCEx_PLLSAI1_Config+0x1c4>)
 800e7b4:	4013      	ands	r3, r2
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	6892      	ldr	r2, [r2, #8]
 800e7ba:	0211      	lsls	r1, r2, #8
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	6912      	ldr	r2, [r2, #16]
 800e7c0:	0852      	lsrs	r2, r2, #1
 800e7c2:	3a01      	subs	r2, #1
 800e7c4:	0552      	lsls	r2, r2, #21
 800e7c6:	4311      	orrs	r1, r2
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	6852      	ldr	r2, [r2, #4]
 800e7cc:	3a01      	subs	r2, #1
 800e7ce:	0112      	lsls	r2, r2, #4
 800e7d0:	4311      	orrs	r1, r2
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	6812      	ldr	r2, [r2, #0]
 800e7d6:	430a      	orrs	r2, r1
 800e7d8:	4926      	ldr	r1, [pc, #152]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	610b      	str	r3, [r1, #16]
 800e7de:	e017      	b.n	800e810 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7e0:	4b24      	ldr	r3, [pc, #144]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e7e2:	691a      	ldr	r2, [r3, #16]
 800e7e4:	4b26      	ldr	r3, [pc, #152]	; (800e880 <RCCEx_PLLSAI1_Config+0x1c8>)
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	6892      	ldr	r2, [r2, #8]
 800e7ec:	0211      	lsls	r1, r2, #8
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	6952      	ldr	r2, [r2, #20]
 800e7f2:	0852      	lsrs	r2, r2, #1
 800e7f4:	3a01      	subs	r2, #1
 800e7f6:	0652      	lsls	r2, r2, #25
 800e7f8:	4311      	orrs	r1, r2
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	6852      	ldr	r2, [r2, #4]
 800e7fe:	3a01      	subs	r2, #1
 800e800:	0112      	lsls	r2, r2, #4
 800e802:	4311      	orrs	r1, r2
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	6812      	ldr	r2, [r2, #0]
 800e808:	430a      	orrs	r2, r1
 800e80a:	491a      	ldr	r1, [pc, #104]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e80c:	4313      	orrs	r3, r2
 800e80e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800e810:	4b18      	ldr	r3, [pc, #96]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a17      	ldr	r2, [pc, #92]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e81a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e81c:	f7fb f9c8 	bl	8009bb0 <HAL_GetTick>
 800e820:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e822:	e00f      	b.n	800e844 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e824:	f7fb f9c4 	bl	8009bb0 <HAL_GetTick>
 800e828:	4602      	mov	r2, r0
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	2b02      	cmp	r3, #2
 800e830:	d908      	bls.n	800e844 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e832:	4b10      	ldr	r3, [pc, #64]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d109      	bne.n	800e852 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800e83e:	2303      	movs	r3, #3
 800e840:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800e842:	e006      	b.n	800e852 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e844:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d0e9      	beq.n	800e824 <RCCEx_PLLSAI1_Config+0x16c>
 800e850:	e000      	b.n	800e854 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 800e852:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800e854:	7bfb      	ldrb	r3, [r7, #15]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d106      	bne.n	800e868 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800e85a:	4b06      	ldr	r3, [pc, #24]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e85c:	691a      	ldr	r2, [r3, #16]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	4904      	ldr	r1, [pc, #16]	; (800e874 <RCCEx_PLLSAI1_Config+0x1bc>)
 800e864:	4313      	orrs	r3, r2
 800e866:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800e868:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	40021000 	.word	0x40021000
 800e878:	07ff800c 	.word	0x07ff800c
 800e87c:	ff9f800c 	.word	0xff9f800c
 800e880:	f9ff800c 	.word	0xf9ff800c

0800e884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e88e:	2300      	movs	r3, #0
 800e890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b03      	cmp	r3, #3
 800e898:	d018      	beq.n	800e8cc <RCCEx_PLLSAI2_Config+0x48>
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	d81f      	bhi.n	800e8de <RCCEx_PLLSAI2_Config+0x5a>
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d002      	beq.n	800e8a8 <RCCEx_PLLSAI2_Config+0x24>
 800e8a2:	2b02      	cmp	r3, #2
 800e8a4:	d009      	beq.n	800e8ba <RCCEx_PLLSAI2_Config+0x36>
 800e8a6:	e01a      	b.n	800e8de <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e8a8:	4b4a      	ldr	r3, [pc, #296]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f003 0302 	and.w	r3, r3, #2
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d117      	bne.n	800e8e4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8b8:	e014      	b.n	800e8e4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e8ba:	4b46      	ldr	r3, [pc, #280]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d110      	bne.n	800e8e8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8ca:	e00d      	b.n	800e8e8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800e8cc:	4b41      	ldr	r3, [pc, #260]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d109      	bne.n	800e8ec <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e8dc:	e006      	b.n	800e8ec <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8e2:	e004      	b.n	800e8ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800e8e4:	bf00      	nop
 800e8e6:	e002      	b.n	800e8ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800e8e8:	bf00      	nop
 800e8ea:	e000      	b.n	800e8ee <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800e8ec:	bf00      	nop
  }

  if (status == HAL_OK)
 800e8ee:	7bfb      	ldrb	r3, [r7, #15]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d169      	bne.n	800e9c8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800e8f4:	4b37      	ldr	r3, [pc, #220]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a36      	ldr	r2, [pc, #216]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e8fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e8fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e900:	f7fb f956 	bl	8009bb0 <HAL_GetTick>
 800e904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e906:	e00f      	b.n	800e928 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e908:	f7fb f952 	bl	8009bb0 <HAL_GetTick>
 800e90c:	4602      	mov	r2, r0
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	2b02      	cmp	r3, #2
 800e914:	d908      	bls.n	800e928 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e916:	4b2f      	ldr	r3, [pc, #188]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d009      	beq.n	800e936 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 800e922:	2303      	movs	r3, #3
 800e924:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e926:	e006      	b.n	800e936 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800e928:	4b2a      	ldr	r3, [pc, #168]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e9      	bne.n	800e908 <RCCEx_PLLSAI2_Config+0x84>
 800e934:	e000      	b.n	800e938 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800e936:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d144      	bne.n	800e9c8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d115      	bne.n	800e970 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800e944:	4b23      	ldr	r3, [pc, #140]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e946:	695a      	ldr	r2, [r3, #20]
 800e948:	4b23      	ldr	r3, [pc, #140]	; (800e9d8 <RCCEx_PLLSAI2_Config+0x154>)
 800e94a:	4013      	ands	r3, r2
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	6892      	ldr	r2, [r2, #8]
 800e950:	0211      	lsls	r1, r2, #8
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	68d2      	ldr	r2, [r2, #12]
 800e956:	06d2      	lsls	r2, r2, #27
 800e958:	4311      	orrs	r1, r2
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	6852      	ldr	r2, [r2, #4]
 800e95e:	3a01      	subs	r2, #1
 800e960:	0112      	lsls	r2, r2, #4
 800e962:	4311      	orrs	r1, r2
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	6812      	ldr	r2, [r2, #0]
 800e968:	430a      	orrs	r2, r1
 800e96a:	491a      	ldr	r1, [pc, #104]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e96c:	4313      	orrs	r3, r2
 800e96e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800e970:	4b18      	ldr	r3, [pc, #96]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a17      	ldr	r2, [pc, #92]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e97a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e97c:	f7fb f918 	bl	8009bb0 <HAL_GetTick>
 800e980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e982:	e00f      	b.n	800e9a4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800e984:	f7fb f914 	bl	8009bb0 <HAL_GetTick>
 800e988:	4602      	mov	r2, r0
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d908      	bls.n	800e9a4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e992:	4b10      	ldr	r3, [pc, #64]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d109      	bne.n	800e9b2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800e9a2:	e006      	b.n	800e9b2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800e9a4:	4b0b      	ldr	r3, [pc, #44]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d0e9      	beq.n	800e984 <RCCEx_PLLSAI2_Config+0x100>
 800e9b0:	e000      	b.n	800e9b4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800e9b2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800e9ba:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e9bc:	695a      	ldr	r2, [r3, #20]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	691b      	ldr	r3, [r3, #16]
 800e9c2:	4904      	ldr	r1, [pc, #16]	; (800e9d4 <RCCEx_PLLSAI2_Config+0x150>)
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800e9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	40021000 	.word	0x40021000
 800e9d8:	07ff800c 	.word	0x07ff800c

0800e9dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d066      	beq.n	800eabc <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d106      	bne.n	800ea08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fa fbda 	bl	80091bc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	f003 0310 	and.w	r3, r3, #16
 800ea1a:	2b10      	cmp	r3, #16
 800ea1c:	d045      	beq.n	800eaaa <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ea1e:	4b2a      	ldr	r3, [pc, #168]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea20:	22ca      	movs	r2, #202	; 0xca
 800ea22:	625a      	str	r2, [r3, #36]	; 0x24
 800ea24:	4b28      	ldr	r3, [pc, #160]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea26:	2253      	movs	r2, #83	; 0x53
 800ea28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 f872 	bl	800eb14 <RTC_EnterInitMode>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d121      	bne.n	800ea7e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800ea3a:	4b23      	ldr	r3, [pc, #140]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	4a22      	ldr	r2, [pc, #136]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea40:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800ea44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea48:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800ea4a:	4b1f      	ldr	r3, [pc, #124]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea4c:	699a      	ldr	r2, [r3, #24]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6859      	ldr	r1, [r3, #4]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	4319      	orrs	r1, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	699b      	ldr	r3, [r3, #24]
 800ea5c:	430b      	orrs	r3, r1
 800ea5e:	491a      	ldr	r1, [pc, #104]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea60:	4313      	orrs	r3, r2
 800ea62:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	68da      	ldr	r2, [r3, #12]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	041b      	lsls	r3, r3, #16
 800ea6e:	4916      	ldr	r1, [pc, #88]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea70:	4313      	orrs	r3, r2
 800ea72:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f881 	bl	800eb7c <RTC_ExitInitMode>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d10e      	bne.n	800eaa2 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800ea84:	4b10      	ldr	r3, [pc, #64]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a19      	ldr	r1, [r3, #32]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	69db      	ldr	r3, [r3, #28]
 800ea94:	4319      	orrs	r1, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	430b      	orrs	r3, r1
 800ea9c:	490a      	ldr	r1, [pc, #40]	; (800eac8 <HAL_RTC_Init+0xec>)
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <HAL_RTC_Init+0xec>)
 800eaa4:	22ff      	movs	r2, #255	; 0xff
 800eaa6:	625a      	str	r2, [r3, #36]	; 0x24
 800eaa8:	e001      	b.n	800eaae <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800eaae:	7bfb      	ldrb	r3, [r7, #15]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d103      	bne.n	800eabc <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800eabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	40002800 	.word	0x40002800

0800eacc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 800ead4:	4b0d      	ldr	r3, [pc, #52]	; (800eb0c <HAL_RTC_WaitForSynchro+0x40>)
 800ead6:	4a0e      	ldr	r2, [pc, #56]	; (800eb10 <HAL_RTC_WaitForSynchro+0x44>)
 800ead8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800eada:	f7fb f869 	bl	8009bb0 <HAL_GetTick>
 800eade:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800eae0:	e009      	b.n	800eaf6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800eae2:	f7fb f865 	bl	8009bb0 <HAL_GetTick>
 800eae6:	4602      	mov	r2, r0
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	1ad3      	subs	r3, r2, r3
 800eaec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eaf0:	d901      	bls.n	800eaf6 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 800eaf2:	2303      	movs	r3, #3
 800eaf4:	e006      	b.n	800eb04 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800eaf6:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <HAL_RTC_WaitForSynchro+0x40>)
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	f003 0320 	and.w	r3, r3, #32
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0ef      	beq.n	800eae2 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	40002800 	.word	0x40002800
 800eb10:	0001005c 	.word	0x0001005c

0800eb14 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800eb20:	4b15      	ldr	r3, [pc, #84]	; (800eb78 <RTC_EnterInitMode+0x64>)
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d120      	bne.n	800eb6e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800eb2c:	4b12      	ldr	r3, [pc, #72]	; (800eb78 <RTC_EnterInitMode+0x64>)
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	4a11      	ldr	r2, [pc, #68]	; (800eb78 <RTC_EnterInitMode+0x64>)
 800eb32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb36:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800eb38:	f7fb f83a 	bl	8009bb0 <HAL_GetTick>
 800eb3c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eb3e:	e00d      	b.n	800eb5c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800eb40:	f7fb f836 	bl	8009bb0 <HAL_GetTick>
 800eb44:	4602      	mov	r2, r0
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	1ad3      	subs	r3, r2, r3
 800eb4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb4e:	d905      	bls.n	800eb5c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800eb50:	2303      	movs	r3, #3
 800eb52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2203      	movs	r2, #3
 800eb58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800eb5c:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <RTC_EnterInitMode+0x64>)
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d102      	bne.n	800eb6e <RTC_EnterInitMode+0x5a>
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
 800eb6a:	2b03      	cmp	r3, #3
 800eb6c:	d1e8      	bne.n	800eb40 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800eb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	40002800 	.word	0x40002800

0800eb7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800eb88:	4b1a      	ldr	r3, [pc, #104]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	4a19      	ldr	r2, [pc, #100]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800eb8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb92:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800eb94:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800eb96:	699b      	ldr	r3, [r3, #24]
 800eb98:	f003 0320 	and.w	r3, r3, #32
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d10c      	bne.n	800ebba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff ff93 	bl	800eacc <HAL_RTC_WaitForSynchro>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01e      	beq.n	800ebea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2203      	movs	r2, #3
 800ebb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	73fb      	strb	r3, [r7, #15]
 800ebb8:	e017      	b.n	800ebea <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ebba:	4b0e      	ldr	r3, [pc, #56]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	4a0d      	ldr	r2, [pc, #52]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800ebc0:	f023 0320 	bic.w	r3, r3, #32
 800ebc4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f7ff ff80 	bl	800eacc <HAL_RTC_WaitForSynchro>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2203      	movs	r2, #3
 800ebd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ebde:	4b05      	ldr	r3, [pc, #20]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	4a04      	ldr	r2, [pc, #16]	; (800ebf4 <RTC_ExitInitMode+0x78>)
 800ebe4:	f043 0320 	orr.w	r3, r3, #32
 800ebe8:	6193      	str	r3, [r2, #24]
  }

  return status;
 800ebea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	40002800 	.word	0x40002800

0800ebf8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	490f      	ldr	r1, [pc, #60]	; (800ec48 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800ec0c:	4313      	orrs	r3, r2
 800ec0e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	689a      	ldr	r2, [r3, #8]
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	490c      	ldr	r1, [pc, #48]	; (800ec4c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800ec1e:	4b0b      	ldr	r3, [pc, #44]	; (800ec4c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	6919      	ldr	r1, [r3, #16]
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	041b      	lsls	r3, r3, #16
 800ec30:	430b      	orrs	r3, r1
 800ec32:	4906      	ldr	r1, [pc, #24]	; (800ec4c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ec34:	4313      	orrs	r3, r2
 800ec36:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	40002800 	.word	0x40002800
 800ec4c:	40003400 	.word	0x40003400

0800ec50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e095      	b.n	800ed8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d108      	bne.n	800ec7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec72:	d009      	beq.n	800ec88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	61da      	str	r2, [r3, #28]
 800ec7a:	e005      	b.n	800ec88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d106      	bne.n	800eca8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7fa fac8 	bl	8009238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2202      	movs	r2, #2
 800ecac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ecc8:	d902      	bls.n	800ecd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ecca:	2300      	movs	r3, #0
 800eccc:	60fb      	str	r3, [r7, #12]
 800ecce:	e002      	b.n	800ecd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ecd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ecde:	d007      	beq.n	800ecf0 <HAL_SPI_Init+0xa0>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ece8:	d002      	beq.n	800ecf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ed00:	431a      	orrs	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	691b      	ldr	r3, [r3, #16]
 800ed06:	f003 0302 	and.w	r3, r3, #2
 800ed0a:	431a      	orrs	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	695b      	ldr	r3, [r3, #20]
 800ed10:	f003 0301 	and.w	r3, r3, #1
 800ed14:	431a      	orrs	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed1e:	431a      	orrs	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	69db      	ldr	r3, [r3, #28]
 800ed24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a1b      	ldr	r3, [r3, #32]
 800ed2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed32:	ea42 0103 	orr.w	r1, r2, r3
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	430a      	orrs	r2, r1
 800ed44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	0c1b      	lsrs	r3, r3, #16
 800ed4c:	f003 0204 	and.w	r2, r3, #4
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed54:	f003 0310 	and.w	r3, r3, #16
 800ed58:	431a      	orrs	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed5e:	f003 0308 	and.w	r3, r3, #8
 800ed62:	431a      	orrs	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ed6c:	ea42 0103 	orr.w	r1, r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	430a      	orrs	r2, r1
 800ed7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b088      	sub	sp, #32
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	60f8      	str	r0, [r7, #12]
 800ed9e:	60b9      	str	r1, [r7, #8]
 800eda0:	603b      	str	r3, [r7, #0]
 800eda2:	4613      	mov	r3, r2
 800eda4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eda6:	2300      	movs	r3, #0
 800eda8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d101      	bne.n	800edb8 <HAL_SPI_Transmit+0x22>
 800edb4:	2302      	movs	r3, #2
 800edb6:	e158      	b.n	800f06a <HAL_SPI_Transmit+0x2d4>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800edc0:	f7fa fef6 	bl	8009bb0 <HAL_GetTick>
 800edc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800edc6:	88fb      	ldrh	r3, [r7, #6]
 800edc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d002      	beq.n	800eddc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800edd6:	2302      	movs	r3, #2
 800edd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800edda:	e13d      	b.n	800f058 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d002      	beq.n	800ede8 <HAL_SPI_Transmit+0x52>
 800ede2:	88fb      	ldrh	r3, [r7, #6]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d102      	bne.n	800edee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	77fb      	strb	r3, [r7, #31]
    goto error;
 800edec:	e134      	b.n	800f058 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2203      	movs	r2, #3
 800edf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2200      	movs	r2, #0
 800edfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	88fa      	ldrh	r2, [r7, #6]
 800ee06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	88fa      	ldrh	r2, [r7, #6]
 800ee0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2200      	movs	r2, #0
 800ee18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2200      	movs	r2, #0
 800ee28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee38:	d10f      	bne.n	800ee5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee64:	2b40      	cmp	r3, #64	; 0x40
 800ee66:	d007      	beq.n	800ee78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ee76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ee80:	d94b      	bls.n	800ef1a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d002      	beq.n	800ee90 <HAL_SPI_Transmit+0xfa>
 800ee8a:	8afb      	ldrh	r3, [r7, #22]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d13e      	bne.n	800ef0e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee94:	881a      	ldrh	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea0:	1c9a      	adds	r2, r3, #2
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeaa:	b29b      	uxth	r3, r3
 800eeac:	3b01      	subs	r3, #1
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800eeb4:	e02b      	b.n	800ef0e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	f003 0302 	and.w	r3, r3, #2
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d112      	bne.n	800eeea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec8:	881a      	ldrh	r2, [r3, #0]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed4:	1c9a      	adds	r2, r3, #2
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eede:	b29b      	uxth	r3, r3
 800eee0:	3b01      	subs	r3, #1
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eee8:	e011      	b.n	800ef0e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eeea:	f7fa fe61 	bl	8009bb0 <HAL_GetTick>
 800eeee:	4602      	mov	r2, r0
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	683a      	ldr	r2, [r7, #0]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d803      	bhi.n	800ef02 <HAL_SPI_Transmit+0x16c>
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef00:	d102      	bne.n	800ef08 <HAL_SPI_Transmit+0x172>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d102      	bne.n	800ef0e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800ef08:	2303      	movs	r3, #3
 800ef0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ef0c:	e0a4      	b.n	800f058 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1ce      	bne.n	800eeb6 <HAL_SPI_Transmit+0x120>
 800ef18:	e07c      	b.n	800f014 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d002      	beq.n	800ef28 <HAL_SPI_Transmit+0x192>
 800ef22:	8afb      	ldrh	r3, [r7, #22]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d170      	bne.n	800f00a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d912      	bls.n	800ef58 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef36:	881a      	ldrh	r2, [r3, #0]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef42:	1c9a      	adds	r2, r3, #2
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	3b02      	subs	r3, #2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef56:	e058      	b.n	800f00a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	330c      	adds	r3, #12
 800ef62:	7812      	ldrb	r2, [r2, #0]
 800ef64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef6a:	1c5a      	adds	r2, r3, #1
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	3b01      	subs	r3, #1
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ef7e:	e044      	b.n	800f00a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	689b      	ldr	r3, [r3, #8]
 800ef86:	f003 0302 	and.w	r3, r3, #2
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d12b      	bne.n	800efe6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d912      	bls.n	800efbe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef9c:	881a      	ldrh	r2, [r3, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa8:	1c9a      	adds	r2, r3, #2
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3b02      	subs	r3, #2
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800efbc:	e025      	b.n	800f00a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	330c      	adds	r3, #12
 800efc8:	7812      	ldrb	r2, [r2, #0]
 800efca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efda:	b29b      	uxth	r3, r3
 800efdc:	3b01      	subs	r3, #1
 800efde:	b29a      	uxth	r2, r3
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800efe4:	e011      	b.n	800f00a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efe6:	f7fa fde3 	bl	8009bb0 <HAL_GetTick>
 800efea:	4602      	mov	r2, r0
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	683a      	ldr	r2, [r7, #0]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d803      	bhi.n	800effe <HAL_SPI_Transmit+0x268>
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effc:	d102      	bne.n	800f004 <HAL_SPI_Transmit+0x26e>
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d102      	bne.n	800f00a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800f004:	2303      	movs	r3, #3
 800f006:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f008:	e026      	b.n	800f058 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f00e:	b29b      	uxth	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1b5      	bne.n	800ef80 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f014:	69ba      	ldr	r2, [r7, #24]
 800f016:	6839      	ldr	r1, [r7, #0]
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 fb5b 	bl	800f6d4 <SPI_EndRxTxTransaction>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2220      	movs	r2, #32
 800f028:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10a      	bne.n	800f048 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f032:	2300      	movs	r3, #0
 800f034:	613b      	str	r3, [r7, #16]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	613b      	str	r3, [r7, #16]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	613b      	str	r3, [r7, #16]
 800f046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800f050:	2301      	movs	r3, #1
 800f052:	77fb      	strb	r3, [r7, #31]
 800f054:	e000      	b.n	800f058 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800f056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f068:	7ffb      	ldrb	r3, [r7, #31]
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3720      	adds	r7, #32
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}

0800f072 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b08a      	sub	sp, #40	; 0x28
 800f076:	af00      	add	r7, sp, #0
 800f078:	60f8      	str	r0, [r7, #12]
 800f07a:	60b9      	str	r1, [r7, #8]
 800f07c:	607a      	str	r2, [r7, #4]
 800f07e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f080:	2301      	movs	r3, #1
 800f082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f090:	2b01      	cmp	r3, #1
 800f092:	d101      	bne.n	800f098 <HAL_SPI_TransmitReceive+0x26>
 800f094:	2302      	movs	r3, #2
 800f096:	e1fb      	b.n	800f490 <HAL_SPI_TransmitReceive+0x41e>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0a0:	f7fa fd86 	bl	8009bb0 <HAL_GetTick>
 800f0a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f0ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f0b4:	887b      	ldrh	r3, [r7, #2]
 800f0b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f0b8:	887b      	ldrh	r3, [r7, #2]
 800f0ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f0bc:	7efb      	ldrb	r3, [r7, #27]
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d00e      	beq.n	800f0e0 <HAL_SPI_TransmitReceive+0x6e>
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0c8:	d106      	bne.n	800f0d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	689b      	ldr	r3, [r3, #8]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d102      	bne.n	800f0d8 <HAL_SPI_TransmitReceive+0x66>
 800f0d2:	7efb      	ldrb	r3, [r7, #27]
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	d003      	beq.n	800f0e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f0d8:	2302      	movs	r3, #2
 800f0da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f0de:	e1cd      	b.n	800f47c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d005      	beq.n	800f0f2 <HAL_SPI_TransmitReceive+0x80>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d002      	beq.n	800f0f2 <HAL_SPI_TransmitReceive+0x80>
 800f0ec:	887b      	ldrh	r3, [r7, #2]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d103      	bne.n	800f0fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f0f8:	e1c0      	b.n	800f47c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f100:	b2db      	uxtb	r3, r3
 800f102:	2b04      	cmp	r3, #4
 800f104:	d003      	beq.n	800f10e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2205      	movs	r2, #5
 800f10a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2200      	movs	r2, #0
 800f112:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	887a      	ldrh	r2, [r7, #2]
 800f11e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	887a      	ldrh	r2, [r7, #2]
 800f126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	887a      	ldrh	r2, [r7, #2]
 800f134:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	887a      	ldrh	r2, [r7, #2]
 800f13a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2200      	movs	r2, #0
 800f146:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f150:	d802      	bhi.n	800f158 <HAL_SPI_TransmitReceive+0xe6>
 800f152:	8a3b      	ldrh	r3, [r7, #16]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d908      	bls.n	800f16a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	685a      	ldr	r2, [r3, #4]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f166:	605a      	str	r2, [r3, #4]
 800f168:	e007      	b.n	800f17a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	685a      	ldr	r2, [r3, #4]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f178:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f184:	2b40      	cmp	r3, #64	; 0x40
 800f186:	d007      	beq.n	800f198 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f1a0:	d97c      	bls.n	800f29c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <HAL_SPI_TransmitReceive+0x13e>
 800f1aa:	8a7b      	ldrh	r3, [r7, #18]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d169      	bne.n	800f284 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b4:	881a      	ldrh	r2, [r3, #0]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c0:	1c9a      	adds	r2, r3, #2
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f1d4:	e056      	b.n	800f284 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	f003 0302 	and.w	r3, r3, #2
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d11b      	bne.n	800f21c <HAL_SPI_TransmitReceive+0x1aa>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d016      	beq.n	800f21c <HAL_SPI_TransmitReceive+0x1aa>
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d113      	bne.n	800f21c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f8:	881a      	ldrh	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f204:	1c9a      	adds	r2, r3, #2
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f20e:	b29b      	uxth	r3, r3
 800f210:	3b01      	subs	r3, #1
 800f212:	b29a      	uxth	r2, r3
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f218:	2300      	movs	r3, #0
 800f21a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	f003 0301 	and.w	r3, r3, #1
 800f226:	2b01      	cmp	r3, #1
 800f228:	d11c      	bne.n	800f264 <HAL_SPI_TransmitReceive+0x1f2>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f230:	b29b      	uxth	r3, r3
 800f232:	2b00      	cmp	r3, #0
 800f234:	d016      	beq.n	800f264 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68da      	ldr	r2, [r3, #12]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f240:	b292      	uxth	r2, r2
 800f242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f248:	1c9a      	adds	r2, r3, #2
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f254:	b29b      	uxth	r3, r3
 800f256:	3b01      	subs	r3, #1
 800f258:	b29a      	uxth	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f260:	2301      	movs	r3, #1
 800f262:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f264:	f7fa fca4 	bl	8009bb0 <HAL_GetTick>
 800f268:	4602      	mov	r2, r0
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f270:	429a      	cmp	r2, r3
 800f272:	d807      	bhi.n	800f284 <HAL_SPI_TransmitReceive+0x212>
 800f274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27a:	d003      	beq.n	800f284 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f27c:	2303      	movs	r3, #3
 800f27e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f282:	e0fb      	b.n	800f47c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f288:	b29b      	uxth	r3, r3
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1a3      	bne.n	800f1d6 <HAL_SPI_TransmitReceive+0x164>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f294:	b29b      	uxth	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d19d      	bne.n	800f1d6 <HAL_SPI_TransmitReceive+0x164>
 800f29a:	e0df      	b.n	800f45c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d003      	beq.n	800f2ac <HAL_SPI_TransmitReceive+0x23a>
 800f2a4:	8a7b      	ldrh	r3, [r7, #18]
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	f040 80cb 	bne.w	800f442 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d912      	bls.n	800f2dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ba:	881a      	ldrh	r2, [r3, #0]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c6:	1c9a      	adds	r2, r3, #2
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	3b02      	subs	r3, #2
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f2da:	e0b2      	b.n	800f442 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	330c      	adds	r3, #12
 800f2e6:	7812      	ldrb	r2, [r2, #0]
 800f2e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ee:	1c5a      	adds	r2, r3, #1
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f302:	e09e      	b.n	800f442 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	f003 0302 	and.w	r3, r3, #2
 800f30e:	2b02      	cmp	r3, #2
 800f310:	d134      	bne.n	800f37c <HAL_SPI_TransmitReceive+0x30a>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f316:	b29b      	uxth	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d02f      	beq.n	800f37c <HAL_SPI_TransmitReceive+0x30a>
 800f31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d12c      	bne.n	800f37c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f326:	b29b      	uxth	r3, r3
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d912      	bls.n	800f352 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f330:	881a      	ldrh	r2, [r3, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f33c:	1c9a      	adds	r2, r3, #2
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f346:	b29b      	uxth	r3, r3
 800f348:	3b02      	subs	r3, #2
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f350:	e012      	b.n	800f378 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	330c      	adds	r3, #12
 800f35c:	7812      	ldrb	r2, [r2, #0]
 800f35e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f36e:	b29b      	uxth	r3, r3
 800f370:	3b01      	subs	r3, #1
 800f372:	b29a      	uxth	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f378:	2300      	movs	r3, #0
 800f37a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b01      	cmp	r3, #1
 800f388:	d148      	bne.n	800f41c <HAL_SPI_TransmitReceive+0x3aa>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f390:	b29b      	uxth	r3, r3
 800f392:	2b00      	cmp	r3, #0
 800f394:	d042      	beq.n	800f41c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d923      	bls.n	800f3ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	68da      	ldr	r2, [r3, #12]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ac:	b292      	uxth	r2, r2
 800f3ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b4:	1c9a      	adds	r2, r3, #2
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	3b02      	subs	r3, #2
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d81f      	bhi.n	800f418 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	685a      	ldr	r2, [r3, #4]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f3e6:	605a      	str	r2, [r3, #4]
 800f3e8:	e016      	b.n	800f418 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f103 020c 	add.w	r2, r3, #12
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f6:	7812      	ldrb	r2, [r2, #0]
 800f3f8:	b2d2      	uxtb	r2, r2
 800f3fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	3b01      	subs	r3, #1
 800f410:	b29a      	uxth	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f418:	2301      	movs	r3, #1
 800f41a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f41c:	f7fa fbc8 	bl	8009bb0 <HAL_GetTick>
 800f420:	4602      	mov	r2, r0
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	1ad3      	subs	r3, r2, r3
 800f426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f428:	429a      	cmp	r2, r3
 800f42a:	d803      	bhi.n	800f434 <HAL_SPI_TransmitReceive+0x3c2>
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f432:	d102      	bne.n	800f43a <HAL_SPI_TransmitReceive+0x3c8>
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	2b00      	cmp	r3, #0
 800f438:	d103      	bne.n	800f442 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f43a:	2303      	movs	r3, #3
 800f43c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f440:	e01c      	b.n	800f47c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f446:	b29b      	uxth	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f47f af5b 	bne.w	800f304 <HAL_SPI_TransmitReceive+0x292>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f454:	b29b      	uxth	r3, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	f47f af54 	bne.w	800f304 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f45c:	69fa      	ldr	r2, [r7, #28]
 800f45e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f000 f937 	bl	800f6d4 <SPI_EndRxTxTransaction>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d006      	beq.n	800f47a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f46c:	2301      	movs	r3, #1
 800f46e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2220      	movs	r2, #32
 800f476:	661a      	str	r2, [r3, #96]	; 0x60
 800f478:	e000      	b.n	800f47c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f47a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2201      	movs	r2, #1
 800f480:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f48c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f490:	4618      	mov	r0, r3
 800f492:	3728      	adds	r7, #40	; 0x28
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b088      	sub	sp, #32
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	603b      	str	r3, [r7, #0]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f4a8:	f7fa fb82 	bl	8009bb0 <HAL_GetTick>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b0:	1a9b      	subs	r3, r3, r2
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f4b8:	f7fa fb7a 	bl	8009bb0 <HAL_GetTick>
 800f4bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f4be:	4b39      	ldr	r3, [pc, #228]	; (800f5a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	015b      	lsls	r3, r3, #5
 800f4c4:	0d1b      	lsrs	r3, r3, #20
 800f4c6:	69fa      	ldr	r2, [r7, #28]
 800f4c8:	fb02 f303 	mul.w	r3, r2, r3
 800f4cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f4ce:	e054      	b.n	800f57a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d6:	d050      	beq.n	800f57a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f4d8:	f7fa fb6a 	bl	8009bb0 <HAL_GetTick>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	69fa      	ldr	r2, [r7, #28]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d902      	bls.n	800f4ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d13d      	bne.n	800f56a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685a      	ldr	r2, [r3, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f4fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f506:	d111      	bne.n	800f52c <SPI_WaitFlagStateUntilTimeout+0x94>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f510:	d004      	beq.n	800f51c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f51a:	d107      	bne.n	800f52c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f52a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f534:	d10f      	bne.n	800f556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f544:	601a      	str	r2, [r3, #0]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2201      	movs	r2, #1
 800f55a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f566:	2303      	movs	r3, #3
 800f568:	e017      	b.n	800f59a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d101      	bne.n	800f574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f570:	2300      	movs	r3, #0
 800f572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	3b01      	subs	r3, #1
 800f578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	689a      	ldr	r2, [r3, #8]
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	4013      	ands	r3, r2
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	429a      	cmp	r2, r3
 800f588:	bf0c      	ite	eq
 800f58a:	2301      	moveq	r3, #1
 800f58c:	2300      	movne	r3, #0
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	461a      	mov	r2, r3
 800f592:	79fb      	ldrb	r3, [r7, #7]
 800f594:	429a      	cmp	r2, r3
 800f596:	d19b      	bne.n	800f4d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f598:	2300      	movs	r3, #0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3720      	adds	r7, #32
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	20000054 	.word	0x20000054

0800f5a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b08a      	sub	sp, #40	; 0x28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
 800f5b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f5ba:	f7fa faf9 	bl	8009bb0 <HAL_GetTick>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c2:	1a9b      	subs	r3, r3, r2
 800f5c4:	683a      	ldr	r2, [r7, #0]
 800f5c6:	4413      	add	r3, r2
 800f5c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f5ca:	f7fa faf1 	bl	8009bb0 <HAL_GetTick>
 800f5ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	330c      	adds	r3, #12
 800f5d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f5d8:	4b3d      	ldr	r3, [pc, #244]	; (800f6d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	4413      	add	r3, r2
 800f5e2:	00da      	lsls	r2, r3, #3
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	0d1b      	lsrs	r3, r3, #20
 800f5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5ea:	fb02 f303 	mul.w	r3, r2, r3
 800f5ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f5f0:	e060      	b.n	800f6b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f5f8:	d107      	bne.n	800f60a <SPI_WaitFifoStateUntilTimeout+0x62>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d104      	bne.n	800f60a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	b2db      	uxtb	r3, r3
 800f606:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f608:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f610:	d050      	beq.n	800f6b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f612:	f7fa facd 	bl	8009bb0 <HAL_GetTick>
 800f616:	4602      	mov	r2, r0
 800f618:	6a3b      	ldr	r3, [r7, #32]
 800f61a:	1ad3      	subs	r3, r2, r3
 800f61c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f61e:	429a      	cmp	r2, r3
 800f620:	d902      	bls.n	800f628 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f624:	2b00      	cmp	r3, #0
 800f626:	d13d      	bne.n	800f6a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	685a      	ldr	r2, [r3, #4]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f636:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f640:	d111      	bne.n	800f666 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f64a:	d004      	beq.n	800f656 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	689b      	ldr	r3, [r3, #8]
 800f650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f654:	d107      	bne.n	800f666 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f664:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f66a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f66e:	d10f      	bne.n	800f690 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f67e:	601a      	str	r2, [r3, #0]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f68e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	e010      	b.n	800f6c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	3b01      	subs	r3, #1
 800f6b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689a      	ldr	r2, [r3, #8]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	4013      	ands	r3, r2
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d196      	bne.n	800f5f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3728      	adds	r7, #40	; 0x28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	20000054 	.word	0x20000054

0800f6d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af02      	add	r7, sp, #8
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	9300      	str	r3, [sp, #0]
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f7ff ff5b 	bl	800f5a8 <SPI_WaitFifoStateUntilTimeout>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d007      	beq.n	800f708 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6fc:	f043 0220 	orr.w	r2, r3, #32
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f704:	2303      	movs	r3, #3
 800f706:	e027      	b.n	800f758 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2200      	movs	r2, #0
 800f710:	2180      	movs	r1, #128	; 0x80
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7ff fec0 	bl	800f498 <SPI_WaitFlagStateUntilTimeout>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d007      	beq.n	800f72e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f722:	f043 0220 	orr.w	r2, r3, #32
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f72a:	2303      	movs	r3, #3
 800f72c:	e014      	b.n	800f758 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	9300      	str	r3, [sp, #0]
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2200      	movs	r2, #0
 800f736:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f7ff ff34 	bl	800f5a8 <SPI_WaitFifoStateUntilTimeout>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	d007      	beq.n	800f756 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f74a:	f043 0220 	orr.w	r2, r3, #32
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f752:	2303      	movs	r3, #3
 800f754:	e000      	b.n	800f758 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d101      	bne.n	800f772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f76e:	2301      	movs	r3, #1
 800f770:	e049      	b.n	800f806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d106      	bne.n	800f78c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2200      	movs	r2, #0
 800f782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f7f9 fe3c 	bl	8009404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2202      	movs	r2, #2
 800f790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3304      	adds	r3, #4
 800f79c:	4619      	mov	r1, r3
 800f79e:	4610      	mov	r0, r2
 800f7a0:	f000 ffc2 	bl	8010728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f804:	2300      	movs	r3, #0
}
 800f806:	4618      	mov	r0, r3
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
	...

0800f810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f810:	b480      	push	{r7}
 800f812:	b085      	sub	sp, #20
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b01      	cmp	r3, #1
 800f822:	d001      	beq.n	800f828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	e047      	b.n	800f8b8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4a23      	ldr	r2, [pc, #140]	; (800f8c4 <HAL_TIM_Base_Start+0xb4>)
 800f836:	4293      	cmp	r3, r2
 800f838:	d01d      	beq.n	800f876 <HAL_TIM_Base_Start+0x66>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f842:	d018      	beq.n	800f876 <HAL_TIM_Base_Start+0x66>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a1f      	ldr	r2, [pc, #124]	; (800f8c8 <HAL_TIM_Base_Start+0xb8>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d013      	beq.n	800f876 <HAL_TIM_Base_Start+0x66>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a1e      	ldr	r2, [pc, #120]	; (800f8cc <HAL_TIM_Base_Start+0xbc>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d00e      	beq.n	800f876 <HAL_TIM_Base_Start+0x66>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a1c      	ldr	r2, [pc, #112]	; (800f8d0 <HAL_TIM_Base_Start+0xc0>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d009      	beq.n	800f876 <HAL_TIM_Base_Start+0x66>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a1b      	ldr	r2, [pc, #108]	; (800f8d4 <HAL_TIM_Base_Start+0xc4>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d004      	beq.n	800f876 <HAL_TIM_Base_Start+0x66>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a19      	ldr	r2, [pc, #100]	; (800f8d8 <HAL_TIM_Base_Start+0xc8>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d115      	bne.n	800f8a2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	689a      	ldr	r2, [r3, #8]
 800f87c:	4b17      	ldr	r3, [pc, #92]	; (800f8dc <HAL_TIM_Base_Start+0xcc>)
 800f87e:	4013      	ands	r3, r2
 800f880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2b06      	cmp	r3, #6
 800f886:	d015      	beq.n	800f8b4 <HAL_TIM_Base_Start+0xa4>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f88e:	d011      	beq.n	800f8b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f042 0201 	orr.w	r2, r2, #1
 800f89e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8a0:	e008      	b.n	800f8b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f042 0201 	orr.w	r2, r2, #1
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	e000      	b.n	800f8b6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f8b6:	2300      	movs	r3, #0
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3714      	adds	r7, #20
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr
 800f8c4:	40012c00 	.word	0x40012c00
 800f8c8:	40000400 	.word	0x40000400
 800f8cc:	40000800 	.word	0x40000800
 800f8d0:	40000c00 	.word	0x40000c00
 800f8d4:	40013400 	.word	0x40013400
 800f8d8:	40014000 	.word	0x40014000
 800f8dc:	00010007 	.word	0x00010007

0800f8e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d001      	beq.n	800f8f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	e04f      	b.n	800f998 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2202      	movs	r2, #2
 800f8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68da      	ldr	r2, [r3, #12]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f042 0201 	orr.w	r2, r2, #1
 800f90e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	4a23      	ldr	r2, [pc, #140]	; (800f9a4 <HAL_TIM_Base_Start_IT+0xc4>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d01d      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0x76>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f922:	d018      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0x76>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a1f      	ldr	r2, [pc, #124]	; (800f9a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d013      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0x76>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	4a1e      	ldr	r2, [pc, #120]	; (800f9ac <HAL_TIM_Base_Start_IT+0xcc>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d00e      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0x76>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a1c      	ldr	r2, [pc, #112]	; (800f9b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800f93e:	4293      	cmp	r3, r2
 800f940:	d009      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0x76>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a1b      	ldr	r2, [pc, #108]	; (800f9b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d004      	beq.n	800f956 <HAL_TIM_Base_Start_IT+0x76>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	4a19      	ldr	r2, [pc, #100]	; (800f9b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d115      	bne.n	800f982 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	689a      	ldr	r2, [r3, #8]
 800f95c:	4b17      	ldr	r3, [pc, #92]	; (800f9bc <HAL_TIM_Base_Start_IT+0xdc>)
 800f95e:	4013      	ands	r3, r2
 800f960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b06      	cmp	r3, #6
 800f966:	d015      	beq.n	800f994 <HAL_TIM_Base_Start_IT+0xb4>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f96e:	d011      	beq.n	800f994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f042 0201 	orr.w	r2, r2, #1
 800f97e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f980:	e008      	b.n	800f994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f042 0201 	orr.w	r2, r2, #1
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	e000      	b.n	800f996 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f994:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3714      	adds	r7, #20
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	40012c00 	.word	0x40012c00
 800f9a8:	40000400 	.word	0x40000400
 800f9ac:	40000800 	.word	0x40000800
 800f9b0:	40000c00 	.word	0x40000c00
 800f9b4:	40013400 	.word	0x40013400
 800f9b8:	40014000 	.word	0x40014000
 800f9bc:	00010007 	.word	0x00010007

0800f9c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b082      	sub	sp, #8
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d101      	bne.n	800f9d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e049      	b.n	800fa66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d106      	bne.n	800f9ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7f9 fdec 	bl	80095c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2202      	movs	r2, #2
 800f9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	4610      	mov	r0, r2
 800fa00:	f000 fe92 	bl	8010728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2201      	movs	r2, #1
 800fa38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2201      	movs	r2, #1
 800fa48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2201      	movs	r2, #1
 800fa58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3708      	adds	r7, #8
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
	...

0800fa70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d109      	bne.n	800fa94 <HAL_TIM_PWM_Start+0x24>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	bf14      	ite	ne
 800fa8c:	2301      	movne	r3, #1
 800fa8e:	2300      	moveq	r3, #0
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	e03c      	b.n	800fb0e <HAL_TIM_PWM_Start+0x9e>
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	2b04      	cmp	r3, #4
 800fa98:	d109      	bne.n	800faae <HAL_TIM_PWM_Start+0x3e>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	bf14      	ite	ne
 800faa6:	2301      	movne	r3, #1
 800faa8:	2300      	moveq	r3, #0
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	e02f      	b.n	800fb0e <HAL_TIM_PWM_Start+0x9e>
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	2b08      	cmp	r3, #8
 800fab2:	d109      	bne.n	800fac8 <HAL_TIM_PWM_Start+0x58>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	bf14      	ite	ne
 800fac0:	2301      	movne	r3, #1
 800fac2:	2300      	moveq	r3, #0
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	e022      	b.n	800fb0e <HAL_TIM_PWM_Start+0x9e>
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	2b0c      	cmp	r3, #12
 800facc:	d109      	bne.n	800fae2 <HAL_TIM_PWM_Start+0x72>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	bf14      	ite	ne
 800fada:	2301      	movne	r3, #1
 800fadc:	2300      	moveq	r3, #0
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	e015      	b.n	800fb0e <HAL_TIM_PWM_Start+0x9e>
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	2b10      	cmp	r3, #16
 800fae6:	d109      	bne.n	800fafc <HAL_TIM_PWM_Start+0x8c>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	bf14      	ite	ne
 800faf4:	2301      	movne	r3, #1
 800faf6:	2300      	moveq	r3, #0
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	e008      	b.n	800fb0e <HAL_TIM_PWM_Start+0x9e>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	bf14      	ite	ne
 800fb08:	2301      	movne	r3, #1
 800fb0a:	2300      	moveq	r3, #0
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e09c      	b.n	800fc50 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d104      	bne.n	800fb26 <HAL_TIM_PWM_Start+0xb6>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2202      	movs	r2, #2
 800fb20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb24:	e023      	b.n	800fb6e <HAL_TIM_PWM_Start+0xfe>
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	2b04      	cmp	r3, #4
 800fb2a:	d104      	bne.n	800fb36 <HAL_TIM_PWM_Start+0xc6>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2202      	movs	r2, #2
 800fb30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb34:	e01b      	b.n	800fb6e <HAL_TIM_PWM_Start+0xfe>
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	2b08      	cmp	r3, #8
 800fb3a:	d104      	bne.n	800fb46 <HAL_TIM_PWM_Start+0xd6>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2202      	movs	r2, #2
 800fb40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb44:	e013      	b.n	800fb6e <HAL_TIM_PWM_Start+0xfe>
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	2b0c      	cmp	r3, #12
 800fb4a:	d104      	bne.n	800fb56 <HAL_TIM_PWM_Start+0xe6>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb54:	e00b      	b.n	800fb6e <HAL_TIM_PWM_Start+0xfe>
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	2b10      	cmp	r3, #16
 800fb5a:	d104      	bne.n	800fb66 <HAL_TIM_PWM_Start+0xf6>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2202      	movs	r2, #2
 800fb60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb64:	e003      	b.n	800fb6e <HAL_TIM_PWM_Start+0xfe>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2202      	movs	r2, #2
 800fb6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2201      	movs	r2, #1
 800fb74:	6839      	ldr	r1, [r7, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f001 fb06 	bl	8011188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a35      	ldr	r2, [pc, #212]	; (800fc58 <HAL_TIM_PWM_Start+0x1e8>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d013      	beq.n	800fbae <HAL_TIM_PWM_Start+0x13e>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	4a34      	ldr	r2, [pc, #208]	; (800fc5c <HAL_TIM_PWM_Start+0x1ec>)
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d00e      	beq.n	800fbae <HAL_TIM_PWM_Start+0x13e>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a32      	ldr	r2, [pc, #200]	; (800fc60 <HAL_TIM_PWM_Start+0x1f0>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d009      	beq.n	800fbae <HAL_TIM_PWM_Start+0x13e>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4a31      	ldr	r2, [pc, #196]	; (800fc64 <HAL_TIM_PWM_Start+0x1f4>)
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d004      	beq.n	800fbae <HAL_TIM_PWM_Start+0x13e>
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4a2f      	ldr	r2, [pc, #188]	; (800fc68 <HAL_TIM_PWM_Start+0x1f8>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d101      	bne.n	800fbb2 <HAL_TIM_PWM_Start+0x142>
 800fbae:	2301      	movs	r3, #1
 800fbb0:	e000      	b.n	800fbb4 <HAL_TIM_PWM_Start+0x144>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d007      	beq.n	800fbc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a22      	ldr	r2, [pc, #136]	; (800fc58 <HAL_TIM_PWM_Start+0x1e8>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d01d      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x19e>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbda:	d018      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x19e>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a22      	ldr	r2, [pc, #136]	; (800fc6c <HAL_TIM_PWM_Start+0x1fc>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d013      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x19e>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a21      	ldr	r2, [pc, #132]	; (800fc70 <HAL_TIM_PWM_Start+0x200>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d00e      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x19e>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a1f      	ldr	r2, [pc, #124]	; (800fc74 <HAL_TIM_PWM_Start+0x204>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d009      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x19e>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a17      	ldr	r2, [pc, #92]	; (800fc5c <HAL_TIM_PWM_Start+0x1ec>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d004      	beq.n	800fc0e <HAL_TIM_PWM_Start+0x19e>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a15      	ldr	r2, [pc, #84]	; (800fc60 <HAL_TIM_PWM_Start+0x1f0>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d115      	bne.n	800fc3a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	689a      	ldr	r2, [r3, #8]
 800fc14:	4b18      	ldr	r3, [pc, #96]	; (800fc78 <HAL_TIM_PWM_Start+0x208>)
 800fc16:	4013      	ands	r3, r2
 800fc18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2b06      	cmp	r3, #6
 800fc1e:	d015      	beq.n	800fc4c <HAL_TIM_PWM_Start+0x1dc>
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc26:	d011      	beq.n	800fc4c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f042 0201 	orr.w	r2, r2, #1
 800fc36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc38:	e008      	b.n	800fc4c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f042 0201 	orr.w	r2, r2, #1
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	e000      	b.n	800fc4e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	40012c00 	.word	0x40012c00
 800fc5c:	40013400 	.word	0x40013400
 800fc60:	40014000 	.word	0x40014000
 800fc64:	40014400 	.word	0x40014400
 800fc68:	40014800 	.word	0x40014800
 800fc6c:	40000400 	.word	0x40000400
 800fc70:	40000800 	.word	0x40000800
 800fc74:	40000c00 	.word	0x40000c00
 800fc78:	00010007 	.word	0x00010007

0800fc7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e049      	b.n	800fd22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d106      	bne.n	800fca8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f000 f841 	bl	800fd2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2202      	movs	r2, #2
 800fcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681a      	ldr	r2, [r3, #0]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	4619      	mov	r1, r3
 800fcba:	4610      	mov	r0, r2
 800fcbc:	f000 fd34 	bl	8010728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2201      	movs	r2, #1
 800fcdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2201      	movs	r2, #1
 800fce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2201      	movs	r2, #1
 800fd04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2201      	movs	r2, #1
 800fd14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800fd2a:	b480      	push	{r7}
 800fd2c:	b083      	sub	sp, #12
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800fd32:	bf00      	nop
 800fd34:	370c      	adds	r7, #12
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr

0800fd3e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800fd3e:	b580      	push	{r7, lr}
 800fd40:	b086      	sub	sp, #24
 800fd42:	af00      	add	r7, sp, #0
 800fd44:	6078      	str	r0, [r7, #4]
 800fd46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d101      	bne.n	800fd52 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e097      	b.n	800fe82 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d106      	bne.n	800fd6c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7f9 fbe0 	bl	800952c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2202      	movs	r2, #2
 800fd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	689b      	ldr	r3, [r3, #8]
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	6812      	ldr	r2, [r2, #0]
 800fd7e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800fd82:	f023 0307 	bic.w	r3, r3, #7
 800fd86:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3304      	adds	r3, #4
 800fd90:	4619      	mov	r1, r3
 800fd92:	4610      	mov	r0, r2
 800fd94:	f000 fcc8 	bl	8010728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6a1b      	ldr	r3, [r3, #32]
 800fdae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	697a      	ldr	r2, [r7, #20]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdc0:	f023 0303 	bic.w	r3, r3, #3
 800fdc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	689a      	ldr	r2, [r3, #8]
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	699b      	ldr	r3, [r3, #24]
 800fdce:	021b      	lsls	r3, r3, #8
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	693a      	ldr	r2, [r7, #16]
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800fdde:	f023 030c 	bic.w	r3, r3, #12
 800fde2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fdee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	68da      	ldr	r2, [r3, #12]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	69db      	ldr	r3, [r3, #28]
 800fdf8:	021b      	lsls	r3, r3, #8
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	693a      	ldr	r2, [r7, #16]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	691b      	ldr	r3, [r3, #16]
 800fe06:	011a      	lsls	r2, r3, #4
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	6a1b      	ldr	r3, [r3, #32]
 800fe0c:	031b      	lsls	r3, r3, #12
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	4313      	orrs	r3, r2
 800fe14:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800fe1c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800fe24:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	685a      	ldr	r2, [r3, #4]
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	011b      	lsls	r3, r3, #4
 800fe30:	4313      	orrs	r3, r2
 800fe32:	68fa      	ldr	r2, [r7, #12]
 800fe34:	4313      	orrs	r3, r2
 800fe36:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	697a      	ldr	r2, [r7, #20]
 800fe3e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	693a      	ldr	r2, [r7, #16]
 800fe46:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2201      	movs	r2, #1
 800fe54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2201      	movs	r2, #1
 800fe74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b084      	sub	sp, #16
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
 800fe92:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe9a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fea2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800feaa:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800feb2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d110      	bne.n	800fedc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800feba:	7bfb      	ldrb	r3, [r7, #15]
 800febc:	2b01      	cmp	r3, #1
 800febe:	d102      	bne.n	800fec6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800fec0:	7b7b      	ldrb	r3, [r7, #13]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d001      	beq.n	800feca <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	e069      	b.n	800ff9e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2202      	movs	r2, #2
 800fece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2202      	movs	r2, #2
 800fed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800feda:	e031      	b.n	800ff40 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	2b04      	cmp	r3, #4
 800fee0:	d110      	bne.n	800ff04 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800fee2:	7bbb      	ldrb	r3, [r7, #14]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d102      	bne.n	800feee <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800fee8:	7b3b      	ldrb	r3, [r7, #12]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d001      	beq.n	800fef2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800feee:	2301      	movs	r3, #1
 800fef0:	e055      	b.n	800ff9e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2202      	movs	r2, #2
 800fef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2202      	movs	r2, #2
 800fefe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff02:	e01d      	b.n	800ff40 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d108      	bne.n	800ff1c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d105      	bne.n	800ff1c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ff10:	7b7b      	ldrb	r3, [r7, #13]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d102      	bne.n	800ff1c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ff16:	7b3b      	ldrb	r3, [r7, #12]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d001      	beq.n	800ff20 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e03e      	b.n	800ff9e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2202      	movs	r2, #2
 800ff24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2202      	movs	r2, #2
 800ff2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2202      	movs	r2, #2
 800ff34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2202      	movs	r2, #2
 800ff3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d003      	beq.n	800ff4e <HAL_TIM_Encoder_Start+0xc4>
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	2b04      	cmp	r3, #4
 800ff4a:	d008      	beq.n	800ff5e <HAL_TIM_Encoder_Start+0xd4>
 800ff4c:	e00f      	b.n	800ff6e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2201      	movs	r2, #1
 800ff54:	2100      	movs	r1, #0
 800ff56:	4618      	mov	r0, r3
 800ff58:	f001 f916 	bl	8011188 <TIM_CCxChannelCmd>
      break;
 800ff5c:	e016      	b.n	800ff8c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2201      	movs	r2, #1
 800ff64:	2104      	movs	r1, #4
 800ff66:	4618      	mov	r0, r3
 800ff68:	f001 f90e 	bl	8011188 <TIM_CCxChannelCmd>
      break;
 800ff6c:	e00e      	b.n	800ff8c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2201      	movs	r2, #1
 800ff74:	2100      	movs	r1, #0
 800ff76:	4618      	mov	r0, r3
 800ff78:	f001 f906 	bl	8011188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2201      	movs	r2, #1
 800ff82:	2104      	movs	r1, #4
 800ff84:	4618      	mov	r0, r3
 800ff86:	f001 f8ff 	bl	8011188 <TIM_CCxChannelCmd>
      break;
 800ff8a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f042 0201 	orr.w	r2, r2, #1
 800ff9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b082      	sub	sp, #8
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	f003 0302 	and.w	r3, r3, #2
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d122      	bne.n	8010002 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	f003 0302 	and.w	r3, r3, #2
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	d11b      	bne.n	8010002 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f06f 0202 	mvn.w	r2, #2
 800ffd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	699b      	ldr	r3, [r3, #24]
 800ffe0:	f003 0303 	and.w	r3, r3, #3
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d003      	beq.n	800fff0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 fb7e 	bl	80106ea <HAL_TIM_IC_CaptureCallback>
 800ffee:	e005      	b.n	800fffc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fb70 	bl	80106d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fb81 	bl	80106fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	f003 0304 	and.w	r3, r3, #4
 801000c:	2b04      	cmp	r3, #4
 801000e:	d122      	bne.n	8010056 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	f003 0304 	and.w	r3, r3, #4
 801001a:	2b04      	cmp	r3, #4
 801001c:	d11b      	bne.n	8010056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f06f 0204 	mvn.w	r2, #4
 8010026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2202      	movs	r2, #2
 801002c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	699b      	ldr	r3, [r3, #24]
 8010034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010038:	2b00      	cmp	r3, #0
 801003a:	d003      	beq.n	8010044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 fb54 	bl	80106ea <HAL_TIM_IC_CaptureCallback>
 8010042:	e005      	b.n	8010050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 fb46 	bl	80106d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fb57 	bl	80106fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	f003 0308 	and.w	r3, r3, #8
 8010060:	2b08      	cmp	r3, #8
 8010062:	d122      	bne.n	80100aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	f003 0308 	and.w	r3, r3, #8
 801006e:	2b08      	cmp	r3, #8
 8010070:	d11b      	bne.n	80100aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	f06f 0208 	mvn.w	r2, #8
 801007a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2204      	movs	r2, #4
 8010080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	69db      	ldr	r3, [r3, #28]
 8010088:	f003 0303 	and.w	r3, r3, #3
 801008c:	2b00      	cmp	r3, #0
 801008e:	d003      	beq.n	8010098 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 fb2a 	bl	80106ea <HAL_TIM_IC_CaptureCallback>
 8010096:	e005      	b.n	80100a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 fb1c 	bl	80106d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 fb2d 	bl	80106fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	691b      	ldr	r3, [r3, #16]
 80100b0:	f003 0310 	and.w	r3, r3, #16
 80100b4:	2b10      	cmp	r3, #16
 80100b6:	d122      	bne.n	80100fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	f003 0310 	and.w	r3, r3, #16
 80100c2:	2b10      	cmp	r3, #16
 80100c4:	d11b      	bne.n	80100fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f06f 0210 	mvn.w	r2, #16
 80100ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2208      	movs	r2, #8
 80100d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	69db      	ldr	r3, [r3, #28]
 80100dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d003      	beq.n	80100ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 fb00 	bl	80106ea <HAL_TIM_IC_CaptureCallback>
 80100ea:	e005      	b.n	80100f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 faf2 	bl	80106d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fb03 	bl	80106fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	691b      	ldr	r3, [r3, #16]
 8010104:	f003 0301 	and.w	r3, r3, #1
 8010108:	2b01      	cmp	r3, #1
 801010a:	d10e      	bne.n	801012a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	f003 0301 	and.w	r3, r3, #1
 8010116:	2b01      	cmp	r3, #1
 8010118:	d107      	bne.n	801012a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	f06f 0201 	mvn.w	r2, #1
 8010122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f7f8 fe09 	bl	8008d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	691b      	ldr	r3, [r3, #16]
 8010130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010134:	2b80      	cmp	r3, #128	; 0x80
 8010136:	d10e      	bne.n	8010156 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010142:	2b80      	cmp	r3, #128	; 0x80
 8010144:	d107      	bne.n	8010156 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801014e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f001 f971 	bl	8011438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	691b      	ldr	r3, [r3, #16]
 801015c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010164:	d10e      	bne.n	8010184 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010170:	2b80      	cmp	r3, #128	; 0x80
 8010172:	d107      	bne.n	8010184 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801017c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f001 f964 	bl	801144c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801018e:	2b40      	cmp	r3, #64	; 0x40
 8010190:	d10e      	bne.n	80101b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801019c:	2b40      	cmp	r3, #64	; 0x40
 801019e:	d107      	bne.n	80101b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80101a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 fab1 	bl	8010712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	f003 0320 	and.w	r3, r3, #32
 80101ba:	2b20      	cmp	r3, #32
 80101bc:	d10e      	bne.n	80101dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	f003 0320 	and.w	r3, r3, #32
 80101c8:	2b20      	cmp	r3, #32
 80101ca:	d107      	bne.n	80101dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f06f 0220 	mvn.w	r2, #32
 80101d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f001 f924 	bl	8011424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80101dc:	bf00      	nop
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b086      	sub	sp, #24
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101f0:	2300      	movs	r3, #0
 80101f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d101      	bne.n	8010202 <HAL_TIM_IC_ConfigChannel+0x1e>
 80101fe:	2302      	movs	r3, #2
 8010200:	e088      	b.n	8010314 <HAL_TIM_IC_ConfigChannel+0x130>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2201      	movs	r2, #1
 8010206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d11b      	bne.n	8010248 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010220:	f000 fdf2 	bl	8010e08 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	699a      	ldr	r2, [r3, #24]
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f022 020c 	bic.w	r2, r2, #12
 8010232:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	6999      	ldr	r1, [r3, #24]
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	689a      	ldr	r2, [r3, #8]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	430a      	orrs	r2, r1
 8010244:	619a      	str	r2, [r3, #24]
 8010246:	e060      	b.n	801030a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b04      	cmp	r3, #4
 801024c:	d11c      	bne.n	8010288 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801025e:	f000 fe70 	bl	8010f42 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	699a      	ldr	r2, [r3, #24]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010270:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	6999      	ldr	r1, [r3, #24]
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	689b      	ldr	r3, [r3, #8]
 801027c:	021a      	lsls	r2, r3, #8
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	430a      	orrs	r2, r1
 8010284:	619a      	str	r2, [r3, #24]
 8010286:	e040      	b.n	801030a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b08      	cmp	r3, #8
 801028c:	d11b      	bne.n	80102c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801029e:	f000 febd 	bl	801101c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	69da      	ldr	r2, [r3, #28]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f022 020c 	bic.w	r2, r2, #12
 80102b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	69d9      	ldr	r1, [r3, #28]
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	430a      	orrs	r2, r1
 80102c2:	61da      	str	r2, [r3, #28]
 80102c4:	e021      	b.n	801030a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b0c      	cmp	r3, #12
 80102ca:	d11c      	bne.n	8010306 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80102dc:	f000 feda 	bl	8011094 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	69da      	ldr	r2, [r3, #28]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80102ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	69d9      	ldr	r1, [r3, #28]
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	021a      	lsls	r2, r3, #8
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	430a      	orrs	r2, r1
 8010302:	61da      	str	r2, [r3, #28]
 8010304:	e001      	b.n	801030a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8010306:	2301      	movs	r3, #1
 8010308:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2200      	movs	r2, #0
 801030e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010312:	7dfb      	ldrb	r3, [r7, #23]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3718      	adds	r7, #24
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010332:	2b01      	cmp	r3, #1
 8010334:	d101      	bne.n	801033a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010336:	2302      	movs	r3, #2
 8010338:	e0ff      	b.n	801053a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2201      	movs	r2, #1
 801033e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2b14      	cmp	r3, #20
 8010346:	f200 80f0 	bhi.w	801052a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801034a:	a201      	add	r2, pc, #4	; (adr r2, 8010350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010350:	080103a5 	.word	0x080103a5
 8010354:	0801052b 	.word	0x0801052b
 8010358:	0801052b 	.word	0x0801052b
 801035c:	0801052b 	.word	0x0801052b
 8010360:	080103e5 	.word	0x080103e5
 8010364:	0801052b 	.word	0x0801052b
 8010368:	0801052b 	.word	0x0801052b
 801036c:	0801052b 	.word	0x0801052b
 8010370:	08010427 	.word	0x08010427
 8010374:	0801052b 	.word	0x0801052b
 8010378:	0801052b 	.word	0x0801052b
 801037c:	0801052b 	.word	0x0801052b
 8010380:	08010467 	.word	0x08010467
 8010384:	0801052b 	.word	0x0801052b
 8010388:	0801052b 	.word	0x0801052b
 801038c:	0801052b 	.word	0x0801052b
 8010390:	080104a9 	.word	0x080104a9
 8010394:	0801052b 	.word	0x0801052b
 8010398:	0801052b 	.word	0x0801052b
 801039c:	0801052b 	.word	0x0801052b
 80103a0:	080104e9 	.word	0x080104e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	68b9      	ldr	r1, [r7, #8]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 fa56 	bl	801085c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	699a      	ldr	r2, [r3, #24]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f042 0208 	orr.w	r2, r2, #8
 80103be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	699a      	ldr	r2, [r3, #24]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f022 0204 	bic.w	r2, r2, #4
 80103ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	6999      	ldr	r1, [r3, #24]
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	691a      	ldr	r2, [r3, #16]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	430a      	orrs	r2, r1
 80103e0:	619a      	str	r2, [r3, #24]
      break;
 80103e2:	e0a5      	b.n	8010530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	68b9      	ldr	r1, [r7, #8]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 fac6 	bl	801097c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	699a      	ldr	r2, [r3, #24]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	699a      	ldr	r2, [r3, #24]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801040e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	6999      	ldr	r1, [r3, #24]
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	021a      	lsls	r2, r3, #8
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	430a      	orrs	r2, r1
 8010422:	619a      	str	r2, [r3, #24]
      break;
 8010424:	e084      	b.n	8010530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68b9      	ldr	r1, [r7, #8]
 801042c:	4618      	mov	r0, r3
 801042e:	f000 fb2f 	bl	8010a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	69da      	ldr	r2, [r3, #28]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f042 0208 	orr.w	r2, r2, #8
 8010440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	69da      	ldr	r2, [r3, #28]
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f022 0204 	bic.w	r2, r2, #4
 8010450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	69d9      	ldr	r1, [r3, #28]
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	691a      	ldr	r2, [r3, #16]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	61da      	str	r2, [r3, #28]
      break;
 8010464:	e064      	b.n	8010530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68b9      	ldr	r1, [r7, #8]
 801046c:	4618      	mov	r0, r3
 801046e:	f000 fb97 	bl	8010ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	69da      	ldr	r2, [r3, #28]
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	69da      	ldr	r2, [r3, #28]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	69d9      	ldr	r1, [r3, #28]
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	691b      	ldr	r3, [r3, #16]
 801049c:	021a      	lsls	r2, r3, #8
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	430a      	orrs	r2, r1
 80104a4:	61da      	str	r2, [r3, #28]
      break;
 80104a6:	e043      	b.n	8010530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	68b9      	ldr	r1, [r7, #8]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f000 fbe0 	bl	8010c74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	f042 0208 	orr.w	r2, r2, #8
 80104c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f022 0204 	bic.w	r2, r2, #4
 80104d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	691a      	ldr	r2, [r3, #16]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	430a      	orrs	r2, r1
 80104e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80104e6:	e023      	b.n	8010530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	68b9      	ldr	r1, [r7, #8]
 80104ee:	4618      	mov	r0, r3
 80104f0:	f000 fc24 	bl	8010d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	021a      	lsls	r2, r3, #8
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	430a      	orrs	r2, r1
 8010526:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010528:	e002      	b.n	8010530 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801052a:	2301      	movs	r3, #1
 801052c:	75fb      	strb	r3, [r7, #23]
      break;
 801052e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010538:	7dfb      	ldrb	r3, [r7, #23]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop

08010544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801054e:	2300      	movs	r3, #0
 8010550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010558:	2b01      	cmp	r3, #1
 801055a:	d101      	bne.n	8010560 <HAL_TIM_ConfigClockSource+0x1c>
 801055c:	2302      	movs	r3, #2
 801055e:	e0b6      	b.n	80106ce <HAL_TIM_ConfigClockSource+0x18a>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2202      	movs	r2, #2
 801056c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801057e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8010582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801058a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68ba      	ldr	r2, [r7, #8]
 8010592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801059c:	d03e      	beq.n	801061c <HAL_TIM_ConfigClockSource+0xd8>
 801059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105a2:	f200 8087 	bhi.w	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105aa:	f000 8086 	beq.w	80106ba <HAL_TIM_ConfigClockSource+0x176>
 80105ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105b2:	d87f      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105b4:	2b70      	cmp	r3, #112	; 0x70
 80105b6:	d01a      	beq.n	80105ee <HAL_TIM_ConfigClockSource+0xaa>
 80105b8:	2b70      	cmp	r3, #112	; 0x70
 80105ba:	d87b      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105bc:	2b60      	cmp	r3, #96	; 0x60
 80105be:	d050      	beq.n	8010662 <HAL_TIM_ConfigClockSource+0x11e>
 80105c0:	2b60      	cmp	r3, #96	; 0x60
 80105c2:	d877      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105c4:	2b50      	cmp	r3, #80	; 0x50
 80105c6:	d03c      	beq.n	8010642 <HAL_TIM_ConfigClockSource+0xfe>
 80105c8:	2b50      	cmp	r3, #80	; 0x50
 80105ca:	d873      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105cc:	2b40      	cmp	r3, #64	; 0x40
 80105ce:	d058      	beq.n	8010682 <HAL_TIM_ConfigClockSource+0x13e>
 80105d0:	2b40      	cmp	r3, #64	; 0x40
 80105d2:	d86f      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105d4:	2b30      	cmp	r3, #48	; 0x30
 80105d6:	d064      	beq.n	80106a2 <HAL_TIM_ConfigClockSource+0x15e>
 80105d8:	2b30      	cmp	r3, #48	; 0x30
 80105da:	d86b      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105dc:	2b20      	cmp	r3, #32
 80105de:	d060      	beq.n	80106a2 <HAL_TIM_ConfigClockSource+0x15e>
 80105e0:	2b20      	cmp	r3, #32
 80105e2:	d867      	bhi.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d05c      	beq.n	80106a2 <HAL_TIM_ConfigClockSource+0x15e>
 80105e8:	2b10      	cmp	r3, #16
 80105ea:	d05a      	beq.n	80106a2 <HAL_TIM_ConfigClockSource+0x15e>
 80105ec:	e062      	b.n	80106b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80105fe:	f000 fda3 	bl	8011148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68ba      	ldr	r2, [r7, #8]
 8010618:	609a      	str	r2, [r3, #8]
      break;
 801061a:	e04f      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801062c:	f000 fd8c 	bl	8011148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	689a      	ldr	r2, [r3, #8]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801063e:	609a      	str	r2, [r3, #8]
      break;
 8010640:	e03c      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801064e:	461a      	mov	r2, r3
 8010650:	f000 fc48 	bl	8010ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	2150      	movs	r1, #80	; 0x50
 801065a:	4618      	mov	r0, r3
 801065c:	f000 fd57 	bl	801110e <TIM_ITRx_SetConfig>
      break;
 8010660:	e02c      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801066e:	461a      	mov	r2, r3
 8010670:	f000 fca4 	bl	8010fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2160      	movs	r1, #96	; 0x60
 801067a:	4618      	mov	r0, r3
 801067c:	f000 fd47 	bl	801110e <TIM_ITRx_SetConfig>
      break;
 8010680:	e01c      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801068e:	461a      	mov	r2, r3
 8010690:	f000 fc28 	bl	8010ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2140      	movs	r1, #64	; 0x40
 801069a:	4618      	mov	r0, r3
 801069c:	f000 fd37 	bl	801110e <TIM_ITRx_SetConfig>
      break;
 80106a0:	e00c      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4619      	mov	r1, r3
 80106ac:	4610      	mov	r0, r2
 80106ae:	f000 fd2e 	bl	801110e <TIM_ITRx_SetConfig>
      break;
 80106b2:	e003      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80106b4:	2301      	movs	r3, #1
 80106b6:	73fb      	strb	r3, [r7, #15]
      break;
 80106b8:	e000      	b.n	80106bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80106ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2201      	movs	r2, #1
 80106c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b083      	sub	sp, #12
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80106de:	bf00      	nop
 80106e0:	370c      	adds	r7, #12
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80106ea:	b480      	push	{r7}
 80106ec:	b083      	sub	sp, #12
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80106f2:	bf00      	nop
 80106f4:	370c      	adds	r7, #12
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80106fe:	b480      	push	{r7}
 8010700:	b083      	sub	sp, #12
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010706:	bf00      	nop
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010712:	b480      	push	{r7}
 8010714:	b083      	sub	sp, #12
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801071a:	bf00      	nop
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
	...

08010728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	4a40      	ldr	r2, [pc, #256]	; (801083c <TIM_Base_SetConfig+0x114>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d013      	beq.n	8010768 <TIM_Base_SetConfig+0x40>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010746:	d00f      	beq.n	8010768 <TIM_Base_SetConfig+0x40>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	4a3d      	ldr	r2, [pc, #244]	; (8010840 <TIM_Base_SetConfig+0x118>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d00b      	beq.n	8010768 <TIM_Base_SetConfig+0x40>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	4a3c      	ldr	r2, [pc, #240]	; (8010844 <TIM_Base_SetConfig+0x11c>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d007      	beq.n	8010768 <TIM_Base_SetConfig+0x40>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4a3b      	ldr	r2, [pc, #236]	; (8010848 <TIM_Base_SetConfig+0x120>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d003      	beq.n	8010768 <TIM_Base_SetConfig+0x40>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	4a3a      	ldr	r2, [pc, #232]	; (801084c <TIM_Base_SetConfig+0x124>)
 8010764:	4293      	cmp	r3, r2
 8010766:	d108      	bne.n	801077a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801076e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	4313      	orrs	r3, r2
 8010778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4a2f      	ldr	r2, [pc, #188]	; (801083c <TIM_Base_SetConfig+0x114>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d01f      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010788:	d01b      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4a2c      	ldr	r2, [pc, #176]	; (8010840 <TIM_Base_SetConfig+0x118>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d017      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	4a2b      	ldr	r2, [pc, #172]	; (8010844 <TIM_Base_SetConfig+0x11c>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d013      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	4a2a      	ldr	r2, [pc, #168]	; (8010848 <TIM_Base_SetConfig+0x120>)
 801079e:	4293      	cmp	r3, r2
 80107a0:	d00f      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4a29      	ldr	r2, [pc, #164]	; (801084c <TIM_Base_SetConfig+0x124>)
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d00b      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4a28      	ldr	r2, [pc, #160]	; (8010850 <TIM_Base_SetConfig+0x128>)
 80107ae:	4293      	cmp	r3, r2
 80107b0:	d007      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4a27      	ldr	r2, [pc, #156]	; (8010854 <TIM_Base_SetConfig+0x12c>)
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d003      	beq.n	80107c2 <TIM_Base_SetConfig+0x9a>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4a26      	ldr	r2, [pc, #152]	; (8010858 <TIM_Base_SetConfig+0x130>)
 80107be:	4293      	cmp	r3, r2
 80107c0:	d108      	bne.n	80107d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	695b      	ldr	r3, [r3, #20]
 80107de:	4313      	orrs	r3, r2
 80107e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68fa      	ldr	r2, [r7, #12]
 80107e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	689a      	ldr	r2, [r3, #8]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	681a      	ldr	r2, [r3, #0]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	4a10      	ldr	r2, [pc, #64]	; (801083c <TIM_Base_SetConfig+0x114>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d00f      	beq.n	8010820 <TIM_Base_SetConfig+0xf8>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4a12      	ldr	r2, [pc, #72]	; (801084c <TIM_Base_SetConfig+0x124>)
 8010804:	4293      	cmp	r3, r2
 8010806:	d00b      	beq.n	8010820 <TIM_Base_SetConfig+0xf8>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4a11      	ldr	r2, [pc, #68]	; (8010850 <TIM_Base_SetConfig+0x128>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d007      	beq.n	8010820 <TIM_Base_SetConfig+0xf8>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a10      	ldr	r2, [pc, #64]	; (8010854 <TIM_Base_SetConfig+0x12c>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d003      	beq.n	8010820 <TIM_Base_SetConfig+0xf8>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4a0f      	ldr	r2, [pc, #60]	; (8010858 <TIM_Base_SetConfig+0x130>)
 801081c:	4293      	cmp	r3, r2
 801081e:	d103      	bne.n	8010828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	691a      	ldr	r2, [r3, #16]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	615a      	str	r2, [r3, #20]
}
 801082e:	bf00      	nop
 8010830:	3714      	adds	r7, #20
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	40012c00 	.word	0x40012c00
 8010840:	40000400 	.word	0x40000400
 8010844:	40000800 	.word	0x40000800
 8010848:	40000c00 	.word	0x40000c00
 801084c:	40013400 	.word	0x40013400
 8010850:	40014000 	.word	0x40014000
 8010854:	40014400 	.word	0x40014400
 8010858:	40014800 	.word	0x40014800

0801085c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801085c:	b480      	push	{r7}
 801085e:	b087      	sub	sp, #28
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	f023 0201 	bic.w	r2, r3, #1
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	699b      	ldr	r3, [r3, #24]
 8010882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801088a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801088e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f023 0303 	bic.w	r3, r3, #3
 8010896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	4313      	orrs	r3, r2
 80108a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f023 0302 	bic.w	r3, r3, #2
 80108a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	4313      	orrs	r3, r2
 80108b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	4a2c      	ldr	r2, [pc, #176]	; (8010968 <TIM_OC1_SetConfig+0x10c>)
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d00f      	beq.n	80108dc <TIM_OC1_SetConfig+0x80>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4a2b      	ldr	r2, [pc, #172]	; (801096c <TIM_OC1_SetConfig+0x110>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d00b      	beq.n	80108dc <TIM_OC1_SetConfig+0x80>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	4a2a      	ldr	r2, [pc, #168]	; (8010970 <TIM_OC1_SetConfig+0x114>)
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d007      	beq.n	80108dc <TIM_OC1_SetConfig+0x80>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	4a29      	ldr	r2, [pc, #164]	; (8010974 <TIM_OC1_SetConfig+0x118>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d003      	beq.n	80108dc <TIM_OC1_SetConfig+0x80>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4a28      	ldr	r2, [pc, #160]	; (8010978 <TIM_OC1_SetConfig+0x11c>)
 80108d8:	4293      	cmp	r3, r2
 80108da:	d10c      	bne.n	80108f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	f023 0308 	bic.w	r3, r3, #8
 80108e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	697a      	ldr	r2, [r7, #20]
 80108ea:	4313      	orrs	r3, r2
 80108ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f023 0304 	bic.w	r3, r3, #4
 80108f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4a1b      	ldr	r2, [pc, #108]	; (8010968 <TIM_OC1_SetConfig+0x10c>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d00f      	beq.n	801091e <TIM_OC1_SetConfig+0xc2>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a1a      	ldr	r2, [pc, #104]	; (801096c <TIM_OC1_SetConfig+0x110>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d00b      	beq.n	801091e <TIM_OC1_SetConfig+0xc2>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4a19      	ldr	r2, [pc, #100]	; (8010970 <TIM_OC1_SetConfig+0x114>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d007      	beq.n	801091e <TIM_OC1_SetConfig+0xc2>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4a18      	ldr	r2, [pc, #96]	; (8010974 <TIM_OC1_SetConfig+0x118>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d003      	beq.n	801091e <TIM_OC1_SetConfig+0xc2>
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4a17      	ldr	r2, [pc, #92]	; (8010978 <TIM_OC1_SetConfig+0x11c>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d111      	bne.n	8010942 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801092c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	695b      	ldr	r3, [r3, #20]
 8010932:	693a      	ldr	r2, [r7, #16]
 8010934:	4313      	orrs	r3, r2
 8010936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	699b      	ldr	r3, [r3, #24]
 801093c:	693a      	ldr	r2, [r7, #16]
 801093e:	4313      	orrs	r3, r2
 8010940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	685a      	ldr	r2, [r3, #4]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	697a      	ldr	r2, [r7, #20]
 801095a:	621a      	str	r2, [r3, #32]
}
 801095c:	bf00      	nop
 801095e:	371c      	adds	r7, #28
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr
 8010968:	40012c00 	.word	0x40012c00
 801096c:	40013400 	.word	0x40013400
 8010970:	40014000 	.word	0x40014000
 8010974:	40014400 	.word	0x40014400
 8010978:	40014800 	.word	0x40014800

0801097c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801097c:	b480      	push	{r7}
 801097e:	b087      	sub	sp, #28
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a1b      	ldr	r3, [r3, #32]
 801098a:	f023 0210 	bic.w	r2, r3, #16
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6a1b      	ldr	r3, [r3, #32]
 8010996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	699b      	ldr	r3, [r3, #24]
 80109a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80109aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	021b      	lsls	r3, r3, #8
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f023 0320 	bic.w	r3, r3, #32
 80109ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	011b      	lsls	r3, r3, #4
 80109d2:	697a      	ldr	r2, [r7, #20]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4a28      	ldr	r2, [pc, #160]	; (8010a7c <TIM_OC2_SetConfig+0x100>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d003      	beq.n	80109e8 <TIM_OC2_SetConfig+0x6c>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4a27      	ldr	r2, [pc, #156]	; (8010a80 <TIM_OC2_SetConfig+0x104>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d10d      	bne.n	8010a04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	011b      	lsls	r3, r3, #4
 80109f6:	697a      	ldr	r2, [r7, #20]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4a1d      	ldr	r2, [pc, #116]	; (8010a7c <TIM_OC2_SetConfig+0x100>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d00f      	beq.n	8010a2c <TIM_OC2_SetConfig+0xb0>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	4a1c      	ldr	r2, [pc, #112]	; (8010a80 <TIM_OC2_SetConfig+0x104>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d00b      	beq.n	8010a2c <TIM_OC2_SetConfig+0xb0>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	4a1b      	ldr	r2, [pc, #108]	; (8010a84 <TIM_OC2_SetConfig+0x108>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d007      	beq.n	8010a2c <TIM_OC2_SetConfig+0xb0>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4a1a      	ldr	r2, [pc, #104]	; (8010a88 <TIM_OC2_SetConfig+0x10c>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d003      	beq.n	8010a2c <TIM_OC2_SetConfig+0xb0>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a19      	ldr	r2, [pc, #100]	; (8010a8c <TIM_OC2_SetConfig+0x110>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d113      	bne.n	8010a54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	695b      	ldr	r3, [r3, #20]
 8010a40:	009b      	lsls	r3, r3, #2
 8010a42:	693a      	ldr	r2, [r7, #16]
 8010a44:	4313      	orrs	r3, r2
 8010a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	699b      	ldr	r3, [r3, #24]
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	693a      	ldr	r2, [r7, #16]
 8010a50:	4313      	orrs	r3, r2
 8010a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	693a      	ldr	r2, [r7, #16]
 8010a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	685a      	ldr	r2, [r3, #4]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	697a      	ldr	r2, [r7, #20]
 8010a6c:	621a      	str	r2, [r3, #32]
}
 8010a6e:	bf00      	nop
 8010a70:	371c      	adds	r7, #28
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	40012c00 	.word	0x40012c00
 8010a80:	40013400 	.word	0x40013400
 8010a84:	40014000 	.word	0x40014000
 8010a88:	40014400 	.word	0x40014400
 8010a8c:	40014800 	.word	0x40014800

08010a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b087      	sub	sp, #28
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a1b      	ldr	r3, [r3, #32]
 8010a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6a1b      	ldr	r3, [r3, #32]
 8010aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	69db      	ldr	r3, [r3, #28]
 8010ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f023 0303 	bic.w	r3, r3, #3
 8010aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	021b      	lsls	r3, r3, #8
 8010ae4:	697a      	ldr	r2, [r7, #20]
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4a27      	ldr	r2, [pc, #156]	; (8010b8c <TIM_OC3_SetConfig+0xfc>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d003      	beq.n	8010afa <TIM_OC3_SetConfig+0x6a>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a26      	ldr	r2, [pc, #152]	; (8010b90 <TIM_OC3_SetConfig+0x100>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d10d      	bne.n	8010b16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	021b      	lsls	r3, r3, #8
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4a1c      	ldr	r2, [pc, #112]	; (8010b8c <TIM_OC3_SetConfig+0xfc>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d00f      	beq.n	8010b3e <TIM_OC3_SetConfig+0xae>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4a1b      	ldr	r2, [pc, #108]	; (8010b90 <TIM_OC3_SetConfig+0x100>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d00b      	beq.n	8010b3e <TIM_OC3_SetConfig+0xae>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	4a1a      	ldr	r2, [pc, #104]	; (8010b94 <TIM_OC3_SetConfig+0x104>)
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d007      	beq.n	8010b3e <TIM_OC3_SetConfig+0xae>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	4a19      	ldr	r2, [pc, #100]	; (8010b98 <TIM_OC3_SetConfig+0x108>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d003      	beq.n	8010b3e <TIM_OC3_SetConfig+0xae>
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4a18      	ldr	r2, [pc, #96]	; (8010b9c <TIM_OC3_SetConfig+0x10c>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d113      	bne.n	8010b66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	695b      	ldr	r3, [r3, #20]
 8010b52:	011b      	lsls	r3, r3, #4
 8010b54:	693a      	ldr	r2, [r7, #16]
 8010b56:	4313      	orrs	r3, r2
 8010b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	699b      	ldr	r3, [r3, #24]
 8010b5e:	011b      	lsls	r3, r3, #4
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	4313      	orrs	r3, r2
 8010b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	685a      	ldr	r2, [r3, #4]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	697a      	ldr	r2, [r7, #20]
 8010b7e:	621a      	str	r2, [r3, #32]
}
 8010b80:	bf00      	nop
 8010b82:	371c      	adds	r7, #28
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	40012c00 	.word	0x40012c00
 8010b90:	40013400 	.word	0x40013400
 8010b94:	40014000 	.word	0x40014000
 8010b98:	40014400 	.word	0x40014400
 8010b9c:	40014800 	.word	0x40014800

08010ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b087      	sub	sp, #28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6a1b      	ldr	r3, [r3, #32]
 8010bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6a1b      	ldr	r3, [r3, #32]
 8010bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	69db      	ldr	r3, [r3, #28]
 8010bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	021b      	lsls	r3, r3, #8
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	4313      	orrs	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	689b      	ldr	r3, [r3, #8]
 8010bf4:	031b      	lsls	r3, r3, #12
 8010bf6:	693a      	ldr	r2, [r7, #16]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4a18      	ldr	r2, [pc, #96]	; (8010c60 <TIM_OC4_SetConfig+0xc0>)
 8010c00:	4293      	cmp	r3, r2
 8010c02:	d00f      	beq.n	8010c24 <TIM_OC4_SetConfig+0x84>
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	4a17      	ldr	r2, [pc, #92]	; (8010c64 <TIM_OC4_SetConfig+0xc4>)
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d00b      	beq.n	8010c24 <TIM_OC4_SetConfig+0x84>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4a16      	ldr	r2, [pc, #88]	; (8010c68 <TIM_OC4_SetConfig+0xc8>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d007      	beq.n	8010c24 <TIM_OC4_SetConfig+0x84>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	4a15      	ldr	r2, [pc, #84]	; (8010c6c <TIM_OC4_SetConfig+0xcc>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d003      	beq.n	8010c24 <TIM_OC4_SetConfig+0x84>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4a14      	ldr	r2, [pc, #80]	; (8010c70 <TIM_OC4_SetConfig+0xd0>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d109      	bne.n	8010c38 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	695b      	ldr	r3, [r3, #20]
 8010c30:	019b      	lsls	r3, r3, #6
 8010c32:	697a      	ldr	r2, [r7, #20]
 8010c34:	4313      	orrs	r3, r2
 8010c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	697a      	ldr	r2, [r7, #20]
 8010c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	68fa      	ldr	r2, [r7, #12]
 8010c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	685a      	ldr	r2, [r3, #4]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	693a      	ldr	r2, [r7, #16]
 8010c50:	621a      	str	r2, [r3, #32]
}
 8010c52:	bf00      	nop
 8010c54:	371c      	adds	r7, #28
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	40012c00 	.word	0x40012c00
 8010c64:	40013400 	.word	0x40013400
 8010c68:	40014000 	.word	0x40014000
 8010c6c:	40014400 	.word	0x40014400
 8010c70:	40014800 	.word	0x40014800

08010c74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b087      	sub	sp, #28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6a1b      	ldr	r3, [r3, #32]
 8010c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	68fa      	ldr	r2, [r7, #12]
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010cb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	689b      	ldr	r3, [r3, #8]
 8010cbe:	041b      	lsls	r3, r3, #16
 8010cc0:	693a      	ldr	r2, [r7, #16]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a17      	ldr	r2, [pc, #92]	; (8010d28 <TIM_OC5_SetConfig+0xb4>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d00f      	beq.n	8010cee <TIM_OC5_SetConfig+0x7a>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4a16      	ldr	r2, [pc, #88]	; (8010d2c <TIM_OC5_SetConfig+0xb8>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d00b      	beq.n	8010cee <TIM_OC5_SetConfig+0x7a>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4a15      	ldr	r2, [pc, #84]	; (8010d30 <TIM_OC5_SetConfig+0xbc>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d007      	beq.n	8010cee <TIM_OC5_SetConfig+0x7a>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4a14      	ldr	r2, [pc, #80]	; (8010d34 <TIM_OC5_SetConfig+0xc0>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d003      	beq.n	8010cee <TIM_OC5_SetConfig+0x7a>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4a13      	ldr	r2, [pc, #76]	; (8010d38 <TIM_OC5_SetConfig+0xc4>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d109      	bne.n	8010d02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	021b      	lsls	r3, r3, #8
 8010cfc:	697a      	ldr	r2, [r7, #20]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	697a      	ldr	r2, [r7, #20]
 8010d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68fa      	ldr	r2, [r7, #12]
 8010d0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	685a      	ldr	r2, [r3, #4]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	693a      	ldr	r2, [r7, #16]
 8010d1a:	621a      	str	r2, [r3, #32]
}
 8010d1c:	bf00      	nop
 8010d1e:	371c      	adds	r7, #28
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	40012c00 	.word	0x40012c00
 8010d2c:	40013400 	.word	0x40013400
 8010d30:	40014000 	.word	0x40014000
 8010d34:	40014400 	.word	0x40014400
 8010d38:	40014800 	.word	0x40014800

08010d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	b087      	sub	sp, #28
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6a1b      	ldr	r3, [r3, #32]
 8010d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a1b      	ldr	r3, [r3, #32]
 8010d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	021b      	lsls	r3, r3, #8
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	689b      	ldr	r3, [r3, #8]
 8010d88:	051b      	lsls	r3, r3, #20
 8010d8a:	693a      	ldr	r2, [r7, #16]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a18      	ldr	r2, [pc, #96]	; (8010df4 <TIM_OC6_SetConfig+0xb8>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d00f      	beq.n	8010db8 <TIM_OC6_SetConfig+0x7c>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a17      	ldr	r2, [pc, #92]	; (8010df8 <TIM_OC6_SetConfig+0xbc>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d00b      	beq.n	8010db8 <TIM_OC6_SetConfig+0x7c>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a16      	ldr	r2, [pc, #88]	; (8010dfc <TIM_OC6_SetConfig+0xc0>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d007      	beq.n	8010db8 <TIM_OC6_SetConfig+0x7c>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a15      	ldr	r2, [pc, #84]	; (8010e00 <TIM_OC6_SetConfig+0xc4>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d003      	beq.n	8010db8 <TIM_OC6_SetConfig+0x7c>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a14      	ldr	r2, [pc, #80]	; (8010e04 <TIM_OC6_SetConfig+0xc8>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d109      	bne.n	8010dcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	695b      	ldr	r3, [r3, #20]
 8010dc4:	029b      	lsls	r3, r3, #10
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	685a      	ldr	r2, [r3, #4]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	693a      	ldr	r2, [r7, #16]
 8010de4:	621a      	str	r2, [r3, #32]
}
 8010de6:	bf00      	nop
 8010de8:	371c      	adds	r7, #28
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
 8010df2:	bf00      	nop
 8010df4:	40012c00 	.word	0x40012c00
 8010df8:	40013400 	.word	0x40013400
 8010dfc:	40014000 	.word	0x40014000
 8010e00:	40014400 	.word	0x40014400
 8010e04:	40014800 	.word	0x40014800

08010e08 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b087      	sub	sp, #28
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	6a1b      	ldr	r3, [r3, #32]
 8010e1a:	f023 0201 	bic.w	r2, r3, #1
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	699b      	ldr	r3, [r3, #24]
 8010e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	6a1b      	ldr	r3, [r3, #32]
 8010e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	4a26      	ldr	r2, [pc, #152]	; (8010ecc <TIM_TI1_SetConfig+0xc4>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d017      	beq.n	8010e66 <TIM_TI1_SetConfig+0x5e>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e3c:	d013      	beq.n	8010e66 <TIM_TI1_SetConfig+0x5e>
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	4a23      	ldr	r2, [pc, #140]	; (8010ed0 <TIM_TI1_SetConfig+0xc8>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d00f      	beq.n	8010e66 <TIM_TI1_SetConfig+0x5e>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	4a22      	ldr	r2, [pc, #136]	; (8010ed4 <TIM_TI1_SetConfig+0xcc>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d00b      	beq.n	8010e66 <TIM_TI1_SetConfig+0x5e>
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	4a21      	ldr	r2, [pc, #132]	; (8010ed8 <TIM_TI1_SetConfig+0xd0>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d007      	beq.n	8010e66 <TIM_TI1_SetConfig+0x5e>
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	4a20      	ldr	r2, [pc, #128]	; (8010edc <TIM_TI1_SetConfig+0xd4>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d003      	beq.n	8010e66 <TIM_TI1_SetConfig+0x5e>
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	4a1f      	ldr	r2, [pc, #124]	; (8010ee0 <TIM_TI1_SetConfig+0xd8>)
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d101      	bne.n	8010e6a <TIM_TI1_SetConfig+0x62>
 8010e66:	2301      	movs	r3, #1
 8010e68:	e000      	b.n	8010e6c <TIM_TI1_SetConfig+0x64>
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d008      	beq.n	8010e82 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	f023 0303 	bic.w	r3, r3, #3
 8010e76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010e78:	697a      	ldr	r2, [r7, #20]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	617b      	str	r3, [r7, #20]
 8010e80:	e003      	b.n	8010e8a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	f043 0301 	orr.w	r3, r3, #1
 8010e88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	011b      	lsls	r3, r3, #4
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	697a      	ldr	r2, [r7, #20]
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	f023 030a 	bic.w	r3, r3, #10
 8010ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	f003 030a 	and.w	r3, r3, #10
 8010eac:	693a      	ldr	r2, [r7, #16]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	697a      	ldr	r2, [r7, #20]
 8010eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	693a      	ldr	r2, [r7, #16]
 8010ebc:	621a      	str	r2, [r3, #32]
}
 8010ebe:	bf00      	nop
 8010ec0:	371c      	adds	r7, #28
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	40012c00 	.word	0x40012c00
 8010ed0:	40000400 	.word	0x40000400
 8010ed4:	40000800 	.word	0x40000800
 8010ed8:	40000c00 	.word	0x40000c00
 8010edc:	40013400 	.word	0x40013400
 8010ee0:	40014000 	.word	0x40014000

08010ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b087      	sub	sp, #28
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	6a1b      	ldr	r3, [r3, #32]
 8010ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	6a1b      	ldr	r3, [r3, #32]
 8010efa:	f023 0201 	bic.w	r2, r3, #1
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	011b      	lsls	r3, r3, #4
 8010f14:	693a      	ldr	r2, [r7, #16]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f023 030a 	bic.w	r3, r3, #10
 8010f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010f22:	697a      	ldr	r2, [r7, #20]
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	4313      	orrs	r3, r2
 8010f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	693a      	ldr	r2, [r7, #16]
 8010f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	697a      	ldr	r2, [r7, #20]
 8010f34:	621a      	str	r2, [r3, #32]
}
 8010f36:	bf00      	nop
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr

08010f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010f42:	b480      	push	{r7}
 8010f44:	b087      	sub	sp, #28
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60f8      	str	r0, [r7, #12]
 8010f4a:	60b9      	str	r1, [r7, #8]
 8010f4c:	607a      	str	r2, [r7, #4]
 8010f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6a1b      	ldr	r3, [r3, #32]
 8010f54:	f023 0210 	bic.w	r2, r3, #16
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6a1b      	ldr	r3, [r3, #32]
 8010f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	021b      	lsls	r3, r3, #8
 8010f74:	697a      	ldr	r2, [r7, #20]
 8010f76:	4313      	orrs	r3, r2
 8010f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	031b      	lsls	r3, r3, #12
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	697a      	ldr	r2, [r7, #20]
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	011b      	lsls	r3, r3, #4
 8010f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010f9e:	693a      	ldr	r2, [r7, #16]
 8010fa0:	4313      	orrs	r3, r2
 8010fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	697a      	ldr	r2, [r7, #20]
 8010fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	693a      	ldr	r2, [r7, #16]
 8010fae:	621a      	str	r2, [r3, #32]
}
 8010fb0:	bf00      	nop
 8010fb2:	371c      	adds	r7, #28
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b087      	sub	sp, #28
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	60f8      	str	r0, [r7, #12]
 8010fc4:	60b9      	str	r1, [r7, #8]
 8010fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	6a1b      	ldr	r3, [r3, #32]
 8010fcc:	f023 0210 	bic.w	r2, r3, #16
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	699b      	ldr	r3, [r3, #24]
 8010fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	031b      	lsls	r3, r3, #12
 8010fec:	697a      	ldr	r2, [r7, #20]
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	011b      	lsls	r3, r3, #4
 8010ffe:	693a      	ldr	r2, [r7, #16]
 8011000:	4313      	orrs	r3, r2
 8011002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	697a      	ldr	r2, [r7, #20]
 8011008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	693a      	ldr	r2, [r7, #16]
 801100e:	621a      	str	r2, [r3, #32]
}
 8011010:	bf00      	nop
 8011012:	371c      	adds	r7, #28
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801101c:	b480      	push	{r7}
 801101e:	b087      	sub	sp, #28
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
 8011028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6a1b      	ldr	r3, [r3, #32]
 801102e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	69db      	ldr	r3, [r3, #28]
 801103a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6a1b      	ldr	r3, [r3, #32]
 8011040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	f023 0303 	bic.w	r3, r3, #3
 8011048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801104a:	697a      	ldr	r2, [r7, #20]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	4313      	orrs	r3, r2
 8011050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	011b      	lsls	r3, r3, #4
 801105e:	b2db      	uxtb	r3, r3
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	4313      	orrs	r3, r2
 8011064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801106c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	021b      	lsls	r3, r3, #8
 8011072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8011076:	693a      	ldr	r2, [r7, #16]
 8011078:	4313      	orrs	r3, r2
 801107a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	697a      	ldr	r2, [r7, #20]
 8011080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	693a      	ldr	r2, [r7, #16]
 8011086:	621a      	str	r2, [r3, #32]
}
 8011088:	bf00      	nop
 801108a:	371c      	adds	r7, #28
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011094:	b480      	push	{r7}
 8011096:	b087      	sub	sp, #28
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
 80110a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	69db      	ldr	r3, [r3, #28]
 80110b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	6a1b      	ldr	r3, [r3, #32]
 80110b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	021b      	lsls	r3, r3, #8
 80110c6:	697a      	ldr	r2, [r7, #20]
 80110c8:	4313      	orrs	r3, r2
 80110ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80110d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	031b      	lsls	r3, r3, #12
 80110d8:	b29b      	uxth	r3, r3
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	4313      	orrs	r3, r2
 80110de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80110e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	031b      	lsls	r3, r3, #12
 80110ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	4313      	orrs	r3, r2
 80110f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	697a      	ldr	r2, [r7, #20]
 80110fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	693a      	ldr	r2, [r7, #16]
 8011100:	621a      	str	r2, [r3, #32]
}
 8011102:	bf00      	nop
 8011104:	371c      	adds	r7, #28
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801110e:	b480      	push	{r7}
 8011110:	b085      	sub	sp, #20
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801112a:	683a      	ldr	r2, [r7, #0]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	4313      	orrs	r3, r2
 8011130:	f043 0307 	orr.w	r3, r3, #7
 8011134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	609a      	str	r2, [r3, #8]
}
 801113c:	bf00      	nop
 801113e:	3714      	adds	r7, #20
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011148:	b480      	push	{r7}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
 8011154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	689b      	ldr	r3, [r3, #8]
 801115a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	021a      	lsls	r2, r3, #8
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	431a      	orrs	r2, r3
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	4313      	orrs	r3, r2
 8011170:	697a      	ldr	r2, [r7, #20]
 8011172:	4313      	orrs	r3, r2
 8011174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	697a      	ldr	r2, [r7, #20]
 801117a:	609a      	str	r2, [r3, #8]
}
 801117c:	bf00      	nop
 801117e:	371c      	adds	r7, #28
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr

08011188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011188:	b480      	push	{r7}
 801118a:	b087      	sub	sp, #28
 801118c:	af00      	add	r7, sp, #0
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	f003 031f 	and.w	r3, r3, #31
 801119a:	2201      	movs	r2, #1
 801119c:	fa02 f303 	lsl.w	r3, r2, r3
 80111a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6a1a      	ldr	r2, [r3, #32]
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	43db      	mvns	r3, r3
 80111aa:	401a      	ands	r2, r3
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	6a1a      	ldr	r2, [r3, #32]
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	f003 031f 	and.w	r3, r3, #31
 80111ba:	6879      	ldr	r1, [r7, #4]
 80111bc:	fa01 f303 	lsl.w	r3, r1, r3
 80111c0:	431a      	orrs	r2, r3
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	621a      	str	r2, [r3, #32]
}
 80111c6:	bf00      	nop
 80111c8:	371c      	adds	r7, #28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
	...

080111d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	d101      	bne.n	80111ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80111e8:	2302      	movs	r3, #2
 80111ea:	e068      	b.n	80112be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2201      	movs	r2, #1
 80111f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2202      	movs	r2, #2
 80111f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	689b      	ldr	r3, [r3, #8]
 801120a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a2e      	ldr	r2, [pc, #184]	; (80112cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d004      	beq.n	8011220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	4a2d      	ldr	r2, [pc, #180]	; (80112d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d108      	bne.n	8011232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	68fa      	ldr	r2, [r7, #12]
 801122e:	4313      	orrs	r3, r2
 8011230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	68fa      	ldr	r2, [r7, #12]
 8011240:	4313      	orrs	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68fa      	ldr	r2, [r7, #12]
 801124a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4a1e      	ldr	r2, [pc, #120]	; (80112cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8011252:	4293      	cmp	r3, r2
 8011254:	d01d      	beq.n	8011292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801125e:	d018      	beq.n	8011292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a1b      	ldr	r2, [pc, #108]	; (80112d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d013      	beq.n	8011292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4a1a      	ldr	r2, [pc, #104]	; (80112d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d00e      	beq.n	8011292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a18      	ldr	r2, [pc, #96]	; (80112dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d009      	beq.n	8011292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4a13      	ldr	r2, [pc, #76]	; (80112d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8011284:	4293      	cmp	r3, r2
 8011286:	d004      	beq.n	8011292 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	4a14      	ldr	r2, [pc, #80]	; (80112e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801128e:	4293      	cmp	r3, r2
 8011290:	d10c      	bne.n	80112ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	689b      	ldr	r3, [r3, #8]
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	4313      	orrs	r3, r2
 80112a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2201      	movs	r2, #1
 80112b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80112bc:	2300      	movs	r3, #0
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	40012c00 	.word	0x40012c00
 80112d0:	40013400 	.word	0x40013400
 80112d4:	40000400 	.word	0x40000400
 80112d8:	40000800 	.word	0x40000800
 80112dc:	40000c00 	.word	0x40000c00
 80112e0:	40014000 	.word	0x40014000

080112e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80112e4:	b480      	push	{r7}
 80112e6:	b085      	sub	sp, #20
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80112ee:	2300      	movs	r3, #0
 80112f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d101      	bne.n	8011300 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80112fc:	2302      	movs	r3, #2
 80112fe:	e087      	b.n	8011410 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	4313      	orrs	r3, r2
 8011314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	4313      	orrs	r3, r2
 8011322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	4313      	orrs	r3, r2
 8011330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4313      	orrs	r3, r2
 801133e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	691b      	ldr	r3, [r3, #16]
 801134a:	4313      	orrs	r3, r2
 801134c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	695b      	ldr	r3, [r3, #20]
 8011358:	4313      	orrs	r3, r2
 801135a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011366:	4313      	orrs	r3, r2
 8011368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	699b      	ldr	r3, [r3, #24]
 8011374:	041b      	lsls	r3, r3, #16
 8011376:	4313      	orrs	r3, r2
 8011378:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a27      	ldr	r2, [pc, #156]	; (801141c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d004      	beq.n	801138e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4a25      	ldr	r2, [pc, #148]	; (8011420 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d106      	bne.n	801139c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	69db      	ldr	r3, [r3, #28]
 8011398:	4313      	orrs	r3, r2
 801139a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a1e      	ldr	r2, [pc, #120]	; (801141c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d004      	beq.n	80113b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	4a1d      	ldr	r2, [pc, #116]	; (8011420 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d126      	bne.n	80113fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ba:	051b      	lsls	r3, r3, #20
 80113bc:	4313      	orrs	r3, r2
 80113be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	6a1b      	ldr	r3, [r3, #32]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d8:	4313      	orrs	r3, r2
 80113da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a0e      	ldr	r2, [pc, #56]	; (801141c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d004      	beq.n	80113f0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a0d      	ldr	r2, [pc, #52]	; (8011420 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d106      	bne.n	80113fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	4313      	orrs	r3, r2
 80113fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	68fa      	ldr	r2, [r7, #12]
 8011404:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2200      	movs	r2, #0
 801140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801140e:	2300      	movs	r3, #0
}
 8011410:	4618      	mov	r0, r3
 8011412:	3714      	adds	r7, #20
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	40012c00 	.word	0x40012c00
 8011420:	40013400 	.word	0x40013400

08011424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011424:	b480      	push	{r7}
 8011426:	b083      	sub	sp, #12
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801142c:	bf00      	nop
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011440:	bf00      	nop
 8011442:	370c      	adds	r7, #12
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr

0801144c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011454:	bf00      	nop
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr

08011460 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801146e:	2301      	movs	r3, #1
 8011470:	e042      	b.n	80114f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011478:	2b00      	cmp	r3, #0
 801147a:	d106      	bne.n	801148a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7f7 fda7 	bl	8008fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2224      	movs	r2, #36	; 0x24
 801148e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f022 0201 	bic.w	r2, r2, #1
 80114a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f000 fbbc 	bl	8011c20 <UART_SetConfig>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d101      	bne.n	80114b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80114ae:	2301      	movs	r3, #1
 80114b0:	e022      	b.n	80114f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d002      	beq.n	80114c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 feb0 	bl	8012220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	685a      	ldr	r2, [r3, #4]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80114ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	689a      	ldr	r2, [r3, #8]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80114de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	681a      	ldr	r2, [r3, #0]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f042 0201 	orr.w	r2, r2, #1
 80114ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 ff37 	bl	8012364 <UART_CheckIdleState>
 80114f6:	4603      	mov	r3, r0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3708      	adds	r7, #8
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b08a      	sub	sp, #40	; 0x28
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	4613      	mov	r3, r2
 801150c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011514:	2b20      	cmp	r3, #32
 8011516:	d137      	bne.n	8011588 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d002      	beq.n	8011524 <HAL_UART_Receive_IT+0x24>
 801151e:	88fb      	ldrh	r3, [r7, #6]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011524:	2301      	movs	r3, #1
 8011526:	e030      	b.n	801158a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2200      	movs	r2, #0
 801152c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4a18      	ldr	r2, [pc, #96]	; (8011594 <HAL_UART_Receive_IT+0x94>)
 8011534:	4293      	cmp	r3, r2
 8011536:	d01f      	beq.n	8011578 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011542:	2b00      	cmp	r3, #0
 8011544:	d018      	beq.n	8011578 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	e853 3f00 	ldrex	r3, [r3]
 8011552:	613b      	str	r3, [r7, #16]
   return(result);
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801155a:	627b      	str	r3, [r7, #36]	; 0x24
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	461a      	mov	r2, r3
 8011562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011564:	623b      	str	r3, [r7, #32]
 8011566:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011568:	69f9      	ldr	r1, [r7, #28]
 801156a:	6a3a      	ldr	r2, [r7, #32]
 801156c:	e841 2300 	strex	r3, r2, [r1]
 8011570:	61bb      	str	r3, [r7, #24]
   return(result);
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1e6      	bne.n	8011546 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011578:	88fb      	ldrh	r3, [r7, #6]
 801157a:	461a      	mov	r2, r3
 801157c:	68b9      	ldr	r1, [r7, #8]
 801157e:	68f8      	ldr	r0, [r7, #12]
 8011580:	f001 f802 	bl	8012588 <UART_Start_Receive_IT>
 8011584:	4603      	mov	r3, r0
 8011586:	e000      	b.n	801158a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011588:	2302      	movs	r3, #2
  }
}
 801158a:	4618      	mov	r0, r3
 801158c:	3728      	adds	r7, #40	; 0x28
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	40008000 	.word	0x40008000

08011598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b0ba      	sub	sp, #232	; 0xe8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	69db      	ldr	r3, [r3, #28]
 80115a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80115be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80115c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80115c6:	4013      	ands	r3, r2
 80115c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80115cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d11b      	bne.n	801160c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80115d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115d8:	f003 0320 	and.w	r3, r3, #32
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d015      	beq.n	801160c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80115e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115e4:	f003 0320 	and.w	r3, r3, #32
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d105      	bne.n	80115f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80115ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d009      	beq.n	801160c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f000 82e3 	beq.w	8011bc8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	4798      	blx	r3
      }
      return;
 801160a:	e2dd      	b.n	8011bc8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801160c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011610:	2b00      	cmp	r3, #0
 8011612:	f000 8123 	beq.w	801185c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011616:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801161a:	4b8d      	ldr	r3, [pc, #564]	; (8011850 <HAL_UART_IRQHandler+0x2b8>)
 801161c:	4013      	ands	r3, r2
 801161e:	2b00      	cmp	r3, #0
 8011620:	d106      	bne.n	8011630 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011626:	4b8b      	ldr	r3, [pc, #556]	; (8011854 <HAL_UART_IRQHandler+0x2bc>)
 8011628:	4013      	ands	r3, r2
 801162a:	2b00      	cmp	r3, #0
 801162c:	f000 8116 	beq.w	801185c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011634:	f003 0301 	and.w	r3, r3, #1
 8011638:	2b00      	cmp	r3, #0
 801163a:	d011      	beq.n	8011660 <HAL_UART_IRQHandler+0xc8>
 801163c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011644:	2b00      	cmp	r3, #0
 8011646:	d00b      	beq.n	8011660 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2201      	movs	r2, #1
 801164e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011656:	f043 0201 	orr.w	r2, r3, #1
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011664:	f003 0302 	and.w	r3, r3, #2
 8011668:	2b00      	cmp	r3, #0
 801166a:	d011      	beq.n	8011690 <HAL_UART_IRQHandler+0xf8>
 801166c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	d00b      	beq.n	8011690 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2202      	movs	r2, #2
 801167e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011686:	f043 0204 	orr.w	r2, r3, #4
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011694:	f003 0304 	and.w	r3, r3, #4
 8011698:	2b00      	cmp	r3, #0
 801169a:	d011      	beq.n	80116c0 <HAL_UART_IRQHandler+0x128>
 801169c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80116a0:	f003 0301 	and.w	r3, r3, #1
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d00b      	beq.n	80116c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2204      	movs	r2, #4
 80116ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116b6:	f043 0202 	orr.w	r2, r3, #2
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80116c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116c4:	f003 0308 	and.w	r3, r3, #8
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d017      	beq.n	80116fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80116cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116d0:	f003 0320 	and.w	r3, r3, #32
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d105      	bne.n	80116e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80116d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80116dc:	4b5c      	ldr	r3, [pc, #368]	; (8011850 <HAL_UART_IRQHandler+0x2b8>)
 80116de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00b      	beq.n	80116fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2208      	movs	r2, #8
 80116ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116f2:	f043 0208 	orr.w	r2, r3, #8
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80116fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011704:	2b00      	cmp	r3, #0
 8011706:	d012      	beq.n	801172e <HAL_UART_IRQHandler+0x196>
 8011708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801170c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00c      	beq.n	801172e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801171c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011724:	f043 0220 	orr.w	r2, r3, #32
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011734:	2b00      	cmp	r3, #0
 8011736:	f000 8249 	beq.w	8011bcc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801173a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801173e:	f003 0320 	and.w	r3, r3, #32
 8011742:	2b00      	cmp	r3, #0
 8011744:	d013      	beq.n	801176e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801174a:	f003 0320 	and.w	r3, r3, #32
 801174e:	2b00      	cmp	r3, #0
 8011750:	d105      	bne.n	801175e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801175a:	2b00      	cmp	r3, #0
 801175c:	d007      	beq.n	801176e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011762:	2b00      	cmp	r3, #0
 8011764:	d003      	beq.n	801176e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011774:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011782:	2b40      	cmp	r3, #64	; 0x40
 8011784:	d005      	beq.n	8011792 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801178a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801178e:	2b00      	cmp	r3, #0
 8011790:	d054      	beq.n	801183c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f001 f81a 	bl	80127cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117a2:	2b40      	cmp	r3, #64	; 0x40
 80117a4:	d146      	bne.n	8011834 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3308      	adds	r3, #8
 80117ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80117b4:	e853 3f00 	ldrex	r3, [r3]
 80117b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80117bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80117c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	3308      	adds	r3, #8
 80117ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80117d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80117d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80117de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80117e2:	e841 2300 	strex	r3, r2, [r1]
 80117e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80117ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1d9      	bne.n	80117a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d017      	beq.n	801182c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011802:	4a15      	ldr	r2, [pc, #84]	; (8011858 <HAL_UART_IRQHandler+0x2c0>)
 8011804:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801180c:	4618      	mov	r0, r3
 801180e:	f7fa f87c 	bl	800b90a <HAL_DMA_Abort_IT>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d019      	beq.n	801184c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011826:	4610      	mov	r0, r2
 8011828:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801182a:	e00f      	b.n	801184c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 f9e1 	bl	8011bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011832:	e00b      	b.n	801184c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f000 f9dd 	bl	8011bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801183a:	e007      	b.n	801184c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 f9d9 	bl	8011bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801184a:	e1bf      	b.n	8011bcc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801184c:	bf00      	nop
    return;
 801184e:	e1bd      	b.n	8011bcc <HAL_UART_IRQHandler+0x634>
 8011850:	10000001 	.word	0x10000001
 8011854:	04000120 	.word	0x04000120
 8011858:	08012899 	.word	0x08012899

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011860:	2b01      	cmp	r3, #1
 8011862:	f040 8153 	bne.w	8011b0c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801186a:	f003 0310 	and.w	r3, r3, #16
 801186e:	2b00      	cmp	r3, #0
 8011870:	f000 814c 	beq.w	8011b0c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011878:	f003 0310 	and.w	r3, r3, #16
 801187c:	2b00      	cmp	r3, #0
 801187e:	f000 8145 	beq.w	8011b0c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2210      	movs	r2, #16
 8011888:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	689b      	ldr	r3, [r3, #8]
 8011890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011894:	2b40      	cmp	r3, #64	; 0x40
 8011896:	f040 80bb 	bne.w	8011a10 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80118a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	f000 818f 	beq.w	8011bd0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80118b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80118bc:	429a      	cmp	r2, r3
 80118be:	f080 8187 	bcs.w	8011bd0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80118c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f003 0320 	and.w	r3, r3, #32
 80118da:	2b00      	cmp	r3, #0
 80118dc:	f040 8087 	bne.w	80119ee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80118ec:	e853 3f00 	ldrex	r3, [r3]
 80118f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80118f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80118f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80118fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801190a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801190e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801191a:	e841 2300 	strex	r3, r2, [r1]
 801191e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011926:	2b00      	cmp	r3, #0
 8011928:	d1da      	bne.n	80118e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	3308      	adds	r3, #8
 8011930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011934:	e853 3f00 	ldrex	r3, [r3]
 8011938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801193a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801193c:	f023 0301 	bic.w	r3, r3, #1
 8011940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	3308      	adds	r3, #8
 801194a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801194e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801195a:	e841 2300 	strex	r3, r2, [r1]
 801195e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1e1      	bne.n	801192a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	3308      	adds	r3, #8
 801196c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011970:	e853 3f00 	ldrex	r3, [r3]
 8011974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801197c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	3308      	adds	r3, #8
 8011986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801198a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801198c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011992:	e841 2300 	strex	r3, r2, [r1]
 8011996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801199a:	2b00      	cmp	r3, #0
 801199c:	d1e3      	bne.n	8011966 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2220      	movs	r2, #32
 80119a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b4:	e853 3f00 	ldrex	r3, [r3]
 80119b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80119ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119bc:	f023 0310 	bic.w	r3, r3, #16
 80119c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	461a      	mov	r2, r3
 80119ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80119ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80119d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80119d6:	e841 2300 	strex	r3, r2, [r1]
 80119da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80119dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d1e4      	bne.n	80119ac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f9 ff32 	bl	800b852 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2202      	movs	r2, #2
 80119f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	1ad3      	subs	r3, r2, r3
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	4619      	mov	r1, r3
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f8fd 	bl	8011c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011a0e:	e0df      	b.n	8011bd0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f000 80d1 	beq.w	8011bd4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8011a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f000 80cc 	beq.w	8011bd4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a44:	e853 3f00 	ldrex	r3, [r3]
 8011a48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	461a      	mov	r2, r3
 8011a5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8011a60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a66:	e841 2300 	strex	r3, r2, [r1]
 8011a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d1e4      	bne.n	8011a3c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	3308      	adds	r3, #8
 8011a78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7c:	e853 3f00 	ldrex	r3, [r3]
 8011a80:	623b      	str	r3, [r7, #32]
   return(result);
 8011a82:	6a3b      	ldr	r3, [r7, #32]
 8011a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011a88:	f023 0301 	bic.w	r3, r3, #1
 8011a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	3308      	adds	r3, #8
 8011a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8011a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aa2:	e841 2300 	strex	r3, r2, [r1]
 8011aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d1e1      	bne.n	8011a72 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2220      	movs	r2, #32
 8011ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2200      	movs	r2, #0
 8011ac0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	e853 3f00 	ldrex	r3, [r3]
 8011ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f023 0310 	bic.w	r3, r3, #16
 8011ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	461a      	mov	r2, r3
 8011ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011ae4:	61fb      	str	r3, [r7, #28]
 8011ae6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ae8:	69b9      	ldr	r1, [r7, #24]
 8011aea:	69fa      	ldr	r2, [r7, #28]
 8011aec:	e841 2300 	strex	r3, r2, [r1]
 8011af0:	617b      	str	r3, [r7, #20]
   return(result);
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d1e4      	bne.n	8011ac2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2202      	movs	r2, #2
 8011afc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011b02:	4619      	mov	r1, r3
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f000 f87f 	bl	8011c08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011b0a:	e063      	b.n	8011bd4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d00e      	beq.n	8011b36 <HAL_UART_IRQHandler+0x59e>
 8011b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d008      	beq.n	8011b36 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f001 fc10 	bl	8013354 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b34:	e051      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d014      	beq.n	8011b6c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d105      	bne.n	8011b5a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d008      	beq.n	8011b6c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d03a      	beq.n	8011bd8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	4798      	blx	r3
    }
    return;
 8011b6a:	e035      	b.n	8011bd8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d009      	beq.n	8011b8c <HAL_UART_IRQHandler+0x5f4>
 8011b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d003      	beq.n	8011b8c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f000 fe9d 	bl	80128c4 <UART_EndTransmit_IT>
    return;
 8011b8a:	e026      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d009      	beq.n	8011bac <HAL_UART_IRQHandler+0x614>
 8011b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d003      	beq.n	8011bac <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f001 fbe9 	bl	801337c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011baa:	e016      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d010      	beq.n	8011bda <HAL_UART_IRQHandler+0x642>
 8011bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	da0c      	bge.n	8011bda <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f001 fbd1 	bl	8013368 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011bc6:	e008      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
      return;
 8011bc8:	bf00      	nop
 8011bca:	e006      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
    return;
 8011bcc:	bf00      	nop
 8011bce:	e004      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
      return;
 8011bd0:	bf00      	nop
 8011bd2:	e002      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
      return;
 8011bd4:	bf00      	nop
 8011bd6:	e000      	b.n	8011bda <HAL_UART_IRQHandler+0x642>
    return;
 8011bd8:	bf00      	nop
  }
}
 8011bda:	37e8      	adds	r7, #232	; 0xe8
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011bfc:	bf00      	nop
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b083      	sub	sp, #12
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	460b      	mov	r3, r1
 8011c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011c14:	bf00      	nop
 8011c16:	370c      	adds	r7, #12
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr

08011c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c24:	b08c      	sub	sp, #48	; 0x30
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	689a      	ldr	r2, [r3, #8]
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	691b      	ldr	r3, [r3, #16]
 8011c38:	431a      	orrs	r2, r3
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	695b      	ldr	r3, [r3, #20]
 8011c3e:	431a      	orrs	r2, r3
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	4313      	orrs	r3, r2
 8011c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	4baa      	ldr	r3, [pc, #680]	; (8011ef8 <UART_SetConfig+0x2d8>)
 8011c50:	4013      	ands	r3, r2
 8011c52:	697a      	ldr	r2, [r7, #20]
 8011c54:	6812      	ldr	r2, [r2, #0]
 8011c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c58:	430b      	orrs	r3, r1
 8011c5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	68da      	ldr	r2, [r3, #12]
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	430a      	orrs	r2, r1
 8011c70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4a9f      	ldr	r2, [pc, #636]	; (8011efc <UART_SetConfig+0x2dc>)
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	d004      	beq.n	8011c8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	6a1b      	ldr	r3, [r3, #32]
 8011c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	689b      	ldr	r3, [r3, #8]
 8011c92:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8011c96:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8011c9a:	697a      	ldr	r2, [r7, #20]
 8011c9c:	6812      	ldr	r2, [r2, #0]
 8011c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ca0:	430b      	orrs	r3, r1
 8011ca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011caa:	f023 010f 	bic.w	r1, r3, #15
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	430a      	orrs	r2, r1
 8011cb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	4a90      	ldr	r2, [pc, #576]	; (8011f00 <UART_SetConfig+0x2e0>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d125      	bne.n	8011d10 <UART_SetConfig+0xf0>
 8011cc4:	4b8f      	ldr	r3, [pc, #572]	; (8011f04 <UART_SetConfig+0x2e4>)
 8011cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cca:	f003 0303 	and.w	r3, r3, #3
 8011cce:	2b03      	cmp	r3, #3
 8011cd0:	d81a      	bhi.n	8011d08 <UART_SetConfig+0xe8>
 8011cd2:	a201      	add	r2, pc, #4	; (adr r2, 8011cd8 <UART_SetConfig+0xb8>)
 8011cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd8:	08011ce9 	.word	0x08011ce9
 8011cdc:	08011cf9 	.word	0x08011cf9
 8011ce0:	08011cf1 	.word	0x08011cf1
 8011ce4:	08011d01 	.word	0x08011d01
 8011ce8:	2301      	movs	r3, #1
 8011cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011cee:	e116      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011cf0:	2302      	movs	r3, #2
 8011cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011cf6:	e112      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011cf8:	2304      	movs	r3, #4
 8011cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011cfe:	e10e      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d00:	2308      	movs	r3, #8
 8011d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d06:	e10a      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d08:	2310      	movs	r3, #16
 8011d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d0e:	e106      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4a7c      	ldr	r2, [pc, #496]	; (8011f08 <UART_SetConfig+0x2e8>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d138      	bne.n	8011d8c <UART_SetConfig+0x16c>
 8011d1a:	4b7a      	ldr	r3, [pc, #488]	; (8011f04 <UART_SetConfig+0x2e4>)
 8011d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d20:	f003 030c 	and.w	r3, r3, #12
 8011d24:	2b0c      	cmp	r3, #12
 8011d26:	d82d      	bhi.n	8011d84 <UART_SetConfig+0x164>
 8011d28:	a201      	add	r2, pc, #4	; (adr r2, 8011d30 <UART_SetConfig+0x110>)
 8011d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2e:	bf00      	nop
 8011d30:	08011d65 	.word	0x08011d65
 8011d34:	08011d85 	.word	0x08011d85
 8011d38:	08011d85 	.word	0x08011d85
 8011d3c:	08011d85 	.word	0x08011d85
 8011d40:	08011d75 	.word	0x08011d75
 8011d44:	08011d85 	.word	0x08011d85
 8011d48:	08011d85 	.word	0x08011d85
 8011d4c:	08011d85 	.word	0x08011d85
 8011d50:	08011d6d 	.word	0x08011d6d
 8011d54:	08011d85 	.word	0x08011d85
 8011d58:	08011d85 	.word	0x08011d85
 8011d5c:	08011d85 	.word	0x08011d85
 8011d60:	08011d7d 	.word	0x08011d7d
 8011d64:	2300      	movs	r3, #0
 8011d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d6a:	e0d8      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d72:	e0d4      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d74:	2304      	movs	r3, #4
 8011d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d7a:	e0d0      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d7c:	2308      	movs	r3, #8
 8011d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d82:	e0cc      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d84:	2310      	movs	r3, #16
 8011d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011d8a:	e0c8      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4a5e      	ldr	r2, [pc, #376]	; (8011f0c <UART_SetConfig+0x2ec>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d125      	bne.n	8011de2 <UART_SetConfig+0x1c2>
 8011d96:	4b5b      	ldr	r3, [pc, #364]	; (8011f04 <UART_SetConfig+0x2e4>)
 8011d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011da0:	2b30      	cmp	r3, #48	; 0x30
 8011da2:	d016      	beq.n	8011dd2 <UART_SetConfig+0x1b2>
 8011da4:	2b30      	cmp	r3, #48	; 0x30
 8011da6:	d818      	bhi.n	8011dda <UART_SetConfig+0x1ba>
 8011da8:	2b20      	cmp	r3, #32
 8011daa:	d00a      	beq.n	8011dc2 <UART_SetConfig+0x1a2>
 8011dac:	2b20      	cmp	r3, #32
 8011dae:	d814      	bhi.n	8011dda <UART_SetConfig+0x1ba>
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d002      	beq.n	8011dba <UART_SetConfig+0x19a>
 8011db4:	2b10      	cmp	r3, #16
 8011db6:	d008      	beq.n	8011dca <UART_SetConfig+0x1aa>
 8011db8:	e00f      	b.n	8011dda <UART_SetConfig+0x1ba>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011dc0:	e0ad      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011dc2:	2302      	movs	r3, #2
 8011dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011dc8:	e0a9      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011dca:	2304      	movs	r3, #4
 8011dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011dd0:	e0a5      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011dd2:	2308      	movs	r3, #8
 8011dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011dd8:	e0a1      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011dda:	2310      	movs	r3, #16
 8011ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011de0:	e09d      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4a4a      	ldr	r2, [pc, #296]	; (8011f10 <UART_SetConfig+0x2f0>)
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d125      	bne.n	8011e38 <UART_SetConfig+0x218>
 8011dec:	4b45      	ldr	r3, [pc, #276]	; (8011f04 <UART_SetConfig+0x2e4>)
 8011dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011df2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011df6:	2bc0      	cmp	r3, #192	; 0xc0
 8011df8:	d016      	beq.n	8011e28 <UART_SetConfig+0x208>
 8011dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8011dfc:	d818      	bhi.n	8011e30 <UART_SetConfig+0x210>
 8011dfe:	2b80      	cmp	r3, #128	; 0x80
 8011e00:	d00a      	beq.n	8011e18 <UART_SetConfig+0x1f8>
 8011e02:	2b80      	cmp	r3, #128	; 0x80
 8011e04:	d814      	bhi.n	8011e30 <UART_SetConfig+0x210>
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <UART_SetConfig+0x1f0>
 8011e0a:	2b40      	cmp	r3, #64	; 0x40
 8011e0c:	d008      	beq.n	8011e20 <UART_SetConfig+0x200>
 8011e0e:	e00f      	b.n	8011e30 <UART_SetConfig+0x210>
 8011e10:	2300      	movs	r3, #0
 8011e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e16:	e082      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e18:	2302      	movs	r3, #2
 8011e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e1e:	e07e      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e20:	2304      	movs	r3, #4
 8011e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e26:	e07a      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e28:	2308      	movs	r3, #8
 8011e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e2e:	e076      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e30:	2310      	movs	r3, #16
 8011e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e36:	e072      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	4a35      	ldr	r2, [pc, #212]	; (8011f14 <UART_SetConfig+0x2f4>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d12a      	bne.n	8011e98 <UART_SetConfig+0x278>
 8011e42:	4b30      	ldr	r3, [pc, #192]	; (8011f04 <UART_SetConfig+0x2e4>)
 8011e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e50:	d01a      	beq.n	8011e88 <UART_SetConfig+0x268>
 8011e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011e56:	d81b      	bhi.n	8011e90 <UART_SetConfig+0x270>
 8011e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e5c:	d00c      	beq.n	8011e78 <UART_SetConfig+0x258>
 8011e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e62:	d815      	bhi.n	8011e90 <UART_SetConfig+0x270>
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d003      	beq.n	8011e70 <UART_SetConfig+0x250>
 8011e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e6c:	d008      	beq.n	8011e80 <UART_SetConfig+0x260>
 8011e6e:	e00f      	b.n	8011e90 <UART_SetConfig+0x270>
 8011e70:	2300      	movs	r3, #0
 8011e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e76:	e052      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e78:	2302      	movs	r3, #2
 8011e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e7e:	e04e      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e80:	2304      	movs	r3, #4
 8011e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e86:	e04a      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e88:	2308      	movs	r3, #8
 8011e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e8e:	e046      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e90:	2310      	movs	r3, #16
 8011e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e96:	e042      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a17      	ldr	r2, [pc, #92]	; (8011efc <UART_SetConfig+0x2dc>)
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d13a      	bne.n	8011f18 <UART_SetConfig+0x2f8>
 8011ea2:	4b18      	ldr	r3, [pc, #96]	; (8011f04 <UART_SetConfig+0x2e4>)
 8011ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011eb0:	d01a      	beq.n	8011ee8 <UART_SetConfig+0x2c8>
 8011eb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011eb6:	d81b      	bhi.n	8011ef0 <UART_SetConfig+0x2d0>
 8011eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ebc:	d00c      	beq.n	8011ed8 <UART_SetConfig+0x2b8>
 8011ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ec2:	d815      	bhi.n	8011ef0 <UART_SetConfig+0x2d0>
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d003      	beq.n	8011ed0 <UART_SetConfig+0x2b0>
 8011ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ecc:	d008      	beq.n	8011ee0 <UART_SetConfig+0x2c0>
 8011ece:	e00f      	b.n	8011ef0 <UART_SetConfig+0x2d0>
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ed6:	e022      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011ed8:	2302      	movs	r3, #2
 8011eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ede:	e01e      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011ee0:	2304      	movs	r3, #4
 8011ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ee6:	e01a      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011ee8:	2308      	movs	r3, #8
 8011eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011eee:	e016      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011ef0:	2310      	movs	r3, #16
 8011ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011ef6:	e012      	b.n	8011f1e <UART_SetConfig+0x2fe>
 8011ef8:	cfff69f3 	.word	0xcfff69f3
 8011efc:	40008000 	.word	0x40008000
 8011f00:	40013800 	.word	0x40013800
 8011f04:	40021000 	.word	0x40021000
 8011f08:	40004400 	.word	0x40004400
 8011f0c:	40004800 	.word	0x40004800
 8011f10:	40004c00 	.word	0x40004c00
 8011f14:	40005000 	.word	0x40005000
 8011f18:	2310      	movs	r3, #16
 8011f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	4ab0      	ldr	r2, [pc, #704]	; (80121e4 <UART_SetConfig+0x5c4>)
 8011f24:	4293      	cmp	r3, r2
 8011f26:	f040 809b 	bne.w	8012060 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011f2e:	2b08      	cmp	r3, #8
 8011f30:	d827      	bhi.n	8011f82 <UART_SetConfig+0x362>
 8011f32:	a201      	add	r2, pc, #4	; (adr r2, 8011f38 <UART_SetConfig+0x318>)
 8011f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f38:	08011f5d 	.word	0x08011f5d
 8011f3c:	08011f65 	.word	0x08011f65
 8011f40:	08011f6d 	.word	0x08011f6d
 8011f44:	08011f83 	.word	0x08011f83
 8011f48:	08011f73 	.word	0x08011f73
 8011f4c:	08011f83 	.word	0x08011f83
 8011f50:	08011f83 	.word	0x08011f83
 8011f54:	08011f83 	.word	0x08011f83
 8011f58:	08011f7b 	.word	0x08011f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f5c:	f7fb fefc 	bl	800dd58 <HAL_RCC_GetPCLK1Freq>
 8011f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f62:	e014      	b.n	8011f8e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011f64:	f7fb ff0c 	bl	800dd80 <HAL_RCC_GetPCLK2Freq>
 8011f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f6a:	e010      	b.n	8011f8e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011f6c:	4b9e      	ldr	r3, [pc, #632]	; (80121e8 <UART_SetConfig+0x5c8>)
 8011f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011f70:	e00d      	b.n	8011f8e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f72:	f7fb fe3f 	bl	800dbf4 <HAL_RCC_GetSysClockFreq>
 8011f76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011f78:	e009      	b.n	8011f8e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011f80:	e005      	b.n	8011f8e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8011f82:	2300      	movs	r3, #0
 8011f84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011f86:	2301      	movs	r3, #1
 8011f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f000 8130 	beq.w	80121f6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9a:	4a94      	ldr	r2, [pc, #592]	; (80121ec <UART_SetConfig+0x5cc>)
 8011f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fa8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	4613      	mov	r3, r2
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	4413      	add	r3, r2
 8011fb4:	69ba      	ldr	r2, [r7, #24]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d305      	bcc.n	8011fc6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011fc0:	69ba      	ldr	r2, [r7, #24]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d903      	bls.n	8011fce <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011fcc:	e113      	b.n	80121f6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	60bb      	str	r3, [r7, #8]
 8011fd4:	60fa      	str	r2, [r7, #12]
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fda:	4a84      	ldr	r2, [pc, #528]	; (80121ec <UART_SetConfig+0x5cc>)
 8011fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	603b      	str	r3, [r7, #0]
 8011fe6:	607a      	str	r2, [r7, #4]
 8011fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011ff0:	f7ee fdf4 	bl	8000bdc <__aeabi_uldivmod>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	4610      	mov	r0, r2
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	f04f 0200 	mov.w	r2, #0
 8012000:	f04f 0300 	mov.w	r3, #0
 8012004:	020b      	lsls	r3, r1, #8
 8012006:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801200a:	0202      	lsls	r2, r0, #8
 801200c:	6979      	ldr	r1, [r7, #20]
 801200e:	6849      	ldr	r1, [r1, #4]
 8012010:	0849      	lsrs	r1, r1, #1
 8012012:	2000      	movs	r0, #0
 8012014:	460c      	mov	r4, r1
 8012016:	4605      	mov	r5, r0
 8012018:	eb12 0804 	adds.w	r8, r2, r4
 801201c:	eb43 0905 	adc.w	r9, r3, r5
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	469a      	mov	sl, r3
 8012028:	4693      	mov	fp, r2
 801202a:	4652      	mov	r2, sl
 801202c:	465b      	mov	r3, fp
 801202e:	4640      	mov	r0, r8
 8012030:	4649      	mov	r1, r9
 8012032:	f7ee fdd3 	bl	8000bdc <__aeabi_uldivmod>
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	4613      	mov	r3, r2
 801203c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801203e:	6a3b      	ldr	r3, [r7, #32]
 8012040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012044:	d308      	bcc.n	8012058 <UART_SetConfig+0x438>
 8012046:	6a3b      	ldr	r3, [r7, #32]
 8012048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801204c:	d204      	bcs.n	8012058 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	6a3a      	ldr	r2, [r7, #32]
 8012054:	60da      	str	r2, [r3, #12]
 8012056:	e0ce      	b.n	80121f6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8012058:	2301      	movs	r3, #1
 801205a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801205e:	e0ca      	b.n	80121f6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012060:	697b      	ldr	r3, [r7, #20]
 8012062:	69db      	ldr	r3, [r3, #28]
 8012064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012068:	d166      	bne.n	8012138 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801206a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801206e:	2b08      	cmp	r3, #8
 8012070:	d827      	bhi.n	80120c2 <UART_SetConfig+0x4a2>
 8012072:	a201      	add	r2, pc, #4	; (adr r2, 8012078 <UART_SetConfig+0x458>)
 8012074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012078:	0801209d 	.word	0x0801209d
 801207c:	080120a5 	.word	0x080120a5
 8012080:	080120ad 	.word	0x080120ad
 8012084:	080120c3 	.word	0x080120c3
 8012088:	080120b3 	.word	0x080120b3
 801208c:	080120c3 	.word	0x080120c3
 8012090:	080120c3 	.word	0x080120c3
 8012094:	080120c3 	.word	0x080120c3
 8012098:	080120bb 	.word	0x080120bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801209c:	f7fb fe5c 	bl	800dd58 <HAL_RCC_GetPCLK1Freq>
 80120a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80120a2:	e014      	b.n	80120ce <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80120a4:	f7fb fe6c 	bl	800dd80 <HAL_RCC_GetPCLK2Freq>
 80120a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80120aa:	e010      	b.n	80120ce <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80120ac:	4b4e      	ldr	r3, [pc, #312]	; (80121e8 <UART_SetConfig+0x5c8>)
 80120ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80120b0:	e00d      	b.n	80120ce <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80120b2:	f7fb fd9f 	bl	800dbf4 <HAL_RCC_GetSysClockFreq>
 80120b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80120b8:	e009      	b.n	80120ce <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80120c0:	e005      	b.n	80120ce <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80120c2:	2300      	movs	r3, #0
 80120c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80120c6:	2301      	movs	r3, #1
 80120c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80120cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80120ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	f000 8090 	beq.w	80121f6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120da:	4a44      	ldr	r2, [pc, #272]	; (80121ec <UART_SetConfig+0x5cc>)
 80120dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120e0:	461a      	mov	r2, r3
 80120e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80120e8:	005a      	lsls	r2, r3, #1
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	085b      	lsrs	r3, r3, #1
 80120f0:	441a      	add	r2, r3
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80120fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	2b0f      	cmp	r3, #15
 8012100:	d916      	bls.n	8012130 <UART_SetConfig+0x510>
 8012102:	6a3b      	ldr	r3, [r7, #32]
 8012104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012108:	d212      	bcs.n	8012130 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801210a:	6a3b      	ldr	r3, [r7, #32]
 801210c:	b29b      	uxth	r3, r3
 801210e:	f023 030f 	bic.w	r3, r3, #15
 8012112:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012114:	6a3b      	ldr	r3, [r7, #32]
 8012116:	085b      	lsrs	r3, r3, #1
 8012118:	b29b      	uxth	r3, r3
 801211a:	f003 0307 	and.w	r3, r3, #7
 801211e:	b29a      	uxth	r2, r3
 8012120:	8bfb      	ldrh	r3, [r7, #30]
 8012122:	4313      	orrs	r3, r2
 8012124:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	8bfa      	ldrh	r2, [r7, #30]
 801212c:	60da      	str	r2, [r3, #12]
 801212e:	e062      	b.n	80121f6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8012130:	2301      	movs	r3, #1
 8012132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012136:	e05e      	b.n	80121f6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801213c:	2b08      	cmp	r3, #8
 801213e:	d828      	bhi.n	8012192 <UART_SetConfig+0x572>
 8012140:	a201      	add	r2, pc, #4	; (adr r2, 8012148 <UART_SetConfig+0x528>)
 8012142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012146:	bf00      	nop
 8012148:	0801216d 	.word	0x0801216d
 801214c:	08012175 	.word	0x08012175
 8012150:	0801217d 	.word	0x0801217d
 8012154:	08012193 	.word	0x08012193
 8012158:	08012183 	.word	0x08012183
 801215c:	08012193 	.word	0x08012193
 8012160:	08012193 	.word	0x08012193
 8012164:	08012193 	.word	0x08012193
 8012168:	0801218b 	.word	0x0801218b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801216c:	f7fb fdf4 	bl	800dd58 <HAL_RCC_GetPCLK1Freq>
 8012170:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012172:	e014      	b.n	801219e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012174:	f7fb fe04 	bl	800dd80 <HAL_RCC_GetPCLK2Freq>
 8012178:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801217a:	e010      	b.n	801219e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801217c:	4b1a      	ldr	r3, [pc, #104]	; (80121e8 <UART_SetConfig+0x5c8>)
 801217e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012180:	e00d      	b.n	801219e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012182:	f7fb fd37 	bl	800dbf4 <HAL_RCC_GetSysClockFreq>
 8012186:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012188:	e009      	b.n	801219e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801218a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801218e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012190:	e005      	b.n	801219e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8012192:	2300      	movs	r3, #0
 8012194:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8012196:	2301      	movs	r3, #1
 8012198:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801219c:	bf00      	nop
    }

    if (pclk != 0U)
 801219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d028      	beq.n	80121f6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a8:	4a10      	ldr	r2, [pc, #64]	; (80121ec <UART_SetConfig+0x5cc>)
 80121aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121ae:	461a      	mov	r2, r3
 80121b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	085b      	lsrs	r3, r3, #1
 80121bc:	441a      	add	r2, r3
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80121c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	2b0f      	cmp	r3, #15
 80121cc:	d910      	bls.n	80121f0 <UART_SetConfig+0x5d0>
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80121d4:	d20c      	bcs.n	80121f0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80121d6:	6a3b      	ldr	r3, [r7, #32]
 80121d8:	b29a      	uxth	r2, r3
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	60da      	str	r2, [r3, #12]
 80121e0:	e009      	b.n	80121f6 <UART_SetConfig+0x5d6>
 80121e2:	bf00      	nop
 80121e4:	40008000 	.word	0x40008000
 80121e8:	00f42400 	.word	0x00f42400
 80121ec:	08018354 	.word	0x08018354
      }
      else
      {
        ret = HAL_ERROR;
 80121f0:	2301      	movs	r3, #1
 80121f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	2201      	movs	r2, #1
 80121fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	2201      	movs	r2, #1
 8012202:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	2200      	movs	r2, #0
 801220a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	2200      	movs	r2, #0
 8012210:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012212:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8012216:	4618      	mov	r0, r3
 8012218:	3730      	adds	r7, #48	; 0x30
 801221a:	46bd      	mov	sp, r7
 801221c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801222c:	f003 0301 	and.w	r3, r3, #1
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00a      	beq.n	801224a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	430a      	orrs	r2, r1
 8012248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801224e:	f003 0302 	and.w	r3, r3, #2
 8012252:	2b00      	cmp	r3, #0
 8012254:	d00a      	beq.n	801226c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	430a      	orrs	r2, r1
 801226a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012270:	f003 0304 	and.w	r3, r3, #4
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00a      	beq.n	801228e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	430a      	orrs	r2, r1
 801228c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012292:	f003 0308 	and.w	r3, r3, #8
 8012296:	2b00      	cmp	r3, #0
 8012298:	d00a      	beq.n	80122b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	430a      	orrs	r2, r1
 80122ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b4:	f003 0310 	and.w	r3, r3, #16
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d00a      	beq.n	80122d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	430a      	orrs	r2, r1
 80122d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d6:	f003 0320 	and.w	r3, r3, #32
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00a      	beq.n	80122f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	689b      	ldr	r3, [r3, #8]
 80122e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	430a      	orrs	r2, r1
 80122f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d01a      	beq.n	8012336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	430a      	orrs	r2, r1
 8012314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801231a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801231e:	d10a      	bne.n	8012336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	430a      	orrs	r2, r1
 8012334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00a      	beq.n	8012358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	430a      	orrs	r2, r1
 8012356:	605a      	str	r2, [r3, #4]
  }
}
 8012358:	bf00      	nop
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b098      	sub	sp, #96	; 0x60
 8012368:	af02      	add	r7, sp, #8
 801236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2200      	movs	r2, #0
 8012370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012374:	f7f7 fc1c 	bl	8009bb0 <HAL_GetTick>
 8012378:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f003 0308 	and.w	r3, r3, #8
 8012384:	2b08      	cmp	r3, #8
 8012386:	d12f      	bne.n	80123e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012390:	2200      	movs	r2, #0
 8012392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 f88e 	bl	80124b8 <UART_WaitOnFlagUntilTimeout>
 801239c:	4603      	mov	r3, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d022      	beq.n	80123e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123aa:	e853 3f00 	ldrex	r3, [r3]
 80123ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123b6:	653b      	str	r3, [r7, #80]	; 0x50
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	461a      	mov	r2, r3
 80123be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c0:	647b      	str	r3, [r7, #68]	; 0x44
 80123c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123c8:	e841 2300 	strex	r3, r2, [r1]
 80123cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1e6      	bne.n	80123a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2220      	movs	r2, #32
 80123d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80123e4:	2303      	movs	r3, #3
 80123e6:	e063      	b.n	80124b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f003 0304 	and.w	r3, r3, #4
 80123f2:	2b04      	cmp	r3, #4
 80123f4:	d149      	bne.n	801248a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123fe:	2200      	movs	r2, #0
 8012400:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 f857 	bl	80124b8 <UART_WaitOnFlagUntilTimeout>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d03c      	beq.n	801248a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012418:	e853 3f00 	ldrex	r3, [r3]
 801241c:	623b      	str	r3, [r7, #32]
   return(result);
 801241e:	6a3b      	ldr	r3, [r7, #32]
 8012420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012424:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	461a      	mov	r2, r3
 801242c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801242e:	633b      	str	r3, [r7, #48]	; 0x30
 8012430:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012436:	e841 2300 	strex	r3, r2, [r1]
 801243a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1e6      	bne.n	8012410 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	3308      	adds	r3, #8
 8012448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	e853 3f00 	ldrex	r3, [r3]
 8012450:	60fb      	str	r3, [r7, #12]
   return(result);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	f023 0301 	bic.w	r3, r3, #1
 8012458:	64bb      	str	r3, [r7, #72]	; 0x48
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	3308      	adds	r3, #8
 8012460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012462:	61fa      	str	r2, [r7, #28]
 8012464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012466:	69b9      	ldr	r1, [r7, #24]
 8012468:	69fa      	ldr	r2, [r7, #28]
 801246a:	e841 2300 	strex	r3, r2, [r1]
 801246e:	617b      	str	r3, [r7, #20]
   return(result);
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d1e5      	bne.n	8012442 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2220      	movs	r2, #32
 801247a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2200      	movs	r2, #0
 8012482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012486:	2303      	movs	r3, #3
 8012488:	e012      	b.n	80124b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2220      	movs	r2, #32
 801248e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2220      	movs	r2, #32
 8012496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2200      	movs	r2, #0
 80124a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2200      	movs	r2, #0
 80124aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80124ae:	2300      	movs	r3, #0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3758      	adds	r7, #88	; 0x58
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b084      	sub	sp, #16
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	603b      	str	r3, [r7, #0]
 80124c4:	4613      	mov	r3, r2
 80124c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80124c8:	e049      	b.n	801255e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d0:	d045      	beq.n	801255e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124d2:	f7f7 fb6d 	bl	8009bb0 <HAL_GetTick>
 80124d6:	4602      	mov	r2, r0
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	69ba      	ldr	r2, [r7, #24]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d302      	bcc.n	80124e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d101      	bne.n	80124ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80124e8:	2303      	movs	r3, #3
 80124ea:	e048      	b.n	801257e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f003 0304 	and.w	r3, r3, #4
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d031      	beq.n	801255e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	69db      	ldr	r3, [r3, #28]
 8012500:	f003 0308 	and.w	r3, r3, #8
 8012504:	2b08      	cmp	r3, #8
 8012506:	d110      	bne.n	801252a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2208      	movs	r2, #8
 801250e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012510:	68f8      	ldr	r0, [r7, #12]
 8012512:	f000 f95b 	bl	80127cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2208      	movs	r2, #8
 801251a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2200      	movs	r2, #0
 8012522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012526:	2301      	movs	r3, #1
 8012528:	e029      	b.n	801257e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	69db      	ldr	r3, [r3, #28]
 8012530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012538:	d111      	bne.n	801255e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012542:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012544:	68f8      	ldr	r0, [r7, #12]
 8012546:	f000 f941 	bl	80127cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2220      	movs	r2, #32
 801254e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801255a:	2303      	movs	r3, #3
 801255c:	e00f      	b.n	801257e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	69da      	ldr	r2, [r3, #28]
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	4013      	ands	r3, r2
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	429a      	cmp	r2, r3
 801256c:	bf0c      	ite	eq
 801256e:	2301      	moveq	r3, #1
 8012570:	2300      	movne	r3, #0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	461a      	mov	r2, r3
 8012576:	79fb      	ldrb	r3, [r7, #7]
 8012578:	429a      	cmp	r2, r3
 801257a:	d0a6      	beq.n	80124ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	3710      	adds	r7, #16
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
	...

08012588 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012588:	b480      	push	{r7}
 801258a:	b0a3      	sub	sp, #140	; 0x8c
 801258c:	af00      	add	r7, sp, #0
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	4613      	mov	r3, r2
 8012594:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	88fa      	ldrh	r2, [r7, #6]
 80125a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	88fa      	ldrh	r2, [r7, #6]
 80125a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2200      	movs	r2, #0
 80125b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	689b      	ldr	r3, [r3, #8]
 80125b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125ba:	d10e      	bne.n	80125da <UART_Start_Receive_IT+0x52>
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	691b      	ldr	r3, [r3, #16]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d105      	bne.n	80125d0 <UART_Start_Receive_IT+0x48>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80125ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125ce:	e02d      	b.n	801262c <UART_Start_Receive_IT+0xa4>
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	22ff      	movs	r2, #255	; 0xff
 80125d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125d8:	e028      	b.n	801262c <UART_Start_Receive_IT+0xa4>
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d10d      	bne.n	80125fe <UART_Start_Receive_IT+0x76>
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	691b      	ldr	r3, [r3, #16]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d104      	bne.n	80125f4 <UART_Start_Receive_IT+0x6c>
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	22ff      	movs	r2, #255	; 0xff
 80125ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125f2:	e01b      	b.n	801262c <UART_Start_Receive_IT+0xa4>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	227f      	movs	r2, #127	; 0x7f
 80125f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125fc:	e016      	b.n	801262c <UART_Start_Receive_IT+0xa4>
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	689b      	ldr	r3, [r3, #8]
 8012602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012606:	d10d      	bne.n	8012624 <UART_Start_Receive_IT+0x9c>
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d104      	bne.n	801261a <UART_Start_Receive_IT+0x92>
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	227f      	movs	r2, #127	; 0x7f
 8012614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012618:	e008      	b.n	801262c <UART_Start_Receive_IT+0xa4>
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	223f      	movs	r2, #63	; 0x3f
 801261e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012622:	e003      	b.n	801262c <UART_Start_Receive_IT+0xa4>
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2200      	movs	r2, #0
 8012628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	2200      	movs	r2, #0
 8012630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2222      	movs	r2, #34	; 0x22
 8012638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	3308      	adds	r3, #8
 8012642:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012646:	e853 3f00 	ldrex	r3, [r3]
 801264a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801264c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801264e:	f043 0301 	orr.w	r3, r3, #1
 8012652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	3308      	adds	r3, #8
 801265c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012660:	673a      	str	r2, [r7, #112]	; 0x70
 8012662:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012664:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012666:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012668:	e841 2300 	strex	r3, r2, [r1]
 801266c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801266e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1e3      	bne.n	801263c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801267c:	d14f      	bne.n	801271e <UART_Start_Receive_IT+0x196>
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012684:	88fa      	ldrh	r2, [r7, #6]
 8012686:	429a      	cmp	r2, r3
 8012688:	d349      	bcc.n	801271e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	689b      	ldr	r3, [r3, #8]
 801268e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012692:	d107      	bne.n	80126a4 <UART_Start_Receive_IT+0x11c>
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	691b      	ldr	r3, [r3, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d103      	bne.n	80126a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	4a47      	ldr	r2, [pc, #284]	; (80127bc <UART_Start_Receive_IT+0x234>)
 80126a0:	675a      	str	r2, [r3, #116]	; 0x74
 80126a2:	e002      	b.n	80126aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	4a46      	ldr	r2, [pc, #280]	; (80127c0 <UART_Start_Receive_IT+0x238>)
 80126a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	691b      	ldr	r3, [r3, #16]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d01a      	beq.n	80126e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ba:	e853 3f00 	ldrex	r3, [r3]
 80126be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80126c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80126c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	461a      	mov	r2, r3
 80126d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80126d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80126d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80126da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80126dc:	e841 2300 	strex	r3, r2, [r1]
 80126e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80126e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d1e4      	bne.n	80126b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	3308      	adds	r3, #8
 80126ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f2:	e853 3f00 	ldrex	r3, [r3]
 80126f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80126f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	3308      	adds	r3, #8
 8012706:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012708:	64ba      	str	r2, [r7, #72]	; 0x48
 801270a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801270c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801270e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012710:	e841 2300 	strex	r3, r2, [r1]
 8012714:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1e5      	bne.n	80126e8 <UART_Start_Receive_IT+0x160>
 801271c:	e046      	b.n	80127ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012726:	d107      	bne.n	8012738 <UART_Start_Receive_IT+0x1b0>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	691b      	ldr	r3, [r3, #16]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	4a24      	ldr	r2, [pc, #144]	; (80127c4 <UART_Start_Receive_IT+0x23c>)
 8012734:	675a      	str	r2, [r3, #116]	; 0x74
 8012736:	e002      	b.n	801273e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	4a23      	ldr	r2, [pc, #140]	; (80127c8 <UART_Start_Receive_IT+0x240>)
 801273c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	691b      	ldr	r3, [r3, #16]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d019      	beq.n	801277a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274e:	e853 3f00 	ldrex	r3, [r3]
 8012752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012756:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801275a:	677b      	str	r3, [r7, #116]	; 0x74
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	461a      	mov	r2, r3
 8012762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012764:	637b      	str	r3, [r7, #52]	; 0x34
 8012766:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801276a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801276c:	e841 2300 	strex	r3, r2, [r1]
 8012770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1e6      	bne.n	8012746 <UART_Start_Receive_IT+0x1be>
 8012778:	e018      	b.n	80127ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	e853 3f00 	ldrex	r3, [r3]
 8012786:	613b      	str	r3, [r7, #16]
   return(result);
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	f043 0320 	orr.w	r3, r3, #32
 801278e:	67bb      	str	r3, [r7, #120]	; 0x78
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	461a      	mov	r2, r3
 8012796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012798:	623b      	str	r3, [r7, #32]
 801279a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801279c:	69f9      	ldr	r1, [r7, #28]
 801279e:	6a3a      	ldr	r2, [r7, #32]
 80127a0:	e841 2300 	strex	r3, r2, [r1]
 80127a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1e6      	bne.n	801277a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	378c      	adds	r7, #140	; 0x8c
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	08012fed 	.word	0x08012fed
 80127c0:	08012c8d 	.word	0x08012c8d
 80127c4:	08012ad5 	.word	0x08012ad5
 80127c8:	0801291d 	.word	0x0801291d

080127cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80127cc:	b480      	push	{r7}
 80127ce:	b095      	sub	sp, #84	; 0x54
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127dc:	e853 3f00 	ldrex	r3, [r3]
 80127e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80127e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80127e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	461a      	mov	r2, r3
 80127f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127f2:	643b      	str	r3, [r7, #64]	; 0x40
 80127f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80127f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80127fa:	e841 2300 	strex	r3, r2, [r1]
 80127fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1e6      	bne.n	80127d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	3308      	adds	r3, #8
 801280c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801280e:	6a3b      	ldr	r3, [r7, #32]
 8012810:	e853 3f00 	ldrex	r3, [r3]
 8012814:	61fb      	str	r3, [r7, #28]
   return(result);
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801281c:	f023 0301 	bic.w	r3, r3, #1
 8012820:	64bb      	str	r3, [r7, #72]	; 0x48
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	3308      	adds	r3, #8
 8012828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801282a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801282c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801282e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012832:	e841 2300 	strex	r3, r2, [r1]
 8012836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1e3      	bne.n	8012806 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012842:	2b01      	cmp	r3, #1
 8012844:	d118      	bne.n	8012878 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	e853 3f00 	ldrex	r3, [r3]
 8012852:	60bb      	str	r3, [r7, #8]
   return(result);
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	f023 0310 	bic.w	r3, r3, #16
 801285a:	647b      	str	r3, [r7, #68]	; 0x44
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	461a      	mov	r2, r3
 8012862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012864:	61bb      	str	r3, [r7, #24]
 8012866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012868:	6979      	ldr	r1, [r7, #20]
 801286a:	69ba      	ldr	r2, [r7, #24]
 801286c:	e841 2300 	strex	r3, r2, [r1]
 8012870:	613b      	str	r3, [r7, #16]
   return(result);
 8012872:	693b      	ldr	r3, [r7, #16]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d1e6      	bne.n	8012846 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2220      	movs	r2, #32
 801287c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2200      	movs	r2, #0
 8012884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2200      	movs	r2, #0
 801288a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801288c:	bf00      	nop
 801288e:	3754      	adds	r7, #84	; 0x54
 8012890:	46bd      	mov	sp, r7
 8012892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012896:	4770      	bx	lr

08012898 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2200      	movs	r2, #0
 80128aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2200      	movs	r2, #0
 80128b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f7ff f99c 	bl	8011bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80128bc:	bf00      	nop
 80128be:	3710      	adds	r7, #16
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}

080128c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	e853 3f00 	ldrex	r3, [r3]
 80128d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128e0:	61fb      	str	r3, [r7, #28]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	461a      	mov	r2, r3
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	61bb      	str	r3, [r7, #24]
 80128ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ee:	6979      	ldr	r1, [r7, #20]
 80128f0:	69ba      	ldr	r2, [r7, #24]
 80128f2:	e841 2300 	strex	r3, r2, [r1]
 80128f6:	613b      	str	r3, [r7, #16]
   return(result);
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d1e6      	bne.n	80128cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2220      	movs	r2, #32
 8012902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff f967 	bl	8011be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012912:	bf00      	nop
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
	...

0801291c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b09c      	sub	sp, #112	; 0x70
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801292a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012934:	2b22      	cmp	r3, #34	; 0x22
 8012936:	f040 80be 	bne.w	8012ab6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012940:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012944:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012948:	b2d9      	uxtb	r1, r3
 801294a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801294e:	b2da      	uxtb	r2, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012954:	400a      	ands	r2, r1
 8012956:	b2d2      	uxtb	r2, r2
 8012958:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801295e:	1c5a      	adds	r2, r3, #1
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801296a:	b29b      	uxth	r3, r3
 801296c:	3b01      	subs	r3, #1
 801296e:	b29a      	uxth	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801297c:	b29b      	uxth	r3, r3
 801297e:	2b00      	cmp	r3, #0
 8012980:	f040 80a1 	bne.w	8012ac6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801298a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801298c:	e853 3f00 	ldrex	r3, [r3]
 8012990:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012998:	66bb      	str	r3, [r7, #104]	; 0x68
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	461a      	mov	r2, r3
 80129a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80129a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80129a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80129a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80129aa:	e841 2300 	strex	r3, r2, [r1]
 80129ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80129b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1e6      	bne.n	8012984 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	3308      	adds	r3, #8
 80129bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c0:	e853 3f00 	ldrex	r3, [r3]
 80129c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80129c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129c8:	f023 0301 	bic.w	r3, r3, #1
 80129cc:	667b      	str	r3, [r7, #100]	; 0x64
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	3308      	adds	r3, #8
 80129d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80129d6:	647a      	str	r2, [r7, #68]	; 0x44
 80129d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80129dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80129de:	e841 2300 	strex	r3, r2, [r1]
 80129e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80129e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d1e5      	bne.n	80129b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	2220      	movs	r2, #32
 80129ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2200      	movs	r2, #0
 80129f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4a33      	ldr	r2, [pc, #204]	; (8012ad0 <UART_RxISR_8BIT+0x1b4>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d01f      	beq.n	8012a48 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d018      	beq.n	8012a48 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1e:	e853 3f00 	ldrex	r3, [r3]
 8012a22:	623b      	str	r3, [r7, #32]
   return(result);
 8012a24:	6a3b      	ldr	r3, [r7, #32]
 8012a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	461a      	mov	r2, r3
 8012a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a34:	633b      	str	r3, [r7, #48]	; 0x30
 8012a36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a3c:	e841 2300 	strex	r3, r2, [r1]
 8012a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1e6      	bne.n	8012a16 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d12e      	bne.n	8012aae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2200      	movs	r2, #0
 8012a54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	e853 3f00 	ldrex	r3, [r3]
 8012a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	f023 0310 	bic.w	r3, r3, #16
 8012a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	461a      	mov	r2, r3
 8012a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a74:	61fb      	str	r3, [r7, #28]
 8012a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a78:	69b9      	ldr	r1, [r7, #24]
 8012a7a:	69fa      	ldr	r2, [r7, #28]
 8012a7c:	e841 2300 	strex	r3, r2, [r1]
 8012a80:	617b      	str	r3, [r7, #20]
   return(result);
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1e6      	bne.n	8012a56 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	69db      	ldr	r3, [r3, #28]
 8012a8e:	f003 0310 	and.w	r3, r3, #16
 8012a92:	2b10      	cmp	r3, #16
 8012a94:	d103      	bne.n	8012a9e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2210      	movs	r2, #16
 8012a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f7ff f8ae 	bl	8011c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012aac:	e00b      	b.n	8012ac6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7ee ff60 	bl	8001974 <HAL_UART_RxCpltCallback>
}
 8012ab4:	e007      	b.n	8012ac6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	699a      	ldr	r2, [r3, #24]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f042 0208 	orr.w	r2, r2, #8
 8012ac4:	619a      	str	r2, [r3, #24]
}
 8012ac6:	bf00      	nop
 8012ac8:	3770      	adds	r7, #112	; 0x70
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	40008000 	.word	0x40008000

08012ad4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b09c      	sub	sp, #112	; 0x70
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ae2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012aec:	2b22      	cmp	r3, #34	; 0x22
 8012aee:	f040 80be 	bne.w	8012c6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012af8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b00:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8012b02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012b06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012b0a:	4013      	ands	r3, r2
 8012b0c:	b29a      	uxth	r2, r3
 8012b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b16:	1c9a      	adds	r2, r3, #2
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b22:	b29b      	uxth	r3, r3
 8012b24:	3b01      	subs	r3, #1
 8012b26:	b29a      	uxth	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f040 80a1 	bne.w	8012c7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b44:	e853 3f00 	ldrex	r3, [r3]
 8012b48:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b50:	667b      	str	r3, [r7, #100]	; 0x64
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	461a      	mov	r2, r3
 8012b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8012b5c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b62:	e841 2300 	strex	r3, r2, [r1]
 8012b66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1e6      	bne.n	8012b3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	3308      	adds	r3, #8
 8012b74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b78:	e853 3f00 	ldrex	r3, [r3]
 8012b7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b80:	f023 0301 	bic.w	r3, r3, #1
 8012b84:	663b      	str	r3, [r7, #96]	; 0x60
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3308      	adds	r3, #8
 8012b8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012b8e:	643a      	str	r2, [r7, #64]	; 0x40
 8012b90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012b96:	e841 2300 	strex	r3, r2, [r1]
 8012b9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1e5      	bne.n	8012b6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2220      	movs	r2, #32
 8012ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4a33      	ldr	r2, [pc, #204]	; (8012c88 <UART_RxISR_16BIT+0x1b4>)
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	d01f      	beq.n	8012c00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d018      	beq.n	8012c00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	e853 3f00 	ldrex	r3, [r3]
 8012bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012be2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	461a      	mov	r2, r3
 8012bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012bee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bf4:	e841 2300 	strex	r3, r2, [r1]
 8012bf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d1e6      	bne.n	8012bce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d12e      	bne.n	8012c66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	e853 3f00 	ldrex	r3, [r3]
 8012c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f023 0310 	bic.w	r3, r3, #16
 8012c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	461a      	mov	r2, r3
 8012c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c2c:	61bb      	str	r3, [r7, #24]
 8012c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c30:	6979      	ldr	r1, [r7, #20]
 8012c32:	69ba      	ldr	r2, [r7, #24]
 8012c34:	e841 2300 	strex	r3, r2, [r1]
 8012c38:	613b      	str	r3, [r7, #16]
   return(result);
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d1e6      	bne.n	8012c0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	69db      	ldr	r3, [r3, #28]
 8012c46:	f003 0310 	and.w	r3, r3, #16
 8012c4a:	2b10      	cmp	r3, #16
 8012c4c:	d103      	bne.n	8012c56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2210      	movs	r2, #16
 8012c54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f7fe ffd2 	bl	8011c08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c64:	e00b      	b.n	8012c7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f7ee fe84 	bl	8001974 <HAL_UART_RxCpltCallback>
}
 8012c6c:	e007      	b.n	8012c7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	699a      	ldr	r2, [r3, #24]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f042 0208 	orr.w	r2, r2, #8
 8012c7c:	619a      	str	r2, [r3, #24]
}
 8012c7e:	bf00      	nop
 8012c80:	3770      	adds	r7, #112	; 0x70
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	40008000 	.word	0x40008000

08012c8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b0ac      	sub	sp, #176	; 0xb0
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	69db      	ldr	r3, [r3, #28]
 8012ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	689b      	ldr	r3, [r3, #8]
 8012cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012cc2:	2b22      	cmp	r3, #34	; 0x22
 8012cc4:	f040 8182 	bne.w	8012fcc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012cd2:	e125      	b.n	8012f20 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cda:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012cde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012ce2:	b2d9      	uxtb	r1, r3
 8012ce4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cee:	400a      	ands	r2, r1
 8012cf0:	b2d2      	uxtb	r2, r2
 8012cf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cf8:	1c5a      	adds	r2, r3, #1
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012d04:	b29b      	uxth	r3, r3
 8012d06:	3b01      	subs	r3, #1
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	69db      	ldr	r3, [r3, #28]
 8012d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012d1e:	f003 0307 	and.w	r3, r3, #7
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d053      	beq.n	8012dce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012d2a:	f003 0301 	and.w	r3, r3, #1
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d011      	beq.n	8012d56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d00b      	beq.n	8012d56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2201      	movs	r2, #1
 8012d44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d4c:	f043 0201 	orr.w	r2, r3, #1
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012d5a:	f003 0302 	and.w	r3, r3, #2
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d011      	beq.n	8012d86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012d66:	f003 0301 	and.w	r3, r3, #1
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00b      	beq.n	8012d86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2202      	movs	r2, #2
 8012d74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d7c:	f043 0204 	orr.w	r2, r3, #4
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012d8a:	f003 0304 	and.w	r3, r3, #4
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d011      	beq.n	8012db6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012d96:	f003 0301 	and.w	r3, r3, #1
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00b      	beq.n	8012db6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	2204      	movs	r2, #4
 8012da4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dac:	f043 0202 	orr.w	r2, r3, #2
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d006      	beq.n	8012dce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7fe ff17 	bl	8011bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f040 80a2 	bne.w	8012f20 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012de4:	e853 3f00 	ldrex	r3, [r3]
 8012de8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	461a      	mov	r2, r3
 8012dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012e00:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012e04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012e06:	e841 2300 	strex	r3, r2, [r1]
 8012e0a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1e4      	bne.n	8012ddc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	3308      	adds	r3, #8
 8012e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e1c:	e853 3f00 	ldrex	r3, [r3]
 8012e20:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012e28:	f023 0301 	bic.w	r3, r3, #1
 8012e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	3308      	adds	r3, #8
 8012e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012e3a:	66ba      	str	r2, [r7, #104]	; 0x68
 8012e3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012e40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012e42:	e841 2300 	strex	r3, r2, [r1]
 8012e46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d1e1      	bne.n	8012e12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2220      	movs	r2, #32
 8012e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	4a5f      	ldr	r2, [pc, #380]	; (8012fe4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012e68:	4293      	cmp	r3, r2
 8012e6a:	d021      	beq.n	8012eb0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d01a      	beq.n	8012eb0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e82:	e853 3f00 	ldrex	r3, [r3]
 8012e86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	461a      	mov	r2, r3
 8012e98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8012e9e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ea0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ea2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012ea4:	e841 2300 	strex	r3, r2, [r1]
 8012ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d1e4      	bne.n	8012e7a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d130      	bne.n	8012f1a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ec6:	e853 3f00 	ldrex	r3, [r3]
 8012eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ece:	f023 0310 	bic.w	r3, r3, #16
 8012ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	461a      	mov	r2, r3
 8012edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ee2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ee4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ee8:	e841 2300 	strex	r3, r2, [r1]
 8012eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d1e4      	bne.n	8012ebe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	69db      	ldr	r3, [r3, #28]
 8012efa:	f003 0310 	and.w	r3, r3, #16
 8012efe:	2b10      	cmp	r3, #16
 8012f00:	d103      	bne.n	8012f0a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	2210      	movs	r2, #16
 8012f08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012f10:	4619      	mov	r1, r3
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f7fe fe78 	bl	8011c08 <HAL_UARTEx_RxEventCallback>
 8012f18:	e002      	b.n	8012f20 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f7ee fd2a 	bl	8001974 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012f20:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d006      	beq.n	8012f36 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8012f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012f2c:	f003 0320 	and.w	r3, r3, #32
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f47f aecf 	bne.w	8012cd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012f40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d049      	beq.n	8012fdc <UART_RxISR_8BIT_FIFOEN+0x350>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012f4e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d242      	bcs.n	8012fdc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	3308      	adds	r3, #8
 8012f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	e853 3f00 	ldrex	r3, [r3]
 8012f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	3308      	adds	r3, #8
 8012f76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f82:	e841 2300 	strex	r3, r2, [r1]
 8012f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d1e3      	bne.n	8012f56 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4a15      	ldr	r2, [pc, #84]	; (8012fe8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012f92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	e853 3f00 	ldrex	r3, [r3]
 8012fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	f043 0320 	orr.w	r3, r3, #32
 8012fa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012fb6:	61bb      	str	r3, [r7, #24]
 8012fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fba:	6979      	ldr	r1, [r7, #20]
 8012fbc:	69ba      	ldr	r2, [r7, #24]
 8012fbe:	e841 2300 	strex	r3, r2, [r1]
 8012fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d1e4      	bne.n	8012f94 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012fca:	e007      	b.n	8012fdc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	699a      	ldr	r2, [r3, #24]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	f042 0208 	orr.w	r2, r2, #8
 8012fda:	619a      	str	r2, [r3, #24]
}
 8012fdc:	bf00      	nop
 8012fde:	37b0      	adds	r7, #176	; 0xb0
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	40008000 	.word	0x40008000
 8012fe8:	0801291d 	.word	0x0801291d

08012fec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b0ae      	sub	sp, #184	; 0xb8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ffa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	69db      	ldr	r3, [r3, #28]
 8013004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013022:	2b22      	cmp	r3, #34	; 0x22
 8013024:	f040 8186 	bne.w	8013334 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801302e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013032:	e129      	b.n	8013288 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8013046:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801304a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801304e:	4013      	ands	r3, r2
 8013050:	b29a      	uxth	r2, r3
 8013052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013056:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801305c:	1c9a      	adds	r2, r3, #2
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013068:	b29b      	uxth	r3, r3
 801306a:	3b01      	subs	r3, #1
 801306c:	b29a      	uxth	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	69db      	ldr	r3, [r3, #28]
 801307a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801307e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013082:	f003 0307 	and.w	r3, r3, #7
 8013086:	2b00      	cmp	r3, #0
 8013088:	d053      	beq.n	8013132 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801308a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801308e:	f003 0301 	and.w	r3, r3, #1
 8013092:	2b00      	cmp	r3, #0
 8013094:	d011      	beq.n	80130ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8013096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d00b      	beq.n	80130ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2201      	movs	r2, #1
 80130a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130b0:	f043 0201 	orr.w	r2, r3, #1
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80130be:	f003 0302 	and.w	r3, r3, #2
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d011      	beq.n	80130ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80130c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80130ca:	f003 0301 	and.w	r3, r3, #1
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d00b      	beq.n	80130ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	2202      	movs	r2, #2
 80130d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130e0:	f043 0204 	orr.w	r2, r3, #4
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80130ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80130ee:	f003 0304 	and.w	r3, r3, #4
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d011      	beq.n	801311a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80130f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80130fa:	f003 0301 	and.w	r3, r3, #1
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d00b      	beq.n	801311a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2204      	movs	r2, #4
 8013108:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013110:	f043 0202 	orr.w	r2, r3, #2
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013120:	2b00      	cmp	r3, #0
 8013122:	d006      	beq.n	8013132 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f7fe fd65 	bl	8011bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2200      	movs	r2, #0
 801312e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013138:	b29b      	uxth	r3, r3
 801313a:	2b00      	cmp	r3, #0
 801313c:	f040 80a4 	bne.w	8013288 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013148:	e853 3f00 	ldrex	r3, [r3]
 801314c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801314e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	461a      	mov	r2, r3
 801315e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013166:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801316a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801316e:	e841 2300 	strex	r3, r2, [r1]
 8013172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1e2      	bne.n	8013140 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	3308      	adds	r3, #8
 8013180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013184:	e853 3f00 	ldrex	r3, [r3]
 8013188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801318a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801318c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013190:	f023 0301 	bic.w	r3, r3, #1
 8013194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	3308      	adds	r3, #8
 801319e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80131a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80131a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80131a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80131aa:	e841 2300 	strex	r3, r2, [r1]
 80131ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80131b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d1e1      	bne.n	801317a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2220      	movs	r2, #32
 80131ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2200      	movs	r2, #0
 80131c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2200      	movs	r2, #0
 80131c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4a5f      	ldr	r2, [pc, #380]	; (801334c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d021      	beq.n	8013218 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d01a      	beq.n	8013218 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131ea:	e853 3f00 	ldrex	r3, [r3]
 80131ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80131f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80131f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	461a      	mov	r2, r3
 8013200:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013204:	65bb      	str	r3, [r7, #88]	; 0x58
 8013206:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801320a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801320c:	e841 2300 	strex	r3, r2, [r1]
 8013210:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013214:	2b00      	cmp	r3, #0
 8013216:	d1e4      	bne.n	80131e2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801321c:	2b01      	cmp	r3, #1
 801321e:	d130      	bne.n	8013282 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2200      	movs	r2, #0
 8013224:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322e:	e853 3f00 	ldrex	r3, [r3]
 8013232:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013236:	f023 0310 	bic.w	r3, r3, #16
 801323a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	461a      	mov	r2, r3
 8013244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013248:	647b      	str	r3, [r7, #68]	; 0x44
 801324a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801324c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801324e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013250:	e841 2300 	strex	r3, r2, [r1]
 8013254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013258:	2b00      	cmp	r3, #0
 801325a:	d1e4      	bne.n	8013226 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	69db      	ldr	r3, [r3, #28]
 8013262:	f003 0310 	and.w	r3, r3, #16
 8013266:	2b10      	cmp	r3, #16
 8013268:	d103      	bne.n	8013272 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2210      	movs	r2, #16
 8013270:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013278:	4619      	mov	r1, r3
 801327a:	6878      	ldr	r0, [r7, #4]
 801327c:	f7fe fcc4 	bl	8011c08 <HAL_UARTEx_RxEventCallback>
 8013280:	e002      	b.n	8013288 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ee fb76 	bl	8001974 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013288:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801328c:	2b00      	cmp	r3, #0
 801328e:	d006      	beq.n	801329e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8013290:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013294:	f003 0320 	and.w	r3, r3, #32
 8013298:	2b00      	cmp	r3, #0
 801329a:	f47f aecb 	bne.w	8013034 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80132a4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80132a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d049      	beq.n	8013344 <UART_RxISR_16BIT_FIFOEN+0x358>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80132b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80132ba:	429a      	cmp	r2, r3
 80132bc:	d242      	bcs.n	8013344 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	3308      	adds	r3, #8
 80132c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c8:	e853 3f00 	ldrex	r3, [r3]
 80132cc:	623b      	str	r3, [r7, #32]
   return(result);
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80132d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	3308      	adds	r3, #8
 80132de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80132e2:	633a      	str	r2, [r7, #48]	; 0x30
 80132e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80132e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132ea:	e841 2300 	strex	r3, r2, [r1]
 80132ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80132f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d1e3      	bne.n	80132be <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	4a15      	ldr	r2, [pc, #84]	; (8013350 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80132fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	e853 3f00 	ldrex	r3, [r3]
 8013308:	60fb      	str	r3, [r7, #12]
   return(result);
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	f043 0320 	orr.w	r3, r3, #32
 8013310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	461a      	mov	r2, r3
 801331a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801331e:	61fb      	str	r3, [r7, #28]
 8013320:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013322:	69b9      	ldr	r1, [r7, #24]
 8013324:	69fa      	ldr	r2, [r7, #28]
 8013326:	e841 2300 	strex	r3, r2, [r1]
 801332a:	617b      	str	r3, [r7, #20]
   return(result);
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d1e4      	bne.n	80132fc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013332:	e007      	b.n	8013344 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	699a      	ldr	r2, [r3, #24]
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f042 0208 	orr.w	r2, r2, #8
 8013342:	619a      	str	r2, [r3, #24]
}
 8013344:	bf00      	nop
 8013346:	37b8      	adds	r7, #184	; 0xb8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	40008000 	.word	0x40008000
 8013350:	08012ad5 	.word	0x08012ad5

08013354 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013354:	b480      	push	{r7}
 8013356:	b083      	sub	sp, #12
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801335c:	bf00      	nop
 801335e:	370c      	adds	r7, #12
 8013360:	46bd      	mov	sp, r7
 8013362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013366:	4770      	bx	lr

08013368 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013368:	b480      	push	{r7}
 801336a:	b083      	sub	sp, #12
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013370:	bf00      	nop
 8013372:	370c      	adds	r7, #12
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr

0801337c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013384:	bf00      	nop
 8013386:	370c      	adds	r7, #12
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr

08013390 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013390:	b480      	push	{r7}
 8013392:	b085      	sub	sp, #20
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d101      	bne.n	80133a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80133a2:	2302      	movs	r3, #2
 80133a4:	e027      	b.n	80133f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2201      	movs	r2, #1
 80133aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2224      	movs	r2, #36	; 0x24
 80133b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	681a      	ldr	r2, [r3, #0]
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f022 0201 	bic.w	r2, r2, #1
 80133cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80133d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	2200      	movs	r2, #0
 80133da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	68fa      	ldr	r2, [r7, #12]
 80133e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2220      	movs	r2, #32
 80133e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3714      	adds	r7, #20
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr

08013402 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013402:	b580      	push	{r7, lr}
 8013404:	b084      	sub	sp, #16
 8013406:	af00      	add	r7, sp, #0
 8013408:	6078      	str	r0, [r7, #4]
 801340a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013412:	2b01      	cmp	r3, #1
 8013414:	d101      	bne.n	801341a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013416:	2302      	movs	r3, #2
 8013418:	e02d      	b.n	8013476 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2201      	movs	r2, #1
 801341e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2224      	movs	r2, #36	; 0x24
 8013426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f022 0201 	bic.w	r2, r2, #1
 8013440:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	683a      	ldr	r2, [r7, #0]
 8013452:	430a      	orrs	r2, r1
 8013454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f000 f850 	bl	80134fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	68fa      	ldr	r2, [r7, #12]
 8013462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2220      	movs	r2, #32
 8013468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2200      	movs	r2, #0
 8013470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}

0801347e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801347e:	b580      	push	{r7, lr}
 8013480:	b084      	sub	sp, #16
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
 8013486:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801348e:	2b01      	cmp	r3, #1
 8013490:	d101      	bne.n	8013496 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013492:	2302      	movs	r3, #2
 8013494:	e02d      	b.n	80134f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	2201      	movs	r2, #1
 801349a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2224      	movs	r2, #36	; 0x24
 80134a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f022 0201 	bic.w	r2, r2, #1
 80134bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	689b      	ldr	r3, [r3, #8]
 80134c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	683a      	ldr	r2, [r7, #0]
 80134ce:	430a      	orrs	r2, r1
 80134d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f000 f812 	bl	80134fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2220      	movs	r2, #32
 80134e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2200      	movs	r2, #0
 80134ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80134f0:	2300      	movs	r3, #0
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3710      	adds	r7, #16
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
	...

080134fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80134fc:	b480      	push	{r7}
 80134fe:	b085      	sub	sp, #20
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013508:	2b00      	cmp	r3, #0
 801350a:	d108      	bne.n	801351e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2201      	movs	r2, #1
 8013510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2201      	movs	r2, #1
 8013518:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801351c:	e031      	b.n	8013582 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801351e:	2308      	movs	r3, #8
 8013520:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013522:	2308      	movs	r3, #8
 8013524:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	0e5b      	lsrs	r3, r3, #25
 801352e:	b2db      	uxtb	r3, r3
 8013530:	f003 0307 	and.w	r3, r3, #7
 8013534:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	689b      	ldr	r3, [r3, #8]
 801353c:	0f5b      	lsrs	r3, r3, #29
 801353e:	b2db      	uxtb	r3, r3
 8013540:	f003 0307 	and.w	r3, r3, #7
 8013544:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013546:	7bbb      	ldrb	r3, [r7, #14]
 8013548:	7b3a      	ldrb	r2, [r7, #12]
 801354a:	4911      	ldr	r1, [pc, #68]	; (8013590 <UARTEx_SetNbDataToProcess+0x94>)
 801354c:	5c8a      	ldrb	r2, [r1, r2]
 801354e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013552:	7b3a      	ldrb	r2, [r7, #12]
 8013554:	490f      	ldr	r1, [pc, #60]	; (8013594 <UARTEx_SetNbDataToProcess+0x98>)
 8013556:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013558:	fb93 f3f2 	sdiv	r3, r3, r2
 801355c:	b29a      	uxth	r2, r3
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013564:	7bfb      	ldrb	r3, [r7, #15]
 8013566:	7b7a      	ldrb	r2, [r7, #13]
 8013568:	4909      	ldr	r1, [pc, #36]	; (8013590 <UARTEx_SetNbDataToProcess+0x94>)
 801356a:	5c8a      	ldrb	r2, [r1, r2]
 801356c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013570:	7b7a      	ldrb	r2, [r7, #13]
 8013572:	4908      	ldr	r1, [pc, #32]	; (8013594 <UARTEx_SetNbDataToProcess+0x98>)
 8013574:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013576:	fb93 f3f2 	sdiv	r3, r3, r2
 801357a:	b29a      	uxth	r2, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013582:	bf00      	nop
 8013584:	3714      	adds	r7, #20
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop
 8013590:	0801836c 	.word	0x0801836c
 8013594:	08018374 	.word	0x08018374

08013598 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8013598:	b480      	push	{r7}
 801359a:	b08b      	sub	sp, #44	; 0x2c
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	fa93 f3a3 	rbit	r3, r3
 80135b2:	613b      	str	r3, [r7, #16]
  return result;
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d101      	bne.n	80135c2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80135be:	2320      	movs	r3, #32
 80135c0:	e003      	b.n	80135ca <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	fab3 f383 	clz	r3, r3
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	2103      	movs	r1, #3
 80135ce:	fa01 f303 	lsl.w	r3, r1, r3
 80135d2:	43db      	mvns	r3, r3
 80135d4:	401a      	ands	r2, r3
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80135da:	6a3b      	ldr	r3, [r7, #32]
 80135dc:	fa93 f3a3 	rbit	r3, r3
 80135e0:	61fb      	str	r3, [r7, #28]
  return result;
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80135e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d101      	bne.n	80135f0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80135ec:	2320      	movs	r3, #32
 80135ee:	e003      	b.n	80135f8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f2:	fab3 f383 	clz	r3, r3
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	005b      	lsls	r3, r3, #1
 80135fa:	6879      	ldr	r1, [r7, #4]
 80135fc:	fa01 f303 	lsl.w	r3, r1, r3
 8013600:	431a      	orrs	r2, r3
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	601a      	str	r2, [r3, #0]
}
 8013606:	bf00      	nop
 8013608:	372c      	adds	r7, #44	; 0x2c
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr

08013612 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8013612:	b480      	push	{r7}
 8013614:	b085      	sub	sp, #20
 8013616:	af00      	add	r7, sp, #0
 8013618:	60f8      	str	r0, [r7, #12]
 801361a:	60b9      	str	r1, [r7, #8]
 801361c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	685a      	ldr	r2, [r3, #4]
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	43db      	mvns	r3, r3
 8013626:	401a      	ands	r2, r3
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	6879      	ldr	r1, [r7, #4]
 801362c:	fb01 f303 	mul.w	r3, r1, r3
 8013630:	431a      	orrs	r2, r3
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	605a      	str	r2, [r3, #4]
}
 8013636:	bf00      	nop
 8013638:	3714      	adds	r7, #20
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8013642:	b480      	push	{r7}
 8013644:	b08b      	sub	sp, #44	; 0x2c
 8013646:	af00      	add	r7, sp, #0
 8013648:	60f8      	str	r0, [r7, #12]
 801364a:	60b9      	str	r1, [r7, #8]
 801364c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	689a      	ldr	r2, [r3, #8]
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	fa93 f3a3 	rbit	r3, r3
 801365c:	613b      	str	r3, [r7, #16]
  return result;
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d101      	bne.n	801366c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8013668:	2320      	movs	r3, #32
 801366a:	e003      	b.n	8013674 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801366c:	69bb      	ldr	r3, [r7, #24]
 801366e:	fab3 f383 	clz	r3, r3
 8013672:	b2db      	uxtb	r3, r3
 8013674:	005b      	lsls	r3, r3, #1
 8013676:	2103      	movs	r1, #3
 8013678:	fa01 f303 	lsl.w	r3, r1, r3
 801367c:	43db      	mvns	r3, r3
 801367e:	401a      	ands	r2, r3
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013684:	6a3b      	ldr	r3, [r7, #32]
 8013686:	fa93 f3a3 	rbit	r3, r3
 801368a:	61fb      	str	r3, [r7, #28]
  return result;
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013692:	2b00      	cmp	r3, #0
 8013694:	d101      	bne.n	801369a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8013696:	2320      	movs	r3, #32
 8013698:	e003      	b.n	80136a2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369c:	fab3 f383 	clz	r3, r3
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	6879      	ldr	r1, [r7, #4]
 80136a6:	fa01 f303 	lsl.w	r3, r1, r3
 80136aa:	431a      	orrs	r2, r3
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80136b0:	bf00      	nop
 80136b2:	372c      	adds	r7, #44	; 0x2c
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr

080136bc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80136bc:	b480      	push	{r7}
 80136be:	b08b      	sub	sp, #44	; 0x2c
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	68da      	ldr	r2, [r3, #12]
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	fa93 f3a3 	rbit	r3, r3
 80136d6:	613b      	str	r3, [r7, #16]
  return result;
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d101      	bne.n	80136e6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80136e2:	2320      	movs	r3, #32
 80136e4:	e003      	b.n	80136ee <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	fab3 f383 	clz	r3, r3
 80136ec:	b2db      	uxtb	r3, r3
 80136ee:	005b      	lsls	r3, r3, #1
 80136f0:	2103      	movs	r1, #3
 80136f2:	fa01 f303 	lsl.w	r3, r1, r3
 80136f6:	43db      	mvns	r3, r3
 80136f8:	401a      	ands	r2, r3
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	fa93 f3a3 	rbit	r3, r3
 8013704:	61fb      	str	r3, [r7, #28]
  return result;
 8013706:	69fb      	ldr	r3, [r7, #28]
 8013708:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370c:	2b00      	cmp	r3, #0
 801370e:	d101      	bne.n	8013714 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8013710:	2320      	movs	r3, #32
 8013712:	e003      	b.n	801371c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8013714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013716:	fab3 f383 	clz	r3, r3
 801371a:	b2db      	uxtb	r3, r3
 801371c:	005b      	lsls	r3, r3, #1
 801371e:	6879      	ldr	r1, [r7, #4]
 8013720:	fa01 f303 	lsl.w	r3, r1, r3
 8013724:	431a      	orrs	r2, r3
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	60da      	str	r2, [r3, #12]
}
 801372a:	bf00      	nop
 801372c:	372c      	adds	r7, #44	; 0x2c
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr

08013736 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8013736:	b480      	push	{r7}
 8013738:	b08b      	sub	sp, #44	; 0x2c
 801373a:	af00      	add	r7, sp, #0
 801373c:	60f8      	str	r0, [r7, #12]
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6a1a      	ldr	r2, [r3, #32]
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	fa93 f3a3 	rbit	r3, r3
 8013750:	613b      	str	r3, [r7, #16]
  return result;
 8013752:	693b      	ldr	r3, [r7, #16]
 8013754:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d101      	bne.n	8013760 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801375c:	2320      	movs	r3, #32
 801375e:	e003      	b.n	8013768 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	fab3 f383 	clz	r3, r3
 8013766:	b2db      	uxtb	r3, r3
 8013768:	009b      	lsls	r3, r3, #2
 801376a:	210f      	movs	r1, #15
 801376c:	fa01 f303 	lsl.w	r3, r1, r3
 8013770:	43db      	mvns	r3, r3
 8013772:	401a      	ands	r2, r3
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013778:	6a3b      	ldr	r3, [r7, #32]
 801377a:	fa93 f3a3 	rbit	r3, r3
 801377e:	61fb      	str	r3, [r7, #28]
  return result;
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013786:	2b00      	cmp	r3, #0
 8013788:	d101      	bne.n	801378e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801378a:	2320      	movs	r3, #32
 801378c:	e003      	b.n	8013796 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013790:	fab3 f383 	clz	r3, r3
 8013794:	b2db      	uxtb	r3, r3
 8013796:	009b      	lsls	r3, r3, #2
 8013798:	6879      	ldr	r1, [r7, #4]
 801379a:	fa01 f303 	lsl.w	r3, r1, r3
 801379e:	431a      	orrs	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80137a4:	bf00      	nop
 80137a6:	372c      	adds	r7, #44	; 0x2c
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr

080137b0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80137b0:	b480      	push	{r7}
 80137b2:	b08b      	sub	sp, #44	; 0x2c
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	0a1b      	lsrs	r3, r3, #8
 80137c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	fa93 f3a3 	rbit	r3, r3
 80137cc:	613b      	str	r3, [r7, #16]
  return result;
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d101      	bne.n	80137dc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80137d8:	2320      	movs	r3, #32
 80137da:	e003      	b.n	80137e4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80137dc:	69bb      	ldr	r3, [r7, #24]
 80137de:	fab3 f383 	clz	r3, r3
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	210f      	movs	r1, #15
 80137e8:	fa01 f303 	lsl.w	r3, r1, r3
 80137ec:	43db      	mvns	r3, r3
 80137ee:	401a      	ands	r2, r3
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	0a1b      	lsrs	r3, r3, #8
 80137f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	fa93 f3a3 	rbit	r3, r3
 80137fc:	61fb      	str	r3, [r7, #28]
  return result;
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013804:	2b00      	cmp	r3, #0
 8013806:	d101      	bne.n	801380c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8013808:	2320      	movs	r3, #32
 801380a:	e003      	b.n	8013814 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	fab3 f383 	clz	r3, r3
 8013812:	b2db      	uxtb	r3, r3
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	6879      	ldr	r1, [r7, #4]
 8013818:	fa01 f303 	lsl.w	r3, r1, r3
 801381c:	431a      	orrs	r2, r3
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8013822:	bf00      	nop
 8013824:	372c      	adds	r7, #44	; 0x2c
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr

0801382e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801382e:	b580      	push	{r7, lr}
 8013830:	b088      	sub	sp, #32
 8013832:	af00      	add	r7, sp, #0
 8013834:	6078      	str	r0, [r7, #4]
 8013836:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	fa93 f3a3 	rbit	r3, r3
 8013844:	60fb      	str	r3, [r7, #12]
  return result;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <LL_GPIO_Init+0x26>
    return 32U;
 8013850:	2320      	movs	r3, #32
 8013852:	e003      	b.n	801385c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	fab3 f383 	clz	r3, r3
 801385a:	b2db      	uxtb	r3, r3
 801385c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801385e:	e047      	b.n	80138f0 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	2101      	movs	r1, #1
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	fa01 f303 	lsl.w	r3, r1, r3
 801386c:	4013      	ands	r3, r2
 801386e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8013870:	69bb      	ldr	r3, [r7, #24]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d039      	beq.n	80138ea <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d003      	beq.n	8013886 <LL_GPIO_Init+0x58>
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	2b02      	cmp	r3, #2
 8013884:	d10d      	bne.n	80138a2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	461a      	mov	r2, r3
 801388c:	69b9      	ldr	r1, [r7, #24]
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7ff fed7 	bl	8013642 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	461a      	mov	r2, r3
 801389a:	69b9      	ldr	r1, [r7, #24]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f7ff feb8 	bl	8013612 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	691b      	ldr	r3, [r3, #16]
 80138a6:	461a      	mov	r2, r3
 80138a8:	69b9      	ldr	r1, [r7, #24]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff ff06 	bl	80136bc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	2b02      	cmp	r3, #2
 80138b6:	d111      	bne.n	80138dc <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	2bff      	cmp	r3, #255	; 0xff
 80138bc:	d807      	bhi.n	80138ce <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	695b      	ldr	r3, [r3, #20]
 80138c2:	461a      	mov	r2, r3
 80138c4:	69b9      	ldr	r1, [r7, #24]
 80138c6:	6878      	ldr	r0, [r7, #4]
 80138c8:	f7ff ff35 	bl	8013736 <LL_GPIO_SetAFPin_0_7>
 80138cc:	e006      	b.n	80138dc <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	695b      	ldr	r3, [r3, #20]
 80138d2:	461a      	mov	r2, r3
 80138d4:	69b9      	ldr	r1, [r7, #24]
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f7ff ff6a 	bl	80137b0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	461a      	mov	r2, r3
 80138e2:	69b9      	ldr	r1, [r7, #24]
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7ff fe57 	bl	8013598 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80138ea:	69fb      	ldr	r3, [r7, #28]
 80138ec:	3301      	adds	r3, #1
 80138ee:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	fa22 f303 	lsr.w	r3, r2, r3
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d1b0      	bne.n	8013860 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80138fe:	2300      	movs	r3, #0
}
 8013900:	4618      	mov	r0, r3
 8013902:	3720      	adds	r7, #32
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}

08013908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013908:	b480      	push	{r7}
 801390a:	b085      	sub	sp, #20
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013910:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8013914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801391c:	b29a      	uxth	r2, r3
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	b29b      	uxth	r3, r3
 8013922:	43db      	mvns	r3, r3
 8013924:	b29b      	uxth	r3, r3
 8013926:	4013      	ands	r3, r2
 8013928:	b29a      	uxth	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013930:	2300      	movs	r3, #0
}
 8013932:	4618      	mov	r0, r3
 8013934:	3714      	adds	r7, #20
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr

0801393e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801393e:	b084      	sub	sp, #16
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	f107 0014 	add.w	r0, r7, #20
 801394c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2201      	movs	r2, #1
 8013954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2200      	movs	r2, #0
 8013964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	b004      	add	sp, #16
 801397e:	4770      	bx	lr

08013980 <__NVIC_SetPriority>:
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	4603      	mov	r3, r0
 8013988:	6039      	str	r1, [r7, #0]
 801398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013990:	2b00      	cmp	r3, #0
 8013992:	db0a      	blt.n	80139aa <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	b2da      	uxtb	r2, r3
 8013998:	490c      	ldr	r1, [pc, #48]	; (80139cc <__NVIC_SetPriority+0x4c>)
 801399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801399e:	0152      	lsls	r2, r2, #5
 80139a0:	b2d2      	uxtb	r2, r2
 80139a2:	440b      	add	r3, r1
 80139a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80139a8:	e00a      	b.n	80139c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	b2da      	uxtb	r2, r3
 80139ae:	4908      	ldr	r1, [pc, #32]	; (80139d0 <__NVIC_SetPriority+0x50>)
 80139b0:	79fb      	ldrb	r3, [r7, #7]
 80139b2:	f003 030f 	and.w	r3, r3, #15
 80139b6:	3b04      	subs	r3, #4
 80139b8:	0152      	lsls	r2, r2, #5
 80139ba:	b2d2      	uxtb	r2, r2
 80139bc:	440b      	add	r3, r1
 80139be:	761a      	strb	r2, [r3, #24]
}
 80139c0:	bf00      	nop
 80139c2:	370c      	adds	r7, #12
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr
 80139cc:	e000e100 	.word	0xe000e100
 80139d0:	e000ed00 	.word	0xe000ed00

080139d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80139d4:	b580      	push	{r7, lr}
 80139d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80139d8:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <SysTick_Handler+0x1c>)
 80139da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80139dc:	f001 fcbc 	bl	8015358 <xTaskGetSchedulerState>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d001      	beq.n	80139ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80139e6:	f002 f911 	bl	8015c0c <xPortSysTickHandler>
  }
}
 80139ea:	bf00      	nop
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	e000e010 	.word	0xe000e010

080139f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80139f4:	b580      	push	{r7, lr}
 80139f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80139f8:	2100      	movs	r1, #0
 80139fa:	f06f 0004 	mvn.w	r0, #4
 80139fe:	f7ff ffbf 	bl	8013980 <__NVIC_SetPriority>
#endif
}
 8013a02:	bf00      	nop
 8013a04:	bd80      	pop	{r7, pc}
	...

08013a08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a0e:	f3ef 8305 	mrs	r3, IPSR
 8013a12:	603b      	str	r3, [r7, #0]
  return(result);
 8013a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d003      	beq.n	8013a22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013a1a:	f06f 0305 	mvn.w	r3, #5
 8013a1e:	607b      	str	r3, [r7, #4]
 8013a20:	e00c      	b.n	8013a3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013a22:	4b0a      	ldr	r3, [pc, #40]	; (8013a4c <osKernelInitialize+0x44>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d105      	bne.n	8013a36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013a2a:	4b08      	ldr	r3, [pc, #32]	; (8013a4c <osKernelInitialize+0x44>)
 8013a2c:	2201      	movs	r2, #1
 8013a2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013a30:	2300      	movs	r3, #0
 8013a32:	607b      	str	r3, [r7, #4]
 8013a34:	e002      	b.n	8013a3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013a36:	f04f 33ff 	mov.w	r3, #4294967295
 8013a3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013a3c:	687b      	ldr	r3, [r7, #4]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	370c      	adds	r7, #12
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr
 8013a4a:	bf00      	nop
 8013a4c:	20000b3c 	.word	0x20000b3c

08013a50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a56:	f3ef 8305 	mrs	r3, IPSR
 8013a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8013a5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d003      	beq.n	8013a6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8013a62:	f06f 0305 	mvn.w	r3, #5
 8013a66:	607b      	str	r3, [r7, #4]
 8013a68:	e010      	b.n	8013a8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013a6a:	4b0b      	ldr	r3, [pc, #44]	; (8013a98 <osKernelStart+0x48>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d109      	bne.n	8013a86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013a72:	f7ff ffbf 	bl	80139f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013a76:	4b08      	ldr	r3, [pc, #32]	; (8013a98 <osKernelStart+0x48>)
 8013a78:	2202      	movs	r2, #2
 8013a7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013a7c:	f001 f88e 	bl	8014b9c <vTaskStartScheduler>
      stat = osOK;
 8013a80:	2300      	movs	r3, #0
 8013a82:	607b      	str	r3, [r7, #4]
 8013a84:	e002      	b.n	8013a8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013a86:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013a8c:	687b      	ldr	r3, [r7, #4]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3708      	adds	r7, #8
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	20000b3c 	.word	0x20000b3c

08013a9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b08e      	sub	sp, #56	; 0x38
 8013aa0:	af04      	add	r7, sp, #16
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aac:	f3ef 8305 	mrs	r3, IPSR
 8013ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8013ab2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d17e      	bne.n	8013bb6 <osThreadNew+0x11a>
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d07b      	beq.n	8013bb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013abe:	2380      	movs	r3, #128	; 0x80
 8013ac0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013ac2:	2318      	movs	r3, #24
 8013ac4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013aca:	f04f 33ff 	mov.w	r3, #4294967295
 8013ace:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d045      	beq.n	8013b62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d002      	beq.n	8013ae4 <osThreadNew+0x48>
        name = attr->name;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	699b      	ldr	r3, [r3, #24]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d002      	beq.n	8013af2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	699b      	ldr	r3, [r3, #24]
 8013af0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013af2:	69fb      	ldr	r3, [r7, #28]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d008      	beq.n	8013b0a <osThreadNew+0x6e>
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	2b38      	cmp	r3, #56	; 0x38
 8013afc:	d805      	bhi.n	8013b0a <osThreadNew+0x6e>
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	f003 0301 	and.w	r3, r3, #1
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <osThreadNew+0x72>
        return (NULL);
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	e054      	b.n	8013bb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	695b      	ldr	r3, [r3, #20]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d003      	beq.n	8013b1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	695b      	ldr	r3, [r3, #20]
 8013b1a:	089b      	lsrs	r3, r3, #2
 8013b1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	689b      	ldr	r3, [r3, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00e      	beq.n	8013b44 <osThreadNew+0xa8>
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8013b2c:	d90a      	bls.n	8013b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d006      	beq.n	8013b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d002      	beq.n	8013b44 <osThreadNew+0xa8>
        mem = 1;
 8013b3e:	2301      	movs	r3, #1
 8013b40:	61bb      	str	r3, [r7, #24]
 8013b42:	e010      	b.n	8013b66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10c      	bne.n	8013b66 <osThreadNew+0xca>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	68db      	ldr	r3, [r3, #12]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d108      	bne.n	8013b66 <osThreadNew+0xca>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	691b      	ldr	r3, [r3, #16]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d104      	bne.n	8013b66 <osThreadNew+0xca>
          mem = 0;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	61bb      	str	r3, [r7, #24]
 8013b60:	e001      	b.n	8013b66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013b66:	69bb      	ldr	r3, [r7, #24]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d110      	bne.n	8013b8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013b74:	9202      	str	r2, [sp, #8]
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	9300      	str	r3, [sp, #0]
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	6a3a      	ldr	r2, [r7, #32]
 8013b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b82:	68f8      	ldr	r0, [r7, #12]
 8013b84:	f000 fd30 	bl	80145e8 <xTaskCreateStatic>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	613b      	str	r3, [r7, #16]
 8013b8c:	e013      	b.n	8013bb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d110      	bne.n	8013bb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013b94:	6a3b      	ldr	r3, [r7, #32]
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	f107 0310 	add.w	r3, r7, #16
 8013b9c:	9301      	str	r3, [sp, #4]
 8013b9e:	69fb      	ldr	r3, [r7, #28]
 8013ba0:	9300      	str	r3, [sp, #0]
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f000 fd63 	bl	8014672 <xTaskCreate>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d001      	beq.n	8013bb6 <osThreadNew+0x11a>
            hTask = NULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013bb6:	693b      	ldr	r3, [r7, #16]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3728      	adds	r7, #40	; 0x28
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013bc0:	b480      	push	{r7}
 8013bc2:	b085      	sub	sp, #20
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	4a07      	ldr	r2, [pc, #28]	; (8013bec <vApplicationGetIdleTaskMemory+0x2c>)
 8013bd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	4a06      	ldr	r2, [pc, #24]	; (8013bf0 <vApplicationGetIdleTaskMemory+0x30>)
 8013bd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2280      	movs	r2, #128	; 0x80
 8013bdc:	601a      	str	r2, [r3, #0]
}
 8013bde:	bf00      	nop
 8013be0:	3714      	adds	r7, #20
 8013be2:	46bd      	mov	sp, r7
 8013be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be8:	4770      	bx	lr
 8013bea:	bf00      	nop
 8013bec:	20000b40 	.word	0x20000b40
 8013bf0:	20000b9c 	.word	0x20000b9c

08013bf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013bf4:	b480      	push	{r7}
 8013bf6:	b085      	sub	sp, #20
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	60f8      	str	r0, [r7, #12]
 8013bfc:	60b9      	str	r1, [r7, #8]
 8013bfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	4a07      	ldr	r2, [pc, #28]	; (8013c20 <vApplicationGetTimerTaskMemory+0x2c>)
 8013c04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	4a06      	ldr	r2, [pc, #24]	; (8013c24 <vApplicationGetTimerTaskMemory+0x30>)
 8013c0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c12:	601a      	str	r2, [r3, #0]
}
 8013c14:	bf00      	nop
 8013c16:	3714      	adds	r7, #20
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1e:	4770      	bx	lr
 8013c20:	20000d9c 	.word	0x20000d9c
 8013c24:	20000df8 	.word	0x20000df8

08013c28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f103 0208 	add.w	r2, r3, #8
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f103 0208 	add.w	r2, r3, #8
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f103 0208 	add.w	r2, r3, #8
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013c5c:	bf00      	nop
 8013c5e:	370c      	adds	r7, #12
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr

08013c68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2200      	movs	r2, #0
 8013c74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013c76:	bf00      	nop
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr

08013c82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013c82:	b480      	push	{r7}
 8013c84:	b085      	sub	sp, #20
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
 8013c8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	689a      	ldr	r2, [r3, #8]
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	689b      	ldr	r3, [r3, #8]
 8013ca4:	683a      	ldr	r2, [r7, #0]
 8013ca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	683a      	ldr	r2, [r7, #0]
 8013cac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	1c5a      	adds	r2, r3, #1
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	601a      	str	r2, [r3, #0]
}
 8013cbe:	bf00      	nop
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr

08013cca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013cca:	b480      	push	{r7}
 8013ccc:	b085      	sub	sp, #20
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
 8013cd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce0:	d103      	bne.n	8013cea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	691b      	ldr	r3, [r3, #16]
 8013ce6:	60fb      	str	r3, [r7, #12]
 8013ce8:	e00c      	b.n	8013d04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	3308      	adds	r3, #8
 8013cee:	60fb      	str	r3, [r7, #12]
 8013cf0:	e002      	b.n	8013cf8 <vListInsert+0x2e>
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	60fb      	str	r3, [r7, #12]
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	68ba      	ldr	r2, [r7, #8]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d2f6      	bcs.n	8013cf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	685a      	ldr	r2, [r3, #4]
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	683a      	ldr	r2, [r7, #0]
 8013d12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	68fa      	ldr	r2, [r7, #12]
 8013d18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	683a      	ldr	r2, [r7, #0]
 8013d1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	1c5a      	adds	r2, r3, #1
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	601a      	str	r2, [r3, #0]
}
 8013d30:	bf00      	nop
 8013d32:	3714      	adds	r7, #20
 8013d34:	46bd      	mov	sp, r7
 8013d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3a:	4770      	bx	lr

08013d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	b085      	sub	sp, #20
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	691b      	ldr	r3, [r3, #16]
 8013d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	6892      	ldr	r2, [r2, #8]
 8013d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	687a      	ldr	r2, [r7, #4]
 8013d5a:	6852      	ldr	r2, [r2, #4]
 8013d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d103      	bne.n	8013d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	689a      	ldr	r2, [r3, #8]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2200      	movs	r2, #0
 8013d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	1e5a      	subs	r2, r3, #1
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	681b      	ldr	r3, [r3, #0]
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3714      	adds	r7, #20
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8e:	4770      	bx	lr

08013d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d102      	bne.n	8013daa <xQueueGenericReset+0x1a>
 8013da4:	f002 f838 	bl	8015e18 <ulSetInterruptMask>
 8013da8:	e7fe      	b.n	8013da8 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8013daa:	f001 ff03 	bl	8015bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013db6:	68f9      	ldr	r1, [r7, #12]
 8013db8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013dba:	fb01 f303 	mul.w	r3, r1, r3
 8013dbe:	441a      	add	r2, r3
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	68f9      	ldr	r1, [r7, #12]
 8013dde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013de0:	fb01 f303 	mul.w	r3, r1, r3
 8013de4:	441a      	add	r2, r3
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	22ff      	movs	r2, #255	; 0xff
 8013dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	22ff      	movs	r2, #255	; 0xff
 8013df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d10e      	bne.n	8013e1e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	691b      	ldr	r3, [r3, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d014      	beq.n	8013e32 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	3310      	adds	r3, #16
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f001 f90d 	bl	801502c <xTaskRemoveFromEventList>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d00c      	beq.n	8013e32 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013e18:	f001 feba 	bl	8015b90 <vPortYield>
 8013e1c:	e009      	b.n	8013e32 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	3310      	adds	r3, #16
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7ff ff00 	bl	8013c28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	3324      	adds	r3, #36	; 0x24
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7ff fefb 	bl	8013c28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013e32:	f001 fed1 	bl	8015bd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013e36:	2301      	movs	r3, #1
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3710      	adds	r7, #16
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b088      	sub	sp, #32
 8013e44:	af02      	add	r7, sp, #8
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	607a      	str	r2, [r7, #4]
 8013e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d102      	bne.n	8013e5a <xQueueGenericCreateStatic+0x1a>
 8013e54:	f001 ffe0 	bl	8015e18 <ulSetInterruptMask>
 8013e58:	e7fe      	b.n	8013e58 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d102      	bne.n	8013e66 <xQueueGenericCreateStatic+0x26>
 8013e60:	f001 ffda 	bl	8015e18 <ulSetInterruptMask>
 8013e64:	e7fe      	b.n	8013e64 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d002      	beq.n	8013e72 <xQueueGenericCreateStatic+0x32>
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d001      	beq.n	8013e76 <xQueueGenericCreateStatic+0x36>
 8013e72:	2301      	movs	r3, #1
 8013e74:	e000      	b.n	8013e78 <xQueueGenericCreateStatic+0x38>
 8013e76:	2300      	movs	r3, #0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d102      	bne.n	8013e82 <xQueueGenericCreateStatic+0x42>
 8013e7c:	f001 ffcc 	bl	8015e18 <ulSetInterruptMask>
 8013e80:	e7fe      	b.n	8013e80 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d102      	bne.n	8013e8e <xQueueGenericCreateStatic+0x4e>
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d101      	bne.n	8013e92 <xQueueGenericCreateStatic+0x52>
 8013e8e:	2301      	movs	r3, #1
 8013e90:	e000      	b.n	8013e94 <xQueueGenericCreateStatic+0x54>
 8013e92:	2300      	movs	r3, #0
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d102      	bne.n	8013e9e <xQueueGenericCreateStatic+0x5e>
 8013e98:	f001 ffbe 	bl	8015e18 <ulSetInterruptMask>
 8013e9c:	e7fe      	b.n	8013e9c <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013e9e:	2350      	movs	r3, #80	; 0x50
 8013ea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	2b50      	cmp	r3, #80	; 0x50
 8013ea6:	d002      	beq.n	8013eae <xQueueGenericCreateStatic+0x6e>
 8013ea8:	f001 ffb6 	bl	8015e18 <ulSetInterruptMask>
 8013eac:	e7fe      	b.n	8013eac <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013eae:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00d      	beq.n	8013ed6 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013ec2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	9300      	str	r3, [sp, #0]
 8013eca:	4613      	mov	r3, r2
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	68b9      	ldr	r1, [r7, #8]
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f000 f805 	bl	8013ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ed6:	697b      	ldr	r3, [r7, #20]
	}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3718      	adds	r7, #24
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	60f8      	str	r0, [r7, #12]
 8013ee8:	60b9      	str	r1, [r7, #8]
 8013eea:	607a      	str	r2, [r7, #4]
 8013eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d103      	bne.n	8013efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	69ba      	ldr	r2, [r7, #24]
 8013ef8:	601a      	str	r2, [r3, #0]
 8013efa:	e002      	b.n	8013f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	687a      	ldr	r2, [r7, #4]
 8013f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013f02:	69bb      	ldr	r3, [r7, #24]
 8013f04:	68fa      	ldr	r2, [r7, #12]
 8013f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013f08:	69bb      	ldr	r3, [r7, #24]
 8013f0a:	68ba      	ldr	r2, [r7, #8]
 8013f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013f0e:	2101      	movs	r1, #1
 8013f10:	69b8      	ldr	r0, [r7, #24]
 8013f12:	f7ff ff3d 	bl	8013d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	78fa      	ldrb	r2, [r7, #3]
 8013f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013f1e:	bf00      	nop
 8013f20:	3710      	adds	r7, #16
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}

08013f26 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013f26:	b580      	push	{r7, lr}
 8013f28:	b08a      	sub	sp, #40	; 0x28
 8013f2a:	af00      	add	r7, sp, #0
 8013f2c:	60f8      	str	r0, [r7, #12]
 8013f2e:	60b9      	str	r1, [r7, #8]
 8013f30:	607a      	str	r2, [r7, #4]
 8013f32:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013f34:	2300      	movs	r3, #0
 8013f36:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8013f3c:	6a3b      	ldr	r3, [r7, #32]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d102      	bne.n	8013f48 <xQueueGenericSend+0x22>
 8013f42:	f001 ff69 	bl	8015e18 <ulSetInterruptMask>
 8013f46:	e7fe      	b.n	8013f46 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d103      	bne.n	8013f56 <xQueueGenericSend+0x30>
 8013f4e:	6a3b      	ldr	r3, [r7, #32]
 8013f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d101      	bne.n	8013f5a <xQueueGenericSend+0x34>
 8013f56:	2301      	movs	r3, #1
 8013f58:	e000      	b.n	8013f5c <xQueueGenericSend+0x36>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d102      	bne.n	8013f66 <xQueueGenericSend+0x40>
 8013f60:	f001 ff5a 	bl	8015e18 <ulSetInterruptMask>
 8013f64:	e7fe      	b.n	8013f64 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	2b02      	cmp	r3, #2
 8013f6a:	d103      	bne.n	8013f74 <xQueueGenericSend+0x4e>
 8013f6c:	6a3b      	ldr	r3, [r7, #32]
 8013f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d101      	bne.n	8013f78 <xQueueGenericSend+0x52>
 8013f74:	2301      	movs	r3, #1
 8013f76:	e000      	b.n	8013f7a <xQueueGenericSend+0x54>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d102      	bne.n	8013f84 <xQueueGenericSend+0x5e>
 8013f7e:	f001 ff4b 	bl	8015e18 <ulSetInterruptMask>
 8013f82:	e7fe      	b.n	8013f82 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f84:	f001 f9e8 	bl	8015358 <xTaskGetSchedulerState>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d102      	bne.n	8013f94 <xQueueGenericSend+0x6e>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d101      	bne.n	8013f98 <xQueueGenericSend+0x72>
 8013f94:	2301      	movs	r3, #1
 8013f96:	e000      	b.n	8013f9a <xQueueGenericSend+0x74>
 8013f98:	2300      	movs	r3, #0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d102      	bne.n	8013fa4 <xQueueGenericSend+0x7e>
 8013f9e:	f001 ff3b 	bl	8015e18 <ulSetInterruptMask>
 8013fa2:	e7fe      	b.n	8013fa2 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fa4:	f001 fe06 	bl	8015bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013fa8:	6a3b      	ldr	r3, [r7, #32]
 8013faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fac:	6a3b      	ldr	r3, [r7, #32]
 8013fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d302      	bcc.n	8013fba <xQueueGenericSend+0x94>
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	d11d      	bne.n	8013ff6 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013fba:	683a      	ldr	r2, [r7, #0]
 8013fbc:	68b9      	ldr	r1, [r7, #8]
 8013fbe:	6a38      	ldr	r0, [r7, #32]
 8013fc0:	f000 f9a4 	bl	801430c <prvCopyDataToQueue>
 8013fc4:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d00a      	beq.n	8013fe4 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013fce:	6a3b      	ldr	r3, [r7, #32]
 8013fd0:	3324      	adds	r3, #36	; 0x24
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f001 f82a 	bl	801502c <xTaskRemoveFromEventList>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d007      	beq.n	8013fee <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013fde:	f001 fdd7 	bl	8015b90 <vPortYield>
 8013fe2:	e004      	b.n	8013fee <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d001      	beq.n	8013fee <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013fea:	f001 fdd1 	bl	8015b90 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013fee:	f001 fdf3 	bl	8015bd8 <vPortExitCritical>
				return pdPASS;
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e05c      	b.n	80140b0 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d103      	bne.n	8014004 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ffc:	f001 fdec 	bl	8015bd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014000:	2300      	movs	r3, #0
 8014002:	e055      	b.n	80140b0 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014006:	2b00      	cmp	r3, #0
 8014008:	d106      	bne.n	8014018 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801400a:	f107 0314 	add.w	r3, r7, #20
 801400e:	4618      	mov	r0, r3
 8014010:	f001 f868 	bl	80150e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014014:	2301      	movs	r3, #1
 8014016:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014018:	f001 fdde 	bl	8015bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801401c:	f000 fe14 	bl	8014c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014020:	f001 fdc8 	bl	8015bb4 <vPortEnterCritical>
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801402a:	b25b      	sxtb	r3, r3
 801402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014030:	d103      	bne.n	801403a <xQueueGenericSend+0x114>
 8014032:	6a3b      	ldr	r3, [r7, #32]
 8014034:	2200      	movs	r2, #0
 8014036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801403a:	6a3b      	ldr	r3, [r7, #32]
 801403c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014040:	b25b      	sxtb	r3, r3
 8014042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014046:	d103      	bne.n	8014050 <xQueueGenericSend+0x12a>
 8014048:	6a3b      	ldr	r3, [r7, #32]
 801404a:	2200      	movs	r2, #0
 801404c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014050:	f001 fdc2 	bl	8015bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014054:	1d3a      	adds	r2, r7, #4
 8014056:	f107 0314 	add.w	r3, r7, #20
 801405a:	4611      	mov	r1, r2
 801405c:	4618      	mov	r0, r3
 801405e:	f001 f857 	bl	8015110 <xTaskCheckForTimeOut>
 8014062:	4603      	mov	r3, r0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d11d      	bne.n	80140a4 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014068:	6a38      	ldr	r0, [r7, #32]
 801406a:	f000 fa47 	bl	80144fc <prvIsQueueFull>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	d011      	beq.n	8014098 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	3310      	adds	r3, #16
 8014078:	687a      	ldr	r2, [r7, #4]
 801407a:	4611      	mov	r1, r2
 801407c:	4618      	mov	r0, r3
 801407e:	f000 ff95 	bl	8014fac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014082:	6a38      	ldr	r0, [r7, #32]
 8014084:	f000 f9d2 	bl	801442c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014088:	f000 fdec 	bl	8014c64 <xTaskResumeAll>
 801408c:	4603      	mov	r3, r0
 801408e:	2b00      	cmp	r3, #0
 8014090:	d188      	bne.n	8013fa4 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 8014092:	f001 fd7d 	bl	8015b90 <vPortYield>
 8014096:	e785      	b.n	8013fa4 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014098:	6a38      	ldr	r0, [r7, #32]
 801409a:	f000 f9c7 	bl	801442c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801409e:	f000 fde1 	bl	8014c64 <xTaskResumeAll>
 80140a2:	e77f      	b.n	8013fa4 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80140a4:	6a38      	ldr	r0, [r7, #32]
 80140a6:	f000 f9c1 	bl	801442c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140aa:	f000 fddb 	bl	8014c64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80140ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3728      	adds	r7, #40	; 0x28
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}

080140b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b08a      	sub	sp, #40	; 0x28
 80140bc:	af00      	add	r7, sp, #0
 80140be:	60f8      	str	r0, [r7, #12]
 80140c0:	60b9      	str	r1, [r7, #8]
 80140c2:	607a      	str	r2, [r7, #4]
 80140c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80140ca:	6a3b      	ldr	r3, [r7, #32]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d102      	bne.n	80140d6 <xQueueGenericSendFromISR+0x1e>
 80140d0:	f001 fea2 	bl	8015e18 <ulSetInterruptMask>
 80140d4:	e7fe      	b.n	80140d4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d103      	bne.n	80140e4 <xQueueGenericSendFromISR+0x2c>
 80140dc:	6a3b      	ldr	r3, [r7, #32]
 80140de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d101      	bne.n	80140e8 <xQueueGenericSendFromISR+0x30>
 80140e4:	2301      	movs	r3, #1
 80140e6:	e000      	b.n	80140ea <xQueueGenericSendFromISR+0x32>
 80140e8:	2300      	movs	r3, #0
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d102      	bne.n	80140f4 <xQueueGenericSendFromISR+0x3c>
 80140ee:	f001 fe93 	bl	8015e18 <ulSetInterruptMask>
 80140f2:	e7fe      	b.n	80140f2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	2b02      	cmp	r3, #2
 80140f8:	d103      	bne.n	8014102 <xQueueGenericSendFromISR+0x4a>
 80140fa:	6a3b      	ldr	r3, [r7, #32]
 80140fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d101      	bne.n	8014106 <xQueueGenericSendFromISR+0x4e>
 8014102:	2301      	movs	r3, #1
 8014104:	e000      	b.n	8014108 <xQueueGenericSendFromISR+0x50>
 8014106:	2300      	movs	r3, #0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d102      	bne.n	8014112 <xQueueGenericSendFromISR+0x5a>
 801410c:	f001 fe84 	bl	8015e18 <ulSetInterruptMask>
 8014110:	e7fe      	b.n	8014110 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014112:	f001 fe81 	bl	8015e18 <ulSetInterruptMask>
 8014116:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014118:	6a3b      	ldr	r3, [r7, #32]
 801411a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801411c:	6a3b      	ldr	r3, [r7, #32]
 801411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014120:	429a      	cmp	r2, r3
 8014122:	d302      	bcc.n	801412a <xQueueGenericSendFromISR+0x72>
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	2b02      	cmp	r3, #2
 8014128:	d12d      	bne.n	8014186 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801412a:	6a3b      	ldr	r3, [r7, #32]
 801412c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014130:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014132:	6a3b      	ldr	r3, [r7, #32]
 8014134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014136:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014138:	683a      	ldr	r2, [r7, #0]
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	6a38      	ldr	r0, [r7, #32]
 801413e:	f000 f8e5 	bl	801430c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014142:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801414a:	d112      	bne.n	8014172 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801414c:	6a3b      	ldr	r3, [r7, #32]
 801414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014150:	2b00      	cmp	r3, #0
 8014152:	d015      	beq.n	8014180 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014154:	6a3b      	ldr	r3, [r7, #32]
 8014156:	3324      	adds	r3, #36	; 0x24
 8014158:	4618      	mov	r0, r3
 801415a:	f000 ff67 	bl	801502c <xTaskRemoveFromEventList>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d00d      	beq.n	8014180 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00a      	beq.n	8014180 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2201      	movs	r2, #1
 801416e:	601a      	str	r2, [r3, #0]
 8014170:	e006      	b.n	8014180 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014172:	7efb      	ldrb	r3, [r7, #27]
 8014174:	3301      	adds	r3, #1
 8014176:	b2db      	uxtb	r3, r3
 8014178:	b25a      	sxtb	r2, r3
 801417a:	6a3b      	ldr	r3, [r7, #32]
 801417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014180:	2301      	movs	r3, #1
 8014182:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8014184:	e001      	b.n	801418a <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014186:	2300      	movs	r3, #0
 8014188:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801418a:	69f8      	ldr	r0, [r7, #28]
 801418c:	f001 fe51 	bl	8015e32 <vClearInterruptMask>

	return xReturn;
 8014190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014192:	4618      	mov	r0, r3
 8014194:	3728      	adds	r7, #40	; 0x28
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801419a:	b580      	push	{r7, lr}
 801419c:	b08a      	sub	sp, #40	; 0x28
 801419e:	af00      	add	r7, sp, #0
 80141a0:	60f8      	str	r0, [r7, #12]
 80141a2:	60b9      	str	r1, [r7, #8]
 80141a4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80141a6:	2300      	movs	r3, #0
 80141a8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80141ae:	6a3b      	ldr	r3, [r7, #32]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d102      	bne.n	80141ba <xQueueReceive+0x20>
 80141b4:	f001 fe30 	bl	8015e18 <ulSetInterruptMask>
 80141b8:	e7fe      	b.n	80141b8 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d103      	bne.n	80141c8 <xQueueReceive+0x2e>
 80141c0:	6a3b      	ldr	r3, [r7, #32]
 80141c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d101      	bne.n	80141cc <xQueueReceive+0x32>
 80141c8:	2301      	movs	r3, #1
 80141ca:	e000      	b.n	80141ce <xQueueReceive+0x34>
 80141cc:	2300      	movs	r3, #0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <xQueueReceive+0x3e>
 80141d2:	f001 fe21 	bl	8015e18 <ulSetInterruptMask>
 80141d6:	e7fe      	b.n	80141d6 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141d8:	f001 f8be 	bl	8015358 <xTaskGetSchedulerState>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d102      	bne.n	80141e8 <xQueueReceive+0x4e>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d101      	bne.n	80141ec <xQueueReceive+0x52>
 80141e8:	2301      	movs	r3, #1
 80141ea:	e000      	b.n	80141ee <xQueueReceive+0x54>
 80141ec:	2300      	movs	r3, #0
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d102      	bne.n	80141f8 <xQueueReceive+0x5e>
 80141f2:	f001 fe11 	bl	8015e18 <ulSetInterruptMask>
 80141f6:	e7fe      	b.n	80141f6 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141f8:	f001 fcdc 	bl	8015bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141fc:	6a3b      	ldr	r3, [r7, #32]
 80141fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014200:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d019      	beq.n	801423c <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014208:	68b9      	ldr	r1, [r7, #8]
 801420a:	6a38      	ldr	r0, [r7, #32]
 801420c:	f000 f8e8 	bl	80143e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	1e5a      	subs	r2, r3, #1
 8014214:	6a3b      	ldr	r3, [r7, #32]
 8014216:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014218:	6a3b      	ldr	r3, [r7, #32]
 801421a:	691b      	ldr	r3, [r3, #16]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d009      	beq.n	8014234 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014220:	6a3b      	ldr	r3, [r7, #32]
 8014222:	3310      	adds	r3, #16
 8014224:	4618      	mov	r0, r3
 8014226:	f000 ff01 	bl	801502c <xTaskRemoveFromEventList>
 801422a:	4603      	mov	r3, r0
 801422c:	2b00      	cmp	r3, #0
 801422e:	d001      	beq.n	8014234 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014230:	f001 fcae 	bl	8015b90 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014234:	f001 fcd0 	bl	8015bd8 <vPortExitCritical>
				return pdPASS;
 8014238:	2301      	movs	r3, #1
 801423a:	e063      	b.n	8014304 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d103      	bne.n	801424a <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014242:	f001 fcc9 	bl	8015bd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014246:	2300      	movs	r3, #0
 8014248:	e05c      	b.n	8014304 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424c:	2b00      	cmp	r3, #0
 801424e:	d106      	bne.n	801425e <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014250:	f107 0314 	add.w	r3, r7, #20
 8014254:	4618      	mov	r0, r3
 8014256:	f000 ff45 	bl	80150e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801425a:	2301      	movs	r3, #1
 801425c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801425e:	f001 fcbb 	bl	8015bd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014262:	f000 fcf1 	bl	8014c48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014266:	f001 fca5 	bl	8015bb4 <vPortEnterCritical>
 801426a:	6a3b      	ldr	r3, [r7, #32]
 801426c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014270:	b25b      	sxtb	r3, r3
 8014272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014276:	d103      	bne.n	8014280 <xQueueReceive+0xe6>
 8014278:	6a3b      	ldr	r3, [r7, #32]
 801427a:	2200      	movs	r2, #0
 801427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014280:	6a3b      	ldr	r3, [r7, #32]
 8014282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014286:	b25b      	sxtb	r3, r3
 8014288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801428c:	d103      	bne.n	8014296 <xQueueReceive+0xfc>
 801428e:	6a3b      	ldr	r3, [r7, #32]
 8014290:	2200      	movs	r2, #0
 8014292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014296:	f001 fc9f 	bl	8015bd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801429a:	1d3a      	adds	r2, r7, #4
 801429c:	f107 0314 	add.w	r3, r7, #20
 80142a0:	4611      	mov	r1, r2
 80142a2:	4618      	mov	r0, r3
 80142a4:	f000 ff34 	bl	8015110 <xTaskCheckForTimeOut>
 80142a8:	4603      	mov	r3, r0
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d11d      	bne.n	80142ea <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142ae:	6a38      	ldr	r0, [r7, #32]
 80142b0:	f000 f90e 	bl	80144d0 <prvIsQueueEmpty>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d011      	beq.n	80142de <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80142ba:	6a3b      	ldr	r3, [r7, #32]
 80142bc:	3324      	adds	r3, #36	; 0x24
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	4611      	mov	r1, r2
 80142c2:	4618      	mov	r0, r3
 80142c4:	f000 fe72 	bl	8014fac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80142c8:	6a38      	ldr	r0, [r7, #32]
 80142ca:	f000 f8af 	bl	801442c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80142ce:	f000 fcc9 	bl	8014c64 <xTaskResumeAll>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d18f      	bne.n	80141f8 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 80142d8:	f001 fc5a 	bl	8015b90 <vPortYield>
 80142dc:	e78c      	b.n	80141f8 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80142de:	6a38      	ldr	r0, [r7, #32]
 80142e0:	f000 f8a4 	bl	801442c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142e4:	f000 fcbe 	bl	8014c64 <xTaskResumeAll>
 80142e8:	e786      	b.n	80141f8 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80142ea:	6a38      	ldr	r0, [r7, #32]
 80142ec:	f000 f89e 	bl	801442c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142f0:	f000 fcb8 	bl	8014c64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142f4:	6a38      	ldr	r0, [r7, #32]
 80142f6:	f000 f8eb 	bl	80144d0 <prvIsQueueEmpty>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f43f af7b 	beq.w	80141f8 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014304:	4618      	mov	r0, r3
 8014306:	3728      	adds	r7, #40	; 0x28
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b086      	sub	sp, #24
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014318:	2300      	movs	r3, #0
 801431a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014320:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014326:	2b00      	cmp	r3, #0
 8014328:	d10d      	bne.n	8014346 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d14d      	bne.n	80143ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	689b      	ldr	r3, [r3, #8]
 8014336:	4618      	mov	r0, r3
 8014338:	f001 f82c 	bl	8015394 <xTaskPriorityDisinherit>
 801433c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	2200      	movs	r2, #0
 8014342:	609a      	str	r2, [r3, #8]
 8014344:	e043      	b.n	80143ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d119      	bne.n	8014380 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	6858      	ldr	r0, [r3, #4]
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014354:	461a      	mov	r2, r3
 8014356:	68b9      	ldr	r1, [r7, #8]
 8014358:	f003 f9bc 	bl	80176d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	685a      	ldr	r2, [r3, #4]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014364:	441a      	add	r2, r3
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	685a      	ldr	r2, [r3, #4]
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	689b      	ldr	r3, [r3, #8]
 8014372:	429a      	cmp	r2, r3
 8014374:	d32b      	bcc.n	80143ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	605a      	str	r2, [r3, #4]
 801437e:	e026      	b.n	80143ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	68d8      	ldr	r0, [r3, #12]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014388:	461a      	mov	r2, r3
 801438a:	68b9      	ldr	r1, [r7, #8]
 801438c:	f003 f9a2 	bl	80176d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	68da      	ldr	r2, [r3, #12]
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014398:	425b      	negs	r3, r3
 801439a:	441a      	add	r2, r3
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	68da      	ldr	r2, [r3, #12]
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d207      	bcs.n	80143bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	689a      	ldr	r2, [r3, #8]
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143b4:	425b      	negs	r3, r3
 80143b6:	441a      	add	r2, r3
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d105      	bne.n	80143ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143c2:	693b      	ldr	r3, [r7, #16]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d002      	beq.n	80143ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	3b01      	subs	r3, #1
 80143cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	1c5a      	adds	r2, r3, #1
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80143d6:	697b      	ldr	r3, [r7, #20]
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3718      	adds	r7, #24
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d018      	beq.n	8014424 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	68da      	ldr	r2, [r3, #12]
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143fa:	441a      	add	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	68da      	ldr	r2, [r3, #12]
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	429a      	cmp	r2, r3
 801440a:	d303      	bcc.n	8014414 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681a      	ldr	r2, [r3, #0]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	68d9      	ldr	r1, [r3, #12]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801441c:	461a      	mov	r2, r3
 801441e:	6838      	ldr	r0, [r7, #0]
 8014420:	f003 f958 	bl	80176d4 <memcpy>
	}
}
 8014424:	bf00      	nop
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014434:	f001 fbbe 	bl	8015bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801443e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014440:	e011      	b.n	8014466 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014446:	2b00      	cmp	r3, #0
 8014448:	d012      	beq.n	8014470 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	3324      	adds	r3, #36	; 0x24
 801444e:	4618      	mov	r0, r3
 8014450:	f000 fdec 	bl	801502c <xTaskRemoveFromEventList>
 8014454:	4603      	mov	r3, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	d001      	beq.n	801445e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801445a:	f000 feab 	bl	80151b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801445e:	7bfb      	ldrb	r3, [r7, #15]
 8014460:	3b01      	subs	r3, #1
 8014462:	b2db      	uxtb	r3, r3
 8014464:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801446a:	2b00      	cmp	r3, #0
 801446c:	dce9      	bgt.n	8014442 <prvUnlockQueue+0x16>
 801446e:	e000      	b.n	8014472 <prvUnlockQueue+0x46>
					break;
 8014470:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	22ff      	movs	r2, #255	; 0xff
 8014476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801447a:	f001 fbad 	bl	8015bd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801447e:	f001 fb99 	bl	8015bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014488:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801448a:	e011      	b.n	80144b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	691b      	ldr	r3, [r3, #16]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d012      	beq.n	80144ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	3310      	adds	r3, #16
 8014498:	4618      	mov	r0, r3
 801449a:	f000 fdc7 	bl	801502c <xTaskRemoveFromEventList>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80144a4:	f000 fe86 	bl	80151b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80144a8:	7bbb      	ldrb	r3, [r7, #14]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	b2db      	uxtb	r3, r3
 80144ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80144b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	dce9      	bgt.n	801448c <prvUnlockQueue+0x60>
 80144b8:	e000      	b.n	80144bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80144ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	22ff      	movs	r2, #255	; 0xff
 80144c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80144c4:	f001 fb88 	bl	8015bd8 <vPortExitCritical>
}
 80144c8:	bf00      	nop
 80144ca:	3710      	adds	r7, #16
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80144d8:	f001 fb6c 	bl	8015bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d102      	bne.n	80144ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80144e4:	2301      	movs	r3, #1
 80144e6:	60fb      	str	r3, [r7, #12]
 80144e8:	e001      	b.n	80144ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80144ea:	2300      	movs	r3, #0
 80144ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80144ee:	f001 fb73 	bl	8015bd8 <vPortExitCritical>

	return xReturn;
 80144f2:	68fb      	ldr	r3, [r7, #12]
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014504:	f001 fb56 	bl	8015bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014510:	429a      	cmp	r2, r3
 8014512:	d102      	bne.n	801451a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014514:	2301      	movs	r3, #1
 8014516:	60fb      	str	r3, [r7, #12]
 8014518:	e001      	b.n	801451e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801451a:	2300      	movs	r3, #0
 801451c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801451e:	f001 fb5b 	bl	8015bd8 <vPortExitCritical>

	return xReturn;
 8014522:	68fb      	ldr	r3, [r7, #12]
}
 8014524:	4618      	mov	r0, r3
 8014526:	3710      	adds	r7, #16
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014536:	2300      	movs	r3, #0
 8014538:	60fb      	str	r3, [r7, #12]
 801453a:	e014      	b.n	8014566 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801453c:	4a0f      	ldr	r2, [pc, #60]	; (801457c <vQueueAddToRegistry+0x50>)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10b      	bne.n	8014560 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014548:	490c      	ldr	r1, [pc, #48]	; (801457c <vQueueAddToRegistry+0x50>)
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	683a      	ldr	r2, [r7, #0]
 801454e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014552:	4a0a      	ldr	r2, [pc, #40]	; (801457c <vQueueAddToRegistry+0x50>)
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	00db      	lsls	r3, r3, #3
 8014558:	4413      	add	r3, r2
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801455e:	e006      	b.n	801456e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	3301      	adds	r3, #1
 8014564:	60fb      	str	r3, [r7, #12]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2b07      	cmp	r3, #7
 801456a:	d9e7      	bls.n	801453c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801456c:	bf00      	nop
 801456e:	bf00      	nop
 8014570:	3714      	adds	r7, #20
 8014572:	46bd      	mov	sp, r7
 8014574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014578:	4770      	bx	lr
 801457a:	bf00      	nop
 801457c:	200011f8 	.word	0x200011f8

08014580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014580:	b580      	push	{r7, lr}
 8014582:	b086      	sub	sp, #24
 8014584:	af00      	add	r7, sp, #0
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014590:	f001 fb10 	bl	8015bb4 <vPortEnterCritical>
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801459a:	b25b      	sxtb	r3, r3
 801459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145a0:	d103      	bne.n	80145aa <vQueueWaitForMessageRestricted+0x2a>
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	2200      	movs	r2, #0
 80145a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145aa:	697b      	ldr	r3, [r7, #20]
 80145ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145b0:	b25b      	sxtb	r3, r3
 80145b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145b6:	d103      	bne.n	80145c0 <vQueueWaitForMessageRestricted+0x40>
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	2200      	movs	r2, #0
 80145bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145c0:	f001 fb0a 	bl	8015bd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d106      	bne.n	80145da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	3324      	adds	r3, #36	; 0x24
 80145d0:	687a      	ldr	r2, [r7, #4]
 80145d2:	68b9      	ldr	r1, [r7, #8]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f000 fd05 	bl	8014fe4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80145da:	6978      	ldr	r0, [r7, #20]
 80145dc:	f7ff ff26 	bl	801442c <prvUnlockQueue>
	}
 80145e0:	bf00      	nop
 80145e2:	3718      	adds	r7, #24
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}

080145e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b08c      	sub	sp, #48	; 0x30
 80145ec:	af04      	add	r7, sp, #16
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	607a      	str	r2, [r7, #4]
 80145f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80145f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d102      	bne.n	8014602 <xTaskCreateStatic+0x1a>
 80145fc:	f001 fc0c 	bl	8015e18 <ulSetInterruptMask>
 8014600:	e7fe      	b.n	8014600 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 8014602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014604:	2b00      	cmp	r3, #0
 8014606:	d102      	bne.n	801460e <xTaskCreateStatic+0x26>
 8014608:	f001 fc06 	bl	8015e18 <ulSetInterruptMask>
 801460c:	e7fe      	b.n	801460c <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801460e:	235c      	movs	r3, #92	; 0x5c
 8014610:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	2b5c      	cmp	r3, #92	; 0x5c
 8014616:	d002      	beq.n	801461e <xTaskCreateStatic+0x36>
 8014618:	f001 fbfe 	bl	8015e18 <ulSetInterruptMask>
 801461c:	e7fe      	b.n	801461c <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801461e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014622:	2b00      	cmp	r3, #0
 8014624:	d01e      	beq.n	8014664 <xTaskCreateStatic+0x7c>
 8014626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014628:	2b00      	cmp	r3, #0
 801462a:	d01b      	beq.n	8014664 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014634:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	2202      	movs	r2, #2
 801463a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801463e:	2300      	movs	r3, #0
 8014640:	9303      	str	r3, [sp, #12]
 8014642:	69fb      	ldr	r3, [r7, #28]
 8014644:	9302      	str	r3, [sp, #8]
 8014646:	f107 0318 	add.w	r3, r7, #24
 801464a:	9301      	str	r3, [sp, #4]
 801464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801464e:	9300      	str	r3, [sp, #0]
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	687a      	ldr	r2, [r7, #4]
 8014654:	68b9      	ldr	r1, [r7, #8]
 8014656:	68f8      	ldr	r0, [r7, #12]
 8014658:	f000 f850 	bl	80146fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801465c:	69f8      	ldr	r0, [r7, #28]
 801465e:	f000 f8d7 	bl	8014810 <prvAddNewTaskToReadyList>
 8014662:	e001      	b.n	8014668 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8014664:	2300      	movs	r3, #0
 8014666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014668:	69bb      	ldr	r3, [r7, #24]
	}
 801466a:	4618      	mov	r0, r3
 801466c:	3720      	adds	r7, #32
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014672:	b580      	push	{r7, lr}
 8014674:	b08c      	sub	sp, #48	; 0x30
 8014676:	af04      	add	r7, sp, #16
 8014678:	60f8      	str	r0, [r7, #12]
 801467a:	60b9      	str	r1, [r7, #8]
 801467c:	603b      	str	r3, [r7, #0]
 801467e:	4613      	mov	r3, r2
 8014680:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014682:	88fb      	ldrh	r3, [r7, #6]
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	4618      	mov	r0, r3
 8014688:	f001 fc26 	bl	8015ed8 <pvPortMalloc>
 801468c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d00e      	beq.n	80146b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014694:	205c      	movs	r0, #92	; 0x5c
 8014696:	f001 fc1f 	bl	8015ed8 <pvPortMalloc>
 801469a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d003      	beq.n	80146aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	697a      	ldr	r2, [r7, #20]
 80146a6:	631a      	str	r2, [r3, #48]	; 0x30
 80146a8:	e005      	b.n	80146b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80146aa:	6978      	ldr	r0, [r7, #20]
 80146ac:	f001 fcc8 	bl	8016040 <vPortFree>
 80146b0:	e001      	b.n	80146b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80146b2:	2300      	movs	r3, #0
 80146b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d017      	beq.n	80146ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	2200      	movs	r2, #0
 80146c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80146c4:	88fa      	ldrh	r2, [r7, #6]
 80146c6:	2300      	movs	r3, #0
 80146c8:	9303      	str	r3, [sp, #12]
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	9302      	str	r3, [sp, #8]
 80146ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	68b9      	ldr	r1, [r7, #8]
 80146da:	68f8      	ldr	r0, [r7, #12]
 80146dc:	f000 f80e 	bl	80146fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80146e0:	69f8      	ldr	r0, [r7, #28]
 80146e2:	f000 f895 	bl	8014810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80146e6:	2301      	movs	r3, #1
 80146e8:	61bb      	str	r3, [r7, #24]
 80146ea:	e002      	b.n	80146f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80146ec:	f04f 33ff 	mov.w	r3, #4294967295
 80146f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80146f2:	69bb      	ldr	r3, [r7, #24]
	}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3720      	adds	r7, #32
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b086      	sub	sp, #24
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	607a      	str	r2, [r7, #4]
 8014708:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	009b      	lsls	r3, r3, #2
 8014712:	461a      	mov	r2, r3
 8014714:	21a5      	movs	r1, #165	; 0xa5
 8014716:	f002 ff55 	bl	80175c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014724:	3b01      	subs	r3, #1
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4413      	add	r3, r2
 801472a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	f023 0307 	bic.w	r3, r3, #7
 8014732:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	f003 0307 	and.w	r3, r3, #7
 801473a:	2b00      	cmp	r3, #0
 801473c:	d002      	beq.n	8014744 <prvInitialiseNewTask+0x48>
 801473e:	f001 fb6b 	bl	8015e18 <ulSetInterruptMask>
 8014742:	e7fe      	b.n	8014742 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d01f      	beq.n	801478a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801474a:	2300      	movs	r3, #0
 801474c:	617b      	str	r3, [r7, #20]
 801474e:	e012      	b.n	8014776 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014750:	68ba      	ldr	r2, [r7, #8]
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	4413      	add	r3, r2
 8014756:	7819      	ldrb	r1, [r3, #0]
 8014758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	4413      	add	r3, r2
 801475e:	3334      	adds	r3, #52	; 0x34
 8014760:	460a      	mov	r2, r1
 8014762:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014764:	68ba      	ldr	r2, [r7, #8]
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	4413      	add	r3, r2
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d006      	beq.n	801477e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	3301      	adds	r3, #1
 8014774:	617b      	str	r3, [r7, #20]
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	2b0f      	cmp	r3, #15
 801477a:	d9e9      	bls.n	8014750 <prvInitialiseNewTask+0x54>
 801477c:	e000      	b.n	8014780 <prvInitialiseNewTask+0x84>
			{
				break;
 801477e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014782:	2200      	movs	r2, #0
 8014784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014788:	e003      	b.n	8014792 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801478c:	2200      	movs	r2, #0
 801478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014792:	6a3b      	ldr	r3, [r7, #32]
 8014794:	2b37      	cmp	r3, #55	; 0x37
 8014796:	d901      	bls.n	801479c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014798:	2337      	movs	r3, #55	; 0x37
 801479a:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479e:	6a3a      	ldr	r2, [r7, #32]
 80147a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80147a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a4:	6a3a      	ldr	r2, [r7, #32]
 80147a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80147a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147aa:	2200      	movs	r2, #0
 80147ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80147ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b0:	3304      	adds	r3, #4
 80147b2:	4618      	mov	r0, r3
 80147b4:	f7ff fa58 	bl	8013c68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80147b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ba:	3318      	adds	r3, #24
 80147bc:	4618      	mov	r0, r3
 80147be:	f7ff fa53 	bl	8013c68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147c8:	6a3b      	ldr	r3, [r7, #32]
 80147ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80147ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80147d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80147d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147da:	2200      	movs	r2, #0
 80147dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80147de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e0:	2200      	movs	r2, #0
 80147e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80147e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	6938      	ldr	r0, [r7, #16]
 80147f0:	f001 fa3c 	bl	8015c6c <pxPortInitialiseStack>
 80147f4:	4602      	mov	r2, r0
 80147f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d002      	beq.n	8014806 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014806:	bf00      	nop
 8014808:	3718      	adds	r7, #24
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
	...

08014810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014818:	f001 f9cc 	bl	8015bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801481c:	4b2a      	ldr	r3, [pc, #168]	; (80148c8 <prvAddNewTaskToReadyList+0xb8>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	3301      	adds	r3, #1
 8014822:	4a29      	ldr	r2, [pc, #164]	; (80148c8 <prvAddNewTaskToReadyList+0xb8>)
 8014824:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014826:	4b29      	ldr	r3, [pc, #164]	; (80148cc <prvAddNewTaskToReadyList+0xbc>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d109      	bne.n	8014842 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801482e:	4a27      	ldr	r2, [pc, #156]	; (80148cc <prvAddNewTaskToReadyList+0xbc>)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014834:	4b24      	ldr	r3, [pc, #144]	; (80148c8 <prvAddNewTaskToReadyList+0xb8>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b01      	cmp	r3, #1
 801483a:	d110      	bne.n	801485e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801483c:	f000 fcd6 	bl	80151ec <prvInitialiseTaskLists>
 8014840:	e00d      	b.n	801485e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014842:	4b23      	ldr	r3, [pc, #140]	; (80148d0 <prvAddNewTaskToReadyList+0xc0>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d109      	bne.n	801485e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801484a:	4b20      	ldr	r3, [pc, #128]	; (80148cc <prvAddNewTaskToReadyList+0xbc>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014854:	429a      	cmp	r2, r3
 8014856:	d802      	bhi.n	801485e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014858:	4a1c      	ldr	r2, [pc, #112]	; (80148cc <prvAddNewTaskToReadyList+0xbc>)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801485e:	4b1d      	ldr	r3, [pc, #116]	; (80148d4 <prvAddNewTaskToReadyList+0xc4>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	3301      	adds	r3, #1
 8014864:	4a1b      	ldr	r2, [pc, #108]	; (80148d4 <prvAddNewTaskToReadyList+0xc4>)
 8014866:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014868:	4b1a      	ldr	r3, [pc, #104]	; (80148d4 <prvAddNewTaskToReadyList+0xc4>)
 801486a:	681a      	ldr	r2, [r3, #0]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014874:	4b18      	ldr	r3, [pc, #96]	; (80148d8 <prvAddNewTaskToReadyList+0xc8>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	429a      	cmp	r2, r3
 801487a:	d903      	bls.n	8014884 <prvAddNewTaskToReadyList+0x74>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014880:	4a15      	ldr	r2, [pc, #84]	; (80148d8 <prvAddNewTaskToReadyList+0xc8>)
 8014882:	6013      	str	r3, [r2, #0]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014888:	4613      	mov	r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	4413      	add	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4a12      	ldr	r2, [pc, #72]	; (80148dc <prvAddNewTaskToReadyList+0xcc>)
 8014892:	441a      	add	r2, r3
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	3304      	adds	r3, #4
 8014898:	4619      	mov	r1, r3
 801489a:	4610      	mov	r0, r2
 801489c:	f7ff f9f1 	bl	8013c82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80148a0:	f001 f99a 	bl	8015bd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80148a4:	4b0a      	ldr	r3, [pc, #40]	; (80148d0 <prvAddNewTaskToReadyList+0xc0>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d008      	beq.n	80148be <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80148ac:	4b07      	ldr	r3, [pc, #28]	; (80148cc <prvAddNewTaskToReadyList+0xbc>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d201      	bcs.n	80148be <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80148ba:	f001 f969 	bl	8015b90 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80148be:	bf00      	nop
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	2000170c 	.word	0x2000170c
 80148cc:	20001238 	.word	0x20001238
 80148d0:	20001718 	.word	0x20001718
 80148d4:	20001728 	.word	0x20001728
 80148d8:	20001714 	.word	0x20001714
 80148dc:	2000123c 	.word	0x2000123c

080148e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b086      	sub	sp, #24
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80148ea:	2300      	movs	r3, #0
 80148ec:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d102      	bne.n	80148fa <vTaskDelayUntil+0x1a>
 80148f4:	f001 fa90 	bl	8015e18 <ulSetInterruptMask>
 80148f8:	e7fe      	b.n	80148f8 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d102      	bne.n	8014906 <vTaskDelayUntil+0x26>
 8014900:	f001 fa8a 	bl	8015e18 <ulSetInterruptMask>
 8014904:	e7fe      	b.n	8014904 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 8014906:	4b23      	ldr	r3, [pc, #140]	; (8014994 <vTaskDelayUntil+0xb4>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d002      	beq.n	8014914 <vTaskDelayUntil+0x34>
 801490e:	f001 fa83 	bl	8015e18 <ulSetInterruptMask>
 8014912:	e7fe      	b.n	8014912 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 8014914:	f000 f998 	bl	8014c48 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8014918:	4b1f      	ldr	r3, [pc, #124]	; (8014998 <vTaskDelayUntil+0xb8>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	683a      	ldr	r2, [r7, #0]
 8014924:	4413      	add	r3, r2
 8014926:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	693a      	ldr	r2, [r7, #16]
 801492e:	429a      	cmp	r2, r3
 8014930:	d20b      	bcs.n	801494a <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	68fa      	ldr	r2, [r7, #12]
 8014938:	429a      	cmp	r2, r3
 801493a:	d211      	bcs.n	8014960 <vTaskDelayUntil+0x80>
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	429a      	cmp	r2, r3
 8014942:	d90d      	bls.n	8014960 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 8014944:	2301      	movs	r3, #1
 8014946:	617b      	str	r3, [r7, #20]
 8014948:	e00a      	b.n	8014960 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	68fa      	ldr	r2, [r7, #12]
 8014950:	429a      	cmp	r2, r3
 8014952:	d303      	bcc.n	801495c <vTaskDelayUntil+0x7c>
 8014954:	68fa      	ldr	r2, [r7, #12]
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	429a      	cmp	r2, r3
 801495a:	d901      	bls.n	8014960 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801495c:	2301      	movs	r3, #1
 801495e:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d006      	beq.n	801497a <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	1ad3      	subs	r3, r2, r3
 8014972:	2100      	movs	r1, #0
 8014974:	4618      	mov	r0, r3
 8014976:	f000 fd6b 	bl	8015450 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801497a:	f000 f973 	bl	8014c64 <xTaskResumeAll>
 801497e:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d101      	bne.n	801498a <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 8014986:	f001 f903 	bl	8015b90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801498a:	bf00      	nop
 801498c:	3718      	adds	r7, #24
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	20001734 	.word	0x20001734
 8014998:	20001710 	.word	0x20001710

0801499c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80149a4:	2300      	movs	r3, #0
 80149a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d00f      	beq.n	80149ce <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80149ae:	4b0c      	ldr	r3, [pc, #48]	; (80149e0 <vTaskDelay+0x44>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d002      	beq.n	80149bc <vTaskDelay+0x20>
 80149b6:	f001 fa2f 	bl	8015e18 <ulSetInterruptMask>
 80149ba:	e7fe      	b.n	80149ba <vTaskDelay+0x1e>
			vTaskSuspendAll();
 80149bc:	f000 f944 	bl	8014c48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80149c0:	2100      	movs	r1, #0
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f000 fd44 	bl	8015450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80149c8:	f000 f94c 	bl	8014c64 <xTaskResumeAll>
 80149cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d101      	bne.n	80149d8 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 80149d4:	f001 f8dc 	bl	8015b90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80149d8:	bf00      	nop
 80149da:	3710      	adds	r7, #16
 80149dc:	46bd      	mov	sp, r7
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	20001734 	.word	0x20001734

080149e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80149ec:	f001 f8e2 	bl	8015bb4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d102      	bne.n	80149fc <vTaskSuspend+0x18>
 80149f6:	4b29      	ldr	r3, [pc, #164]	; (8014a9c <vTaskSuspend+0xb8>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	e000      	b.n	80149fe <vTaskSuspend+0x1a>
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	3304      	adds	r3, #4
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7ff f999 	bl	8013d3c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d004      	beq.n	8014a1c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	3318      	adds	r3, #24
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7ff f990 	bl	8013d3c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	3304      	adds	r3, #4
 8014a20:	4619      	mov	r1, r3
 8014a22:	481f      	ldr	r0, [pc, #124]	; (8014aa0 <vTaskSuspend+0xbc>)
 8014a24:	f7ff f92d 	bl	8013c82 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d103      	bne.n	8014a3c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	2200      	movs	r2, #0
 8014a38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014a3c:	f001 f8cc 	bl	8015bd8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014a40:	4b18      	ldr	r3, [pc, #96]	; (8014aa4 <vTaskSuspend+0xc0>)
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d005      	beq.n	8014a54 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014a48:	f001 f8b4 	bl	8015bb4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014a4c:	f000 fc64 	bl	8015318 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014a50:	f001 f8c2 	bl	8015bd8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014a54:	4b11      	ldr	r3, [pc, #68]	; (8014a9c <vTaskSuspend+0xb8>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	68fa      	ldr	r2, [r7, #12]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d119      	bne.n	8014a92 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8014a5e:	4b11      	ldr	r3, [pc, #68]	; (8014aa4 <vTaskSuspend+0xc0>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d009      	beq.n	8014a7a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014a66:	4b10      	ldr	r3, [pc, #64]	; (8014aa8 <vTaskSuspend+0xc4>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d002      	beq.n	8014a74 <vTaskSuspend+0x90>
 8014a6e:	f001 f9d3 	bl	8015e18 <ulSetInterruptMask>
 8014a72:	e7fe      	b.n	8014a72 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8014a74:	f001 f88c 	bl	8015b90 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a78:	e00b      	b.n	8014a92 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014a7a:	4b09      	ldr	r3, [pc, #36]	; (8014aa0 <vTaskSuspend+0xbc>)
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	4b0b      	ldr	r3, [pc, #44]	; (8014aac <vTaskSuspend+0xc8>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d103      	bne.n	8014a8e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8014a86:	4b05      	ldr	r3, [pc, #20]	; (8014a9c <vTaskSuspend+0xb8>)
 8014a88:	2200      	movs	r2, #0
 8014a8a:	601a      	str	r2, [r3, #0]
	}
 8014a8c:	e001      	b.n	8014a92 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8014a8e:	f000 fa39 	bl	8014f04 <vTaskSwitchContext>
	}
 8014a92:	bf00      	nop
 8014a94:	3710      	adds	r7, #16
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	20001238 	.word	0x20001238
 8014aa0:	200016f8 	.word	0x200016f8
 8014aa4:	20001718 	.word	0x20001718
 8014aa8:	20001734 	.word	0x20001734
 8014aac:	2000170c 	.word	0x2000170c

08014ab0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d102      	bne.n	8014acc <prvTaskIsTaskSuspended+0x1c>
 8014ac6:	f001 f9a7 	bl	8015e18 <ulSetInterruptMask>
 8014aca:	e7fe      	b.n	8014aca <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	695b      	ldr	r3, [r3, #20]
 8014ad0:	4a09      	ldr	r2, [pc, #36]	; (8014af8 <prvTaskIsTaskSuspended+0x48>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d10a      	bne.n	8014aec <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ada:	4a08      	ldr	r2, [pc, #32]	; (8014afc <prvTaskIsTaskSuspended+0x4c>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d005      	beq.n	8014aec <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014aec:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014aee:	4618      	mov	r0, r3
 8014af0:	3710      	adds	r7, #16
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	200016f8 	.word	0x200016f8
 8014afc:	200016cc 	.word	0x200016cc

08014b00 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d102      	bne.n	8014b18 <vTaskResume+0x18>
 8014b12:	f001 f981 	bl	8015e18 <ulSetInterruptMask>
 8014b16:	e7fe      	b.n	8014b16 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8014b18:	4b1d      	ldr	r3, [pc, #116]	; (8014b90 <vTaskResume+0x90>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d032      	beq.n	8014b88 <vTaskResume+0x88>
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d02f      	beq.n	8014b88 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 8014b28:	f001 f844 	bl	8015bb4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014b2c:	68f8      	ldr	r0, [r7, #12]
 8014b2e:	f7ff ffbf 	bl	8014ab0 <prvTaskIsTaskSuspended>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d025      	beq.n	8014b84 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	3304      	adds	r3, #4
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7ff f8fd 	bl	8013d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b46:	4b13      	ldr	r3, [pc, #76]	; (8014b94 <vTaskResume+0x94>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d903      	bls.n	8014b56 <vTaskResume+0x56>
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b52:	4a10      	ldr	r2, [pc, #64]	; (8014b94 <vTaskResume+0x94>)
 8014b54:	6013      	str	r3, [r2, #0]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	4a0d      	ldr	r2, [pc, #52]	; (8014b98 <vTaskResume+0x98>)
 8014b64:	441a      	add	r2, r3
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	3304      	adds	r3, #4
 8014b6a:	4619      	mov	r1, r3
 8014b6c:	4610      	mov	r0, r2
 8014b6e:	f7ff f888 	bl	8013c82 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b76:	4b06      	ldr	r3, [pc, #24]	; (8014b90 <vTaskResume+0x90>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d301      	bcc.n	8014b84 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8014b80:	f001 f806 	bl	8015b90 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8014b84:	f001 f828 	bl	8015bd8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b88:	bf00      	nop
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	20001238 	.word	0x20001238
 8014b94:	20001714 	.word	0x20001714
 8014b98:	2000123c 	.word	0x2000123c

08014b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b088      	sub	sp, #32
 8014ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014baa:	463a      	mov	r2, r7
 8014bac:	1d39      	adds	r1, r7, #4
 8014bae:	f107 0308 	add.w	r3, r7, #8
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7ff f804 	bl	8013bc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014bb8:	6839      	ldr	r1, [r7, #0]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	68ba      	ldr	r2, [r7, #8]
 8014bbe:	9202      	str	r2, [sp, #8]
 8014bc0:	9301      	str	r3, [sp, #4]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	9300      	str	r3, [sp, #0]
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	460a      	mov	r2, r1
 8014bca:	4919      	ldr	r1, [pc, #100]	; (8014c30 <vTaskStartScheduler+0x94>)
 8014bcc:	4819      	ldr	r0, [pc, #100]	; (8014c34 <vTaskStartScheduler+0x98>)
 8014bce:	f7ff fd0b 	bl	80145e8 <xTaskCreateStatic>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	4a18      	ldr	r2, [pc, #96]	; (8014c38 <vTaskStartScheduler+0x9c>)
 8014bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014bd8:	4b17      	ldr	r3, [pc, #92]	; (8014c38 <vTaskStartScheduler+0x9c>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014be0:	2301      	movs	r3, #1
 8014be2:	60fb      	str	r3, [r7, #12]
 8014be4:	e001      	b.n	8014bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014be6:	2300      	movs	r3, #0
 8014be8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d102      	bne.n	8014bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014bf0:	f000 fc82 	bl	80154f8 <xTimerCreateTimerTask>
 8014bf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d10e      	bne.n	8014c1a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8014bfc:	f001 f90c 	bl	8015e18 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014c00:	4b0e      	ldr	r3, [pc, #56]	; (8014c3c <vTaskStartScheduler+0xa0>)
 8014c02:	f04f 32ff 	mov.w	r2, #4294967295
 8014c06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014c08:	4b0d      	ldr	r3, [pc, #52]	; (8014c40 <vTaskStartScheduler+0xa4>)
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014c0e:	4b0d      	ldr	r3, [pc, #52]	; (8014c44 <vTaskStartScheduler+0xa8>)
 8014c10:	2200      	movs	r2, #0
 8014c12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014c14:	f001 f8b4 	bl	8015d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014c18:	e006      	b.n	8014c28 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c20:	d102      	bne.n	8014c28 <vTaskStartScheduler+0x8c>
 8014c22:	f001 f8f9 	bl	8015e18 <ulSetInterruptMask>
 8014c26:	e7fe      	b.n	8014c26 <vTaskStartScheduler+0x8a>
}
 8014c28:	bf00      	nop
 8014c2a:	3710      	adds	r7, #16
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	08018248 	.word	0x08018248
 8014c34:	080151cd 	.word	0x080151cd
 8014c38:	20001730 	.word	0x20001730
 8014c3c:	2000172c 	.word	0x2000172c
 8014c40:	20001718 	.word	0x20001718
 8014c44:	20001710 	.word	0x20001710

08014c48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014c48:	b480      	push	{r7}
 8014c4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014c4c:	4b04      	ldr	r3, [pc, #16]	; (8014c60 <vTaskSuspendAll+0x18>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	3301      	adds	r3, #1
 8014c52:	4a03      	ldr	r2, [pc, #12]	; (8014c60 <vTaskSuspendAll+0x18>)
 8014c54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014c56:	bf00      	nop
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr
 8014c60:	20001734 	.word	0x20001734

08014c64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014c72:	4b3b      	ldr	r3, [pc, #236]	; (8014d60 <xTaskResumeAll+0xfc>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d102      	bne.n	8014c80 <xTaskResumeAll+0x1c>
 8014c7a:	f001 f8cd 	bl	8015e18 <ulSetInterruptMask>
 8014c7e:	e7fe      	b.n	8014c7e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c80:	f000 ff98 	bl	8015bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c84:	4b36      	ldr	r3, [pc, #216]	; (8014d60 <xTaskResumeAll+0xfc>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	3b01      	subs	r3, #1
 8014c8a:	4a35      	ldr	r2, [pc, #212]	; (8014d60 <xTaskResumeAll+0xfc>)
 8014c8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c8e:	4b34      	ldr	r3, [pc, #208]	; (8014d60 <xTaskResumeAll+0xfc>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d15c      	bne.n	8014d50 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c96:	4b33      	ldr	r3, [pc, #204]	; (8014d64 <xTaskResumeAll+0x100>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d058      	beq.n	8014d50 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c9e:	e02f      	b.n	8014d00 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ca0:	4b31      	ldr	r3, [pc, #196]	; (8014d68 <xTaskResumeAll+0x104>)
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	3318      	adds	r3, #24
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7ff f845 	bl	8013d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	3304      	adds	r3, #4
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7ff f840 	bl	8013d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cc0:	4b2a      	ldr	r3, [pc, #168]	; (8014d6c <xTaskResumeAll+0x108>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d903      	bls.n	8014cd0 <xTaskResumeAll+0x6c>
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ccc:	4a27      	ldr	r2, [pc, #156]	; (8014d6c <xTaskResumeAll+0x108>)
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	009b      	lsls	r3, r3, #2
 8014cd8:	4413      	add	r3, r2
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4a24      	ldr	r2, [pc, #144]	; (8014d70 <xTaskResumeAll+0x10c>)
 8014cde:	441a      	add	r2, r3
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	3304      	adds	r3, #4
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	4610      	mov	r0, r2
 8014ce8:	f7fe ffcb 	bl	8013c82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cf0:	4b20      	ldr	r3, [pc, #128]	; (8014d74 <xTaskResumeAll+0x110>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cf6:	429a      	cmp	r2, r3
 8014cf8:	d302      	bcc.n	8014d00 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8014cfa:	4b1f      	ldr	r3, [pc, #124]	; (8014d78 <xTaskResumeAll+0x114>)
 8014cfc:	2201      	movs	r2, #1
 8014cfe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014d00:	4b19      	ldr	r3, [pc, #100]	; (8014d68 <xTaskResumeAll+0x104>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d1cb      	bne.n	8014ca0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d001      	beq.n	8014d12 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014d0e:	f000 fb03 	bl	8015318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014d12:	4b1a      	ldr	r3, [pc, #104]	; (8014d7c <xTaskResumeAll+0x118>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d010      	beq.n	8014d40 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014d1e:	f000 f83f 	bl	8014da0 <xTaskIncrementTick>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d002      	beq.n	8014d2e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 8014d28:	4b13      	ldr	r3, [pc, #76]	; (8014d78 <xTaskResumeAll+0x114>)
 8014d2a:	2201      	movs	r2, #1
 8014d2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	3b01      	subs	r3, #1
 8014d32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d1f1      	bne.n	8014d1e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8014d3a:	4b10      	ldr	r3, [pc, #64]	; (8014d7c <xTaskResumeAll+0x118>)
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014d40:	4b0d      	ldr	r3, [pc, #52]	; (8014d78 <xTaskResumeAll+0x114>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d003      	beq.n	8014d50 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014d48:	2301      	movs	r3, #1
 8014d4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014d4c:	f000 ff20 	bl	8015b90 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d50:	f000 ff42 	bl	8015bd8 <vPortExitCritical>

	return xAlreadyYielded;
 8014d54:	68bb      	ldr	r3, [r7, #8]
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3710      	adds	r7, #16
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	20001734 	.word	0x20001734
 8014d64:	2000170c 	.word	0x2000170c
 8014d68:	200016cc 	.word	0x200016cc
 8014d6c:	20001714 	.word	0x20001714
 8014d70:	2000123c 	.word	0x2000123c
 8014d74:	20001238 	.word	0x20001238
 8014d78:	20001720 	.word	0x20001720
 8014d7c:	2000171c 	.word	0x2000171c

08014d80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014d86:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <xTaskGetTickCount+0x1c>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014d8c:	687b      	ldr	r3, [r7, #4]
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	370c      	adds	r7, #12
 8014d92:	46bd      	mov	sp, r7
 8014d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d98:	4770      	bx	lr
 8014d9a:	bf00      	nop
 8014d9c:	20001710 	.word	0x20001710

08014da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b086      	sub	sp, #24
 8014da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014da6:	2300      	movs	r3, #0
 8014da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014daa:	4b4b      	ldr	r3, [pc, #300]	; (8014ed8 <xTaskIncrementTick+0x138>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	f040 8087 	bne.w	8014ec2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014db4:	4b49      	ldr	r3, [pc, #292]	; (8014edc <xTaskIncrementTick+0x13c>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	3301      	adds	r3, #1
 8014dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014dbc:	4a47      	ldr	r2, [pc, #284]	; (8014edc <xTaskIncrementTick+0x13c>)
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014dc2:	693b      	ldr	r3, [r7, #16]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d118      	bne.n	8014dfa <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014dc8:	4b45      	ldr	r3, [pc, #276]	; (8014ee0 <xTaskIncrementTick+0x140>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d002      	beq.n	8014dd8 <xTaskIncrementTick+0x38>
 8014dd2:	f001 f821 	bl	8015e18 <ulSetInterruptMask>
 8014dd6:	e7fe      	b.n	8014dd6 <xTaskIncrementTick+0x36>
 8014dd8:	4b41      	ldr	r3, [pc, #260]	; (8014ee0 <xTaskIncrementTick+0x140>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	60fb      	str	r3, [r7, #12]
 8014dde:	4b41      	ldr	r3, [pc, #260]	; (8014ee4 <xTaskIncrementTick+0x144>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	4a3f      	ldr	r2, [pc, #252]	; (8014ee0 <xTaskIncrementTick+0x140>)
 8014de4:	6013      	str	r3, [r2, #0]
 8014de6:	4a3f      	ldr	r2, [pc, #252]	; (8014ee4 <xTaskIncrementTick+0x144>)
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	6013      	str	r3, [r2, #0]
 8014dec:	4b3e      	ldr	r3, [pc, #248]	; (8014ee8 <xTaskIncrementTick+0x148>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	3301      	adds	r3, #1
 8014df2:	4a3d      	ldr	r2, [pc, #244]	; (8014ee8 <xTaskIncrementTick+0x148>)
 8014df4:	6013      	str	r3, [r2, #0]
 8014df6:	f000 fa8f 	bl	8015318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014dfa:	4b3c      	ldr	r3, [pc, #240]	; (8014eec <xTaskIncrementTick+0x14c>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	693a      	ldr	r2, [r7, #16]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d349      	bcc.n	8014e98 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e04:	4b36      	ldr	r3, [pc, #216]	; (8014ee0 <xTaskIncrementTick+0x140>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d104      	bne.n	8014e18 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e0e:	4b37      	ldr	r3, [pc, #220]	; (8014eec <xTaskIncrementTick+0x14c>)
 8014e10:	f04f 32ff 	mov.w	r2, #4294967295
 8014e14:	601a      	str	r2, [r3, #0]
					break;
 8014e16:	e03f      	b.n	8014e98 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e18:	4b31      	ldr	r3, [pc, #196]	; (8014ee0 <xTaskIncrementTick+0x140>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	68db      	ldr	r3, [r3, #12]
 8014e1e:	68db      	ldr	r3, [r3, #12]
 8014e20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014e28:	693a      	ldr	r2, [r7, #16]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d203      	bcs.n	8014e38 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014e30:	4a2e      	ldr	r2, [pc, #184]	; (8014eec <xTaskIncrementTick+0x14c>)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014e36:	e02f      	b.n	8014e98 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	3304      	adds	r3, #4
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fe ff7d 	bl	8013d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d004      	beq.n	8014e54 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	3318      	adds	r3, #24
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f7fe ff74 	bl	8013d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e58:	4b25      	ldr	r3, [pc, #148]	; (8014ef0 <xTaskIncrementTick+0x150>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d903      	bls.n	8014e68 <xTaskIncrementTick+0xc8>
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e64:	4a22      	ldr	r2, [pc, #136]	; (8014ef0 <xTaskIncrementTick+0x150>)
 8014e66:	6013      	str	r3, [r2, #0]
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	4413      	add	r3, r2
 8014e72:	009b      	lsls	r3, r3, #2
 8014e74:	4a1f      	ldr	r2, [pc, #124]	; (8014ef4 <xTaskIncrementTick+0x154>)
 8014e76:	441a      	add	r2, r3
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	4610      	mov	r0, r2
 8014e80:	f7fe feff 	bl	8013c82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e88:	4b1b      	ldr	r3, [pc, #108]	; (8014ef8 <xTaskIncrementTick+0x158>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d3b8      	bcc.n	8014e04 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8014e92:	2301      	movs	r3, #1
 8014e94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e96:	e7b5      	b.n	8014e04 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e98:	4b17      	ldr	r3, [pc, #92]	; (8014ef8 <xTaskIncrementTick+0x158>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e9e:	4915      	ldr	r1, [pc, #84]	; (8014ef4 <xTaskIncrementTick+0x154>)
 8014ea0:	4613      	mov	r3, r2
 8014ea2:	009b      	lsls	r3, r3, #2
 8014ea4:	4413      	add	r3, r2
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	440b      	add	r3, r1
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d901      	bls.n	8014eb4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014eb4:	4b11      	ldr	r3, [pc, #68]	; (8014efc <xTaskIncrementTick+0x15c>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d007      	beq.n	8014ecc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	617b      	str	r3, [r7, #20]
 8014ec0:	e004      	b.n	8014ecc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014ec2:	4b0f      	ldr	r3, [pc, #60]	; (8014f00 <xTaskIncrementTick+0x160>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	4a0d      	ldr	r2, [pc, #52]	; (8014f00 <xTaskIncrementTick+0x160>)
 8014eca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014ecc:	697b      	ldr	r3, [r7, #20]
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3718      	adds	r7, #24
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	20001734 	.word	0x20001734
 8014edc:	20001710 	.word	0x20001710
 8014ee0:	200016c4 	.word	0x200016c4
 8014ee4:	200016c8 	.word	0x200016c8
 8014ee8:	20001724 	.word	0x20001724
 8014eec:	2000172c 	.word	0x2000172c
 8014ef0:	20001714 	.word	0x20001714
 8014ef4:	2000123c 	.word	0x2000123c
 8014ef8:	20001238 	.word	0x20001238
 8014efc:	20001720 	.word	0x20001720
 8014f00:	2000171c 	.word	0x2000171c

08014f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b082      	sub	sp, #8
 8014f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014f0a:	4b23      	ldr	r3, [pc, #140]	; (8014f98 <vTaskSwitchContext+0x94>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d003      	beq.n	8014f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014f12:	4b22      	ldr	r3, [pc, #136]	; (8014f9c <vTaskSwitchContext+0x98>)
 8014f14:	2201      	movs	r2, #1
 8014f16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014f18:	e039      	b.n	8014f8e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 8014f1a:	4b20      	ldr	r3, [pc, #128]	; (8014f9c <vTaskSwitchContext+0x98>)
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f20:	4b1f      	ldr	r3, [pc, #124]	; (8014fa0 <vTaskSwitchContext+0x9c>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	607b      	str	r3, [r7, #4]
 8014f26:	e008      	b.n	8014f3a <vTaskSwitchContext+0x36>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d102      	bne.n	8014f34 <vTaskSwitchContext+0x30>
 8014f2e:	f000 ff73 	bl	8015e18 <ulSetInterruptMask>
 8014f32:	e7fe      	b.n	8014f32 <vTaskSwitchContext+0x2e>
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	3b01      	subs	r3, #1
 8014f38:	607b      	str	r3, [r7, #4]
 8014f3a:	491a      	ldr	r1, [pc, #104]	; (8014fa4 <vTaskSwitchContext+0xa0>)
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	4613      	mov	r3, r2
 8014f40:	009b      	lsls	r3, r3, #2
 8014f42:	4413      	add	r3, r2
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	440b      	add	r3, r1
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d0ec      	beq.n	8014f28 <vTaskSwitchContext+0x24>
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	4613      	mov	r3, r2
 8014f52:	009b      	lsls	r3, r3, #2
 8014f54:	4413      	add	r3, r2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	4a12      	ldr	r2, [pc, #72]	; (8014fa4 <vTaskSwitchContext+0xa0>)
 8014f5a:	4413      	add	r3, r2
 8014f5c:	603b      	str	r3, [r7, #0]
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	685a      	ldr	r2, [r3, #4]
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	605a      	str	r2, [r3, #4]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	3308      	adds	r3, #8
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d104      	bne.n	8014f7e <vTaskSwitchContext+0x7a>
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	685a      	ldr	r2, [r3, #4]
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	605a      	str	r2, [r3, #4]
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	4a08      	ldr	r2, [pc, #32]	; (8014fa8 <vTaskSwitchContext+0xa4>)
 8014f86:	6013      	str	r3, [r2, #0]
 8014f88:	4a05      	ldr	r2, [pc, #20]	; (8014fa0 <vTaskSwitchContext+0x9c>)
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6013      	str	r3, [r2, #0]
}
 8014f8e:	bf00      	nop
 8014f90:	3708      	adds	r7, #8
 8014f92:	46bd      	mov	sp, r7
 8014f94:	bd80      	pop	{r7, pc}
 8014f96:	bf00      	nop
 8014f98:	20001734 	.word	0x20001734
 8014f9c:	20001720 	.word	0x20001720
 8014fa0:	20001714 	.word	0x20001714
 8014fa4:	2000123c 	.word	0x2000123c
 8014fa8:	20001238 	.word	0x20001238

08014fac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	6078      	str	r0, [r7, #4]
 8014fb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d102      	bne.n	8014fc2 <vTaskPlaceOnEventList+0x16>
 8014fbc:	f000 ff2c 	bl	8015e18 <ulSetInterruptMask>
 8014fc0:	e7fe      	b.n	8014fc0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fc2:	4b07      	ldr	r3, [pc, #28]	; (8014fe0 <vTaskPlaceOnEventList+0x34>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	3318      	adds	r3, #24
 8014fc8:	4619      	mov	r1, r3
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7fe fe7d 	bl	8013cca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fd0:	2101      	movs	r1, #1
 8014fd2:	6838      	ldr	r0, [r7, #0]
 8014fd4:	f000 fa3c 	bl	8015450 <prvAddCurrentTaskToDelayedList>
}
 8014fd8:	bf00      	nop
 8014fda:	3708      	adds	r7, #8
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	20001238 	.word	0x20001238

08014fe4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b084      	sub	sp, #16
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d102      	bne.n	8014ffc <vTaskPlaceOnEventListRestricted+0x18>
 8014ff6:	f000 ff0f 	bl	8015e18 <ulSetInterruptMask>
 8014ffa:	e7fe      	b.n	8014ffa <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014ffc:	4b0a      	ldr	r3, [pc, #40]	; (8015028 <vTaskPlaceOnEventListRestricted+0x44>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	3318      	adds	r3, #24
 8015002:	4619      	mov	r1, r3
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7fe fe3c 	bl	8013c82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d002      	beq.n	8015016 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 8015010:	f04f 33ff 	mov.w	r3, #4294967295
 8015014:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015016:	6879      	ldr	r1, [r7, #4]
 8015018:	68b8      	ldr	r0, [r7, #8]
 801501a:	f000 fa19 	bl	8015450 <prvAddCurrentTaskToDelayedList>
	}
 801501e:	bf00      	nop
 8015020:	3710      	adds	r7, #16
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	20001238 	.word	0x20001238

0801502c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	68db      	ldr	r3, [r3, #12]
 801503a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d102      	bne.n	8015048 <xTaskRemoveFromEventList+0x1c>
 8015042:	f000 fee9 	bl	8015e18 <ulSetInterruptMask>
 8015046:	e7fe      	b.n	8015046 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	3318      	adds	r3, #24
 801504c:	4618      	mov	r0, r3
 801504e:	f7fe fe75 	bl	8013d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015052:	4b1e      	ldr	r3, [pc, #120]	; (80150cc <xTaskRemoveFromEventList+0xa0>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d11d      	bne.n	8015096 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	3304      	adds	r3, #4
 801505e:	4618      	mov	r0, r3
 8015060:	f7fe fe6c 	bl	8013d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015068:	4b19      	ldr	r3, [pc, #100]	; (80150d0 <xTaskRemoveFromEventList+0xa4>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	429a      	cmp	r2, r3
 801506e:	d903      	bls.n	8015078 <xTaskRemoveFromEventList+0x4c>
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015074:	4a16      	ldr	r2, [pc, #88]	; (80150d0 <xTaskRemoveFromEventList+0xa4>)
 8015076:	6013      	str	r3, [r2, #0]
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801507c:	4613      	mov	r3, r2
 801507e:	009b      	lsls	r3, r3, #2
 8015080:	4413      	add	r3, r2
 8015082:	009b      	lsls	r3, r3, #2
 8015084:	4a13      	ldr	r2, [pc, #76]	; (80150d4 <xTaskRemoveFromEventList+0xa8>)
 8015086:	441a      	add	r2, r3
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	3304      	adds	r3, #4
 801508c:	4619      	mov	r1, r3
 801508e:	4610      	mov	r0, r2
 8015090:	f7fe fdf7 	bl	8013c82 <vListInsertEnd>
 8015094:	e005      	b.n	80150a2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	3318      	adds	r3, #24
 801509a:	4619      	mov	r1, r3
 801509c:	480e      	ldr	r0, [pc, #56]	; (80150d8 <xTaskRemoveFromEventList+0xac>)
 801509e:	f7fe fdf0 	bl	8013c82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a6:	4b0d      	ldr	r3, [pc, #52]	; (80150dc <xTaskRemoveFromEventList+0xb0>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d905      	bls.n	80150bc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80150b0:	2301      	movs	r3, #1
 80150b2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80150b4:	4b0a      	ldr	r3, [pc, #40]	; (80150e0 <xTaskRemoveFromEventList+0xb4>)
 80150b6:	2201      	movs	r2, #1
 80150b8:	601a      	str	r2, [r3, #0]
 80150ba:	e001      	b.n	80150c0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80150bc:	2300      	movs	r3, #0
 80150be:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80150c0:	68fb      	ldr	r3, [r7, #12]
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	20001734 	.word	0x20001734
 80150d0:	20001714 	.word	0x20001714
 80150d4:	2000123c 	.word	0x2000123c
 80150d8:	200016cc 	.word	0x200016cc
 80150dc:	20001238 	.word	0x20001238
 80150e0:	20001720 	.word	0x20001720

080150e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80150e4:	b480      	push	{r7}
 80150e6:	b083      	sub	sp, #12
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80150ec:	4b06      	ldr	r3, [pc, #24]	; (8015108 <vTaskInternalSetTimeOutState+0x24>)
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80150f4:	4b05      	ldr	r3, [pc, #20]	; (801510c <vTaskInternalSetTimeOutState+0x28>)
 80150f6:	681a      	ldr	r2, [r3, #0]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	605a      	str	r2, [r3, #4]
}
 80150fc:	bf00      	nop
 80150fe:	370c      	adds	r7, #12
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr
 8015108:	20001724 	.word	0x20001724
 801510c:	20001710 	.word	0x20001710

08015110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b086      	sub	sp, #24
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d102      	bne.n	8015126 <xTaskCheckForTimeOut+0x16>
 8015120:	f000 fe7a 	bl	8015e18 <ulSetInterruptMask>
 8015124:	e7fe      	b.n	8015124 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d102      	bne.n	8015132 <xTaskCheckForTimeOut+0x22>
 801512c:	f000 fe74 	bl	8015e18 <ulSetInterruptMask>
 8015130:	e7fe      	b.n	8015130 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8015132:	f000 fd3f 	bl	8015bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015136:	4b1d      	ldr	r3, [pc, #116]	; (80151ac <xTaskCheckForTimeOut+0x9c>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	1ad3      	subs	r3, r2, r3
 8015144:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801514e:	d102      	bne.n	8015156 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015150:	2300      	movs	r3, #0
 8015152:	617b      	str	r3, [r7, #20]
 8015154:	e023      	b.n	801519e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	4b15      	ldr	r3, [pc, #84]	; (80151b0 <xTaskCheckForTimeOut+0xa0>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	429a      	cmp	r2, r3
 8015160:	d007      	beq.n	8015172 <xTaskCheckForTimeOut+0x62>
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	685b      	ldr	r3, [r3, #4]
 8015166:	693a      	ldr	r2, [r7, #16]
 8015168:	429a      	cmp	r2, r3
 801516a:	d302      	bcc.n	8015172 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801516c:	2301      	movs	r3, #1
 801516e:	617b      	str	r3, [r7, #20]
 8015170:	e015      	b.n	801519e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	68fa      	ldr	r2, [r7, #12]
 8015178:	429a      	cmp	r2, r3
 801517a:	d20b      	bcs.n	8015194 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	681a      	ldr	r2, [r3, #0]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	1ad2      	subs	r2, r2, r3
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015188:	6878      	ldr	r0, [r7, #4]
 801518a:	f7ff ffab 	bl	80150e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801518e:	2300      	movs	r3, #0
 8015190:	617b      	str	r3, [r7, #20]
 8015192:	e004      	b.n	801519e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	2200      	movs	r2, #0
 8015198:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801519a:	2301      	movs	r3, #1
 801519c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801519e:	f000 fd1b 	bl	8015bd8 <vPortExitCritical>

	return xReturn;
 80151a2:	697b      	ldr	r3, [r7, #20]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	20001710 	.word	0x20001710
 80151b0:	20001724 	.word	0x20001724

080151b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80151b4:	b480      	push	{r7}
 80151b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80151b8:	4b03      	ldr	r3, [pc, #12]	; (80151c8 <vTaskMissedYield+0x14>)
 80151ba:	2201      	movs	r2, #1
 80151bc:	601a      	str	r2, [r3, #0]
}
 80151be:	bf00      	nop
 80151c0:	46bd      	mov	sp, r7
 80151c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c6:	4770      	bx	lr
 80151c8:	20001720 	.word	0x20001720

080151cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80151d4:	f000 f84a 	bl	801526c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80151d8:	4b03      	ldr	r3, [pc, #12]	; (80151e8 <prvIdleTask+0x1c>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d9f9      	bls.n	80151d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80151e0:	f000 fcd6 	bl	8015b90 <vPortYield>
		prvCheckTasksWaitingTermination();
 80151e4:	e7f6      	b.n	80151d4 <prvIdleTask+0x8>
 80151e6:	bf00      	nop
 80151e8:	2000123c 	.word	0x2000123c

080151ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151f2:	2300      	movs	r3, #0
 80151f4:	607b      	str	r3, [r7, #4]
 80151f6:	e00c      	b.n	8015212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80151f8:	687a      	ldr	r2, [r7, #4]
 80151fa:	4613      	mov	r3, r2
 80151fc:	009b      	lsls	r3, r3, #2
 80151fe:	4413      	add	r3, r2
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	4a12      	ldr	r2, [pc, #72]	; (801524c <prvInitialiseTaskLists+0x60>)
 8015204:	4413      	add	r3, r2
 8015206:	4618      	mov	r0, r3
 8015208:	f7fe fd0e 	bl	8013c28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	3301      	adds	r3, #1
 8015210:	607b      	str	r3, [r7, #4]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2b37      	cmp	r3, #55	; 0x37
 8015216:	d9ef      	bls.n	80151f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015218:	480d      	ldr	r0, [pc, #52]	; (8015250 <prvInitialiseTaskLists+0x64>)
 801521a:	f7fe fd05 	bl	8013c28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801521e:	480d      	ldr	r0, [pc, #52]	; (8015254 <prvInitialiseTaskLists+0x68>)
 8015220:	f7fe fd02 	bl	8013c28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015224:	480c      	ldr	r0, [pc, #48]	; (8015258 <prvInitialiseTaskLists+0x6c>)
 8015226:	f7fe fcff 	bl	8013c28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801522a:	480c      	ldr	r0, [pc, #48]	; (801525c <prvInitialiseTaskLists+0x70>)
 801522c:	f7fe fcfc 	bl	8013c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015230:	480b      	ldr	r0, [pc, #44]	; (8015260 <prvInitialiseTaskLists+0x74>)
 8015232:	f7fe fcf9 	bl	8013c28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015236:	4b0b      	ldr	r3, [pc, #44]	; (8015264 <prvInitialiseTaskLists+0x78>)
 8015238:	4a05      	ldr	r2, [pc, #20]	; (8015250 <prvInitialiseTaskLists+0x64>)
 801523a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801523c:	4b0a      	ldr	r3, [pc, #40]	; (8015268 <prvInitialiseTaskLists+0x7c>)
 801523e:	4a05      	ldr	r2, [pc, #20]	; (8015254 <prvInitialiseTaskLists+0x68>)
 8015240:	601a      	str	r2, [r3, #0]
}
 8015242:	bf00      	nop
 8015244:	3708      	adds	r7, #8
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	2000123c 	.word	0x2000123c
 8015250:	2000169c 	.word	0x2000169c
 8015254:	200016b0 	.word	0x200016b0
 8015258:	200016cc 	.word	0x200016cc
 801525c:	200016e0 	.word	0x200016e0
 8015260:	200016f8 	.word	0x200016f8
 8015264:	200016c4 	.word	0x200016c4
 8015268:	200016c8 	.word	0x200016c8

0801526c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015272:	e019      	b.n	80152a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015274:	f000 fc9e 	bl	8015bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015278:	4b10      	ldr	r3, [pc, #64]	; (80152bc <prvCheckTasksWaitingTermination+0x50>)
 801527a:	68db      	ldr	r3, [r3, #12]
 801527c:	68db      	ldr	r3, [r3, #12]
 801527e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	3304      	adds	r3, #4
 8015284:	4618      	mov	r0, r3
 8015286:	f7fe fd59 	bl	8013d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801528a:	4b0d      	ldr	r3, [pc, #52]	; (80152c0 <prvCheckTasksWaitingTermination+0x54>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	3b01      	subs	r3, #1
 8015290:	4a0b      	ldr	r2, [pc, #44]	; (80152c0 <prvCheckTasksWaitingTermination+0x54>)
 8015292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015294:	4b0b      	ldr	r3, [pc, #44]	; (80152c4 <prvCheckTasksWaitingTermination+0x58>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	3b01      	subs	r3, #1
 801529a:	4a0a      	ldr	r2, [pc, #40]	; (80152c4 <prvCheckTasksWaitingTermination+0x58>)
 801529c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801529e:	f000 fc9b 	bl	8015bd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f000 f810 	bl	80152c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80152a8:	4b06      	ldr	r3, [pc, #24]	; (80152c4 <prvCheckTasksWaitingTermination+0x58>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1e1      	bne.n	8015274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80152b0:	bf00      	nop
 80152b2:	bf00      	nop
 80152b4:	3708      	adds	r7, #8
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	200016e0 	.word	0x200016e0
 80152c0:	2000170c 	.word	0x2000170c
 80152c4:	200016f4 	.word	0x200016f4

080152c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d108      	bne.n	80152ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152de:	4618      	mov	r0, r3
 80152e0:	f000 feae 	bl	8016040 <vPortFree>
				vPortFree( pxTCB );
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f000 feab 	bl	8016040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80152ea:	e010      	b.n	801530e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d103      	bne.n	80152fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f000 fea2 	bl	8016040 <vPortFree>
	}
 80152fc:	e007      	b.n	801530e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015304:	2b02      	cmp	r3, #2
 8015306:	d002      	beq.n	801530e <prvDeleteTCB+0x46>
 8015308:	f000 fd86 	bl	8015e18 <ulSetInterruptMask>
 801530c:	e7fe      	b.n	801530c <prvDeleteTCB+0x44>
	}
 801530e:	bf00      	nop
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
	...

08015318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801531e:	4b0c      	ldr	r3, [pc, #48]	; (8015350 <prvResetNextTaskUnblockTime+0x38>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d104      	bne.n	8015332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015328:	4b0a      	ldr	r3, [pc, #40]	; (8015354 <prvResetNextTaskUnblockTime+0x3c>)
 801532a:	f04f 32ff 	mov.w	r2, #4294967295
 801532e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015330:	e008      	b.n	8015344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015332:	4b07      	ldr	r3, [pc, #28]	; (8015350 <prvResetNextTaskUnblockTime+0x38>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	68db      	ldr	r3, [r3, #12]
 801533a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	4a04      	ldr	r2, [pc, #16]	; (8015354 <prvResetNextTaskUnblockTime+0x3c>)
 8015342:	6013      	str	r3, [r2, #0]
}
 8015344:	bf00      	nop
 8015346:	370c      	adds	r7, #12
 8015348:	46bd      	mov	sp, r7
 801534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534e:	4770      	bx	lr
 8015350:	200016c4 	.word	0x200016c4
 8015354:	2000172c 	.word	0x2000172c

08015358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015358:	b480      	push	{r7}
 801535a:	b083      	sub	sp, #12
 801535c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801535e:	4b0b      	ldr	r3, [pc, #44]	; (801538c <xTaskGetSchedulerState+0x34>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d102      	bne.n	801536c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015366:	2301      	movs	r3, #1
 8015368:	607b      	str	r3, [r7, #4]
 801536a:	e008      	b.n	801537e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801536c:	4b08      	ldr	r3, [pc, #32]	; (8015390 <xTaskGetSchedulerState+0x38>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d102      	bne.n	801537a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015374:	2302      	movs	r3, #2
 8015376:	607b      	str	r3, [r7, #4]
 8015378:	e001      	b.n	801537e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801537a:	2300      	movs	r3, #0
 801537c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801537e:	687b      	ldr	r3, [r7, #4]
	}
 8015380:	4618      	mov	r0, r3
 8015382:	370c      	adds	r7, #12
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr
 801538c:	20001718 	.word	0x20001718
 8015390:	20001734 	.word	0x20001734

08015394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015394:	b580      	push	{r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80153a0:	2300      	movs	r3, #0
 80153a2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d046      	beq.n	8015438 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80153aa:	4b26      	ldr	r3, [pc, #152]	; (8015444 <xTaskPriorityDisinherit+0xb0>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	68ba      	ldr	r2, [r7, #8]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d002      	beq.n	80153ba <xTaskPriorityDisinherit+0x26>
 80153b4:	f000 fd30 	bl	8015e18 <ulSetInterruptMask>
 80153b8:	e7fe      	b.n	80153b8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d102      	bne.n	80153c8 <xTaskPriorityDisinherit+0x34>
 80153c2:	f000 fd29 	bl	8015e18 <ulSetInterruptMask>
 80153c6:	e7fe      	b.n	80153c6 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153cc:	1e5a      	subs	r2, r3, #1
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153da:	429a      	cmp	r2, r3
 80153dc:	d02c      	beq.n	8015438 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d128      	bne.n	8015438 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153e6:	68bb      	ldr	r3, [r7, #8]
 80153e8:	3304      	adds	r3, #4
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fe fca6 	bl	8013d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015408:	4b0f      	ldr	r3, [pc, #60]	; (8015448 <xTaskPriorityDisinherit+0xb4>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	429a      	cmp	r2, r3
 801540e:	d903      	bls.n	8015418 <xTaskPriorityDisinherit+0x84>
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015414:	4a0c      	ldr	r2, [pc, #48]	; (8015448 <xTaskPriorityDisinherit+0xb4>)
 8015416:	6013      	str	r3, [r2, #0]
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801541c:	4613      	mov	r3, r2
 801541e:	009b      	lsls	r3, r3, #2
 8015420:	4413      	add	r3, r2
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	4a09      	ldr	r2, [pc, #36]	; (801544c <xTaskPriorityDisinherit+0xb8>)
 8015426:	441a      	add	r2, r3
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	3304      	adds	r3, #4
 801542c:	4619      	mov	r1, r3
 801542e:	4610      	mov	r0, r2
 8015430:	f7fe fc27 	bl	8013c82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015434:	2301      	movs	r3, #1
 8015436:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015438:	68fb      	ldr	r3, [r7, #12]
	}
 801543a:	4618      	mov	r0, r3
 801543c:	3710      	adds	r7, #16
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	20001238 	.word	0x20001238
 8015448:	20001714 	.word	0x20001714
 801544c:	2000123c 	.word	0x2000123c

08015450 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801545a:	4b21      	ldr	r3, [pc, #132]	; (80154e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015460:	4b20      	ldr	r3, [pc, #128]	; (80154e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	3304      	adds	r3, #4
 8015466:	4618      	mov	r0, r3
 8015468:	f7fe fc68 	bl	8013d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015472:	d10a      	bne.n	801548a <prvAddCurrentTaskToDelayedList+0x3a>
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d007      	beq.n	801548a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801547a:	4b1a      	ldr	r3, [pc, #104]	; (80154e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	3304      	adds	r3, #4
 8015480:	4619      	mov	r1, r3
 8015482:	4819      	ldr	r0, [pc, #100]	; (80154e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015484:	f7fe fbfd 	bl	8013c82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015488:	e026      	b.n	80154d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	4413      	add	r3, r2
 8015490:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015492:	4b14      	ldr	r3, [pc, #80]	; (80154e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	68ba      	ldr	r2, [r7, #8]
 8015498:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801549a:	68ba      	ldr	r2, [r7, #8]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	429a      	cmp	r2, r3
 80154a0:	d209      	bcs.n	80154b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154a2:	4b12      	ldr	r3, [pc, #72]	; (80154ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	4b0f      	ldr	r3, [pc, #60]	; (80154e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	3304      	adds	r3, #4
 80154ac:	4619      	mov	r1, r3
 80154ae:	4610      	mov	r0, r2
 80154b0:	f7fe fc0b 	bl	8013cca <vListInsert>
}
 80154b4:	e010      	b.n	80154d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154b6:	4b0e      	ldr	r3, [pc, #56]	; (80154f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80154b8:	681a      	ldr	r2, [r3, #0]
 80154ba:	4b0a      	ldr	r3, [pc, #40]	; (80154e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	3304      	adds	r3, #4
 80154c0:	4619      	mov	r1, r3
 80154c2:	4610      	mov	r0, r2
 80154c4:	f7fe fc01 	bl	8013cca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80154c8:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	68ba      	ldr	r2, [r7, #8]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d202      	bcs.n	80154d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80154d2:	4a08      	ldr	r2, [pc, #32]	; (80154f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	6013      	str	r3, [r2, #0]
}
 80154d8:	bf00      	nop
 80154da:	3710      	adds	r7, #16
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	20001710 	.word	0x20001710
 80154e4:	20001238 	.word	0x20001238
 80154e8:	200016f8 	.word	0x200016f8
 80154ec:	200016c8 	.word	0x200016c8
 80154f0:	200016c4 	.word	0x200016c4
 80154f4:	2000172c 	.word	0x2000172c

080154f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80154fe:	2300      	movs	r3, #0
 8015500:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015502:	f000 fac7 	bl	8015a94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015506:	4b18      	ldr	r3, [pc, #96]	; (8015568 <xTimerCreateTimerTask+0x70>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d020      	beq.n	8015550 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801550e:	2300      	movs	r3, #0
 8015510:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015512:	2300      	movs	r3, #0
 8015514:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015516:	463a      	mov	r2, r7
 8015518:	1d39      	adds	r1, r7, #4
 801551a:	f107 0308 	add.w	r3, r7, #8
 801551e:	4618      	mov	r0, r3
 8015520:	f7fe fb68 	bl	8013bf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015524:	6839      	ldr	r1, [r7, #0]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	68ba      	ldr	r2, [r7, #8]
 801552a:	9202      	str	r2, [sp, #8]
 801552c:	9301      	str	r3, [sp, #4]
 801552e:	2302      	movs	r3, #2
 8015530:	9300      	str	r3, [sp, #0]
 8015532:	2300      	movs	r3, #0
 8015534:	460a      	mov	r2, r1
 8015536:	490d      	ldr	r1, [pc, #52]	; (801556c <xTimerCreateTimerTask+0x74>)
 8015538:	480d      	ldr	r0, [pc, #52]	; (8015570 <xTimerCreateTimerTask+0x78>)
 801553a:	f7ff f855 	bl	80145e8 <xTaskCreateStatic>
 801553e:	4603      	mov	r3, r0
 8015540:	4a0c      	ldr	r2, [pc, #48]	; (8015574 <xTimerCreateTimerTask+0x7c>)
 8015542:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015544:	4b0b      	ldr	r3, [pc, #44]	; (8015574 <xTimerCreateTimerTask+0x7c>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d001      	beq.n	8015550 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801554c:	2301      	movs	r3, #1
 801554e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d102      	bne.n	801555c <xTimerCreateTimerTask+0x64>
 8015556:	f000 fc5f 	bl	8015e18 <ulSetInterruptMask>
 801555a:	e7fe      	b.n	801555a <xTimerCreateTimerTask+0x62>
	return xReturn;
 801555c:	68fb      	ldr	r3, [r7, #12]
}
 801555e:	4618      	mov	r0, r3
 8015560:	3710      	adds	r7, #16
 8015562:	46bd      	mov	sp, r7
 8015564:	bd80      	pop	{r7, pc}
 8015566:	bf00      	nop
 8015568:	20001768 	.word	0x20001768
 801556c:	08018250 	.word	0x08018250
 8015570:	0801568d 	.word	0x0801568d
 8015574:	2000176c 	.word	0x2000176c

08015578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b08a      	sub	sp, #40	; 0x28
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
 8015584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015586:	2300      	movs	r3, #0
 8015588:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d102      	bne.n	8015596 <xTimerGenericCommand+0x1e>
 8015590:	f000 fc42 	bl	8015e18 <ulSetInterruptMask>
 8015594:	e7fe      	b.n	8015594 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015596:	4b1a      	ldr	r3, [pc, #104]	; (8015600 <xTimerGenericCommand+0x88>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d02a      	beq.n	80155f4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	2b05      	cmp	r3, #5
 80155ae:	dc18      	bgt.n	80155e2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80155b0:	f7ff fed2 	bl	8015358 <xTaskGetSchedulerState>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b02      	cmp	r3, #2
 80155b8:	d109      	bne.n	80155ce <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80155ba:	4b11      	ldr	r3, [pc, #68]	; (8015600 <xTimerGenericCommand+0x88>)
 80155bc:	6818      	ldr	r0, [r3, #0]
 80155be:	f107 0114 	add.w	r1, r7, #20
 80155c2:	2300      	movs	r3, #0
 80155c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155c6:	f7fe fcae 	bl	8013f26 <xQueueGenericSend>
 80155ca:	6278      	str	r0, [r7, #36]	; 0x24
 80155cc:	e012      	b.n	80155f4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80155ce:	4b0c      	ldr	r3, [pc, #48]	; (8015600 <xTimerGenericCommand+0x88>)
 80155d0:	6818      	ldr	r0, [r3, #0]
 80155d2:	f107 0114 	add.w	r1, r7, #20
 80155d6:	2300      	movs	r3, #0
 80155d8:	2200      	movs	r2, #0
 80155da:	f7fe fca4 	bl	8013f26 <xQueueGenericSend>
 80155de:	6278      	str	r0, [r7, #36]	; 0x24
 80155e0:	e008      	b.n	80155f4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80155e2:	4b07      	ldr	r3, [pc, #28]	; (8015600 <xTimerGenericCommand+0x88>)
 80155e4:	6818      	ldr	r0, [r3, #0]
 80155e6:	f107 0114 	add.w	r1, r7, #20
 80155ea:	2300      	movs	r3, #0
 80155ec:	683a      	ldr	r2, [r7, #0]
 80155ee:	f7fe fd63 	bl	80140b8 <xQueueGenericSendFromISR>
 80155f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3728      	adds	r7, #40	; 0x28
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
 80155fe:	bf00      	nop
 8015600:	20001768 	.word	0x20001768

08015604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af02      	add	r7, sp, #8
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801560e:	4b1e      	ldr	r3, [pc, #120]	; (8015688 <prvProcessExpiredTimer+0x84>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	3304      	adds	r3, #4
 801561c:	4618      	mov	r0, r3
 801561e:	f7fe fb8d 	bl	8013d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015628:	f003 0304 	and.w	r3, r3, #4
 801562c:	2b00      	cmp	r3, #0
 801562e:	d01a      	beq.n	8015666 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	699a      	ldr	r2, [r3, #24]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	18d1      	adds	r1, r2, r3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	683a      	ldr	r2, [r7, #0]
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f000 f8c1 	bl	80157c4 <prvInsertTimerInActiveList>
 8015642:	4603      	mov	r3, r0
 8015644:	2b00      	cmp	r3, #0
 8015646:	d017      	beq.n	8015678 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015648:	2300      	movs	r3, #0
 801564a:	9300      	str	r3, [sp, #0]
 801564c:	2300      	movs	r3, #0
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	2100      	movs	r1, #0
 8015652:	68f8      	ldr	r0, [r7, #12]
 8015654:	f7ff ff90 	bl	8015578 <xTimerGenericCommand>
 8015658:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d10b      	bne.n	8015678 <prvProcessExpiredTimer+0x74>
 8015660:	f000 fbda 	bl	8015e18 <ulSetInterruptMask>
 8015664:	e7fe      	b.n	8015664 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801566c:	f023 0301 	bic.w	r3, r3, #1
 8015670:	b2da      	uxtb	r2, r3
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	6a1b      	ldr	r3, [r3, #32]
 801567c:	68f8      	ldr	r0, [r7, #12]
 801567e:	4798      	blx	r3
}
 8015680:	bf00      	nop
 8015682:	3710      	adds	r7, #16
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	20001760 	.word	0x20001760

0801568c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015694:	f107 0308 	add.w	r3, r7, #8
 8015698:	4618      	mov	r0, r3
 801569a:	f000 f84f 	bl	801573c <prvGetNextExpireTime>
 801569e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	4619      	mov	r1, r3
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	f000 f803 	bl	80156b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80156aa:	f000 f8cd 	bl	8015848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80156ae:	e7f1      	b.n	8015694 <prvTimerTask+0x8>

080156b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80156ba:	f7ff fac5 	bl	8014c48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80156be:	f107 0308 	add.w	r3, r7, #8
 80156c2:	4618      	mov	r0, r3
 80156c4:	f000 f85e 	bl	8015784 <prvSampleTimeNow>
 80156c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d12a      	bne.n	8015726 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d10a      	bne.n	80156ec <prvProcessTimerOrBlockTask+0x3c>
 80156d6:	687a      	ldr	r2, [r7, #4]
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	429a      	cmp	r2, r3
 80156dc:	d806      	bhi.n	80156ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80156de:	f7ff fac1 	bl	8014c64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80156e2:	68f9      	ldr	r1, [r7, #12]
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	f7ff ff8d 	bl	8015604 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80156ea:	e01e      	b.n	801572a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d008      	beq.n	8015704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80156f2:	4b10      	ldr	r3, [pc, #64]	; (8015734 <prvProcessTimerOrBlockTask+0x84>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d101      	bne.n	8015700 <prvProcessTimerOrBlockTask+0x50>
 80156fc:	2301      	movs	r3, #1
 80156fe:	e000      	b.n	8015702 <prvProcessTimerOrBlockTask+0x52>
 8015700:	2300      	movs	r3, #0
 8015702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015704:	4b0c      	ldr	r3, [pc, #48]	; (8015738 <prvProcessTimerOrBlockTask+0x88>)
 8015706:	6818      	ldr	r0, [r3, #0]
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	1ad3      	subs	r3, r2, r3
 801570e:	683a      	ldr	r2, [r7, #0]
 8015710:	4619      	mov	r1, r3
 8015712:	f7fe ff35 	bl	8014580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015716:	f7ff faa5 	bl	8014c64 <xTaskResumeAll>
 801571a:	4603      	mov	r3, r0
 801571c:	2b00      	cmp	r3, #0
 801571e:	d104      	bne.n	801572a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8015720:	f000 fa36 	bl	8015b90 <vPortYield>
}
 8015724:	e001      	b.n	801572a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8015726:	f7ff fa9d 	bl	8014c64 <xTaskResumeAll>
}
 801572a:	bf00      	nop
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	20001764 	.word	0x20001764
 8015738:	20001768 	.word	0x20001768

0801573c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801573c:	b480      	push	{r7}
 801573e:	b085      	sub	sp, #20
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015744:	4b0e      	ldr	r3, [pc, #56]	; (8015780 <prvGetNextExpireTime+0x44>)
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d101      	bne.n	8015752 <prvGetNextExpireTime+0x16>
 801574e:	2201      	movs	r2, #1
 8015750:	e000      	b.n	8015754 <prvGetNextExpireTime+0x18>
 8015752:	2200      	movs	r2, #0
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d105      	bne.n	801576c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015760:	4b07      	ldr	r3, [pc, #28]	; (8015780 <prvGetNextExpireTime+0x44>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	68db      	ldr	r3, [r3, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	60fb      	str	r3, [r7, #12]
 801576a:	e001      	b.n	8015770 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801576c:	2300      	movs	r3, #0
 801576e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015770:	68fb      	ldr	r3, [r7, #12]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3714      	adds	r7, #20
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop
 8015780:	20001760 	.word	0x20001760

08015784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801578c:	f7ff faf8 	bl	8014d80 <xTaskGetTickCount>
 8015790:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015792:	4b0b      	ldr	r3, [pc, #44]	; (80157c0 <prvSampleTimeNow+0x3c>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	68fa      	ldr	r2, [r7, #12]
 8015798:	429a      	cmp	r2, r3
 801579a:	d205      	bcs.n	80157a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801579c:	f000 f91e 	bl	80159dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2201      	movs	r2, #1
 80157a4:	601a      	str	r2, [r3, #0]
 80157a6:	e002      	b.n	80157ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2200      	movs	r2, #0
 80157ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80157ae:	4a04      	ldr	r2, [pc, #16]	; (80157c0 <prvSampleTimeNow+0x3c>)
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80157b4:	68fb      	ldr	r3, [r7, #12]
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3710      	adds	r7, #16
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	20001770 	.word	0x20001770

080157c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b086      	sub	sp, #24
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
 80157d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80157d2:	2300      	movs	r3, #0
 80157d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	68ba      	ldr	r2, [r7, #8]
 80157da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	68fa      	ldr	r2, [r7, #12]
 80157e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80157e2:	68ba      	ldr	r2, [r7, #8]
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d812      	bhi.n	8015810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157ea:	687a      	ldr	r2, [r7, #4]
 80157ec:	683b      	ldr	r3, [r7, #0]
 80157ee:	1ad2      	subs	r2, r2, r3
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	699b      	ldr	r3, [r3, #24]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d302      	bcc.n	80157fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80157f8:	2301      	movs	r3, #1
 80157fa:	617b      	str	r3, [r7, #20]
 80157fc:	e01b      	b.n	8015836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80157fe:	4b10      	ldr	r3, [pc, #64]	; (8015840 <prvInsertTimerInActiveList+0x7c>)
 8015800:	681a      	ldr	r2, [r3, #0]
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	3304      	adds	r3, #4
 8015806:	4619      	mov	r1, r3
 8015808:	4610      	mov	r0, r2
 801580a:	f7fe fa5e 	bl	8013cca <vListInsert>
 801580e:	e012      	b.n	8015836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015810:	687a      	ldr	r2, [r7, #4]
 8015812:	683b      	ldr	r3, [r7, #0]
 8015814:	429a      	cmp	r2, r3
 8015816:	d206      	bcs.n	8015826 <prvInsertTimerInActiveList+0x62>
 8015818:	68ba      	ldr	r2, [r7, #8]
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	429a      	cmp	r2, r3
 801581e:	d302      	bcc.n	8015826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015820:	2301      	movs	r3, #1
 8015822:	617b      	str	r3, [r7, #20]
 8015824:	e007      	b.n	8015836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015826:	4b07      	ldr	r3, [pc, #28]	; (8015844 <prvInsertTimerInActiveList+0x80>)
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	3304      	adds	r3, #4
 801582e:	4619      	mov	r1, r3
 8015830:	4610      	mov	r0, r2
 8015832:	f7fe fa4a 	bl	8013cca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015836:	697b      	ldr	r3, [r7, #20]
}
 8015838:	4618      	mov	r0, r3
 801583a:	3718      	adds	r7, #24
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	20001764 	.word	0x20001764
 8015844:	20001760 	.word	0x20001760

08015848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b08c      	sub	sp, #48	; 0x30
 801584c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801584e:	e0b2      	b.n	80159b6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	2b00      	cmp	r3, #0
 8015854:	da11      	bge.n	801587a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015856:	f107 0308 	add.w	r3, r7, #8
 801585a:	3304      	adds	r3, #4
 801585c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015860:	2b00      	cmp	r3, #0
 8015862:	d102      	bne.n	801586a <prvProcessReceivedCommands+0x22>
 8015864:	f000 fad8 	bl	8015e18 <ulSetInterruptMask>
 8015868:	e7fe      	b.n	8015868 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015870:	6850      	ldr	r0, [r2, #4]
 8015872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015874:	6892      	ldr	r2, [r2, #8]
 8015876:	4611      	mov	r1, r2
 8015878:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	2b00      	cmp	r3, #0
 801587e:	f2c0 809a 	blt.w	80159b6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015886:	6a3b      	ldr	r3, [r7, #32]
 8015888:	695b      	ldr	r3, [r3, #20]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d004      	beq.n	8015898 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801588e:	6a3b      	ldr	r3, [r7, #32]
 8015890:	3304      	adds	r3, #4
 8015892:	4618      	mov	r0, r3
 8015894:	f7fe fa52 	bl	8013d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015898:	1d3b      	adds	r3, r7, #4
 801589a:	4618      	mov	r0, r3
 801589c:	f7ff ff72 	bl	8015784 <prvSampleTimeNow>
 80158a0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	2b09      	cmp	r3, #9
 80158a6:	f200 8085 	bhi.w	80159b4 <prvProcessReceivedCommands+0x16c>
 80158aa:	a201      	add	r2, pc, #4	; (adr r2, 80158b0 <prvProcessReceivedCommands+0x68>)
 80158ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158b0:	080158d9 	.word	0x080158d9
 80158b4:	080158d9 	.word	0x080158d9
 80158b8:	080158d9 	.word	0x080158d9
 80158bc:	0801593d 	.word	0x0801593d
 80158c0:	08015951 	.word	0x08015951
 80158c4:	0801598b 	.word	0x0801598b
 80158c8:	080158d9 	.word	0x080158d9
 80158cc:	080158d9 	.word	0x080158d9
 80158d0:	0801593d 	.word	0x0801593d
 80158d4:	08015951 	.word	0x08015951
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158d8:	6a3b      	ldr	r3, [r7, #32]
 80158da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158de:	f043 0301 	orr.w	r3, r3, #1
 80158e2:	b2da      	uxtb	r2, r3
 80158e4:	6a3b      	ldr	r3, [r7, #32]
 80158e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	6a3b      	ldr	r3, [r7, #32]
 80158ee:	699b      	ldr	r3, [r3, #24]
 80158f0:	18d1      	adds	r1, r2, r3
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	69fa      	ldr	r2, [r7, #28]
 80158f6:	6a38      	ldr	r0, [r7, #32]
 80158f8:	f7ff ff64 	bl	80157c4 <prvInsertTimerInActiveList>
 80158fc:	4603      	mov	r3, r0
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d059      	beq.n	80159b6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015902:	6a3b      	ldr	r3, [r7, #32]
 8015904:	6a1b      	ldr	r3, [r3, #32]
 8015906:	6a38      	ldr	r0, [r7, #32]
 8015908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801590a:	6a3b      	ldr	r3, [r7, #32]
 801590c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015910:	f003 0304 	and.w	r3, r3, #4
 8015914:	2b00      	cmp	r3, #0
 8015916:	d04e      	beq.n	80159b6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015918:	68fa      	ldr	r2, [r7, #12]
 801591a:	6a3b      	ldr	r3, [r7, #32]
 801591c:	699b      	ldr	r3, [r3, #24]
 801591e:	441a      	add	r2, r3
 8015920:	2300      	movs	r3, #0
 8015922:	9300      	str	r3, [sp, #0]
 8015924:	2300      	movs	r3, #0
 8015926:	2100      	movs	r1, #0
 8015928:	6a38      	ldr	r0, [r7, #32]
 801592a:	f7ff fe25 	bl	8015578 <xTimerGenericCommand>
 801592e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d13f      	bne.n	80159b6 <prvProcessReceivedCommands+0x16e>
 8015936:	f000 fa6f 	bl	8015e18 <ulSetInterruptMask>
 801593a:	e7fe      	b.n	801593a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801593c:	6a3b      	ldr	r3, [r7, #32]
 801593e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015942:	f023 0301 	bic.w	r3, r3, #1
 8015946:	b2da      	uxtb	r2, r3
 8015948:	6a3b      	ldr	r3, [r7, #32]
 801594a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801594e:	e032      	b.n	80159b6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015950:	6a3b      	ldr	r3, [r7, #32]
 8015952:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015956:	f043 0301 	orr.w	r3, r3, #1
 801595a:	b2da      	uxtb	r2, r3
 801595c:	6a3b      	ldr	r3, [r7, #32]
 801595e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015962:	68fa      	ldr	r2, [r7, #12]
 8015964:	6a3b      	ldr	r3, [r7, #32]
 8015966:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015968:	6a3b      	ldr	r3, [r7, #32]
 801596a:	699b      	ldr	r3, [r3, #24]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d102      	bne.n	8015976 <prvProcessReceivedCommands+0x12e>
 8015970:	f000 fa52 	bl	8015e18 <ulSetInterruptMask>
 8015974:	e7fe      	b.n	8015974 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	699a      	ldr	r2, [r3, #24]
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	18d1      	adds	r1, r2, r3
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	69fa      	ldr	r2, [r7, #28]
 8015982:	6a38      	ldr	r0, [r7, #32]
 8015984:	f7ff ff1e 	bl	80157c4 <prvInsertTimerInActiveList>
					break;
 8015988:	e015      	b.n	80159b6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801598a:	6a3b      	ldr	r3, [r7, #32]
 801598c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015990:	f003 0302 	and.w	r3, r3, #2
 8015994:	2b00      	cmp	r3, #0
 8015996:	d103      	bne.n	80159a0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8015998:	6a38      	ldr	r0, [r7, #32]
 801599a:	f000 fb51 	bl	8016040 <vPortFree>
 801599e:	e00a      	b.n	80159b6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159a0:	6a3b      	ldr	r3, [r7, #32]
 80159a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159a6:	f023 0301 	bic.w	r3, r3, #1
 80159aa:	b2da      	uxtb	r2, r3
 80159ac:	6a3b      	ldr	r3, [r7, #32]
 80159ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80159b2:	e000      	b.n	80159b6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80159b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80159b6:	4b08      	ldr	r3, [pc, #32]	; (80159d8 <prvProcessReceivedCommands+0x190>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	f107 0108 	add.w	r1, r7, #8
 80159be:	2200      	movs	r2, #0
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7fe fbea 	bl	801419a <xQueueReceive>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f47f af41 	bne.w	8015850 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80159ce:	bf00      	nop
 80159d0:	bf00      	nop
 80159d2:	3728      	adds	r7, #40	; 0x28
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	20001768 	.word	0x20001768

080159dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b088      	sub	sp, #32
 80159e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80159e2:	e040      	b.n	8015a66 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80159e4:	4b29      	ldr	r3, [pc, #164]	; (8015a8c <prvSwitchTimerLists+0xb0>)
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159ee:	4b27      	ldr	r3, [pc, #156]	; (8015a8c <prvSwitchTimerLists+0xb0>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	68db      	ldr	r3, [r3, #12]
 80159f4:	68db      	ldr	r3, [r3, #12]
 80159f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	3304      	adds	r3, #4
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7fe f99d 	bl	8013d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	6a1b      	ldr	r3, [r3, #32]
 8015a06:	68f8      	ldr	r0, [r7, #12]
 8015a08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a10:	f003 0304 	and.w	r3, r3, #4
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d026      	beq.n	8015a66 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	699b      	ldr	r3, [r3, #24]
 8015a1c:	693a      	ldr	r2, [r7, #16]
 8015a1e:	4413      	add	r3, r2
 8015a20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	693b      	ldr	r3, [r7, #16]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d90e      	bls.n	8015a48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	68ba      	ldr	r2, [r7, #8]
 8015a2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	68fa      	ldr	r2, [r7, #12]
 8015a34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a36:	4b15      	ldr	r3, [pc, #84]	; (8015a8c <prvSwitchTimerLists+0xb0>)
 8015a38:	681a      	ldr	r2, [r3, #0]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	3304      	adds	r3, #4
 8015a3e:	4619      	mov	r1, r3
 8015a40:	4610      	mov	r0, r2
 8015a42:	f7fe f942 	bl	8013cca <vListInsert>
 8015a46:	e00e      	b.n	8015a66 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015a48:	2300      	movs	r3, #0
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	693a      	ldr	r2, [r7, #16]
 8015a50:	2100      	movs	r1, #0
 8015a52:	68f8      	ldr	r0, [r7, #12]
 8015a54:	f7ff fd90 	bl	8015578 <xTimerGenericCommand>
 8015a58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d102      	bne.n	8015a66 <prvSwitchTimerLists+0x8a>
 8015a60:	f000 f9da 	bl	8015e18 <ulSetInterruptMask>
 8015a64:	e7fe      	b.n	8015a64 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a66:	4b09      	ldr	r3, [pc, #36]	; (8015a8c <prvSwitchTimerLists+0xb0>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d1b9      	bne.n	80159e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015a70:	4b06      	ldr	r3, [pc, #24]	; (8015a8c <prvSwitchTimerLists+0xb0>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015a76:	4b06      	ldr	r3, [pc, #24]	; (8015a90 <prvSwitchTimerLists+0xb4>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	4a04      	ldr	r2, [pc, #16]	; (8015a8c <prvSwitchTimerLists+0xb0>)
 8015a7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015a7e:	4a04      	ldr	r2, [pc, #16]	; (8015a90 <prvSwitchTimerLists+0xb4>)
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	6013      	str	r3, [r2, #0]
}
 8015a84:	bf00      	nop
 8015a86:	3718      	adds	r7, #24
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	20001760 	.word	0x20001760
 8015a90:	20001764 	.word	0x20001764

08015a94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b082      	sub	sp, #8
 8015a98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015a9a:	f000 f88b 	bl	8015bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015a9e:	4b15      	ldr	r3, [pc, #84]	; (8015af4 <prvCheckForValidListAndQueue+0x60>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d120      	bne.n	8015ae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015aa6:	4814      	ldr	r0, [pc, #80]	; (8015af8 <prvCheckForValidListAndQueue+0x64>)
 8015aa8:	f7fe f8be 	bl	8013c28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015aac:	4813      	ldr	r0, [pc, #76]	; (8015afc <prvCheckForValidListAndQueue+0x68>)
 8015aae:	f7fe f8bb 	bl	8013c28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015ab2:	4b13      	ldr	r3, [pc, #76]	; (8015b00 <prvCheckForValidListAndQueue+0x6c>)
 8015ab4:	4a10      	ldr	r2, [pc, #64]	; (8015af8 <prvCheckForValidListAndQueue+0x64>)
 8015ab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015ab8:	4b12      	ldr	r3, [pc, #72]	; (8015b04 <prvCheckForValidListAndQueue+0x70>)
 8015aba:	4a10      	ldr	r2, [pc, #64]	; (8015afc <prvCheckForValidListAndQueue+0x68>)
 8015abc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015abe:	2300      	movs	r3, #0
 8015ac0:	9300      	str	r3, [sp, #0]
 8015ac2:	4b11      	ldr	r3, [pc, #68]	; (8015b08 <prvCheckForValidListAndQueue+0x74>)
 8015ac4:	4a11      	ldr	r2, [pc, #68]	; (8015b0c <prvCheckForValidListAndQueue+0x78>)
 8015ac6:	2110      	movs	r1, #16
 8015ac8:	200a      	movs	r0, #10
 8015aca:	f7fe f9b9 	bl	8013e40 <xQueueGenericCreateStatic>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	4a08      	ldr	r2, [pc, #32]	; (8015af4 <prvCheckForValidListAndQueue+0x60>)
 8015ad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015ad4:	4b07      	ldr	r3, [pc, #28]	; (8015af4 <prvCheckForValidListAndQueue+0x60>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d005      	beq.n	8015ae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015adc:	4b05      	ldr	r3, [pc, #20]	; (8015af4 <prvCheckForValidListAndQueue+0x60>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	490b      	ldr	r1, [pc, #44]	; (8015b10 <prvCheckForValidListAndQueue+0x7c>)
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7fe fd22 	bl	801452c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015ae8:	f000 f876 	bl	8015bd8 <vPortExitCritical>
}
 8015aec:	bf00      	nop
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	20001768 	.word	0x20001768
 8015af8:	20001738 	.word	0x20001738
 8015afc:	2000174c 	.word	0x2000174c
 8015b00:	20001760 	.word	0x20001760
 8015b04:	20001764 	.word	0x20001764
 8015b08:	20001814 	.word	0x20001814
 8015b0c:	20001774 	.word	0x20001774
 8015b10:	08018258 	.word	0x08018258

08015b14 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8015b14:	b480      	push	{r7}
 8015b16:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015b18:	4b0b      	ldr	r3, [pc, #44]	; (8015b48 <vPortSetupTimerInterrupt+0x34>)
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015b1e:	4b0b      	ldr	r3, [pc, #44]	; (8015b4c <vPortSetupTimerInterrupt+0x38>)
 8015b20:	2200      	movs	r2, #0
 8015b22:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015b24:	4b0a      	ldr	r3, [pc, #40]	; (8015b50 <vPortSetupTimerInterrupt+0x3c>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	4a0a      	ldr	r2, [pc, #40]	; (8015b54 <vPortSetupTimerInterrupt+0x40>)
 8015b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8015b2e:	099b      	lsrs	r3, r3, #6
 8015b30:	4a09      	ldr	r2, [pc, #36]	; (8015b58 <vPortSetupTimerInterrupt+0x44>)
 8015b32:	3b01      	subs	r3, #1
 8015b34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8015b36:	4b04      	ldr	r3, [pc, #16]	; (8015b48 <vPortSetupTimerInterrupt+0x34>)
 8015b38:	2207      	movs	r2, #7
 8015b3a:	601a      	str	r2, [r3, #0]
}
 8015b3c:	bf00      	nop
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b44:	4770      	bx	lr
 8015b46:	bf00      	nop
 8015b48:	e000e010 	.word	0xe000e010
 8015b4c:	e000e018 	.word	0xe000e018
 8015b50:	20000054 	.word	0x20000054
 8015b54:	10624dd3 	.word	0x10624dd3
 8015b58:	e000e014 	.word	0xe000e014

08015b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b082      	sub	sp, #8
 8015b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8015b62:	2300      	movs	r3, #0
 8015b64:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 8015b66:	4b09      	ldr	r3, [pc, #36]	; (8015b8c <prvTaskExitError+0x30>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b6e:	d002      	beq.n	8015b76 <prvTaskExitError+0x1a>
 8015b70:	f000 f952 	bl	8015e18 <ulSetInterruptMask>
 8015b74:	e7fe      	b.n	8015b74 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 8015b76:	f000 f94f 	bl	8015e18 <ulSetInterruptMask>

	while( ulDummy == 0 )
 8015b7a:	bf00      	nop
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d0fc      	beq.n	8015b7c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 8015b82:	bf00      	nop
 8015b84:	bf00      	nop
 8015b86:	3708      	adds	r7, #8
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}
 8015b8c:	20000060 	.word	0x20000060

08015b90 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8015b90:	b480      	push	{r7}
 8015b92:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015b94:	4b06      	ldr	r3, [pc, #24]	; (8015bb0 <vPortYield+0x20>)
 8015b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b9a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8015b9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8015ba0:	f3bf 8f6f 	isb	sy
}
 8015ba4:	bf00      	nop
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr
 8015bae:	bf00      	nop
 8015bb0:	e000ed04 	.word	0xe000ed04

08015bb4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8015bb8:	f000 f92e 	bl	8015e18 <ulSetInterruptMask>
	ulCriticalNesting++;
 8015bbc:	4b05      	ldr	r3, [pc, #20]	; (8015bd4 <vPortEnterCritical+0x20>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	4a04      	ldr	r2, [pc, #16]	; (8015bd4 <vPortEnterCritical+0x20>)
 8015bc4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8015bc6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8015bca:	f3bf 8f6f 	isb	sy
}
 8015bce:	bf00      	nop
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	20000060 	.word	0x20000060

08015bd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8015bdc:	4b0a      	ldr	r3, [pc, #40]	; (8015c08 <vPortExitCritical+0x30>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d102      	bne.n	8015bea <vPortExitCritical+0x12>
 8015be4:	f000 f918 	bl	8015e18 <ulSetInterruptMask>
 8015be8:	e7fe      	b.n	8015be8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8015bea:	4b07      	ldr	r3, [pc, #28]	; (8015c08 <vPortExitCritical+0x30>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	3b01      	subs	r3, #1
 8015bf0:	4a05      	ldr	r2, [pc, #20]	; (8015c08 <vPortExitCritical+0x30>)
 8015bf2:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 8015bf4:	4b04      	ldr	r3, [pc, #16]	; (8015c08 <vPortExitCritical+0x30>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d102      	bne.n	8015c02 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8015bfc:	2000      	movs	r0, #0
 8015bfe:	f000 f918 	bl	8015e32 <vClearInterruptMask>
	}
}
 8015c02:	bf00      	nop
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	20000060 	.word	0x20000060

08015c0c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c12:	f000 f901 	bl	8015e18 <ulSetInterruptMask>
 8015c16:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015c18:	f7ff f8c2 	bl	8014da0 <xTaskIncrementTick>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d003      	beq.n	8015c2a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015c22:	4b05      	ldr	r3, [pc, #20]	; (8015c38 <xPortSysTickHandler+0x2c>)
 8015c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c28:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f000 f901 	bl	8015e32 <vClearInterruptMask>
}
 8015c30:	bf00      	nop
 8015c32:	3708      	adds	r7, #8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	e000ed04 	.word	0xe000ed04

08015c3c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b084      	sub	sp, #16
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	699b      	ldr	r3, [r3, #24]
 8015c48:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	3b02      	subs	r3, #2
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 8015c52:	7afb      	ldrb	r3, [r7, #11]
 8015c54:	2b02      	cmp	r3, #2
 8015c56:	d102      	bne.n	8015c5e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8015c58:	f000 f8b2 	bl	8015dc0 <vRestoreContextOfFirstTask>
		}
		break;
 8015c5c:	e002      	b.n	8015c64 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8015c5e:	f000 f8db 	bl	8015e18 <ulSetInterruptMask>
 8015c62:	e7fe      	b.n	8015c62 <vPortSVCHandler_C+0x26>
		}
	}
}
 8015c64:	bf00      	nop
 8015c66:	3710      	adds	r7, #16
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}

08015c6c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b085      	sub	sp, #20
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
 8015c78:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	3b04      	subs	r3, #4
 8015c7e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015c86:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	3b04      	subs	r3, #4
 8015c8c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	3b04      	subs	r3, #4
 8015c98:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015c9a:	4a38      	ldr	r2, [pc, #224]	; (8015d7c <pxPortInitialiseStack+0x110>)
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	3b04      	subs	r3, #4
 8015ca4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8015cac:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	3b04      	subs	r3, #4
 8015cb2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8015cba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	3b04      	subs	r3, #4
 8015cc0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8015cc8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	3b04      	subs	r3, #4
 8015cce:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8015cd6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	3b04      	subs	r3, #4
 8015cdc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8015cde:	683a      	ldr	r2, [r7, #0]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	3b04      	subs	r3, #4
 8015ce8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8015cf0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	3b04      	subs	r3, #4
 8015cf6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8015cfe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	3b04      	subs	r3, #4
 8015d04:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8015d0c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	3b04      	subs	r3, #4
 8015d12:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8015d1a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	3b04      	subs	r3, #4
 8015d20:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8015d28:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	3b04      	subs	r3, #4
 8015d2e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8015d36:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	3b04      	subs	r3, #4
 8015d3c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8015d44:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	3b04      	subs	r3, #4
 8015d4a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8015d52:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	3b04      	subs	r3, #4
 8015d58:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8015d60:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	3b04      	subs	r3, #4
 8015d66:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8015d68:	68ba      	ldr	r2, [r7, #8]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	3714      	adds	r7, #20
 8015d74:	46bd      	mov	sp, r7
 8015d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7a:	4770      	bx	lr
 8015d7c:	08015b5d 	.word	0x08015b5d

08015d80 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015d84:	4b0c      	ldr	r3, [pc, #48]	; (8015db8 <xPortStartScheduler+0x38>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	4a0b      	ldr	r2, [pc, #44]	; (8015db8 <xPortStartScheduler+0x38>)
 8015d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015d8e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015d90:	4b09      	ldr	r3, [pc, #36]	; (8015db8 <xPortStartScheduler+0x38>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	4a08      	ldr	r2, [pc, #32]	; (8015db8 <xPortStartScheduler+0x38>)
 8015d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015d9a:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 8015d9c:	f7ff feba 	bl	8015b14 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 8015da0:	4b06      	ldr	r3, [pc, #24]	; (8015dbc <xPortStartScheduler+0x3c>)
 8015da2:	2200      	movs	r2, #0
 8015da4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 8015da6:	f000 f823 	bl	8015df0 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 8015daa:	f7ff f8ab 	bl	8014f04 <vTaskSwitchContext>
	prvTaskExitError();
 8015dae:	f7ff fed5 	bl	8015b5c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 8015db2:	2300      	movs	r3, #0
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	e000ed20 	.word	0xe000ed20
 8015dbc:	20000060 	.word	0x20000060

08015dc0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015dc0:	4a07      	ldr	r2, [pc, #28]	; (8015de0 <pxCurrentTCBConst2>)
 8015dc2:	6811      	ldr	r1, [r2, #0]
 8015dc4:	6808      	ldr	r0, [r1, #0]
 8015dc6:	c806      	ldmia	r0!, {r1, r2}
 8015dc8:	f381 880b 	msr	PSPLIM, r1
 8015dcc:	2102      	movs	r1, #2
 8015dce:	f381 8814 	msr	CONTROL, r1
 8015dd2:	3020      	adds	r0, #32
 8015dd4:	f380 8809 	msr	PSP, r0
 8015dd8:	f3bf 8f6f 	isb	sy
 8015ddc:	4710      	bx	r2
 8015dde:	bf00      	nop

08015de0 <pxCurrentTCBConst2>:
 8015de0:	20001238 	.word	0x20001238
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8015de4:	bf00      	nop
 8015de6:	bf00      	nop
	...

08015df0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015df0:	4807      	ldr	r0, [pc, #28]	; (8015e10 <xVTORConst>)
 8015df2:	6800      	ldr	r0, [r0, #0]
 8015df4:	6800      	ldr	r0, [r0, #0]
 8015df6:	f380 8808 	msr	MSP, r0
 8015dfa:	b662      	cpsie	i
 8015dfc:	b661      	cpsie	f
 8015dfe:	f3bf 8f4f 	dsb	sy
 8015e02:	f3bf 8f6f 	isb	sy
 8015e06:	df02      	svc	2
 8015e08:	bf00      	nop
 8015e0a:	bf00      	nop
 8015e0c:	f3af 8000 	nop.w

08015e10 <xVTORConst>:
 8015e10:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8015e14:	bf00      	nop
 8015e16:	bf00      	nop

08015e18 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015e18:	f3ef 8011 	mrs	r0, BASEPRI
 8015e1c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8015e20:	f381 8811 	msr	BASEPRI, r1
 8015e24:	f3bf 8f4f 	dsb	sy
 8015e28:	f3bf 8f6f 	isb	sy
 8015e2c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015e2e:	bf00      	nop
 8015e30:	4618      	mov	r0, r3

08015e32 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015e32:	f380 8811 	msr	BASEPRI, r0
 8015e36:	f3bf 8f4f 	dsb	sy
 8015e3a:	f3bf 8f6f 	isb	sy
 8015e3e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8015e40:	bf00      	nop
	...

08015e50 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015e50:	f3ef 8009 	mrs	r0, PSP
 8015e54:	f3ef 820b 	mrs	r2, PSPLIM
 8015e58:	4673      	mov	r3, lr
 8015e5a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8015e5e:	4a10      	ldr	r2, [pc, #64]	; (8015ea0 <pxCurrentTCBConst>)
 8015e60:	6811      	ldr	r1, [r2, #0]
 8015e62:	6008      	str	r0, [r1, #0]
 8015e64:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8015e68:	f380 8811 	msr	BASEPRI, r0
 8015e6c:	f3bf 8f4f 	dsb	sy
 8015e70:	f3bf 8f6f 	isb	sy
 8015e74:	f7ff f846 	bl	8014f04 <vTaskSwitchContext>
 8015e78:	f04f 0000 	mov.w	r0, #0
 8015e7c:	f380 8811 	msr	BASEPRI, r0
 8015e80:	4a07      	ldr	r2, [pc, #28]	; (8015ea0 <pxCurrentTCBConst>)
 8015e82:	6811      	ldr	r1, [r2, #0]
 8015e84:	6808      	ldr	r0, [r1, #0]
 8015e86:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8015e8a:	f382 880b 	msr	PSPLIM, r2
 8015e8e:	f380 8809 	msr	PSP, r0
 8015e92:	4718      	bx	r3
 8015e94:	f3af 8000 	nop.w
 8015e98:	f3af 8000 	nop.w
 8015e9c:	f3af 8000 	nop.w

08015ea0 <pxCurrentTCBConst>:
 8015ea0:	20001238 	.word	0x20001238
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8015ea4:	bf00      	nop
 8015ea6:	bf00      	nop
	...

08015eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8015eb0:	f01e 0f04 	tst.w	lr, #4
 8015eb4:	bf0c      	ite	eq
 8015eb6:	f3ef 8008 	mrseq	r0, MSP
 8015eba:	f3ef 8009 	mrsne	r0, PSP
 8015ebe:	4904      	ldr	r1, [pc, #16]	; (8015ed0 <svchandler_address_const>)
 8015ec0:	4708      	bx	r1
 8015ec2:	bf00      	nop
 8015ec4:	f3af 8000 	nop.w
 8015ec8:	f3af 8000 	nop.w
 8015ecc:	f3af 8000 	nop.w

08015ed0 <svchandler_address_const>:
 8015ed0:	08015c3d 	.word	0x08015c3d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8015ed4:	bf00      	nop
 8015ed6:	bf00      	nop

08015ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b086      	sub	sp, #24
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8015ee4:	f7fe feb0 	bl	8014c48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015ee8:	4b4f      	ldr	r3, [pc, #316]	; (8016028 <pvPortMalloc+0x150>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d101      	bne.n	8015ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ef0:	f000 f8f8 	bl	80160e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ef4:	4b4d      	ldr	r3, [pc, #308]	; (801602c <pvPortMalloc+0x154>)
 8015ef6:	681a      	ldr	r2, [r3, #0]
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	4013      	ands	r3, r2
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	f040 8083 	bne.w	8016008 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d015      	beq.n	8015f34 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8015f08:	2208      	movs	r2, #8
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f003 0307 	and.w	r3, r3, #7
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d00c      	beq.n	8015f34 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f023 0307 	bic.w	r3, r3, #7
 8015f20:	3308      	adds	r3, #8
 8015f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f003 0307 	and.w	r3, r3, #7
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d002      	beq.n	8015f34 <pvPortMalloc+0x5c>
 8015f2e:	f7ff ff73 	bl	8015e18 <ulSetInterruptMask>
 8015f32:	e7fe      	b.n	8015f32 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d066      	beq.n	8016008 <pvPortMalloc+0x130>
 8015f3a:	4b3d      	ldr	r3, [pc, #244]	; (8016030 <pvPortMalloc+0x158>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d861      	bhi.n	8016008 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f44:	4b3b      	ldr	r3, [pc, #236]	; (8016034 <pvPortMalloc+0x15c>)
 8015f46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8015f48:	4b3a      	ldr	r3, [pc, #232]	; (8016034 <pvPortMalloc+0x15c>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f4e:	e004      	b.n	8015f5a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d903      	bls.n	8015f6c <pvPortMalloc+0x94>
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d1f1      	bne.n	8015f50 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f6c:	4b2e      	ldr	r3, [pc, #184]	; (8016028 <pvPortMalloc+0x150>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	697a      	ldr	r2, [r7, #20]
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d048      	beq.n	8016008 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	2208      	movs	r2, #8
 8015f7c:	4413      	add	r3, r2
 8015f7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	685a      	ldr	r2, [r3, #4]
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	1ad2      	subs	r2, r2, r3
 8015f90:	2308      	movs	r3, #8
 8015f92:	005b      	lsls	r3, r3, #1
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d917      	bls.n	8015fc8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f98:	697a      	ldr	r2, [r7, #20]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	4413      	add	r3, r2
 8015f9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	f003 0307 	and.w	r3, r3, #7
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d002      	beq.n	8015fb0 <pvPortMalloc+0xd8>
 8015faa:	f7ff ff35 	bl	8015e18 <ulSetInterruptMask>
 8015fae:	e7fe      	b.n	8015fae <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	685a      	ldr	r2, [r3, #4]
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	1ad2      	subs	r2, r2, r3
 8015fb8:	68bb      	ldr	r3, [r7, #8]
 8015fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015fc2:	68b8      	ldr	r0, [r7, #8]
 8015fc4:	f000 f8f0 	bl	80161a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fc8:	4b19      	ldr	r3, [pc, #100]	; (8016030 <pvPortMalloc+0x158>)
 8015fca:	681a      	ldr	r2, [r3, #0]
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	685b      	ldr	r3, [r3, #4]
 8015fd0:	1ad3      	subs	r3, r2, r3
 8015fd2:	4a17      	ldr	r2, [pc, #92]	; (8016030 <pvPortMalloc+0x158>)
 8015fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fd6:	4b16      	ldr	r3, [pc, #88]	; (8016030 <pvPortMalloc+0x158>)
 8015fd8:	681a      	ldr	r2, [r3, #0]
 8015fda:	4b17      	ldr	r3, [pc, #92]	; (8016038 <pvPortMalloc+0x160>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d203      	bcs.n	8015fea <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fe2:	4b13      	ldr	r3, [pc, #76]	; (8016030 <pvPortMalloc+0x158>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4a14      	ldr	r2, [pc, #80]	; (8016038 <pvPortMalloc+0x160>)
 8015fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	685a      	ldr	r2, [r3, #4]
 8015fee:	4b0f      	ldr	r3, [pc, #60]	; (801602c <pvPortMalloc+0x154>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	431a      	orrs	r2, r3
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ffe:	4b0f      	ldr	r3, [pc, #60]	; (801603c <pvPortMalloc+0x164>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	3301      	adds	r3, #1
 8016004:	4a0d      	ldr	r2, [pc, #52]	; (801603c <pvPortMalloc+0x164>)
 8016006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016008:	f7fe fe2c 	bl	8014c64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	f003 0307 	and.w	r3, r3, #7
 8016012:	2b00      	cmp	r3, #0
 8016014:	d002      	beq.n	801601c <pvPortMalloc+0x144>
 8016016:	f7ff feff 	bl	8015e18 <ulSetInterruptMask>
 801601a:	e7fe      	b.n	801601a <pvPortMalloc+0x142>
	return pvReturn;
 801601c:	68fb      	ldr	r3, [r7, #12]
}
 801601e:	4618      	mov	r0, r3
 8016020:	3718      	adds	r7, #24
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	2000386c 	.word	0x2000386c
 801602c:	20003880 	.word	0x20003880
 8016030:	20003870 	.word	0x20003870
 8016034:	20003864 	.word	0x20003864
 8016038:	20003874 	.word	0x20003874
 801603c:	20003878 	.word	0x20003878

08016040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d03d      	beq.n	80160ce <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016052:	2308      	movs	r3, #8
 8016054:	425b      	negs	r3, r3
 8016056:	68fa      	ldr	r2, [r7, #12]
 8016058:	4413      	add	r3, r2
 801605a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	685a      	ldr	r2, [r3, #4]
 8016064:	4b1c      	ldr	r3, [pc, #112]	; (80160d8 <vPortFree+0x98>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4013      	ands	r3, r2
 801606a:	2b00      	cmp	r3, #0
 801606c:	d102      	bne.n	8016074 <vPortFree+0x34>
 801606e:	f7ff fed3 	bl	8015e18 <ulSetInterruptMask>
 8016072:	e7fe      	b.n	8016072 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d002      	beq.n	8016082 <vPortFree+0x42>
 801607c:	f7ff fecc 	bl	8015e18 <ulSetInterruptMask>
 8016080:	e7fe      	b.n	8016080 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	685a      	ldr	r2, [r3, #4]
 8016086:	4b14      	ldr	r3, [pc, #80]	; (80160d8 <vPortFree+0x98>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	4013      	ands	r3, r2
 801608c:	2b00      	cmp	r3, #0
 801608e:	d01e      	beq.n	80160ce <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d11a      	bne.n	80160ce <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	685a      	ldr	r2, [r3, #4]
 801609c:	4b0e      	ldr	r3, [pc, #56]	; (80160d8 <vPortFree+0x98>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	43db      	mvns	r3, r3
 80160a2:	401a      	ands	r2, r3
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160a8:	f7fe fdce 	bl	8014c48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	685a      	ldr	r2, [r3, #4]
 80160b0:	4b0a      	ldr	r3, [pc, #40]	; (80160dc <vPortFree+0x9c>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4413      	add	r3, r2
 80160b6:	4a09      	ldr	r2, [pc, #36]	; (80160dc <vPortFree+0x9c>)
 80160b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160ba:	68b8      	ldr	r0, [r7, #8]
 80160bc:	f000 f874 	bl	80161a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80160c0:	4b07      	ldr	r3, [pc, #28]	; (80160e0 <vPortFree+0xa0>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	3301      	adds	r3, #1
 80160c6:	4a06      	ldr	r2, [pc, #24]	; (80160e0 <vPortFree+0xa0>)
 80160c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80160ca:	f7fe fdcb 	bl	8014c64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160ce:	bf00      	nop
 80160d0:	3710      	adds	r7, #16
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}
 80160d6:	bf00      	nop
 80160d8:	20003880 	.word	0x20003880
 80160dc:	20003870 	.word	0x20003870
 80160e0:	2000387c 	.word	0x2000387c

080160e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80160e4:	b480      	push	{r7}
 80160e6:	b085      	sub	sp, #20
 80160e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80160ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80160ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80160f0:	4b27      	ldr	r3, [pc, #156]	; (8016190 <prvHeapInit+0xac>)
 80160f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	f003 0307 	and.w	r3, r3, #7
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d00c      	beq.n	8016118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	3307      	adds	r3, #7
 8016102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	f023 0307 	bic.w	r3, r3, #7
 801610a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801610c:	68ba      	ldr	r2, [r7, #8]
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	1ad3      	subs	r3, r2, r3
 8016112:	4a1f      	ldr	r2, [pc, #124]	; (8016190 <prvHeapInit+0xac>)
 8016114:	4413      	add	r3, r2
 8016116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801611c:	4a1d      	ldr	r2, [pc, #116]	; (8016194 <prvHeapInit+0xb0>)
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016122:	4b1c      	ldr	r3, [pc, #112]	; (8016194 <prvHeapInit+0xb0>)
 8016124:	2200      	movs	r2, #0
 8016126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	68ba      	ldr	r2, [r7, #8]
 801612c:	4413      	add	r3, r2
 801612e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016130:	2208      	movs	r2, #8
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	1a9b      	subs	r3, r3, r2
 8016136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	f023 0307 	bic.w	r3, r3, #7
 801613e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	4a15      	ldr	r2, [pc, #84]	; (8016198 <prvHeapInit+0xb4>)
 8016144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016146:	4b14      	ldr	r3, [pc, #80]	; (8016198 <prvHeapInit+0xb4>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	2200      	movs	r2, #0
 801614c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801614e:	4b12      	ldr	r3, [pc, #72]	; (8016198 <prvHeapInit+0xb4>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	2200      	movs	r2, #0
 8016154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	68fa      	ldr	r2, [r7, #12]
 801615e:	1ad2      	subs	r2, r2, r3
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016164:	4b0c      	ldr	r3, [pc, #48]	; (8016198 <prvHeapInit+0xb4>)
 8016166:	681a      	ldr	r2, [r3, #0]
 8016168:	683b      	ldr	r3, [r7, #0]
 801616a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	685b      	ldr	r3, [r3, #4]
 8016170:	4a0a      	ldr	r2, [pc, #40]	; (801619c <prvHeapInit+0xb8>)
 8016172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	4a09      	ldr	r2, [pc, #36]	; (80161a0 <prvHeapInit+0xbc>)
 801617a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801617c:	4b09      	ldr	r3, [pc, #36]	; (80161a4 <prvHeapInit+0xc0>)
 801617e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016182:	601a      	str	r2, [r3, #0]
}
 8016184:	bf00      	nop
 8016186:	3714      	adds	r7, #20
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr
 8016190:	20001864 	.word	0x20001864
 8016194:	20003864 	.word	0x20003864
 8016198:	2000386c 	.word	0x2000386c
 801619c:	20003874 	.word	0x20003874
 80161a0:	20003870 	.word	0x20003870
 80161a4:	20003880 	.word	0x20003880

080161a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161a8:	b480      	push	{r7}
 80161aa:	b085      	sub	sp, #20
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161b0:	4b28      	ldr	r3, [pc, #160]	; (8016254 <prvInsertBlockIntoFreeList+0xac>)
 80161b2:	60fb      	str	r3, [r7, #12]
 80161b4:	e002      	b.n	80161bc <prvInsertBlockIntoFreeList+0x14>
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	60fb      	str	r3, [r7, #12]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	687a      	ldr	r2, [r7, #4]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d8f7      	bhi.n	80161b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	685b      	ldr	r3, [r3, #4]
 80161ce:	68ba      	ldr	r2, [r7, #8]
 80161d0:	4413      	add	r3, r2
 80161d2:	687a      	ldr	r2, [r7, #4]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d108      	bne.n	80161ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	685a      	ldr	r2, [r3, #4]
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	441a      	add	r2, r3
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	68ba      	ldr	r2, [r7, #8]
 80161f4:	441a      	add	r2, r3
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d118      	bne.n	8016230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	681a      	ldr	r2, [r3, #0]
 8016202:	4b15      	ldr	r3, [pc, #84]	; (8016258 <prvInsertBlockIntoFreeList+0xb0>)
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	429a      	cmp	r2, r3
 8016208:	d00d      	beq.n	8016226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	685a      	ldr	r2, [r3, #4]
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	685b      	ldr	r3, [r3, #4]
 8016214:	441a      	add	r2, r3
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	601a      	str	r2, [r3, #0]
 8016224:	e008      	b.n	8016238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016226:	4b0c      	ldr	r3, [pc, #48]	; (8016258 <prvInsertBlockIntoFreeList+0xb0>)
 8016228:	681a      	ldr	r2, [r3, #0]
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	601a      	str	r2, [r3, #0]
 801622e:	e003      	b.n	8016238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016238:	68fa      	ldr	r2, [r7, #12]
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	429a      	cmp	r2, r3
 801623e:	d002      	beq.n	8016246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016246:	bf00      	nop
 8016248:	3714      	adds	r7, #20
 801624a:	46bd      	mov	sp, r7
 801624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016250:	4770      	bx	lr
 8016252:	bf00      	nop
 8016254:	20003864 	.word	0x20003864
 8016258:	2000386c 	.word	0x2000386c

0801625c <_ZdlPv>:
 801625c:	f001 b8b6 	b.w	80173cc <free>

08016260 <_ZdlPvj>:
 8016260:	f7ff bffc 	b.w	801625c <_ZdlPv>

08016264 <_Znwj>:
 8016264:	2801      	cmp	r0, #1
 8016266:	bf38      	it	cc
 8016268:	2001      	movcc	r0, #1
 801626a:	b510      	push	{r4, lr}
 801626c:	4604      	mov	r4, r0
 801626e:	4620      	mov	r0, r4
 8016270:	f001 f8a4 	bl	80173bc <malloc>
 8016274:	b100      	cbz	r0, 8016278 <_Znwj+0x14>
 8016276:	bd10      	pop	{r4, pc}
 8016278:	f000 f812 	bl	80162a0 <_ZSt15get_new_handlerv>
 801627c:	b908      	cbnz	r0, 8016282 <_Znwj+0x1e>
 801627e:	f001 f895 	bl	80173ac <abort>
 8016282:	4780      	blx	r0
 8016284:	e7f3      	b.n	801626e <_Znwj+0xa>

08016286 <_ZNSaIcEC1Ev>:
 8016286:	4770      	bx	lr

08016288 <_ZNSaIcEC1ERKS_>:
 8016288:	4770      	bx	lr

0801628a <_ZNSaIcED1Ev>:
 801628a:	4770      	bx	lr

0801628c <_ZSt17__throw_bad_allocv>:
 801628c:	b508      	push	{r3, lr}
 801628e:	f001 f88d 	bl	80173ac <abort>

08016292 <_ZSt28__throw_bad_array_new_lengthv>:
 8016292:	b508      	push	{r3, lr}
 8016294:	f001 f88a 	bl	80173ac <abort>

08016298 <_ZSt20__throw_length_errorPKc>:
 8016298:	b508      	push	{r3, lr}
 801629a:	f001 f887 	bl	80173ac <abort>
	...

080162a0 <_ZSt15get_new_handlerv>:
 80162a0:	4b01      	ldr	r3, [pc, #4]	; (80162a8 <_ZSt15get_new_handlerv+0x8>)
 80162a2:	e8d3 0faf 	lda	r0, [r3]
 80162a6:	4770      	bx	lr
 80162a8:	20003884 	.word	0x20003884

080162ac <fmod>:
 80162ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ae:	ec57 6b10 	vmov	r6, r7, d0
 80162b2:	ec55 4b11 	vmov	r4, r5, d1
 80162b6:	ed2d 8b02 	vpush	{d8}
 80162ba:	f000 f8a1 	bl	8016400 <__ieee754_fmod>
 80162be:	4622      	mov	r2, r4
 80162c0:	462b      	mov	r3, r5
 80162c2:	4630      	mov	r0, r6
 80162c4:	4639      	mov	r1, r7
 80162c6:	eeb0 8a40 	vmov.f32	s16, s0
 80162ca:	eef0 8a60 	vmov.f32	s17, s1
 80162ce:	f7ea fc1f 	bl	8000b10 <__aeabi_dcmpun>
 80162d2:	b990      	cbnz	r0, 80162fa <fmod+0x4e>
 80162d4:	2200      	movs	r2, #0
 80162d6:	2300      	movs	r3, #0
 80162d8:	4620      	mov	r0, r4
 80162da:	4629      	mov	r1, r5
 80162dc:	f7ea fbe6 	bl	8000aac <__aeabi_dcmpeq>
 80162e0:	b158      	cbz	r0, 80162fa <fmod+0x4e>
 80162e2:	f001 f9cb 	bl	801767c <__errno>
 80162e6:	2321      	movs	r3, #33	; 0x21
 80162e8:	2200      	movs	r2, #0
 80162ea:	6003      	str	r3, [r0, #0]
 80162ec:	2300      	movs	r3, #0
 80162ee:	4610      	mov	r0, r2
 80162f0:	4619      	mov	r1, r3
 80162f2:	f7ea fa9d 	bl	8000830 <__aeabi_ddiv>
 80162f6:	ec41 0b18 	vmov	d8, r0, r1
 80162fa:	eeb0 0a48 	vmov.f32	s0, s16
 80162fe:	eef0 0a68 	vmov.f32	s1, s17
 8016302:	ecbd 8b02 	vpop	{d8}
 8016306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016308 <pow>:
 8016308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630a:	ec55 4b11 	vmov	r4, r5, d1
 801630e:	ed2d 8b02 	vpush	{d8}
 8016312:	eeb0 8a40 	vmov.f32	s16, s0
 8016316:	eef0 8a60 	vmov.f32	s17, s1
 801631a:	f000 f981 	bl	8016620 <__ieee754_pow>
 801631e:	4622      	mov	r2, r4
 8016320:	462b      	mov	r3, r5
 8016322:	4620      	mov	r0, r4
 8016324:	4629      	mov	r1, r5
 8016326:	ec57 6b10 	vmov	r6, r7, d0
 801632a:	f7ea fbf1 	bl	8000b10 <__aeabi_dcmpun>
 801632e:	2800      	cmp	r0, #0
 8016330:	d13b      	bne.n	80163aa <pow+0xa2>
 8016332:	2200      	movs	r2, #0
 8016334:	2300      	movs	r3, #0
 8016336:	ec51 0b18 	vmov	r0, r1, d8
 801633a:	f7ea fbb7 	bl	8000aac <__aeabi_dcmpeq>
 801633e:	b1b8      	cbz	r0, 8016370 <pow+0x68>
 8016340:	2200      	movs	r2, #0
 8016342:	2300      	movs	r3, #0
 8016344:	4620      	mov	r0, r4
 8016346:	4629      	mov	r1, r5
 8016348:	f7ea fbb0 	bl	8000aac <__aeabi_dcmpeq>
 801634c:	2800      	cmp	r0, #0
 801634e:	d146      	bne.n	80163de <pow+0xd6>
 8016350:	ec45 4b10 	vmov	d0, r4, r5
 8016354:	f000 f848 	bl	80163e8 <finite>
 8016358:	b338      	cbz	r0, 80163aa <pow+0xa2>
 801635a:	2200      	movs	r2, #0
 801635c:	2300      	movs	r3, #0
 801635e:	4620      	mov	r0, r4
 8016360:	4629      	mov	r1, r5
 8016362:	f7ea fbad 	bl	8000ac0 <__aeabi_dcmplt>
 8016366:	b300      	cbz	r0, 80163aa <pow+0xa2>
 8016368:	f001 f988 	bl	801767c <__errno>
 801636c:	2322      	movs	r3, #34	; 0x22
 801636e:	e01b      	b.n	80163a8 <pow+0xa0>
 8016370:	ec47 6b10 	vmov	d0, r6, r7
 8016374:	f000 f838 	bl	80163e8 <finite>
 8016378:	b9e0      	cbnz	r0, 80163b4 <pow+0xac>
 801637a:	eeb0 0a48 	vmov.f32	s0, s16
 801637e:	eef0 0a68 	vmov.f32	s1, s17
 8016382:	f000 f831 	bl	80163e8 <finite>
 8016386:	b1a8      	cbz	r0, 80163b4 <pow+0xac>
 8016388:	ec45 4b10 	vmov	d0, r4, r5
 801638c:	f000 f82c 	bl	80163e8 <finite>
 8016390:	b180      	cbz	r0, 80163b4 <pow+0xac>
 8016392:	4632      	mov	r2, r6
 8016394:	463b      	mov	r3, r7
 8016396:	4630      	mov	r0, r6
 8016398:	4639      	mov	r1, r7
 801639a:	f7ea fbb9 	bl	8000b10 <__aeabi_dcmpun>
 801639e:	2800      	cmp	r0, #0
 80163a0:	d0e2      	beq.n	8016368 <pow+0x60>
 80163a2:	f001 f96b 	bl	801767c <__errno>
 80163a6:	2321      	movs	r3, #33	; 0x21
 80163a8:	6003      	str	r3, [r0, #0]
 80163aa:	ecbd 8b02 	vpop	{d8}
 80163ae:	ec47 6b10 	vmov	d0, r6, r7
 80163b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163b4:	2200      	movs	r2, #0
 80163b6:	2300      	movs	r3, #0
 80163b8:	4630      	mov	r0, r6
 80163ba:	4639      	mov	r1, r7
 80163bc:	f7ea fb76 	bl	8000aac <__aeabi_dcmpeq>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	d0f2      	beq.n	80163aa <pow+0xa2>
 80163c4:	eeb0 0a48 	vmov.f32	s0, s16
 80163c8:	eef0 0a68 	vmov.f32	s1, s17
 80163cc:	f000 f80c 	bl	80163e8 <finite>
 80163d0:	2800      	cmp	r0, #0
 80163d2:	d0ea      	beq.n	80163aa <pow+0xa2>
 80163d4:	ec45 4b10 	vmov	d0, r4, r5
 80163d8:	f000 f806 	bl	80163e8 <finite>
 80163dc:	e7c3      	b.n	8016366 <pow+0x5e>
 80163de:	2600      	movs	r6, #0
 80163e0:	4f00      	ldr	r7, [pc, #0]	; (80163e4 <pow+0xdc>)
 80163e2:	e7e2      	b.n	80163aa <pow+0xa2>
 80163e4:	3ff00000 	.word	0x3ff00000

080163e8 <finite>:
 80163e8:	b082      	sub	sp, #8
 80163ea:	ed8d 0b00 	vstr	d0, [sp]
 80163ee:	9801      	ldr	r0, [sp, #4]
 80163f0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80163f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80163f8:	0fc0      	lsrs	r0, r0, #31
 80163fa:	b002      	add	sp, #8
 80163fc:	4770      	bx	lr
	...

08016400 <__ieee754_fmod>:
 8016400:	ec53 2b11 	vmov	r2, r3, d1
 8016404:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8016408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801640c:	ea5c 0402 	orrs.w	r4, ip, r2
 8016410:	461e      	mov	r6, r3
 8016412:	ee11 7a10 	vmov	r7, s2
 8016416:	ee11 ea10 	vmov	lr, s2
 801641a:	ec51 0b10 	vmov	r0, r1, d0
 801641e:	d00c      	beq.n	801643a <__ieee754_fmod+0x3a>
 8016420:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8016424:	4c77      	ldr	r4, [pc, #476]	; (8016604 <__ieee754_fmod+0x204>)
 8016426:	4689      	mov	r9, r1
 8016428:	45a0      	cmp	r8, r4
 801642a:	dc06      	bgt.n	801643a <__ieee754_fmod+0x3a>
 801642c:	4254      	negs	r4, r2
 801642e:	4d76      	ldr	r5, [pc, #472]	; (8016608 <__ieee754_fmod+0x208>)
 8016430:	4314      	orrs	r4, r2
 8016432:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8016436:	42ac      	cmp	r4, r5
 8016438:	d909      	bls.n	801644e <__ieee754_fmod+0x4e>
 801643a:	f7ea f8cf 	bl	80005dc <__aeabi_dmul>
 801643e:	4602      	mov	r2, r0
 8016440:	460b      	mov	r3, r1
 8016442:	f7ea f9f5 	bl	8000830 <__aeabi_ddiv>
 8016446:	ec41 0b10 	vmov	d0, r0, r1
 801644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801644e:	45e0      	cmp	r8, ip
 8016450:	ee10 aa10 	vmov	sl, s0
 8016454:	ee10 4a10 	vmov	r4, s0
 8016458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801645c:	dc09      	bgt.n	8016472 <__ieee754_fmod+0x72>
 801645e:	dbf2      	blt.n	8016446 <__ieee754_fmod+0x46>
 8016460:	4290      	cmp	r0, r2
 8016462:	d3f0      	bcc.n	8016446 <__ieee754_fmod+0x46>
 8016464:	d105      	bne.n	8016472 <__ieee754_fmod+0x72>
 8016466:	4b69      	ldr	r3, [pc, #420]	; (801660c <__ieee754_fmod+0x20c>)
 8016468:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801646c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016470:	e7e9      	b.n	8016446 <__ieee754_fmod+0x46>
 8016472:	4a65      	ldr	r2, [pc, #404]	; (8016608 <__ieee754_fmod+0x208>)
 8016474:	ea19 0f02 	tst.w	r9, r2
 8016478:	d148      	bne.n	801650c <__ieee754_fmod+0x10c>
 801647a:	f1b8 0f00 	cmp.w	r8, #0
 801647e:	d13d      	bne.n	80164fc <__ieee754_fmod+0xfc>
 8016480:	4653      	mov	r3, sl
 8016482:	4963      	ldr	r1, [pc, #396]	; (8016610 <__ieee754_fmod+0x210>)
 8016484:	2b00      	cmp	r3, #0
 8016486:	dc36      	bgt.n	80164f6 <__ieee754_fmod+0xf6>
 8016488:	4216      	tst	r6, r2
 801648a:	d14f      	bne.n	801652c <__ieee754_fmod+0x12c>
 801648c:	f1bc 0f00 	cmp.w	ip, #0
 8016490:	d144      	bne.n	801651c <__ieee754_fmod+0x11c>
 8016492:	463b      	mov	r3, r7
 8016494:	4a5e      	ldr	r2, [pc, #376]	; (8016610 <__ieee754_fmod+0x210>)
 8016496:	2b00      	cmp	r3, #0
 8016498:	dc3d      	bgt.n	8016516 <__ieee754_fmod+0x116>
 801649a:	485e      	ldr	r0, [pc, #376]	; (8016614 <__ieee754_fmod+0x214>)
 801649c:	4281      	cmp	r1, r0
 801649e:	db4a      	blt.n	8016536 <__ieee754_fmod+0x136>
 80164a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80164a8:	485a      	ldr	r0, [pc, #360]	; (8016614 <__ieee754_fmod+0x214>)
 80164aa:	4282      	cmp	r2, r0
 80164ac:	db57      	blt.n	801655e <__ieee754_fmod+0x15e>
 80164ae:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80164b2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80164b6:	1a89      	subs	r1, r1, r2
 80164b8:	1b98      	subs	r0, r3, r6
 80164ba:	eba4 070e 	sub.w	r7, r4, lr
 80164be:	2900      	cmp	r1, #0
 80164c0:	d162      	bne.n	8016588 <__ieee754_fmod+0x188>
 80164c2:	4574      	cmp	r4, lr
 80164c4:	bf38      	it	cc
 80164c6:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80164ca:	2800      	cmp	r0, #0
 80164cc:	bfa4      	itt	ge
 80164ce:	463c      	movge	r4, r7
 80164d0:	4603      	movge	r3, r0
 80164d2:	ea53 0104 	orrs.w	r1, r3, r4
 80164d6:	d0c6      	beq.n	8016466 <__ieee754_fmod+0x66>
 80164d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80164dc:	db69      	blt.n	80165b2 <__ieee754_fmod+0x1b2>
 80164de:	494d      	ldr	r1, [pc, #308]	; (8016614 <__ieee754_fmod+0x214>)
 80164e0:	428a      	cmp	r2, r1
 80164e2:	db6c      	blt.n	80165be <__ieee754_fmod+0x1be>
 80164e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80164e8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80164ec:	4620      	mov	r0, r4
 80164ee:	432b      	orrs	r3, r5
 80164f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80164f4:	e7a7      	b.n	8016446 <__ieee754_fmod+0x46>
 80164f6:	3901      	subs	r1, #1
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	e7c3      	b.n	8016484 <__ieee754_fmod+0x84>
 80164fc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8016500:	4944      	ldr	r1, [pc, #272]	; (8016614 <__ieee754_fmod+0x214>)
 8016502:	2b00      	cmp	r3, #0
 8016504:	ddc0      	ble.n	8016488 <__ieee754_fmod+0x88>
 8016506:	3901      	subs	r1, #1
 8016508:	005b      	lsls	r3, r3, #1
 801650a:	e7fa      	b.n	8016502 <__ieee754_fmod+0x102>
 801650c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8016510:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016514:	e7b8      	b.n	8016488 <__ieee754_fmod+0x88>
 8016516:	3a01      	subs	r2, #1
 8016518:	005b      	lsls	r3, r3, #1
 801651a:	e7bc      	b.n	8016496 <__ieee754_fmod+0x96>
 801651c:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8016520:	4a3c      	ldr	r2, [pc, #240]	; (8016614 <__ieee754_fmod+0x214>)
 8016522:	2b00      	cmp	r3, #0
 8016524:	ddb9      	ble.n	801649a <__ieee754_fmod+0x9a>
 8016526:	3a01      	subs	r2, #1
 8016528:	005b      	lsls	r3, r3, #1
 801652a:	e7fa      	b.n	8016522 <__ieee754_fmod+0x122>
 801652c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8016530:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016534:	e7b1      	b.n	801649a <__ieee754_fmod+0x9a>
 8016536:	1a40      	subs	r0, r0, r1
 8016538:	281f      	cmp	r0, #31
 801653a:	dc0a      	bgt.n	8016552 <__ieee754_fmod+0x152>
 801653c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8016540:	fa08 f800 	lsl.w	r8, r8, r0
 8016544:	fa0a f400 	lsl.w	r4, sl, r0
 8016548:	fa2a f303 	lsr.w	r3, sl, r3
 801654c:	ea43 0308 	orr.w	r3, r3, r8
 8016550:	e7aa      	b.n	80164a8 <__ieee754_fmod+0xa8>
 8016552:	4b31      	ldr	r3, [pc, #196]	; (8016618 <__ieee754_fmod+0x218>)
 8016554:	2400      	movs	r4, #0
 8016556:	1a5b      	subs	r3, r3, r1
 8016558:	fa0a f303 	lsl.w	r3, sl, r3
 801655c:	e7a4      	b.n	80164a8 <__ieee754_fmod+0xa8>
 801655e:	1a80      	subs	r0, r0, r2
 8016560:	281f      	cmp	r0, #31
 8016562:	dc0a      	bgt.n	801657a <__ieee754_fmod+0x17a>
 8016564:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8016568:	fa0c fc00 	lsl.w	ip, ip, r0
 801656c:	fa07 fe00 	lsl.w	lr, r7, r0
 8016570:	fa27 f606 	lsr.w	r6, r7, r6
 8016574:	ea46 060c 	orr.w	r6, r6, ip
 8016578:	e79d      	b.n	80164b6 <__ieee754_fmod+0xb6>
 801657a:	4e27      	ldr	r6, [pc, #156]	; (8016618 <__ieee754_fmod+0x218>)
 801657c:	f04f 0e00 	mov.w	lr, #0
 8016580:	1ab6      	subs	r6, r6, r2
 8016582:	fa07 f606 	lsl.w	r6, r7, r6
 8016586:	e796      	b.n	80164b6 <__ieee754_fmod+0xb6>
 8016588:	4574      	cmp	r4, lr
 801658a:	bf38      	it	cc
 801658c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8016590:	2800      	cmp	r0, #0
 8016592:	da05      	bge.n	80165a0 <__ieee754_fmod+0x1a0>
 8016594:	0fe0      	lsrs	r0, r4, #31
 8016596:	0064      	lsls	r4, r4, #1
 8016598:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801659c:	3901      	subs	r1, #1
 801659e:	e78b      	b.n	80164b8 <__ieee754_fmod+0xb8>
 80165a0:	ea50 0307 	orrs.w	r3, r0, r7
 80165a4:	f43f af5f 	beq.w	8016466 <__ieee754_fmod+0x66>
 80165a8:	0ffb      	lsrs	r3, r7, #31
 80165aa:	007c      	lsls	r4, r7, #1
 80165ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80165b0:	e7f4      	b.n	801659c <__ieee754_fmod+0x19c>
 80165b2:	0fe1      	lsrs	r1, r4, #31
 80165b4:	3a01      	subs	r2, #1
 80165b6:	0064      	lsls	r4, r4, #1
 80165b8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80165bc:	e78c      	b.n	80164d8 <__ieee754_fmod+0xd8>
 80165be:	1a89      	subs	r1, r1, r2
 80165c0:	2914      	cmp	r1, #20
 80165c2:	dc0a      	bgt.n	80165da <__ieee754_fmod+0x1da>
 80165c4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80165c8:	40cc      	lsrs	r4, r1
 80165ca:	fa03 f202 	lsl.w	r2, r3, r2
 80165ce:	410b      	asrs	r3, r1
 80165d0:	4322      	orrs	r2, r4
 80165d2:	ea43 0105 	orr.w	r1, r3, r5
 80165d6:	4610      	mov	r0, r2
 80165d8:	e735      	b.n	8016446 <__ieee754_fmod+0x46>
 80165da:	291f      	cmp	r1, #31
 80165dc:	dc07      	bgt.n	80165ee <__ieee754_fmod+0x1ee>
 80165de:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80165e2:	40cc      	lsrs	r4, r1
 80165e4:	fa03 f202 	lsl.w	r2, r3, r2
 80165e8:	4322      	orrs	r2, r4
 80165ea:	462b      	mov	r3, r5
 80165ec:	e7f1      	b.n	80165d2 <__ieee754_fmod+0x1d2>
 80165ee:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80165f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80165f6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80165fa:	32e2      	adds	r2, #226	; 0xe2
 80165fc:	fa43 f202 	asr.w	r2, r3, r2
 8016600:	e7f3      	b.n	80165ea <__ieee754_fmod+0x1ea>
 8016602:	bf00      	nop
 8016604:	7fefffff 	.word	0x7fefffff
 8016608:	7ff00000 	.word	0x7ff00000
 801660c:	08018380 	.word	0x08018380
 8016610:	fffffbed 	.word	0xfffffbed
 8016614:	fffffc02 	.word	0xfffffc02
 8016618:	fffffbe2 	.word	0xfffffbe2
 801661c:	00000000 	.word	0x00000000

08016620 <__ieee754_pow>:
 8016620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016624:	ed2d 8b06 	vpush	{d8-d10}
 8016628:	b089      	sub	sp, #36	; 0x24
 801662a:	ed8d 1b00 	vstr	d1, [sp]
 801662e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016632:	ec57 6b10 	vmov	r6, r7, d0
 8016636:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801663a:	ea58 0102 	orrs.w	r1, r8, r2
 801663e:	d115      	bne.n	801666c <__ieee754_pow+0x4c>
 8016640:	19b3      	adds	r3, r6, r6
 8016642:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016646:	4152      	adcs	r2, r2
 8016648:	4299      	cmp	r1, r3
 801664a:	4b89      	ldr	r3, [pc, #548]	; (8016870 <__ieee754_pow+0x250>)
 801664c:	4193      	sbcs	r3, r2
 801664e:	f080 84d2 	bcs.w	8016ff6 <__ieee754_pow+0x9d6>
 8016652:	4630      	mov	r0, r6
 8016654:	4639      	mov	r1, r7
 8016656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801665a:	f7e9 fe09 	bl	8000270 <__adddf3>
 801665e:	ec41 0b10 	vmov	d0, r0, r1
 8016662:	b009      	add	sp, #36	; 0x24
 8016664:	ecbd 8b06 	vpop	{d8-d10}
 8016668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801666c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016670:	4b80      	ldr	r3, [pc, #512]	; (8016874 <__ieee754_pow+0x254>)
 8016672:	463d      	mov	r5, r7
 8016674:	ee10 aa10 	vmov	sl, s0
 8016678:	429c      	cmp	r4, r3
 801667a:	dc06      	bgt.n	801668a <__ieee754_pow+0x6a>
 801667c:	d101      	bne.n	8016682 <__ieee754_pow+0x62>
 801667e:	2e00      	cmp	r6, #0
 8016680:	d1e7      	bne.n	8016652 <__ieee754_pow+0x32>
 8016682:	4598      	cmp	r8, r3
 8016684:	dc01      	bgt.n	801668a <__ieee754_pow+0x6a>
 8016686:	d10f      	bne.n	80166a8 <__ieee754_pow+0x88>
 8016688:	b172      	cbz	r2, 80166a8 <__ieee754_pow+0x88>
 801668a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801668e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8016692:	ea55 050a 	orrs.w	r5, r5, sl
 8016696:	d1dc      	bne.n	8016652 <__ieee754_pow+0x32>
 8016698:	e9dd 3200 	ldrd	r3, r2, [sp]
 801669c:	18db      	adds	r3, r3, r3
 801669e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80166a2:	4152      	adcs	r2, r2
 80166a4:	429d      	cmp	r5, r3
 80166a6:	e7d0      	b.n	801664a <__ieee754_pow+0x2a>
 80166a8:	2d00      	cmp	r5, #0
 80166aa:	da3b      	bge.n	8016724 <__ieee754_pow+0x104>
 80166ac:	4b72      	ldr	r3, [pc, #456]	; (8016878 <__ieee754_pow+0x258>)
 80166ae:	4598      	cmp	r8, r3
 80166b0:	dc51      	bgt.n	8016756 <__ieee754_pow+0x136>
 80166b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80166b6:	4598      	cmp	r8, r3
 80166b8:	f340 84ac 	ble.w	8017014 <__ieee754_pow+0x9f4>
 80166bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80166c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80166c4:	2b14      	cmp	r3, #20
 80166c6:	dd0f      	ble.n	80166e8 <__ieee754_pow+0xc8>
 80166c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80166cc:	fa22 f103 	lsr.w	r1, r2, r3
 80166d0:	fa01 f303 	lsl.w	r3, r1, r3
 80166d4:	4293      	cmp	r3, r2
 80166d6:	f040 849d 	bne.w	8017014 <__ieee754_pow+0x9f4>
 80166da:	f001 0101 	and.w	r1, r1, #1
 80166de:	f1c1 0302 	rsb	r3, r1, #2
 80166e2:	9304      	str	r3, [sp, #16]
 80166e4:	b182      	cbz	r2, 8016708 <__ieee754_pow+0xe8>
 80166e6:	e05f      	b.n	80167a8 <__ieee754_pow+0x188>
 80166e8:	2a00      	cmp	r2, #0
 80166ea:	d15b      	bne.n	80167a4 <__ieee754_pow+0x184>
 80166ec:	f1c3 0314 	rsb	r3, r3, #20
 80166f0:	fa48 f103 	asr.w	r1, r8, r3
 80166f4:	fa01 f303 	lsl.w	r3, r1, r3
 80166f8:	4543      	cmp	r3, r8
 80166fa:	f040 8488 	bne.w	801700e <__ieee754_pow+0x9ee>
 80166fe:	f001 0101 	and.w	r1, r1, #1
 8016702:	f1c1 0302 	rsb	r3, r1, #2
 8016706:	9304      	str	r3, [sp, #16]
 8016708:	4b5c      	ldr	r3, [pc, #368]	; (801687c <__ieee754_pow+0x25c>)
 801670a:	4598      	cmp	r8, r3
 801670c:	d132      	bne.n	8016774 <__ieee754_pow+0x154>
 801670e:	f1b9 0f00 	cmp.w	r9, #0
 8016712:	f280 8478 	bge.w	8017006 <__ieee754_pow+0x9e6>
 8016716:	4632      	mov	r2, r6
 8016718:	463b      	mov	r3, r7
 801671a:	2000      	movs	r0, #0
 801671c:	4957      	ldr	r1, [pc, #348]	; (801687c <__ieee754_pow+0x25c>)
 801671e:	f7ea f887 	bl	8000830 <__aeabi_ddiv>
 8016722:	e79c      	b.n	801665e <__ieee754_pow+0x3e>
 8016724:	2300      	movs	r3, #0
 8016726:	9304      	str	r3, [sp, #16]
 8016728:	2a00      	cmp	r2, #0
 801672a:	d13d      	bne.n	80167a8 <__ieee754_pow+0x188>
 801672c:	4b51      	ldr	r3, [pc, #324]	; (8016874 <__ieee754_pow+0x254>)
 801672e:	4598      	cmp	r8, r3
 8016730:	d1ea      	bne.n	8016708 <__ieee754_pow+0xe8>
 8016732:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016736:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801673a:	ea53 030a 	orrs.w	r3, r3, sl
 801673e:	f000 845a 	beq.w	8016ff6 <__ieee754_pow+0x9d6>
 8016742:	4b4f      	ldr	r3, [pc, #316]	; (8016880 <__ieee754_pow+0x260>)
 8016744:	429c      	cmp	r4, r3
 8016746:	dd08      	ble.n	801675a <__ieee754_pow+0x13a>
 8016748:	f1b9 0f00 	cmp.w	r9, #0
 801674c:	f2c0 8457 	blt.w	8016ffe <__ieee754_pow+0x9de>
 8016750:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016754:	e783      	b.n	801665e <__ieee754_pow+0x3e>
 8016756:	2302      	movs	r3, #2
 8016758:	e7e5      	b.n	8016726 <__ieee754_pow+0x106>
 801675a:	f1b9 0f00 	cmp.w	r9, #0
 801675e:	f04f 0000 	mov.w	r0, #0
 8016762:	f04f 0100 	mov.w	r1, #0
 8016766:	f6bf af7a 	bge.w	801665e <__ieee754_pow+0x3e>
 801676a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801676e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016772:	e774      	b.n	801665e <__ieee754_pow+0x3e>
 8016774:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016778:	d106      	bne.n	8016788 <__ieee754_pow+0x168>
 801677a:	4632      	mov	r2, r6
 801677c:	463b      	mov	r3, r7
 801677e:	4630      	mov	r0, r6
 8016780:	4639      	mov	r1, r7
 8016782:	f7e9 ff2b 	bl	80005dc <__aeabi_dmul>
 8016786:	e76a      	b.n	801665e <__ieee754_pow+0x3e>
 8016788:	4b3e      	ldr	r3, [pc, #248]	; (8016884 <__ieee754_pow+0x264>)
 801678a:	4599      	cmp	r9, r3
 801678c:	d10c      	bne.n	80167a8 <__ieee754_pow+0x188>
 801678e:	2d00      	cmp	r5, #0
 8016790:	db0a      	blt.n	80167a8 <__ieee754_pow+0x188>
 8016792:	ec47 6b10 	vmov	d0, r6, r7
 8016796:	b009      	add	sp, #36	; 0x24
 8016798:	ecbd 8b06 	vpop	{d8-d10}
 801679c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167a0:	f000 bd24 	b.w	80171ec <__ieee754_sqrt>
 80167a4:	2300      	movs	r3, #0
 80167a6:	9304      	str	r3, [sp, #16]
 80167a8:	ec47 6b10 	vmov	d0, r6, r7
 80167ac:	f000 fc66 	bl	801707c <fabs>
 80167b0:	ec51 0b10 	vmov	r0, r1, d0
 80167b4:	f1ba 0f00 	cmp.w	sl, #0
 80167b8:	d129      	bne.n	801680e <__ieee754_pow+0x1ee>
 80167ba:	b124      	cbz	r4, 80167c6 <__ieee754_pow+0x1a6>
 80167bc:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80167c0:	4b2e      	ldr	r3, [pc, #184]	; (801687c <__ieee754_pow+0x25c>)
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d123      	bne.n	801680e <__ieee754_pow+0x1ee>
 80167c6:	f1b9 0f00 	cmp.w	r9, #0
 80167ca:	da05      	bge.n	80167d8 <__ieee754_pow+0x1b8>
 80167cc:	4602      	mov	r2, r0
 80167ce:	460b      	mov	r3, r1
 80167d0:	2000      	movs	r0, #0
 80167d2:	492a      	ldr	r1, [pc, #168]	; (801687c <__ieee754_pow+0x25c>)
 80167d4:	f7ea f82c 	bl	8000830 <__aeabi_ddiv>
 80167d8:	2d00      	cmp	r5, #0
 80167da:	f6bf af40 	bge.w	801665e <__ieee754_pow+0x3e>
 80167de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80167e2:	9b04      	ldr	r3, [sp, #16]
 80167e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80167e8:	431c      	orrs	r4, r3
 80167ea:	d108      	bne.n	80167fe <__ieee754_pow+0x1de>
 80167ec:	4602      	mov	r2, r0
 80167ee:	460b      	mov	r3, r1
 80167f0:	4610      	mov	r0, r2
 80167f2:	4619      	mov	r1, r3
 80167f4:	f7e9 fd3a 	bl	800026c <__aeabi_dsub>
 80167f8:	4602      	mov	r2, r0
 80167fa:	460b      	mov	r3, r1
 80167fc:	e78f      	b.n	801671e <__ieee754_pow+0xfe>
 80167fe:	9b04      	ldr	r3, [sp, #16]
 8016800:	2b01      	cmp	r3, #1
 8016802:	f47f af2c 	bne.w	801665e <__ieee754_pow+0x3e>
 8016806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801680a:	4619      	mov	r1, r3
 801680c:	e727      	b.n	801665e <__ieee754_pow+0x3e>
 801680e:	0feb      	lsrs	r3, r5, #31
 8016810:	3b01      	subs	r3, #1
 8016812:	9306      	str	r3, [sp, #24]
 8016814:	9a06      	ldr	r2, [sp, #24]
 8016816:	9b04      	ldr	r3, [sp, #16]
 8016818:	4313      	orrs	r3, r2
 801681a:	d102      	bne.n	8016822 <__ieee754_pow+0x202>
 801681c:	4632      	mov	r2, r6
 801681e:	463b      	mov	r3, r7
 8016820:	e7e6      	b.n	80167f0 <__ieee754_pow+0x1d0>
 8016822:	4b19      	ldr	r3, [pc, #100]	; (8016888 <__ieee754_pow+0x268>)
 8016824:	4598      	cmp	r8, r3
 8016826:	f340 80fb 	ble.w	8016a20 <__ieee754_pow+0x400>
 801682a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801682e:	4598      	cmp	r8, r3
 8016830:	4b13      	ldr	r3, [pc, #76]	; (8016880 <__ieee754_pow+0x260>)
 8016832:	dd0c      	ble.n	801684e <__ieee754_pow+0x22e>
 8016834:	429c      	cmp	r4, r3
 8016836:	dc0f      	bgt.n	8016858 <__ieee754_pow+0x238>
 8016838:	f1b9 0f00 	cmp.w	r9, #0
 801683c:	da0f      	bge.n	801685e <__ieee754_pow+0x23e>
 801683e:	2000      	movs	r0, #0
 8016840:	b009      	add	sp, #36	; 0x24
 8016842:	ecbd 8b06 	vpop	{d8-d10}
 8016846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684a:	f000 bcc6 	b.w	80171da <__math_oflow>
 801684e:	429c      	cmp	r4, r3
 8016850:	dbf2      	blt.n	8016838 <__ieee754_pow+0x218>
 8016852:	4b0a      	ldr	r3, [pc, #40]	; (801687c <__ieee754_pow+0x25c>)
 8016854:	429c      	cmp	r4, r3
 8016856:	dd19      	ble.n	801688c <__ieee754_pow+0x26c>
 8016858:	f1b9 0f00 	cmp.w	r9, #0
 801685c:	dcef      	bgt.n	801683e <__ieee754_pow+0x21e>
 801685e:	2000      	movs	r0, #0
 8016860:	b009      	add	sp, #36	; 0x24
 8016862:	ecbd 8b06 	vpop	{d8-d10}
 8016866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801686a:	f000 bcad 	b.w	80171c8 <__math_uflow>
 801686e:	bf00      	nop
 8016870:	fff00000 	.word	0xfff00000
 8016874:	7ff00000 	.word	0x7ff00000
 8016878:	433fffff 	.word	0x433fffff
 801687c:	3ff00000 	.word	0x3ff00000
 8016880:	3fefffff 	.word	0x3fefffff
 8016884:	3fe00000 	.word	0x3fe00000
 8016888:	41e00000 	.word	0x41e00000
 801688c:	2200      	movs	r2, #0
 801688e:	4b60      	ldr	r3, [pc, #384]	; (8016a10 <__ieee754_pow+0x3f0>)
 8016890:	f7e9 fcec 	bl	800026c <__aeabi_dsub>
 8016894:	4604      	mov	r4, r0
 8016896:	460d      	mov	r5, r1
 8016898:	a353      	add	r3, pc, #332	; (adr r3, 80169e8 <__ieee754_pow+0x3c8>)
 801689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689e:	f7e9 fe9d 	bl	80005dc <__aeabi_dmul>
 80168a2:	4606      	mov	r6, r0
 80168a4:	460f      	mov	r7, r1
 80168a6:	4620      	mov	r0, r4
 80168a8:	4629      	mov	r1, r5
 80168aa:	a351      	add	r3, pc, #324	; (adr r3, 80169f0 <__ieee754_pow+0x3d0>)
 80168ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b0:	f7e9 fe94 	bl	80005dc <__aeabi_dmul>
 80168b4:	2200      	movs	r2, #0
 80168b6:	4682      	mov	sl, r0
 80168b8:	468b      	mov	fp, r1
 80168ba:	4b56      	ldr	r3, [pc, #344]	; (8016a14 <__ieee754_pow+0x3f4>)
 80168bc:	4620      	mov	r0, r4
 80168be:	4629      	mov	r1, r5
 80168c0:	f7e9 fe8c 	bl	80005dc <__aeabi_dmul>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	a14b      	add	r1, pc, #300	; (adr r1, 80169f8 <__ieee754_pow+0x3d8>)
 80168ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168ce:	f7e9 fccd 	bl	800026c <__aeabi_dsub>
 80168d2:	4622      	mov	r2, r4
 80168d4:	462b      	mov	r3, r5
 80168d6:	f7e9 fe81 	bl	80005dc <__aeabi_dmul>
 80168da:	4602      	mov	r2, r0
 80168dc:	460b      	mov	r3, r1
 80168de:	2000      	movs	r0, #0
 80168e0:	494d      	ldr	r1, [pc, #308]	; (8016a18 <__ieee754_pow+0x3f8>)
 80168e2:	f7e9 fcc3 	bl	800026c <__aeabi_dsub>
 80168e6:	4680      	mov	r8, r0
 80168e8:	4689      	mov	r9, r1
 80168ea:	4622      	mov	r2, r4
 80168ec:	462b      	mov	r3, r5
 80168ee:	4620      	mov	r0, r4
 80168f0:	4629      	mov	r1, r5
 80168f2:	f7e9 fe73 	bl	80005dc <__aeabi_dmul>
 80168f6:	4602      	mov	r2, r0
 80168f8:	460b      	mov	r3, r1
 80168fa:	4640      	mov	r0, r8
 80168fc:	4649      	mov	r1, r9
 80168fe:	f7e9 fe6d 	bl	80005dc <__aeabi_dmul>
 8016902:	a33f      	add	r3, pc, #252	; (adr r3, 8016a00 <__ieee754_pow+0x3e0>)
 8016904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016908:	f7e9 fe68 	bl	80005dc <__aeabi_dmul>
 801690c:	4602      	mov	r2, r0
 801690e:	460b      	mov	r3, r1
 8016910:	4650      	mov	r0, sl
 8016912:	4659      	mov	r1, fp
 8016914:	f7e9 fcaa 	bl	800026c <__aeabi_dsub>
 8016918:	4602      	mov	r2, r0
 801691a:	460b      	mov	r3, r1
 801691c:	4680      	mov	r8, r0
 801691e:	4689      	mov	r9, r1
 8016920:	4630      	mov	r0, r6
 8016922:	4639      	mov	r1, r7
 8016924:	f7e9 fca4 	bl	8000270 <__adddf3>
 8016928:	2000      	movs	r0, #0
 801692a:	4632      	mov	r2, r6
 801692c:	463b      	mov	r3, r7
 801692e:	4604      	mov	r4, r0
 8016930:	460d      	mov	r5, r1
 8016932:	f7e9 fc9b 	bl	800026c <__aeabi_dsub>
 8016936:	4602      	mov	r2, r0
 8016938:	460b      	mov	r3, r1
 801693a:	4640      	mov	r0, r8
 801693c:	4649      	mov	r1, r9
 801693e:	f7e9 fc95 	bl	800026c <__aeabi_dsub>
 8016942:	9b04      	ldr	r3, [sp, #16]
 8016944:	9a06      	ldr	r2, [sp, #24]
 8016946:	4682      	mov	sl, r0
 8016948:	3b01      	subs	r3, #1
 801694a:	468b      	mov	fp, r1
 801694c:	4313      	orrs	r3, r2
 801694e:	f040 81e7 	bne.w	8016d20 <__ieee754_pow+0x700>
 8016952:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016a08 <__ieee754_pow+0x3e8>
 8016956:	e9dd 6700 	ldrd	r6, r7, [sp]
 801695a:	2600      	movs	r6, #0
 801695c:	eeb0 8a47 	vmov.f32	s16, s14
 8016960:	eef0 8a67 	vmov.f32	s17, s15
 8016964:	463b      	mov	r3, r7
 8016966:	4632      	mov	r2, r6
 8016968:	e9dd 0100 	ldrd	r0, r1, [sp]
 801696c:	f7e9 fc7e 	bl	800026c <__aeabi_dsub>
 8016970:	4622      	mov	r2, r4
 8016972:	462b      	mov	r3, r5
 8016974:	f7e9 fe32 	bl	80005dc <__aeabi_dmul>
 8016978:	4680      	mov	r8, r0
 801697a:	4689      	mov	r9, r1
 801697c:	4650      	mov	r0, sl
 801697e:	4659      	mov	r1, fp
 8016980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016984:	f7e9 fe2a 	bl	80005dc <__aeabi_dmul>
 8016988:	4602      	mov	r2, r0
 801698a:	460b      	mov	r3, r1
 801698c:	4640      	mov	r0, r8
 801698e:	4649      	mov	r1, r9
 8016990:	f7e9 fc6e 	bl	8000270 <__adddf3>
 8016994:	4680      	mov	r8, r0
 8016996:	4689      	mov	r9, r1
 8016998:	4632      	mov	r2, r6
 801699a:	463b      	mov	r3, r7
 801699c:	4620      	mov	r0, r4
 801699e:	4629      	mov	r1, r5
 80169a0:	f7e9 fe1c 	bl	80005dc <__aeabi_dmul>
 80169a4:	460b      	mov	r3, r1
 80169a6:	4604      	mov	r4, r0
 80169a8:	460d      	mov	r5, r1
 80169aa:	4602      	mov	r2, r0
 80169ac:	4649      	mov	r1, r9
 80169ae:	4640      	mov	r0, r8
 80169b0:	f7e9 fc5e 	bl	8000270 <__adddf3>
 80169b4:	4b19      	ldr	r3, [pc, #100]	; (8016a1c <__ieee754_pow+0x3fc>)
 80169b6:	4606      	mov	r6, r0
 80169b8:	460f      	mov	r7, r1
 80169ba:	4299      	cmp	r1, r3
 80169bc:	468b      	mov	fp, r1
 80169be:	ec45 4b19 	vmov	d9, r4, r5
 80169c2:	f340 82f1 	ble.w	8016fa8 <__ieee754_pow+0x988>
 80169c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80169ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80169ce:	4303      	orrs	r3, r0
 80169d0:	f000 81e4 	beq.w	8016d9c <__ieee754_pow+0x77c>
 80169d4:	2200      	movs	r2, #0
 80169d6:	2300      	movs	r3, #0
 80169d8:	ec51 0b18 	vmov	r0, r1, d8
 80169dc:	f7ea f870 	bl	8000ac0 <__aeabi_dcmplt>
 80169e0:	3800      	subs	r0, #0
 80169e2:	bf18      	it	ne
 80169e4:	2001      	movne	r0, #1
 80169e6:	e72b      	b.n	8016840 <__ieee754_pow+0x220>
 80169e8:	60000000 	.word	0x60000000
 80169ec:	3ff71547 	.word	0x3ff71547
 80169f0:	f85ddf44 	.word	0xf85ddf44
 80169f4:	3e54ae0b 	.word	0x3e54ae0b
 80169f8:	55555555 	.word	0x55555555
 80169fc:	3fd55555 	.word	0x3fd55555
 8016a00:	652b82fe 	.word	0x652b82fe
 8016a04:	3ff71547 	.word	0x3ff71547
 8016a08:	00000000 	.word	0x00000000
 8016a0c:	bff00000 	.word	0xbff00000
 8016a10:	3ff00000 	.word	0x3ff00000
 8016a14:	3fd00000 	.word	0x3fd00000
 8016a18:	3fe00000 	.word	0x3fe00000
 8016a1c:	408fffff 	.word	0x408fffff
 8016a20:	4bd5      	ldr	r3, [pc, #852]	; (8016d78 <__ieee754_pow+0x758>)
 8016a22:	2200      	movs	r2, #0
 8016a24:	402b      	ands	r3, r5
 8016a26:	b92b      	cbnz	r3, 8016a34 <__ieee754_pow+0x414>
 8016a28:	4bd4      	ldr	r3, [pc, #848]	; (8016d7c <__ieee754_pow+0x75c>)
 8016a2a:	f7e9 fdd7 	bl	80005dc <__aeabi_dmul>
 8016a2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016a32:	460c      	mov	r4, r1
 8016a34:	1523      	asrs	r3, r4, #20
 8016a36:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016a3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016a3e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016a42:	4413      	add	r3, r2
 8016a44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016a48:	9305      	str	r3, [sp, #20]
 8016a4a:	4bcd      	ldr	r3, [pc, #820]	; (8016d80 <__ieee754_pow+0x760>)
 8016a4c:	429c      	cmp	r4, r3
 8016a4e:	dd08      	ble.n	8016a62 <__ieee754_pow+0x442>
 8016a50:	4bcc      	ldr	r3, [pc, #816]	; (8016d84 <__ieee754_pow+0x764>)
 8016a52:	429c      	cmp	r4, r3
 8016a54:	f340 8162 	ble.w	8016d1c <__ieee754_pow+0x6fc>
 8016a58:	9b05      	ldr	r3, [sp, #20]
 8016a5a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016a5e:	3301      	adds	r3, #1
 8016a60:	9305      	str	r3, [sp, #20]
 8016a62:	2400      	movs	r4, #0
 8016a64:	00e3      	lsls	r3, r4, #3
 8016a66:	4682      	mov	sl, r0
 8016a68:	4629      	mov	r1, r5
 8016a6a:	46ab      	mov	fp, r5
 8016a6c:	9307      	str	r3, [sp, #28]
 8016a6e:	4bc6      	ldr	r3, [pc, #792]	; (8016d88 <__ieee754_pow+0x768>)
 8016a70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016a74:	ed93 7b00 	vldr	d7, [r3]
 8016a78:	eeb0 9a47 	vmov.f32	s18, s14
 8016a7c:	eef0 9a67 	vmov.f32	s19, s15
 8016a80:	ec53 2b17 	vmov	r2, r3, d7
 8016a84:	f7e9 fbf2 	bl	800026c <__aeabi_dsub>
 8016a88:	4652      	mov	r2, sl
 8016a8a:	4606      	mov	r6, r0
 8016a8c:	460f      	mov	r7, r1
 8016a8e:	462b      	mov	r3, r5
 8016a90:	106d      	asrs	r5, r5, #1
 8016a92:	ec51 0b19 	vmov	r0, r1, d9
 8016a96:	f7e9 fbeb 	bl	8000270 <__adddf3>
 8016a9a:	4602      	mov	r2, r0
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	2000      	movs	r0, #0
 8016aa0:	49ba      	ldr	r1, [pc, #744]	; (8016d8c <__ieee754_pow+0x76c>)
 8016aa2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016aa6:	f7e9 fec3 	bl	8000830 <__aeabi_ddiv>
 8016aaa:	4602      	mov	r2, r0
 8016aac:	460b      	mov	r3, r1
 8016aae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016ab2:	ec41 0b1a 	vmov	d10, r0, r1
 8016ab6:	4630      	mov	r0, r6
 8016ab8:	4639      	mov	r1, r7
 8016aba:	f7e9 fd8f 	bl	80005dc <__aeabi_dmul>
 8016abe:	2300      	movs	r3, #0
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ac6:	9302      	str	r3, [sp, #8]
 8016ac8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016acc:	4614      	mov	r4, r2
 8016ace:	461d      	mov	r5, r3
 8016ad0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016ad4:	ec41 0b18 	vmov	d8, r0, r1
 8016ad8:	4640      	mov	r0, r8
 8016ada:	4649      	mov	r1, r9
 8016adc:	f7e9 fd7e 	bl	80005dc <__aeabi_dmul>
 8016ae0:	4602      	mov	r2, r0
 8016ae2:	460b      	mov	r3, r1
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	4639      	mov	r1, r7
 8016ae8:	f7e9 fbc0 	bl	800026c <__aeabi_dsub>
 8016aec:	4606      	mov	r6, r0
 8016aee:	460f      	mov	r7, r1
 8016af0:	4620      	mov	r0, r4
 8016af2:	4629      	mov	r1, r5
 8016af4:	ec53 2b19 	vmov	r2, r3, d9
 8016af8:	f7e9 fbb8 	bl	800026c <__aeabi_dsub>
 8016afc:	4602      	mov	r2, r0
 8016afe:	460b      	mov	r3, r1
 8016b00:	4650      	mov	r0, sl
 8016b02:	4659      	mov	r1, fp
 8016b04:	f7e9 fbb2 	bl	800026c <__aeabi_dsub>
 8016b08:	4642      	mov	r2, r8
 8016b0a:	464b      	mov	r3, r9
 8016b0c:	f7e9 fd66 	bl	80005dc <__aeabi_dmul>
 8016b10:	4602      	mov	r2, r0
 8016b12:	460b      	mov	r3, r1
 8016b14:	4630      	mov	r0, r6
 8016b16:	4639      	mov	r1, r7
 8016b18:	f7e9 fba8 	bl	800026c <__aeabi_dsub>
 8016b1c:	ec53 2b1a 	vmov	r2, r3, d10
 8016b20:	f7e9 fd5c 	bl	80005dc <__aeabi_dmul>
 8016b24:	ec53 2b18 	vmov	r2, r3, d8
 8016b28:	ec41 0b19 	vmov	d9, r0, r1
 8016b2c:	ec51 0b18 	vmov	r0, r1, d8
 8016b30:	f7e9 fd54 	bl	80005dc <__aeabi_dmul>
 8016b34:	4604      	mov	r4, r0
 8016b36:	460d      	mov	r5, r1
 8016b38:	a37b      	add	r3, pc, #492	; (adr r3, 8016d28 <__ieee754_pow+0x708>)
 8016b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3e:	f7e9 fd4d 	bl	80005dc <__aeabi_dmul>
 8016b42:	a37b      	add	r3, pc, #492	; (adr r3, 8016d30 <__ieee754_pow+0x710>)
 8016b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b48:	f7e9 fb92 	bl	8000270 <__adddf3>
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	462b      	mov	r3, r5
 8016b50:	f7e9 fd44 	bl	80005dc <__aeabi_dmul>
 8016b54:	a378      	add	r3, pc, #480	; (adr r3, 8016d38 <__ieee754_pow+0x718>)
 8016b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b5a:	f7e9 fb89 	bl	8000270 <__adddf3>
 8016b5e:	4622      	mov	r2, r4
 8016b60:	462b      	mov	r3, r5
 8016b62:	f7e9 fd3b 	bl	80005dc <__aeabi_dmul>
 8016b66:	a376      	add	r3, pc, #472	; (adr r3, 8016d40 <__ieee754_pow+0x720>)
 8016b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6c:	f7e9 fb80 	bl	8000270 <__adddf3>
 8016b70:	4622      	mov	r2, r4
 8016b72:	462b      	mov	r3, r5
 8016b74:	f7e9 fd32 	bl	80005dc <__aeabi_dmul>
 8016b78:	a373      	add	r3, pc, #460	; (adr r3, 8016d48 <__ieee754_pow+0x728>)
 8016b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7e:	f7e9 fb77 	bl	8000270 <__adddf3>
 8016b82:	4622      	mov	r2, r4
 8016b84:	462b      	mov	r3, r5
 8016b86:	f7e9 fd29 	bl	80005dc <__aeabi_dmul>
 8016b8a:	a371      	add	r3, pc, #452	; (adr r3, 8016d50 <__ieee754_pow+0x730>)
 8016b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b90:	f7e9 fb6e 	bl	8000270 <__adddf3>
 8016b94:	4606      	mov	r6, r0
 8016b96:	460f      	mov	r7, r1
 8016b98:	4622      	mov	r2, r4
 8016b9a:	462b      	mov	r3, r5
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	4629      	mov	r1, r5
 8016ba0:	f7e9 fd1c 	bl	80005dc <__aeabi_dmul>
 8016ba4:	4602      	mov	r2, r0
 8016ba6:	460b      	mov	r3, r1
 8016ba8:	4630      	mov	r0, r6
 8016baa:	4639      	mov	r1, r7
 8016bac:	f7e9 fd16 	bl	80005dc <__aeabi_dmul>
 8016bb0:	4642      	mov	r2, r8
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	460d      	mov	r5, r1
 8016bb6:	464b      	mov	r3, r9
 8016bb8:	ec51 0b18 	vmov	r0, r1, d8
 8016bbc:	f7e9 fb58 	bl	8000270 <__adddf3>
 8016bc0:	ec53 2b19 	vmov	r2, r3, d9
 8016bc4:	f7e9 fd0a 	bl	80005dc <__aeabi_dmul>
 8016bc8:	4622      	mov	r2, r4
 8016bca:	462b      	mov	r3, r5
 8016bcc:	f7e9 fb50 	bl	8000270 <__adddf3>
 8016bd0:	4642      	mov	r2, r8
 8016bd2:	4682      	mov	sl, r0
 8016bd4:	468b      	mov	fp, r1
 8016bd6:	464b      	mov	r3, r9
 8016bd8:	4640      	mov	r0, r8
 8016bda:	4649      	mov	r1, r9
 8016bdc:	f7e9 fcfe 	bl	80005dc <__aeabi_dmul>
 8016be0:	2200      	movs	r2, #0
 8016be2:	4b6b      	ldr	r3, [pc, #428]	; (8016d90 <__ieee754_pow+0x770>)
 8016be4:	4606      	mov	r6, r0
 8016be6:	460f      	mov	r7, r1
 8016be8:	f7e9 fb42 	bl	8000270 <__adddf3>
 8016bec:	4652      	mov	r2, sl
 8016bee:	465b      	mov	r3, fp
 8016bf0:	f7e9 fb3e 	bl	8000270 <__adddf3>
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	460d      	mov	r5, r1
 8016bf8:	460b      	mov	r3, r1
 8016bfa:	4604      	mov	r4, r0
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	4649      	mov	r1, r9
 8016c00:	4640      	mov	r0, r8
 8016c02:	f7e9 fceb 	bl	80005dc <__aeabi_dmul>
 8016c06:	2200      	movs	r2, #0
 8016c08:	4680      	mov	r8, r0
 8016c0a:	4689      	mov	r9, r1
 8016c0c:	4b60      	ldr	r3, [pc, #384]	; (8016d90 <__ieee754_pow+0x770>)
 8016c0e:	4620      	mov	r0, r4
 8016c10:	4629      	mov	r1, r5
 8016c12:	f7e9 fb2b 	bl	800026c <__aeabi_dsub>
 8016c16:	4632      	mov	r2, r6
 8016c18:	463b      	mov	r3, r7
 8016c1a:	f7e9 fb27 	bl	800026c <__aeabi_dsub>
 8016c1e:	4602      	mov	r2, r0
 8016c20:	460b      	mov	r3, r1
 8016c22:	4650      	mov	r0, sl
 8016c24:	4659      	mov	r1, fp
 8016c26:	f7e9 fb21 	bl	800026c <__aeabi_dsub>
 8016c2a:	ec53 2b18 	vmov	r2, r3, d8
 8016c2e:	f7e9 fcd5 	bl	80005dc <__aeabi_dmul>
 8016c32:	4606      	mov	r6, r0
 8016c34:	460f      	mov	r7, r1
 8016c36:	4622      	mov	r2, r4
 8016c38:	462b      	mov	r3, r5
 8016c3a:	ec51 0b19 	vmov	r0, r1, d9
 8016c3e:	f7e9 fccd 	bl	80005dc <__aeabi_dmul>
 8016c42:	4602      	mov	r2, r0
 8016c44:	460b      	mov	r3, r1
 8016c46:	4630      	mov	r0, r6
 8016c48:	4639      	mov	r1, r7
 8016c4a:	f7e9 fb11 	bl	8000270 <__adddf3>
 8016c4e:	4606      	mov	r6, r0
 8016c50:	460f      	mov	r7, r1
 8016c52:	4602      	mov	r2, r0
 8016c54:	460b      	mov	r3, r1
 8016c56:	4640      	mov	r0, r8
 8016c58:	4649      	mov	r1, r9
 8016c5a:	f7e9 fb09 	bl	8000270 <__adddf3>
 8016c5e:	2000      	movs	r0, #0
 8016c60:	460d      	mov	r5, r1
 8016c62:	4604      	mov	r4, r0
 8016c64:	a33c      	add	r3, pc, #240	; (adr r3, 8016d58 <__ieee754_pow+0x738>)
 8016c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c6a:	f7e9 fcb7 	bl	80005dc <__aeabi_dmul>
 8016c6e:	4642      	mov	r2, r8
 8016c70:	464b      	mov	r3, r9
 8016c72:	ec41 0b18 	vmov	d8, r0, r1
 8016c76:	4620      	mov	r0, r4
 8016c78:	4629      	mov	r1, r5
 8016c7a:	f7e9 faf7 	bl	800026c <__aeabi_dsub>
 8016c7e:	4602      	mov	r2, r0
 8016c80:	460b      	mov	r3, r1
 8016c82:	4630      	mov	r0, r6
 8016c84:	4639      	mov	r1, r7
 8016c86:	f7e9 faf1 	bl	800026c <__aeabi_dsub>
 8016c8a:	a335      	add	r3, pc, #212	; (adr r3, 8016d60 <__ieee754_pow+0x740>)
 8016c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c90:	f7e9 fca4 	bl	80005dc <__aeabi_dmul>
 8016c94:	4606      	mov	r6, r0
 8016c96:	460f      	mov	r7, r1
 8016c98:	4620      	mov	r0, r4
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	a332      	add	r3, pc, #200	; (adr r3, 8016d68 <__ieee754_pow+0x748>)
 8016c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca2:	f7e9 fc9b 	bl	80005dc <__aeabi_dmul>
 8016ca6:	4602      	mov	r2, r0
 8016ca8:	460b      	mov	r3, r1
 8016caa:	4630      	mov	r0, r6
 8016cac:	4639      	mov	r1, r7
 8016cae:	f7e9 fadf 	bl	8000270 <__adddf3>
 8016cb2:	9a07      	ldr	r2, [sp, #28]
 8016cb4:	4b37      	ldr	r3, [pc, #220]	; (8016d94 <__ieee754_pow+0x774>)
 8016cb6:	4413      	add	r3, r2
 8016cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cbc:	f7e9 fad8 	bl	8000270 <__adddf3>
 8016cc0:	4682      	mov	sl, r0
 8016cc2:	9805      	ldr	r0, [sp, #20]
 8016cc4:	468b      	mov	fp, r1
 8016cc6:	f7e9 fc1f 	bl	8000508 <__aeabi_i2d>
 8016cca:	9a07      	ldr	r2, [sp, #28]
 8016ccc:	4b32      	ldr	r3, [pc, #200]	; (8016d98 <__ieee754_pow+0x778>)
 8016cce:	4606      	mov	r6, r0
 8016cd0:	460f      	mov	r7, r1
 8016cd2:	4413      	add	r3, r2
 8016cd4:	4652      	mov	r2, sl
 8016cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016cda:	ec51 0b18 	vmov	r0, r1, d8
 8016cde:	465b      	mov	r3, fp
 8016ce0:	f7e9 fac6 	bl	8000270 <__adddf3>
 8016ce4:	4642      	mov	r2, r8
 8016ce6:	464b      	mov	r3, r9
 8016ce8:	f7e9 fac2 	bl	8000270 <__adddf3>
 8016cec:	4632      	mov	r2, r6
 8016cee:	463b      	mov	r3, r7
 8016cf0:	f7e9 fabe 	bl	8000270 <__adddf3>
 8016cf4:	2000      	movs	r0, #0
 8016cf6:	4632      	mov	r2, r6
 8016cf8:	463b      	mov	r3, r7
 8016cfa:	4604      	mov	r4, r0
 8016cfc:	460d      	mov	r5, r1
 8016cfe:	f7e9 fab5 	bl	800026c <__aeabi_dsub>
 8016d02:	4642      	mov	r2, r8
 8016d04:	464b      	mov	r3, r9
 8016d06:	f7e9 fab1 	bl	800026c <__aeabi_dsub>
 8016d0a:	ec53 2b18 	vmov	r2, r3, d8
 8016d0e:	f7e9 faad 	bl	800026c <__aeabi_dsub>
 8016d12:	4602      	mov	r2, r0
 8016d14:	460b      	mov	r3, r1
 8016d16:	4650      	mov	r0, sl
 8016d18:	4659      	mov	r1, fp
 8016d1a:	e610      	b.n	801693e <__ieee754_pow+0x31e>
 8016d1c:	2401      	movs	r4, #1
 8016d1e:	e6a1      	b.n	8016a64 <__ieee754_pow+0x444>
 8016d20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8016d70 <__ieee754_pow+0x750>
 8016d24:	e617      	b.n	8016956 <__ieee754_pow+0x336>
 8016d26:	bf00      	nop
 8016d28:	4a454eef 	.word	0x4a454eef
 8016d2c:	3fca7e28 	.word	0x3fca7e28
 8016d30:	93c9db65 	.word	0x93c9db65
 8016d34:	3fcd864a 	.word	0x3fcd864a
 8016d38:	a91d4101 	.word	0xa91d4101
 8016d3c:	3fd17460 	.word	0x3fd17460
 8016d40:	518f264d 	.word	0x518f264d
 8016d44:	3fd55555 	.word	0x3fd55555
 8016d48:	db6fabff 	.word	0xdb6fabff
 8016d4c:	3fdb6db6 	.word	0x3fdb6db6
 8016d50:	33333303 	.word	0x33333303
 8016d54:	3fe33333 	.word	0x3fe33333
 8016d58:	e0000000 	.word	0xe0000000
 8016d5c:	3feec709 	.word	0x3feec709
 8016d60:	dc3a03fd 	.word	0xdc3a03fd
 8016d64:	3feec709 	.word	0x3feec709
 8016d68:	145b01f5 	.word	0x145b01f5
 8016d6c:	be3e2fe0 	.word	0xbe3e2fe0
 8016d70:	00000000 	.word	0x00000000
 8016d74:	3ff00000 	.word	0x3ff00000
 8016d78:	7ff00000 	.word	0x7ff00000
 8016d7c:	43400000 	.word	0x43400000
 8016d80:	0003988e 	.word	0x0003988e
 8016d84:	000bb679 	.word	0x000bb679
 8016d88:	08018390 	.word	0x08018390
 8016d8c:	3ff00000 	.word	0x3ff00000
 8016d90:	40080000 	.word	0x40080000
 8016d94:	080183b0 	.word	0x080183b0
 8016d98:	080183a0 	.word	0x080183a0
 8016d9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8017074 <__ieee754_pow+0xa54>)
 8016d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016da2:	4640      	mov	r0, r8
 8016da4:	4649      	mov	r1, r9
 8016da6:	f7e9 fa63 	bl	8000270 <__adddf3>
 8016daa:	4622      	mov	r2, r4
 8016dac:	462b      	mov	r3, r5
 8016dae:	ec41 0b1a 	vmov	d10, r0, r1
 8016db2:	4630      	mov	r0, r6
 8016db4:	4639      	mov	r1, r7
 8016db6:	f7e9 fa59 	bl	800026c <__aeabi_dsub>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	460b      	mov	r3, r1
 8016dbe:	ec51 0b1a 	vmov	r0, r1, d10
 8016dc2:	f7e9 fe9b 	bl	8000afc <__aeabi_dcmpgt>
 8016dc6:	2800      	cmp	r0, #0
 8016dc8:	f47f ae04 	bne.w	80169d4 <__ieee754_pow+0x3b4>
 8016dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016dd0:	4aa3      	ldr	r2, [pc, #652]	; (8017060 <__ieee754_pow+0xa40>)
 8016dd2:	4293      	cmp	r3, r2
 8016dd4:	f340 8108 	ble.w	8016fe8 <__ieee754_pow+0x9c8>
 8016dd8:	151b      	asrs	r3, r3, #20
 8016dda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8016dde:	48a1      	ldr	r0, [pc, #644]	; (8017064 <__ieee754_pow+0xa44>)
 8016de0:	f1bb 0f00 	cmp.w	fp, #0
 8016de4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016de8:	f04f 0200 	mov.w	r2, #0
 8016dec:	fa4a fa03 	asr.w	sl, sl, r3
 8016df0:	44da      	add	sl, fp
 8016df2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016df6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8016dfa:	fa40 f001 	asr.w	r0, r0, r1
 8016dfe:	f1c1 0114 	rsb	r1, r1, #20
 8016e02:	ea00 030a 	and.w	r3, r0, sl
 8016e06:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016e10:	fa4a fa01 	asr.w	sl, sl, r1
 8016e14:	4629      	mov	r1, r5
 8016e16:	bfb8      	it	lt
 8016e18:	f1ca 0a00 	rsblt	sl, sl, #0
 8016e1c:	f7e9 fa26 	bl	800026c <__aeabi_dsub>
 8016e20:	ec41 0b19 	vmov	d9, r0, r1
 8016e24:	4642      	mov	r2, r8
 8016e26:	464b      	mov	r3, r9
 8016e28:	ec51 0b19 	vmov	r0, r1, d9
 8016e2c:	f7e9 fa20 	bl	8000270 <__adddf3>
 8016e30:	2000      	movs	r0, #0
 8016e32:	460d      	mov	r5, r1
 8016e34:	4604      	mov	r4, r0
 8016e36:	a37a      	add	r3, pc, #488	; (adr r3, 8017020 <__ieee754_pow+0xa00>)
 8016e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3c:	f7e9 fbce 	bl	80005dc <__aeabi_dmul>
 8016e40:	4606      	mov	r6, r0
 8016e42:	460f      	mov	r7, r1
 8016e44:	4620      	mov	r0, r4
 8016e46:	4629      	mov	r1, r5
 8016e48:	ec53 2b19 	vmov	r2, r3, d9
 8016e4c:	f7e9 fa0e 	bl	800026c <__aeabi_dsub>
 8016e50:	4602      	mov	r2, r0
 8016e52:	460b      	mov	r3, r1
 8016e54:	4640      	mov	r0, r8
 8016e56:	4649      	mov	r1, r9
 8016e58:	f7e9 fa08 	bl	800026c <__aeabi_dsub>
 8016e5c:	a372      	add	r3, pc, #456	; (adr r3, 8017028 <__ieee754_pow+0xa08>)
 8016e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e62:	f7e9 fbbb 	bl	80005dc <__aeabi_dmul>
 8016e66:	4680      	mov	r8, r0
 8016e68:	4689      	mov	r9, r1
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	4629      	mov	r1, r5
 8016e6e:	a370      	add	r3, pc, #448	; (adr r3, 8017030 <__ieee754_pow+0xa10>)
 8016e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e74:	f7e9 fbb2 	bl	80005dc <__aeabi_dmul>
 8016e78:	4602      	mov	r2, r0
 8016e7a:	460b      	mov	r3, r1
 8016e7c:	4640      	mov	r0, r8
 8016e7e:	4649      	mov	r1, r9
 8016e80:	f7e9 f9f6 	bl	8000270 <__adddf3>
 8016e84:	4604      	mov	r4, r0
 8016e86:	460d      	mov	r5, r1
 8016e88:	4602      	mov	r2, r0
 8016e8a:	460b      	mov	r3, r1
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	4639      	mov	r1, r7
 8016e90:	f7e9 f9ee 	bl	8000270 <__adddf3>
 8016e94:	4632      	mov	r2, r6
 8016e96:	4680      	mov	r8, r0
 8016e98:	4689      	mov	r9, r1
 8016e9a:	463b      	mov	r3, r7
 8016e9c:	f7e9 f9e6 	bl	800026c <__aeabi_dsub>
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	460b      	mov	r3, r1
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	4629      	mov	r1, r5
 8016ea8:	f7e9 f9e0 	bl	800026c <__aeabi_dsub>
 8016eac:	4642      	mov	r2, r8
 8016eae:	4606      	mov	r6, r0
 8016eb0:	460f      	mov	r7, r1
 8016eb2:	464b      	mov	r3, r9
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	4649      	mov	r1, r9
 8016eb8:	f7e9 fb90 	bl	80005dc <__aeabi_dmul>
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	460d      	mov	r5, r1
 8016ec0:	a35d      	add	r3, pc, #372	; (adr r3, 8017038 <__ieee754_pow+0xa18>)
 8016ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec6:	f7e9 fb89 	bl	80005dc <__aeabi_dmul>
 8016eca:	a35d      	add	r3, pc, #372	; (adr r3, 8017040 <__ieee754_pow+0xa20>)
 8016ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed0:	f7e9 f9cc 	bl	800026c <__aeabi_dsub>
 8016ed4:	4622      	mov	r2, r4
 8016ed6:	462b      	mov	r3, r5
 8016ed8:	f7e9 fb80 	bl	80005dc <__aeabi_dmul>
 8016edc:	a35a      	add	r3, pc, #360	; (adr r3, 8017048 <__ieee754_pow+0xa28>)
 8016ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ee2:	f7e9 f9c5 	bl	8000270 <__adddf3>
 8016ee6:	4622      	mov	r2, r4
 8016ee8:	462b      	mov	r3, r5
 8016eea:	f7e9 fb77 	bl	80005dc <__aeabi_dmul>
 8016eee:	a358      	add	r3, pc, #352	; (adr r3, 8017050 <__ieee754_pow+0xa30>)
 8016ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ef4:	f7e9 f9ba 	bl	800026c <__aeabi_dsub>
 8016ef8:	4622      	mov	r2, r4
 8016efa:	462b      	mov	r3, r5
 8016efc:	f7e9 fb6e 	bl	80005dc <__aeabi_dmul>
 8016f00:	a355      	add	r3, pc, #340	; (adr r3, 8017058 <__ieee754_pow+0xa38>)
 8016f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f06:	f7e9 f9b3 	bl	8000270 <__adddf3>
 8016f0a:	4622      	mov	r2, r4
 8016f0c:	462b      	mov	r3, r5
 8016f0e:	f7e9 fb65 	bl	80005dc <__aeabi_dmul>
 8016f12:	4602      	mov	r2, r0
 8016f14:	460b      	mov	r3, r1
 8016f16:	4640      	mov	r0, r8
 8016f18:	4649      	mov	r1, r9
 8016f1a:	f7e9 f9a7 	bl	800026c <__aeabi_dsub>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	460d      	mov	r5, r1
 8016f22:	4602      	mov	r2, r0
 8016f24:	460b      	mov	r3, r1
 8016f26:	4640      	mov	r0, r8
 8016f28:	4649      	mov	r1, r9
 8016f2a:	f7e9 fb57 	bl	80005dc <__aeabi_dmul>
 8016f2e:	2200      	movs	r2, #0
 8016f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f34:	ec41 0b19 	vmov	d9, r0, r1
 8016f38:	4620      	mov	r0, r4
 8016f3a:	4629      	mov	r1, r5
 8016f3c:	f7e9 f996 	bl	800026c <__aeabi_dsub>
 8016f40:	4602      	mov	r2, r0
 8016f42:	460b      	mov	r3, r1
 8016f44:	ec51 0b19 	vmov	r0, r1, d9
 8016f48:	f7e9 fc72 	bl	8000830 <__aeabi_ddiv>
 8016f4c:	4632      	mov	r2, r6
 8016f4e:	4604      	mov	r4, r0
 8016f50:	460d      	mov	r5, r1
 8016f52:	463b      	mov	r3, r7
 8016f54:	4640      	mov	r0, r8
 8016f56:	4649      	mov	r1, r9
 8016f58:	f7e9 fb40 	bl	80005dc <__aeabi_dmul>
 8016f5c:	4632      	mov	r2, r6
 8016f5e:	463b      	mov	r3, r7
 8016f60:	f7e9 f986 	bl	8000270 <__adddf3>
 8016f64:	4602      	mov	r2, r0
 8016f66:	460b      	mov	r3, r1
 8016f68:	4620      	mov	r0, r4
 8016f6a:	4629      	mov	r1, r5
 8016f6c:	f7e9 f97e 	bl	800026c <__aeabi_dsub>
 8016f70:	4642      	mov	r2, r8
 8016f72:	464b      	mov	r3, r9
 8016f74:	f7e9 f97a 	bl	800026c <__aeabi_dsub>
 8016f78:	460b      	mov	r3, r1
 8016f7a:	4602      	mov	r2, r0
 8016f7c:	493a      	ldr	r1, [pc, #232]	; (8017068 <__ieee754_pow+0xa48>)
 8016f7e:	2000      	movs	r0, #0
 8016f80:	f7e9 f974 	bl	800026c <__aeabi_dsub>
 8016f84:	ec41 0b10 	vmov	d0, r0, r1
 8016f88:	ee10 3a90 	vmov	r3, s1
 8016f8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016f94:	da2b      	bge.n	8016fee <__ieee754_pow+0x9ce>
 8016f96:	4650      	mov	r0, sl
 8016f98:	f000 f87a 	bl	8017090 <scalbn>
 8016f9c:	ec51 0b10 	vmov	r0, r1, d0
 8016fa0:	ec53 2b18 	vmov	r2, r3, d8
 8016fa4:	f7ff bbed 	b.w	8016782 <__ieee754_pow+0x162>
 8016fa8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016fac:	4b2f      	ldr	r3, [pc, #188]	; (801706c <__ieee754_pow+0xa4c>)
 8016fae:	429e      	cmp	r6, r3
 8016fb0:	f77f af0c 	ble.w	8016dcc <__ieee754_pow+0x7ac>
 8016fb4:	4b2e      	ldr	r3, [pc, #184]	; (8017070 <__ieee754_pow+0xa50>)
 8016fb6:	440b      	add	r3, r1
 8016fb8:	4303      	orrs	r3, r0
 8016fba:	d009      	beq.n	8016fd0 <__ieee754_pow+0x9b0>
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	ec51 0b18 	vmov	r0, r1, d8
 8016fc4:	f7e9 fd7c 	bl	8000ac0 <__aeabi_dcmplt>
 8016fc8:	3800      	subs	r0, #0
 8016fca:	bf18      	it	ne
 8016fcc:	2001      	movne	r0, #1
 8016fce:	e447      	b.n	8016860 <__ieee754_pow+0x240>
 8016fd0:	4622      	mov	r2, r4
 8016fd2:	462b      	mov	r3, r5
 8016fd4:	f7e9 f94a 	bl	800026c <__aeabi_dsub>
 8016fd8:	4642      	mov	r2, r8
 8016fda:	464b      	mov	r3, r9
 8016fdc:	f7e9 fd84 	bl	8000ae8 <__aeabi_dcmpge>
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	f43f aef3 	beq.w	8016dcc <__ieee754_pow+0x7ac>
 8016fe6:	e7e9      	b.n	8016fbc <__ieee754_pow+0x99c>
 8016fe8:	f04f 0a00 	mov.w	sl, #0
 8016fec:	e71a      	b.n	8016e24 <__ieee754_pow+0x804>
 8016fee:	ec51 0b10 	vmov	r0, r1, d0
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	e7d4      	b.n	8016fa0 <__ieee754_pow+0x980>
 8016ff6:	2000      	movs	r0, #0
 8016ff8:	491b      	ldr	r1, [pc, #108]	; (8017068 <__ieee754_pow+0xa48>)
 8016ffa:	f7ff bb30 	b.w	801665e <__ieee754_pow+0x3e>
 8016ffe:	2000      	movs	r0, #0
 8017000:	2100      	movs	r1, #0
 8017002:	f7ff bb2c 	b.w	801665e <__ieee754_pow+0x3e>
 8017006:	4630      	mov	r0, r6
 8017008:	4639      	mov	r1, r7
 801700a:	f7ff bb28 	b.w	801665e <__ieee754_pow+0x3e>
 801700e:	9204      	str	r2, [sp, #16]
 8017010:	f7ff bb7a 	b.w	8016708 <__ieee754_pow+0xe8>
 8017014:	2300      	movs	r3, #0
 8017016:	f7ff bb64 	b.w	80166e2 <__ieee754_pow+0xc2>
 801701a:	bf00      	nop
 801701c:	f3af 8000 	nop.w
 8017020:	00000000 	.word	0x00000000
 8017024:	3fe62e43 	.word	0x3fe62e43
 8017028:	fefa39ef 	.word	0xfefa39ef
 801702c:	3fe62e42 	.word	0x3fe62e42
 8017030:	0ca86c39 	.word	0x0ca86c39
 8017034:	be205c61 	.word	0xbe205c61
 8017038:	72bea4d0 	.word	0x72bea4d0
 801703c:	3e663769 	.word	0x3e663769
 8017040:	c5d26bf1 	.word	0xc5d26bf1
 8017044:	3ebbbd41 	.word	0x3ebbbd41
 8017048:	af25de2c 	.word	0xaf25de2c
 801704c:	3f11566a 	.word	0x3f11566a
 8017050:	16bebd93 	.word	0x16bebd93
 8017054:	3f66c16c 	.word	0x3f66c16c
 8017058:	5555553e 	.word	0x5555553e
 801705c:	3fc55555 	.word	0x3fc55555
 8017060:	3fe00000 	.word	0x3fe00000
 8017064:	fff00000 	.word	0xfff00000
 8017068:	3ff00000 	.word	0x3ff00000
 801706c:	4090cbff 	.word	0x4090cbff
 8017070:	3f6f3400 	.word	0x3f6f3400
 8017074:	652b82fe 	.word	0x652b82fe
 8017078:	3c971547 	.word	0x3c971547

0801707c <fabs>:
 801707c:	ec51 0b10 	vmov	r0, r1, d0
 8017080:	ee10 2a10 	vmov	r2, s0
 8017084:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017088:	ec43 2b10 	vmov	d0, r2, r3
 801708c:	4770      	bx	lr
	...

08017090 <scalbn>:
 8017090:	b570      	push	{r4, r5, r6, lr}
 8017092:	ec55 4b10 	vmov	r4, r5, d0
 8017096:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801709a:	4606      	mov	r6, r0
 801709c:	462b      	mov	r3, r5
 801709e:	b999      	cbnz	r1, 80170c8 <scalbn+0x38>
 80170a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80170a4:	4323      	orrs	r3, r4
 80170a6:	d03f      	beq.n	8017128 <scalbn+0x98>
 80170a8:	4b35      	ldr	r3, [pc, #212]	; (8017180 <scalbn+0xf0>)
 80170aa:	4629      	mov	r1, r5
 80170ac:	2200      	movs	r2, #0
 80170ae:	ee10 0a10 	vmov	r0, s0
 80170b2:	f7e9 fa93 	bl	80005dc <__aeabi_dmul>
 80170b6:	4b33      	ldr	r3, [pc, #204]	; (8017184 <scalbn+0xf4>)
 80170b8:	4604      	mov	r4, r0
 80170ba:	460d      	mov	r5, r1
 80170bc:	429e      	cmp	r6, r3
 80170be:	da10      	bge.n	80170e2 <scalbn+0x52>
 80170c0:	a327      	add	r3, pc, #156	; (adr r3, 8017160 <scalbn+0xd0>)
 80170c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c6:	e01f      	b.n	8017108 <scalbn+0x78>
 80170c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80170cc:	4291      	cmp	r1, r2
 80170ce:	d10c      	bne.n	80170ea <scalbn+0x5a>
 80170d0:	ee10 2a10 	vmov	r2, s0
 80170d4:	4620      	mov	r0, r4
 80170d6:	4629      	mov	r1, r5
 80170d8:	f7e9 f8ca 	bl	8000270 <__adddf3>
 80170dc:	4604      	mov	r4, r0
 80170de:	460d      	mov	r5, r1
 80170e0:	e022      	b.n	8017128 <scalbn+0x98>
 80170e2:	460b      	mov	r3, r1
 80170e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80170e8:	3936      	subs	r1, #54	; 0x36
 80170ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80170ee:	4296      	cmp	r6, r2
 80170f0:	dd0d      	ble.n	801710e <scalbn+0x7e>
 80170f2:	2d00      	cmp	r5, #0
 80170f4:	a11c      	add	r1, pc, #112	; (adr r1, 8017168 <scalbn+0xd8>)
 80170f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170fa:	da02      	bge.n	8017102 <scalbn+0x72>
 80170fc:	a11c      	add	r1, pc, #112	; (adr r1, 8017170 <scalbn+0xe0>)
 80170fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017102:	a319      	add	r3, pc, #100	; (adr r3, 8017168 <scalbn+0xd8>)
 8017104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017108:	f7e9 fa68 	bl	80005dc <__aeabi_dmul>
 801710c:	e7e6      	b.n	80170dc <scalbn+0x4c>
 801710e:	1872      	adds	r2, r6, r1
 8017110:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017114:	428a      	cmp	r2, r1
 8017116:	dcec      	bgt.n	80170f2 <scalbn+0x62>
 8017118:	2a00      	cmp	r2, #0
 801711a:	dd08      	ble.n	801712e <scalbn+0x9e>
 801711c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017120:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017124:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017128:	ec45 4b10 	vmov	d0, r4, r5
 801712c:	bd70      	pop	{r4, r5, r6, pc}
 801712e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017132:	da08      	bge.n	8017146 <scalbn+0xb6>
 8017134:	2d00      	cmp	r5, #0
 8017136:	a10a      	add	r1, pc, #40	; (adr r1, 8017160 <scalbn+0xd0>)
 8017138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801713c:	dac0      	bge.n	80170c0 <scalbn+0x30>
 801713e:	a10e      	add	r1, pc, #56	; (adr r1, 8017178 <scalbn+0xe8>)
 8017140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017144:	e7bc      	b.n	80170c0 <scalbn+0x30>
 8017146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801714a:	3236      	adds	r2, #54	; 0x36
 801714c:	4620      	mov	r0, r4
 801714e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017152:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017156:	2200      	movs	r2, #0
 8017158:	4b0b      	ldr	r3, [pc, #44]	; (8017188 <scalbn+0xf8>)
 801715a:	e7d5      	b.n	8017108 <scalbn+0x78>
 801715c:	f3af 8000 	nop.w
 8017160:	c2f8f359 	.word	0xc2f8f359
 8017164:	01a56e1f 	.word	0x01a56e1f
 8017168:	8800759c 	.word	0x8800759c
 801716c:	7e37e43c 	.word	0x7e37e43c
 8017170:	8800759c 	.word	0x8800759c
 8017174:	fe37e43c 	.word	0xfe37e43c
 8017178:	c2f8f359 	.word	0xc2f8f359
 801717c:	81a56e1f 	.word	0x81a56e1f
 8017180:	43500000 	.word	0x43500000
 8017184:	ffff3cb0 	.word	0xffff3cb0
 8017188:	3c900000 	.word	0x3c900000

0801718c <with_errno>:
 801718c:	b570      	push	{r4, r5, r6, lr}
 801718e:	4604      	mov	r4, r0
 8017190:	460d      	mov	r5, r1
 8017192:	4616      	mov	r6, r2
 8017194:	f000 fa72 	bl	801767c <__errno>
 8017198:	4629      	mov	r1, r5
 801719a:	6006      	str	r6, [r0, #0]
 801719c:	4620      	mov	r0, r4
 801719e:	bd70      	pop	{r4, r5, r6, pc}

080171a0 <xflow>:
 80171a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171a2:	4614      	mov	r4, r2
 80171a4:	461d      	mov	r5, r3
 80171a6:	b108      	cbz	r0, 80171ac <xflow+0xc>
 80171a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80171ac:	4620      	mov	r0, r4
 80171ae:	4629      	mov	r1, r5
 80171b0:	e9cd 2300 	strd	r2, r3, [sp]
 80171b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171b8:	f7e9 fa10 	bl	80005dc <__aeabi_dmul>
 80171bc:	2222      	movs	r2, #34	; 0x22
 80171be:	b003      	add	sp, #12
 80171c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171c4:	f7ff bfe2 	b.w	801718c <with_errno>

080171c8 <__math_uflow>:
 80171c8:	b508      	push	{r3, lr}
 80171ca:	2200      	movs	r2, #0
 80171cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80171d0:	f7ff ffe6 	bl	80171a0 <xflow>
 80171d4:	ec41 0b10 	vmov	d0, r0, r1
 80171d8:	bd08      	pop	{r3, pc}

080171da <__math_oflow>:
 80171da:	b508      	push	{r3, lr}
 80171dc:	2200      	movs	r2, #0
 80171de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80171e2:	f7ff ffdd 	bl	80171a0 <xflow>
 80171e6:	ec41 0b10 	vmov	d0, r0, r1
 80171ea:	bd08      	pop	{r3, pc}

080171ec <__ieee754_sqrt>:
 80171ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f0:	4e6b      	ldr	r6, [pc, #428]	; (80173a0 <__ieee754_sqrt+0x1b4>)
 80171f2:	ee10 0a10 	vmov	r0, s0
 80171f6:	ee10 2a10 	vmov	r2, s0
 80171fa:	ec55 4b10 	vmov	r4, r5, d0
 80171fe:	43ae      	bics	r6, r5
 8017200:	4629      	mov	r1, r5
 8017202:	462b      	mov	r3, r5
 8017204:	d10d      	bne.n	8017222 <__ieee754_sqrt+0x36>
 8017206:	f7e9 f9e9 	bl	80005dc <__aeabi_dmul>
 801720a:	4602      	mov	r2, r0
 801720c:	460b      	mov	r3, r1
 801720e:	4620      	mov	r0, r4
 8017210:	4629      	mov	r1, r5
 8017212:	f7e9 f82d 	bl	8000270 <__adddf3>
 8017216:	4604      	mov	r4, r0
 8017218:	460d      	mov	r5, r1
 801721a:	ec45 4b10 	vmov	d0, r4, r5
 801721e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017222:	2d00      	cmp	r5, #0
 8017224:	dc0b      	bgt.n	801723e <__ieee754_sqrt+0x52>
 8017226:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801722a:	4326      	orrs	r6, r4
 801722c:	d0f5      	beq.n	801721a <__ieee754_sqrt+0x2e>
 801722e:	b135      	cbz	r5, 801723e <__ieee754_sqrt+0x52>
 8017230:	f7e9 f81c 	bl	800026c <__aeabi_dsub>
 8017234:	4602      	mov	r2, r0
 8017236:	460b      	mov	r3, r1
 8017238:	f7e9 fafa 	bl	8000830 <__aeabi_ddiv>
 801723c:	e7eb      	b.n	8017216 <__ieee754_sqrt+0x2a>
 801723e:	1509      	asrs	r1, r1, #20
 8017240:	f000 8091 	beq.w	8017366 <__ieee754_sqrt+0x17a>
 8017244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017248:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801724c:	07c9      	lsls	r1, r1, #31
 801724e:	f04f 0500 	mov.w	r5, #0
 8017252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017256:	ea4f 0666 	mov.w	r6, r6, asr #1
 801725a:	f04f 0e16 	mov.w	lr, #22
 801725e:	46ac      	mov	ip, r5
 8017260:	bf58      	it	pl
 8017262:	005b      	lslpl	r3, r3, #1
 8017264:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017268:	bf5c      	itt	pl
 801726a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801726e:	0052      	lslpl	r2, r2, #1
 8017270:	005b      	lsls	r3, r3, #1
 8017272:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017276:	0052      	lsls	r2, r2, #1
 8017278:	eb0c 0001 	add.w	r0, ip, r1
 801727c:	4298      	cmp	r0, r3
 801727e:	bfde      	ittt	le
 8017280:	1a1b      	suble	r3, r3, r0
 8017282:	eb00 0c01 	addle.w	ip, r0, r1
 8017286:	186d      	addle	r5, r5, r1
 8017288:	f1be 0e01 	subs.w	lr, lr, #1
 801728c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017290:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017294:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8017298:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801729c:	d1ec      	bne.n	8017278 <__ieee754_sqrt+0x8c>
 801729e:	4674      	mov	r4, lr
 80172a0:	2720      	movs	r7, #32
 80172a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80172a6:	4563      	cmp	r3, ip
 80172a8:	eb01 000e 	add.w	r0, r1, lr
 80172ac:	dc02      	bgt.n	80172b4 <__ieee754_sqrt+0xc8>
 80172ae:	d114      	bne.n	80172da <__ieee754_sqrt+0xee>
 80172b0:	4290      	cmp	r0, r2
 80172b2:	d812      	bhi.n	80172da <__ieee754_sqrt+0xee>
 80172b4:	2800      	cmp	r0, #0
 80172b6:	eb00 0e01 	add.w	lr, r0, r1
 80172ba:	da59      	bge.n	8017370 <__ieee754_sqrt+0x184>
 80172bc:	f1be 0f00 	cmp.w	lr, #0
 80172c0:	db56      	blt.n	8017370 <__ieee754_sqrt+0x184>
 80172c2:	f10c 0801 	add.w	r8, ip, #1
 80172c6:	eba3 030c 	sub.w	r3, r3, ip
 80172ca:	4290      	cmp	r0, r2
 80172cc:	440c      	add	r4, r1
 80172ce:	eba2 0200 	sub.w	r2, r2, r0
 80172d2:	bf88      	it	hi
 80172d4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80172d8:	46c4      	mov	ip, r8
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	3f01      	subs	r7, #1
 80172de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80172e2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80172e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80172ea:	d1dc      	bne.n	80172a6 <__ieee754_sqrt+0xba>
 80172ec:	4313      	orrs	r3, r2
 80172ee:	d01b      	beq.n	8017328 <__ieee754_sqrt+0x13c>
 80172f0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80173a4 <__ieee754_sqrt+0x1b8>
 80172f4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80173a8 <__ieee754_sqrt+0x1bc>
 80172f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80172fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8017300:	e9da 8900 	ldrd	r8, r9, [sl]
 8017304:	f7e8 ffb2 	bl	800026c <__aeabi_dsub>
 8017308:	4602      	mov	r2, r0
 801730a:	460b      	mov	r3, r1
 801730c:	4640      	mov	r0, r8
 801730e:	4649      	mov	r1, r9
 8017310:	f7e9 fbe0 	bl	8000ad4 <__aeabi_dcmple>
 8017314:	b140      	cbz	r0, 8017328 <__ieee754_sqrt+0x13c>
 8017316:	f1b4 3fff 	cmp.w	r4, #4294967295
 801731a:	e9da 0100 	ldrd	r0, r1, [sl]
 801731e:	e9db 2300 	ldrd	r2, r3, [fp]
 8017322:	d127      	bne.n	8017374 <__ieee754_sqrt+0x188>
 8017324:	3501      	adds	r5, #1
 8017326:	463c      	mov	r4, r7
 8017328:	106a      	asrs	r2, r5, #1
 801732a:	07e9      	lsls	r1, r5, #31
 801732c:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8017330:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017334:	bf48      	it	mi
 8017336:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801733a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801733e:	461c      	mov	r4, r3
 8017340:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8017344:	e769      	b.n	801721a <__ieee754_sqrt+0x2e>
 8017346:	0ad3      	lsrs	r3, r2, #11
 8017348:	3815      	subs	r0, #21
 801734a:	0552      	lsls	r2, r2, #21
 801734c:	2b00      	cmp	r3, #0
 801734e:	d0fa      	beq.n	8017346 <__ieee754_sqrt+0x15a>
 8017350:	02dc      	lsls	r4, r3, #11
 8017352:	d50a      	bpl.n	801736a <__ieee754_sqrt+0x17e>
 8017354:	f1c1 0420 	rsb	r4, r1, #32
 8017358:	1e4d      	subs	r5, r1, #1
 801735a:	fa22 f404 	lsr.w	r4, r2, r4
 801735e:	408a      	lsls	r2, r1
 8017360:	1b41      	subs	r1, r0, r5
 8017362:	4323      	orrs	r3, r4
 8017364:	e76e      	b.n	8017244 <__ieee754_sqrt+0x58>
 8017366:	4608      	mov	r0, r1
 8017368:	e7f0      	b.n	801734c <__ieee754_sqrt+0x160>
 801736a:	005b      	lsls	r3, r3, #1
 801736c:	3101      	adds	r1, #1
 801736e:	e7ef      	b.n	8017350 <__ieee754_sqrt+0x164>
 8017370:	46e0      	mov	r8, ip
 8017372:	e7a8      	b.n	80172c6 <__ieee754_sqrt+0xda>
 8017374:	e9da 8900 	ldrd	r8, r9, [sl]
 8017378:	f7e8 ff7a 	bl	8000270 <__adddf3>
 801737c:	4602      	mov	r2, r0
 801737e:	460b      	mov	r3, r1
 8017380:	4640      	mov	r0, r8
 8017382:	4649      	mov	r1, r9
 8017384:	f7e9 fb9c 	bl	8000ac0 <__aeabi_dcmplt>
 8017388:	b128      	cbz	r0, 8017396 <__ieee754_sqrt+0x1aa>
 801738a:	1ca0      	adds	r0, r4, #2
 801738c:	f104 0402 	add.w	r4, r4, #2
 8017390:	bf08      	it	eq
 8017392:	3501      	addeq	r5, #1
 8017394:	e7c8      	b.n	8017328 <__ieee754_sqrt+0x13c>
 8017396:	3401      	adds	r4, #1
 8017398:	f024 0401 	bic.w	r4, r4, #1
 801739c:	e7c4      	b.n	8017328 <__ieee754_sqrt+0x13c>
 801739e:	bf00      	nop
 80173a0:	7ff00000 	.word	0x7ff00000
 80173a4:	20000068 	.word	0x20000068
 80173a8:	20000070 	.word	0x20000070

080173ac <abort>:
 80173ac:	2006      	movs	r0, #6
 80173ae:	b508      	push	{r3, lr}
 80173b0:	f000 f938 	bl	8017624 <raise>
 80173b4:	2001      	movs	r0, #1
 80173b6:	f7f2 faa3 	bl	8009900 <_exit>
	...

080173bc <malloc>:
 80173bc:	4b02      	ldr	r3, [pc, #8]	; (80173c8 <malloc+0xc>)
 80173be:	4601      	mov	r1, r0
 80173c0:	6818      	ldr	r0, [r3, #0]
 80173c2:	f000 b82b 	b.w	801741c <_malloc_r>
 80173c6:	bf00      	nop
 80173c8:	200000c4 	.word	0x200000c4

080173cc <free>:
 80173cc:	4b02      	ldr	r3, [pc, #8]	; (80173d8 <free+0xc>)
 80173ce:	4601      	mov	r1, r0
 80173d0:	6818      	ldr	r0, [r3, #0]
 80173d2:	f000 b98d 	b.w	80176f0 <_free_r>
 80173d6:	bf00      	nop
 80173d8:	200000c4 	.word	0x200000c4

080173dc <sbrk_aligned>:
 80173dc:	b570      	push	{r4, r5, r6, lr}
 80173de:	4e0e      	ldr	r6, [pc, #56]	; (8017418 <sbrk_aligned+0x3c>)
 80173e0:	460c      	mov	r4, r1
 80173e2:	4605      	mov	r5, r0
 80173e4:	6831      	ldr	r1, [r6, #0]
 80173e6:	b911      	cbnz	r1, 80173ee <sbrk_aligned+0x12>
 80173e8:	f000 f938 	bl	801765c <_sbrk_r>
 80173ec:	6030      	str	r0, [r6, #0]
 80173ee:	4621      	mov	r1, r4
 80173f0:	4628      	mov	r0, r5
 80173f2:	f000 f933 	bl	801765c <_sbrk_r>
 80173f6:	1c43      	adds	r3, r0, #1
 80173f8:	d00a      	beq.n	8017410 <sbrk_aligned+0x34>
 80173fa:	1cc4      	adds	r4, r0, #3
 80173fc:	f024 0403 	bic.w	r4, r4, #3
 8017400:	42a0      	cmp	r0, r4
 8017402:	d007      	beq.n	8017414 <sbrk_aligned+0x38>
 8017404:	1a21      	subs	r1, r4, r0
 8017406:	4628      	mov	r0, r5
 8017408:	f000 f928 	bl	801765c <_sbrk_r>
 801740c:	3001      	adds	r0, #1
 801740e:	d101      	bne.n	8017414 <sbrk_aligned+0x38>
 8017410:	f04f 34ff 	mov.w	r4, #4294967295
 8017414:	4620      	mov	r0, r4
 8017416:	bd70      	pop	{r4, r5, r6, pc}
 8017418:	2000388c 	.word	0x2000388c

0801741c <_malloc_r>:
 801741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017420:	1ccd      	adds	r5, r1, #3
 8017422:	4607      	mov	r7, r0
 8017424:	f025 0503 	bic.w	r5, r5, #3
 8017428:	3508      	adds	r5, #8
 801742a:	2d0c      	cmp	r5, #12
 801742c:	bf38      	it	cc
 801742e:	250c      	movcc	r5, #12
 8017430:	2d00      	cmp	r5, #0
 8017432:	db01      	blt.n	8017438 <_malloc_r+0x1c>
 8017434:	42a9      	cmp	r1, r5
 8017436:	d905      	bls.n	8017444 <_malloc_r+0x28>
 8017438:	230c      	movs	r3, #12
 801743a:	2600      	movs	r6, #0
 801743c:	603b      	str	r3, [r7, #0]
 801743e:	4630      	mov	r0, r6
 8017440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017444:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017518 <_malloc_r+0xfc>
 8017448:	f000 f868 	bl	801751c <__malloc_lock>
 801744c:	f8d8 3000 	ldr.w	r3, [r8]
 8017450:	461c      	mov	r4, r3
 8017452:	bb5c      	cbnz	r4, 80174ac <_malloc_r+0x90>
 8017454:	4629      	mov	r1, r5
 8017456:	4638      	mov	r0, r7
 8017458:	f7ff ffc0 	bl	80173dc <sbrk_aligned>
 801745c:	1c43      	adds	r3, r0, #1
 801745e:	4604      	mov	r4, r0
 8017460:	d155      	bne.n	801750e <_malloc_r+0xf2>
 8017462:	f8d8 4000 	ldr.w	r4, [r8]
 8017466:	4626      	mov	r6, r4
 8017468:	2e00      	cmp	r6, #0
 801746a:	d145      	bne.n	80174f8 <_malloc_r+0xdc>
 801746c:	2c00      	cmp	r4, #0
 801746e:	d048      	beq.n	8017502 <_malloc_r+0xe6>
 8017470:	6823      	ldr	r3, [r4, #0]
 8017472:	4631      	mov	r1, r6
 8017474:	4638      	mov	r0, r7
 8017476:	eb04 0903 	add.w	r9, r4, r3
 801747a:	f000 f8ef 	bl	801765c <_sbrk_r>
 801747e:	4581      	cmp	r9, r0
 8017480:	d13f      	bne.n	8017502 <_malloc_r+0xe6>
 8017482:	6821      	ldr	r1, [r4, #0]
 8017484:	4638      	mov	r0, r7
 8017486:	1a6d      	subs	r5, r5, r1
 8017488:	4629      	mov	r1, r5
 801748a:	f7ff ffa7 	bl	80173dc <sbrk_aligned>
 801748e:	3001      	adds	r0, #1
 8017490:	d037      	beq.n	8017502 <_malloc_r+0xe6>
 8017492:	6823      	ldr	r3, [r4, #0]
 8017494:	442b      	add	r3, r5
 8017496:	6023      	str	r3, [r4, #0]
 8017498:	f8d8 3000 	ldr.w	r3, [r8]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d038      	beq.n	8017512 <_malloc_r+0xf6>
 80174a0:	685a      	ldr	r2, [r3, #4]
 80174a2:	42a2      	cmp	r2, r4
 80174a4:	d12b      	bne.n	80174fe <_malloc_r+0xe2>
 80174a6:	2200      	movs	r2, #0
 80174a8:	605a      	str	r2, [r3, #4]
 80174aa:	e00f      	b.n	80174cc <_malloc_r+0xb0>
 80174ac:	6822      	ldr	r2, [r4, #0]
 80174ae:	1b52      	subs	r2, r2, r5
 80174b0:	d41f      	bmi.n	80174f2 <_malloc_r+0xd6>
 80174b2:	2a0b      	cmp	r2, #11
 80174b4:	d917      	bls.n	80174e6 <_malloc_r+0xca>
 80174b6:	1961      	adds	r1, r4, r5
 80174b8:	42a3      	cmp	r3, r4
 80174ba:	6025      	str	r5, [r4, #0]
 80174bc:	bf18      	it	ne
 80174be:	6059      	strne	r1, [r3, #4]
 80174c0:	6863      	ldr	r3, [r4, #4]
 80174c2:	bf08      	it	eq
 80174c4:	f8c8 1000 	streq.w	r1, [r8]
 80174c8:	5162      	str	r2, [r4, r5]
 80174ca:	604b      	str	r3, [r1, #4]
 80174cc:	f104 060b 	add.w	r6, r4, #11
 80174d0:	4638      	mov	r0, r7
 80174d2:	f000 f829 	bl	8017528 <__malloc_unlock>
 80174d6:	1d23      	adds	r3, r4, #4
 80174d8:	f026 0607 	bic.w	r6, r6, #7
 80174dc:	1af2      	subs	r2, r6, r3
 80174de:	d0ae      	beq.n	801743e <_malloc_r+0x22>
 80174e0:	1b9b      	subs	r3, r3, r6
 80174e2:	50a3      	str	r3, [r4, r2]
 80174e4:	e7ab      	b.n	801743e <_malloc_r+0x22>
 80174e6:	42a3      	cmp	r3, r4
 80174e8:	6862      	ldr	r2, [r4, #4]
 80174ea:	d1dd      	bne.n	80174a8 <_malloc_r+0x8c>
 80174ec:	f8c8 2000 	str.w	r2, [r8]
 80174f0:	e7ec      	b.n	80174cc <_malloc_r+0xb0>
 80174f2:	4623      	mov	r3, r4
 80174f4:	6864      	ldr	r4, [r4, #4]
 80174f6:	e7ac      	b.n	8017452 <_malloc_r+0x36>
 80174f8:	4634      	mov	r4, r6
 80174fa:	6876      	ldr	r6, [r6, #4]
 80174fc:	e7b4      	b.n	8017468 <_malloc_r+0x4c>
 80174fe:	4613      	mov	r3, r2
 8017500:	e7cc      	b.n	801749c <_malloc_r+0x80>
 8017502:	230c      	movs	r3, #12
 8017504:	4638      	mov	r0, r7
 8017506:	603b      	str	r3, [r7, #0]
 8017508:	f000 f80e 	bl	8017528 <__malloc_unlock>
 801750c:	e797      	b.n	801743e <_malloc_r+0x22>
 801750e:	6025      	str	r5, [r4, #0]
 8017510:	e7dc      	b.n	80174cc <_malloc_r+0xb0>
 8017512:	605b      	str	r3, [r3, #4]
 8017514:	deff      	udf	#255	; 0xff
 8017516:	bf00      	nop
 8017518:	20003888 	.word	0x20003888

0801751c <__malloc_lock>:
 801751c:	4801      	ldr	r0, [pc, #4]	; (8017524 <__malloc_lock+0x8>)
 801751e:	f000 b8d7 	b.w	80176d0 <__retarget_lock_acquire_recursive>
 8017522:	bf00      	nop
 8017524:	200039cc 	.word	0x200039cc

08017528 <__malloc_unlock>:
 8017528:	4801      	ldr	r0, [pc, #4]	; (8017530 <__malloc_unlock+0x8>)
 801752a:	f000 b8d2 	b.w	80176d2 <__retarget_lock_release_recursive>
 801752e:	bf00      	nop
 8017530:	200039cc 	.word	0x200039cc

08017534 <siscanf>:
 8017534:	b40e      	push	{r1, r2, r3}
 8017536:	b510      	push	{r4, lr}
 8017538:	b09f      	sub	sp, #124	; 0x7c
 801753a:	f44f 7101 	mov.w	r1, #516	; 0x204
 801753e:	ac21      	add	r4, sp, #132	; 0x84
 8017540:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017544:	9004      	str	r0, [sp, #16]
 8017546:	f854 2b04 	ldr.w	r2, [r4], #4
 801754a:	9008      	str	r0, [sp, #32]
 801754c:	9201      	str	r2, [sp, #4]
 801754e:	f7e8 fe81 	bl	8000254 <strlen>
 8017552:	4b0c      	ldr	r3, [pc, #48]	; (8017584 <siscanf+0x50>)
 8017554:	a904      	add	r1, sp, #16
 8017556:	9005      	str	r0, [sp, #20]
 8017558:	930d      	str	r3, [sp, #52]	; 0x34
 801755a:	2300      	movs	r3, #0
 801755c:	9009      	str	r0, [sp, #36]	; 0x24
 801755e:	9311      	str	r3, [sp, #68]	; 0x44
 8017560:	9316      	str	r3, [sp, #88]	; 0x58
 8017562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017566:	4808      	ldr	r0, [pc, #32]	; (8017588 <siscanf+0x54>)
 8017568:	f8ad 301e 	strh.w	r3, [sp, #30]
 801756c:	4623      	mov	r3, r4
 801756e:	9a01      	ldr	r2, [sp, #4]
 8017570:	6800      	ldr	r0, [r0, #0]
 8017572:	9403      	str	r4, [sp, #12]
 8017574:	f000 f962 	bl	801783c <__ssvfiscanf_r>
 8017578:	b01f      	add	sp, #124	; 0x7c
 801757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801757e:	b003      	add	sp, #12
 8017580:	4770      	bx	lr
 8017582:	bf00      	nop
 8017584:	0801758d 	.word	0x0801758d
 8017588:	200000c4 	.word	0x200000c4

0801758c <__seofread>:
 801758c:	2000      	movs	r0, #0
 801758e:	4770      	bx	lr

08017590 <memmove>:
 8017590:	4288      	cmp	r0, r1
 8017592:	b510      	push	{r4, lr}
 8017594:	eb01 0402 	add.w	r4, r1, r2
 8017598:	d902      	bls.n	80175a0 <memmove+0x10>
 801759a:	4284      	cmp	r4, r0
 801759c:	4623      	mov	r3, r4
 801759e:	d807      	bhi.n	80175b0 <memmove+0x20>
 80175a0:	1e43      	subs	r3, r0, #1
 80175a2:	42a1      	cmp	r1, r4
 80175a4:	d008      	beq.n	80175b8 <memmove+0x28>
 80175a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80175ae:	e7f8      	b.n	80175a2 <memmove+0x12>
 80175b0:	4402      	add	r2, r0
 80175b2:	4601      	mov	r1, r0
 80175b4:	428a      	cmp	r2, r1
 80175b6:	d100      	bne.n	80175ba <memmove+0x2a>
 80175b8:	bd10      	pop	{r4, pc}
 80175ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80175be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80175c2:	e7f7      	b.n	80175b4 <memmove+0x24>

080175c4 <memset>:
 80175c4:	4402      	add	r2, r0
 80175c6:	4603      	mov	r3, r0
 80175c8:	4293      	cmp	r3, r2
 80175ca:	d100      	bne.n	80175ce <memset+0xa>
 80175cc:	4770      	bx	lr
 80175ce:	f803 1b01 	strb.w	r1, [r3], #1
 80175d2:	e7f9      	b.n	80175c8 <memset+0x4>

080175d4 <_raise_r>:
 80175d4:	291f      	cmp	r1, #31
 80175d6:	b538      	push	{r3, r4, r5, lr}
 80175d8:	4604      	mov	r4, r0
 80175da:	460d      	mov	r5, r1
 80175dc:	d904      	bls.n	80175e8 <_raise_r+0x14>
 80175de:	2316      	movs	r3, #22
 80175e0:	6003      	str	r3, [r0, #0]
 80175e2:	f04f 30ff 	mov.w	r0, #4294967295
 80175e6:	bd38      	pop	{r3, r4, r5, pc}
 80175e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80175ea:	b112      	cbz	r2, 80175f2 <_raise_r+0x1e>
 80175ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175f0:	b94b      	cbnz	r3, 8017606 <_raise_r+0x32>
 80175f2:	4620      	mov	r0, r4
 80175f4:	f000 f830 	bl	8017658 <_getpid_r>
 80175f8:	462a      	mov	r2, r5
 80175fa:	4601      	mov	r1, r0
 80175fc:	4620      	mov	r0, r4
 80175fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017602:	f000 b817 	b.w	8017634 <_kill_r>
 8017606:	2b01      	cmp	r3, #1
 8017608:	d00a      	beq.n	8017620 <_raise_r+0x4c>
 801760a:	1c59      	adds	r1, r3, #1
 801760c:	d103      	bne.n	8017616 <_raise_r+0x42>
 801760e:	2316      	movs	r3, #22
 8017610:	6003      	str	r3, [r0, #0]
 8017612:	2001      	movs	r0, #1
 8017614:	e7e7      	b.n	80175e6 <_raise_r+0x12>
 8017616:	2400      	movs	r4, #0
 8017618:	4628      	mov	r0, r5
 801761a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801761e:	4798      	blx	r3
 8017620:	2000      	movs	r0, #0
 8017622:	e7e0      	b.n	80175e6 <_raise_r+0x12>

08017624 <raise>:
 8017624:	4b02      	ldr	r3, [pc, #8]	; (8017630 <raise+0xc>)
 8017626:	4601      	mov	r1, r0
 8017628:	6818      	ldr	r0, [r3, #0]
 801762a:	f7ff bfd3 	b.w	80175d4 <_raise_r>
 801762e:	bf00      	nop
 8017630:	200000c4 	.word	0x200000c4

08017634 <_kill_r>:
 8017634:	b538      	push	{r3, r4, r5, lr}
 8017636:	2300      	movs	r3, #0
 8017638:	4d06      	ldr	r5, [pc, #24]	; (8017654 <_kill_r+0x20>)
 801763a:	4604      	mov	r4, r0
 801763c:	4608      	mov	r0, r1
 801763e:	4611      	mov	r1, r2
 8017640:	602b      	str	r3, [r5, #0]
 8017642:	f7f2 f94d 	bl	80098e0 <_kill>
 8017646:	1c43      	adds	r3, r0, #1
 8017648:	d102      	bne.n	8017650 <_kill_r+0x1c>
 801764a:	682b      	ldr	r3, [r5, #0]
 801764c:	b103      	cbz	r3, 8017650 <_kill_r+0x1c>
 801764e:	6023      	str	r3, [r4, #0]
 8017650:	bd38      	pop	{r3, r4, r5, pc}
 8017652:	bf00      	nop
 8017654:	200039c8 	.word	0x200039c8

08017658 <_getpid_r>:
 8017658:	f7f2 b93a 	b.w	80098d0 <_getpid>

0801765c <_sbrk_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	2300      	movs	r3, #0
 8017660:	4d05      	ldr	r5, [pc, #20]	; (8017678 <_sbrk_r+0x1c>)
 8017662:	4604      	mov	r4, r0
 8017664:	4608      	mov	r0, r1
 8017666:	602b      	str	r3, [r5, #0]
 8017668:	f7f2 f954 	bl	8009914 <_sbrk>
 801766c:	1c43      	adds	r3, r0, #1
 801766e:	d102      	bne.n	8017676 <_sbrk_r+0x1a>
 8017670:	682b      	ldr	r3, [r5, #0]
 8017672:	b103      	cbz	r3, 8017676 <_sbrk_r+0x1a>
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	200039c8 	.word	0x200039c8

0801767c <__errno>:
 801767c:	4b01      	ldr	r3, [pc, #4]	; (8017684 <__errno+0x8>)
 801767e:	6818      	ldr	r0, [r3, #0]
 8017680:	4770      	bx	lr
 8017682:	bf00      	nop
 8017684:	200000c4 	.word	0x200000c4

08017688 <__libc_init_array>:
 8017688:	b570      	push	{r4, r5, r6, lr}
 801768a:	4d0d      	ldr	r5, [pc, #52]	; (80176c0 <__libc_init_array+0x38>)
 801768c:	2600      	movs	r6, #0
 801768e:	4c0d      	ldr	r4, [pc, #52]	; (80176c4 <__libc_init_array+0x3c>)
 8017690:	1b64      	subs	r4, r4, r5
 8017692:	10a4      	asrs	r4, r4, #2
 8017694:	42a6      	cmp	r6, r4
 8017696:	d109      	bne.n	80176ac <__libc_init_array+0x24>
 8017698:	4d0b      	ldr	r5, [pc, #44]	; (80176c8 <__libc_init_array+0x40>)
 801769a:	2600      	movs	r6, #0
 801769c:	4c0b      	ldr	r4, [pc, #44]	; (80176cc <__libc_init_array+0x44>)
 801769e:	f000 fd3f 	bl	8018120 <_init>
 80176a2:	1b64      	subs	r4, r4, r5
 80176a4:	10a4      	asrs	r4, r4, #2
 80176a6:	42a6      	cmp	r6, r4
 80176a8:	d105      	bne.n	80176b6 <__libc_init_array+0x2e>
 80176aa:	bd70      	pop	{r4, r5, r6, pc}
 80176ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80176b0:	3601      	adds	r6, #1
 80176b2:	4798      	blx	r3
 80176b4:	e7ee      	b.n	8017694 <__libc_init_array+0xc>
 80176b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80176ba:	3601      	adds	r6, #1
 80176bc:	4798      	blx	r3
 80176be:	e7f2      	b.n	80176a6 <__libc_init_array+0x1e>
 80176c0:	080184e8 	.word	0x080184e8
 80176c4:	080184e8 	.word	0x080184e8
 80176c8:	080184e8 	.word	0x080184e8
 80176cc:	080184ec 	.word	0x080184ec

080176d0 <__retarget_lock_acquire_recursive>:
 80176d0:	4770      	bx	lr

080176d2 <__retarget_lock_release_recursive>:
 80176d2:	4770      	bx	lr

080176d4 <memcpy>:
 80176d4:	440a      	add	r2, r1
 80176d6:	1e43      	subs	r3, r0, #1
 80176d8:	4291      	cmp	r1, r2
 80176da:	d100      	bne.n	80176de <memcpy+0xa>
 80176dc:	4770      	bx	lr
 80176de:	b510      	push	{r4, lr}
 80176e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176e4:	4291      	cmp	r1, r2
 80176e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80176ea:	d1f9      	bne.n	80176e0 <memcpy+0xc>
 80176ec:	bd10      	pop	{r4, pc}
	...

080176f0 <_free_r>:
 80176f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176f2:	2900      	cmp	r1, #0
 80176f4:	d043      	beq.n	801777e <_free_r+0x8e>
 80176f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176fa:	1f0c      	subs	r4, r1, #4
 80176fc:	9001      	str	r0, [sp, #4]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	bfb8      	it	lt
 8017702:	18e4      	addlt	r4, r4, r3
 8017704:	f7ff ff0a 	bl	801751c <__malloc_lock>
 8017708:	4a1e      	ldr	r2, [pc, #120]	; (8017784 <_free_r+0x94>)
 801770a:	9801      	ldr	r0, [sp, #4]
 801770c:	6813      	ldr	r3, [r2, #0]
 801770e:	b933      	cbnz	r3, 801771e <_free_r+0x2e>
 8017710:	6063      	str	r3, [r4, #4]
 8017712:	6014      	str	r4, [r2, #0]
 8017714:	b003      	add	sp, #12
 8017716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801771a:	f7ff bf05 	b.w	8017528 <__malloc_unlock>
 801771e:	42a3      	cmp	r3, r4
 8017720:	d908      	bls.n	8017734 <_free_r+0x44>
 8017722:	6825      	ldr	r5, [r4, #0]
 8017724:	1961      	adds	r1, r4, r5
 8017726:	428b      	cmp	r3, r1
 8017728:	bf01      	itttt	eq
 801772a:	6819      	ldreq	r1, [r3, #0]
 801772c:	685b      	ldreq	r3, [r3, #4]
 801772e:	1949      	addeq	r1, r1, r5
 8017730:	6021      	streq	r1, [r4, #0]
 8017732:	e7ed      	b.n	8017710 <_free_r+0x20>
 8017734:	461a      	mov	r2, r3
 8017736:	685b      	ldr	r3, [r3, #4]
 8017738:	b10b      	cbz	r3, 801773e <_free_r+0x4e>
 801773a:	42a3      	cmp	r3, r4
 801773c:	d9fa      	bls.n	8017734 <_free_r+0x44>
 801773e:	6811      	ldr	r1, [r2, #0]
 8017740:	1855      	adds	r5, r2, r1
 8017742:	42a5      	cmp	r5, r4
 8017744:	d10b      	bne.n	801775e <_free_r+0x6e>
 8017746:	6824      	ldr	r4, [r4, #0]
 8017748:	4421      	add	r1, r4
 801774a:	1854      	adds	r4, r2, r1
 801774c:	6011      	str	r1, [r2, #0]
 801774e:	42a3      	cmp	r3, r4
 8017750:	d1e0      	bne.n	8017714 <_free_r+0x24>
 8017752:	681c      	ldr	r4, [r3, #0]
 8017754:	685b      	ldr	r3, [r3, #4]
 8017756:	440c      	add	r4, r1
 8017758:	6053      	str	r3, [r2, #4]
 801775a:	6014      	str	r4, [r2, #0]
 801775c:	e7da      	b.n	8017714 <_free_r+0x24>
 801775e:	d902      	bls.n	8017766 <_free_r+0x76>
 8017760:	230c      	movs	r3, #12
 8017762:	6003      	str	r3, [r0, #0]
 8017764:	e7d6      	b.n	8017714 <_free_r+0x24>
 8017766:	6825      	ldr	r5, [r4, #0]
 8017768:	1961      	adds	r1, r4, r5
 801776a:	428b      	cmp	r3, r1
 801776c:	bf02      	ittt	eq
 801776e:	6819      	ldreq	r1, [r3, #0]
 8017770:	685b      	ldreq	r3, [r3, #4]
 8017772:	1949      	addeq	r1, r1, r5
 8017774:	6063      	str	r3, [r4, #4]
 8017776:	bf08      	it	eq
 8017778:	6021      	streq	r1, [r4, #0]
 801777a:	6054      	str	r4, [r2, #4]
 801777c:	e7ca      	b.n	8017714 <_free_r+0x24>
 801777e:	b003      	add	sp, #12
 8017780:	bd30      	pop	{r4, r5, pc}
 8017782:	bf00      	nop
 8017784:	20003888 	.word	0x20003888

08017788 <_sungetc_r>:
 8017788:	b538      	push	{r3, r4, r5, lr}
 801778a:	1c4b      	adds	r3, r1, #1
 801778c:	4614      	mov	r4, r2
 801778e:	d103      	bne.n	8017798 <_sungetc_r+0x10>
 8017790:	f04f 35ff 	mov.w	r5, #4294967295
 8017794:	4628      	mov	r0, r5
 8017796:	bd38      	pop	{r3, r4, r5, pc}
 8017798:	8993      	ldrh	r3, [r2, #12]
 801779a:	b2cd      	uxtb	r5, r1
 801779c:	f023 0320 	bic.w	r3, r3, #32
 80177a0:	8193      	strh	r3, [r2, #12]
 80177a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177a4:	6852      	ldr	r2, [r2, #4]
 80177a6:	b18b      	cbz	r3, 80177cc <_sungetc_r+0x44>
 80177a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80177aa:	4293      	cmp	r3, r2
 80177ac:	dd08      	ble.n	80177c0 <_sungetc_r+0x38>
 80177ae:	6823      	ldr	r3, [r4, #0]
 80177b0:	1e5a      	subs	r2, r3, #1
 80177b2:	6022      	str	r2, [r4, #0]
 80177b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80177b8:	6863      	ldr	r3, [r4, #4]
 80177ba:	3301      	adds	r3, #1
 80177bc:	6063      	str	r3, [r4, #4]
 80177be:	e7e9      	b.n	8017794 <_sungetc_r+0xc>
 80177c0:	4621      	mov	r1, r4
 80177c2:	f000 fb38 	bl	8017e36 <__submore>
 80177c6:	2800      	cmp	r0, #0
 80177c8:	d0f1      	beq.n	80177ae <_sungetc_r+0x26>
 80177ca:	e7e1      	b.n	8017790 <_sungetc_r+0x8>
 80177cc:	6921      	ldr	r1, [r4, #16]
 80177ce:	6823      	ldr	r3, [r4, #0]
 80177d0:	b151      	cbz	r1, 80177e8 <_sungetc_r+0x60>
 80177d2:	4299      	cmp	r1, r3
 80177d4:	d208      	bcs.n	80177e8 <_sungetc_r+0x60>
 80177d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80177da:	42a9      	cmp	r1, r5
 80177dc:	d104      	bne.n	80177e8 <_sungetc_r+0x60>
 80177de:	3b01      	subs	r3, #1
 80177e0:	3201      	adds	r2, #1
 80177e2:	6023      	str	r3, [r4, #0]
 80177e4:	6062      	str	r2, [r4, #4]
 80177e6:	e7d5      	b.n	8017794 <_sungetc_r+0xc>
 80177e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80177ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177f0:	6363      	str	r3, [r4, #52]	; 0x34
 80177f2:	2303      	movs	r3, #3
 80177f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80177f6:	4623      	mov	r3, r4
 80177f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80177fc:	6023      	str	r3, [r4, #0]
 80177fe:	2301      	movs	r3, #1
 8017800:	e7dc      	b.n	80177bc <_sungetc_r+0x34>

08017802 <__ssrefill_r>:
 8017802:	b510      	push	{r4, lr}
 8017804:	460c      	mov	r4, r1
 8017806:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017808:	b169      	cbz	r1, 8017826 <__ssrefill_r+0x24>
 801780a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801780e:	4299      	cmp	r1, r3
 8017810:	d001      	beq.n	8017816 <__ssrefill_r+0x14>
 8017812:	f7ff ff6d 	bl	80176f0 <_free_r>
 8017816:	2000      	movs	r0, #0
 8017818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801781a:	6360      	str	r0, [r4, #52]	; 0x34
 801781c:	6063      	str	r3, [r4, #4]
 801781e:	b113      	cbz	r3, 8017826 <__ssrefill_r+0x24>
 8017820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017822:	6023      	str	r3, [r4, #0]
 8017824:	bd10      	pop	{r4, pc}
 8017826:	6923      	ldr	r3, [r4, #16]
 8017828:	f04f 30ff 	mov.w	r0, #4294967295
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	2300      	movs	r3, #0
 8017830:	6063      	str	r3, [r4, #4]
 8017832:	89a3      	ldrh	r3, [r4, #12]
 8017834:	f043 0320 	orr.w	r3, r3, #32
 8017838:	81a3      	strh	r3, [r4, #12]
 801783a:	e7f3      	b.n	8017824 <__ssrefill_r+0x22>

0801783c <__ssvfiscanf_r>:
 801783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017840:	460c      	mov	r4, r1
 8017842:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017846:	2100      	movs	r1, #0
 8017848:	4606      	mov	r6, r0
 801784a:	f10d 0804 	add.w	r8, sp, #4
 801784e:	4fa6      	ldr	r7, [pc, #664]	; (8017ae8 <__ssvfiscanf_r+0x2ac>)
 8017850:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8017af4 <__ssvfiscanf_r+0x2b8>
 8017854:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017858:	9300      	str	r3, [sp, #0]
 801785a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801785e:	49a3      	ldr	r1, [pc, #652]	; (8017aec <__ssvfiscanf_r+0x2b0>)
 8017860:	91a0      	str	r1, [sp, #640]	; 0x280
 8017862:	49a3      	ldr	r1, [pc, #652]	; (8017af0 <__ssvfiscanf_r+0x2b4>)
 8017864:	91a1      	str	r1, [sp, #644]	; 0x284
 8017866:	7813      	ldrb	r3, [r2, #0]
 8017868:	2b00      	cmp	r3, #0
 801786a:	f000 815a 	beq.w	8017b22 <__ssvfiscanf_r+0x2e6>
 801786e:	5cf9      	ldrb	r1, [r7, r3]
 8017870:	1c55      	adds	r5, r2, #1
 8017872:	f011 0108 	ands.w	r1, r1, #8
 8017876:	d019      	beq.n	80178ac <__ssvfiscanf_r+0x70>
 8017878:	6863      	ldr	r3, [r4, #4]
 801787a:	2b00      	cmp	r3, #0
 801787c:	dd0f      	ble.n	801789e <__ssvfiscanf_r+0x62>
 801787e:	6823      	ldr	r3, [r4, #0]
 8017880:	781a      	ldrb	r2, [r3, #0]
 8017882:	5cba      	ldrb	r2, [r7, r2]
 8017884:	0712      	lsls	r2, r2, #28
 8017886:	d401      	bmi.n	801788c <__ssvfiscanf_r+0x50>
 8017888:	462a      	mov	r2, r5
 801788a:	e7ec      	b.n	8017866 <__ssvfiscanf_r+0x2a>
 801788c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801788e:	3301      	adds	r3, #1
 8017890:	3201      	adds	r2, #1
 8017892:	6023      	str	r3, [r4, #0]
 8017894:	9245      	str	r2, [sp, #276]	; 0x114
 8017896:	6862      	ldr	r2, [r4, #4]
 8017898:	3a01      	subs	r2, #1
 801789a:	6062      	str	r2, [r4, #4]
 801789c:	e7ec      	b.n	8017878 <__ssvfiscanf_r+0x3c>
 801789e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178a0:	4621      	mov	r1, r4
 80178a2:	4630      	mov	r0, r6
 80178a4:	4798      	blx	r3
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d0e9      	beq.n	801787e <__ssvfiscanf_r+0x42>
 80178aa:	e7ed      	b.n	8017888 <__ssvfiscanf_r+0x4c>
 80178ac:	2b25      	cmp	r3, #37	; 0x25
 80178ae:	d012      	beq.n	80178d6 <__ssvfiscanf_r+0x9a>
 80178b0:	469a      	mov	sl, r3
 80178b2:	6863      	ldr	r3, [r4, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f340 8092 	ble.w	80179de <__ssvfiscanf_r+0x1a2>
 80178ba:	6822      	ldr	r2, [r4, #0]
 80178bc:	7813      	ldrb	r3, [r2, #0]
 80178be:	4553      	cmp	r3, sl
 80178c0:	f040 812f 	bne.w	8017b22 <__ssvfiscanf_r+0x2e6>
 80178c4:	6863      	ldr	r3, [r4, #4]
 80178c6:	3201      	adds	r2, #1
 80178c8:	3b01      	subs	r3, #1
 80178ca:	6022      	str	r2, [r4, #0]
 80178cc:	6063      	str	r3, [r4, #4]
 80178ce:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80178d0:	3301      	adds	r3, #1
 80178d2:	9345      	str	r3, [sp, #276]	; 0x114
 80178d4:	e7d8      	b.n	8017888 <__ssvfiscanf_r+0x4c>
 80178d6:	9141      	str	r1, [sp, #260]	; 0x104
 80178d8:	9143      	str	r1, [sp, #268]	; 0x10c
 80178da:	7853      	ldrb	r3, [r2, #1]
 80178dc:	2b2a      	cmp	r3, #42	; 0x2a
 80178de:	bf04      	itt	eq
 80178e0:	2310      	moveq	r3, #16
 80178e2:	1c95      	addeq	r5, r2, #2
 80178e4:	f04f 020a 	mov.w	r2, #10
 80178e8:	bf08      	it	eq
 80178ea:	9341      	streq	r3, [sp, #260]	; 0x104
 80178ec:	46aa      	mov	sl, r5
 80178ee:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80178f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80178f6:	2b09      	cmp	r3, #9
 80178f8:	d91c      	bls.n	8017934 <__ssvfiscanf_r+0xf8>
 80178fa:	2203      	movs	r2, #3
 80178fc:	487d      	ldr	r0, [pc, #500]	; (8017af4 <__ssvfiscanf_r+0x2b8>)
 80178fe:	f000 fad1 	bl	8017ea4 <memchr>
 8017902:	b138      	cbz	r0, 8017914 <__ssvfiscanf_r+0xd8>
 8017904:	eba0 0009 	sub.w	r0, r0, r9
 8017908:	2301      	movs	r3, #1
 801790a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801790c:	4655      	mov	r5, sl
 801790e:	4083      	lsls	r3, r0
 8017910:	4313      	orrs	r3, r2
 8017912:	9341      	str	r3, [sp, #260]	; 0x104
 8017914:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017918:	2b78      	cmp	r3, #120	; 0x78
 801791a:	d806      	bhi.n	801792a <__ssvfiscanf_r+0xee>
 801791c:	2b57      	cmp	r3, #87	; 0x57
 801791e:	d810      	bhi.n	8017942 <__ssvfiscanf_r+0x106>
 8017920:	2b25      	cmp	r3, #37	; 0x25
 8017922:	d0c5      	beq.n	80178b0 <__ssvfiscanf_r+0x74>
 8017924:	d856      	bhi.n	80179d4 <__ssvfiscanf_r+0x198>
 8017926:	2b00      	cmp	r3, #0
 8017928:	d064      	beq.n	80179f4 <__ssvfiscanf_r+0x1b8>
 801792a:	2303      	movs	r3, #3
 801792c:	9347      	str	r3, [sp, #284]	; 0x11c
 801792e:	230a      	movs	r3, #10
 8017930:	9342      	str	r3, [sp, #264]	; 0x108
 8017932:	e075      	b.n	8017a20 <__ssvfiscanf_r+0x1e4>
 8017934:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017936:	4655      	mov	r5, sl
 8017938:	fb02 1103 	mla	r1, r2, r3, r1
 801793c:	3930      	subs	r1, #48	; 0x30
 801793e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017940:	e7d4      	b.n	80178ec <__ssvfiscanf_r+0xb0>
 8017942:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017946:	2a20      	cmp	r2, #32
 8017948:	d8ef      	bhi.n	801792a <__ssvfiscanf_r+0xee>
 801794a:	a101      	add	r1, pc, #4	; (adr r1, 8017950 <__ssvfiscanf_r+0x114>)
 801794c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017950:	08017a03 	.word	0x08017a03
 8017954:	0801792b 	.word	0x0801792b
 8017958:	0801792b 	.word	0x0801792b
 801795c:	08017a61 	.word	0x08017a61
 8017960:	0801792b 	.word	0x0801792b
 8017964:	0801792b 	.word	0x0801792b
 8017968:	0801792b 	.word	0x0801792b
 801796c:	0801792b 	.word	0x0801792b
 8017970:	0801792b 	.word	0x0801792b
 8017974:	0801792b 	.word	0x0801792b
 8017978:	0801792b 	.word	0x0801792b
 801797c:	08017a77 	.word	0x08017a77
 8017980:	08017a5d 	.word	0x08017a5d
 8017984:	080179db 	.word	0x080179db
 8017988:	080179db 	.word	0x080179db
 801798c:	080179db 	.word	0x080179db
 8017990:	0801792b 	.word	0x0801792b
 8017994:	08017a19 	.word	0x08017a19
 8017998:	0801792b 	.word	0x0801792b
 801799c:	0801792b 	.word	0x0801792b
 80179a0:	0801792b 	.word	0x0801792b
 80179a4:	0801792b 	.word	0x0801792b
 80179a8:	08017a87 	.word	0x08017a87
 80179ac:	08017a55 	.word	0x08017a55
 80179b0:	080179fb 	.word	0x080179fb
 80179b4:	0801792b 	.word	0x0801792b
 80179b8:	0801792b 	.word	0x0801792b
 80179bc:	08017a83 	.word	0x08017a83
 80179c0:	0801792b 	.word	0x0801792b
 80179c4:	08017a5d 	.word	0x08017a5d
 80179c8:	0801792b 	.word	0x0801792b
 80179cc:	0801792b 	.word	0x0801792b
 80179d0:	08017a03 	.word	0x08017a03
 80179d4:	3b45      	subs	r3, #69	; 0x45
 80179d6:	2b02      	cmp	r3, #2
 80179d8:	d8a7      	bhi.n	801792a <__ssvfiscanf_r+0xee>
 80179da:	2305      	movs	r3, #5
 80179dc:	e01f      	b.n	8017a1e <__ssvfiscanf_r+0x1e2>
 80179de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80179e0:	4621      	mov	r1, r4
 80179e2:	4630      	mov	r0, r6
 80179e4:	4798      	blx	r3
 80179e6:	2800      	cmp	r0, #0
 80179e8:	f43f af67 	beq.w	80178ba <__ssvfiscanf_r+0x7e>
 80179ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80179ee:	2800      	cmp	r0, #0
 80179f0:	f040 808d 	bne.w	8017b0e <__ssvfiscanf_r+0x2d2>
 80179f4:	f04f 30ff 	mov.w	r0, #4294967295
 80179f8:	e08f      	b.n	8017b1a <__ssvfiscanf_r+0x2de>
 80179fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80179fc:	f042 0220 	orr.w	r2, r2, #32
 8017a00:	9241      	str	r2, [sp, #260]	; 0x104
 8017a02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017a08:	9241      	str	r2, [sp, #260]	; 0x104
 8017a0a:	2210      	movs	r2, #16
 8017a0c:	2b6f      	cmp	r3, #111	; 0x6f
 8017a0e:	9242      	str	r2, [sp, #264]	; 0x108
 8017a10:	bf34      	ite	cc
 8017a12:	2303      	movcc	r3, #3
 8017a14:	2304      	movcs	r3, #4
 8017a16:	e002      	b.n	8017a1e <__ssvfiscanf_r+0x1e2>
 8017a18:	2300      	movs	r3, #0
 8017a1a:	9342      	str	r3, [sp, #264]	; 0x108
 8017a1c:	2303      	movs	r3, #3
 8017a1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017a20:	6863      	ldr	r3, [r4, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	dd3e      	ble.n	8017aa4 <__ssvfiscanf_r+0x268>
 8017a26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017a28:	0659      	lsls	r1, r3, #25
 8017a2a:	d404      	bmi.n	8017a36 <__ssvfiscanf_r+0x1fa>
 8017a2c:	6823      	ldr	r3, [r4, #0]
 8017a2e:	781a      	ldrb	r2, [r3, #0]
 8017a30:	5cba      	ldrb	r2, [r7, r2]
 8017a32:	0712      	lsls	r2, r2, #28
 8017a34:	d43d      	bmi.n	8017ab2 <__ssvfiscanf_r+0x276>
 8017a36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017a38:	2b02      	cmp	r3, #2
 8017a3a:	dc4c      	bgt.n	8017ad6 <__ssvfiscanf_r+0x29a>
 8017a3c:	466b      	mov	r3, sp
 8017a3e:	4622      	mov	r2, r4
 8017a40:	a941      	add	r1, sp, #260	; 0x104
 8017a42:	4630      	mov	r0, r6
 8017a44:	f000 f872 	bl	8017b2c <_scanf_chars>
 8017a48:	2801      	cmp	r0, #1
 8017a4a:	d06a      	beq.n	8017b22 <__ssvfiscanf_r+0x2e6>
 8017a4c:	2802      	cmp	r0, #2
 8017a4e:	f47f af1b 	bne.w	8017888 <__ssvfiscanf_r+0x4c>
 8017a52:	e7cb      	b.n	80179ec <__ssvfiscanf_r+0x1b0>
 8017a54:	2308      	movs	r3, #8
 8017a56:	9342      	str	r3, [sp, #264]	; 0x108
 8017a58:	2304      	movs	r3, #4
 8017a5a:	e7e0      	b.n	8017a1e <__ssvfiscanf_r+0x1e2>
 8017a5c:	220a      	movs	r2, #10
 8017a5e:	e7d5      	b.n	8017a0c <__ssvfiscanf_r+0x1d0>
 8017a60:	4629      	mov	r1, r5
 8017a62:	4640      	mov	r0, r8
 8017a64:	f000 f9ae 	bl	8017dc4 <__sccl>
 8017a68:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017a6a:	4605      	mov	r5, r0
 8017a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a70:	9341      	str	r3, [sp, #260]	; 0x104
 8017a72:	2301      	movs	r3, #1
 8017a74:	e7d3      	b.n	8017a1e <__ssvfiscanf_r+0x1e2>
 8017a76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a7c:	9341      	str	r3, [sp, #260]	; 0x104
 8017a7e:	2300      	movs	r3, #0
 8017a80:	e7cd      	b.n	8017a1e <__ssvfiscanf_r+0x1e2>
 8017a82:	2302      	movs	r3, #2
 8017a84:	e7cb      	b.n	8017a1e <__ssvfiscanf_r+0x1e2>
 8017a86:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017a88:	06c3      	lsls	r3, r0, #27
 8017a8a:	f53f aefd 	bmi.w	8017888 <__ssvfiscanf_r+0x4c>
 8017a8e:	9b00      	ldr	r3, [sp, #0]
 8017a90:	07c0      	lsls	r0, r0, #31
 8017a92:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a94:	f103 0104 	add.w	r1, r3, #4
 8017a98:	9100      	str	r1, [sp, #0]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	bf4c      	ite	mi
 8017a9e:	801a      	strhmi	r2, [r3, #0]
 8017aa0:	601a      	strpl	r2, [r3, #0]
 8017aa2:	e6f1      	b.n	8017888 <__ssvfiscanf_r+0x4c>
 8017aa4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017aa6:	4621      	mov	r1, r4
 8017aa8:	4630      	mov	r0, r6
 8017aaa:	4798      	blx	r3
 8017aac:	2800      	cmp	r0, #0
 8017aae:	d0ba      	beq.n	8017a26 <__ssvfiscanf_r+0x1ea>
 8017ab0:	e79c      	b.n	80179ec <__ssvfiscanf_r+0x1b0>
 8017ab2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017ab4:	3201      	adds	r2, #1
 8017ab6:	9245      	str	r2, [sp, #276]	; 0x114
 8017ab8:	6862      	ldr	r2, [r4, #4]
 8017aba:	3a01      	subs	r2, #1
 8017abc:	2a00      	cmp	r2, #0
 8017abe:	6062      	str	r2, [r4, #4]
 8017ac0:	dd02      	ble.n	8017ac8 <__ssvfiscanf_r+0x28c>
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	6023      	str	r3, [r4, #0]
 8017ac6:	e7b1      	b.n	8017a2c <__ssvfiscanf_r+0x1f0>
 8017ac8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017aca:	4621      	mov	r1, r4
 8017acc:	4630      	mov	r0, r6
 8017ace:	4798      	blx	r3
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	d0ab      	beq.n	8017a2c <__ssvfiscanf_r+0x1f0>
 8017ad4:	e78a      	b.n	80179ec <__ssvfiscanf_r+0x1b0>
 8017ad6:	2b04      	cmp	r3, #4
 8017ad8:	dc0e      	bgt.n	8017af8 <__ssvfiscanf_r+0x2bc>
 8017ada:	466b      	mov	r3, sp
 8017adc:	4622      	mov	r2, r4
 8017ade:	a941      	add	r1, sp, #260	; 0x104
 8017ae0:	4630      	mov	r0, r6
 8017ae2:	f000 f87d 	bl	8017be0 <_scanf_i>
 8017ae6:	e7af      	b.n	8017a48 <__ssvfiscanf_r+0x20c>
 8017ae8:	080183e0 	.word	0x080183e0
 8017aec:	08017789 	.word	0x08017789
 8017af0:	08017803 	.word	0x08017803
 8017af4:	080183c0 	.word	0x080183c0
 8017af8:	4b0b      	ldr	r3, [pc, #44]	; (8017b28 <__ssvfiscanf_r+0x2ec>)
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f43f aec4 	beq.w	8017888 <__ssvfiscanf_r+0x4c>
 8017b00:	466b      	mov	r3, sp
 8017b02:	4622      	mov	r2, r4
 8017b04:	a941      	add	r1, sp, #260	; 0x104
 8017b06:	4630      	mov	r0, r6
 8017b08:	f3af 8000 	nop.w
 8017b0c:	e79c      	b.n	8017a48 <__ssvfiscanf_r+0x20c>
 8017b0e:	89a3      	ldrh	r3, [r4, #12]
 8017b10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017b14:	bf18      	it	ne
 8017b16:	f04f 30ff 	movne.w	r0, #4294967295
 8017b1a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8017b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b22:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017b24:	e7f9      	b.n	8017b1a <__ssvfiscanf_r+0x2de>
 8017b26:	bf00      	nop
 8017b28:	00000000 	.word	0x00000000

08017b2c <_scanf_chars>:
 8017b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b30:	4615      	mov	r5, r2
 8017b32:	688a      	ldr	r2, [r1, #8]
 8017b34:	4680      	mov	r8, r0
 8017b36:	460c      	mov	r4, r1
 8017b38:	b932      	cbnz	r2, 8017b48 <_scanf_chars+0x1c>
 8017b3a:	698a      	ldr	r2, [r1, #24]
 8017b3c:	2a00      	cmp	r2, #0
 8017b3e:	bf0c      	ite	eq
 8017b40:	2201      	moveq	r2, #1
 8017b42:	f04f 32ff 	movne.w	r2, #4294967295
 8017b46:	608a      	str	r2, [r1, #8]
 8017b48:	6822      	ldr	r2, [r4, #0]
 8017b4a:	2700      	movs	r7, #0
 8017b4c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017bdc <_scanf_chars+0xb0>
 8017b50:	06d1      	lsls	r1, r2, #27
 8017b52:	bf5f      	itttt	pl
 8017b54:	681a      	ldrpl	r2, [r3, #0]
 8017b56:	1d11      	addpl	r1, r2, #4
 8017b58:	6019      	strpl	r1, [r3, #0]
 8017b5a:	6816      	ldrpl	r6, [r2, #0]
 8017b5c:	69a0      	ldr	r0, [r4, #24]
 8017b5e:	b188      	cbz	r0, 8017b84 <_scanf_chars+0x58>
 8017b60:	2801      	cmp	r0, #1
 8017b62:	d107      	bne.n	8017b74 <_scanf_chars+0x48>
 8017b64:	682a      	ldr	r2, [r5, #0]
 8017b66:	7811      	ldrb	r1, [r2, #0]
 8017b68:	6962      	ldr	r2, [r4, #20]
 8017b6a:	5c52      	ldrb	r2, [r2, r1]
 8017b6c:	b952      	cbnz	r2, 8017b84 <_scanf_chars+0x58>
 8017b6e:	2f00      	cmp	r7, #0
 8017b70:	d031      	beq.n	8017bd6 <_scanf_chars+0xaa>
 8017b72:	e022      	b.n	8017bba <_scanf_chars+0x8e>
 8017b74:	2802      	cmp	r0, #2
 8017b76:	d120      	bne.n	8017bba <_scanf_chars+0x8e>
 8017b78:	682b      	ldr	r3, [r5, #0]
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017b80:	071b      	lsls	r3, r3, #28
 8017b82:	d41a      	bmi.n	8017bba <_scanf_chars+0x8e>
 8017b84:	6823      	ldr	r3, [r4, #0]
 8017b86:	3701      	adds	r7, #1
 8017b88:	06da      	lsls	r2, r3, #27
 8017b8a:	bf5e      	ittt	pl
 8017b8c:	682b      	ldrpl	r3, [r5, #0]
 8017b8e:	781b      	ldrbpl	r3, [r3, #0]
 8017b90:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017b94:	682a      	ldr	r2, [r5, #0]
 8017b96:	686b      	ldr	r3, [r5, #4]
 8017b98:	3201      	adds	r2, #1
 8017b9a:	3b01      	subs	r3, #1
 8017b9c:	602a      	str	r2, [r5, #0]
 8017b9e:	68a2      	ldr	r2, [r4, #8]
 8017ba0:	606b      	str	r3, [r5, #4]
 8017ba2:	3a01      	subs	r2, #1
 8017ba4:	60a2      	str	r2, [r4, #8]
 8017ba6:	b142      	cbz	r2, 8017bba <_scanf_chars+0x8e>
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	dcd7      	bgt.n	8017b5c <_scanf_chars+0x30>
 8017bac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017bb0:	4629      	mov	r1, r5
 8017bb2:	4640      	mov	r0, r8
 8017bb4:	4798      	blx	r3
 8017bb6:	2800      	cmp	r0, #0
 8017bb8:	d0d0      	beq.n	8017b5c <_scanf_chars+0x30>
 8017bba:	6823      	ldr	r3, [r4, #0]
 8017bbc:	f013 0310 	ands.w	r3, r3, #16
 8017bc0:	d105      	bne.n	8017bce <_scanf_chars+0xa2>
 8017bc2:	68e2      	ldr	r2, [r4, #12]
 8017bc4:	3201      	adds	r2, #1
 8017bc6:	60e2      	str	r2, [r4, #12]
 8017bc8:	69a2      	ldr	r2, [r4, #24]
 8017bca:	b102      	cbz	r2, 8017bce <_scanf_chars+0xa2>
 8017bcc:	7033      	strb	r3, [r6, #0]
 8017bce:	6923      	ldr	r3, [r4, #16]
 8017bd0:	2000      	movs	r0, #0
 8017bd2:	443b      	add	r3, r7
 8017bd4:	6123      	str	r3, [r4, #16]
 8017bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bda:	bf00      	nop
 8017bdc:	080183e0 	.word	0x080183e0

08017be0 <_scanf_i>:
 8017be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be4:	4698      	mov	r8, r3
 8017be6:	b087      	sub	sp, #28
 8017be8:	4b72      	ldr	r3, [pc, #456]	; (8017db4 <_scanf_i+0x1d4>)
 8017bea:	460c      	mov	r4, r1
 8017bec:	4682      	mov	sl, r0
 8017bee:	4616      	mov	r6, r2
 8017bf0:	4627      	mov	r7, r4
 8017bf2:	f04f 0b00 	mov.w	fp, #0
 8017bf6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017bfa:	ab03      	add	r3, sp, #12
 8017bfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017c00:	4b6d      	ldr	r3, [pc, #436]	; (8017db8 <_scanf_i+0x1d8>)
 8017c02:	69a1      	ldr	r1, [r4, #24]
 8017c04:	4a6d      	ldr	r2, [pc, #436]	; (8017dbc <_scanf_i+0x1dc>)
 8017c06:	2903      	cmp	r1, #3
 8017c08:	bf18      	it	ne
 8017c0a:	461a      	movne	r2, r3
 8017c0c:	68a3      	ldr	r3, [r4, #8]
 8017c0e:	9201      	str	r2, [sp, #4]
 8017c10:	1e5a      	subs	r2, r3, #1
 8017c12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017c16:	bf89      	itett	hi
 8017c18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017c1c:	f04f 0900 	movls.w	r9, #0
 8017c20:	eb03 0905 	addhi.w	r9, r3, r5
 8017c24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017c28:	bf88      	it	hi
 8017c2a:	60a3      	strhi	r3, [r4, #8]
 8017c2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017c30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017c34:	463d      	mov	r5, r7
 8017c36:	6023      	str	r3, [r4, #0]
 8017c38:	6831      	ldr	r1, [r6, #0]
 8017c3a:	ab03      	add	r3, sp, #12
 8017c3c:	2202      	movs	r2, #2
 8017c3e:	7809      	ldrb	r1, [r1, #0]
 8017c40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017c44:	f000 f92e 	bl	8017ea4 <memchr>
 8017c48:	b328      	cbz	r0, 8017c96 <_scanf_i+0xb6>
 8017c4a:	f1bb 0f01 	cmp.w	fp, #1
 8017c4e:	d159      	bne.n	8017d04 <_scanf_i+0x124>
 8017c50:	6862      	ldr	r2, [r4, #4]
 8017c52:	b92a      	cbnz	r2, 8017c60 <_scanf_i+0x80>
 8017c54:	6822      	ldr	r2, [r4, #0]
 8017c56:	2308      	movs	r3, #8
 8017c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017c5c:	6063      	str	r3, [r4, #4]
 8017c5e:	6022      	str	r2, [r4, #0]
 8017c60:	6822      	ldr	r2, [r4, #0]
 8017c62:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017c66:	6022      	str	r2, [r4, #0]
 8017c68:	68a2      	ldr	r2, [r4, #8]
 8017c6a:	1e51      	subs	r1, r2, #1
 8017c6c:	60a1      	str	r1, [r4, #8]
 8017c6e:	b192      	cbz	r2, 8017c96 <_scanf_i+0xb6>
 8017c70:	6832      	ldr	r2, [r6, #0]
 8017c72:	1c51      	adds	r1, r2, #1
 8017c74:	6031      	str	r1, [r6, #0]
 8017c76:	7812      	ldrb	r2, [r2, #0]
 8017c78:	f805 2b01 	strb.w	r2, [r5], #1
 8017c7c:	6872      	ldr	r2, [r6, #4]
 8017c7e:	3a01      	subs	r2, #1
 8017c80:	2a00      	cmp	r2, #0
 8017c82:	6072      	str	r2, [r6, #4]
 8017c84:	dc07      	bgt.n	8017c96 <_scanf_i+0xb6>
 8017c86:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017c8a:	4631      	mov	r1, r6
 8017c8c:	4650      	mov	r0, sl
 8017c8e:	4790      	blx	r2
 8017c90:	2800      	cmp	r0, #0
 8017c92:	f040 8085 	bne.w	8017da0 <_scanf_i+0x1c0>
 8017c96:	f10b 0b01 	add.w	fp, fp, #1
 8017c9a:	f1bb 0f03 	cmp.w	fp, #3
 8017c9e:	d1cb      	bne.n	8017c38 <_scanf_i+0x58>
 8017ca0:	6863      	ldr	r3, [r4, #4]
 8017ca2:	b90b      	cbnz	r3, 8017ca8 <_scanf_i+0xc8>
 8017ca4:	230a      	movs	r3, #10
 8017ca6:	6063      	str	r3, [r4, #4]
 8017ca8:	6863      	ldr	r3, [r4, #4]
 8017caa:	f04f 0b00 	mov.w	fp, #0
 8017cae:	4944      	ldr	r1, [pc, #272]	; (8017dc0 <_scanf_i+0x1e0>)
 8017cb0:	6960      	ldr	r0, [r4, #20]
 8017cb2:	1ac9      	subs	r1, r1, r3
 8017cb4:	f000 f886 	bl	8017dc4 <__sccl>
 8017cb8:	68a3      	ldr	r3, [r4, #8]
 8017cba:	6822      	ldr	r2, [r4, #0]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d03d      	beq.n	8017d3c <_scanf_i+0x15c>
 8017cc0:	6831      	ldr	r1, [r6, #0]
 8017cc2:	6960      	ldr	r0, [r4, #20]
 8017cc4:	f891 c000 	ldrb.w	ip, [r1]
 8017cc8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017ccc:	2800      	cmp	r0, #0
 8017cce:	d035      	beq.n	8017d3c <_scanf_i+0x15c>
 8017cd0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017cd4:	d124      	bne.n	8017d20 <_scanf_i+0x140>
 8017cd6:	0510      	lsls	r0, r2, #20
 8017cd8:	d522      	bpl.n	8017d20 <_scanf_i+0x140>
 8017cda:	f10b 0b01 	add.w	fp, fp, #1
 8017cde:	f1b9 0f00 	cmp.w	r9, #0
 8017ce2:	d003      	beq.n	8017cec <_scanf_i+0x10c>
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	f109 39ff 	add.w	r9, r9, #4294967295
 8017cea:	60a3      	str	r3, [r4, #8]
 8017cec:	6873      	ldr	r3, [r6, #4]
 8017cee:	3b01      	subs	r3, #1
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	6073      	str	r3, [r6, #4]
 8017cf4:	dd1b      	ble.n	8017d2e <_scanf_i+0x14e>
 8017cf6:	6833      	ldr	r3, [r6, #0]
 8017cf8:	3301      	adds	r3, #1
 8017cfa:	6033      	str	r3, [r6, #0]
 8017cfc:	68a3      	ldr	r3, [r4, #8]
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	60a3      	str	r3, [r4, #8]
 8017d02:	e7d9      	b.n	8017cb8 <_scanf_i+0xd8>
 8017d04:	f1bb 0f02 	cmp.w	fp, #2
 8017d08:	d1ae      	bne.n	8017c68 <_scanf_i+0x88>
 8017d0a:	6822      	ldr	r2, [r4, #0]
 8017d0c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017d10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017d14:	d1bf      	bne.n	8017c96 <_scanf_i+0xb6>
 8017d16:	2310      	movs	r3, #16
 8017d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017d1c:	6063      	str	r3, [r4, #4]
 8017d1e:	e7a2      	b.n	8017c66 <_scanf_i+0x86>
 8017d20:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017d24:	6022      	str	r2, [r4, #0]
 8017d26:	780b      	ldrb	r3, [r1, #0]
 8017d28:	f805 3b01 	strb.w	r3, [r5], #1
 8017d2c:	e7de      	b.n	8017cec <_scanf_i+0x10c>
 8017d2e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d32:	4631      	mov	r1, r6
 8017d34:	4650      	mov	r0, sl
 8017d36:	4798      	blx	r3
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d0df      	beq.n	8017cfc <_scanf_i+0x11c>
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	05d9      	lsls	r1, r3, #23
 8017d40:	d50d      	bpl.n	8017d5e <_scanf_i+0x17e>
 8017d42:	42bd      	cmp	r5, r7
 8017d44:	d909      	bls.n	8017d5a <_scanf_i+0x17a>
 8017d46:	f105 39ff 	add.w	r9, r5, #4294967295
 8017d4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017d52:	4632      	mov	r2, r6
 8017d54:	464d      	mov	r5, r9
 8017d56:	4650      	mov	r0, sl
 8017d58:	4798      	blx	r3
 8017d5a:	42bd      	cmp	r5, r7
 8017d5c:	d028      	beq.n	8017db0 <_scanf_i+0x1d0>
 8017d5e:	6822      	ldr	r2, [r4, #0]
 8017d60:	f012 0210 	ands.w	r2, r2, #16
 8017d64:	d113      	bne.n	8017d8e <_scanf_i+0x1ae>
 8017d66:	702a      	strb	r2, [r5, #0]
 8017d68:	4639      	mov	r1, r7
 8017d6a:	6863      	ldr	r3, [r4, #4]
 8017d6c:	4650      	mov	r0, sl
 8017d6e:	9e01      	ldr	r6, [sp, #4]
 8017d70:	47b0      	blx	r6
 8017d72:	f8d8 3000 	ldr.w	r3, [r8]
 8017d76:	6821      	ldr	r1, [r4, #0]
 8017d78:	1d1a      	adds	r2, r3, #4
 8017d7a:	f011 0f20 	tst.w	r1, #32
 8017d7e:	f8c8 2000 	str.w	r2, [r8]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	d00f      	beq.n	8017da6 <_scanf_i+0x1c6>
 8017d86:	6018      	str	r0, [r3, #0]
 8017d88:	68e3      	ldr	r3, [r4, #12]
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	60e3      	str	r3, [r4, #12]
 8017d8e:	1bed      	subs	r5, r5, r7
 8017d90:	6923      	ldr	r3, [r4, #16]
 8017d92:	2000      	movs	r0, #0
 8017d94:	445d      	add	r5, fp
 8017d96:	442b      	add	r3, r5
 8017d98:	6123      	str	r3, [r4, #16]
 8017d9a:	b007      	add	sp, #28
 8017d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da0:	f04f 0b00 	mov.w	fp, #0
 8017da4:	e7ca      	b.n	8017d3c <_scanf_i+0x15c>
 8017da6:	07ca      	lsls	r2, r1, #31
 8017da8:	bf4c      	ite	mi
 8017daa:	8018      	strhmi	r0, [r3, #0]
 8017dac:	6018      	strpl	r0, [r3, #0]
 8017dae:	e7eb      	b.n	8017d88 <_scanf_i+0x1a8>
 8017db0:	2001      	movs	r0, #1
 8017db2:	e7f2      	b.n	8017d9a <_scanf_i+0x1ba>
 8017db4:	08018260 	.word	0x08018260
 8017db8:	0801810d 	.word	0x0801810d
 8017dbc:	08018025 	.word	0x08018025
 8017dc0:	080183d4 	.word	0x080183d4

08017dc4 <__sccl>:
 8017dc4:	b570      	push	{r4, r5, r6, lr}
 8017dc6:	780b      	ldrb	r3, [r1, #0]
 8017dc8:	4604      	mov	r4, r0
 8017dca:	3801      	subs	r0, #1
 8017dcc:	2b5e      	cmp	r3, #94	; 0x5e
 8017dce:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017dd2:	bf13      	iteet	ne
 8017dd4:	1c4a      	addne	r2, r1, #1
 8017dd6:	1c8a      	addeq	r2, r1, #2
 8017dd8:	784b      	ldrbeq	r3, [r1, #1]
 8017dda:	2100      	movne	r1, #0
 8017ddc:	bf08      	it	eq
 8017dde:	2101      	moveq	r1, #1
 8017de0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017de4:	42a8      	cmp	r0, r5
 8017de6:	d1fb      	bne.n	8017de0 <__sccl+0x1c>
 8017de8:	b90b      	cbnz	r3, 8017dee <__sccl+0x2a>
 8017dea:	1e50      	subs	r0, r2, #1
 8017dec:	bd70      	pop	{r4, r5, r6, pc}
 8017dee:	f081 0101 	eor.w	r1, r1, #1
 8017df2:	4610      	mov	r0, r2
 8017df4:	54e1      	strb	r1, [r4, r3]
 8017df6:	4602      	mov	r2, r0
 8017df8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017dfc:	2d2d      	cmp	r5, #45	; 0x2d
 8017dfe:	d005      	beq.n	8017e0c <__sccl+0x48>
 8017e00:	2d5d      	cmp	r5, #93	; 0x5d
 8017e02:	d016      	beq.n	8017e32 <__sccl+0x6e>
 8017e04:	2d00      	cmp	r5, #0
 8017e06:	d0f1      	beq.n	8017dec <__sccl+0x28>
 8017e08:	462b      	mov	r3, r5
 8017e0a:	e7f2      	b.n	8017df2 <__sccl+0x2e>
 8017e0c:	7846      	ldrb	r6, [r0, #1]
 8017e0e:	2e5d      	cmp	r6, #93	; 0x5d
 8017e10:	d0fa      	beq.n	8017e08 <__sccl+0x44>
 8017e12:	42b3      	cmp	r3, r6
 8017e14:	dcf8      	bgt.n	8017e08 <__sccl+0x44>
 8017e16:	3002      	adds	r0, #2
 8017e18:	461a      	mov	r2, r3
 8017e1a:	3201      	adds	r2, #1
 8017e1c:	4296      	cmp	r6, r2
 8017e1e:	54a1      	strb	r1, [r4, r2]
 8017e20:	dcfb      	bgt.n	8017e1a <__sccl+0x56>
 8017e22:	1af2      	subs	r2, r6, r3
 8017e24:	1c5d      	adds	r5, r3, #1
 8017e26:	3a01      	subs	r2, #1
 8017e28:	42b3      	cmp	r3, r6
 8017e2a:	bfa8      	it	ge
 8017e2c:	2200      	movge	r2, #0
 8017e2e:	18ab      	adds	r3, r5, r2
 8017e30:	e7e1      	b.n	8017df6 <__sccl+0x32>
 8017e32:	4610      	mov	r0, r2
 8017e34:	e7da      	b.n	8017dec <__sccl+0x28>

08017e36 <__submore>:
 8017e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e42:	4299      	cmp	r1, r3
 8017e44:	d11a      	bne.n	8017e7c <__submore+0x46>
 8017e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017e4a:	f7ff fae7 	bl	801741c <_malloc_r>
 8017e4e:	b918      	cbnz	r0, 8017e58 <__submore+0x22>
 8017e50:	f04f 30ff 	mov.w	r0, #4294967295
 8017e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8017e5e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017e62:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017e68:	7083      	strb	r3, [r0, #2]
 8017e6a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017e6e:	7043      	strb	r3, [r0, #1]
 8017e70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017e74:	7003      	strb	r3, [r0, #0]
 8017e76:	6020      	str	r0, [r4, #0]
 8017e78:	2000      	movs	r0, #0
 8017e7a:	e7eb      	b.n	8017e54 <__submore+0x1e>
 8017e7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017e7e:	0077      	lsls	r7, r6, #1
 8017e80:	463a      	mov	r2, r7
 8017e82:	f000 f81d 	bl	8017ec0 <_realloc_r>
 8017e86:	4605      	mov	r5, r0
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d0e1      	beq.n	8017e50 <__submore+0x1a>
 8017e8c:	eb00 0806 	add.w	r8, r0, r6
 8017e90:	4601      	mov	r1, r0
 8017e92:	4632      	mov	r2, r6
 8017e94:	4640      	mov	r0, r8
 8017e96:	f7ff fc1d 	bl	80176d4 <memcpy>
 8017e9a:	f8c4 8000 	str.w	r8, [r4]
 8017e9e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017ea2:	e7e9      	b.n	8017e78 <__submore+0x42>

08017ea4 <memchr>:
 8017ea4:	b2c9      	uxtb	r1, r1
 8017ea6:	4402      	add	r2, r0
 8017ea8:	b510      	push	{r4, lr}
 8017eaa:	4290      	cmp	r0, r2
 8017eac:	4603      	mov	r3, r0
 8017eae:	d101      	bne.n	8017eb4 <memchr+0x10>
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	e003      	b.n	8017ebc <memchr+0x18>
 8017eb4:	781c      	ldrb	r4, [r3, #0]
 8017eb6:	3001      	adds	r0, #1
 8017eb8:	428c      	cmp	r4, r1
 8017eba:	d1f6      	bne.n	8017eaa <memchr+0x6>
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	bd10      	pop	{r4, pc}

08017ec0 <_realloc_r>:
 8017ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec4:	4680      	mov	r8, r0
 8017ec6:	4614      	mov	r4, r2
 8017ec8:	460e      	mov	r6, r1
 8017eca:	b921      	cbnz	r1, 8017ed6 <_realloc_r+0x16>
 8017ecc:	4611      	mov	r1, r2
 8017ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed2:	f7ff baa3 	b.w	801741c <_malloc_r>
 8017ed6:	b92a      	cbnz	r2, 8017ee4 <_realloc_r+0x24>
 8017ed8:	4625      	mov	r5, r4
 8017eda:	f7ff fc09 	bl	80176f0 <_free_r>
 8017ede:	4628      	mov	r0, r5
 8017ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ee4:	f000 f914 	bl	8018110 <_malloc_usable_size_r>
 8017ee8:	4284      	cmp	r4, r0
 8017eea:	4607      	mov	r7, r0
 8017eec:	d802      	bhi.n	8017ef4 <_realloc_r+0x34>
 8017eee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017ef2:	d812      	bhi.n	8017f1a <_realloc_r+0x5a>
 8017ef4:	4621      	mov	r1, r4
 8017ef6:	4640      	mov	r0, r8
 8017ef8:	f7ff fa90 	bl	801741c <_malloc_r>
 8017efc:	4605      	mov	r5, r0
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d0ed      	beq.n	8017ede <_realloc_r+0x1e>
 8017f02:	42bc      	cmp	r4, r7
 8017f04:	4622      	mov	r2, r4
 8017f06:	4631      	mov	r1, r6
 8017f08:	bf28      	it	cs
 8017f0a:	463a      	movcs	r2, r7
 8017f0c:	f7ff fbe2 	bl	80176d4 <memcpy>
 8017f10:	4631      	mov	r1, r6
 8017f12:	4640      	mov	r0, r8
 8017f14:	f7ff fbec 	bl	80176f0 <_free_r>
 8017f18:	e7e1      	b.n	8017ede <_realloc_r+0x1e>
 8017f1a:	4635      	mov	r5, r6
 8017f1c:	e7df      	b.n	8017ede <_realloc_r+0x1e>
	...

08017f20 <_strtol_l.constprop.0>:
 8017f20:	2b01      	cmp	r3, #1
 8017f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f26:	d001      	beq.n	8017f2c <_strtol_l.constprop.0+0xc>
 8017f28:	2b24      	cmp	r3, #36	; 0x24
 8017f2a:	d906      	bls.n	8017f3a <_strtol_l.constprop.0+0x1a>
 8017f2c:	f7ff fba6 	bl	801767c <__errno>
 8017f30:	2316      	movs	r3, #22
 8017f32:	6003      	str	r3, [r0, #0]
 8017f34:	2000      	movs	r0, #0
 8017f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f3a:	460d      	mov	r5, r1
 8017f3c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8018020 <_strtol_l.constprop.0+0x100>
 8017f40:	462e      	mov	r6, r5
 8017f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f46:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017f4a:	f017 0708 	ands.w	r7, r7, #8
 8017f4e:	d1f7      	bne.n	8017f40 <_strtol_l.constprop.0+0x20>
 8017f50:	2c2d      	cmp	r4, #45	; 0x2d
 8017f52:	d132      	bne.n	8017fba <_strtol_l.constprop.0+0x9a>
 8017f54:	782c      	ldrb	r4, [r5, #0]
 8017f56:	2701      	movs	r7, #1
 8017f58:	1cb5      	adds	r5, r6, #2
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d05b      	beq.n	8018016 <_strtol_l.constprop.0+0xf6>
 8017f5e:	2b10      	cmp	r3, #16
 8017f60:	d109      	bne.n	8017f76 <_strtol_l.constprop.0+0x56>
 8017f62:	2c30      	cmp	r4, #48	; 0x30
 8017f64:	d107      	bne.n	8017f76 <_strtol_l.constprop.0+0x56>
 8017f66:	782c      	ldrb	r4, [r5, #0]
 8017f68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017f6c:	2c58      	cmp	r4, #88	; 0x58
 8017f6e:	d14d      	bne.n	801800c <_strtol_l.constprop.0+0xec>
 8017f70:	786c      	ldrb	r4, [r5, #1]
 8017f72:	2310      	movs	r3, #16
 8017f74:	3502      	adds	r5, #2
 8017f76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017f7a:	f04f 0e00 	mov.w	lr, #0
 8017f7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017f82:	4676      	mov	r6, lr
 8017f84:	fbb8 f9f3 	udiv	r9, r8, r3
 8017f88:	fb03 8a19 	mls	sl, r3, r9, r8
 8017f8c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017f90:	f1bc 0f09 	cmp.w	ip, #9
 8017f94:	d816      	bhi.n	8017fc4 <_strtol_l.constprop.0+0xa4>
 8017f96:	4664      	mov	r4, ip
 8017f98:	42a3      	cmp	r3, r4
 8017f9a:	dd24      	ble.n	8017fe6 <_strtol_l.constprop.0+0xc6>
 8017f9c:	f1be 3fff 	cmp.w	lr, #4294967295
 8017fa0:	d008      	beq.n	8017fb4 <_strtol_l.constprop.0+0x94>
 8017fa2:	45b1      	cmp	r9, r6
 8017fa4:	d31c      	bcc.n	8017fe0 <_strtol_l.constprop.0+0xc0>
 8017fa6:	d101      	bne.n	8017fac <_strtol_l.constprop.0+0x8c>
 8017fa8:	45a2      	cmp	sl, r4
 8017faa:	db19      	blt.n	8017fe0 <_strtol_l.constprop.0+0xc0>
 8017fac:	fb06 4603 	mla	r6, r6, r3, r4
 8017fb0:	f04f 0e01 	mov.w	lr, #1
 8017fb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fb8:	e7e8      	b.n	8017f8c <_strtol_l.constprop.0+0x6c>
 8017fba:	2c2b      	cmp	r4, #43	; 0x2b
 8017fbc:	bf04      	itt	eq
 8017fbe:	782c      	ldrbeq	r4, [r5, #0]
 8017fc0:	1cb5      	addeq	r5, r6, #2
 8017fc2:	e7ca      	b.n	8017f5a <_strtol_l.constprop.0+0x3a>
 8017fc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017fc8:	f1bc 0f19 	cmp.w	ip, #25
 8017fcc:	d801      	bhi.n	8017fd2 <_strtol_l.constprop.0+0xb2>
 8017fce:	3c37      	subs	r4, #55	; 0x37
 8017fd0:	e7e2      	b.n	8017f98 <_strtol_l.constprop.0+0x78>
 8017fd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017fd6:	f1bc 0f19 	cmp.w	ip, #25
 8017fda:	d804      	bhi.n	8017fe6 <_strtol_l.constprop.0+0xc6>
 8017fdc:	3c57      	subs	r4, #87	; 0x57
 8017fde:	e7db      	b.n	8017f98 <_strtol_l.constprop.0+0x78>
 8017fe0:	f04f 3eff 	mov.w	lr, #4294967295
 8017fe4:	e7e6      	b.n	8017fb4 <_strtol_l.constprop.0+0x94>
 8017fe6:	f1be 3fff 	cmp.w	lr, #4294967295
 8017fea:	d105      	bne.n	8017ff8 <_strtol_l.constprop.0+0xd8>
 8017fec:	2322      	movs	r3, #34	; 0x22
 8017fee:	4646      	mov	r6, r8
 8017ff0:	6003      	str	r3, [r0, #0]
 8017ff2:	b942      	cbnz	r2, 8018006 <_strtol_l.constprop.0+0xe6>
 8017ff4:	4630      	mov	r0, r6
 8017ff6:	e79e      	b.n	8017f36 <_strtol_l.constprop.0+0x16>
 8017ff8:	b107      	cbz	r7, 8017ffc <_strtol_l.constprop.0+0xdc>
 8017ffa:	4276      	negs	r6, r6
 8017ffc:	2a00      	cmp	r2, #0
 8017ffe:	d0f9      	beq.n	8017ff4 <_strtol_l.constprop.0+0xd4>
 8018000:	f1be 0f00 	cmp.w	lr, #0
 8018004:	d000      	beq.n	8018008 <_strtol_l.constprop.0+0xe8>
 8018006:	1e69      	subs	r1, r5, #1
 8018008:	6011      	str	r1, [r2, #0]
 801800a:	e7f3      	b.n	8017ff4 <_strtol_l.constprop.0+0xd4>
 801800c:	2430      	movs	r4, #48	; 0x30
 801800e:	2b00      	cmp	r3, #0
 8018010:	d1b1      	bne.n	8017f76 <_strtol_l.constprop.0+0x56>
 8018012:	2308      	movs	r3, #8
 8018014:	e7af      	b.n	8017f76 <_strtol_l.constprop.0+0x56>
 8018016:	2c30      	cmp	r4, #48	; 0x30
 8018018:	d0a5      	beq.n	8017f66 <_strtol_l.constprop.0+0x46>
 801801a:	230a      	movs	r3, #10
 801801c:	e7ab      	b.n	8017f76 <_strtol_l.constprop.0+0x56>
 801801e:	bf00      	nop
 8018020:	080183e0 	.word	0x080183e0

08018024 <_strtol_r>:
 8018024:	f7ff bf7c 	b.w	8017f20 <_strtol_l.constprop.0>

08018028 <_strtoul_l.constprop.0>:
 8018028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801802c:	4686      	mov	lr, r0
 801802e:	460d      	mov	r5, r1
 8018030:	4f35      	ldr	r7, [pc, #212]	; (8018108 <_strtoul_l.constprop.0+0xe0>)
 8018032:	4628      	mov	r0, r5
 8018034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018038:	5d3e      	ldrb	r6, [r7, r4]
 801803a:	f016 0608 	ands.w	r6, r6, #8
 801803e:	d1f8      	bne.n	8018032 <_strtoul_l.constprop.0+0xa>
 8018040:	2c2d      	cmp	r4, #45	; 0x2d
 8018042:	d130      	bne.n	80180a6 <_strtoul_l.constprop.0+0x7e>
 8018044:	782c      	ldrb	r4, [r5, #0]
 8018046:	2601      	movs	r6, #1
 8018048:	1c85      	adds	r5, r0, #2
 801804a:	2b00      	cmp	r3, #0
 801804c:	d057      	beq.n	80180fe <_strtoul_l.constprop.0+0xd6>
 801804e:	2b10      	cmp	r3, #16
 8018050:	d109      	bne.n	8018066 <_strtoul_l.constprop.0+0x3e>
 8018052:	2c30      	cmp	r4, #48	; 0x30
 8018054:	d107      	bne.n	8018066 <_strtoul_l.constprop.0+0x3e>
 8018056:	7828      	ldrb	r0, [r5, #0]
 8018058:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801805c:	2858      	cmp	r0, #88	; 0x58
 801805e:	d149      	bne.n	80180f4 <_strtoul_l.constprop.0+0xcc>
 8018060:	786c      	ldrb	r4, [r5, #1]
 8018062:	2310      	movs	r3, #16
 8018064:	3502      	adds	r5, #2
 8018066:	f04f 38ff 	mov.w	r8, #4294967295
 801806a:	2700      	movs	r7, #0
 801806c:	fbb8 f8f3 	udiv	r8, r8, r3
 8018070:	fb03 f908 	mul.w	r9, r3, r8
 8018074:	4638      	mov	r0, r7
 8018076:	ea6f 0909 	mvn.w	r9, r9
 801807a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801807e:	f1bc 0f09 	cmp.w	ip, #9
 8018082:	d815      	bhi.n	80180b0 <_strtoul_l.constprop.0+0x88>
 8018084:	4664      	mov	r4, ip
 8018086:	42a3      	cmp	r3, r4
 8018088:	dd23      	ble.n	80180d2 <_strtoul_l.constprop.0+0xaa>
 801808a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801808e:	d007      	beq.n	80180a0 <_strtoul_l.constprop.0+0x78>
 8018090:	4580      	cmp	r8, r0
 8018092:	d31b      	bcc.n	80180cc <_strtoul_l.constprop.0+0xa4>
 8018094:	d101      	bne.n	801809a <_strtoul_l.constprop.0+0x72>
 8018096:	45a1      	cmp	r9, r4
 8018098:	db18      	blt.n	80180cc <_strtoul_l.constprop.0+0xa4>
 801809a:	fb00 4003 	mla	r0, r0, r3, r4
 801809e:	2701      	movs	r7, #1
 80180a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80180a4:	e7e9      	b.n	801807a <_strtoul_l.constprop.0+0x52>
 80180a6:	2c2b      	cmp	r4, #43	; 0x2b
 80180a8:	bf04      	itt	eq
 80180aa:	782c      	ldrbeq	r4, [r5, #0]
 80180ac:	1c85      	addeq	r5, r0, #2
 80180ae:	e7cc      	b.n	801804a <_strtoul_l.constprop.0+0x22>
 80180b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80180b4:	f1bc 0f19 	cmp.w	ip, #25
 80180b8:	d801      	bhi.n	80180be <_strtoul_l.constprop.0+0x96>
 80180ba:	3c37      	subs	r4, #55	; 0x37
 80180bc:	e7e3      	b.n	8018086 <_strtoul_l.constprop.0+0x5e>
 80180be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80180c2:	f1bc 0f19 	cmp.w	ip, #25
 80180c6:	d804      	bhi.n	80180d2 <_strtoul_l.constprop.0+0xaa>
 80180c8:	3c57      	subs	r4, #87	; 0x57
 80180ca:	e7dc      	b.n	8018086 <_strtoul_l.constprop.0+0x5e>
 80180cc:	f04f 37ff 	mov.w	r7, #4294967295
 80180d0:	e7e6      	b.n	80180a0 <_strtoul_l.constprop.0+0x78>
 80180d2:	1c7b      	adds	r3, r7, #1
 80180d4:	d106      	bne.n	80180e4 <_strtoul_l.constprop.0+0xbc>
 80180d6:	2322      	movs	r3, #34	; 0x22
 80180d8:	4638      	mov	r0, r7
 80180da:	f8ce 3000 	str.w	r3, [lr]
 80180de:	b932      	cbnz	r2, 80180ee <_strtoul_l.constprop.0+0xc6>
 80180e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180e4:	b106      	cbz	r6, 80180e8 <_strtoul_l.constprop.0+0xc0>
 80180e6:	4240      	negs	r0, r0
 80180e8:	2a00      	cmp	r2, #0
 80180ea:	d0f9      	beq.n	80180e0 <_strtoul_l.constprop.0+0xb8>
 80180ec:	b107      	cbz	r7, 80180f0 <_strtoul_l.constprop.0+0xc8>
 80180ee:	1e69      	subs	r1, r5, #1
 80180f0:	6011      	str	r1, [r2, #0]
 80180f2:	e7f5      	b.n	80180e0 <_strtoul_l.constprop.0+0xb8>
 80180f4:	2430      	movs	r4, #48	; 0x30
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d1b5      	bne.n	8018066 <_strtoul_l.constprop.0+0x3e>
 80180fa:	2308      	movs	r3, #8
 80180fc:	e7b3      	b.n	8018066 <_strtoul_l.constprop.0+0x3e>
 80180fe:	2c30      	cmp	r4, #48	; 0x30
 8018100:	d0a9      	beq.n	8018056 <_strtoul_l.constprop.0+0x2e>
 8018102:	230a      	movs	r3, #10
 8018104:	e7af      	b.n	8018066 <_strtoul_l.constprop.0+0x3e>
 8018106:	bf00      	nop
 8018108:	080183e0 	.word	0x080183e0

0801810c <_strtoul_r>:
 801810c:	f7ff bf8c 	b.w	8018028 <_strtoul_l.constprop.0>

08018110 <_malloc_usable_size_r>:
 8018110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018114:	1f18      	subs	r0, r3, #4
 8018116:	2b00      	cmp	r3, #0
 8018118:	bfbc      	itt	lt
 801811a:	580b      	ldrlt	r3, [r1, r0]
 801811c:	18c0      	addlt	r0, r0, r3
 801811e:	4770      	bx	lr

08018120 <_init>:
 8018120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018122:	bf00      	nop
 8018124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018126:	bc08      	pop	{r3}
 8018128:	469e      	mov	lr, r3
 801812a:	4770      	bx	lr

0801812c <_fini>:
 801812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801812e:	bf00      	nop
 8018130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018132:	bc08      	pop	{r3}
 8018134:	469e      	mov	lr, r3
 8018136:	4770      	bx	lr
