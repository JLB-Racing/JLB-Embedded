
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022d80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08022f80  08022f80  00032f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080238d4  080238d4  0004010c  2**0
                  CONTENTS
  4 .ARM          00000008  080238d4  080238d4  000338d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080238dc  080238dc  0004010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080238dc  080238dc  000338dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080238e0  080238e0  000338e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  080238e4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000396c  2000010c  080239f0  0004010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003a78  080239f0  00043a78  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0004010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040142  2**0
                  CONTENTS, READONLY
 13 .debug_info   00053884  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007c95  00000000  00000000  00093a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003df8  00000000  00000000  0009b6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003011  00000000  00000000  0009f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000382ae  00000000  00000000  000a24a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00041952  00000000  00000000  000da757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00167cc4  00000000  00000000  0011c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00012798  00000000  00000000  00283d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00296508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000010c 	.word	0x2000010c
 800021c:	00000000 	.word	0x00000000
 8000220:	08022f68 	.word	0x08022f68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000110 	.word	0x20000110
 800023c:	08022f68 	.word	0x08022f68

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b982 	b.w	8000f38 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	460f      	mov	r7, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d146      	bne.n	8000cea <__udivmoddi4+0x9e>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d95e      	bls.n	8000d20 <__udivmoddi4+0xd4>
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	b143      	cbz	r3, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	409c      	lsls	r4, r3
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	4317      	orrs	r7, r2
 8000c7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7e:	fa1f f58c 	uxth.w	r5, ip
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x5e>
 8000c98:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x5c>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f200 8134 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000ca8:	4639      	mov	r1, r7
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	fb00 f505 	mul.w	r5, r0, r5
 8000cba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x88>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x86>
 8000ccc:	42a5      	cmp	r5, r4
 8000cce:	f200 8119 	bhi.w	8000f04 <__udivmoddi4+0x2b8>
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11e      	cbz	r6, 8000ce6 <__udivmoddi4+0x9a>
 8000cde:	40dc      	lsrs	r4, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0xb4>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f000 80fc 	beq.w	8000eec <__udivmoddi4+0x2a0>
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d00:	fab3 f183 	clz	r1, r3
 8000d04:	2900      	cmp	r1, #0
 8000d06:	d14c      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d08:	42ab      	cmp	r3, r5
 8000d0a:	f0c0 80f2 	bcc.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f240 80ef 	bls.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d14:	4608      	mov	r0, r1
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e5      	beq.n	8000ce6 <__udivmoddi4+0x9a>
 8000d1a:	e9c6 4700 	strd	r4, r7, [r6]
 8000d1e:	e7e2      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xd8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f382 	clz	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 809f 	bne.w	8000e6c <__udivmoddi4+0x220>
 8000d2e:	1a8a      	subs	r2, r1, r2
 8000d30:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d3e:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d48:	fb07 f005 	mul.w	r0, r7, r5
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d90f      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d50:	eb1c 0202 	adds.w	r2, ip, r2
 8000d54:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d58:	bf2c      	ite	cs
 8000d5a:	f04f 0901 	movcs.w	r9, #1
 8000d5e:	f04f 0900 	movcc.w	r9, #0
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d903      	bls.n	8000d6e <__udivmoddi4+0x122>
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	f000 80ce 	beq.w	8000f0a <__udivmoddi4+0x2be>
 8000d6e:	4645      	mov	r5, r8
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d78:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d84:	42a7      	cmp	r7, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x14e>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x14c>
 8000d92:	42a7      	cmp	r7, r4
 8000d94:	f200 80b3 	bhi.w	8000efe <__udivmoddi4+0x2b2>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	1be4      	subs	r4, r4, r7
 8000d9c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da0:	e79c      	b.n	8000cdc <__udivmoddi4+0x90>
 8000da2:	f1c1 0420 	rsb	r4, r1, #32
 8000da6:	408b      	lsls	r3, r1
 8000da8:	fa05 fc01 	lsl.w	ip, r5, r1
 8000dac:	fa22 f704 	lsr.w	r7, r2, r4
 8000db0:	40e5      	lsrs	r5, r4
 8000db2:	408a      	lsls	r2, r1
 8000db4:	431f      	orrs	r7, r3
 8000db6:	fa20 f304 	lsr.w	r3, r0, r4
 8000dba:	4088      	lsls	r0, r1
 8000dbc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc0:	ea43 030c 	orr.w	r3, r3, ip
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb5 fef8 	udiv	lr, r5, r8
 8000dd0:	fb08 551e 	mls	r5, r8, lr, r5
 8000dd4:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ddc:	45a9      	cmp	r9, r5
 8000dde:	d90e      	bls.n	8000dfe <__udivmoddi4+0x1b2>
 8000de0:	197d      	adds	r5, r7, r5
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	bf2c      	ite	cs
 8000de8:	f04f 0b01 	movcs.w	fp, #1
 8000dec:	f04f 0b00 	movcc.w	fp, #0
 8000df0:	45a9      	cmp	r9, r5
 8000df2:	d903      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000df4:	f1bb 0f00 	cmp.w	fp, #0
 8000df8:	f000 808d 	beq.w	8000f16 <__udivmoddi4+0x2ca>
 8000dfc:	46d6      	mov	lr, sl
 8000dfe:	eba5 0509 	sub.w	r5, r5, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e0a:	fb08 5513 	mls	r5, r8, r3, r5
 8000e0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e12:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e16:	45ac      	cmp	ip, r5
 8000e18:	d906      	bls.n	8000e28 <__udivmoddi4+0x1dc>
 8000e1a:	197d      	adds	r5, r7, r5
 8000e1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e20:	d201      	bcs.n	8000e26 <__udivmoddi4+0x1da>
 8000e22:	45ac      	cmp	ip, r5
 8000e24:	d87e      	bhi.n	8000f24 <__udivmoddi4+0x2d8>
 8000e26:	4643      	mov	r3, r8
 8000e28:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e2c:	eba5 050c 	sub.w	r5, r5, ip
 8000e30:	fba3 9802 	umull	r9, r8, r3, r2
 8000e34:	4545      	cmp	r5, r8
 8000e36:	46ce      	mov	lr, r9
 8000e38:	46c4      	mov	ip, r8
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0x1f6>
 8000e3c:	d106      	bne.n	8000e4c <__udivmoddi4+0x200>
 8000e3e:	4548      	cmp	r0, r9
 8000e40:	d204      	bcs.n	8000e4c <__udivmoddi4+0x200>
 8000e42:	3b01      	subs	r3, #1
 8000e44:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e48:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d06f      	beq.n	8000f30 <__udivmoddi4+0x2e4>
 8000e50:	ebb0 020e 	subs.w	r2, r0, lr
 8000e54:	eb65 050c 	sbc.w	r5, r5, ip
 8000e58:	40ca      	lsrs	r2, r1
 8000e5a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e5e:	40cd      	lsrs	r5, r1
 8000e60:	4618      	mov	r0, r3
 8000e62:	4314      	orrs	r4, r2
 8000e64:	2100      	movs	r1, #0
 8000e66:	e9c6 4500 	strd	r4, r5, [r6]
 8000e6a:	e73c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	f1c3 0220 	rsb	r2, r3, #32
 8000e74:	4099      	lsls	r1, r3
 8000e76:	409c      	lsls	r4, r3
 8000e78:	40d5      	lsrs	r5, r2
 8000e7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e82:	fa1f f78c 	uxth.w	r7, ip
 8000e86:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e90:	0c11      	lsrs	r1, r2, #16
 8000e92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e96:	fb00 f507 	mul.w	r5, r0, r7
 8000e9a:	428d      	cmp	r5, r1
 8000e9c:	d90e      	bls.n	8000ebc <__udivmoddi4+0x270>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	bf2c      	ite	cs
 8000ea8:	f04f 0901 	movcs.w	r9, #1
 8000eac:	f04f 0900 	movcc.w	r9, #0
 8000eb0:	428d      	cmp	r5, r1
 8000eb2:	d902      	bls.n	8000eba <__udivmoddi4+0x26e>
 8000eb4:	f1b9 0f00 	cmp.w	r9, #0
 8000eb8:	d031      	beq.n	8000f1e <__udivmoddi4+0x2d2>
 8000eba:	4640      	mov	r0, r8
 8000ebc:	1b49      	subs	r1, r1, r5
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	fbb1 f5fe 	udiv	r5, r1, lr
 8000ec4:	fb0e 1115 	mls	r1, lr, r5, r1
 8000ec8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ecc:	fb05 f107 	mul.w	r1, r5, r7
 8000ed0:	4291      	cmp	r1, r2
 8000ed2:	d907      	bls.n	8000ee4 <__udivmoddi4+0x298>
 8000ed4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000edc:	d201      	bcs.n	8000ee2 <__udivmoddi4+0x296>
 8000ede:	4291      	cmp	r1, r2
 8000ee0:	d823      	bhi.n	8000f2a <__udivmoddi4+0x2de>
 8000ee2:	4645      	mov	r5, r8
 8000ee4:	1a52      	subs	r2, r2, r1
 8000ee6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eea:	e726      	b.n	8000d3a <__udivmoddi4+0xee>
 8000eec:	4631      	mov	r1, r6
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e6f9      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	e70b      	b.n	8000d16 <__udivmoddi4+0xca>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0x14e>
 8000f04:	4464      	add	r4, ip
 8000f06:	3802      	subs	r0, #2
 8000f08:	e6e4      	b.n	8000cd4 <__udivmoddi4+0x88>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	3902      	subs	r1, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e6c9      	b.n	8000caa <__udivmoddi4+0x5e>
 8000f16:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1a:	443d      	add	r5, r7
 8000f1c:	e76f      	b.n	8000dfe <__udivmoddi4+0x1b2>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	e7cb      	b.n	8000ebc <__udivmoddi4+0x270>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443d      	add	r5, r7
 8000f28:	e77e      	b.n	8000e28 <__udivmoddi4+0x1dc>
 8000f2a:	3d02      	subs	r5, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	e7d9      	b.n	8000ee4 <__udivmoddi4+0x298>
 8000f30:	4618      	mov	r0, r3
 8000f32:	4631      	mov	r1, r6
 8000f34:	e6d7      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	e007      	b.n	8000f60 <Pack_measurements_1_jlb+0x24>
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	75fa      	strb	r2, [r7, #23]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9f4      	bls.n	8000f50 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	b2d9      	uxtb	r1, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	430b      	orrs	r3, r1
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	430b      	orrs	r3, r1
 8000f96:	b2d9      	uxtb	r1, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	79db      	ldrb	r3, [r3, #7]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2da      	uxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	7a5b      	ldrb	r3, [r3, #9]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7a9b      	ldrb	r3, [r3, #10]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	7adb      	ldrb	r3, [r3, #11]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3302      	adds	r3, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3303      	adds	r3, #3
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7b5b      	ldrb	r3, [r3, #13]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	7b9b      	ldrb	r3, [r3, #14]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7bdb      	ldrb	r3, [r3, #15]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3303      	adds	r3, #3
 8001084:	430a      	orrs	r2, r1
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3304      	adds	r3, #4
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	7c1b      	ldrb	r3, [r3, #16]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	7c5b      	ldrb	r3, [r3, #17]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	7c9b      	ldrb	r3, [r3, #18]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	7cdb      	ldrb	r3, [r3, #19]
 80010c2:	019b      	lsls	r3, r3, #6
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3304      	adds	r3, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3305      	adds	r3, #5
 80010d8:	7819      	ldrb	r1, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7d5b      	ldrb	r3, [r3, #21]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	7d9b      	ldrb	r3, [r3, #22]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	7ddb      	ldrb	r3, [r3, #23]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3305      	adds	r3, #5
 8001118:	430a      	orrs	r2, r1
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3306      	adds	r3, #6
 8001122:	7819      	ldrb	r1, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	7e5b      	ldrb	r3, [r3, #25]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	7e9b      	ldrb	r3, [r3, #26]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	7edb      	ldrb	r3, [r3, #27]
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3306      	adds	r3, #6
 8001162:	430a      	orrs	r2, r1
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3307      	adds	r3, #7
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	b2da      	uxtb	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7f5b      	ldrb	r3, [r3, #29]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	7f9b      	ldrb	r3, [r3, #30]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b2da      	uxtb	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	7fdb      	ldrb	r3, [r3, #31]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3307      	adds	r3, #7
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2208      	movs	r2, #8
 80011b6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	e007      	b.n	80011f0 <Pack_measurements_2_jlb+0x24>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	75fa      	strb	r2, [r7, #23]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d9f4      	bls.n	80011e0 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	b2d9      	uxtb	r1, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	b2db      	uxtb	r3, r3
 8001212:	430b      	orrs	r3, r1
 8001214:	b2d9      	uxtb	r1, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001222:	b2db      	uxtb	r3, r3
 8001224:	430b      	orrs	r3, r1
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	430b      	orrs	r3, r1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3301      	adds	r3, #1
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	799b      	ldrb	r3, [r3, #6]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	79db      	ldrb	r3, [r3, #7]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3302      	adds	r3, #2
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7a1b      	ldrb	r3, [r3, #8]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	b2da      	uxtb	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	7a5b      	ldrb	r3, [r3, #9]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7a9b      	ldrb	r3, [r3, #10]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7adb      	ldrb	r3, [r3, #11]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3302      	adds	r3, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3303      	adds	r3, #3
 80012d4:	7819      	ldrb	r1, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7b5b      	ldrb	r3, [r3, #13]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	7b9b      	ldrb	r3, [r3, #14]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7bdb      	ldrb	r3, [r3, #15]
 8001308:	019b      	lsls	r3, r3, #6
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3303      	adds	r3, #3
 8001314:	430a      	orrs	r2, r1
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3304      	adds	r3, #4
 800131e:	7819      	ldrb	r1, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	7c1b      	ldrb	r3, [r3, #16]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7c5b      	ldrb	r3, [r3, #17]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	7c9b      	ldrb	r3, [r3, #18]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	7cdb      	ldrb	r3, [r3, #19]
 8001352:	019b      	lsls	r3, r3, #6
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3304      	adds	r3, #4
 800135e:	430a      	orrs	r2, r1
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3305      	adds	r3, #5
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7d1b      	ldrb	r3, [r3, #20]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7d5b      	ldrb	r3, [r3, #21]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7d9b      	ldrb	r3, [r3, #22]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7ddb      	ldrb	r3, [r3, #23]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3305      	adds	r3, #5
 80013a8:	430a      	orrs	r2, r1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3306      	adds	r3, #6
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	7e9b      	ldrb	r3, [r3, #26]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	7edb      	ldrb	r3, [r3, #27]
 80013e6:	019b      	lsls	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3306      	adds	r3, #6
 80013f2:	430a      	orrs	r2, r1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3307      	adds	r3, #7
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7f5b      	ldrb	r3, [r3, #29]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	7f9b      	ldrb	r3, [r3, #30]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	7fdb      	ldrb	r3, [r3, #31]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3307      	adds	r3, #7
 800143c:	430a      	orrs	r2, r1
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2208      	movs	r2, #8
 8001446:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 800144e:	2302      	movs	r3, #2
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0000      	movs	r0, r0
	...

08001460 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e007      	b.n	8001484 <Pack_measurements_3_jlb+0x24>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	75fa      	strb	r2, [r7, #23]
 800147a:	461a      	mov	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9f4      	bls.n	8001474 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001490:	a34f      	add	r3, pc, #316	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7fe feeb 	bl	8000270 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	a34d      	add	r3, pc, #308	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f9c2 	bl	8000830 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb42 	bl	8000b3c <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014c6:	a342      	add	r3, pc, #264	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fed0 	bl	8000270 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a33f      	add	r3, pc, #252	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9a7 	bl	8000830 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb27 	bl	8000b3c <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014fc:	a334      	add	r3, pc, #208	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7fe feb5 	bl	8000270 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a332      	add	r3, pc, #200	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f98c 	bl	8000830 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb0c 	bl	8000b3c <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3301      	adds	r3, #1
 8001542:	7819      	ldrb	r1, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3302      	adds	r3, #2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8a1b      	ldrh	r3, [r3, #16]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3302      	adds	r3, #2
 8001568:	430a      	orrs	r2, r1
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3303      	adds	r3, #3
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8a1b      	ldrh	r3, [r3, #16]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3303      	adds	r3, #3
 8001582:	430a      	orrs	r2, r1
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	3304      	adds	r3, #4
 800158c:	7819      	ldrb	r1, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8c1b      	ldrh	r3, [r3, #32]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3304      	adds	r3, #4
 8001598:	430a      	orrs	r2, r1
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3305      	adds	r3, #5
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8c1b      	ldrh	r3, [r3, #32]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3305      	adds	r3, #5
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80015c4:	2303      	movs	r3, #3
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	b4395810 	.word	0xb4395810
 80015d4:	401a36c8 	.word	0x401a36c8
 80015d8:	eb1c432d 	.word	0xeb1c432d
 80015dc:	3f2a36e2 	.word	0x3f2a36e2

080015e0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e007      	b.n	8001604 <Pack_measurements_4_jlb+0x24>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	75fa      	strb	r2, [r7, #23]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b07      	cmp	r3, #7
 8001608:	d9f4      	bls.n	80015f4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001610:	a34f      	add	r3, pc, #316	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fe2b 	bl	8000270 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a34d      	add	r3, pc, #308	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f902 	bl	8000830 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa82 	bl	8000b3c <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001646:	a342      	add	r3, pc, #264	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe10 	bl	8000270 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	a33f      	add	r3, pc, #252	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8e7 	bl	8000830 <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa67 	bl	8000b3c <__aeabi_d2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800167c:	a334      	add	r3, pc, #208	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fdf5 	bl	8000270 <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a332      	add	r3, pc, #200	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f8cc 	bl	8000830 <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa4c 	bl	8000b3c <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3302      	adds	r3, #2
 80016dc:	7819      	ldrb	r1, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8a1b      	ldrh	r3, [r3, #16]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3302      	adds	r3, #2
 80016e8:	430a      	orrs	r2, r1
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3303      	adds	r3, #3
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8a1b      	ldrh	r3, [r3, #16]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3303      	adds	r3, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3304      	adds	r3, #4
 800170c:	7819      	ldrb	r1, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8c1b      	ldrh	r3, [r3, #32]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3304      	adds	r3, #4
 8001718:	430a      	orrs	r2, r1
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3305      	adds	r3, #5
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8c1b      	ldrh	r3, [r3, #32]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3305      	adds	r3, #5
 8001732:	430a      	orrs	r2, r1
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2208      	movs	r2, #8
 800173c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001744:	2304      	movs	r3, #4
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	70a3d70a 	.word	0x70a3d70a
 8001754:	4030623d 	.word	0x4030623d
 8001758:	d2f1a9fc 	.word	0xd2f1a9fc
 800175c:	3f40624d 	.word	0x3f40624d

08001760 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	e007      	b.n	8001784 <Pack_measurements_5_jlb+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	75fa      	strb	r2, [r7, #23]
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d9f4      	bls.n	8001774 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->motor_rpm_ro = (uint16_t) JLB_motor_rpm_ro_toS(_m->motor_rpm_phys);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001790:	a331      	add	r3, pc, #196	; (adr r3, 8001858 <Pack_measurements_5_jlb+0xf8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fd6b 	bl	8000270 <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a32f      	add	r3, pc, #188	; (adr r3, 8001860 <Pack_measurements_5_jlb+0x100>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f842 	bl	8000830 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f9c2 	bl	8000b3c <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c6:	a328      	add	r3, pc, #160	; (adr r3, 8001868 <Pack_measurements_5_jlb+0x108>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f830 	bl	8000830 <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9b0 	bl	8000b3c <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->motor_rpm_ro & (0xFFU)) );
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->motor_rpm_ro >> 8U) & (0xFFU)) );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3301      	adds	r3, #1
 80017fa:	7819      	ldrb	r1, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3301      	adds	r3, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3302      	adds	r3, #2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8a1b      	ldrh	r3, [r3, #16]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3302      	adds	r3, #2
 8001820:	430a      	orrs	r2, r1
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3303      	adds	r3, #3
 800182a:	7819      	ldrb	r1, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8a1b      	ldrh	r3, [r3, #16]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3303      	adds	r3, #3
 800183a:	430a      	orrs	r2, r1
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2208      	movs	r2, #8
 8001844:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 800184c:	2305      	movs	r3, #5
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	40999980 	.word	0x40999980
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fa99999 	.word	0x3fa99999
 8001868:	eb1c432d 	.word	0xeb1c432d
 800186c:	3f1a36e2 	.word	0x3f1a36e2

08001870 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]
 8001882:	e007      	b.n	8001894 <Pack_odometry_1_jlb+0x24>
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	75fa      	strb	r2, [r7, #23]
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d9f4      	bls.n	8001884 <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018a0:	a34f      	add	r3, pc, #316	; (adr r3, 80019e0 <Pack_odometry_1_jlb+0x170>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fce3 	bl	8000270 <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	a34d      	add	r3, pc, #308	; (adr r3, 80019e8 <Pack_odometry_1_jlb+0x178>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe ffba 	bl	8000830 <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f93a 	bl	8000b3c <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018d6:	a346      	add	r3, pc, #280	; (adr r3, 80019f0 <Pack_odometry_1_jlb+0x180>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fcc8 	bl	8000270 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	a343      	add	r3, pc, #268	; (adr r3, 80019f8 <Pack_odometry_1_jlb+0x188>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe ff9f 	bl	8000830 <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f91f 	bl	8000b3c <__aeabi_d2uiz>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800190c:	a338      	add	r3, pc, #224	; (adr r3, 80019f0 <Pack_odometry_1_jlb+0x180>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fcad 	bl	8000270 <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	a336      	add	r3, pc, #216	; (adr r3, 80019f8 <Pack_odometry_1_jlb+0x188>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ff84 	bl	8000830 <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f904 	bl	8000b3c <__aeabi_d2uiz>
 8001934:	4603      	mov	r3, r0
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	7819      	ldrb	r1, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3302      	adds	r3, #2
 800196c:	7819      	ldrb	r1, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8a1b      	ldrh	r3, [r3, #16]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3302      	adds	r3, #2
 8001978:	430a      	orrs	r2, r1
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3303      	adds	r3, #3
 8001982:	7819      	ldrb	r1, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8a1b      	ldrh	r3, [r3, #16]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3303      	adds	r3, #3
 8001992:	430a      	orrs	r2, r1
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3304      	adds	r3, #4
 800199c:	7819      	ldrb	r1, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8c1b      	ldrh	r3, [r3, #32]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3304      	adds	r3, #4
 80019a8:	430a      	orrs	r2, r1
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3305      	adds	r3, #5
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8c1b      	ldrh	r3, [r3, #32]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3305      	adds	r3, #5
 80019c2:	430a      	orrs	r2, r1
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2208      	movs	r2, #8
 80019cc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 80019d4:	2311      	movs	r3, #17
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	b4395810 	.word	0xb4395810
 80019e4:	401a36c8 	.word	0x401a36c8
 80019e8:	eb1c432d 	.word	0xeb1c432d
 80019ec:	3f2a36e2 	.word	0x3f2a36e2
 80019f0:	70a3d70a 	.word	0x70a3d70a
 80019f4:	4030623d 	.word	0x4030623d
 80019f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019fc:	3f40624d 	.word	0x3f40624d

08001a00 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
 8001a12:	e007      	b.n	8001a24 <Pack_odometry_2_jlb+0x24>
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	75fa      	strb	r2, [r7, #23]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d9f4      	bls.n	8001a14 <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a30:	a335      	add	r3, pc, #212	; (adr r3, 8001b08 <Pack_odometry_2_jlb+0x108>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fc1b 	bl	8000270 <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	a333      	add	r3, pc, #204	; (adr r3, 8001b10 <Pack_odometry_2_jlb+0x110>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe fef2 	bl	8000830 <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f872 	bl	8000b3c <__aeabi_d2uiz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a66:	a32c      	add	r3, pc, #176	; (adr r3, 8001b18 <Pack_odometry_2_jlb+0x118>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fc00 	bl	8000270 <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	a329      	add	r3, pc, #164	; (adr r3, 8001b20 <Pack_odometry_2_jlb+0x120>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fed7 	bl	8000830 <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff f857 	bl	8000b3c <__aeabi_d2uiz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	7819      	ldrb	r1, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3301      	adds	r3, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	7819      	ldrb	r1, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8a1b      	ldrh	r3, [r3, #16]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3303      	adds	r3, #3
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8a1b      	ldrh	r3, [r3, #16]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3303      	adds	r3, #3
 8001aec:	430a      	orrs	r2, r1
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2208      	movs	r2, #8
 8001af6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001afe:	2312      	movs	r3, #18
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	b4395810 	.word	0xb4395810
 8001b0c:	401a36c8 	.word	0x401a36c8
 8001b10:	eb1c432d 	.word	0xeb1c432d
 8001b14:	3f2a36e2 	.word	0x3f2a36e2
 8001b18:	70a3d70a 	.word	0x70a3d70a
 8001b1c:	4030623d 	.word	0x4030623d
 8001b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b24:	3f40624d 	.word	0x3f40624d

08001b28 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]
 8001b3a:	e007      	b.n	8001b4c <Pack_logic_1_jlb+0x24>
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	75fa      	strb	r2, [r7, #23]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4413      	add	r3, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d9f4      	bls.n	8001b3c <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b58:	a369      	add	r3, pc, #420	; (adr r3, 8001d00 <Pack_logic_1_jlb+0x1d8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fb87 	bl	8000270 <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a367      	add	r3, pc, #412	; (adr r3, 8001d08 <Pack_logic_1_jlb+0x1e0>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fe5e 	bl	8000830 <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ffde 	bl	8000b3c <__aeabi_d2uiz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b8e:	a360      	add	r3, pc, #384	; (adr r3, 8001d10 <Pack_logic_1_jlb+0x1e8>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fb6c 	bl	8000270 <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	a35d      	add	r3, pc, #372	; (adr r3, 8001d18 <Pack_logic_1_jlb+0x1f0>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fe43 	bl	8000830 <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7fe ffc3 	bl	8000b3c <__aeabi_d2uiz>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001bc4:	a34e      	add	r3, pc, #312	; (adr r3, 8001d00 <Pack_logic_1_jlb+0x1d8>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fb51 	bl	8000270 <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	a34c      	add	r3, pc, #304	; (adr r3, 8001d08 <Pack_logic_1_jlb+0x1e0>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fe28 	bl	8000830 <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ffa8 	bl	8000b3c <__aeabi_d2uiz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bfa:	a349      	add	r3, pc, #292	; (adr r3, 8001d20 <Pack_logic_1_jlb+0x1f8>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fb36 	bl	8000270 <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	a346      	add	r3, pc, #280	; (adr r3, 8001d28 <Pack_logic_1_jlb+0x200>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fe0d 	bl	8000830 <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff8d 	bl	8000b3c <__aeabi_d2uiz>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	7819      	ldrb	r1, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	7819      	ldrb	r1, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8a1b      	ldrh	r3, [r3, #16]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3302      	adds	r3, #2
 8001c66:	430a      	orrs	r2, r1
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3303      	adds	r3, #3
 8001c70:	7819      	ldrb	r1, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8a1b      	ldrh	r3, [r3, #16]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	430a      	orrs	r2, r1
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	7819      	ldrb	r1, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8c1b      	ldrh	r3, [r3, #32]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3304      	adds	r3, #4
 8001c96:	430a      	orrs	r2, r1
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8c1b      	ldrh	r3, [r3, #32]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3305      	adds	r3, #5
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3306      	adds	r3, #6
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3306      	adds	r3, #6
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3307      	adds	r3, #7
 8001cd0:	7819      	ldrb	r1, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3307      	adds	r3, #7
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 8001cf2:	2321      	movs	r3, #33	; 0x21
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	f3af 8000 	nop.w
 8001d00:	b4395810 	.word	0xb4395810
 8001d04:	400a36c8 	.word	0x400a36c8
 8001d08:	eb1c432d 	.word	0xeb1c432d
 8001d0c:	3f1a36e2 	.word	0x3f1a36e2
 8001d10:	70a3d70a 	.word	0x70a3d70a
 8001d14:	4030623d 	.word	0x4030623d
 8001d18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d1c:	3f40624d 	.word	0x3f40624d
 8001d20:	b4395810 	.word	0xb4395810
 8001d24:	3ffa36c8 	.word	0x3ffa36c8
 8001d28:	eb1c432d 	.word	0xeb1c432d
 8001d2c:	3f0a36e2 	.word	0x3f0a36e2

08001d30 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
 8001d42:	e007      	b.n	8001d54 <Pack_logic_2_jlb+0x24>
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	75fa      	strb	r2, [r7, #23]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4413      	add	r3, r2
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d9f4      	bls.n	8001d44 <Pack_logic_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->state & (0xFFU)) );
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	7819      	ldrb	r1, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	785a      	ldrb	r2, [r3, #1]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3302      	adds	r3, #2
 8001d82:	7819      	ldrb	r1, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	789a      	ldrb	r2, [r3, #2]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3303      	adds	r3, #3
 8001d96:	7819      	ldrb	r1, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	78da      	ldrb	r2, [r3, #3]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	430a      	orrs	r2, r1
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3304      	adds	r3, #4
 8001daa:	7819      	ldrb	r1, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 8001dde:	2322      	movs	r3, #34	; 0x22
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001dfc:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e06:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e10:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e1a:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e24:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e2e:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e38:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e42:	81da      	strh	r2, [r3, #14]

	vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_ADC_ConvCpltCallback+0x74>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f01b fde1 	bl	801da10 <vTaskResume>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000128 	.word	0x20000128
 8001e5c:	20000148 	.word	0x20000148
 8001e60:	200002dc 	.word	0x200002dc

08001e64 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001e6c:	895b      	ldrh	r3, [r3, #10]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e76:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8001e8c:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001e8e:	89db      	ldrh	r3, [r3, #14]
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e98:	eddf 6a86 	vldr	s13, [pc, #536]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001eaa:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8001eae:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001eb0:	891b      	ldrh	r3, [r3, #8]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eba:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001ecc:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001ed2:	88db      	ldrh	r3, [r3, #6]
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001edc:	eddf 6a75 	vldr	s13, [pc, #468]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	4b73      	ldr	r3, [pc, #460]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001eee:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e0a1      	b.n	800203c <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a70      	ldr	r2, [pc, #448]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f08:	3304      	adds	r3, #4
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001f14:	2300      	movs	r3, #0
 8001f16:	71bb      	strb	r3, [r7, #6]
 8001f18:	e03a      	b.n	8001f90 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	f1c3 0305 	rsb	r3, r3, #5
 8001f20:	4618      	mov	r0, r3
 8001f22:	ed97 0a00 	vldr	s0, [r7]
 8001f26:	f000 f8d1 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f2a:	ec55 4b10 	vmov	r4, r5, d0
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <_Z18DistanceSensorTaskv+0x25c>)
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe faf7 	bl	800052c <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fb49 	bl	80005dc <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4a59      	ldr	r2, [pc, #356]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f56:	3304      	adds	r3, #4
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fae4 	bl	800052c <__aeabi_f2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe f980 	bl	8000270 <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	79fc      	ldrb	r4, [r7, #7]
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fdff 	bl	8000b7c <__aeabi_d2f>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	494e      	ldr	r1, [pc, #312]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f82:	1d23      	adds	r3, r4, #4
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	71bb      	strb	r3, [r7, #6]
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d9c1      	bls.n	8001f1a <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4a48      	ldr	r2, [pc, #288]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4a44      	ldr	r2, [pc, #272]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001faa:	3302      	adds	r3, #2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71bb      	strb	r3, [r7, #6]
 8001fb8:	e03a      	b.n	8002030 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	f1c3 0305 	rsb	r3, r3, #5
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	ed97 0a00 	vldr	s0, [r7]
 8001fc6:	f000 f881 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001fca:	ec55 4b10 	vmov	r4, r5, d0
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <_Z18DistanceSensorTaskv+0x260>)
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe faa7 	bl	800052c <__aeabi_f2d>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	f7fe faf9 	bl	80005dc <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4614      	mov	r4, r2
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4a31      	ldr	r2, [pc, #196]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa94 	bl	800052c <__aeabi_f2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f930 	bl	8000270 <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	79fc      	ldrb	r4, [r7, #7]
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7fe fdaf 	bl	8000b7c <__aeabi_d2f>
 800201e:	4602      	mov	r2, r0
 8002020:	4926      	ldr	r1, [pc, #152]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002022:	1da3      	adds	r3, r4, #6
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	3301      	adds	r3, #1
 800202e:	71bb      	strb	r3, [r7, #6]
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d9c1      	bls.n	8001fba <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	3301      	adds	r3, #1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f43f af5a 	beq.w	8001ef8 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002046:	edd3 7a06 	vldr	s15, [r3, #24]
 800204a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	da09      	bge.n	800206c <_Z18DistanceSensorTaskv+0x208>
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800205a:	edd3 7a07 	vldr	s15, [r3, #28]
 800205e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	db04      	blt.n	8002076 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e003      	b.n	800207e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800207c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002080:	edd3 7a08 	vldr	s15, [r3, #32]
 8002084:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800208e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002094:	ed93 7a08 	vldr	s14, [r3, #32]
 8002098:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80020c8 <_Z18DistanceSensorTaskv+0x264>
 800209c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 80020a2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000148 	.word	0x20000148
 80020b4:	45800000 	.word	0x45800000
 80020b8:	40533333 	.word	0x40533333
 80020bc:	20000158 	.word	0x20000158
 80020c0:	20000018 	.word	0x20000018
 80020c4:	20000000 	.word	0x20000000
 80020c8:	42c80000 	.word	0x42c80000

080020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020d6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe fa27 	bl	800052c <__aeabi_f2d>
 80020de:	4604      	mov	r4, r0
 80020e0:	460d      	mov	r5, r1
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f7fe fa10 	bl	8000508 <__aeabi_i2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	ec43 2b11 	vmov	d1, r2, r3
 80020f0:	ec45 4b10 	vmov	d0, r4, r5
 80020f4:	f01d f892 	bl	801f21c <pow>
 80020f8:	eeb0 7a40 	vmov.f32	s14, s0
 80020fc:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002100:	eeb0 0a47 	vmov.f32	s0, s14
 8002104:	eef0 0a67 	vmov.f32	s1, s15
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002110 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e05c      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	429a      	cmp	r2, r3
 8002140:	d103      	bne.n	800214a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	801a      	strh	r2, [r3, #0]
 8002148:	e053      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d927      	bls.n	80021a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	b29a      	uxth	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	b29b      	uxth	r3, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	b29b      	uxth	r3, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21a      	sxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	801a      	strh	r2, [r3, #0]
 800218c:	e031      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	b29b      	uxth	r3, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	e026      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	801a      	strh	r2, [r3, #0]
 80021d0:	e00f      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	20000188 	.word	0x20000188

08002208 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8002220:	f01b fd36 	bl	801dc90 <xTaskGetTickCount>
 8002224:	4603      	mov	r3, r0
 8002226:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 8002228:	491e      	ldr	r1, [pc, #120]	; (80022a4 <_Z12Encoder_TaskPv+0x9c>)
 800222a:	481f      	ldr	r0, [pc, #124]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 800222c:	f7ff ff70 	bl	8002110 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002232:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	1c59      	adds	r1, r3, #1
 800223a:	75f9      	strb	r1, [r7, #23]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	3318      	adds	r3, #24
 8002240:	443b      	add	r3, r7
 8002242:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d101      	bne.n	8002250 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8002258:	2300      	movs	r3, #0
 800225a:	75bb      	strb	r3, [r7, #22]
 800225c:	e018      	b.n	8002290 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002260:	ed93 7a02 	vldr	s14, [r3, #8]
 8002264:	7dbb      	ldrb	r3, [r7, #22]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	3318      	adds	r3, #24
 800226a:	443b      	add	r3, r7
 800226c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002278:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800227c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002286:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800228a:	7dbb      	ldrb	r3, [r7, #22]
 800228c:	3301      	adds	r3, #1
 800228e:	75bb      	strb	r3, [r7, #22]
 8002290:	7dbb      	ldrb	r3, [r7, #22]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d9e3      	bls.n	800225e <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f01b faa7 	bl	801d7f0 <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 80022a2:	e7c1      	b.n	8002228 <_Z12Encoder_TaskPv+0x20>
 80022a4:	20000764 	.word	0x20000764
 80022a8:	2000017c 	.word	0x2000017c

080022ac <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <_Z12CalculateRPMv+0x90>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	b2c8      	uxtb	r0, r1
 80022c4:	491e      	ldr	r1, [pc, #120]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022c6:	7008      	strb	r0, [r1, #0]
 80022c8:	491e      	ldr	r1, [pc, #120]	; (8002344 <_Z12CalculateRPMv+0x98>)
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]

	if(index == 5)
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d102      	bne.n	80022de <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 80022e4:	2300      	movs	r3, #0
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	e012      	b.n	8002310 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <_Z12CalculateRPMv+0x98>)
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80022fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fe:	ed97 7a00 	vldr	s14, [r7]
 8002302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002306:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	3301      	adds	r3, #1
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d9e9      	bls.n	80022ea <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 8002316:	edd7 7a00 	vldr	s15, [r7]
 800231a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002348 <_Z12CalculateRPMv+0x9c>
 800231e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002322:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	ee07 3a90 	vmov	s15, r3
}
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	2000017c 	.word	0x2000017c
 8002340:	20000189 	.word	0x20000189
 8002344:	2000018c 	.word	0x2000018c
 8002348:	bfae147b 	.word	0xbfae147b

0800234c <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	2364      	movs	r3, #100	; 0x64
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	21d6      	movs	r1, #214	; 0xd6
 8002364:	4808      	ldr	r0, [pc, #32]	; (8002388 <_Z15readByteFromIMUh+0x3c>)
 8002366:	f012 fb2d 	bl	80149c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800236a:	f107 020f 	add.w	r2, r7, #15
 800236e:	2364      	movs	r3, #100	; 0x64
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	21d7      	movs	r1, #215	; 0xd7
 8002376:	4804      	ldr	r0, [pc, #16]	; (8002388 <_Z15readByteFromIMUh+0x3c>)
 8002378:	f012 fc18 	bl	8014bac <HAL_I2C_Master_Receive>
	return ret;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200003b4 	.word	0x200003b4

0800238c <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <_Z8IMU_Taskv+0x1c4>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d13f      	bne.n	800241a <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800239a:	2300      	movs	r3, #0
 800239c:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800239e:	230f      	movs	r3, #15
 80023a0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 80023a2:	f107 0209 	add.w	r2, r7, #9
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	21d6      	movs	r1, #214	; 0xd6
 80023ae:	4869      	ldr	r0, [pc, #420]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 80023b0:	f012 fb08 	bl	80149c4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 80023b4:	f107 020a 	add.w	r2, r7, #10
 80023b8:	2364      	movs	r3, #100	; 0x64
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	21d7      	movs	r1, #215	; 0xd7
 80023c0:	4864      	ldr	r0, [pc, #400]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 80023c2:	f012 fbf3 	bl	8014bac <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 80023c6:	7abb      	ldrb	r3, [r7, #10]
 80023c8:	2b6a      	cmp	r3, #106	; 0x6a
 80023ca:	f040 80bd 	bne.w	8002548 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 80023ce:	f246 0310 	movw	r3, #24592	; 0x6010
 80023d2:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 80023d4:	2311      	movs	r3, #17
 80023d6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80023d8:	1d3a      	adds	r2, r7, #4
 80023da:	2364      	movs	r3, #100	; 0x64
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2302      	movs	r3, #2
 80023e0:	21d6      	movs	r1, #214	; 0xd6
 80023e2:	485c      	ldr	r0, [pc, #368]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 80023e4:	f012 faee 	bl	80149c4 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 80023e8:	2012      	movs	r0, #18
 80023ea:	f7ff ffaf 	bl	800234c <_Z15readByteFromIMUh>
 80023ee:	4603      	mov	r3, r0
 80023f0:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 80023fa:	2312      	movs	r3, #18
 80023fc:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002402:	1d3a      	adds	r2, r7, #4
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2302      	movs	r3, #2
 800240a:	21d6      	movs	r1, #214	; 0xd6
 800240c:	4851      	ldr	r0, [pc, #324]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 800240e:	f012 fad9 	bl	80149c4 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 8002412:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <_Z8IMU_Taskv+0x1c4>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e097      	b.n	800254a <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 800241a:	2300      	movs	r3, #0
 800241c:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 800241e:	231e      	movs	r3, #30
 8002420:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8002422:	1cba      	adds	r2, r7, #2
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	21d6      	movs	r1, #214	; 0xd6
 800242c:	4849      	ldr	r0, [pc, #292]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 800242e:	f012 fac9 	bl	80149c4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 8002432:	1cfa      	adds	r2, r7, #3
 8002434:	2364      	movs	r3, #100	; 0x64
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	21d7      	movs	r1, #215	; 0xd7
 800243c:	4845      	ldr	r0, [pc, #276]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 800243e:	f012 fbb5 	bl	8014bac <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d053      	beq.n	80024f4 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 800244c:	2028      	movs	r0, #40	; 0x28
 800244e:	f7ff ff7d 	bl	800234c <_Z15readByteFromIMUh>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 8002456:	2029      	movs	r0, #41	; 0x29
 8002458:	f7ff ff78 	bl	800234c <_Z15readByteFromIMUh>
 800245c:	4603      	mov	r3, r0
 800245e:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002460:	7bbb      	ldrb	r3, [r7, #14]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	b21a      	sxth	r2, r3
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002476:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002558 <_Z8IMU_Taskv+0x1cc>
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 8002480:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8002484:	202a      	movs	r0, #42	; 0x2a
 8002486:	f7ff ff61 	bl	800234c <_Z15readByteFromIMUh>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 800248e:	202a      	movs	r0, #42	; 0x2a
 8002490:	f7ff ff5c 	bl	800234c <_Z15readByteFromIMUh>
 8002494:	4603      	mov	r3, r0
 8002496:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21a      	sxth	r2, r3
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002558 <_Z8IMU_Taskv+0x1cc>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 80024b8:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 80024bc:	202c      	movs	r0, #44	; 0x2c
 80024be:	f7ff ff45 	bl	800234c <_Z15readByteFromIMUh>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 80024c6:	202c      	movs	r0, #44	; 0x2c
 80024c8:	f7ff ff40 	bl	800234c <_Z15readByteFromIMUh>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	b21a      	sxth	r2, r3
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21b      	sxth	r3, r3
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002558 <_Z8IMU_Taskv+0x1cc>
 80024ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 80024f0:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d025      	beq.n	800254a <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 80024fe:	2026      	movs	r0, #38	; 0x26
 8002500:	f7ff ff24 	bl	800234c <_Z15readByteFromIMUh>
 8002504:	4603      	mov	r3, r0
 8002506:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 8002508:	2027      	movs	r0, #39	; 0x27
 800250a:	f7ff ff1f 	bl	800234c <_Z15readByteFromIMUh>
 800250e:	4603      	mov	r3, r0
 8002510:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8002512:	7b3b      	ldrb	r3, [r7, #12]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	7b7b      	ldrb	r3, [r7, #13]
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002560 <_Z8IMU_Taskv+0x1d4>
 800252c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002530:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002564 <_Z8IMU_Taskv+0x1d8>
 8002534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002538:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002568 <_Z8IMU_Taskv+0x1dc>
 800253c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 8002542:	edc3 7a03 	vstr	s15, [r3, #12]
 8002546:	e000      	b.n	800254a <_Z8IMU_Taskv+0x1be>
			return;
 8002548:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200001a0 	.word	0x200001a0
 8002554:	200003b4 	.word	0x200003b4
 8002558:	3d79db23 	.word	0x3d79db23
 800255c:	200001a4 	.word	0x200001a4
 8002560:	407423e2 	.word	0x407423e2
 8002564:	447a0000 	.word	0x447a0000
 8002568:	3c8ef998 	.word	0x3c8ef998

0800256c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 800257a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800257e:	2211      	movs	r2, #17
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
 800258c:	e00a      	b.n	80025a4 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800258e:	f107 0116 	add.w	r1, r7, #22
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	2201      	movs	r2, #1
 8002598:	4821      	ldr	r0, [pc, #132]	; (8002620 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 800259a:	f014 ffe8 	bl	801756e <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	3301      	adds	r3, #1
 80025a2:	75fb      	strb	r3, [r7, #23]
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d9f1      	bls.n	800258e <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4619      	mov	r1, r3
 80025b6:	f012 f943 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3304      	adds	r3, #4
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3302      	adds	r3, #2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4619      	mov	r1, r3
 80025ca:	f012 f939 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	4619      	mov	r1, r3
 80025da:	f012 f931 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3304      	adds	r3, #4
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3302      	adds	r3, #2
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	4619      	mov	r1, r3
 80025ee:	f012 f927 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	f012 f91f 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	3302      	adds	r3, #2
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	4619      	mov	r1, r3
 8002612:	f012 f915 	bl	8014840 <HAL_GPIO_WritePin>

}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000650 	.word	0x20000650

08002624 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4619      	mov	r1, r3
 800263e:	f012 f8ff 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	3302      	adds	r3, #2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	4619      	mov	r1, r3
 8002652:	f012 f8f5 	bl	8014840 <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
 800265a:	e011      	b.n	8002680 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 800265c:	7dfb      	ldrb	r3, [r7, #23]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 800266a:	f107 0116 	add.w	r1, r7, #22
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	2201      	movs	r2, #1
 8002674:	482d      	ldr	r0, [pc, #180]	; (800272c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 8002676:	f014 ff7a 	bl	801756e <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	3301      	adds	r3, #1
 800267e:	75fb      	strb	r3, [r7, #23]
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b03      	cmp	r3, #3
 8002684:	d9ea      	bls.n	800265c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	4619      	mov	r1, r3
 8002692:	f012 f8d5 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	4619      	mov	r1, r3
 80026a2:	f012 f8cd 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	4619      	mov	r1, r3
 80026b2:	f012 f8c5 	bl	8014840 <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
 80026ba:	e011      	b.n	80026e0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 80026ca:	f107 0115 	add.w	r1, r7, #21
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	2201      	movs	r2, #1
 80026d4:	4815      	ldr	r0, [pc, #84]	; (800272c <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 80026d6:	f014 ff4a 	bl	801756e <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	3301      	adds	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d9ea      	bls.n	80026bc <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3302      	adds	r3, #2
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4619      	mov	r1, r3
 80026f6:	f012 f8a3 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3304      	adds	r3, #4
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	3302      	adds	r3, #2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	f012 f899 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3302      	adds	r3, #2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	4619      	mov	r1, r3
 800271e:	f012 f88f 	bl	8014840 <HAL_GPIO_WritePin>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000650 	.word	0x20000650

08002730 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	4619      	mov	r1, r3
 8002746:	f012 f87b 	bl	8014840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	2201      	movs	r2, #1
 8002758:	4619      	mov	r1, r3
 800275a:	f012 f871 	bl	8014840 <HAL_GPIO_WritePin>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 8002778:	2300      	movs	r3, #0
 800277a:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	2200      	movs	r2, #0
 8002792:	4619      	mov	r1, r3
 8002794:	f012 f854 	bl	8014840 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
 800279c:	e019      	b.n	80027d2 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x6a>
	{
		tmp[0] = i << 3u;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 80027a6:	f107 0114 	add.w	r1, r7, #20
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	2202      	movs	r2, #2
 80027b0:	4812      	ldr	r0, [pc, #72]	; (80027fc <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 80027b2:	f014 fedc 	bl	801756e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	1899      	adds	r1, r3, r2
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	2202      	movs	r2, #2
 80027c6:	480d      	ldr	r0, [pc, #52]	; (80027fc <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 80027c8:	f015 f83f 	bl	801784a <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	3301      	adds	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b07      	cmp	r3, #7
 80027d6:	d9e2      	bls.n	800279e <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	2201      	movs	r2, #1
 80027ee:	4619      	mov	r1, r3
 80027f0:	f012 f826 	bl	8014840 <HAL_GPIO_WritePin>

}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200005ec 	.word	0x200005ec

08002800 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b092      	sub	sp, #72	; 0x48
 8002804:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 8002806:	2300      	movs	r3, #0
 8002808:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800280c:	e0c0      	b.n	8002990 <_Z14LineSensorTaskv+0x190>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 800280e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <_Z14LineSensorTaskv+0x260>)
 8002816:	4a93      	ldr	r2, [pc, #588]	; (8002a64 <_Z14LineSensorTaskv+0x264>)
 8002818:	4991      	ldr	r1, [pc, #580]	; (8002a60 <_Z14LineSensorTaskv+0x260>)
 800281a:	4893      	ldr	r0, [pc, #588]	; (8002a68 <_Z14LineSensorTaskv+0x268>)
 800281c:	f7ff fea6 	bl	800256c <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <_Z14LineSensorTaskv+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 8002828:	bf00      	nop
 800282a:	4b90      	ldr	r3, [pc, #576]	; (8002a6c <_Z14LineSensorTaskv+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b95      	cmp	r3, #149	; 0x95
 8002836:	bf94      	ite	ls
 8002838:	2301      	movls	r3, #1
 800283a:	2300      	movhi	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f3      	bne.n	800282a <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 8002842:	2300      	movs	r3, #0
 8002844:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002848:	e093      	b.n	8002972 <_Z14LineSensorTaskv+0x172>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002852:	4987      	ldr	r1, [pc, #540]	; (8002a70 <_Z14LineSensorTaskv+0x270>)
 8002854:	4887      	ldr	r0, [pc, #540]	; (8002a74 <_Z14LineSensorTaskv+0x274>)
 8002856:	f7ff ff87 	bl	8002768 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002860:	4985      	ldr	r1, [pc, #532]	; (8002a78 <_Z14LineSensorTaskv+0x278>)
 8002862:	4886      	ldr	r0, [pc, #536]	; (8002a7c <_Z14LineSensorTaskv+0x27c>)
 8002864:	f7ff ff80 	bl	8002768 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 8002868:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	3340      	adds	r3, #64	; 0x40
 8002870:	443b      	add	r3, r7
 8002872:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002876:	b29b      	uxth	r3, r3
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	b299      	uxth	r1, r3
 800287c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	3301      	adds	r3, #1
 8002884:	3340      	adds	r3, #64	; 0x40
 8002886:	443b      	add	r3, r7
 8002888:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800288c:	b29a      	uxth	r2, r3
 800288e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002892:	00d8      	lsls	r0, r3, #3
 8002894:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002898:	4403      	add	r3, r0
 800289a:	430a      	orrs	r2, r1
 800289c:	b291      	uxth	r1, r2
 800289e:	4a78      	ldr	r2, [pc, #480]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 80028a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 80028a4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80028a8:	3304      	adds	r3, #4
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	3340      	adds	r3, #64	; 0x40
 80028ae:	443b      	add	r3, r7
 80028b0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b299      	uxth	r1, r3
 80028ba:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80028be:	3304      	adds	r3, #4
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	3301      	adds	r3, #1
 80028c4:	3340      	adds	r3, #64	; 0x40
 80028c6:	443b      	add	r3, r7
 80028c8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028d2:	00d8      	lsls	r0, r3, #3
 80028d4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80028d8:	4403      	add	r3, r0
 80028da:	3304      	adds	r3, #4
 80028dc:	430a      	orrs	r2, r1
 80028de:	b291      	uxth	r1, r2
 80028e0:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 80028e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 80028e6:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	3340      	adds	r3, #64	; 0x40
 80028ee:	443b      	add	r3, r7
 80028f0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	b299      	uxth	r1, r3
 80028fa:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	3301      	adds	r3, #1
 8002902:	3340      	adds	r3, #64	; 0x40
 8002904:	443b      	add	r3, r7
 8002906:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800290a:	b29a      	uxth	r2, r3
 800290c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002910:	00d8      	lsls	r0, r3, #3
 8002912:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002916:	4403      	add	r3, r0
 8002918:	430a      	orrs	r2, r1
 800291a:	b291      	uxth	r1, r2
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 800291e:	3320      	adds	r3, #32
 8002920:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 8002924:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002928:	3304      	adds	r3, #4
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	3340      	adds	r3, #64	; 0x40
 800292e:	443b      	add	r3, r7
 8002930:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002934:	b29b      	uxth	r3, r3
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b299      	uxth	r1, r3
 800293a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 800293e:	3304      	adds	r3, #4
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	3301      	adds	r3, #1
 8002944:	3340      	adds	r3, #64	; 0x40
 8002946:	443b      	add	r3, r7
 8002948:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800294c:	b29a      	uxth	r2, r3
 800294e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002952:	00d8      	lsls	r0, r3, #3
 8002954:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002958:	4403      	add	r3, r0
 800295a:	3304      	adds	r3, #4
 800295c:	430a      	orrs	r2, r1
 800295e:	b291      	uxth	r1, r2
 8002960:	4a47      	ldr	r2, [pc, #284]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002962:	3320      	adds	r3, #32
 8002964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 8002968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800296c:	3301      	adds	r3, #1
 800296e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002976:	2b03      	cmp	r3, #3
 8002978:	f67f af67 	bls.w	800284a <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 800297c:	4938      	ldr	r1, [pc, #224]	; (8002a60 <_Z14LineSensorTaskv+0x260>)
 800297e:	4839      	ldr	r0, [pc, #228]	; (8002a64 <_Z14LineSensorTaskv+0x264>)
 8002980:	f7ff fed6 	bl	8002730 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 8002984:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002988:	3301      	adds	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002990:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002994:	2b03      	cmp	r3, #3
 8002996:	f77f af3a 	ble.w	800280e <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
	float denominator_r = 0.0f;
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t led_front = 0u;
 80029a6:	2300      	movs	r3, #0
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t led_rear = 0u;
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t front_max_index = 0u;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t rear_max_index = 0u;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	for(i = 1; i < 31; ++i)
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80029c0:	e035      	b.n	8002a2e <_Z14LineSensorTaskv+0x22e>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 80029c2:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80029c6:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 80029c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029d0:	492b      	ldr	r1, [pc, #172]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 80029d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d903      	bls.n	80029e2 <_Z14LineSensorTaskv+0x1e2>
		{
			front_max_index = i;
 80029da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 80029e2:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80029e6:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 80029e8:	3320      	adds	r3, #32
 80029ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80029f2:	4923      	ldr	r1, [pc, #140]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 80029f4:	3320      	adds	r3, #32
 80029f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d903      	bls.n	8002a06 <_Z14LineSensorTaskv+0x206>
		{
			rear_max_index = i;
 80029fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002a02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		}
		ls_data.front_detection[i] = true;
 8002a06:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 8002a14:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8002a22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a2e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002a32:	2b1e      	cmp	r3, #30
 8002a34:	ddc5      	ble.n	80029c2 <_Z14LineSensorTaskv+0x1c2>
	}

	ls_data.front_detection[0] = true;
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <_Z14LineSensorTaskv+0x280>)
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002a5c:	e0a7      	b.n	8002bae <_Z14LineSensorTaskv+0x3ae>
 8002a5e:	bf00      	nop
 8002a60:	20000068 	.word	0x20000068
 8002a64:	2000006c 	.word	0x2000006c
 8002a68:	20000060 	.word	0x20000060
 8002a6c:	200007fc 	.word	0x200007fc
 8002a70:	20000040 	.word	0x20000040
 8002a74:	20000030 	.word	0x20000030
 8002a78:	20000058 	.word	0x20000058
 8002a7c:	20000048 	.word	0x20000048
 8002a80:	200001bc 	.word	0x200001bc
	{
		ls_data.position_front += (float)((i - 15.5f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002a86:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002a8a:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a96:	eef2 6a0f 	vmov.f32	s13, #47	; 0x41780000  15.5
 8002a9a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a9e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002aa2:	4a5f      	ldr	r2, [pc, #380]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab8:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002aba:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 15.5f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002abe:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002ac0:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8002ac4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	eef2 6a0f 	vmov.f32	s13, #47	; 0x41780000  15.5
 8002ad4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ad8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002ade:	3320      	adds	r3, #32
 8002ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002af6:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 8002afa:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002afe:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		denominator_r += (float)(ls_data.adc_values_r[i]);
 8002b18:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b1c:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002b1e:	3320      	adds	r3, #32
 8002b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		if(ls_data.adc_values_f[i] > 1400)
 8002b38:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b3c:	4a38      	ldr	r2, [pc, #224]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b42:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002b46:	d911      	bls.n	8002b6c <_Z14LineSensorTaskv+0x36c>
		{
			led_front |= 0x70000000 >> (i-1);
 8002b48:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002b52:	fa42 f303 	asr.w	r3, r2, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
			ls_data.front_detection[i] = false;
 8002b5e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b62:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002b64:	4413      	add	r3, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 1400)
 8002b6c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b70:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002b72:	3320      	adds	r3, #32
 8002b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b78:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8002b7c:	d911      	bls.n	8002ba2 <_Z14LineSensorTaskv+0x3a2>
		{
			led_rear |= 0x70000000 >> (i-1);
 8002b7e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002b88:	fa42 f303 	asr.w	r3, r2, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	4313      	orrs	r3, r2
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
			ls_data.rear_detection[i] = false;
 8002b94:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002b9a:	4413      	add	r3, r2
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8002ba2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002bae:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8002bb2:	2b1e      	cmp	r3, #30
 8002bb4:	f77f af66 	ble.w	8002a84 <_Z14LineSensorTaskv+0x284>
		}
	}

	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <_Z14LineSensorTaskv+0x424>)
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <_Z14LineSensorTaskv+0x428>)
 8002bc4:	4919      	ldr	r1, [pc, #100]	; (8002c2c <_Z14LineSensorTaskv+0x42c>)
 8002bc6:	481a      	ldr	r0, [pc, #104]	; (8002c30 <_Z14LineSensorTaskv+0x430>)
 8002bc8:	f7ff fd2c 	bl	8002624 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>

	ls_data.position_front = ls_data.position_front * 2.5f / 100.0f / denominator_f;
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002bce:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8002bd2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bda:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002c34 <_Z14LineSensorTaskv+0x434>
 8002bde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002be2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002bec:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	ls_data.position_rear = -1.0f * ls_data.position_rear * 2.5f / 100.0f / denominator_r;
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002bf2:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002bf6:	eef1 7a67 	vneg.f32	s15, s15
 8002bfa:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c02:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002c34 <_Z14LineSensorTaskv+0x434>
 8002c06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c12:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <_Z14LineSensorTaskv+0x420>)
 8002c14:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4


#endif
}
 8002c18:	bf00      	nop
 8002c1a:	3740      	adds	r7, #64	; 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200001bc 	.word	0x200001bc
 8002c24:	20000088 	.word	0x20000088
 8002c28:	20000080 	.word	0x20000080
 8002c2c:	2000007c 	.word	0x2000007c
 8002c30:	20000074 	.word	0x20000074
 8002c34:	42c80000 	.word	0x42c80000

08002c38 <_Z16MotorControlTaskv>:
extern uint32_t usWidth_throttle;

float pi_integral_error = 0.0f;

void MotorControlTask()
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0

	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8002c3e:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <_Z16MotorControlTaskv+0x18c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002c46:	d90a      	bls.n	8002c5e <_Z16MotorControlTaskv+0x26>
 8002c48:	4b5e      	ldr	r3, [pc, #376]	; (8002dc4 <_Z16MotorControlTaskv+0x18c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002c50:	d205      	bcs.n	8002c5e <_Z16MotorControlTaskv+0x26>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2108      	movs	r1, #8
 8002c56:	485c      	ldr	r0, [pc, #368]	; (8002dc8 <_Z16MotorControlTaskv+0x190>)
 8002c58:	f011 fdf2 	bl	8014840 <HAL_GPIO_WritePin>
 8002c5c:	e008      	b.n	8002c70 <_Z16MotorControlTaskv+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2108      	movs	r1, #8
 8002c62:	4859      	ldr	r0, [pc, #356]	; (8002dc8 <_Z16MotorControlTaskv+0x190>)
 8002c64:	f011 fdec 	bl	8014840 <HAL_GPIO_WritePin>
		pi_integral_error = 0.0f;
 8002c68:	4b58      	ldr	r3, [pc, #352]	; (8002dcc <_Z16MotorControlTaskv+0x194>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
	}
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8002c70:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <_Z16MotorControlTaskv+0x198>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c7c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8002dd4 <_Z16MotorControlTaskv+0x19c>
 8002c80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c84:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002dd8 <_Z16MotorControlTaskv+0x1a0>
 8002c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c94:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002c96:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	; (8002dd0 <_Z16MotorControlTaskv+0x198>)
 8002c9c:	885b      	ldrh	r3, [r3, #2]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ca6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002dd4 <_Z16MotorControlTaskv+0x19c>
 8002caa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cae:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002dd8 <_Z16MotorControlTaskv+0x1a0>
 8002cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002de0 <_Z16MotorControlTaskv+0x1a8>
 8002cba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cbe:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002de4 <_Z16MotorControlTaskv+0x1ac>
 8002cc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc6:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002cc8:	edc3 7a01 	vstr	s15, [r3, #4]

	float pi_error = motorcontrol.target_velocity - motorcontrol.actual_velocity;
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002cce:	ed93 7a03 	vldr	s14, [r3, #12]
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002cd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cdc:	edc7 7a01 	vstr	s15, [r7, #4]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
 8002ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ce4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002de8 <_Z16MotorControlTaskv+0x1b0>
 8002ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cec:	edc7 7a00 	vstr	s15, [r7]
	pi_integral_error += pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
 8002cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002dec <_Z16MotorControlTaskv+0x1b4>
 8002cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002df0 <_Z16MotorControlTaskv+0x1b8>
 8002d00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d04:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <_Z16MotorControlTaskv+0x194>)
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <_Z16MotorControlTaskv+0x194>)
 8002d10:	edc3 7a00 	vstr	s15, [r3]

	motorcontrol.duty_cycle = pi_integral_error + pi_proportional_error;
 8002d14:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <_Z16MotorControlTaskv+0x194>)
 8002d16:	ed93 7a00 	vldr	s14, [r3]
 8002d1a:	edd7 7a00 	vldr	s15, [r7]
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d24:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 8002d28:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d38:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d42:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002df4 <_Z16MotorControlTaskv+0x1bc>
 8002d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd01      	ble.n	8002d54 <_Z16MotorControlTaskv+0x11c>
 8002d50:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <_Z16MotorControlTaskv+0x1c0>)
 8002d52:	e001      	b.n	8002d58 <_Z16MotorControlTaskv+0x120>
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d5a:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.5f) ? 0.05f : motorcontrol.duty_cycle;
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d501      	bpl.n	8002d74 <_Z16MotorControlTaskv+0x13c>
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <_Z16MotorControlTaskv+0x1c4>)
 8002d72:	e001      	b.n	8002d78 <_Z16MotorControlTaskv+0x140>
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d7a:	6113      	str	r3, [r2, #16]

	//float duty_cycle = 0.6f;
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002e00 <_Z16MotorControlTaskv+0x1c8>
 8002d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <_Z16MotorControlTaskv+0x1cc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d92:	ee17 2a90 	vmov	r2, s15
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <_Z16MotorControlTaskv+0x1a4>)
 8002d9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d9e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e00 <_Z16MotorControlTaskv+0x1c8>
 8002da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002e00 <_Z16MotorControlTaskv+0x1c8>
 8002daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <_Z16MotorControlTaskv+0x1cc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db6:	ee17 2a90 	vmov	r2, s15
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	200002b4 	.word	0x200002b4
 8002dc8:	42021400 	.word	0x42021400
 8002dcc:	20000298 	.word	0x20000298
 8002dd0:	20000148 	.word	0x20000148
 8002dd4:	45800000 	.word	0x45800000
 8002dd8:	40533333 	.word	0x40533333
 8002ddc:	20000284 	.word	0x20000284
 8002de0:	3fd47ae1 	.word	0x3fd47ae1
 8002de4:	3c0ce704 	.word	0x3c0ce704
 8002de8:	3c54fdf4 	.word	0x3c54fdf4
 8002dec:	3dcccccd 	.word	0x3dcccccd
 8002df0:	43480000 	.word	0x43480000
 8002df4:	3f733333 	.word	0x3f733333
 8002df8:	3f733333 	.word	0x3f733333
 8002dfc:	3d4ccccd 	.word	0x3d4ccccd
 8002e00:	44e54000 	.word	0x44e54000
 8002e04:	200007b0 	.word	0x200007b0

08002e08 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	4903      	ldr	r1, [pc, #12]	; (8002e1c <_Z10Radio_Initv+0x14>)
 8002e10:	4803      	ldr	r0, [pc, #12]	; (8002e20 <_Z10Radio_Initv+0x18>)
 8002e12:	f017 fafd 	bl	801a410 <HAL_UART_Receive_IT>

}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000029c 	.word	0x2000029c
 8002e20:	2000049c 	.word	0x2000049c

08002e24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e009      	b.n	8002e46 <HAL_UART_RxCpltCallback+0x22>
    {
    	if(radio_rxBuffer[i] == '\r')
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	2b0d      	cmp	r3, #13
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_RxCpltCallback+0x1c>
    	{
    		length = i;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	3301      	adds	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b0b      	cmp	r3, #11
 8002e4a:	d9f2      	bls.n	8002e32 <HAL_UART_RxCpltCallback+0xe>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8002e4c:	7bbb      	ldrb	r3, [r7, #14]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d103      	bne.n	8002e5a <HAL_UART_RxCpltCallback+0x36>
    {
    	countdown_value = radio_rxBuffer[0];
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_UART_RxCpltCallback+0x98>)
 8002e58:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d115      	bne.n	8002e8c <HAL_UART_RxCpltCallback+0x68>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8002e60:	4915      	ldr	r1, [pc, #84]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002e62:	4817      	ldr	r0, [pc, #92]	; (8002ec0 <HAL_UART_RxCpltCallback+0x9c>)
 8002e64:	f7fd f9ec 	bl	8000240 <strcmp>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_UART_RxCpltCallback+0x52>
    	{
    		flood_active = true;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_UART_RxCpltCallback+0xa0>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
 8002e74:	e010      	b.n	8002e98 <HAL_UART_RxCpltCallback+0x74>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_UART_RxCpltCallback+0xa4>)
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_UART_RxCpltCallback+0xa8>)
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_UART_RxCpltCallback+0xac>)
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <HAL_UART_RxCpltCallback+0xb0>)
 8002e82:	4915      	ldr	r1, [pc, #84]	; (8002ed8 <HAL_UART_RxCpltCallback+0xb4>)
 8002e84:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002e86:	f01e fd23 	bl	80218d0 <siscanf>
 8002e8a:	e005      	b.n	8002e98 <HAL_UART_RxCpltCallback+0x74>
    	}
    }

    else
    {
    	flood_counter++;
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_UART_RxCpltCallback+0xb8>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_UART_RxCpltCallback+0xb8>)
 8002e96:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_UART_RxCpltCallback+0xb8>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b0a      	cmp	r3, #10
 8002e9e:	d902      	bls.n	8002ea6 <HAL_UART_RxCpltCallback+0x82>
    {
    	flood_active = false;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_UART_RxCpltCallback+0xa0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <HAL_UART_RxCpltCallback+0x94>)
 8002eaa:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <HAL_UART_RxCpltCallback+0xbc>)
 8002eac:	f017 fab0 	bl	801a410 <HAL_UART_Receive_IT>

}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2000029c 	.word	0x2000029c
 8002ebc:	2000008c 	.word	0x2000008c
 8002ec0:	08022f80 	.word	0x08022f80
 8002ec4:	200002a8 	.word	0x200002a8
 8002ec8:	200002b0 	.word	0x200002b0
 8002ecc:	200002ac 	.word	0x200002ac
 8002ed0:	200002ab 	.word	0x200002ab
 8002ed4:	200002aa 	.word	0x200002aa
 8002ed8:	08022f88 	.word	0x08022f88
 8002edc:	200002a9 	.word	0x200002a9
 8002ee0:	2000049c 	.word	0x2000049c

08002ee4 <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t compare = SERVO_NULL + ((angle)/ 90.0f * SERVO_RANGE);
 8002eee:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ef2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002f28 <_Z16SetSteeringAnglef+0x44>
 8002ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002efa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f2c <_Z16SetSteeringAnglef+0x48>
 8002efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f02:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002f2c <_Z16SetSteeringAnglef+0x48>
 8002f06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0e:	ee17 3a90 	vmov	r3, s15
 8002f12:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <_Z16SetSteeringAnglef+0x4c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	89fa      	ldrh	r2, [r7, #14]
 8002f1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	42b40000 	.word	0x42b40000
 8002f2c:	44bb8000 	.word	0x44bb8000
 8002f30:	20000848 	.word	0x20000848

08002f34 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7f1b      	ldrb	r3, [r3, #28]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d163      	bne.n	800300c <HAL_TIM_IC_CaptureCallback+0xd8>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8002f44:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10e      	bne.n	8002f6a <HAL_TIM_IC_CaptureCallback+0x36>
		{
			IC_Val1_prev = IC_Val1;
 8002f4c:	4b32      	ldr	r3, [pc, #200]	; (8003018 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a32      	ldr	r2, [pc, #200]	; (800301c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002f52:	6013      	str	r3, [r2, #0]
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8002f54:	210c      	movs	r1, #12
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f016 fa7e 	bl	8019458 <HAL_TIM_ReadCapturedValue>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a2e      	ldr	r2, [pc, #184]	; (8003018 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f60:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002f62:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}

	}
}
 8002f68:	e050      	b.n	800300c <HAL_TIM_IC_CaptureCallback+0xd8>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8002f6a:	210c      	movs	r1, #12
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f016 fa73 	bl	8019458 <HAL_TIM_ReadCapturedValue>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002f76:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d907      	bls.n	8002f94 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Val2-IC_Val1;
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	4a25      	ldr	r2, [pc, #148]	; (8003024 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00d      	b.n	8002fb0 <HAL_TIM_IC_CaptureCallback+0x7c>
			else if (IC_Val1 > IC_Val2)
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b21      	ldr	r3, [pc, #132]	; (8003020 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d907      	bls.n	8002fb0 <HAL_TIM_IC_CaptureCallback+0x7c>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	; (8003020 <HAL_TIM_IC_CaptureCallback+0xec>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8002fae:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8002fb2:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000/refClock;
 8002fb4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800302c <HAL_TIM_IC_CaptureCallback+0xf8>
 8002fb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc0:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth_throttle = Difference*mFactor;
 8002fc4:	4b17      	ldr	r3, [pc, #92]	; (8003024 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fdc:	ee17 2a90 	vmov	r2, s15
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8002fe2:	601a      	str	r2, [r3, #0]
			period_length = refClock / Difference;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	ee07 3a90 	vmov	s15, r3
 8002fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ff0:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_TIM_IC_CaptureCallback+0x100>)
 8002ffa:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 8003006:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200002cc 	.word	0x200002cc
 8003018:	200002b8 	.word	0x200002b8
 800301c:	200002bc 	.word	0x200002bc
 8003020:	200002c4 	.word	0x200002c4
 8003024:	200002c8 	.word	0x200002c8
 8003028:	49742400 	.word	0x49742400
 800302c:	49742400 	.word	0x49742400
 8003030:	200002b4 	.word	0x200002b4
 8003034:	200002c0 	.word	0x200002c0

08003038 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003042:	edc7 0a00 	vstr	s1, [r7]
 8003046:	edd7 0a00 	vldr	s1, [r7]
 800304a:	ed97 0a01 	vldr	s0, [r7, #4]
 800304e:	f01c f981 	bl	801f354 <atan2f>
 8003052:	eef0 7a40 	vmov.f32	s15, s0
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a01 	vstr	s0, [r7, #4]
 800306a:	ed97 0a01 	vldr	s0, [r7, #4]
 800306e:	f01c f973 	bl	801f358 <cosf>
 8003072:	eef0 7a40 	vmov.f32	s15, s0
 8003076:	eeb0 0a67 	vmov.f32	s0, s15
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	ed87 0a01 	vstr	s0, [r7, #4]
 800308a:	edd7 7a01 	vldr	s15, [r7, #4]
 800308e:	eef0 7ae7 	vabs.f32	s15, s15
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80030aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80030ae:	f01c f997 	bl	801f3e0 <sinf>
 80030b2:	eef0 7a40 	vmov.f32	s15, s0
 80030b6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	2300      	movs	r3, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	7138      	strb	r0, [r7, #4]
 80030f0:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80030f2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	09db      	lsrs	r3, r3, #7
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
 8003124:	bf00      	nop
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	7138      	strb	r0, [r7, #4]
 8003138:	bf00      	nop
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	f1c3 031f 	rsb	r3, r3, #31
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003172:	d205      	bcs.n	8003180 <_ZSt16__deque_buf_sizej+0x1c>
 8003174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	e000      	b.n	8003182 <_ZSt16__deque_buf_sizej+0x1e>
 8003180:	2301      	movs	r3, #1
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	f006 ffe1 	bl	800a160 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f)
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80031b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80031b8:	ed87 1a00 	vstr	s2, [r7]
            : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	ed97 0a00 	vldr	s0, [r7]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa43 	bl	8003668 <_ZN3jlb8Odometry15normalize_angleEf>
 80031e2:	eef0 7a40 	vmov.f32	s15, s0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	edc3 7a04 	vstr	s15, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	61da      	str	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3330      	adds	r3, #48	; 0x30
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ffb0 	bl	800318e <_ZNSt5dequeIfSaIfEEC1Ev>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3358      	adds	r3, #88	; 0x58
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ffab 	bl	800318e <_ZNSt5dequeIfSaIfEEC1Ev>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	0000      	movs	r0, r0
 800324c:	0000      	movs	r0, r0
	...

08003250 <_ZN3jlb8Odometry12rpm_callbackEf>:

        ~Odometry() {}

        void rpm_callback(const float motor_rpm)
 8003250:	b580      	push	{r7, lr}
 8003252:	ed2d 8b02 	vpush	{d8}
 8003256:	b08c      	sub	sp, #48	; 0x30
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_motor_rpm = motor_rpm;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	615a      	str	r2, [r3, #20]

            float wheel_rpm = motor_rpm * jlb::GEAR_RATIO_MOTOR_TO_WHEEL;
 8003266:	edd7 7a00 	vldr	s15, [r7]
 800326a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003378 <_ZN3jlb8Odometry12rpm_callbackEf+0x128>
 800326e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003272:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            float velocity = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 8003276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003278:	f7fd f958 	bl	800052c <__aeabi_f2d>
 800327c:	a33c      	add	r3, pc, #240	; (adr r3, 8003370 <_ZN3jlb8Odometry12rpm_callbackEf+0x120>)
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f7fd f9ab 	bl	80005dc <__aeabi_dmul>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	4b3a      	ldr	r3, [pc, #232]	; (800337c <_ZN3jlb8Odometry12rpm_callbackEf+0x12c>)
 8003294:	f7fd facc 	bl	8000830 <__aeabi_ddiv>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd fc6c 	bl	8000b7c <__aeabi_d2f>
 80032a4:	4603      	mov	r3, r0
 80032a6:	60bb      	str	r3, [r7, #8]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY)
 80032a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	f7ff fee6 	bl	8003080 <_ZSt4fabsf>
 80032b4:	eef0 7a40 	vmov.f32	s15, s0
 80032b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80032bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	bfcc      	ite	gt
 80032c6:	2301      	movgt	r3, #1
 80032c8:	2300      	movle	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d146      	bne.n	800335e <_ZN3jlb8Odometry12rpm_callbackEf+0x10e>
            {
                return;
            }

            v_buffer_.push_back(velocity);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3330      	adds	r3, #48	; 0x30
 80032d4:	f107 0208 	add.w	r2, r7, #8
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f006 ff51 	bl	800a182 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3330      	adds	r3, #48	; 0x30
 80032e4:	4618      	mov	r0, r3
 80032e6:	f006 ff6d 	bl	800a1c4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	bf8c      	ite	hi
 80032f0:	2301      	movhi	r3, #1
 80032f2:	2300      	movls	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <_ZN3jlb8Odometry12rpm_callbackEf+0xb4>
            {
                v_buffer_.pop_front();
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3330      	adds	r3, #48	; 0x30
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 ff72 	bl	800a1e8 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
            }

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f006 ff8c 	bl	800a22e <_ZNSt5dequeIfSaIfEE5beginEv>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f006 ff92 	bl	800a24c <_ZNSt5dequeIfSaIfEE3endEv>
 8003328:	f107 021c 	add.w	r2, r7, #28
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003380 <_ZN3jlb8Odometry12rpm_callbackEf+0x130>
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f006 ffa2 	bl	800a280 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 800333c:	eeb0 8a40 	vmov.f32	s16, s0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3330      	adds	r3, #48	; 0x30
 8003344:	4618      	mov	r0, r3
 8003346:	f006 ff3d 	bl	800a1c4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800334a:	ee07 0a90 	vmov	s15, r0
 800334e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003352:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	edc3 7a00 	vstr	s15, [r3]
 800335c:	e000      	b.n	8003360 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>
                return;
 800335e:	bf00      	nop
        }
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	ecbd 8b02 	vpop	{d8}
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	f3af 8000 	nop.w
 8003370:	64af6f9d 	.word	0x64af6f9d
 8003374:	3fd51c8b 	.word	0x3fd51c8b
 8003378:	406c4ec5 	.word	0x406c4ec5
 800337c:	404e0000 	.word	0x404e0000
 8003380:	00000000 	.word	0x00000000

08003384 <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 8003384:	b580      	push	{r7, lr}
 8003386:	ed2d 8b02 	vpush	{d8}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE)
 800339a:	edd7 7a00 	vldr	s15, [r7]
 800339e:	eeb0 0a67 	vmov.f32	s0, s15
 80033a2:	f7ff fe6d 	bl	8003080 <_ZSt4fabsf>
 80033a6:	eef0 7a40 	vmov.f32	s15, s0
 80033aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800345c <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 80033ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	bfcc      	ite	gt
 80033b8:	2301      	movgt	r3, #1
 80033ba:	2300      	movle	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d145      	bne.n	800344e <_ZN3jlb8Odometry12imu_callbackEf+0xca>
            {
                return;
            }

            w_buffer_.push_back(ang_vel_z);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3358      	adds	r3, #88	; 0x58
 80033c6:	463a      	mov	r2, r7
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f006 fed9 	bl	800a182 <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3358      	adds	r3, #88	; 0x58
 80033d4:	4618      	mov	r0, r3
 80033d6:	f006 fef5 	bl	800a1c4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b03      	cmp	r3, #3
 80033de:	bf8c      	ite	hi
 80033e0:	2301      	movhi	r3, #1
 80033e2:	2300      	movls	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d004      	beq.n	80033f4 <_ZN3jlb8Odometry12imu_callbackEf+0x70>
            {
                w_buffer_.pop_front();
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3358      	adds	r3, #88	; 0x58
 80033ee:	4618      	mov	r0, r3
 80033f0:	f006 fefa 	bl	800a1e8 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
            }

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f006 ff14 	bl	800a22e <_ZNSt5dequeIfSaIfEE5beginEv>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800340c:	f107 0318 	add.w	r3, r7, #24
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f006 ff1a 	bl	800a24c <_ZNSt5dequeIfSaIfEE3endEv>
 8003418:	f107 0218 	add.w	r2, r7, #24
 800341c:	f107 0308 	add.w	r3, r7, #8
 8003420:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003460 <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f006 ff2a 	bl	800a280 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 800342c:	eeb0 8a40 	vmov.f32	s16, s0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3358      	adds	r3, #88	; 0x58
 8003434:	4618      	mov	r0, r3
 8003436:	f006 fec5 	bl	800a1c4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800343a:	ee07 0a90 	vmov	s15, r0
 800343e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003442:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	edc3 7a01 	vstr	s15, [r3, #4]
 800344c:	e000      	b.n	8003450 <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
                return;
 800344e:	bf00      	nop
        }
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	ecbd 8b02 	vpop	{d8}
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	4096cbe4 	.word	0x4096cbe4
	...

08003468 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 8003468:	b580      	push	{r7, lr}
 800346a:	ed2d 8b02 	vpush	{d8}
 800346e:	b08c      	sub	sp, #48	; 0x30
 8003470:	af00      	add	r7, sp, #0
 8003472:	6178      	str	r0, [r7, #20]
        {
#ifdef STM32
            // TODO: add timestamp and dt
            float dt = 0.005f;
 8003474:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <_ZN3jlb8Odometry11update_odomEv+0x1c0>)
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c

            auto update_timestamp = std::chrono::steady_clock::now();
            float dt = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 8003478:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800347c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	f340 80a1 	ble.w	80035ca <_ZN3jlb8Odometry11update_odomEv+0x162>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eeb0 0a67 	vmov.f32	s0, s15
 8003492:	f7ff fdf5 	bl	8003080 <_ZSt4fabsf>
 8003496:	ee10 3a10 	vmov	r3, s0
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f846 	bl	800052c <__aeabi_f2d>
 80034a0:	a35d      	add	r3, pc, #372	; (adr r3, 8003618 <_ZN3jlb8Odometry11update_odomEv+0x1b0>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd fb0b 	bl	8000ac0 <__aeabi_dcmplt>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <_ZN3jlb8Odometry11update_odomEv+0x4e>
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e001      	b.n	80034ba <_ZN3jlb8Odometry11update_odomEv+0x52>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	6013      	str	r3, [r2, #0]
                w_t = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80034c4:	eeb0 0a67 	vmov.f32	s0, s15
 80034c8:	f7ff fdda 	bl	8003080 <_ZSt4fabsf>
 80034cc:	ee10 3a10 	vmov	r3, s0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f82b 	bl	800052c <__aeabi_f2d>
 80034d6:	a352      	add	r3, pc, #328	; (adr r3, 8003620 <_ZN3jlb8Odometry11update_odomEv+0x1b8>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f7fd faf0 	bl	8000ac0 <__aeabi_dcmplt>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <_ZN3jlb8Odometry11update_odomEv+0x84>
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e001      	b.n	80034f0 <_ZN3jlb8Odometry11update_odomEv+0x88>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	ed93 8a00 	vldr	s16, [r3]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	edd3 7a04 	vldr	s15, [r3, #16]
 8003506:	eeb0 0a67 	vmov.f32	s0, s15
 800350a:	f7ff fda9 	bl	8003060 <_ZSt3cosf>
 800350e:	eef0 7a40 	vmov.f32	s15, s0
 8003512:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	edd3 7a04 	vldr	s15, [r3, #16]
 800351c:	eeb0 0a67 	vmov.f32	s0, s15
 8003520:	f7ff fdbe 	bl	80030a0 <_ZSt3sinf>
 8003524:	eeb0 7a40 	vmov.f32	s14, s0
 8003528:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800352c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003530:	ee38 7a67 	vsub.f32	s14, s16, s15
 8003534:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	ed93 8a00 	vldr	s16, [r3]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	edd3 7a04 	vldr	s15, [r3, #16]
 8003558:	eeb0 0a67 	vmov.f32	s0, s15
 800355c:	f7ff fda0 	bl	80030a0 <_ZSt3sinf>
 8003560:	eef0 7a40 	vmov.f32	s15, s0
 8003564:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	edd3 7a04 	vldr	s15, [r3, #16]
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	f7ff fd75 	bl	8003060 <_ZSt3cosf>
 8003576:	eeb0 7a40 	vmov.f32	s14, s0
 800357a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800357e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003582:	ee38 7a27 	vadd.f32	s14, s16, s15
 8003586:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800358a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	edd3 7a03 	vldr	s15, [r3, #12]
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80035aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ba:	6978      	ldr	r0, [r7, #20]
 80035bc:	f000 f854 	bl	8003668 <_ZN3jlb8Odometry15normalize_angleEf>
 80035c0:	eef0 7a40 	vmov.f32	s15, s0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	edc3 7a04 	vstr	s15, [r3, #16]
            }
#ifndef STM32
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	623b      	str	r3, [r7, #32]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	69b8      	ldr	r0, [r7, #24]
 80035e4:	69f9      	ldr	r1, [r7, #28]
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	ee06 0a10 	vmov	s12, r0
 80035ee:	ee06 1a90 	vmov	s13, r1
 80035f2:	ee07 2a10 	vmov	s14, r2
 80035f6:	ee07 3a90 	vmov	s15, r3
        }
 80035fa:	eeb0 0a46 	vmov.f32	s0, s12
 80035fe:	eef0 0a66 	vmov.f32	s1, s13
 8003602:	eeb0 1a47 	vmov.f32	s2, s14
 8003606:	eef0 1a67 	vmov.f32	s3, s15
 800360a:	3730      	adds	r7, #48	; 0x30
 800360c:	46bd      	mov	sp, r7
 800360e:	ecbd 8b02 	vpop	{d8}
 8003612:	bd80      	pop	{r7, pc}
 8003614:	f3af 8000 	nop.w
 8003618:	eb851eb8 	.word	0xeb851eb8
 800361c:	3f9eb851 	.word	0x3f9eb851
 8003620:	eb851eb8 	.word	0xeb851eb8
 8003624:	3f8eb851 	.word	0x3f8eb851
 8003628:	3ba3d70a 	.word	0x3ba3d70a

0800362c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	ed87 0a03 	vstr	s0, [r7, #12]
 8003636:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7fc ff76 	bl	800052c <__aeabi_f2d>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	ed97 1b00 	vldr	d1, [r7]
 8003648:	ec43 2b10 	vmov	d0, r2, r3
 800364c:	f01b fdb8 	bl	801f1c0 <fmod>
 8003650:	eeb0 7a40 	vmov.f32	s14, s0
 8003654:	eef0 7a60 	vmov.f32	s15, s1
    }
 8003658:	eeb0 0a47 	vmov.f32	s0, s14
 800365c:	eef0 0a67 	vmov.f32	s1, s15
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 8003674:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80036d0 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 8003678:	ed97 0a00 	vldr	s0, [r7]
 800367c:	f7ff ffd6 	bl	800362c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003680:	ec53 2b10 	vmov	r2, r3, d0
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f7fd fa78 	bl	8000b7c <__aeabi_d2f>
 800368c:	4603      	mov	r3, r0
 800368e:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f)
 8003690:	edd7 7a00 	vldr	s15, [r7]
 8003694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	d50f      	bpl.n	80036be <_ZN3jlb8Odometry15normalize_angleEf+0x56>
            {
                angle += 2.0f * M_PI;
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f7fc ff44 	bl	800052c <__aeabi_f2d>
 80036a4:	a30a      	add	r3, pc, #40	; (adr r3, 80036d0 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fc fde1 	bl	8000270 <__adddf3>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	f7fd fa61 	bl	8000b7c <__aeabi_d2f>
 80036ba:	4603      	mov	r3, r0
 80036bc:	603b      	str	r3, [r7, #0]
            }
            return angle;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	ee07 3a90 	vmov	s15, r3
        }
 80036c4:	eeb0 0a67 	vmov.f32	s0, s15
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	54442d18 	.word	0x54442d18
 80036d4:	401921fb 	.word	0x401921fb

080036d8 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 80036d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036dc:	b094      	sub	sp, #80	; 0x50
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6178      	str	r0, [r7, #20]
 80036e2:	ed87 0a04 	vstr	s0, [r7, #16]
 80036e6:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80036f0:	eeb0 0a67 	vmov.f32	s0, s15
 80036f4:	f7ff fcb4 	bl	8003060 <_ZSt3cosf>
 80036f8:	eef0 7a40 	vmov.f32	s15, s0
 80036fc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003704:	ed97 7a04 	vldr	s14, [r7, #16]
 8003708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	edd3 7a04 	vldr	s15, [r3, #16]
 8003718:	eeb0 0a67 	vmov.f32	s0, s15
 800371c:	f7ff fcc0 	bl	80030a0 <_ZSt3sinf>
 8003720:	eef0 7a40 	vmov.f32	s15, s0
 8003724:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003728:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0 = std::fabs(theta_t);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003740:	eeb0 0a67 	vmov.f32	s0, s15
 8003744:	f7ff fc9c 	bl	8003080 <_ZSt4fabsf>
 8003748:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90 = std::fabs(theta_t - M_PI / 2.0f);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc feeb 	bl	800052c <__aeabi_f2d>
 8003756:	a396      	add	r3, pc, #600	; (adr r3, 80039b0 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc fd86 	bl	800026c <__aeabi_dsub>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	603a      	str	r2, [r7, #0]
 8003766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003770:	f7fd fa04 	bl	8000b7c <__aeabi_d2f>
 8003774:	4603      	mov	r3, r0
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	4618      	mov	r0, r3
 800377e:	f7fc fed5 	bl	800052c <__aeabi_f2d>
 8003782:	a38d      	add	r3, pc, #564	; (adr r3, 80039b8 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc fd70 	bl	800026c <__aeabi_dsub>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4692      	mov	sl, r2
 8003792:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8003796:	4650      	mov	r0, sl
 8003798:	4659      	mov	r1, fp
 800379a:	f7fd f9ef 	bl	8000b7c <__aeabi_d2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fec0 	bl	800052c <__aeabi_f2d>
 80037ac:	a384      	add	r3, pc, #528	; (adr r3, 80039c0 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc fd5b 	bl	800026c <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4690      	mov	r8, r2
 80037bc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80037c0:	4640      	mov	r0, r8
 80037c2:	4649      	mov	r1, r9
 80037c4:	f7fd f9da 	bl	8000b7c <__aeabi_d2f>
 80037c8:	4603      	mov	r3, r0
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc feab 	bl	800052c <__aeabi_f2d>
 80037d6:	a37c      	add	r3, pc, #496	; (adr r3, 80039c8 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fc fd46 	bl	800026c <__aeabi_dsub>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4614      	mov	r4, r2
 80037e6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f7fd f9c5 	bl	8000b7c <__aeabi_d2f>
 80037f2:	4603      	mov	r3, r0
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	2305      	movs	r3, #5
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	e893 0003 	ldmia.w	r3, {r0, r1}
 800381c:	f006 fd62 	bl	800a2e4 <_ZSt3minIfET_St16initializer_listIS0_E>
 8003820:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0)
 8003824:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003828:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800382c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003834:	d10e      	bne.n	8003854 <_ZN3jlb8Odometry10correctionEff+0x17c>
            {
                theta_t = (theta_t + 0.0f) / 2.0f;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	edd3 7a04 	vldr	s15, [r3, #16]
 800383c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80039d0 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 8003840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003844:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	edc3 7a04 	vstr	s15, [r3, #16]
 8003852:	e09a      	b.n	800398a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_90)
 8003854:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003858:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800385c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	d11d      	bne.n	80038a2 <_ZN3jlb8Odometry10correctionEff+0x1ca>
            {
                theta_t = (theta_t + M_PI / 2.0f) / 2.0f;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fe5e 	bl	800052c <__aeabi_f2d>
 8003870:	a34f      	add	r3, pc, #316	; (adr r3, 80039b0 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc fcfb 	bl	8000270 <__adddf3>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800388a:	f7fc ffd1 	bl	8000830 <__aeabi_ddiv>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f971 	bl	8000b7c <__aeabi_d2f>
 800389a:	4602      	mov	r2, r0
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	611a      	str	r2, [r3, #16]
 80038a0:	e073      	b.n	800398a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_180)
 80038a2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80038a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d11d      	bne.n	80038f0 <_ZN3jlb8Odometry10correctionEff+0x218>
            {
                theta_t = (theta_t + M_PI) / 2.0f;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fc fe37 	bl	800052c <__aeabi_f2d>
 80038be:	a33e      	add	r3, pc, #248	; (adr r3, 80039b8 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	f7fc fcd4 	bl	8000270 <__adddf3>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038d8:	f7fc ffaa 	bl	8000830 <__aeabi_ddiv>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f7fd f94a 	bl	8000b7c <__aeabi_d2f>
 80038e8:	4602      	mov	r2, r0
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	e04c      	b.n	800398a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_270)
 80038f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80038f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80038fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003900:	d11d      	bne.n	800393e <_ZN3jlb8Odometry10correctionEff+0x266>
            {
                theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fe10 	bl	800052c <__aeabi_f2d>
 800390c:	a32c      	add	r3, pc, #176	; (adr r3, 80039c0 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f7fc fcad 	bl	8000270 <__adddf3>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003926:	f7fc ff83 	bl	8000830 <__aeabi_ddiv>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f7fd f923 	bl	8000b7c <__aeabi_d2f>
 8003936:	4602      	mov	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	611a      	str	r2, [r3, #16]
 800393c:	e025      	b.n	800398a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            }
            else if (min_theta == theta_360)
 800393e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003942:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003946:	eeb4 7a67 	vcmp.f32	s14, s15
 800394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394e:	d11c      	bne.n	800398a <_ZN3jlb8Odometry10correctionEff+0x2b2>
            {
                theta_t = (theta_t + 2.0f * M_PI) / 2.0f;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fc fde9 	bl	800052c <__aeabi_f2d>
 800395a:	a31b      	add	r3, pc, #108	; (adr r3, 80039c8 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc fc86 	bl	8000270 <__adddf3>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003974:	f7fc ff5c 	bl	8000830 <__aeabi_ddiv>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f7fd f8fc 	bl	8000b7c <__aeabi_d2f>
 8003984:	4602      	mov	r2, r0
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	611a      	str	r2, [r3, #16]
            }

            theta_t = normalize_angle(theta_t);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003990:	eeb0 0a67 	vmov.f32	s0, s15
 8003994:	6978      	ldr	r0, [r7, #20]
 8003996:	f7ff fe67 	bl	8003668 <_ZN3jlb8Odometry15normalize_angleEf>
 800399a:	eef0 7a40 	vmov.f32	s15, s0
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 80039a4:	bf00      	nop
 80039a6:	3750      	adds	r7, #80	; 0x50
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ae:	bf00      	nop
 80039b0:	54442d18 	.word	0x54442d18
 80039b4:	3ff921fb 	.word	0x3ff921fb
 80039b8:	54442d18 	.word	0x54442d18
 80039bc:	400921fb 	.word	0x400921fb
 80039c0:	7f3321d2 	.word	0x7f3321d2
 80039c4:	4012d97c 	.word	0x4012d97c
 80039c8:	54442d18 	.word	0x54442d18
 80039cc:	401921fb 	.word	0x401921fb
 80039d0:	00000000 	.word	0x00000000

080039d4 <_ZN3PIDC1Ev>:
#define PID_HXX

class PID
{
public:
    PID() {}
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_ZN3PID4initEfffffff>:
    ~PID() {}

    void init(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput)
 80039ea:	b480      	push	{r7}
 80039ec:	b089      	sub	sp, #36	; 0x24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	61f8      	str	r0, [r7, #28]
 80039f2:	ed87 0a06 	vstr	s0, [r7, #24]
 80039f6:	edc7 0a05 	vstr	s1, [r7, #20]
 80039fa:	ed87 1a04 	vstr	s2, [r7, #16]
 80039fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8003a02:	ed87 2a02 	vstr	s4, [r7, #8]
 8003a06:	edc7 2a01 	vstr	s5, [r7, #4]
 8003a0a:	ed87 3a00 	vstr	s6, [r7]
    {
        kp_ = kp;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	601a      	str	r2, [r3, #0]
        ki_ = ki;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	605a      	str	r2, [r3, #4]
        kd_ = kd;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]
        tau_ = tau;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	60da      	str	r2, [r3, #12]
        T_ = T;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	611a      	str	r2, [r3, #16]
        minOutput_ = minOutput;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	615a      	str	r2, [r3, #20]
        maxOutput_ = maxOutput;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	619a      	str	r2, [r3, #24]
        prevError_ = 0;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	61da      	str	r2, [r3, #28]
        integral_ = 0;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	621a      	str	r2, [r3, #32]
    }
 8003a48:	bf00      	nop
 8003a4a:	3724      	adds	r7, #36	; 0x24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <_ZN3PID6updateEfff>:

    float update(float setpoint, float processVariable, float dt)
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a60:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a64:	ed87 1a00 	vstr	s2, [r7]
    {
        if (dt == 0)
 8003a68:	edd7 7a00 	vldr	s15, [r7]
 8003a6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d102      	bne.n	8003a7c <_ZN3PID6updateEfff+0x28>
            return 0;
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e097      	b.n	8003bac <_ZN3PID6updateEfff+0x158>

        float error = setpoint - processVariable;
 8003a7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	edc7 7a06 	vstr	s15, [r7, #24]
        integral_ += (error * dt);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003a92:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a96:	edd7 7a00 	vldr	s15, [r7]
 8003a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	edc3 7a08 	vstr	s15, [r3, #32]

        // Anti-windup: Limit the integral term
        if (integral_ > maxOutput_)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	ed93 7a08 	vldr	s14, [r3, #32]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abc:	dd04      	ble.n	8003ac8 <_ZN3PID6updateEfff+0x74>
            integral_ = maxOutput_;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	e00e      	b.n	8003ae6 <_ZN3PID6updateEfff+0x92>
        else if (integral_ < minOutput_)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003adc:	d503      	bpl.n	8003ae6 <_ZN3PID6updateEfff+0x92>
            integral_ = minOutput_;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]

        float derivative = (error - prevError_) / dt;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003aec:	ed97 7a06 	vldr	s14, [r7, #24]
 8003af0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003af4:	ed97 7a00 	vldr	s14, [r7]
 8003af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afc:	edc7 7a05 	vstr	s15, [r7, #20]

        float output = kp_ * (1 + dt / (tau_ + T_)) * error + ki_ * (dt / T_) * integral_ - kd_ * derivative;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	ed93 7a00 	vldr	s14, [r3]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b12:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003b16:	ed97 6a00 	vldr	s12, [r7]
 8003b1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	ed93 6a04 	vldr	s12, [r3, #16]
 8003b3e:	edd7 5a00 	vldr	s11, [r7]
 8003b42:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003b46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6a:	edc7 7a07 	vstr	s15, [r7, #28]

        // Output clamping: Limit the output within the specified range
        if (output > maxOutput_)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	dd03      	ble.n	8003b8a <_ZN3PID6updateEfff+0x136>
            output = maxOutput_;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	e00c      	b.n	8003ba4 <_ZN3PID6updateEfff+0x150>
        else if (output < minOutput_)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b90:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	d502      	bpl.n	8003ba4 <_ZN3PID6updateEfff+0x150>
            output = minOutput_;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	61fb      	str	r3, [r7, #28]

        prevError_ = error;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	61da      	str	r2, [r3, #28]

        return output;
 8003baa:	69fb      	ldr	r3, [r7, #28]
    }
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f006 fbb9 	bl	800a33e <_ZNSaIfED1Ev>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f006 fb9c 	bl	800a31e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff ffeb 	bl	8003bd6 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <_ZN3jlb10ControllerC1ENS_9DirectionE>:

        Direction direction = Direction::STRAIGHT;
        Direction prev_direction = Direction::STRAIGHT;
        Mission mission = Mission::LABYRINTH;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_}
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2210      	movs	r2, #16
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	615a      	str	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	619a      	str	r2, [r3, #24]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	621a      	str	r2, [r3, #32]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xcc>)
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	336c      	adds	r3, #108	; 0x6c
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ffbf 	bl	8003bf0 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3378      	adds	r3, #120	; 0x78
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ffba 	bl	8003bf0 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3394      	adds	r3, #148	; 0x94
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fe96 	bl	80039d4 <_ZN3PIDC1Ev>
        {
            object_pid.init(kP, kI, kD, TAU, T, LIM_MIN, LIM_MAX);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3394      	adds	r3, #148	; 0x94
 8003cac:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8003cb0:	eddf 2a0a 	vldr	s5, [pc, #40]	; 8003cdc <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd0>
 8003cb4:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8003ce0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd4>
 8003cb8:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8003ce4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd8>
 8003cbc:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8003cdc <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd0>
 8003cc0:	eddf 0a06 	vldr	s1, [pc, #24]	; 8003cdc <_ZN3jlb10ControllerC1ENS_9DirectionE+0xd0>
 8003cc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fe8e 	bl	80039ea <_ZN3PID4initEfffffff>
        }
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	42c80000 	.word	0x42c80000
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	3ba3d70a 	.word	0x3ba3d70a
 8003ce4:	3d4ccccd 	.word	0x3d4ccccd

08003ce8 <_ZN3jlb10Controller7stanleyEff>:
        ~Controller() {}

        float stanley(const float cross_track_error, const float heading_error)
 8003ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cf6:	edc7 0a01 	vstr	s1, [r7, #4]
        {
            return kAng * heading_error + atan2(kDist * cross_track_error, kSoft + kDamp * current_velocity);
 8003cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d06:	ee17 0a90 	vmov	r0, s15
 8003d0a:	f7fc fc0f 	bl	800052c <__aeabi_f2d>
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460d      	mov	r5, r1
 8003d12:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d1e:	ee17 0a90 	vmov	r0, s15
 8003d22:	f7fc fc03 	bl	800052c <__aeabi_f2d>
 8003d26:	4680      	mov	r8, r0
 8003d28:	4689      	mov	r9, r1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d38:	ee17 0a90 	vmov	r0, s15
 8003d3c:	f7fc fbf6 	bl	800052c <__aeabi_f2d>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	ec43 2b11 	vmov	d1, r2, r3
 8003d48:	ec49 8b10 	vmov	d0, r8, r9
 8003d4c:	f01b fa36 	bl	801f1bc <atan2>
 8003d50:	ec53 2b10 	vmov	r2, r3, d0
 8003d54:	4620      	mov	r0, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7fc fa8a 	bl	8000270 <__adddf3>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fc ff0a 	bl	8000b7c <__aeabi_d2f>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	ee07 3a90 	vmov	s15, r3
        }
 8003d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003d7c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	ed2d 8b02 	vpush	{d8}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	f006 fb14 	bl	800a3bc <_ZNSt6vectorIfSaIfEE5beginEv>
 8003d94:	4604      	mov	r4, r0
 8003d96:	68b8      	ldr	r0, [r7, #8]
 8003d98:	f006 fb20 	bl	800a3dc <_ZNSt6vectorIfSaIfEE3endEv>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4620      	mov	r0, r4
 8003da2:	f006 fb2c 	bl	800a3fe <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1)
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f006 fb39 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
            {
                return line_positions[0];
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f006 fb3d 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	edd3 7a00 	vldr	s15, [r3]
 8003dca:	e114      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else if (line_positions.size() == 2)
 8003dcc:	68b8      	ldr	r0, [r7, #8]
 8003dce:	f006 fb26 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8096 	beq.w	8003f10 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d00f      	beq.n	8003e0e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	f300 808b 	bgt.w	8003f0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d07e      	beq.n	8003efa <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 8003dfc:	e085      	b.n	8003f0a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                case Direction::LEFT:
                {
                    return line_positions[0];
 8003dfe:	2100      	movs	r1, #0
 8003e00:	68b8      	ldr	r0, [r7, #8]
 8003e02:	f006 fb1c 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003e06:	4603      	mov	r3, r0
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	e0f3      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::STRAIGHT:
                {
                    if (direction == prev_direction)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d136      	bne.n	8003e8c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                    {
                        return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8003e1e:	2100      	movs	r1, #0
 8003e20:	68b8      	ldr	r0, [r7, #8]
 8003e22:	f006 fb0c 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003e26:	4603      	mov	r3, r0
 8003e28:	ed93 7a00 	vldr	s14, [r3]
 8003e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e34:	eeb0 0a67 	vmov.f32	s0, s15
 8003e38:	f7ff f922 	bl	8003080 <_ZSt4fabsf>
 8003e3c:	eeb0 8a40 	vmov.f32	s16, s0
 8003e40:	2101      	movs	r1, #1
 8003e42:	68b8      	ldr	r0, [r7, #8]
 8003e44:	f006 fafb 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e56:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5a:	f7ff f911 	bl	8003080 <_ZSt4fabsf>
 8003e5e:	eef0 7a40 	vmov.f32	s15, s0
 8003e62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	d507      	bpl.n	8003e7c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	68b8      	ldr	r0, [r7, #8]
 8003e70:	f006 fae5 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003e74:	4603      	mov	r3, r0
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	e0bc      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	68b8      	ldr	r0, [r7, #8]
 8003e80:	f006 fadd 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003e84:	4603      	mov	r3, r0
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	e0b4      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    else
                    {
                        return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	68b8      	ldr	r0, [r7, #8]
 8003e90:	f006 fad5 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003e94:	4603      	mov	r3, r0
 8003e96:	ed93 7a00 	vldr	s14, [r3]
 8003e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea6:	f7ff f8eb 	bl	8003080 <_ZSt4fabsf>
 8003eaa:	eeb0 8a40 	vmov.f32	s16, s0
 8003eae:	2101      	movs	r1, #1
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f006 fac4 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	ed93 7a00 	vldr	s14, [r3]
 8003ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec8:	f7ff f8da 	bl	8003080 <_ZSt4fabsf>
 8003ecc:	eef0 7a40 	vmov.f32	s15, s0
 8003ed0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed8:	dd07      	ble.n	8003eea <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 8003eda:	2100      	movs	r1, #0
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	f006 faae 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	e085      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8003eea:	2101      	movs	r1, #1
 8003eec:	68b8      	ldr	r0, [r7, #8]
 8003eee:	f006 faa6 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	e07d      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                }
                case Direction::RIGHT:
                {
                    return line_positions[1];
 8003efa:	2101      	movs	r1, #1
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f006 fa9e 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003f02:	4603      	mov	r3, r0
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	e075      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                default:
                    return 0.0f;
 8003f0a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8004004 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003f0e:	e072      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f006 fa84 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d026      	beq.n	8003f74 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d00e      	beq.n	8003f4e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	dc1c      	bgt.n	8003f6e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d010      	beq.n	8003f5e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 8003f3c:	e017      	b.n	8003f6e <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                case Direction::LEFT:
                {
                    return line_positions[0];
 8003f3e:	2100      	movs	r1, #0
 8003f40:	68b8      	ldr	r0, [r7, #8]
 8003f42:	f006 fa7c 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003f46:	4603      	mov	r3, r0
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	e053      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::STRAIGHT:
                {
                    return line_positions[1];
 8003f4e:	2101      	movs	r1, #1
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	f006 fa74 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003f56:	4603      	mov	r3, r0
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	e04b      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::RIGHT:
                {
                    return line_positions[2];
 8003f5e:	2102      	movs	r1, #2
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f006 fa6c 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003f66:	4603      	mov	r3, r0
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	e043      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                default:
                    return 0.0f;
 8003f6e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004004 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003f72:	e040      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8003f74:	68b8      	ldr	r0, [r7, #8]
 8003f76:	f006 fa52 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d033      	beq.n	8003ff2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00e      	beq.n	8003fb2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	dc29      	bgt.n	8003fec <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d01d      	beq.n	8003fdc <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 8003fa0:	e024      	b.n	8003fec <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                case Direction::LEFT:
                {
                    return line_positions[0];
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	68b8      	ldr	r0, [r7, #8]
 8003fa6:	f006 fa4a 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003faa:	4603      	mov	r3, r0
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	e021      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::STRAIGHT:
                {
                    return line_positions[1] + line_positions[2] / 2.0f;
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	68b8      	ldr	r0, [r7, #8]
 8003fb6:	f006 fa42 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	ed93 8a00 	vldr	s16, [r3]
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f006 fa3b 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	ed93 7a00 	vldr	s14, [r3]
 8003fce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003fda:	e00c      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                case Direction::RIGHT:
                {
                    return line_positions[3];
 8003fdc:	2103      	movs	r1, #3
 8003fde:	68b8      	ldr	r0, [r7, #8]
 8003fe0:	f006 fa2d 	bl	800a43e <_ZNSt6vectorIfSaIfEEixEj>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	e004      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
                default:
                    return 0.0f;
 8003fec:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004004 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 8003ff0:	e001      	b.n	8003ff6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 8003ff2:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004004 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 8003ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	ecbd 8b02 	vpop	{d8}
 8004002:	bd90      	pop	{r4, r7, pc}
 8004004:	00000000 	.word	0x00000000

08004008 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE_clEb>:

        void lateral_control()
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b)
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
                            { return b; }))
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE0_clEb>:
            {
                return;
            }

            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b)
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
                            { return b; }))
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_ZN3jlb10Controller15lateral_controlEv>:
        void lateral_control()
 800403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403e:	b08b      	sub	sp, #44	; 0x2c
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	332c      	adds	r3, #44	; 0x2c
 8004048:	4618      	mov	r0, r3
 800404a:	f006 fa08 	bl	800a45e <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800404e:	4604      	mov	r4, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	332c      	adds	r3, #44	; 0x2c
 8004054:	4618      	mov	r0, r3
 8004056:	f006 fa0d 	bl	800a474 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800405a:	4603      	mov	r3, r0
 800405c:	4632      	mov	r2, r6
 800405e:	4619      	mov	r1, r3
 8004060:	4620      	mov	r0, r4
 8004062:	f006 fa13 	bl	800a48c <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE_EbT_S4_T0_>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 8102 	bne.w	8004272 <_ZN3jlb10Controller15lateral_controlEv+0x236>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	334c      	adds	r3, #76	; 0x4c
 8004072:	4618      	mov	r0, r3
 8004074:	f006 f9f3 	bl	800a45e <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004078:	4604      	mov	r4, r0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	334c      	adds	r3, #76	; 0x4c
 800407e:	4618      	mov	r0, r3
 8004080:	f006 f9f8 	bl	800a474 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004084:	4603      	mov	r3, r0
 8004086:	462a      	mov	r2, r5
 8004088:	4619      	mov	r1, r3
 800408a:	4620      	mov	r0, r4
 800408c:	f006 fa14 	bl	800a4b8 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE0_EbT_S4_T0_>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 80ef 	bne.w	8004276 <_ZN3jlb10Controller15lateral_controlEv+0x23a>
            {
                return;
            }

            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	336c      	adds	r3, #108	; 0x6c
 800409c:	4618      	mov	r0, r3
 800409e:	f006 f9be 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d017      	beq.n	80040d8 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3378      	adds	r3, #120	; 0x78
 80040ac:	4618      	mov	r0, r3
 80040ae:	f006 f9b6 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	336c      	adds	r3, #108	; 0x6c
 80040bc:	4618      	mov	r0, r3
 80040be:	f006 f9ae 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d807      	bhi.n	80040d8 <_ZN3jlb10Controller15lateral_controlEv+0x9c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3378      	adds	r3, #120	; 0x78
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 f9a6 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d901      	bls.n	80040dc <_ZN3jlb10Controller15lateral_controlEv+0xa0>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <_ZN3jlb10Controller15lateral_controlEv+0xa2>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 80cb 	bne.w	800427a <_ZN3jlb10Controller15lateral_controlEv+0x23e>
            {
                return;
            }

            line_position_front = select_control_point(line_positions_front, prev_line_position_front);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80040ea:	f107 0308 	add.w	r3, r7, #8
 80040ee:	4611      	mov	r1, r2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f006 f9f7 	bl	800a4e4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80040fc:	f107 0308 	add.w	r3, r7, #8
 8004100:	eeb0 0a67 	vmov.f32	s0, s15
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fe38 	bl	8003d7c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 800410c:	eef0 7a40 	vmov.f32	s15, s0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	edc3 7a02 	vstr	s15, [r3, #8]
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4618      	mov	r0, r3
 800411c:	f006 f933 	bl	800a386 <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear = select_control_point(line_positions_rear, prev_line_position_rear);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f006 f9d9 	bl	800a4e4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	edd3 7a05 	vldr	s15, [r3, #20]
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	eeb0 0a67 	vmov.f32	s0, s15
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fe1a 	bl	8003d7c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8004148:	eef0 7a40 	vmov.f32	s15, s0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	edc3 7a03 	vstr	s15, [r3, #12]
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	4618      	mov	r0, r3
 8004158:	f006 f915 	bl	800a386 <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	611a      	str	r2, [r3, #16]
            prev_line_position_rear = line_position_rear;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	615a      	str	r2, [r3, #20]

            float sensor_rate = SENSOR_WIDTH / SENSOR_COUNT;
 800416c:	4b45      	ldr	r3, [pc, #276]	; (8004284 <_ZN3jlb10Controller15lateral_controlEv+0x248>)
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
            float sensor_center = SENSOR_COUNT / 2.0f;
 8004170:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004174:	623b      	str	r3, [r7, #32]
            selected_front = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	edd3 6a02 	vldr	s13, [r3, #8]
 800417c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004184:	edd7 7a08 	vldr	s15, [r7, #32]
 8004188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800418c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004190:	ee17 2a90 	vmov	r2, s15
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]
            selected_rear = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	edd3 6a03 	vldr	s13, [r3, #12]
 800419e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80041aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b2:	ee17 2a90 	vmov	r2, s15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]
            heading_error = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80041ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80041d6:	eeb0 0a67 	vmov.f32	s0, s15
 80041da:	f7fe ff2d 	bl	8003038 <_ZSt5atan2ff>
 80041de:	eef0 7a40 	vmov.f32	s15, s0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            target_angle = stanley(cross_track_error, heading_error);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80041f4:	eef0 0a47 	vmov.f32	s1, s14
 80041f8:	eeb0 0a67 	vmov.f32	s0, s15
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff fd73 	bl	8003ce8 <_ZN3jlb10Controller7stanleyEff>
 8004202:	eef0 7a40 	vmov.f32	s15, s0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > MAX_WHEEL_ANGLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421e:	dd03      	ble.n	8004228 <_ZN3jlb10Controller15lateral_controlEv+0x1ec>
                target_angle = MAX_WHEEL_ANGLE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004226:	619a      	str	r2, [r3, #24]
            if (target_angle < -MAX_WHEEL_ANGLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	edd3 7a06 	vldr	s15, [r3, #24]
 800422e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423a:	d502      	bpl.n	8004242 <_ZN3jlb10Controller15lateral_controlEv+0x206>
                target_angle = -MAX_WHEEL_ANGLE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <_ZN3jlb10Controller15lateral_controlEv+0x24c>)
 8004240:	619a      	str	r2, [r3, #24]

            if (direction == Direction::REVERSE_LEFT || direction == Direction::REVERSE_RIGHT || direction == Direction::REVERSE_STRAIGHT)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	2b03      	cmp	r3, #3
 800424a:	d009      	beq.n	8004260 <_ZN3jlb10Controller15lateral_controlEv+0x224>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004252:	2b04      	cmp	r3, #4
 8004254:	d004      	beq.n	8004260 <_ZN3jlb10Controller15lateral_controlEv+0x224>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	2b05      	cmp	r3, #5
 800425e:	d10d      	bne.n	800427c <_ZN3jlb10Controller15lateral_controlEv+0x240>
            {
                target_angle = -target_angle;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	edd3 7a06 	vldr	s15, [r3, #24]
 8004266:	eef1 7a67 	vneg.f32	s15, s15
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	edc3 7a06 	vstr	s15, [r3, #24]
 8004270:	e004      	b.n	800427c <_ZN3jlb10Controller15lateral_controlEv+0x240>
                return;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <_ZN3jlb10Controller15lateral_controlEv+0x240>
                return;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <_ZN3jlb10Controller15lateral_controlEv+0x240>
                return;
 800427a:	bf00      	nop
            }
        }
 800427c:	372c      	adds	r7, #44	; 0x2c
 800427e:	46bd      	mov	sp, r7
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004282:	bf00      	nop
 8004284:	3bcccccd 	.word	0x3bcccccd
 8004288:	bf800000 	.word	0xbf800000

0800428c <_ZN3jlb10Controller20longitudinal_controlEv>:

        void longitudinal_control()
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
        {
            switch (mission)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800429a:	2b03      	cmp	r3, #3
 800429c:	d832      	bhi.n	8004304 <_ZN3jlb10Controller20longitudinal_controlEv+0x78>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <_ZN3jlb10Controller20longitudinal_controlEv+0x18>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042eb 	.word	0x080042eb
 80042ac:	080042f5 	.word	0x080042f5
 80042b0:	080042fd 	.word	0x080042fd
            {
            case Mission::LABYRINTH:
            {
                target_speed = LABYRINTH_SPEED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a27      	ldr	r2, [pc, #156]	; (8004354 <_ZN3jlb10Controller20longitudinal_controlEv+0xc8>)
 80042b8:	61da      	str	r2, [r3, #28]

                if (direction == Direction::REVERSE_LEFT || direction == Direction::REVERSE_RIGHT || direction == Direction::REVERSE_STRAIGHT)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d009      	beq.n	80042d8 <_ZN3jlb10Controller20longitudinal_controlEv+0x4c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d004      	beq.n	80042d8 <_ZN3jlb10Controller20longitudinal_controlEv+0x4c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d117      	bne.n	8004308 <_ZN3jlb10Controller20longitudinal_controlEv+0x7c>
                {
                    target_speed = -target_speed;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	edd3 7a07 	vldr	s15, [r3, #28]
 80042de:	eef1 7a67 	vneg.f32	s15, s15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	edc3 7a07 	vstr	s15, [r3, #28]
                }
                break;
 80042e8:	e00e      	b.n	8004308 <_ZN3jlb10Controller20longitudinal_controlEv+0x7c>
            }
            case Mission::FAST:
                target_speed = FAST_SPEED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80042f0:	61da      	str	r2, [r3, #28]
                break;
 80042f2:	e00a      	b.n	800430a <_ZN3jlb10Controller20longitudinal_controlEv+0x7e>

            case Mission::FAST_TURN:
                target_speed = FAST_SPEED_TURN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <_ZN3jlb10Controller20longitudinal_controlEv+0xc8>)
 80042f8:	61da      	str	r2, [r3, #28]
                break;
 80042fa:	e006      	b.n	800430a <_ZN3jlb10Controller20longitudinal_controlEv+0x7e>

            case Mission::FAST_OVERTAKE:
                target_speed = FAST_SPEED_OVERTAKE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <_ZN3jlb10Controller20longitudinal_controlEv+0xcc>)
 8004300:	61da      	str	r2, [r3, #28]
                break;
 8004302:	e002      	b.n	800430a <_ZN3jlb10Controller20longitudinal_controlEv+0x7e>

            default:
                break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <_ZN3jlb10Controller20longitudinal_controlEv+0x7e>
                break;
 8004308:	bf00      	nop
            }

#ifdef STM32
            // TODO: add timestamp
            float dt = 0.005f;
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <_ZN3jlb10Controller20longitudinal_controlEv+0xd0>)
 800430c:	60fb      	str	r3, [r7, #12]
#else
            auto control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_ = control_timestamp_;
#endif
            float object_rate = object_pid.update(FOLLOW_DISTANCE, object_range, dt);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800431a:	ed97 1a03 	vldr	s2, [r7, #12]
 800431e:	eef0 0a67 	vmov.f32	s1, s15
 8004322:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8004326:	4610      	mov	r0, r2
 8004328:	f7ff fb94 	bl	8003a54 <_ZN3PID6updateEfff>
 800432c:	ed87 0a02 	vstr	s0, [r7, #8]
            target_speed *= (1 - object_rate);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	ed93 7a07 	vldr	s14, [r3, #28]
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	edd7 7a02 	vldr	s15, [r7, #8]
 800433e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	edc3 7a07 	vstr	s15, [r3, #28]
        }
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	41200000 	.word	0x41200000
 8004358:	41a00000 	.word	0x41a00000
 800435c:	3ba3d70a 	.word	0x3ba3d70a

08004360 <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
        {
            lateral_control();
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff fe67 	bl	800403c <_ZN3jlb10Controller15lateral_controlEv>
            longitudinal_control();
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7ff ff8c 	bl	800428c <_ZN3jlb10Controller20longitudinal_controlEv>

            return {target_angle, target_speed};
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	ee07 2a10 	vmov	s14, r2
 8004388:	ee07 3a90 	vmov	s15, r3
        }
 800438c:	eeb0 0a47 	vmov.f32	s0, s14
 8004390:	eef0 0a67 	vmov.f32	s1, s15
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:
        void set_object_range(const float object_range_)
        {
            object_range = object_range_;
        }

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	e00c      	b.n	80043c6 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
                detection_front[i] = detection_front_[i];
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	4413      	add	r3, r2
 80043b2:	7819      	ldrb	r1, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4413      	add	r3, r2
 80043ba:	332c      	adds	r3, #44	; 0x2c
 80043bc:	460a      	mov	r2, r1
 80043be:	701a      	strb	r2, [r3, #0]
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b1f      	cmp	r3, #31
 80043ca:	d9ef      	bls.n	80043ac <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	336c      	adds	r3, #108	; 0x6c
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f006 f8f7 	bl	800a5c6 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e00c      	b.n	800440c <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
                detection_rear[i] = detection_rear_[i];
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	7819      	ldrb	r1, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	4413      	add	r3, r2
 8004400:	334c      	adds	r3, #76	; 0x4c
 8004402:	460a      	mov	r2, r1
 8004404:	701a      	strb	r2, [r3, #0]
            for (unsigned long i = 0; i < SENSOR_COUNT; i++)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b1f      	cmp	r3, #31
 8004410:	d9ef      	bls.n	80043f2 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3378      	adds	r3, #120	; 0x78
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	f006 f8d4 	bl	800a5c6 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_)
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	ed87 0a00 	vstr	s0, [r7]
        {
            current_velocity = current_velocity_;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            direction = direction_;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f006 f9ac 	bl	800a7d6 <_ZNSaIN3jlb4EdgeEED1Ev>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	f006 f98f 	bl	800a7b6 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ffeb 	bl	8004488 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZN3jlb4NodeC1Ecff>:
        char name;
        float x;
        float y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	460b      	mov	r3, r1
 80044c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80044ca:	edc7 0a00 	vstr	s1, [r7]
 80044ce:	72fb      	strb	r3, [r7, #11]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	7afa      	ldrb	r2, [r7, #11]
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	330c      	adds	r3, #12
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ffdb 	bl	80044a2 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	330c      	adds	r3, #12
 8004502:	4618      	mov	r0, r3
 8004504:	f006 f990 	bl	800a828 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3308      	adds	r3, #8
 800451e:	4618      	mov	r0, r3
 8004520:	f006 f9da 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f)
 800452e:	b590      	push	{r4, r7, lr}
 8004530:	b08d      	sub	sp, #52	; 0x34
 8004532:	af00      	add	r7, sp, #0
 8004534:	6178      	str	r0, [r7, #20]
 8004536:	60fa      	str	r2, [r7, #12]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	ed87 0a01 	vstr	s0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	74fb      	strb	r3, [r7, #19]
        {
            edges.push_back(Edge{name_, direction_, prev_nodes_, weight_});
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f103 040c 	add.w	r4, r3, #12
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	763b      	strb	r3, [r7, #24]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	f107 0318 	add.w	r3, r7, #24
 8004554:	3308      	adds	r3, #8
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	4618      	mov	r0, r3
 800455a:	f006 f980 	bl	800a85e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004562:	f107 0318 	add.w	r3, r7, #24
 8004566:	4619      	mov	r1, r3
 8004568:	4620      	mov	r0, r4
 800456a:	f006 f9d0 	bl	800a90e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 800456e:	f107 0318 	add.w	r3, r7, #24
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ffcd 	bl	8004512 <_ZN3jlb4EdgeD1Ev>
        }
 8004578:	bf00      	nop
 800457a:	3734      	adds	r7, #52	; 0x34
 800457c:	46bd      	mov	sp, r7
 800457e:	bd90      	pop	{r4, r7, pc}

08004580 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f006 f9d0 	bl	800a930 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ffeb 	bl	8004580 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	0000      	movs	r0, r0
	...

080045b8 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 80045be:	af00      	add	r7, sp, #0
 80045c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045c4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045c8:	6018      	str	r0, [r3, #0]
        {
 80045ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ffe0 	bl	800459a <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 80045da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80045de:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80045e2:	681c      	ldr	r4, [r3, #0]
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	eddf 0af3 	vldr	s1, [pc, #972]	; 80049b8 <_ZN3jlb5GraphC1Ev+0x400>
 80045ec:	ed9f 0af3 	vldr	s0, [pc, #972]	; 80049bc <_ZN3jlb5GraphC1Ev+0x404>
 80045f0:	2141      	movs	r1, #65	; 0x41
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ff62 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80045f8:	f107 0308 	add.w	r3, r7, #8
 80045fc:	4619      	mov	r1, r3
 80045fe:	4620      	mov	r0, r4
 8004600:	f006 f9a6 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004604:	f107 0308 	add.w	r3, r7, #8
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff74 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 800460e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004612:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004616:	681c      	ldr	r4, [r3, #0]
 8004618:	f107 0320 	add.w	r3, r7, #32
 800461c:	eddf 0aeb 	vldr	s1, [pc, #940]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 8004620:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 80049bc <_ZN3jlb5GraphC1Ev+0x404>
 8004624:	2142      	movs	r1, #66	; 0x42
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff48 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 800462c:	f107 0320 	add.w	r3, r7, #32
 8004630:	4619      	mov	r1, r3
 8004632:	4620      	mov	r0, r4
 8004634:	f006 f98c 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004638:	f107 0320 	add.w	r3, r7, #32
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff5a 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8004642:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004646:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800464a:	681c      	ldr	r4, [r3, #0]
 800464c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004650:	eddf 0adb 	vldr	s1, [pc, #876]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 8004654:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004658:	2143      	movs	r1, #67	; 0x43
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff2e 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004664:	4619      	mov	r1, r3
 8004666:	4620      	mov	r0, r4
 8004668:	f006 f972 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800466c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff40 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8004676:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800467a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800467e:	681c      	ldr	r4, [r3, #0]
 8004680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004684:	eddf 0acf 	vldr	s1, [pc, #828]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004688:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800468c:	2144      	movs	r1, #68	; 0x44
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff14 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004694:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004698:	4619      	mov	r1, r3
 800469a:	4620      	mov	r0, r4
 800469c:	f006 f958 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80046a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff26 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 80046aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046b2:	681c      	ldr	r4, [r3, #0]
 80046b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80046b8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80046bc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80046c0:	2145      	movs	r1, #69	; 0x45
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fefa 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80046c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80046cc:	4619      	mov	r1, r3
 80046ce:	4620      	mov	r0, r4
 80046d0:	f006 f93e 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80046d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff0c 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 80046de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80046e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80046e6:	681c      	ldr	r4, [r3, #0]
 80046e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046ec:	eddf 0ab2 	vldr	s1, [pc, #712]	; 80049b8 <_ZN3jlb5GraphC1Ev+0x400>
 80046f0:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 80046f4:	2146      	movs	r1, #70	; 0x46
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fee0 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80046fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004700:	4619      	mov	r1, r3
 8004702:	4620      	mov	r0, r4
 8004704:	f006 f924 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004708:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fef2 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8004712:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004716:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800471a:	681c      	ldr	r4, [r3, #0]
 800471c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004720:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 8004724:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 8004728:	2147      	movs	r1, #71	; 0x47
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fec6 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004734:	4619      	mov	r1, r3
 8004736:	4620      	mov	r0, r4
 8004738:	f006 f90a 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800473c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fed8 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8004746:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800474a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800474e:	681c      	ldr	r4, [r3, #0]
 8004750:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004754:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 8004758:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 800475c:	2148      	movs	r1, #72	; 0x48
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff feac 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004764:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004768:	4619      	mov	r1, r3
 800476a:	4620      	mov	r0, r4
 800476c:	f006 f8f0 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004770:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff febe 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 800477a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800477e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004788:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 800478c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004790:	2149      	movs	r1, #73	; 0x49
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fe92 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004798:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800479c:	4619      	mov	r1, r3
 800479e:	4620      	mov	r0, r4
 80047a0:	f006 f8d6 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80047a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fea4 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 80047ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047b6:	681c      	ldr	r4, [r3, #0]
 80047b8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80047bc:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80047c0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 80047c4:	214a      	movs	r1, #74	; 0x4a
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fe78 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80047cc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80047d0:	4619      	mov	r1, r3
 80047d2:	4620      	mov	r0, r4
 80047d4:	f006 f8bc 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80047d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fe8a 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 80047e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80047e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80047ea:	681c      	ldr	r4, [r3, #0]
 80047ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80047f0:	eddf 0a71 	vldr	s1, [pc, #452]	; 80049b8 <_ZN3jlb5GraphC1Ev+0x400>
 80047f4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80049b8 <_ZN3jlb5GraphC1Ev+0x400>
 80047f8:	214b      	movs	r1, #75	; 0x4b
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff fe5e 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004800:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004804:	4619      	mov	r1, r3
 8004806:	4620      	mov	r0, r4
 8004808:	f006 f8a2 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800480c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fe70 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 8004816:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800481a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800481e:	681c      	ldr	r4, [r3, #0]
 8004820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004824:	eddf 0a69 	vldr	s1, [pc, #420]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 8004828:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80049b8 <_ZN3jlb5GraphC1Ev+0x400>
 800482c:	214c      	movs	r1, #76	; 0x4c
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fe44 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004834:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004838:	4619      	mov	r1, r3
 800483a:	4620      	mov	r0, r4
 800483c:	f006 f888 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fe56 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 800484a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800484e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004852:	681c      	ldr	r4, [r3, #0]
 8004854:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004858:	eddf 0a59 	vldr	s1, [pc, #356]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 800485c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 8004860:	214d      	movs	r1, #77	; 0x4d
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fe2a 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004868:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800486c:	4619      	mov	r1, r3
 800486e:	4620      	mov	r0, r4
 8004870:	f006 f86e 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004874:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fe3c 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 800487e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004882:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004886:	681c      	ldr	r4, [r3, #0]
 8004888:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800488c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004890:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 8004894:	214e      	movs	r1, #78	; 0x4e
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fe10 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 800489c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80048a0:	4619      	mov	r1, r3
 80048a2:	4620      	mov	r0, r4
 80048a4:	f006 f854 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80048a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fe22 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 80048b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048ba:	681c      	ldr	r4, [r3, #0]
 80048bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048c0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80048c4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 80048c8:	214f      	movs	r1, #79	; 0x4f
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fdf6 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80048d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048d4:	4619      	mov	r1, r3
 80048d6:	4620      	mov	r0, r4
 80048d8:	f006 f83a 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80048dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fe08 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 80048e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80048ea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80048ee:	681c      	ldr	r4, [r3, #0]
 80048f0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80048f4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80048f8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80048fc:	2150      	movs	r1, #80	; 0x50
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff fddc 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004904:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004908:	4619      	mov	r1, r3
 800490a:	4620      	mov	r0, r4
 800490c:	f006 f820 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004910:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fdee 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 800491a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800491e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004922:	681c      	ldr	r4, [r3, #0]
 8004924:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004928:	eddf 0a25 	vldr	s1, [pc, #148]	; 80049c0 <_ZN3jlb5GraphC1Ev+0x408>
 800492c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004930:	2151      	movs	r1, #81	; 0x51
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fdc2 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004938:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800493c:	4619      	mov	r1, r3
 800493e:	4620      	mov	r0, r4
 8004940:	f006 f806 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004944:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fdd4 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 800494e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004952:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004956:	681c      	ldr	r4, [r3, #0]
 8004958:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800495c:	eddf 0a16 	vldr	s1, [pc, #88]	; 80049b8 <_ZN3jlb5GraphC1Ev+0x400>
 8004960:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004964:	2152      	movs	r1, #82	; 0x52
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fda8 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 800496c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8004970:	4619      	mov	r1, r3
 8004972:	4620      	mov	r0, r4
 8004974:	f005 ffec 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004978:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fdba 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 8004982:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004986:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800498a:	681c      	ldr	r4, [r3, #0]
 800498c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004990:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80049c4 <_ZN3jlb5GraphC1Ev+0x40c>
 8004994:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004998:	2153      	movs	r1, #83	; 0x53
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fd8e 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80049a0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80049a4:	4619      	mov	r1, r3
 80049a6:	4620      	mov	r0, r4
 80049a8:	f005 ffd2 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80049ac:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fda0 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
 80049b6:	e011      	b.n	80049dc <_ZN3jlb5GraphC1Ev+0x424>
 80049b8:	40866667 	.word	0x40866667
 80049bc:	40d33334 	.word	0x40d33334
 80049c0:	40666667 	.word	0x40666667
 80049c4:	4099999a 	.word	0x4099999a
 80049c8:	40d33334 	.word	0x40d33334
 80049cc:	40accccd 	.word	0x40accccd
 80049d0:	4019999a 	.word	0x4019999a
 80049d4:	40866667 	.word	0x40866667
 80049d8:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 80049dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80049e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80049e4:	681c      	ldr	r4, [r3, #0]
 80049e6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80049ea:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 80049ee:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80049f2:	2154      	movs	r1, #84	; 0x54
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fd61 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 80049fa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80049fe:	4619      	mov	r1, r3
 8004a00:	4620      	mov	r0, r4
 8004a02:	f005 ffa5 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004a06:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fd73 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8004a10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a14:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a18:	681c      	ldr	r4, [r3, #0]
 8004a1a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004a1e:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 80049c8 <_ZN3jlb5GraphC1Ev+0x410>
 8004a22:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004a26:	2155      	movs	r1, #85	; 0x55
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fd47 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004a2e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004a32:	4619      	mov	r1, r3
 8004a34:	4620      	mov	r0, r4
 8004a36:	f005 ff8b 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004a3a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fd59 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 8004a44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a4c:	681c      	ldr	r4, [r3, #0]
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 80049d4 <_ZN3jlb5GraphC1Ev+0x41c>
 8004a56:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 80049d0 <_ZN3jlb5GraphC1Ev+0x418>
 8004a5a:	2156      	movs	r1, #86	; 0x56
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fd2d 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	4619      	mov	r1, r3
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f005 ff71 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fd3f 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 8004a78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004a7c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004a80:	681c      	ldr	r4, [r3, #0]
 8004a82:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004a86:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 80049cc <_ZN3jlb5GraphC1Ev+0x414>
 8004a8a:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80049d0 <_ZN3jlb5GraphC1Ev+0x418>
 8004a8e:	2157      	movs	r1, #87	; 0x57
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fd13 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004a96:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f005 ff57 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004aa2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fd25 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 8004aac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ab0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004ab4:	681c      	ldr	r4, [r3, #0]
 8004ab6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004aba:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 80049d4 <_ZN3jlb5GraphC1Ev+0x41c>
 8004abe:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 80049d8 <_ZN3jlb5GraphC1Ev+0x420>
 8004ac2:	2158      	movs	r1, #88	; 0x58
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fcf9 	bl	80044bc <_ZN3jlb4NodeC1Ecff>
 8004aca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f005 ff3d 	bl	800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ad6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fd0b 	bl	80044f6 <_ZN3jlb4NodeD1Ev>

            const auto UNIT = SQUARE_LENGTH;
 8004ae0:	4be9      	ldr	r3, [pc, #932]	; (8004e88 <_ZN3jlb5GraphC1Ev+0x8d0>)
 8004ae2:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 8004ae6:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8004ae8:	a3e5      	add	r3, pc, #916	; (adr r3, 8004e80 <_ZN3jlb5GraphC1Ev+0x8c8>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 8004af2:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 8004af6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004afa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004afe:	2141      	movs	r1, #65	; 0x41
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f002 ff7f 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004b06:	4604      	mov	r4, r0
 8004b08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b0c:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8004b10:	4ade      	ldr	r2, [pc, #888]	; (8004e8c <_ZN3jlb5GraphC1Ev+0x8d4>)
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b1a:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8004b1e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b28:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b34:	4618      	mov	r0, r3
 8004b36:	f01a fb2e 	bl	801f196 <_ZNSaIcEC1Ev>
 8004b3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b3e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004b42:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 8004b46:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8004b4a:	ca06      	ldmia	r2, {r1, r2}
 8004b4c:	f005 ff11 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004b50:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8004b54:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8004e98 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2143      	movs	r1, #67	; 0x43
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff fce6 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004b62:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8004b66:	4618      	mov	r0, r3
 8004b68:	f005 feb6 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004b6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b70:	4618      	mov	r0, r3
 8004b72:	f01a fb12 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 8004b76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b7a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004b7e:	2141      	movs	r1, #65	; 0x41
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	f002 ff3f 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004b86:	4604      	mov	r4, r0
 8004b88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b8c:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 8004b90:	2243      	movs	r2, #67	; 0x43
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004b98:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8004b9c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ba6:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 8004baa:	2201      	movs	r2, #1
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f01a faef 	bl	801f196 <_ZNSaIcEC1Ev>
 8004bb8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004bbc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004bc0:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 8004bc4:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8004bc8:	ca06      	ldmia	r2, {r1, r2}
 8004bca:	f005 fed2 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004bce:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004bd2:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8004e90 <_ZN3jlb5GraphC1Ev+0x8d8>
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	2142      	movs	r1, #66	; 0x42
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff fca7 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004be0:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004be4:	4618      	mov	r0, r3
 8004be6:	f005 fe77 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004bea:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f01a fad3 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 8004bf4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004bf8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004bfc:	2141      	movs	r1, #65	; 0x41
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	f002 ff00 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004c04:	4604      	mov	r4, r0
 8004c06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c0a:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8004c0e:	2243      	movs	r2, #67	; 0x43
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c16:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8004c1a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c24:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8004c28:	2201      	movs	r2, #1
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004c30:	4618      	mov	r0, r3
 8004c32:	f01a fab0 	bl	801f196 <_ZNSaIcEC1Ev>
 8004c36:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004c3a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004c3e:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 8004c42:	f507 7020 	add.w	r0, r7, #640	; 0x280
 8004c46:	ca06      	ldmia	r2, {r1, r2}
 8004c48:	f005 fe93 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004c4c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8004c50:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8004e98 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004c54:	2201      	movs	r2, #1
 8004c56:	2144      	movs	r1, #68	; 0x44
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7ff fc68 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004c5e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 fe38 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004c68:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f01a fa94 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 8004c72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c76:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004c7a:	2142      	movs	r1, #66	; 0x42
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	f002 fec1 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004c82:	4604      	mov	r4, r0
 8004c84:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c88:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 8004c8c:	2245      	movs	r2, #69	; 0x45
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004c94:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8004c98:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ca2:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f01a fa71 	bl	801f196 <_ZNSaIcEC1Ev>
 8004cb4:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004cb8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004cbc:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 8004cc0:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 8004cc4:	ca06      	ldmia	r2, {r1, r2}
 8004cc6:	f005 fe54 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004cca:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004cce:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8004e90 <_ZN3jlb5GraphC1Ev+0x8d8>
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	2141      	movs	r1, #65	; 0x41
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f7ff fc29 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004cdc:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f005 fdf9 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004ce6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f01a fa55 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8004cf0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004cf4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004cf8:	2142      	movs	r1, #66	; 0x42
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	f002 fe82 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004d00:	4604      	mov	r4, r0
 8004d02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d06:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8004d0a:	4a62      	ldr	r2, [pc, #392]	; (8004e94 <_ZN3jlb5GraphC1Ev+0x8dc>)
 8004d0c:	8812      	ldrh	r2, [r2, #0]
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d14:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004d18:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d22:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8004d26:	2202      	movs	r2, #2
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f01a fa31 	bl	801f196 <_ZNSaIcEC1Ev>
 8004d34:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004d38:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004d3c:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8004d40:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 8004d44:	ca06      	ldmia	r2, {r1, r2}
 8004d46:	f005 fe14 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004d4a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004d4e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8004e98 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004d52:	2201      	movs	r2, #1
 8004d54:	2145      	movs	r1, #69	; 0x45
 8004d56:	4620      	mov	r0, r4
 8004d58:	f7ff fbe9 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004d5c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004d60:	4618      	mov	r0, r3
 8004d62:	f005 fdb9 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d66:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f01a fa15 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 8004d70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d74:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004d78:	2142      	movs	r1, #66	; 0x42
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	f002 fe42 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004d80:	4604      	mov	r4, r0
 8004d82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d86:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8004d8a:	2245      	movs	r2, #69	; 0x45
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004d92:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8004d96:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004da0:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 8004da4:	2201      	movs	r2, #1
 8004da6:	605a      	str	r2, [r3, #4]
 8004da8:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004dac:	4618      	mov	r0, r3
 8004dae:	f01a f9f2 	bl	801f196 <_ZNSaIcEC1Ev>
 8004db2:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004db6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004dba:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 8004dbe:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 8004dc2:	ca06      	ldmia	r2, {r1, r2}
 8004dc4:	f005 fdd5 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004dc8:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8004dcc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8004e98 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2144      	movs	r1, #68	; 0x44
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff fbaa 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004dda:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f005 fd7a 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004de4:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8004de8:	4618      	mov	r0, r3
 8004dea:	f01a f9d6 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8004dee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004df2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004df6:	2143      	movs	r1, #67	; 0x43
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f002 fe03 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e04:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8004e08:	2246      	movs	r2, #70	; 0x46
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e10:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8004e14:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e1e:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 8004e22:	2201      	movs	r2, #1
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f01a f9b3 	bl	801f196 <_ZNSaIcEC1Ev>
 8004e30:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004e34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004e38:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8004e3c:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8004e40:	ca06      	ldmia	r2, {r1, r2}
 8004e42:	f005 fd96 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004e46:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004e4a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8004e98 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2141      	movs	r1, #65	; 0x41
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7ff fb6b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004e58:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f005 fd3b 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004e62:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8004e66:	4618      	mov	r0, r3
 8004e68:	f01a f997 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 8004e6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e74:	2143      	movs	r1, #67	; 0x43
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	f002 fdc4 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004e7c:	e00e      	b.n	8004e9c <_ZN3jlb5GraphC1Ev+0x8e4>
 8004e7e:	bf00      	nop
 8004e80:	460698c7 	.word	0x460698c7
 8004e84:	3fee28c7 	.word	0x3fee28c7
 8004e88:	3f19999a 	.word	0x3f19999a
 8004e8c:	08022fa0 	.word	0x08022fa0
 8004e90:	3f99999a 	.word	0x3f99999a
 8004e94:	08022fa4 	.word	0x08022fa4
 8004e98:	3f71463a 	.word	0x3f71463a
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ea2:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 8004ea6:	2241      	movs	r2, #65	; 0x41
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004eae:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8004eb2:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ebc:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	605a      	str	r2, [r3, #4]
 8004ec4:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f01a f964 	bl	801f196 <_ZNSaIcEC1Ev>
 8004ece:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004ed2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004ed6:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8004eda:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8004ede:	ca06      	ldmia	r2, {r1, r2}
 8004ee0:	f005 fd47 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ee4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8004ee8:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 8004e98 <_ZN3jlb5GraphC1Ev+0x8e0>
 8004eec:	2200      	movs	r2, #0
 8004eee:	2146      	movs	r1, #70	; 0x46
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f7ff fb1c 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004ef6:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8004efa:	4618      	mov	r0, r3
 8004efc:	f005 fcec 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004f00:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8004f04:	4618      	mov	r0, r3
 8004f06:	f01a f948 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8004f0a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f0e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f12:	2144      	movs	r1, #68	; 0x44
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f002 fd75 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f20:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 8004f24:	4ae5      	ldr	r2, [pc, #916]	; (80052bc <_ZN3jlb5GraphC1Ev+0xd04>)
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	8019      	strh	r1, [r3, #0]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	0c12      	lsrs	r2, r2, #16
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f36:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8004f3a:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f44:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8004f48:	2203      	movs	r2, #3
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004f50:	4618      	mov	r0, r3
 8004f52:	f01a f920 	bl	801f196 <_ZNSaIcEC1Ev>
 8004f56:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004f5a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004f5e:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 8004f62:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8004f66:	ca06      	ldmia	r2, {r1, r2}
 8004f68:	f005 fd03 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004f6c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8004f70:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 80052cc <_ZN3jlb5GraphC1Ev+0xd14>
 8004f74:	2200      	movs	r2, #0
 8004f76:	2141      	movs	r1, #65	; 0x41
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff fad8 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8004f7e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8004f82:	4618      	mov	r0, r3
 8004f84:	f005 fca8 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004f88:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f01a f904 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8004f92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f9a:	2144      	movs	r1, #68	; 0x44
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f002 fd31 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fa8:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 8004fac:	4ac3      	ldr	r2, [pc, #780]	; (80052bc <_ZN3jlb5GraphC1Ev+0xd04>)
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	8019      	strh	r1, [r3, #0]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	0c12      	lsrs	r2, r2, #16
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fbe:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8004fc2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fcc:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f01a f8dc 	bl	801f196 <_ZNSaIcEC1Ev>
 8004fde:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8004fe2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8004fe6:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8004fea:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8004fee:	ca06      	ldmia	r2, {r1, r2}
 8004ff0:	f005 fcbf 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8004ff4:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8004ff8:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80052cc <_ZN3jlb5GraphC1Ev+0xd14>
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	2142      	movs	r1, #66	; 0x42
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff fa94 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005006:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800500a:	4618      	mov	r0, r3
 800500c:	f005 fc64 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005010:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005014:	4618      	mov	r0, r3
 8005016:	f01a f8c0 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 800501a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800501e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005022:	2144      	movs	r1, #68	; 0x44
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	f002 fced 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800502a:	4604      	mov	r4, r0
 800502c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005030:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 8005034:	4aa2      	ldr	r2, [pc, #648]	; (80052c0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800503e:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005042:	f507 725d 	add.w	r2, r7, #884	; 0x374
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800504c:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005050:	2202      	movs	r2, #2
 8005052:	605a      	str	r2, [r3, #4]
 8005054:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005058:	4618      	mov	r0, r3
 800505a:	f01a f89c 	bl	801f196 <_ZNSaIcEC1Ev>
 800505e:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005062:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005066:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 800506a:	f507 7058 	add.w	r0, r7, #864	; 0x360
 800506e:	ca06      	ldmia	r2, {r1, r2}
 8005070:	f005 fc7f 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005074:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8005078:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80052cc <_ZN3jlb5GraphC1Ev+0xd14>
 800507c:	2200      	movs	r2, #0
 800507e:	2147      	movs	r1, #71	; 0x47
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff fa54 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005086:	f507 7358 	add.w	r3, r7, #864	; 0x360
 800508a:	4618      	mov	r0, r3
 800508c:	f005 fc24 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005090:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005094:	4618      	mov	r0, r3
 8005096:	f01a f880 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 800509a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800509e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050a2:	2144      	movs	r1, #68	; 0x44
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	f002 fcad 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80050aa:	4604      	mov	r4, r0
 80050ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050b0:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80050b4:	4a82      	ldr	r2, [pc, #520]	; (80052c0 <_ZN3jlb5GraphC1Ev+0xd08>)
 80050b6:	8812      	ldrh	r2, [r2, #0]
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050be:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80050c2:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050cc:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80050d0:	2202      	movs	r2, #2
 80050d2:	605a      	str	r2, [r3, #4]
 80050d4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80050d8:	4618      	mov	r0, r3
 80050da:	f01a f85c 	bl	801f196 <_ZNSaIcEC1Ev>
 80050de:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80050e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80050e6:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 80050ea:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 80050ee:	ca06      	ldmia	r2, {r1, r2}
 80050f0:	f005 fc3f 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80050f4:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80050f8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80052c4 <_ZN3jlb5GraphC1Ev+0xd0c>
 80050fc:	2202      	movs	r2, #2
 80050fe:	2149      	movs	r1, #73	; 0x49
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fa14 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005106:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 800510a:	4618      	mov	r0, r3
 800510c:	f005 fbe4 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005110:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005114:	4618      	mov	r0, r3
 8005116:	f01a f840 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 800511a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800511e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005122:	2144      	movs	r1, #68	; 0x44
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f002 fc6d 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800512a:	4604      	mov	r4, r0
 800512c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005130:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 8005134:	4a62      	ldr	r2, [pc, #392]	; (80052c0 <_ZN3jlb5GraphC1Ev+0xd08>)
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800513e:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005142:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800514c:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005150:	2202      	movs	r2, #2
 8005152:	605a      	str	r2, [r3, #4]
 8005154:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005158:	4618      	mov	r0, r3
 800515a:	f01a f81c 	bl	801f196 <_ZNSaIcEC1Ev>
 800515e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005162:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005166:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 800516a:	f507 7066 	add.w	r0, r7, #920	; 0x398
 800516e:	ca06      	ldmia	r2, {r1, r2}
 8005170:	f005 fbff 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005174:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8005178:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80052cc <_ZN3jlb5GraphC1Ev+0xd14>
 800517c:	2201      	movs	r2, #1
 800517e:	2146      	movs	r1, #70	; 0x46
 8005180:	4620      	mov	r0, r4
 8005182:	f7ff f9d4 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005186:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800518a:	4618      	mov	r0, r3
 800518c:	f005 fba4 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005190:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005194:	4618      	mov	r0, r3
 8005196:	f01a f800 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 800519a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800519e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80051a2:	2145      	movs	r1, #69	; 0x45
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	f002 fc2d 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80051aa:	4604      	mov	r4, r0
 80051ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051b0:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80051b4:	4a44      	ldr	r2, [pc, #272]	; (80052c8 <_ZN3jlb5GraphC1Ev+0xd10>)
 80051b6:	8812      	ldrh	r2, [r2, #0]
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051be:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80051c2:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051cc:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80051d0:	2202      	movs	r2, #2
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80051d8:	4618      	mov	r0, r3
 80051da:	f019 ffdc 	bl	801f196 <_ZNSaIcEC1Ev>
 80051de:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 80051e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80051e6:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 80051ea:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 80051ee:	ca06      	ldmia	r2, {r1, r2}
 80051f0:	f005 fbbf 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80051f4:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 80051f8:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80052cc <_ZN3jlb5GraphC1Ev+0xd14>
 80051fc:	2200      	movs	r2, #0
 80051fe:	2142      	movs	r1, #66	; 0x42
 8005200:	4620      	mov	r0, r4
 8005202:	f7ff f994 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005206:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800520a:	4618      	mov	r0, r3
 800520c:	f005 fb64 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005210:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005214:	4618      	mov	r0, r3
 8005216:	f019 ffc0 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 800521a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800521e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005222:	2145      	movs	r1, #69	; 0x45
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f002 fbed 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800522a:	4604      	mov	r4, r0
 800522c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005230:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8005234:	2242      	movs	r2, #66	; 0x42
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800523c:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8005240:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800524a:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 800524e:	2201      	movs	r2, #1
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005256:	4618      	mov	r0, r3
 8005258:	f019 ff9d 	bl	801f196 <_ZNSaIcEC1Ev>
 800525c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005260:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005264:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8005268:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 800526c:	ca06      	ldmia	r2, {r1, r2}
 800526e:	f005 fb80 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005272:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005276:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80052c4 <_ZN3jlb5GraphC1Ev+0xd0c>
 800527a:	2202      	movs	r2, #2
 800527c:	214a      	movs	r1, #74	; 0x4a
 800527e:	4620      	mov	r0, r4
 8005280:	f7ff f955 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005284:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005288:	4618      	mov	r0, r3
 800528a:	f005 fb25 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800528e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005292:	4618      	mov	r0, r3
 8005294:	f019 ff81 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8005298:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800529c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052a0:	2145      	movs	r1, #69	; 0x45
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	f002 fbae 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80052a8:	4604      	mov	r4, r0
 80052aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052ae:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 80052b2:	2242      	movs	r2, #66	; 0x42
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052ba:	e009      	b.n	80052d0 <_ZN3jlb5GraphC1Ev+0xd18>
 80052bc:	08022fa8 	.word	0x08022fa8
 80052c0:	08022fac 	.word	0x08022fac
 80052c4:	3f99999a 	.word	0x3f99999a
 80052c8:	08022fb0 	.word	0x08022fb0
 80052cc:	3f71463a 	.word	0x3f71463a
 80052d0:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80052d4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052de:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 80052e2:	2201      	movs	r2, #1
 80052e4:	605a      	str	r2, [r3, #4]
 80052e6:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80052ea:	4618      	mov	r0, r3
 80052ec:	f019 ff53 	bl	801f196 <_ZNSaIcEC1Ev>
 80052f0:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80052f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80052f8:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 80052fc:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8005300:	ca06      	ldmia	r2, {r1, r2}
 8005302:	f005 fb36 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005306:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800530a:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80052cc <_ZN3jlb5GraphC1Ev+0xd14>
 800530e:	2201      	movs	r2, #1
 8005310:	2147      	movs	r1, #71	; 0x47
 8005312:	4620      	mov	r0, r4
 8005314:	f7ff f90b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005318:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800531c:	4618      	mov	r0, r3
 800531e:	f005 fadb 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005322:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005326:	4618      	mov	r0, r3
 8005328:	f019 ff37 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 800532c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005330:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005334:	2146      	movs	r1, #70	; 0x46
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	f002 fb64 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800533c:	4604      	mov	r4, r0
 800533e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005342:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8005346:	4ae4      	ldr	r2, [pc, #912]	; (80056d8 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	4611      	mov	r1, r2
 800534c:	8019      	strh	r1, [r3, #0]
 800534e:	3302      	adds	r3, #2
 8005350:	0c12      	lsrs	r2, r2, #16
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005358:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800535c:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005366:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800536a:	2203      	movs	r2, #3
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005372:	4618      	mov	r0, r3
 8005374:	f019 ff0f 	bl	801f196 <_ZNSaIcEC1Ev>
 8005378:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800537c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005380:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8005384:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8005388:	ca06      	ldmia	r2, {r1, r2}
 800538a:	f005 faf2 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800538e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8005392:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 80056dc <_ZN3jlb5GraphC1Ev+0x1124>
 8005396:	2201      	movs	r2, #1
 8005398:	2143      	movs	r1, #67	; 0x43
 800539a:	4620      	mov	r0, r4
 800539c:	f7ff f8c7 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80053a0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 fa97 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80053aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80053ae:	4618      	mov	r0, r3
 80053b0:	f019 fef3 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 80053b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80053bc:	2146      	movs	r1, #70	; 0x46
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	f002 fb20 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80053c4:	4604      	mov	r4, r0
 80053c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053ca:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80053ce:	4ac4      	ldr	r2, [pc, #784]	; (80056e0 <_ZN3jlb5GraphC1Ev+0x1128>)
 80053d0:	8812      	ldrh	r2, [r2, #0]
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053d8:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80053dc:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053e6:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 80053ea:	2202      	movs	r2, #2
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80053f2:	4618      	mov	r0, r3
 80053f4:	f019 fecf 	bl	801f196 <_ZNSaIcEC1Ev>
 80053f8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80053fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005400:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8005404:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8005408:	ca06      	ldmia	r2, {r1, r2}
 800540a:	f005 fab2 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800540e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005412:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80056dc <_ZN3jlb5GraphC1Ev+0x1124>
 8005416:	2200      	movs	r2, #0
 8005418:	2144      	movs	r1, #68	; 0x44
 800541a:	4620      	mov	r0, r4
 800541c:	f7ff f887 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005420:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005424:	4618      	mov	r0, r3
 8005426:	f005 fa57 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800542a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800542e:	4618      	mov	r0, r3
 8005430:	f019 feb3 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8005434:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005438:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800543c:	2146      	movs	r1, #70	; 0x46
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	f002 fae0 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005444:	4604      	mov	r4, r0
 8005446:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800544a:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 800544e:	4aa4      	ldr	r2, [pc, #656]	; (80056e0 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005458:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800545c:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005466:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800546a:	2202      	movs	r2, #2
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005472:	4618      	mov	r0, r3
 8005474:	f019 fe8f 	bl	801f196 <_ZNSaIcEC1Ev>
 8005478:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800547c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005480:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8005484:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8005488:	ca06      	ldmia	r2, {r1, r2}
 800548a:	f005 fa72 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800548e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005492:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80056e4 <_ZN3jlb5GraphC1Ev+0x112c>
 8005496:	2202      	movs	r2, #2
 8005498:	2147      	movs	r1, #71	; 0x47
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff f847 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80054a0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80054a4:	4618      	mov	r0, r3
 80054a6:	f005 fa17 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80054aa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80054ae:	4618      	mov	r0, r3
 80054b0:	f019 fe73 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 80054b4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054b8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054bc:	2146      	movs	r1, #70	; 0x46
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	f002 faa0 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80054c4:	4604      	mov	r4, r0
 80054c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054ca:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 80054ce:	4a84      	ldr	r2, [pc, #528]	; (80056e0 <_ZN3jlb5GraphC1Ev+0x1128>)
 80054d0:	8812      	ldrh	r2, [r2, #0]
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054d8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80054dc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054e6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80054ea:	2202      	movs	r2, #2
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80054f2:	4618      	mov	r0, r3
 80054f4:	f019 fe4f 	bl	801f196 <_ZNSaIcEC1Ev>
 80054f8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80054fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005500:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005504:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8005508:	ca06      	ldmia	r2, {r1, r2}
 800550a:	f005 fa32 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800550e:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005512:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80056dc <_ZN3jlb5GraphC1Ev+0x1124>
 8005516:	2201      	movs	r2, #1
 8005518:	2149      	movs	r1, #73	; 0x49
 800551a:	4620      	mov	r0, r4
 800551c:	f7ff f807 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005520:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005524:	4618      	mov	r0, r3
 8005526:	f005 f9d7 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800552a:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800552e:	4618      	mov	r0, r3
 8005530:	f019 fe33 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005534:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005538:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800553c:	2146      	movs	r1, #70	; 0x46
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	f002 fa60 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005544:	4604      	mov	r4, r0
 8005546:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800554a:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 800554e:	4a62      	ldr	r2, [pc, #392]	; (80056d8 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	4611      	mov	r1, r2
 8005554:	8019      	strh	r1, [r3, #0]
 8005556:	3302      	adds	r3, #2
 8005558:	0c12      	lsrs	r2, r2, #16
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005560:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005564:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800556e:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005572:	2203      	movs	r2, #3
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800557a:	4618      	mov	r0, r3
 800557c:	f019 fe0b 	bl	801f196 <_ZNSaIcEC1Ev>
 8005580:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005584:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005588:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 800558c:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8005590:	ca06      	ldmia	r2, {r1, r2}
 8005592:	f005 f9ee 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005596:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800559a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80056dc <_ZN3jlb5GraphC1Ev+0x1124>
 800559e:	2200      	movs	r2, #0
 80055a0:	2148      	movs	r1, #72	; 0x48
 80055a2:	4620      	mov	r0, r4
 80055a4:	f7fe ffc3 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80055a8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80055ac:	4618      	mov	r0, r3
 80055ae:	f005 f993 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80055b2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80055b6:	4618      	mov	r0, r3
 80055b8:	f019 fdef 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 80055bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055c0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055c4:	2147      	movs	r1, #71	; 0x47
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	f002 fa1c 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80055cc:	4604      	mov	r4, r0
 80055ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055d2:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 80055d6:	4a44      	ldr	r2, [pc, #272]	; (80056e8 <_ZN3jlb5GraphC1Ev+0x1130>)
 80055d8:	8812      	ldrh	r2, [r2, #0]
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055e0:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80055e4:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055ee:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 80055f2:	2202      	movs	r2, #2
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80055fa:	4618      	mov	r0, r3
 80055fc:	f019 fdcb 	bl	801f196 <_ZNSaIcEC1Ev>
 8005600:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005604:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005608:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 800560c:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8005610:	ca06      	ldmia	r2, {r1, r2}
 8005612:	f005 f9ae 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005616:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800561a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80056e4 <_ZN3jlb5GraphC1Ev+0x112c>
 800561e:	2202      	movs	r2, #2
 8005620:	2146      	movs	r1, #70	; 0x46
 8005622:	4620      	mov	r0, r4
 8005624:	f7fe ff83 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005628:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800562c:	4618      	mov	r0, r3
 800562e:	f005 f953 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005632:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005636:	4618      	mov	r0, r3
 8005638:	f019 fdaf 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 800563c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005640:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005644:	2147      	movs	r1, #71	; 0x47
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	f002 f9dc 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800564c:	4604      	mov	r4, r0
 800564e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005652:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8005656:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005658:	8812      	ldrh	r2, [r2, #0]
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005660:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005664:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800566e:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005672:	2202      	movs	r2, #2
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800567a:	4618      	mov	r0, r3
 800567c:	f019 fd8b 	bl	801f196 <_ZNSaIcEC1Ev>
 8005680:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005684:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005688:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 800568c:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8005690:	ca06      	ldmia	r2, {r1, r2}
 8005692:	f005 f96e 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005696:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800569a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80056dc <_ZN3jlb5GraphC1Ev+0x1124>
 800569e:	2201      	movs	r2, #1
 80056a0:	2144      	movs	r1, #68	; 0x44
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7fe ff43 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80056a8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80056ac:	4618      	mov	r0, r3
 80056ae:	f005 f913 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80056b2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80056b6:	4618      	mov	r0, r3
 80056b8:	f019 fd6f 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 80056bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056c0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056c4:	2147      	movs	r1, #71	; 0x47
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	f002 f99c 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80056cc:	4604      	mov	r4, r0
 80056ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056d2:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 80056d6:	e009      	b.n	80056ec <_ZN3jlb5GraphC1Ev+0x1134>
 80056d8:	08022fb4 	.word	0x08022fb4
 80056dc:	3f71463a 	.word	0x3f71463a
 80056e0:	08022fb8 	.word	0x08022fb8
 80056e4:	3f99999a 	.word	0x3f99999a
 80056e8:	08022fbc 	.word	0x08022fbc
 80056ec:	4ae6      	ldr	r2, [pc, #920]	; (8005a88 <_ZN3jlb5GraphC1Ev+0x14d0>)
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4611      	mov	r1, r2
 80056f2:	8019      	strh	r1, [r3, #0]
 80056f4:	3302      	adds	r3, #2
 80056f6:	0c12      	lsrs	r2, r2, #16
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056fe:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005702:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800570c:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005710:	2203      	movs	r2, #3
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005718:	4618      	mov	r0, r3
 800571a:	f019 fd3c 	bl	801f196 <_ZNSaIcEC1Ev>
 800571e:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005722:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005726:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 800572a:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 800572e:	ca06      	ldmia	r2, {r1, r2}
 8005730:	f005 f91f 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005734:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005738:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8005a8c <_ZN3jlb5GraphC1Ev+0x14d4>
 800573c:	2200      	movs	r2, #0
 800573e:	2145      	movs	r1, #69	; 0x45
 8005740:	4620      	mov	r0, r4
 8005742:	f7fe fef4 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005746:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800574a:	4618      	mov	r0, r3
 800574c:	f005 f8c4 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005750:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005754:	4618      	mov	r0, r3
 8005756:	f019 fd20 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 800575a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800575e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005762:	2147      	movs	r1, #71	; 0x47
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	f002 f94d 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800576a:	4604      	mov	r4, r0
 800576c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005770:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8005774:	4ac4      	ldr	r2, [pc, #784]	; (8005a88 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	4611      	mov	r1, r2
 800577a:	8019      	strh	r1, [r3, #0]
 800577c:	3302      	adds	r3, #2
 800577e:	0c12      	lsrs	r2, r2, #16
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005786:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 800578a:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005794:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005798:	2203      	movs	r2, #3
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80057a0:	4618      	mov	r0, r3
 80057a2:	f019 fcf8 	bl	801f196 <_ZNSaIcEC1Ev>
 80057a6:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80057aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80057ae:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 80057b2:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 80057b6:	ca06      	ldmia	r2, {r1, r2}
 80057b8:	f005 f8db 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80057bc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80057c0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8005a8c <_ZN3jlb5GraphC1Ev+0x14d4>
 80057c4:	2201      	movs	r2, #1
 80057c6:	214a      	movs	r1, #74	; 0x4a
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7fe feb0 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80057ce:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80057d2:	4618      	mov	r0, r3
 80057d4:	f005 f880 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80057d8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80057dc:	4618      	mov	r0, r3
 80057de:	f019 fcdc 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 80057e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057ea:	2147      	movs	r1, #71	; 0x47
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	f002 f909 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80057f2:	4604      	mov	r4, r0
 80057f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057f8:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 80057fc:	4aa4      	ldr	r2, [pc, #656]	; (8005a90 <_ZN3jlb5GraphC1Ev+0x14d8>)
 80057fe:	8812      	ldrh	r2, [r2, #0]
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005806:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 800580a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005814:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8005818:	2202      	movs	r2, #2
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8005820:	4618      	mov	r0, r3
 8005822:	f019 fcb8 	bl	801f196 <_ZNSaIcEC1Ev>
 8005826:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800582a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800582e:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 8005832:	f207 5004 	addw	r0, r7, #1284	; 0x504
 8005836:	ca06      	ldmia	r2, {r1, r2}
 8005838:	f005 f89b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800583c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8005840:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8005a8c <_ZN3jlb5GraphC1Ev+0x14d4>
 8005844:	2200      	movs	r2, #0
 8005846:	2149      	movs	r1, #73	; 0x49
 8005848:	4620      	mov	r0, r4
 800584a:	f7fe fe70 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800584e:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8005852:	4618      	mov	r0, r3
 8005854:	f005 f840 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005858:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 800585c:	4618      	mov	r0, r3
 800585e:	f019 fc9c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 8005862:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005866:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800586a:	2148      	movs	r1, #72	; 0x48
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	f002 f8c9 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005872:	4604      	mov	r4, r0
 8005874:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005878:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 800587c:	4a85      	ldr	r2, [pc, #532]	; (8005a94 <_ZN3jlb5GraphC1Ev+0x14dc>)
 800587e:	8812      	ldrh	r2, [r2, #0]
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005886:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 800588a:	f207 5234 	addw	r2, r7, #1332	; 0x534
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005894:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 8005898:	2202      	movs	r2, #2
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80058a0:	4618      	mov	r0, r3
 80058a2:	f019 fc78 	bl	801f196 <_ZNSaIcEC1Ev>
 80058a6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80058aa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80058ae:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 80058b2:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80058b6:	ca06      	ldmia	r2, {r1, r2}
 80058b8:	f005 f85b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80058bc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80058c0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005a8c <_ZN3jlb5GraphC1Ev+0x14d4>
 80058c4:	2201      	movs	r2, #1
 80058c6:	2146      	movs	r1, #70	; 0x46
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7fe fe30 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80058ce:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80058d2:	4618      	mov	r0, r3
 80058d4:	f005 f800 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80058d8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80058dc:	4618      	mov	r0, r3
 80058de:	f019 fc5c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 80058e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058ea:	2148      	movs	r1, #72	; 0x48
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	f002 f889 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80058f2:	4604      	mov	r4, r0
 80058f4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058f8:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 80058fc:	2246      	movs	r2, #70	; 0x46
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005904:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8005908:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005912:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8005916:	2201      	movs	r2, #1
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800591e:	4618      	mov	r0, r3
 8005920:	f019 fc39 	bl	801f196 <_ZNSaIcEC1Ev>
 8005924:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8005928:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800592c:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8005930:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 8005934:	ca06      	ldmia	r2, {r1, r2}
 8005936:	f005 f81c 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800593a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800593e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8005a8c <_ZN3jlb5GraphC1Ev+0x14d4>
 8005942:	2200      	movs	r2, #0
 8005944:	214b      	movs	r1, #75	; 0x4b
 8005946:	4620      	mov	r0, r4
 8005948:	f7fe fdf1 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800594c:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8005950:	4618      	mov	r0, r3
 8005952:	f004 ffc1 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005956:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800595a:	4618      	mov	r0, r3
 800595c:	f019 fc1d 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8005960:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005964:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005968:	2148      	movs	r1, #72	; 0x48
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	f002 f84a 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005970:	4604      	mov	r4, r0
 8005972:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005976:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 800597a:	2246      	movs	r2, #70	; 0x46
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005982:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8005986:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005990:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 8005994:	2201      	movs	r2, #1
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800599c:	4618      	mov	r0, r3
 800599e:	f019 fbfa 	bl	801f196 <_ZNSaIcEC1Ev>
 80059a2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80059a6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80059aa:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 80059ae:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 80059b2:	ca06      	ldmia	r2, {r1, r2}
 80059b4:	f004 ffdd 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80059b8:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80059bc:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8005a9c <_ZN3jlb5GraphC1Ev+0x14e4>
 80059c0:	2202      	movs	r2, #2
 80059c2:	214d      	movs	r1, #77	; 0x4d
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7fe fdb2 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80059ca:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80059ce:	4618      	mov	r0, r3
 80059d0:	f004 ff82 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80059d4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80059d8:	4618      	mov	r0, r3
 80059da:	f019 fbde 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 80059de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059e6:	2149      	movs	r1, #73	; 0x49
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	f002 f80b 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80059ee:	4604      	mov	r4, r0
 80059f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059f4:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 80059f8:	4a27      	ldr	r2, [pc, #156]	; (8005a98 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	4611      	mov	r1, r2
 80059fe:	8019      	strh	r1, [r3, #0]
 8005a00:	3302      	adds	r3, #2
 8005a02:	0c12      	lsrs	r2, r2, #16
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a0a:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8005a0e:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a18:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005a24:	4618      	mov	r0, r3
 8005a26:	f019 fbb6 	bl	801f196 <_ZNSaIcEC1Ev>
 8005a2a:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005a2e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a32:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 8005a36:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8005a3a:	ca06      	ldmia	r2, {r1, r2}
 8005a3c:	f004 ff99 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a40:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8005a44:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005a8c <_ZN3jlb5GraphC1Ev+0x14d4>
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2146      	movs	r1, #70	; 0x46
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	f7fe fd6e 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a52:	f207 5374 	addw	r3, r7, #1396	; 0x574
 8005a56:	4618      	mov	r0, r3
 8005a58:	f004 ff3e 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a5c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8005a60:	4618      	mov	r0, r3
 8005a62:	f019 fb9a 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 8005a66:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a6a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a6e:	2149      	movs	r1, #73	; 0x49
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	f001 ffc7 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005a76:	4604      	mov	r4, r0
 8005a78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a7c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8005a80:	4a05      	ldr	r2, [pc, #20]	; (8005a98 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	4611      	mov	r1, r2
 8005a86:	e00b      	b.n	8005aa0 <_ZN3jlb5GraphC1Ev+0x14e8>
 8005a88:	08022fc0 	.word	0x08022fc0
 8005a8c:	3f71463a 	.word	0x3f71463a
 8005a90:	08022fbc 	.word	0x08022fbc
 8005a94:	08022fc4 	.word	0x08022fc4
 8005a98:	08022fc8 	.word	0x08022fc8
 8005a9c:	3f99999a 	.word	0x3f99999a
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	0c12      	lsrs	r2, r2, #16
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005aac:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8005ab0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005aba:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 8005abe:	2203      	movs	r2, #3
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f019 fb65 	bl	801f196 <_ZNSaIcEC1Ev>
 8005acc:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8005ad0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ad4:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8005ad8:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8005adc:	ca06      	ldmia	r2, {r1, r2}
 8005ade:	f004 ff48 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ae2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005ae6:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8005a9c <_ZN3jlb5GraphC1Ev+0x14e4>
 8005aea:	2202      	movs	r2, #2
 8005aec:	2144      	movs	r1, #68	; 0x44
 8005aee:	4620      	mov	r0, r4
 8005af0:	f7fe fd1d 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005af4:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005af8:	4618      	mov	r0, r3
 8005afa:	f004 feed 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005afe:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f019 fb49 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8005b08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b0c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b10:	2149      	movs	r1, #73	; 0x49
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	f001 ff76 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b1e:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 8005b22:	4ae7      	ldr	r2, [pc, #924]	; (8005ec0 <_ZN3jlb5GraphC1Ev+0x1908>)
 8005b24:	6812      	ldr	r2, [r2, #0]
 8005b26:	4611      	mov	r1, r2
 8005b28:	8019      	strh	r1, [r3, #0]
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	0c12      	lsrs	r2, r2, #16
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b34:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8005b38:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b42:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8005b46:	2203      	movs	r2, #3
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f019 fb21 	bl	801f196 <_ZNSaIcEC1Ev>
 8005b54:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005b58:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b5c:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8005b60:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 8005b64:	ca06      	ldmia	r2, {r1, r2}
 8005b66:	f004 ff04 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b6a:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8005b6e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8005ec4 <_ZN3jlb5GraphC1Ev+0x190c>
 8005b72:	2201      	movs	r2, #1
 8005b74:	2147      	movs	r1, #71	; 0x47
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7fe fcd9 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b7c:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 8005b80:	4618      	mov	r0, r3
 8005b82:	f004 fea9 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b86:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f019 fb05 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8005b90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b94:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b98:	2149      	movs	r1, #73	; 0x49
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	f001 ff32 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ba6:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 8005baa:	4ac7      	ldr	r2, [pc, #796]	; (8005ec8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	4611      	mov	r1, r2
 8005bb0:	8019      	strh	r1, [r3, #0]
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	0c12      	lsrs	r2, r2, #16
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bbc:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8005bc0:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bca:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8005bce:	2203      	movs	r2, #3
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f019 fadd 	bl	801f196 <_ZNSaIcEC1Ev>
 8005bdc:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005be0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005be4:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8005be8:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8005bec:	ca06      	ldmia	r2, {r1, r2}
 8005bee:	f004 fec0 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bf2:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8005bf6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8005ec4 <_ZN3jlb5GraphC1Ev+0x190c>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	214c      	movs	r1, #76	; 0x4c
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f7fe fc95 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c04:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f004 fe65 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c0e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f019 fac1 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8005c18:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c1c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c20:	2149      	movs	r1, #73	; 0x49
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	f001 feee 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005c28:	4604      	mov	r4, r0
 8005c2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c2e:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8005c32:	4aa5      	ldr	r2, [pc, #660]	; (8005ec8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	4611      	mov	r1, r2
 8005c38:	8019      	strh	r1, [r3, #0]
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	0c12      	lsrs	r2, r2, #16
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c44:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8005c48:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c52:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8005c56:	2203      	movs	r2, #3
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f019 fa99 	bl	801f196 <_ZNSaIcEC1Ev>
 8005c64:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005c68:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c6c:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8005c70:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 8005c74:	ca06      	ldmia	r2, {r1, r2}
 8005c76:	f004 fe7c 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c7a:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8005c7e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1914>
 8005c82:	2202      	movs	r2, #2
 8005c84:	214e      	movs	r1, #78	; 0x4e
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7fe fc51 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c8c:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f004 fe21 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c96:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f019 fa7d 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 8005ca0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ca4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ca8:	2149      	movs	r1, #73	; 0x49
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	f001 feaa 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cb6:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8005cba:	4a83      	ldr	r2, [pc, #524]	; (8005ec8 <_ZN3jlb5GraphC1Ev+0x1910>)
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	8019      	strh	r1, [r3, #0]
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	0c12      	lsrs	r2, r2, #16
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ccc:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005cd0:	f207 6214 	addw	r2, r7, #1556	; 0x614
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cda:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8005cde:	2203      	movs	r2, #3
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f019 fa55 	bl	801f196 <_ZNSaIcEC1Ev>
 8005cec:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005cf0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cf4:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8005cf8:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8005cfc:	ca06      	ldmia	r2, {r1, r2}
 8005cfe:	f004 fe38 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d02:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005d06:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8005ec4 <_ZN3jlb5GraphC1Ev+0x190c>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	214b      	movs	r1, #75	; 0x4b
 8005d0e:	4620      	mov	r0, r4
 8005d10:	f7fe fc0d 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d14:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f004 fddd 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d1e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8005d22:	4618      	mov	r0, r3
 8005d24:	f019 fa39 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8005d28:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d2c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d30:	214a      	movs	r1, #74	; 0x4a
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	f001 fe66 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005d38:	4604      	mov	r4, r0
 8005d3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d3e:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8005d42:	224c      	movs	r2, #76	; 0x4c
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d4a:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8005d4e:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d58:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8005d64:	4618      	mov	r0, r3
 8005d66:	f019 fa16 	bl	801f196 <_ZNSaIcEC1Ev>
 8005d6a:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8005d6e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d72:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 8005d76:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 8005d7a:	ca06      	ldmia	r2, {r1, r2}
 8005d7c:	f004 fdf9 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d80:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8005d84:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8005ec4 <_ZN3jlb5GraphC1Ev+0x190c>
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2147      	movs	r1, #71	; 0x47
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f7fe fbce 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d92:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8005d96:	4618      	mov	r0, r3
 8005d98:	f004 fd9e 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d9c:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8005da0:	4618      	mov	r0, r3
 8005da2:	f019 f9fa 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 8005da6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005daa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005dae:	214a      	movs	r1, #74	; 0x4a
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	f001 fe27 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005db6:	4604      	mov	r4, r0
 8005db8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dbc:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8005dc0:	224c      	movs	r2, #76	; 0x4c
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dc8:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8005dcc:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005dd6:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8005dda:	2201      	movs	r2, #1
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005de2:	4618      	mov	r0, r3
 8005de4:	f019 f9d7 	bl	801f196 <_ZNSaIcEC1Ev>
 8005de8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005dec:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005df0:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 8005df4:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8005df8:	ca06      	ldmia	r2, {r1, r2}
 8005dfa:	f004 fdba 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005dfe:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8005e02:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005ecc <_ZN3jlb5GraphC1Ev+0x1914>
 8005e06:	2202      	movs	r2, #2
 8005e08:	2145      	movs	r1, #69	; 0x45
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f7fe fb8f 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e10:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8005e14:	4618      	mov	r0, r3
 8005e16:	f004 fd5f 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e1a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f019 f9bb 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 8005e24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e28:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e2c:	214a      	movs	r1, #74	; 0x4a
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	f001 fde8 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005e34:	4604      	mov	r4, r0
 8005e36:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e3a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8005e3e:	4a24      	ldr	r2, [pc, #144]	; (8005ed0 <_ZN3jlb5GraphC1Ev+0x1918>)
 8005e40:	8812      	ldrh	r2, [r2, #0]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e48:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8005e4c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e56:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8005e62:	4618      	mov	r0, r3
 8005e64:	f019 f997 	bl	801f196 <_ZNSaIcEC1Ev>
 8005e68:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8005e6c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e70:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 8005e74:	f207 6054 	addw	r0, r7, #1620	; 0x654
 8005e78:	ca06      	ldmia	r2, {r1, r2}
 8005e7a:	f004 fd7a 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e7e:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8005e82:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005ec4 <_ZN3jlb5GraphC1Ev+0x190c>
 8005e86:	2201      	movs	r2, #1
 8005e88:	214c      	movs	r1, #76	; 0x4c
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7fe fb4f 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e90:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8005e94:	4618      	mov	r0, r3
 8005e96:	f004 fd1f 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e9a:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f019 f97b 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 8005ea4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ea8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005eac:	214b      	movs	r1, #75	; 0x4b
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	f001 fda8 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005eba:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8005ebe:	e009      	b.n	8005ed4 <_ZN3jlb5GraphC1Ev+0x191c>
 8005ec0:	08022fc8 	.word	0x08022fc8
 8005ec4:	3f71463a 	.word	0x3f71463a
 8005ec8:	08022fcc 	.word	0x08022fcc
 8005ecc:	3f99999a 	.word	0x3f99999a
 8005ed0:	08022fd0 	.word	0x08022fd0
 8005ed4:	4ae4      	ldr	r2, [pc, #912]	; (8006268 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	8019      	strh	r1, [r3, #0]
 8005edc:	3302      	adds	r3, #2
 8005ede:	0c12      	lsrs	r2, r2, #16
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ee6:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8005eea:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ef4:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8005ef8:	2203      	movs	r2, #3
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005f00:	4618      	mov	r0, r3
 8005f02:	f019 f948 	bl	801f196 <_ZNSaIcEC1Ev>
 8005f06:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005f0a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f0e:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 8005f12:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 8005f16:	ca06      	ldmia	r2, {r1, r2}
 8005f18:	f004 fd2b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f1c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005f20:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 800626c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005f24:	2201      	movs	r2, #1
 8005f26:	2148      	movs	r1, #72	; 0x48
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f7fe fb00 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f2e:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005f32:	4618      	mov	r0, r3
 8005f34:	f004 fcd0 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f38:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f019 f92c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 8005f42:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f46:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f4a:	214b      	movs	r1, #75	; 0x4b
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f001 fd59 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005f52:	4604      	mov	r4, r0
 8005f54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f58:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8005f5c:	4ac4      	ldr	r2, [pc, #784]	; (8006270 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f66:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8005f6a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f74:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 8005f78:	2202      	movs	r2, #2
 8005f7a:	605a      	str	r2, [r3, #4]
 8005f7c:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f019 f908 	bl	801f196 <_ZNSaIcEC1Ev>
 8005f86:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005f8a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f8e:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 8005f92:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 8005f96:	ca06      	ldmia	r2, {r1, r2}
 8005f98:	f004 fceb 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f9c:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8005fa0:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 800626c <_ZN3jlb5GraphC1Ev+0x1cb4>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2149      	movs	r1, #73	; 0x49
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7fe fac0 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005fae:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f004 fc90 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005fb8:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f019 f8ec 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 8005fc2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fc6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005fca:	214b      	movs	r1, #75	; 0x4b
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	f001 fd19 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fd8:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8005fdc:	4aa4      	ldr	r2, [pc, #656]	; (8006270 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8005fde:	8812      	ldrh	r2, [r2, #0]
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fe6:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8005fea:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ff4:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006000:	4618      	mov	r0, r3
 8006002:	f019 f8c8 	bl	801f196 <_ZNSaIcEC1Ev>
 8006006:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800600a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800600e:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 8006012:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 8006016:	ca06      	ldmia	r2, {r1, r2}
 8006018:	f004 fcab 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800601c:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006020:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006274 <_ZN3jlb5GraphC1Ev+0x1cbc>
 8006024:	2202      	movs	r2, #2
 8006026:	214c      	movs	r1, #76	; 0x4c
 8006028:	4620      	mov	r0, r4
 800602a:	f7fe fa80 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800602e:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006032:	4618      	mov	r0, r3
 8006034:	f004 fc50 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006038:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800603c:	4618      	mov	r0, r3
 800603e:	f019 f8ac 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 8006042:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006046:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800604a:	214b      	movs	r1, #75	; 0x4b
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	f001 fcd9 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006052:	4604      	mov	r4, r0
 8006054:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006058:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 800605c:	4a84      	ldr	r2, [pc, #528]	; (8006270 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 800605e:	8812      	ldrh	r2, [r2, #0]
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006066:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 800606a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006074:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8006078:	2202      	movs	r2, #2
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8006080:	4618      	mov	r0, r3
 8006082:	f019 f888 	bl	801f196 <_ZNSaIcEC1Ev>
 8006086:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 800608a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800608e:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 8006092:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 8006096:	ca06      	ldmia	r2, {r1, r2}
 8006098:	f004 fc6b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800609c:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80060a0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800626c <_ZN3jlb5GraphC1Ev+0x1cb4>
 80060a4:	2201      	movs	r2, #1
 80060a6:	214e      	movs	r1, #78	; 0x4e
 80060a8:	4620      	mov	r0, r4
 80060aa:	f7fe fa40 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80060ae:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80060b2:	4618      	mov	r0, r3
 80060b4:	f004 fc10 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80060b8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80060bc:	4618      	mov	r0, r3
 80060be:	f019 f86c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80060c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060c6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060ca:	214b      	movs	r1, #75	; 0x4b
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f001 fc99 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80060d2:	4604      	mov	r4, r0
 80060d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060d8:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 80060dc:	4a62      	ldr	r2, [pc, #392]	; (8006268 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 80060de:	6812      	ldr	r2, [r2, #0]
 80060e0:	4611      	mov	r1, r2
 80060e2:	8019      	strh	r1, [r3, #0]
 80060e4:	3302      	adds	r3, #2
 80060e6:	0c12      	lsrs	r2, r2, #16
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060ee:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 80060f2:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060fc:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8006100:	2203      	movs	r2, #3
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006108:	4618      	mov	r0, r3
 800610a:	f019 f844 	bl	801f196 <_ZNSaIcEC1Ev>
 800610e:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006112:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006116:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 800611a:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 800611e:	ca06      	ldmia	r2, {r1, r2}
 8006120:	f004 fc27 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006124:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006128:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800626c <_ZN3jlb5GraphC1Ev+0x1cb4>
 800612c:	2200      	movs	r2, #0
 800612e:	214d      	movs	r1, #77	; 0x4d
 8006130:	4620      	mov	r0, r4
 8006132:	f7fe f9fc 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006136:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800613a:	4618      	mov	r0, r3
 800613c:	f004 fbcc 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006140:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006144:	4618      	mov	r0, r3
 8006146:	f019 f828 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 800614a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800614e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006152:	214c      	movs	r1, #76	; 0x4c
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	f001 fc55 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800615a:	4604      	mov	r4, r0
 800615c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006160:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 8006164:	4a44      	ldr	r2, [pc, #272]	; (8006278 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8006166:	8812      	ldrh	r2, [r2, #0]
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800616e:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006172:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800617c:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 8006180:	2202      	movs	r2, #2
 8006182:	605a      	str	r2, [r3, #4]
 8006184:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006188:	4618      	mov	r0, r3
 800618a:	f019 f804 	bl	801f196 <_ZNSaIcEC1Ev>
 800618e:	f207 7314 	addw	r3, r7, #1812	; 0x714
 8006192:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006196:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 800619a:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 800619e:	ca06      	ldmia	r2, {r1, r2}
 80061a0:	f004 fbe7 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80061a4:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80061a8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006274 <_ZN3jlb5GraphC1Ev+0x1cbc>
 80061ac:	2202      	movs	r2, #2
 80061ae:	214b      	movs	r1, #75	; 0x4b
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7fe f9bc 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80061b6:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80061ba:	4618      	mov	r0, r3
 80061bc:	f004 fb8c 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80061c0:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80061c4:	4618      	mov	r0, r3
 80061c6:	f018 ffe8 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 80061ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061d2:	214c      	movs	r1, #76	; 0x4c
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f001 fc15 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80061da:	4604      	mov	r4, r0
 80061dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061e0:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 80061e4:	4a24      	ldr	r2, [pc, #144]	; (8006278 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	801a      	strh	r2, [r3, #0]
 80061ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061ee:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 80061f2:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061fc:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8006200:	2202      	movs	r2, #2
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006208:	4618      	mov	r0, r3
 800620a:	f018 ffc4 	bl	801f196 <_ZNSaIcEC1Ev>
 800620e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006212:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006216:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 800621a:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 800621e:	ca06      	ldmia	r2, {r1, r2}
 8006220:	f004 fba7 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006224:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8006228:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800626c <_ZN3jlb5GraphC1Ev+0x1cb4>
 800622c:	2201      	movs	r2, #1
 800622e:	2149      	movs	r1, #73	; 0x49
 8006230:	4620      	mov	r0, r4
 8006232:	f7fe f97c 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006236:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800623a:	4618      	mov	r0, r3
 800623c:	f004 fb4c 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006240:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006244:	4618      	mov	r0, r3
 8006246:	f018 ffa8 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 800624a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800624e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006252:	214c      	movs	r1, #76	; 0x4c
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	f001 fbd5 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800625a:	4604      	mov	r4, r0
 800625c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006260:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8006264:	e00a      	b.n	800627c <_ZN3jlb5GraphC1Ev+0x1cc4>
 8006266:	bf00      	nop
 8006268:	08022fd4 	.word	0x08022fd4
 800626c:	3f71463a 	.word	0x3f71463a
 8006270:	08022fd8 	.word	0x08022fd8
 8006274:	3f99999a 	.word	0x3f99999a
 8006278:	08022fdc 	.word	0x08022fdc
 800627c:	4ae4      	ldr	r2, [pc, #912]	; (8006610 <_ZN3jlb5GraphC1Ev+0x2058>)
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	4611      	mov	r1, r2
 8006282:	8019      	strh	r1, [r3, #0]
 8006284:	3302      	adds	r3, #2
 8006286:	0c12      	lsrs	r2, r2, #16
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800628e:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006292:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800629c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80062a0:	2203      	movs	r2, #3
 80062a2:	605a      	str	r2, [r3, #4]
 80062a4:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80062a8:	4618      	mov	r0, r3
 80062aa:	f018 ff74 	bl	801f196 <_ZNSaIcEC1Ev>
 80062ae:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80062b2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80062b6:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 80062ba:	f207 7034 	addw	r0, r7, #1844	; 0x734
 80062be:	ca06      	ldmia	r2, {r1, r2}
 80062c0:	f004 fb57 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80062c4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80062c8:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006614 <_ZN3jlb5GraphC1Ev+0x205c>
 80062cc:	2200      	movs	r2, #0
 80062ce:	214a      	movs	r1, #74	; 0x4a
 80062d0:	4620      	mov	r0, r4
 80062d2:	f7fe f92c 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80062d6:	f207 7334 	addw	r3, r7, #1844	; 0x734
 80062da:	4618      	mov	r0, r3
 80062dc:	f004 fafc 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80062e0:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 80062e4:	4618      	mov	r0, r3
 80062e6:	f018 ff58 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 80062ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062f2:	214c      	movs	r1, #76	; 0x4c
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f001 fb85 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80062fa:	4604      	mov	r4, r0
 80062fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006300:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8006304:	4ac2      	ldr	r2, [pc, #776]	; (8006610 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	4611      	mov	r1, r2
 800630a:	8019      	strh	r1, [r3, #0]
 800630c:	3302      	adds	r3, #2
 800630e:	0c12      	lsrs	r2, r2, #16
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006316:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 800631a:	f207 7264 	addw	r2, r7, #1892	; 0x764
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006324:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8006328:	2203      	movs	r2, #3
 800632a:	605a      	str	r2, [r3, #4]
 800632c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006330:	4618      	mov	r0, r3
 8006332:	f018 ff30 	bl	801f196 <_ZNSaIcEC1Ev>
 8006336:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800633a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800633e:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8006342:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8006346:	ca06      	ldmia	r2, {r1, r2}
 8006348:	f004 fb13 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800634c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006350:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8006614 <_ZN3jlb5GraphC1Ev+0x205c>
 8006354:	2201      	movs	r2, #1
 8006356:	214f      	movs	r1, #79	; 0x4f
 8006358:	4620      	mov	r0, r4
 800635a:	f7fe f8e8 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800635e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006362:	4618      	mov	r0, r3
 8006364:	f004 fab8 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006368:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800636c:	4618      	mov	r0, r3
 800636e:	f018 ff14 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8006372:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006376:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800637a:	214c      	movs	r1, #76	; 0x4c
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	f001 fb41 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006382:	4604      	mov	r4, r0
 8006384:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006388:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 800638c:	4aa2      	ldr	r2, [pc, #648]	; (8006618 <_ZN3jlb5GraphC1Ev+0x2060>)
 800638e:	8812      	ldrh	r2, [r2, #0]
 8006390:	801a      	strh	r2, [r3, #0]
 8006392:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006396:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800639a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063a4:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 80063a8:	2202      	movs	r2, #2
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80063b0:	4618      	mov	r0, r3
 80063b2:	f018 fef0 	bl	801f196 <_ZNSaIcEC1Ev>
 80063b6:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80063ba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80063be:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 80063c2:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 80063c6:	ca06      	ldmia	r2, {r1, r2}
 80063c8:	f004 fad3 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063cc:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80063d0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006614 <_ZN3jlb5GraphC1Ev+0x205c>
 80063d4:	2200      	movs	r2, #0
 80063d6:	214e      	movs	r1, #78	; 0x4e
 80063d8:	4620      	mov	r0, r4
 80063da:	f7fe f8a8 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063de:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80063e2:	4618      	mov	r0, r3
 80063e4:	f004 fa78 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80063e8:	f207 7384 	addw	r3, r7, #1924	; 0x784
 80063ec:	4618      	mov	r0, r3
 80063ee:	f018 fed4 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 80063f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063f6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063fa:	214d      	movs	r1, #77	; 0x4d
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	f001 fb01 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006402:	4604      	mov	r4, r0
 8006404:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006408:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800640c:	4a83      	ldr	r2, [pc, #524]	; (800661c <_ZN3jlb5GraphC1Ev+0x2064>)
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	4611      	mov	r1, r2
 8006412:	8019      	strh	r1, [r3, #0]
 8006414:	3302      	adds	r3, #2
 8006416:	0c12      	lsrs	r2, r2, #16
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800641e:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006422:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800642c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006430:	2203      	movs	r2, #3
 8006432:	605a      	str	r2, [r3, #4]
 8006434:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006438:	4618      	mov	r0, r3
 800643a:	f018 feac 	bl	801f196 <_ZNSaIcEC1Ev>
 800643e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006442:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006446:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 800644a:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 800644e:	ca06      	ldmia	r2, {r1, r2}
 8006450:	f004 fa8f 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006454:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8006458:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8006620 <_ZN3jlb5GraphC1Ev+0x2068>
 800645c:	2202      	movs	r2, #2
 800645e:	2148      	movs	r1, #72	; 0x48
 8006460:	4620      	mov	r0, r4
 8006462:	f7fe f864 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006466:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 800646a:	4618      	mov	r0, r3
 800646c:	f004 fa34 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006470:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006474:	4618      	mov	r0, r3
 8006476:	f018 fe90 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 800647a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800647e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006482:	214d      	movs	r1, #77	; 0x4d
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	f001 fabd 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800648a:	4604      	mov	r4, r0
 800648c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006490:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8006494:	4a61      	ldr	r2, [pc, #388]	; (800661c <_ZN3jlb5GraphC1Ev+0x2064>)
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	4611      	mov	r1, r2
 800649a:	8019      	strh	r1, [r3, #0]
 800649c:	3302      	adds	r3, #2
 800649e:	0c12      	lsrs	r2, r2, #16
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064a6:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80064aa:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064b4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80064b8:	2203      	movs	r2, #3
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80064c0:	4618      	mov	r0, r3
 80064c2:	f018 fe68 	bl	801f196 <_ZNSaIcEC1Ev>
 80064c6:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80064ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064ce:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 80064d2:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 80064d6:	ca06      	ldmia	r2, {r1, r2}
 80064d8:	f004 fa4b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064dc:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80064e0:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8006614 <_ZN3jlb5GraphC1Ev+0x205c>
 80064e4:	2201      	movs	r2, #1
 80064e6:	214b      	movs	r1, #75	; 0x4b
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7fe f820 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064ee:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f004 f9f0 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80064f8:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 80064fc:	4618      	mov	r0, r3
 80064fe:	f018 fe4c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8006502:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006506:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800650a:	214d      	movs	r1, #77	; 0x4d
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f001 fa79 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006512:	4604      	mov	r4, r0
 8006514:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006518:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 800651c:	4a41      	ldr	r2, [pc, #260]	; (8006624 <_ZN3jlb5GraphC1Ev+0x206c>)
 800651e:	8812      	ldrh	r2, [r2, #0]
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006526:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800652a:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006534:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006538:	2202      	movs	r2, #2
 800653a:	605a      	str	r2, [r3, #4]
 800653c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006540:	4618      	mov	r0, r3
 8006542:	f018 fe28 	bl	801f196 <_ZNSaIcEC1Ev>
 8006546:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800654a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800654e:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8006552:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8006556:	ca06      	ldmia	r2, {r1, r2}
 8006558:	f004 fa0b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800655c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006560:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006614 <_ZN3jlb5GraphC1Ev+0x205c>
 8006564:	2200      	movs	r2, #0
 8006566:	2152      	movs	r1, #82	; 0x52
 8006568:	4620      	mov	r0, r4
 800656a:	f7fd ffe0 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800656e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006572:	4618      	mov	r0, r3
 8006574:	f004 f9b0 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006578:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800657c:	4618      	mov	r0, r3
 800657e:	f018 fe0c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8006582:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006586:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800658a:	214d      	movs	r1, #77	; 0x4d
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f001 fa39 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006592:	4604      	mov	r4, r0
 8006594:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006598:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800659c:	4a21      	ldr	r2, [pc, #132]	; (8006624 <_ZN3jlb5GraphC1Ev+0x206c>)
 800659e:	8812      	ldrh	r2, [r2, #0]
 80065a0:	801a      	strh	r2, [r3, #0]
 80065a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065a6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80065aa:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065b4:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80065b8:	2202      	movs	r2, #2
 80065ba:	605a      	str	r2, [r3, #4]
 80065bc:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80065c0:	4618      	mov	r0, r3
 80065c2:	f018 fde8 	bl	801f196 <_ZNSaIcEC1Ev>
 80065c6:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80065ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065ce:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 80065d2:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 80065d6:	ca06      	ldmia	r2, {r1, r2}
 80065d8:	f004 f9cb 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065dc:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80065e0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006628 <_ZN3jlb5GraphC1Ev+0x2070>
 80065e4:	2202      	movs	r2, #2
 80065e6:	2151      	movs	r1, #81	; 0x51
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7fd ffa0 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065ee:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 80065f2:	4618      	mov	r0, r3
 80065f4:	f004 f970 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80065f8:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 80065fc:	4618      	mov	r0, r3
 80065fe:	f018 fdcc 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8006602:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006606:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800660a:	214d      	movs	r1, #77	; 0x4d
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	e00d      	b.n	800662c <_ZN3jlb5GraphC1Ev+0x2074>
 8006610:	08022fe0 	.word	0x08022fe0
 8006614:	3f71463a 	.word	0x3f71463a
 8006618:	08022fdc 	.word	0x08022fdc
 800661c:	08022fe4 	.word	0x08022fe4
 8006620:	3f99999a 	.word	0x3f99999a
 8006624:	08022fe8 	.word	0x08022fe8
 8006628:	3f19999a 	.word	0x3f19999a
 800662c:	f001 f9ea 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006630:	4604      	mov	r4, r0
 8006632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006636:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 800663a:	4ae5      	ldr	r2, [pc, #916]	; (80069d0 <_ZN3jlb5GraphC1Ev+0x2418>)
 800663c:	8812      	ldrh	r2, [r2, #0]
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006644:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006648:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006652:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006656:	2202      	movs	r2, #2
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800665e:	4618      	mov	r0, r3
 8006660:	f018 fd99 	bl	801f196 <_ZNSaIcEC1Ev>
 8006664:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006668:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800666c:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8006670:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8006674:	ca06      	ldmia	r2, {r1, r2}
 8006676:	f004 f97c 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800667a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800667e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80069d4 <_ZN3jlb5GraphC1Ev+0x241c>
 8006682:	2201      	movs	r2, #1
 8006684:	2150      	movs	r1, #80	; 0x50
 8006686:	4620      	mov	r0, r4
 8006688:	f7fd ff51 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800668c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006690:	4618      	mov	r0, r3
 8006692:	f004 f921 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006696:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800669a:	4618      	mov	r0, r3
 800669c:	f018 fd7d 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80066a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80066a8:	214e      	movs	r1, #78	; 0x4e
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	f001 f9aa 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80066b0:	4604      	mov	r4, r0
 80066b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066b6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80066ba:	4ac7      	ldr	r2, [pc, #796]	; (80069d8 <_ZN3jlb5GraphC1Ev+0x2420>)
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	4611      	mov	r1, r2
 80066c0:	8019      	strh	r1, [r3, #0]
 80066c2:	3302      	adds	r3, #2
 80066c4:	0c12      	lsrs	r2, r2, #16
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066cc:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80066d0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066da:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 80066de:	2203      	movs	r2, #3
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80066e6:	4618      	mov	r0, r3
 80066e8:	f018 fd55 	bl	801f196 <_ZNSaIcEC1Ev>
 80066ec:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80066f0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066f4:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80066f8:	f607 0014 	addw	r0, r7, #2068	; 0x814
 80066fc:	ca06      	ldmia	r2, {r1, r2}
 80066fe:	f004 f938 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006702:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006706:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80069d4 <_ZN3jlb5GraphC1Ev+0x241c>
 800670a:	2200      	movs	r2, #0
 800670c:	214b      	movs	r1, #75	; 0x4b
 800670e:	4620      	mov	r0, r4
 8006710:	f7fd ff0d 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006714:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006718:	4618      	mov	r0, r3
 800671a:	f004 f8dd 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800671e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006722:	4618      	mov	r0, r3
 8006724:	f018 fd39 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8006728:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800672c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006730:	214e      	movs	r1, #78	; 0x4e
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	f001 f966 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006738:	4604      	mov	r4, r0
 800673a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800673e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8006742:	4aa5      	ldr	r2, [pc, #660]	; (80069d8 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	4611      	mov	r1, r2
 8006748:	8019      	strh	r1, [r3, #0]
 800674a:	3302      	adds	r3, #2
 800674c:	0c12      	lsrs	r2, r2, #16
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006754:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006758:	f607 0244 	addw	r2, r7, #2116	; 0x844
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006762:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006766:	2203      	movs	r2, #3
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	f607 0348 	addw	r3, r7, #2120	; 0x848
 800676e:	4618      	mov	r0, r3
 8006770:	f018 fd11 	bl	801f196 <_ZNSaIcEC1Ev>
 8006774:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006778:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800677c:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8006780:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 8006784:	ca06      	ldmia	r2, {r1, r2}
 8006786:	f004 f8f4 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800678a:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800678e:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80069dc <_ZN3jlb5GraphC1Ev+0x2424>
 8006792:	2202      	movs	r2, #2
 8006794:	2149      	movs	r1, #73	; 0x49
 8006796:	4620      	mov	r0, r4
 8006798:	f7fd fec9 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800679c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80067a0:	4618      	mov	r0, r3
 80067a2:	f004 f899 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80067a6:	f607 0348 	addw	r3, r7, #2120	; 0x848
 80067aa:	4618      	mov	r0, r3
 80067ac:	f018 fcf5 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 80067b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80067b8:	214e      	movs	r1, #78	; 0x4e
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	f001 f922 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80067c0:	4604      	mov	r4, r0
 80067c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067c6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80067ca:	4a83      	ldr	r2, [pc, #524]	; (80069d8 <_ZN3jlb5GraphC1Ev+0x2420>)
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	4611      	mov	r1, r2
 80067d0:	8019      	strh	r1, [r3, #0]
 80067d2:	3302      	adds	r3, #2
 80067d4:	0c12      	lsrs	r2, r2, #16
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067dc:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80067e0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067ea:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80067ee:	2203      	movs	r2, #3
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	f607 0364 	addw	r3, r7, #2148	; 0x864
 80067f6:	4618      	mov	r0, r3
 80067f8:	f018 fccd 	bl	801f196 <_ZNSaIcEC1Ev>
 80067fc:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006800:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006804:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8006808:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 800680c:	ca06      	ldmia	r2, {r1, r2}
 800680e:	f004 f8b0 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006812:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8006816:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80069d4 <_ZN3jlb5GraphC1Ev+0x241c>
 800681a:	2201      	movs	r2, #1
 800681c:	214c      	movs	r1, #76	; 0x4c
 800681e:	4620      	mov	r0, r4
 8006820:	f7fd fe85 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006824:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8006828:	4618      	mov	r0, r3
 800682a:	f004 f855 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800682e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8006832:	4618      	mov	r0, r3
 8006834:	f018 fcb1 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8006838:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800683c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006840:	214e      	movs	r1, #78	; 0x4e
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	f001 f8de 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006848:	4604      	mov	r4, r0
 800684a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800684e:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8006852:	4a63      	ldr	r2, [pc, #396]	; (80069e0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8006854:	6812      	ldr	r2, [r2, #0]
 8006856:	4611      	mov	r1, r2
 8006858:	8019      	strh	r1, [r3, #0]
 800685a:	3302      	adds	r3, #2
 800685c:	0c12      	lsrs	r2, r2, #16
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006864:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8006868:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006872:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8006876:	2203      	movs	r2, #3
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800687e:	4618      	mov	r0, r3
 8006880:	f018 fc89 	bl	801f196 <_ZNSaIcEC1Ev>
 8006884:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8006888:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800688c:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 8006890:	f607 0068 	addw	r0, r7, #2152	; 0x868
 8006894:	ca06      	ldmia	r2, {r1, r2}
 8006896:	f004 f86c 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800689a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800689e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80069d4 <_ZN3jlb5GraphC1Ev+0x241c>
 80068a2:	2200      	movs	r2, #0
 80068a4:	2154      	movs	r1, #84	; 0x54
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7fd fe41 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068ac:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80068b0:	4618      	mov	r0, r3
 80068b2:	f004 f811 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80068b6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80068ba:	4618      	mov	r0, r3
 80068bc:	f018 fc6d 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80068c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068c4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80068c8:	214e      	movs	r1, #78	; 0x4e
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	f001 f89a 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80068d0:	4604      	mov	r4, r0
 80068d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068d6:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80068da:	4a41      	ldr	r2, [pc, #260]	; (80069e0 <_ZN3jlb5GraphC1Ev+0x2428>)
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	4611      	mov	r1, r2
 80068e0:	8019      	strh	r1, [r3, #0]
 80068e2:	3302      	adds	r3, #2
 80068e4:	0c12      	lsrs	r2, r2, #16
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ec:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80068f0:	f607 0298 	addw	r2, r7, #2200	; 0x898
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068fa:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80068fe:	2203      	movs	r2, #3
 8006900:	605a      	str	r2, [r3, #4]
 8006902:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006906:	4618      	mov	r0, r3
 8006908:	f018 fc45 	bl	801f196 <_ZNSaIcEC1Ev>
 800690c:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006910:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006914:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8006918:	f607 0084 	addw	r0, r7, #2180	; 0x884
 800691c:	ca06      	ldmia	r2, {r1, r2}
 800691e:	f004 f828 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006922:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8006926:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80069e4 <_ZN3jlb5GraphC1Ev+0x242c>
 800692a:	2202      	movs	r2, #2
 800692c:	2153      	movs	r1, #83	; 0x53
 800692e:	4620      	mov	r0, r4
 8006930:	f7fd fdfd 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006934:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8006938:	4618      	mov	r0, r3
 800693a:	f003 ffcd 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800693e:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8006942:	4618      	mov	r0, r3
 8006944:	f018 fc29 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8006948:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800694c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006950:	214e      	movs	r1, #78	; 0x4e
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	f001 f856 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006958:	4604      	mov	r4, r0
 800695a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800695e:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <_ZN3jlb5GraphC1Ev+0x2428>)
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	4611      	mov	r1, r2
 8006968:	8019      	strh	r1, [r3, #0]
 800696a:	3302      	adds	r3, #2
 800696c:	0c12      	lsrs	r2, r2, #16
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006974:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8006978:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006982:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 8006986:	2203      	movs	r2, #3
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 800698e:	4618      	mov	r0, r3
 8006990:	f018 fc01 	bl	801f196 <_ZNSaIcEC1Ev>
 8006994:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8006998:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800699c:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 80069a0:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 80069a4:	ca06      	ldmia	r2, {r1, r2}
 80069a6:	f003 ffe4 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80069aa:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80069ae:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80069d4 <_ZN3jlb5GraphC1Ev+0x241c>
 80069b2:	2201      	movs	r2, #1
 80069b4:	2152      	movs	r1, #82	; 0x52
 80069b6:	4620      	mov	r0, r4
 80069b8:	f7fd fdb9 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069bc:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f003 ff89 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80069c6:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80069ca:	4618      	mov	r0, r3
 80069cc:	e00c      	b.n	80069e8 <_ZN3jlb5GraphC1Ev+0x2430>
 80069ce:	bf00      	nop
 80069d0:	08022fe8 	.word	0x08022fe8
 80069d4:	3f71463a 	.word	0x3f71463a
 80069d8:	08022fec 	.word	0x08022fec
 80069dc:	3f99999a 	.word	0x3f99999a
 80069e0:	08022ff0 	.word	0x08022ff0
 80069e4:	3f19999a 	.word	0x3f19999a
 80069e8:	f018 fbd7 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 80069ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80069f4:	214f      	movs	r1, #79	; 0x4f
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f001 f804 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80069fc:	4604      	mov	r4, r0
 80069fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a02:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8006a06:	4aeb      	ldr	r2, [pc, #940]	; (8006db4 <_ZN3jlb5GraphC1Ev+0x27fc>)
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	8019      	strh	r1, [r3, #0]
 8006a0e:	3302      	adds	r3, #2
 8006a10:	0c12      	lsrs	r2, r2, #16
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a18:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8006a1c:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a26:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8006a2a:	2203      	movs	r2, #3
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006a32:	4618      	mov	r0, r3
 8006a34:	f018 fbaf 	bl	801f196 <_ZNSaIcEC1Ev>
 8006a38:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006a3c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a40:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 8006a44:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8006a48:	ca06      	ldmia	r2, {r1, r2}
 8006a4a:	f003 ff92 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a4e:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8006a52:	ed9f 0adc 	vldr	s0, [pc, #880]	; 8006dc4 <_ZN3jlb5GraphC1Ev+0x280c>
 8006a56:	2200      	movs	r2, #0
 8006a58:	214c      	movs	r1, #76	; 0x4c
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7fd fd67 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a60:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 8006a64:	4618      	mov	r0, r3
 8006a66:	f003 ff37 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a6a:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f018 fb93 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006a74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a7c:	214f      	movs	r1, #79	; 0x4f
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	f000 ffc0 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006a84:	4604      	mov	r4, r0
 8006a86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a8a:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8006a8e:	224c      	movs	r2, #76	; 0x4c
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a96:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8006a9a:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006aa4:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	605a      	str	r2, [r3, #4]
 8006aac:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f018 fb70 	bl	801f196 <_ZNSaIcEC1Ev>
 8006ab6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8006aba:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006abe:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 8006ac2:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 8006ac6:	ca06      	ldmia	r2, {r1, r2}
 8006ac8:	f003 ff53 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006acc:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006ad0:	ed9f 0abc 	vldr	s0, [pc, #752]	; 8006dc4 <_ZN3jlb5GraphC1Ev+0x280c>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2155      	movs	r1, #85	; 0x55
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f7fd fd28 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ade:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f003 fef8 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ae8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f018 fb54 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 8006af2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006af6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006afa:	214f      	movs	r1, #79	; 0x4f
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	f000 ff81 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006b02:	4604      	mov	r4, r0
 8006b04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b08:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8006b0c:	224c      	movs	r2, #76	; 0x4c
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b14:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8006b18:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b22:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8006b26:	2201      	movs	r2, #1
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f018 fb31 	bl	801f196 <_ZNSaIcEC1Ev>
 8006b34:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8006b38:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b3c:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8006b40:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 8006b44:	ca06      	ldmia	r2, {r1, r2}
 8006b46:	f003 ff14 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b4a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8006b4e:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8006db8 <_ZN3jlb5GraphC1Ev+0x2800>
 8006b52:	2202      	movs	r2, #2
 8006b54:	2157      	movs	r1, #87	; 0x57
 8006b56:	4620      	mov	r0, r4
 8006b58:	f7fd fce9 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b5c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8006b60:	4618      	mov	r0, r3
 8006b62:	f003 feb9 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b66:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f018 fb15 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 8006b70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b74:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b78:	214f      	movs	r1, #79	; 0x4f
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	f000 ff42 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006b80:	4604      	mov	r4, r0
 8006b82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b86:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8006b8a:	224c      	movs	r2, #76	; 0x4c
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b92:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8006b96:	f607 1224 	addw	r2, r7, #2340	; 0x924
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ba0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	605a      	str	r2, [r3, #4]
 8006ba8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006bac:	4618      	mov	r0, r3
 8006bae:	f018 faf2 	bl	801f196 <_ZNSaIcEC1Ev>
 8006bb2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006bb6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006bba:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 8006bbe:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 8006bc2:	ca06      	ldmia	r2, {r1, r2}
 8006bc4:	f003 fed5 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006bc8:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8006bcc:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8006dc4 <_ZN3jlb5GraphC1Ev+0x280c>
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	2154      	movs	r1, #84	; 0x54
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7fd fcaa 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006bda:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8006bde:	4618      	mov	r0, r3
 8006be0:	f003 fe7a 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006be4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8006be8:	4618      	mov	r0, r3
 8006bea:	f018 fad6 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8006bee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bf2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006bf6:	2150      	movs	r1, #80	; 0x50
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	f000 ff03 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006bfe:	4604      	mov	r4, r0
 8006c00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c04:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8006c08:	2250      	movs	r2, #80	; 0x50
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c10:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8006c14:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c1e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8006c22:	2201      	movs	r2, #1
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f018 fab3 	bl	801f196 <_ZNSaIcEC1Ev>
 8006c30:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8006c34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c38:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8006c3c:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8006c40:	ca06      	ldmia	r2, {r1, r2}
 8006c42:	f003 fe96 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c46:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006c4a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8006dc4 <_ZN3jlb5GraphC1Ev+0x280c>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	214d      	movs	r1, #77	; 0x4d
 8006c52:	4620      	mov	r0, r4
 8006c54:	f7fd fc6b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c58:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f003 fe3b 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c62:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8006c66:	4618      	mov	r0, r3
 8006c68:	f018 fa97 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 8006c6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c74:	2150      	movs	r1, #80	; 0x50
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	f000 fec4 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c82:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8006c86:	2250      	movs	r2, #80	; 0x50
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c8e:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8006c92:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c9c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	605a      	str	r2, [r3, #4]
 8006ca4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f018 fa74 	bl	801f196 <_ZNSaIcEC1Ev>
 8006cae:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8006cb2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006cb6:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 8006cba:	f607 1048 	addw	r0, r7, #2376	; 0x948
 8006cbe:	ca06      	ldmia	r2, {r1, r2}
 8006cc0:	f003 fe57 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006cc4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8006cc8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8006dc0 <_ZN3jlb5GraphC1Ev+0x2808>
 8006ccc:	2202      	movs	r2, #2
 8006cce:	2151      	movs	r1, #81	; 0x51
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f7fd fc2c 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006cd6:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f003 fdfc 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ce0:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f018 fa58 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8006cea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cf2:	2151      	movs	r1, #81	; 0x51
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	f000 fe85 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d00:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8006d04:	2252      	movs	r2, #82	; 0x52
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d0c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8006d10:	f607 1278 	addw	r2, r7, #2424	; 0x978
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d1a:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8006d1e:	2201      	movs	r2, #1
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8006d26:	4618      	mov	r0, r3
 8006d28:	f018 fa35 	bl	801f196 <_ZNSaIcEC1Ev>
 8006d2c:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8006d30:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d34:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8006d38:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8006d3c:	ca06      	ldmia	r2, {r1, r2}
 8006d3e:	f003 fe18 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d42:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8006d46:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8006dc0 <_ZN3jlb5GraphC1Ev+0x2808>
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	2150      	movs	r1, #80	; 0x50
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f7fd fbed 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d54:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f003 fdbd 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d5e:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8006d62:	4618      	mov	r0, r3
 8006d64:	f018 fa19 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 8006d68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d6c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d70:	2151      	movs	r1, #81	; 0x51
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	f000 fe46 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d7e:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8006d82:	4a0e      	ldr	r2, [pc, #56]	; (8006dbc <_ZN3jlb5GraphC1Ev+0x2804>)
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d8c:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8006d90:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d9a:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 8006d9e:	2202      	movs	r2, #2
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8006da6:	4618      	mov	r0, r3
 8006da8:	f018 f9f5 	bl	801f196 <_ZNSaIcEC1Ev>
 8006dac:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8006db0:	e00c      	b.n	8006dcc <_ZN3jlb5GraphC1Ev+0x2814>
 8006db2:	bf00      	nop
 8006db4:	08022ff4 	.word	0x08022ff4
 8006db8:	3fc56fea 	.word	0x3fc56fea
 8006dbc:	08022ff8 	.word	0x08022ff8
 8006dc0:	3f19999a 	.word	0x3f19999a
 8006dc4:	3f71463a 	.word	0x3f71463a
 8006dc8:	401c518f 	.word	0x401c518f
 8006dcc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006dd0:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 8006dd4:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8006dd8:	ca06      	ldmia	r2, {r1, r2}
 8006dda:	f003 fdca 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006dde:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8006de2:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8006dc0 <_ZN3jlb5GraphC1Ev+0x2808>
 8006de6:	2202      	movs	r2, #2
 8006de8:	214d      	movs	r1, #77	; 0x4d
 8006dea:	4620      	mov	r0, r4
 8006dec:	f7fd fb9f 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006df0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8006df4:	4618      	mov	r0, r3
 8006df6:	f003 fd6f 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006dfa:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f018 f9cb 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 8006e04:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e08:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e0c:	2151      	movs	r1, #81	; 0x51
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	f000 fdf8 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006e14:	4604      	mov	r4, r0
 8006e16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e1a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8006e1e:	2250      	movs	r2, #80	; 0x50
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e26:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8006e2a:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e34:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8006e38:	2201      	movs	r2, #1
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f018 f9a8 	bl	801f196 <_ZNSaIcEC1Ev>
 8006e46:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8006e4a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e4e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8006e52:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 8006e56:	ca06      	ldmia	r2, {r1, r2}
 8006e58:	f003 fd8b 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e5c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006e60:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 8006dc0 <_ZN3jlb5GraphC1Ev+0x2808>
 8006e64:	2202      	movs	r2, #2
 8006e66:	2152      	movs	r1, #82	; 0x52
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7fd fb60 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e6e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006e72:	4618      	mov	r0, r3
 8006e74:	f003 fd30 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e78:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f018 f98c 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 8006e82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e86:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e8a:	2151      	movs	r1, #81	; 0x51
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	f000 fdb9 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006e92:	4604      	mov	r4, r0
 8006e94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e98:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8006e9c:	224d      	movs	r2, #77	; 0x4d
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ea4:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8006ea8:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006eb2:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f018 f969 	bl	801f196 <_ZNSaIcEC1Ev>
 8006ec4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006ec8:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ecc:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8006ed0:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8006ed4:	ca06      	ldmia	r2, {r1, r2}
 8006ed6:	f003 fd4c 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006eda:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8006ede:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 8006dc4 <_ZN3jlb5GraphC1Ev+0x280c>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2156      	movs	r1, #86	; 0x56
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7fd fb21 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006eec:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f003 fcf1 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ef6:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f018 f94d 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8006f00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f04:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f08:	2151      	movs	r1, #81	; 0x51
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	f000 fd7a 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006f10:	4604      	mov	r4, r0
 8006f12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f16:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8006f1a:	224d      	movs	r2, #77	; 0x4d
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f22:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8006f26:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f30:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8006f34:	2201      	movs	r2, #1
 8006f36:	605a      	str	r2, [r3, #4]
 8006f38:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f018 f92a 	bl	801f196 <_ZNSaIcEC1Ev>
 8006f42:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006f46:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f4a:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8006f4e:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 8006f52:	ca06      	ldmia	r2, {r1, r2}
 8006f54:	f003 fd0d 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f58:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8006f5c:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8006dc8 <_ZN3jlb5GraphC1Ev+0x2810>
 8006f60:	2202      	movs	r2, #2
 8006f62:	2158      	movs	r1, #88	; 0x58
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7fd fae2 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f6a:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f003 fcb2 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f74:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f018 f90e 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 8006f7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f82:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f86:	2152      	movs	r1, #82	; 0x52
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f000 fd3b 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8006f8e:	4604      	mov	r4, r0
 8006f90:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f94:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f98:	4ae6      	ldr	r2, [pc, #920]	; (8007334 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8006f9a:	8812      	ldrh	r2, [r2, #0]
 8006f9c:	801a      	strh	r2, [r3, #0]
 8006f9e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fa2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006fa6:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fb0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	605a      	str	r2, [r3, #4]
 8006fb8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f018 f8ea 	bl	801f196 <_ZNSaIcEC1Ev>
 8006fc2:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006fc6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006fca:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8006fce:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 8006fd2:	ca06      	ldmia	r2, {r1, r2}
 8006fd4:	f003 fccd 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006fd8:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006fdc:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8007338 <_ZN3jlb5GraphC1Ev+0x2d80>
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	2151      	movs	r1, #81	; 0x51
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f7fd faa2 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006fea:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f003 fc72 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ff4:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f018 f8ce 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8006ffe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007002:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007006:	2152      	movs	r1, #82	; 0x52
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f000 fcfb 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800700e:	4604      	mov	r4, r0
 8007010:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007014:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007018:	4ac6      	ldr	r2, [pc, #792]	; (8007334 <_ZN3jlb5GraphC1Ev+0x2d7c>)
 800701a:	8812      	ldrh	r2, [r2, #0]
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007022:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007026:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007030:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8007034:	2202      	movs	r2, #2
 8007036:	605a      	str	r2, [r3, #4]
 8007038:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800703c:	4618      	mov	r0, r3
 800703e:	f018 f8aa 	bl	801f196 <_ZNSaIcEC1Ev>
 8007042:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007046:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800704a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 800704e:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 8007052:	ca06      	ldmia	r2, {r1, r2}
 8007054:	f003 fc8d 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007058:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800705c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8007344 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007060:	2201      	movs	r2, #1
 8007062:	214d      	movs	r1, #77	; 0x4d
 8007064:	4620      	mov	r0, r4
 8007066:	f7fd fa62 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800706a:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 800706e:	4618      	mov	r0, r3
 8007070:	f003 fc32 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007074:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007078:	4618      	mov	r0, r3
 800707a:	f018 f88e 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 800707e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007082:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007086:	2152      	movs	r1, #82	; 0x52
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	f000 fcbb 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800708e:	4604      	mov	r4, r0
 8007090:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007094:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007098:	4aa8      	ldr	r2, [pc, #672]	; (800733c <_ZN3jlb5GraphC1Ev+0x2d84>)
 800709a:	8812      	ldrh	r2, [r2, #0]
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070a2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80070a6:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070b0:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80070b4:	2202      	movs	r2, #2
 80070b6:	605a      	str	r2, [r3, #4]
 80070b8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80070bc:	4618      	mov	r0, r3
 80070be:	f018 f86a 	bl	801f196 <_ZNSaIcEC1Ev>
 80070c2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80070c6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80070ca:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 80070ce:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 80070d2:	ca06      	ldmia	r2, {r1, r2}
 80070d4:	f003 fc4d 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80070d8:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80070dc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8007344 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80070e0:	2200      	movs	r2, #0
 80070e2:	214e      	movs	r1, #78	; 0x4e
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7fd fa22 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80070ea:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 80070ee:	4618      	mov	r0, r3
 80070f0:	f003 fbf2 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80070f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80070f8:	4618      	mov	r0, r3
 80070fa:	f018 f84e 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 80070fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007102:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007106:	2152      	movs	r1, #82	; 0x52
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	f000 fc7b 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800710e:	4604      	mov	r4, r0
 8007110:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007114:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8007118:	4a88      	ldr	r2, [pc, #544]	; (800733c <_ZN3jlb5GraphC1Ev+0x2d84>)
 800711a:	8812      	ldrh	r2, [r2, #0]
 800711c:	801a      	strh	r2, [r3, #0]
 800711e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007122:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8007126:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007130:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8007134:	2202      	movs	r2, #2
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 800713c:	4618      	mov	r0, r3
 800713e:	f018 f82a 	bl	801f196 <_ZNSaIcEC1Ev>
 8007142:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007146:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800714a:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 800714e:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 8007152:	ca06      	ldmia	r2, {r1, r2}
 8007154:	f003 fc0d 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007158:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800715c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8007338 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007160:	2202      	movs	r2, #2
 8007162:	2153      	movs	r1, #83	; 0x53
 8007164:	4620      	mov	r0, r4
 8007166:	f7fd f9e2 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800716a:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 800716e:	4618      	mov	r0, r3
 8007170:	f003 fbb2 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007174:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007178:	4618      	mov	r0, r3
 800717a:	f018 f80e 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 800717e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007182:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007186:	2153      	movs	r1, #83	; 0x53
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f000 fc3b 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800718e:	4604      	mov	r4, r0
 8007190:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007194:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8007198:	2254      	movs	r2, #84	; 0x54
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071a4:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071b2:	2201      	movs	r2, #1
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80071ba:	4618      	mov	r0, r3
 80071bc:	f017 ffeb 	bl	801f196 <_ZNSaIcEC1Ev>
 80071c0:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80071c4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071c8:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 80071cc:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 80071d0:	ca06      	ldmia	r2, {r1, r2}
 80071d2:	f003 fbce 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80071d6:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80071da:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8007338 <_ZN3jlb5GraphC1Ev+0x2d80>
 80071de:	2202      	movs	r2, #2
 80071e0:	2152      	movs	r1, #82	; 0x52
 80071e2:	4620      	mov	r0, r4
 80071e4:	f7fd f9a3 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80071e8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80071ec:	4618      	mov	r0, r3
 80071ee:	f003 fb73 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80071f2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80071f6:	4618      	mov	r0, r3
 80071f8:	f017 ffcf 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 80071fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007200:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007204:	2153      	movs	r1, #83	; 0x53
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	f000 fbfc 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800720c:	4604      	mov	r4, r0
 800720e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007212:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007216:	4a4a      	ldr	r2, [pc, #296]	; (8007340 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8007218:	8812      	ldrh	r2, [r2, #0]
 800721a:	801a      	strh	r2, [r3, #0]
 800721c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007220:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007224:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800722e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007232:	2202      	movs	r2, #2
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 800723a:	4618      	mov	r0, r3
 800723c:	f017 ffab 	bl	801f196 <_ZNSaIcEC1Ev>
 8007240:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007244:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007248:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 800724c:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8007250:	ca06      	ldmia	r2, {r1, r2}
 8007252:	f003 fb8e 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007256:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800725a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8007338 <_ZN3jlb5GraphC1Ev+0x2d80>
 800725e:	2202      	movs	r2, #2
 8007260:	214e      	movs	r1, #78	; 0x4e
 8007262:	4620      	mov	r0, r4
 8007264:	f7fd f963 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007268:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 800726c:	4618      	mov	r0, r3
 800726e:	f003 fb33 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007272:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007276:	4618      	mov	r0, r3
 8007278:	f017 ff8f 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 800727c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007280:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007284:	2153      	movs	r1, #83	; 0x53
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	f000 fbbc 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800728c:	4604      	mov	r4, r0
 800728e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007292:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007296:	2252      	movs	r2, #82	; 0x52
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800729e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80072a2:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80072b0:	2201      	movs	r2, #1
 80072b2:	605a      	str	r2, [r3, #4]
 80072b4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f017 ff6c 	bl	801f196 <_ZNSaIcEC1Ev>
 80072be:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80072c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072c6:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 80072ca:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 80072ce:	ca06      	ldmia	r2, {r1, r2}
 80072d0:	f003 fb4f 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80072d4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80072d8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007338 <_ZN3jlb5GraphC1Ev+0x2d80>
 80072dc:	2202      	movs	r2, #2
 80072de:	2154      	movs	r1, #84	; 0x54
 80072e0:	4620      	mov	r0, r4
 80072e2:	f7fd f924 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80072e6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80072ea:	4618      	mov	r0, r3
 80072ec:	f003 faf4 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80072f0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f017 ff50 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 80072fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007302:	2153      	movs	r1, #83	; 0x53
 8007304:	6818      	ldr	r0, [r3, #0]
 8007306:	f000 fb7d 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800730a:	4604      	mov	r4, r0
 800730c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007310:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8007314:	224e      	movs	r2, #78	; 0x4e
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800731c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007320:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800732a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800732e:	2201      	movs	r2, #1
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	e009      	b.n	8007348 <_ZN3jlb5GraphC1Ev+0x2d90>
 8007334:	08022ffc 	.word	0x08022ffc
 8007338:	3f19999a 	.word	0x3f19999a
 800733c:	08023000 	.word	0x08023000
 8007340:	08023004 	.word	0x08023004
 8007344:	3f71463a 	.word	0x3f71463a
 8007348:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 800734c:	4618      	mov	r0, r3
 800734e:	f017 ff22 	bl	801f196 <_ZNSaIcEC1Ev>
 8007352:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007356:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800735a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800735e:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8007362:	ca06      	ldmia	r2, {r1, r2}
 8007364:	f003 fb05 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007368:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800736c:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8007344 <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007370:	2200      	movs	r2, #0
 8007372:	2157      	movs	r1, #87	; 0x57
 8007374:	4620      	mov	r0, r4
 8007376:	f7fd f8da 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800737a:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 800737e:	4618      	mov	r0, r3
 8007380:	f003 faaa 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007384:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007388:	4618      	mov	r0, r3
 800738a:	f017 ff06 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 800738e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007392:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007396:	2153      	movs	r1, #83	; 0x53
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	f000 fb33 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800739e:	4604      	mov	r4, r0
 80073a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80073a8:	224e      	movs	r2, #78	; 0x4e
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80073b4:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80073c2:	2201      	movs	r2, #1
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80073ca:	4618      	mov	r0, r3
 80073cc:	f017 fee3 	bl	801f196 <_ZNSaIcEC1Ev>
 80073d0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 80073d4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073d8:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 80073dc:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 80073e0:	ca06      	ldmia	r2, {r1, r2}
 80073e2:	f003 fac6 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80073e6:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80073ea:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8007344 <_ZN3jlb5GraphC1Ev+0x2d8c>
 80073ee:	2201      	movs	r2, #1
 80073f0:	2156      	movs	r1, #86	; 0x56
 80073f2:	4620      	mov	r0, r4
 80073f4:	f7fd f89b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80073f8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f003 fa6b 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007402:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007406:	4618      	mov	r0, r3
 8007408:	f017 fec7 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 800740c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007410:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007414:	2154      	movs	r1, #84	; 0x54
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	f000 faf4 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800741c:	4604      	mov	r4, r0
 800741e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007422:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007426:	4ae9      	ldr	r2, [pc, #932]	; (80077cc <_ZN3jlb5GraphC1Ev+0x3214>)
 8007428:	8812      	ldrh	r2, [r2, #0]
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007430:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007434:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800743e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007442:	2202      	movs	r2, #2
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 800744a:	4618      	mov	r0, r3
 800744c:	f017 fea3 	bl	801f196 <_ZNSaIcEC1Ev>
 8007450:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007454:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007458:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 800745c:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8007460:	ca06      	ldmia	r2, {r1, r2}
 8007462:	f003 fa86 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007466:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800746a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80077d0 <_ZN3jlb5GraphC1Ev+0x3218>
 800746e:	2202      	movs	r2, #2
 8007470:	2153      	movs	r1, #83	; 0x53
 8007472:	4620      	mov	r0, r4
 8007474:	f7fd f85b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007478:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 800747c:	4618      	mov	r0, r3
 800747e:	f003 fa2b 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007482:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007486:	4618      	mov	r0, r3
 8007488:	f017 fe87 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 800748c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007490:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007494:	2154      	movs	r1, #84	; 0x54
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	f000 fab4 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800749c:	4604      	mov	r4, r0
 800749e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80074a6:	4ac9      	ldr	r2, [pc, #804]	; (80077cc <_ZN3jlb5GraphC1Ev+0x3214>)
 80074a8:	8812      	ldrh	r2, [r2, #0]
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074b0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80074b4:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80074c2:	2202      	movs	r2, #2
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80074ca:	4618      	mov	r0, r3
 80074cc:	f017 fe63 	bl	801f196 <_ZNSaIcEC1Ev>
 80074d0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80074d4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074d8:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80074dc:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 80074e0:	ca06      	ldmia	r2, {r1, r2}
 80074e2:	f003 fa46 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074e6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80074ea:	ed9f 0abd 	vldr	s0, [pc, #756]	; 80077e0 <_ZN3jlb5GraphC1Ev+0x3228>
 80074ee:	2201      	movs	r2, #1
 80074f0:	214e      	movs	r1, #78	; 0x4e
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7fd f81b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80074f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80074fc:	4618      	mov	r0, r3
 80074fe:	f003 f9eb 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007502:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007506:	4618      	mov	r0, r3
 8007508:	f017 fe47 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 800750c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007510:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007514:	2154      	movs	r1, #84	; 0x54
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	f000 fa74 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800751c:	4604      	mov	r4, r0
 800751e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	4aab      	ldr	r2, [pc, #684]	; (80077d4 <_ZN3jlb5GraphC1Ev+0x321c>)
 8007528:	8812      	ldrh	r2, [r2, #0]
 800752a:	801a      	strh	r2, [r3, #0]
 800752c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007530:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007534:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800753e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007542:	2202      	movs	r2, #2
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 800754a:	4618      	mov	r0, r3
 800754c:	f017 fe23 	bl	801f196 <_ZNSaIcEC1Ev>
 8007550:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007554:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007558:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800755c:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8007560:	ca06      	ldmia	r2, {r1, r2}
 8007562:	f003 fa06 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007566:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800756a:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80077e0 <_ZN3jlb5GraphC1Ev+0x3228>
 800756e:	2200      	movs	r2, #0
 8007570:	214f      	movs	r1, #79	; 0x4f
 8007572:	4620      	mov	r0, r4
 8007574:	f7fc ffdb 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007578:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 800757c:	4618      	mov	r0, r3
 800757e:	f003 f9ab 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007582:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007586:	4618      	mov	r0, r3
 8007588:	f017 fe07 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 800758c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007590:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007594:	2154      	movs	r1, #84	; 0x54
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	f000 fa34 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800759c:	4604      	mov	r4, r0
 800759e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075a6:	4a8b      	ldr	r2, [pc, #556]	; (80077d4 <_ZN3jlb5GraphC1Ev+0x321c>)
 80075a8:	8812      	ldrh	r2, [r2, #0]
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075b4:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075c2:	2202      	movs	r2, #2
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80075ca:	4618      	mov	r0, r3
 80075cc:	f017 fde3 	bl	801f196 <_ZNSaIcEC1Ev>
 80075d0:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80075d4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80075d8:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80075dc:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 80075e0:	ca06      	ldmia	r2, {r1, r2}
 80075e2:	f003 f9c6 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80075e6:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80075ea:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80077dc <_ZN3jlb5GraphC1Ev+0x3224>
 80075ee:	2202      	movs	r2, #2
 80075f0:	2155      	movs	r1, #85	; 0x55
 80075f2:	4620      	mov	r0, r4
 80075f4:	f7fc ff9b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80075f8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80075fc:	4618      	mov	r0, r3
 80075fe:	f003 f96b 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007602:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007606:	4618      	mov	r0, r3
 8007608:	f017 fdc7 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 800760c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007610:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007614:	2155      	movs	r1, #85	; 0x55
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	f000 f9f4 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800761c:	4604      	mov	r4, r0
 800761e:	2355      	movs	r3, #85	; 0x55
 8007620:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8007624:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007628:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800762c:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007636:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800763a:	2201      	movs	r2, #1
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007642:	4618      	mov	r0, r3
 8007644:	f017 fda7 	bl	801f196 <_ZNSaIcEC1Ev>
 8007648:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800764c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007650:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007654:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8007658:	ca06      	ldmia	r2, {r1, r2}
 800765a:	f003 f98a 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800765e:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007662:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80077dc <_ZN3jlb5GraphC1Ev+0x3224>
 8007666:	2202      	movs	r2, #2
 8007668:	2154      	movs	r1, #84	; 0x54
 800766a:	4620      	mov	r0, r4
 800766c:	f7fc ff5f 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007670:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007674:	4618      	mov	r0, r3
 8007676:	f003 f92f 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800767a:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 800767e:	4618      	mov	r0, r3
 8007680:	f017 fd8b 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8007684:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007688:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800768c:	2155      	movs	r1, #85	; 0x55
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	f000 f9b8 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8007694:	4604      	mov	r4, r0
 8007696:	2355      	movs	r3, #85	; 0x55
 8007698:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 800769c:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 80076a0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80076a4:	2301      	movs	r3, #1
 80076a6:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 80076aa:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80076ae:	4618      	mov	r0, r3
 80076b0:	f017 fd71 	bl	801f196 <_ZNSaIcEC1Ev>
 80076b4:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80076b8:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 80076bc:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 80076c0:	ca06      	ldmia	r2, {r1, r2}
 80076c2:	f003 f956 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80076c6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80076ca:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80077e0 <_ZN3jlb5GraphC1Ev+0x3228>
 80076ce:	2201      	movs	r2, #1
 80076d0:	214f      	movs	r1, #79	; 0x4f
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7fc ff2b 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076d8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80076dc:	4618      	mov	r0, r3
 80076de:	f003 f8fb 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80076e2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80076e6:	4618      	mov	r0, r3
 80076e8:	f017 fd57 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 80076ec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076f0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80076f4:	2156      	movs	r1, #86	; 0x56
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	f000 f984 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80076fc:	4604      	mov	r4, r0
 80076fe:	4b36      	ldr	r3, [pc, #216]	; (80077d8 <_ZN3jlb5GraphC1Ev+0x3220>)
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8007706:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 800770a:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 800770e:	2302      	movs	r3, #2
 8007710:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8007714:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007718:	4618      	mov	r0, r3
 800771a:	f017 fd3c 	bl	801f196 <_ZNSaIcEC1Ev>
 800771e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007722:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8007726:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800772a:	ca06      	ldmia	r2, {r1, r2}
 800772c:	f003 f921 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007730:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007734:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80077e0 <_ZN3jlb5GraphC1Ev+0x3228>
 8007738:	2201      	movs	r2, #1
 800773a:	2151      	movs	r1, #81	; 0x51
 800773c:	4620      	mov	r0, r4
 800773e:	f7fc fef6 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007742:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007746:	4618      	mov	r0, r3
 8007748:	f003 f8c6 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800774c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007750:	4618      	mov	r0, r3
 8007752:	f017 fd22 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8007756:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800775a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800775e:	2156      	movs	r1, #86	; 0x56
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f000 f94f 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8007766:	4604      	mov	r4, r0
 8007768:	2351      	movs	r3, #81	; 0x51
 800776a:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 800776e:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8007772:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8007776:	2301      	movs	r3, #1
 8007778:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 800777c:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007780:	4618      	mov	r0, r3
 8007782:	f017 fd08 	bl	801f196 <_ZNSaIcEC1Ev>
 8007786:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 800778a:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 800778e:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8007792:	ca06      	ldmia	r2, {r1, r2}
 8007794:	f003 f8ed 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007798:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800779c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80077e0 <_ZN3jlb5GraphC1Ev+0x3228>
 80077a0:	2200      	movs	r2, #0
 80077a2:	2153      	movs	r1, #83	; 0x53
 80077a4:	4620      	mov	r0, r4
 80077a6:	f7fc fec2 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077aa:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f003 f892 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80077b4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 80077b8:	4618      	mov	r0, r3
 80077ba:	f017 fcee 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 80077be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077c2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80077c6:	2156      	movs	r1, #86	; 0x56
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	e00b      	b.n	80077e4 <_ZN3jlb5GraphC1Ev+0x322c>
 80077cc:	08023008 	.word	0x08023008
 80077d0:	3f19999a 	.word	0x3f19999a
 80077d4:	08022ffc 	.word	0x08022ffc
 80077d8:	0802300c 	.word	0x0802300c
 80077dc:	3f99999a 	.word	0x3f99999a
 80077e0:	3f71463a 	.word	0x3f71463a
 80077e4:	f000 f90e 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80077e8:	4604      	mov	r4, r0
 80077ea:	2351      	movs	r3, #81	; 0x51
 80077ec:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 80077f0:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80077f4:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 80077f8:	2301      	movs	r3, #1
 80077fa:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 80077fe:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8007802:	4618      	mov	r0, r3
 8007804:	f017 fcc7 	bl	801f196 <_ZNSaIcEC1Ev>
 8007808:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800780c:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8007810:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 8007814:	ca06      	ldmia	r2, {r1, r2}
 8007816:	f003 f8ac 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800781a:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 800781e:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 80077dc <_ZN3jlb5GraphC1Ev+0x3224>
 8007822:	2202      	movs	r2, #2
 8007824:	2157      	movs	r1, #87	; 0x57
 8007826:	4620      	mov	r0, r4
 8007828:	f7fc fe81 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800782c:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8007830:	4618      	mov	r0, r3
 8007832:	f003 f851 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007836:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800783a:	4618      	mov	r0, r3
 800783c:	f017 fcad 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8007840:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007844:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007848:	2157      	movs	r1, #87	; 0x57
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	f000 f8da 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8007850:	4604      	mov	r4, r0
 8007852:	234f      	movs	r3, #79	; 0x4f
 8007854:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8007858:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 800785c:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8007860:	2301      	movs	r3, #1
 8007862:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 8007866:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800786a:	4618      	mov	r0, r3
 800786c:	f017 fc93 	bl	801f196 <_ZNSaIcEC1Ev>
 8007870:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8007874:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 8007878:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 800787c:	ca06      	ldmia	r2, {r1, r2}
 800787e:	f003 f878 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007882:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8007886:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 80077dc <_ZN3jlb5GraphC1Ev+0x3224>
 800788a:	2202      	movs	r2, #2
 800788c:	2156      	movs	r1, #86	; 0x56
 800788e:	4620      	mov	r0, r4
 8007890:	f7fc fe4d 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007894:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 8007898:	4618      	mov	r0, r3
 800789a:	f003 f81d 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 800789e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80078a2:	4618      	mov	r0, r3
 80078a4:	f017 fc79 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 80078a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80078b0:	2157      	movs	r1, #87	; 0x57
 80078b2:	6818      	ldr	r0, [r3, #0]
 80078b4:	f000 f8a6 	bl	8007a04 <_ZN3jlb5GraphixEc>
 80078b8:	4604      	mov	r4, r0
 80078ba:	234f      	movs	r3, #79	; 0x4f
 80078bc:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 80078c0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80078c4:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 80078c8:	2301      	movs	r3, #1
 80078ca:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80078ce:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80078d2:	4618      	mov	r0, r3
 80078d4:	f017 fc5f 	bl	801f196 <_ZNSaIcEC1Ev>
 80078d8:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 80078dc:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 80078e0:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 80078e4:	ca06      	ldmia	r2, {r1, r2}
 80078e6:	f003 f844 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80078ea:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80078ee:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 80077e0 <_ZN3jlb5GraphC1Ev+0x3228>
 80078f2:	2201      	movs	r2, #1
 80078f4:	2153      	movs	r1, #83	; 0x53
 80078f6:	4620      	mov	r0, r4
 80078f8:	f7fc fe19 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80078fc:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8007900:	4618      	mov	r0, r3
 8007902:	f002 ffe9 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007906:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800790a:	4618      	mov	r0, r3
 800790c:	f017 fc45 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8007910:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007914:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007918:	2157      	movs	r1, #87	; 0x57
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	f000 f872 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8007920:	4604      	mov	r4, r0
 8007922:	4b35      	ldr	r3, [pc, #212]	; (80079f8 <_ZN3jlb5GraphC1Ev+0x3440>)
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 800792a:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 800792e:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8007932:	2302      	movs	r3, #2
 8007934:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8007938:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800793c:	4618      	mov	r0, r3
 800793e:	f017 fc2a 	bl	801f196 <_ZNSaIcEC1Ev>
 8007942:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007946:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 800794a:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 800794e:	ca06      	ldmia	r2, {r1, r2}
 8007950:	f003 f80f 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007954:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8007958:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80079fc <_ZN3jlb5GraphC1Ev+0x3444>
 800795c:	2202      	movs	r2, #2
 800795e:	214f      	movs	r1, #79	; 0x4f
 8007960:	4620      	mov	r0, r4
 8007962:	f7fc fde4 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007966:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 800796a:	4618      	mov	r0, r3
 800796c:	f002 ffb4 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007970:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8007974:	4618      	mov	r0, r3
 8007976:	f017 fc10 	bl	801f19a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 800797a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800797e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007982:	2158      	movs	r1, #88	; 0x58
 8007984:	6818      	ldr	r0, [r3, #0]
 8007986:	f000 f83d 	bl	8007a04 <_ZN3jlb5GraphixEc>
 800798a:	4604      	mov	r4, r0
 800798c:	2358      	movs	r3, #88	; 0x58
 800798e:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 8007992:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8007996:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 800799a:	2301      	movs	r3, #1
 800799c:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 80079a0:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80079a4:	4618      	mov	r0, r3
 80079a6:	f017 fbf6 	bl	801f196 <_ZNSaIcEC1Ev>
 80079aa:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80079ae:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 80079b2:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 80079b6:	ca06      	ldmia	r2, {r1, r2}
 80079b8:	f002 ffdb 	bl	800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80079bc:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80079c0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8007a00 <_ZN3jlb5GraphC1Ev+0x3448>
 80079c4:	2202      	movs	r2, #2
 80079c6:	2151      	movs	r1, #81	; 0x51
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7fc fdb0 	bl	800452e <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80079ce:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 ff80 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 80079d8:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80079dc:	4618      	mov	r0, r3
 80079de:	f017 fbdc 	bl	801f19a <_ZNSaIcED1Ev>
        }
 80079e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079e6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd90      	pop	{r4, r7, pc}
 80079f6:	bf00      	nop
 80079f8:	08023010 	.word	0x08023010
 80079fc:	3fc56fea 	.word	0x3fc56fea
 8007a00:	401c518f 	.word	0x401c518f

08007a04 <_ZN3jlb5GraphixEc>:

        ~Graph() {}

        Node &operator[](char name)
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
            if (nodes.empty())
                throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X')
                throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	78fb      	ldrb	r3, [r7, #3]
 8007a14:	3b41      	subs	r3, #65	; 0x41
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f002 ffcb 	bl	800a9b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8007a1e:	4603      	mov	r3, r0
        }
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f017 fbb2 	bl	801f19a <_ZNSaIcED1Ev>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f002 ffdd 	bl	800aa0a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ffeb 	bl	8007a40 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphE>:

                std::vector<char> telemetry_data;

#ifdef STM32
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_) : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_)
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff ffd6 	bl	8007a5a <_ZNSt6vectorIcSaIcEEC1Ev>
                {
                }
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <_ZN3jlb12SignalSender14send_telemetryEv>:

                ~SignalSender()
                {
                }

                void send_telemetry()
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
                {
                        telemetry_data.clear();
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 ffc7 	bl	800aa5a <_ZNSt6vectorIcSaIcEE5clearEv>

                        measurements_1();
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f84d 	bl	8007b6c <_ZN3jlb12SignalSender14measurements_1Ev>
                        measurements_2();
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fde7 	bl	80086a6 <_ZN3jlb12SignalSender14measurements_2Ev>
                        measurements_3();
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fd03 	bl	80094e4 <_ZN3jlb12SignalSender14measurements_3Ev>
                        measurements_4();
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f001 fd63 	bl	80095aa <_ZN3jlb12SignalSender14measurements_4Ev>
                        measurements_5();
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fdc3 	bl	8009670 <_ZN3jlb12SignalSender14measurements_5Ev>
                        odometry_1();
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fe17 	bl	800971e <_ZN3jlb12SignalSender10odometry_1Ev>
                        odometry_2();
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 fe77 	bl	80097e4 <_ZN3jlb12SignalSender10odometry_2Ev>
                        logic_1();
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fecb 	bl	8009892 <_ZN3jlb12SignalSender7logic_1Ev>
                        logic_2();
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 ff37 	bl	8009970 <_ZN3jlb12SignalSender7logic_2Ev>

                        send(telemetry_data.data(), telemetry_data.size());
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f002 ffb4 	bl	800aa76 <_ZNSt6vectorIcSaIcEE4dataEv>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b16:	4618      	mov	r0, r3
 8007b18:	f002 ffbc 	bl	800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4621      	mov	r1, r4
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f804 	bl	8007b30 <_ZN3jlb12SignalSender4sendEPcj>
                }
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd90      	pop	{r4, r7, pc}

08007b30 <_ZN3jlb12SignalSender4sendEPcj>:
                // TODO: add UDPClient for STM32
#else
                UDPClient client;
#endif

                int send([[maybe_unused]] char *msg, [[maybe_unused]] size_t max_size)
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
                {
#ifdef STM32
                	uint8_t dummy_data[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 8007b3c:	4a09      	ldr	r2, [pc, #36]	; (8007b64 <_ZN3jlb12SignalSender4sendEPcj+0x34>)
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b44:	c303      	stmia	r3!, {r0, r1}
 8007b46:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, dummy_data, 10, HAL_MAX_DELAY);
 8007b48:	f107 0114 	add.w	r1, r7, #20
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	220a      	movs	r2, #10
 8007b52:	4805      	ldr	r0, [pc, #20]	; (8007b68 <_ZN3jlb12SignalSender4sendEPcj+0x38>)
 8007b54:	f012 fbce 	bl	801a2f4 <HAL_UART_Transmit>
					return 0;
 8007b58:	2300      	movs	r3, #0
#else
                        return client.send(msg, max_size);
#endif
                }
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3720      	adds	r7, #32
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	08023014 	.word	0x08023014
 8007b68:	20000530 	.word	0x20000530

08007b6c <_ZN3jlb12SignalSender14measurements_1Ev>:

                void measurements_1()
 8007b6c:	b590      	push	{r4, r7, lr}
 8007b6e:	b089      	sub	sp, #36	; 0x24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_1.line_sensor_1 = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d113      	bne.n	8007ba8 <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007b96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9e:	edc7 7a00 	vstr	s15, [r7]
 8007ba2:	783b      	ldrb	r3, [r7, #0]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	e00e      	b.n	8007bc6 <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007bae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bbe:	edc7 7a00 	vstr	s15, [r7]
 8007bc2:	783b      	ldrb	r3, [r7, #0]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	7013      	strb	r3, [r2, #0]
                        jlb_rx.measurements_1.line_sensor_2 = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d113      	bne.n	8007bfe <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007be0:	ee07 3a90 	vmov	s15, r3
 8007be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007be8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007bec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf4:	edc7 7a00 	vstr	s15, [r7]
 8007bf8:	783b      	ldrb	r3, [r7, #0]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	e00e      	b.n	8007c1c <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007c04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c14:	edc7 7a00 	vstr	s15, [r7]
 8007c18:	783b      	ldrb	r3, [r7, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	7053      	strb	r3, [r2, #1]
                        jlb_rx.measurements_1.line_sensor_3 = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d113      	bne.n	8007c54 <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007c32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c3e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007c42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c4a:	edc7 7a00 	vstr	s15, [r7]
 8007c4e:	783b      	ldrb	r3, [r7, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e00e      	b.n	8007c72 <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007c5a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c6a:	edc7 7a00 	vstr	s15, [r7]
 8007c6e:	783b      	ldrb	r3, [r7, #0]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	7093      	strb	r3, [r2, #2]
                        jlb_rx.measurements_1.line_sensor_4 = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d113      	bne.n	8007caa <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007c88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007c8c:	ee07 3a90 	vmov	s15, r3
 8007c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007c98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca0:	edc7 7a00 	vstr	s15, [r7]
 8007ca4:	783b      	ldrb	r3, [r7, #0]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	e00e      	b.n	8007cc8 <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007cb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007cb4:	ee07 3a90 	vmov	s15, r3
 8007cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc0:	edc7 7a00 	vstr	s15, [r7]
 8007cc4:	783b      	ldrb	r3, [r7, #0]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	70d3      	strb	r3, [r2, #3]
                        jlb_rx.measurements_1.line_sensor_5 = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d113      	bne.n	8007d00 <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cf6:	edc7 7a00 	vstr	s15, [r7]
 8007cfa:	783b      	ldrb	r3, [r7, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	e00e      	b.n	8007d1e <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007d06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d16:	edc7 7a00 	vstr	s15, [r7]
 8007d1a:	783b      	ldrb	r3, [r7, #0]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	7113      	strb	r3, [r2, #4]
                        jlb_rx.measurements_1.line_sensor_6 = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b05      	cmp	r3, #5
 8007d2c:	d113      	bne.n	8007d56 <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007d34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d4c:	edc7 7a00 	vstr	s15, [r7]
 8007d50:	783b      	ldrb	r3, [r7, #0]
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	e00e      	b.n	8007d74 <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007d5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d6c:	edc7 7a00 	vstr	s15, [r7]
 8007d70:	783b      	ldrb	r3, [r7, #0]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7153      	strb	r3, [r2, #5]
                        jlb_rx.measurements_1.line_sensor_7 = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b06      	cmp	r3, #6
 8007d82:	d113      	bne.n	8007dac <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007d8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da2:	edc7 7a00 	vstr	s15, [r7]
 8007da6:	783b      	ldrb	r3, [r7, #0]
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e00e      	b.n	8007dca <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007db2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc2:	edc7 7a00 	vstr	s15, [r7]
 8007dc6:	783b      	ldrb	r3, [r7, #0]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	7193      	strb	r3, [r2, #6]
                        jlb_rx.measurements_1.line_sensor_8 = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b07      	cmp	r3, #7
 8007dd8:	d113      	bne.n	8007e02 <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007de0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df8:	edc7 7a00 	vstr	s15, [r7]
 8007dfc:	783b      	ldrb	r3, [r7, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	e00e      	b.n	8007e20 <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007e08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e18:	edc7 7a00 	vstr	s15, [r7]
 8007e1c:	783b      	ldrb	r3, [r7, #0]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	71d3      	strb	r3, [r2, #7]
                        jlb_rx.measurements_1.line_sensor_9 = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d113      	bne.n	8007e58 <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e3a:	ee07 3a90 	vmov	s15, r3
 8007e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4e:	edc7 7a00 	vstr	s15, [r7]
 8007e52:	783b      	ldrb	r3, [r7, #0]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e00e      	b.n	8007e76 <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6e:	edc7 7a00 	vstr	s15, [r7]
 8007e72:	783b      	ldrb	r3, [r7, #0]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	7213      	strb	r3, [r2, #8]
                        jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b09      	cmp	r3, #9
 8007e84:	d113      	bne.n	8007eae <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e90:	ee07 3a90 	vmov	s15, r3
 8007e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007e9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea4:	edc7 7a00 	vstr	s15, [r7]
 8007ea8:	783b      	ldrb	r3, [r7, #0]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	e00e      	b.n	8007ecc <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec4:	edc7 7a00 	vstr	s15, [r7]
 8007ec8:	783b      	ldrb	r3, [r7, #0]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7253      	strb	r3, [r2, #9]
                        jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b0a      	cmp	r3, #10
 8007eda:	d113      	bne.n	8007f04 <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007ee2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007ee6:	ee07 3a90 	vmov	s15, r3
 8007eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007efa:	edc7 7a00 	vstr	s15, [r7]
 8007efe:	783b      	ldrb	r3, [r7, #0]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	e00e      	b.n	8007f22 <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007f0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f0e:	ee07 3a90 	vmov	s15, r3
 8007f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1a:	edc7 7a00 	vstr	s15, [r7]
 8007f1e:	783b      	ldrb	r3, [r7, #0]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	7293      	strb	r3, [r2, #10]
                        jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b0b      	cmp	r3, #11
 8007f30:	d113      	bne.n	8007f5a <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007f38:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f50:	edc7 7a00 	vstr	s15, [r7]
 8007f54:	783b      	ldrb	r3, [r7, #0]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	e00e      	b.n	8007f78 <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007f60:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f70:	edc7 7a00 	vstr	s15, [r7]
 8007f74:	783b      	ldrb	r3, [r7, #0]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	72d3      	strb	r3, [r2, #11]
                        jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b0c      	cmp	r3, #12
 8007f86:	d113      	bne.n	8007fb0 <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa6:	edc7 7a00 	vstr	s15, [r7]
 8007faa:	783b      	ldrb	r3, [r7, #0]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	e00e      	b.n	8007fce <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc6:	edc7 7a00 	vstr	s15, [r7]
 8007fca:	783b      	ldrb	r3, [r7, #0]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	7313      	strb	r3, [r2, #12]
                        jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b0d      	cmp	r3, #13
 8007fdc:	d113      	bne.n	8008006 <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8007fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ff0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ffc:	edc7 7a00 	vstr	s15, [r7]
 8008000:	783b      	ldrb	r3, [r7, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	e00e      	b.n	8008024 <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800800c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801c:	edc7 7a00 	vstr	s15, [r7]
 8008020:	783b      	ldrb	r3, [r7, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	7353      	strb	r3, [r2, #13]
                        jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b0e      	cmp	r3, #14
 8008032:	d113      	bne.n	800805c <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800803a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008046:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800804a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800804e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008052:	edc7 7a00 	vstr	s15, [r7]
 8008056:	783b      	ldrb	r3, [r7, #0]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	e00e      	b.n	800807a <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008062:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008072:	edc7 7a00 	vstr	s15, [r7]
 8008076:	783b      	ldrb	r3, [r7, #0]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	7393      	strb	r3, [r2, #14]
                        jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d113      	bne.n	80080b2 <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008090:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800809c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80080a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a8:	edc7 7a00 	vstr	s15, [r7]
 80080ac:	783b      	ldrb	r3, [r7, #0]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	e00e      	b.n	80080d0 <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80080b8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80080bc:	ee07 3a90 	vmov	s15, r3
 80080c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080c8:	edc7 7a00 	vstr	s15, [r7]
 80080cc:	783b      	ldrb	r3, [r7, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
                        jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d113      	bne.n	8008108 <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80080e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80080f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080fe:	edc7 7a00 	vstr	s15, [r7]
 8008102:	783b      	ldrb	r3, [r7, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	e00e      	b.n	8008126 <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800810e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800811e:	edc7 7a00 	vstr	s15, [r7]
 8008122:	783b      	ldrb	r3, [r7, #0]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	7413      	strb	r3, [r2, #16]
                        jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b11      	cmp	r3, #17
 8008134:	d113      	bne.n	800815e <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008140:	ee07 3a90 	vmov	s15, r3
 8008144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008148:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800814c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008154:	edc7 7a00 	vstr	s15, [r7]
 8008158:	783b      	ldrb	r3, [r7, #0]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	e00e      	b.n	800817c <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008168:	ee07 3a90 	vmov	s15, r3
 800816c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008174:	edc7 7a00 	vstr	s15, [r7]
 8008178:	783b      	ldrb	r3, [r7, #0]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7453      	strb	r3, [r2, #17]
                        jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b12      	cmp	r3, #18
 800818a:	d113      	bne.n	80081b4 <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800819e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80081a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081aa:	edc7 7a00 	vstr	s15, [r7]
 80081ae:	783b      	ldrb	r3, [r7, #0]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e00e      	b.n	80081d2 <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80081ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081be:	ee07 3a90 	vmov	s15, r3
 80081c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ca:	edc7 7a00 	vstr	s15, [r7]
 80081ce:	783b      	ldrb	r3, [r7, #0]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	7493      	strb	r3, [r2, #18]
                        jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b13      	cmp	r3, #19
 80081e0:	d113      	bne.n	800820a <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80081e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081f4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80081f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008200:	edc7 7a00 	vstr	s15, [r7]
 8008204:	783b      	ldrb	r3, [r7, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	e00e      	b.n	8008228 <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008220:	edc7 7a00 	vstr	s15, [r7]
 8008224:	783b      	ldrb	r3, [r7, #0]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	74d3      	strb	r3, [r2, #19]
                        jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b14      	cmp	r3, #20
 8008236:	d113      	bne.n	8008260 <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800823e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008242:	ee07 3a90 	vmov	s15, r3
 8008246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800824a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800824e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008256:	edc7 7a00 	vstr	s15, [r7]
 800825a:	783b      	ldrb	r3, [r7, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	e00e      	b.n	800827e <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008266:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008276:	edc7 7a00 	vstr	s15, [r7]
 800827a:	783b      	ldrb	r3, [r7, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	7513      	strb	r3, [r2, #20]
                        jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b15      	cmp	r3, #21
 800828c:	d113      	bne.n	80082b6 <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008298:	ee07 3a90 	vmov	s15, r3
 800829c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80082a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ac:	edc7 7a00 	vstr	s15, [r7]
 80082b0:	783b      	ldrb	r3, [r7, #0]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	e00e      	b.n	80082d4 <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80082bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082cc:	edc7 7a00 	vstr	s15, [r7]
 80082d0:	783b      	ldrb	r3, [r7, #0]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7553      	strb	r3, [r2, #21]
                        jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b16      	cmp	r3, #22
 80082e2:	d113      	bne.n	800830c <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80082ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80082fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008302:	edc7 7a00 	vstr	s15, [r7]
 8008306:	783b      	ldrb	r3, [r7, #0]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e00e      	b.n	800832a <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008322:	edc7 7a00 	vstr	s15, [r7]
 8008326:	783b      	ldrb	r3, [r7, #0]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	7593      	strb	r3, [r2, #22]
                        jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b17      	cmp	r3, #23
 8008338:	d113      	bne.n	8008362 <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008340:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008344:	ee07 3a90 	vmov	s15, r3
 8008348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800834c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008350:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008358:	edc7 7a00 	vstr	s15, [r7]
 800835c:	783b      	ldrb	r3, [r7, #0]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	e00e      	b.n	8008380 <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008368:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800836c:	ee07 3a90 	vmov	s15, r3
 8008370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008378:	edc7 7a00 	vstr	s15, [r7]
 800837c:	783b      	ldrb	r3, [r7, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	75d3      	strb	r3, [r2, #23]
                        jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b18      	cmp	r3, #24
 800838e:	d113      	bne.n	80083b8 <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80083a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ae:	edc7 7a00 	vstr	s15, [r7]
 80083b2:	783b      	ldrb	r3, [r7, #0]
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e00e      	b.n	80083d6 <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80083be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ce:	edc7 7a00 	vstr	s15, [r7]
 80083d2:	783b      	ldrb	r3, [r7, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	7613      	strb	r3, [r2, #24]
                        jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b19      	cmp	r3, #25
 80083e4:	d113      	bne.n	800840e <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80083ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80083fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008404:	edc7 7a00 	vstr	s15, [r7]
 8008408:	783b      	ldrb	r3, [r7, #0]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e00e      	b.n	800842c <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008418:	ee07 3a90 	vmov	s15, r3
 800841c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008424:	edc7 7a00 	vstr	s15, [r7]
 8008428:	783b      	ldrb	r3, [r7, #0]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7653      	strb	r3, [r2, #25]
                        jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b1a      	cmp	r3, #26
 800843a:	d113      	bne.n	8008464 <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008442:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800844e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800845a:	edc7 7a00 	vstr	s15, [r7]
 800845e:	783b      	ldrb	r3, [r7, #0]
 8008460:	b2db      	uxtb	r3, r3
 8008462:	e00e      	b.n	8008482 <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800846a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800847a:	edc7 7a00 	vstr	s15, [r7]
 800847e:	783b      	ldrb	r3, [r7, #0]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	7693      	strb	r3, [r2, #26]
                        jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b1b      	cmp	r3, #27
 8008490:	d113      	bne.n	80084ba <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008498:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80084a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b0:	edc7 7a00 	vstr	s15, [r7]
 80084b4:	783b      	ldrb	r3, [r7, #0]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	e00e      	b.n	80084d8 <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80084c0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d0:	edc7 7a00 	vstr	s15, [r7]
 80084d4:	783b      	ldrb	r3, [r7, #0]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	76d3      	strb	r3, [r2, #27]
                        jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b1c      	cmp	r3, #28
 80084e6:	d113      	bne.n	8008510 <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80084ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80084fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008506:	edc7 7a00 	vstr	s15, [r7]
 800850a:	783b      	ldrb	r3, [r7, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e00e      	b.n	800852e <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008516:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008526:	edc7 7a00 	vstr	s15, [r7]
 800852a:	783b      	ldrb	r3, [r7, #0]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	7713      	strb	r3, [r2, #28]
                        jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b1d      	cmp	r3, #29
 800853c:	d113      	bne.n	8008566 <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008544:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008550:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800855c:	edc7 7a00 	vstr	s15, [r7]
 8008560:	783b      	ldrb	r3, [r7, #0]
 8008562:	b2db      	uxtb	r3, r3
 8008564:	e00e      	b.n	8008584 <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800856c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008570:	ee07 3a90 	vmov	s15, r3
 8008574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857c:	edc7 7a00 	vstr	s15, [r7]
 8008580:	783b      	ldrb	r3, [r7, #0]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7753      	strb	r3, [r2, #29]
                        jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b1e      	cmp	r3, #30
 8008592:	d113      	bne.n	80085bc <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800859a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80085aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b2:	edc7 7a00 	vstr	s15, [r7]
 80085b6:	783b      	ldrb	r3, [r7, #0]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	e00e      	b.n	80085da <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80085c2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d2:	edc7 7a00 	vstr	s15, [r7]
 80085d6:	783b      	ldrb	r3, [r7, #0]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	7793      	strb	r3, [r2, #30]
                        jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b1f      	cmp	r3, #31
 80085e8:	d113      	bne.n	8008612 <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80085f0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008608:	edc7 7a00 	vstr	s15, [r7]
 800860c:	783b      	ldrb	r3, [r7, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	e00e      	b.n	8008630 <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008618:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008628:	edc7 7a00 	vstr	s15, [r7]
 800862c:	783b      	ldrb	r3, [r7, #0]
 800862e:	b2db      	uxtb	r3, r3
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	77d3      	strb	r3, [r2, #31]
#endif

                        char data[measurements_1_DLC + 2] = {0};
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	f107 0310 	add.w	r3, r7, #16
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_1_IDE;
 8008642:	2300      	movs	r3, #0
 8008644:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_1_DLC;
 8008646:	2308      	movs	r3, #8
 8008648:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_1_CANID;
 800864a:	2301      	movs	r3, #1
 800864c:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_1_DLC;
 800864e:	2308      	movs	r3, #8
 8008650:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f107 010c 	add.w	r1, r7, #12
 8008658:	3102      	adds	r1, #2
 800865a:	f107 030b 	add.w	r3, r7, #11
 800865e:	f107 020a 	add.w	r2, r7, #10
 8008662:	f7f8 fc6b 	bl	8000f3c <Pack_measurements_1_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008672:	4618      	mov	r0, r3
 8008674:	f002 fa1d 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8008678:	4603      	mov	r3, r0
 800867a:	61fb      	str	r3, [r7, #28]
 800867c:	f107 021c 	add.w	r2, r7, #28
 8008680:	f107 0318 	add.w	r3, r7, #24
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f002 fa24 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	330a      	adds	r3, #10
 8008692:	f107 020c 	add.w	r2, r7, #12
 8008696:	69b9      	ldr	r1, [r7, #24]
 8008698:	4620      	mov	r0, r4
 800869a:	f002 fa2c 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800869e:	bf00      	nop
 80086a0:	3724      	adds	r7, #36	; 0x24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd90      	pop	{r4, r7, pc}

080086a6 <_ZN3jlb12SignalSender14measurements_2Ev>:

                void measurements_2()
 80086a6:	b590      	push	{r4, r7, lr}
 80086a8:	b089      	sub	sp, #36	; 0x24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_2.line_sensor_1 = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d113      	bne.n	80086e2 <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80086c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80086d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d8:	edc7 7a00 	vstr	s15, [r7]
 80086dc:	783b      	ldrb	r3, [r7, #0]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	e00e      	b.n	8008700 <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80086e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086f8:	edc7 7a00 	vstr	s15, [r7]
 80086fc:	783b      	ldrb	r3, [r7, #0]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	f882 3020 	strb.w	r3, [r2, #32]
                        jlb_rx.measurements_2.line_sensor_2 = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d113      	bne.n	800873a <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008718:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008724:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800872c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008730:	edc7 7a00 	vstr	s15, [r7]
 8008734:	783b      	ldrb	r3, [r7, #0]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	e00e      	b.n	8008758 <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008740:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008750:	edc7 7a00 	vstr	s15, [r7]
 8008754:	783b      	ldrb	r3, [r7, #0]
 8008756:	b2db      	uxtb	r3, r3
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
                        jlb_rx.measurements_2.line_sensor_3 = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d113      	bne.n	8008792 <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008770:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800877c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008788:	edc7 7a00 	vstr	s15, [r7]
 800878c:	783b      	ldrb	r3, [r7, #0]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	e00e      	b.n	80087b0 <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008798:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a8:	edc7 7a00 	vstr	s15, [r7]
 80087ac:	783b      	ldrb	r3, [r7, #0]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
                        jlb_rx.measurements_2.line_sensor_4 = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d113      	bne.n	80087ea <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80087c8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80087cc:	ee07 3a90 	vmov	s15, r3
 80087d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80087d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087e0:	edc7 7a00 	vstr	s15, [r7]
 80087e4:	783b      	ldrb	r3, [r7, #0]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	e00e      	b.n	8008808 <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80087f0:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008800:	edc7 7a00 	vstr	s15, [r7]
 8008804:	783b      	ldrb	r3, [r7, #0]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
                        jlb_rx.measurements_2.line_sensor_5 = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b04      	cmp	r3, #4
 8008818:	d113      	bne.n	8008842 <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800882c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008838:	edc7 7a00 	vstr	s15, [r7]
 800883c:	783b      	ldrb	r3, [r7, #0]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	e00e      	b.n	8008860 <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008858:	edc7 7a00 	vstr	s15, [r7]
 800885c:	783b      	ldrb	r3, [r7, #0]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                        jlb_rx.measurements_2.line_sensor_6 = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2b05      	cmp	r3, #5
 8008870:	d113      	bne.n	800889a <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008878:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008884:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008888:	ee77 7a87 	vadd.f32	s15, s15, s14
 800888c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008890:	edc7 7a00 	vstr	s15, [r7]
 8008894:	783b      	ldrb	r3, [r7, #0]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	e00e      	b.n	80088b8 <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80088a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a4:	ee07 3a90 	vmov	s15, r3
 80088a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b0:	edc7 7a00 	vstr	s15, [r7]
 80088b4:	783b      	ldrb	r3, [r7, #0]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
                        jlb_rx.measurements_2.line_sensor_7 = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2b06      	cmp	r3, #6
 80088c8:	d113      	bne.n	80088f2 <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80088d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80088e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e8:	edc7 7a00 	vstr	s15, [r7]
 80088ec:	783b      	ldrb	r3, [r7, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	e00e      	b.n	8008910 <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80088f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80088fc:	ee07 3a90 	vmov	s15, r3
 8008900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008908:	edc7 7a00 	vstr	s15, [r7]
 800890c:	783b      	ldrb	r3, [r7, #0]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
                        jlb_rx.measurements_2.line_sensor_8 = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	2b07      	cmp	r3, #7
 8008920:	d113      	bne.n	800894a <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008928:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800892c:	ee07 3a90 	vmov	s15, r3
 8008930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008934:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800893c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008940:	edc7 7a00 	vstr	s15, [r7]
 8008944:	783b      	ldrb	r3, [r7, #0]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	e00e      	b.n	8008968 <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008950:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008960:	edc7 7a00 	vstr	s15, [r7]
 8008964:	783b      	ldrb	r3, [r7, #0]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
                        jlb_rx.measurements_2.line_sensor_9 = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b08      	cmp	r3, #8
 8008978:	d113      	bne.n	80089a2 <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008980:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800898c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008998:	edc7 7a00 	vstr	s15, [r7]
 800899c:	783b      	ldrb	r3, [r7, #0]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	e00e      	b.n	80089c0 <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80089a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80089ac:	ee07 3a90 	vmov	s15, r3
 80089b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b8:	edc7 7a00 	vstr	s15, [r7]
 80089bc:	783b      	ldrb	r3, [r7, #0]
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                        jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d113      	bne.n	80089fa <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80089d8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80089e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80089e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f0:	edc7 7a00 	vstr	s15, [r7]
 80089f4:	783b      	ldrb	r3, [r7, #0]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	e00e      	b.n	8008a18 <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008a00:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008a04:	ee07 3a90 	vmov	s15, r3
 8008a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a10:	edc7 7a00 	vstr	s15, [r7]
 8008a14:	783b      	ldrb	r3, [r7, #0]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                        jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	2b0a      	cmp	r3, #10
 8008a28:	d113      	bne.n	8008a52 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008a30:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a34:	ee07 3a90 	vmov	s15, r3
 8008a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a48:	edc7 7a00 	vstr	s15, [r7]
 8008a4c:	783b      	ldrb	r3, [r7, #0]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	e00e      	b.n	8008a70 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008a58:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a5c:	ee07 3a90 	vmov	s15, r3
 8008a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a68:	edc7 7a00 	vstr	s15, [r7]
 8008a6c:	783b      	ldrb	r3, [r7, #0]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b0b      	cmp	r3, #11
 8008a80:	d113      	bne.n	8008aaa <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008a88:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008a8c:	ee07 3a90 	vmov	s15, r3
 8008a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa0:	edc7 7a00 	vstr	s15, [r7]
 8008aa4:	783b      	ldrb	r3, [r7, #0]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	e00e      	b.n	8008ac8 <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ab0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac0:	edc7 7a00 	vstr	s15, [r7]
 8008ac4:	783b      	ldrb	r3, [r7, #0]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                        jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b0c      	cmp	r3, #12
 8008ad8:	d113      	bne.n	8008b02 <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ae0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ae4:	ee07 3a90 	vmov	s15, r3
 8008ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008aec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af8:	edc7 7a00 	vstr	s15, [r7]
 8008afc:	783b      	ldrb	r3, [r7, #0]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	e00e      	b.n	8008b20 <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008b08:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b18:	edc7 7a00 	vstr	s15, [r7]
 8008b1c:	783b      	ldrb	r3, [r7, #0]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b0d      	cmp	r3, #13
 8008b30:	d113      	bne.n	8008b5a <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008b38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b50:	edc7 7a00 	vstr	s15, [r7]
 8008b54:	783b      	ldrb	r3, [r7, #0]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	e00e      	b.n	8008b78 <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008b60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b70:	edc7 7a00 	vstr	s15, [r7]
 8008b74:	783b      	ldrb	r3, [r7, #0]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                        jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b0e      	cmp	r3, #14
 8008b88:	d113      	bne.n	8008bb2 <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008b90:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba8:	edc7 7a00 	vstr	s15, [r7]
 8008bac:	783b      	ldrb	r3, [r7, #0]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	e00e      	b.n	8008bd0 <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008bb8:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8008bbc:	ee07 3a90 	vmov	s15, r3
 8008bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc8:	edc7 7a00 	vstr	s15, [r7]
 8008bcc:	783b      	ldrb	r3, [r7, #0]
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                        jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b0f      	cmp	r3, #15
 8008be0:	d113      	bne.n	8008c0a <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008be8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8008bec:	ee07 3a90 	vmov	s15, r3
 8008bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bf4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c00:	edc7 7a00 	vstr	s15, [r7]
 8008c04:	783b      	ldrb	r3, [r7, #0]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	e00e      	b.n	8008c28 <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008c10:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c20:	edc7 7a00 	vstr	s15, [r7]
 8008c24:	783b      	ldrb	r3, [r7, #0]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
                        jlb_rx.measurements_2.line_sensor_9 = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d113      	bne.n	8008c62 <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008c40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c58:	edc7 7a00 	vstr	s15, [r7]
 8008c5c:	783b      	ldrb	r3, [r7, #0]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	e00e      	b.n	8008c80 <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008c68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008c6c:	ee07 3a90 	vmov	s15, r3
 8008c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c78:	edc7 7a00 	vstr	s15, [r7]
 8008c7c:	783b      	ldrb	r3, [r7, #0]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                        jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b09      	cmp	r3, #9
 8008c90:	d113      	bne.n	8008cba <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008c98:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ca4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb0:	edc7 7a00 	vstr	s15, [r7]
 8008cb4:	783b      	ldrb	r3, [r7, #0]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	e00e      	b.n	8008cd8 <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008cc0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cd0:	edc7 7a00 	vstr	s15, [r7]
 8008cd4:	783b      	ldrb	r3, [r7, #0]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                        jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2b0a      	cmp	r3, #10
 8008ce8:	d113      	bne.n	8008d12 <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008cf0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008cf4:	ee07 3a90 	vmov	s15, r3
 8008cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d08:	edc7 7a00 	vstr	s15, [r7]
 8008d0c:	783b      	ldrb	r3, [r7, #0]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	e00e      	b.n	8008d30 <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008d18:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008d1c:	ee07 3a90 	vmov	s15, r3
 8008d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d28:	edc7 7a00 	vstr	s15, [r7]
 8008d2c:	783b      	ldrb	r3, [r7, #0]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b0b      	cmp	r3, #11
 8008d40:	d113      	bne.n	8008d6a <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008d48:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d60:	edc7 7a00 	vstr	s15, [r7]
 8008d64:	783b      	ldrb	r3, [r7, #0]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	e00e      	b.n	8008d88 <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008d70:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d80:	edc7 7a00 	vstr	s15, [r7]
 8008d84:	783b      	ldrb	r3, [r7, #0]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                        jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	2b0c      	cmp	r3, #12
 8008d98:	d113      	bne.n	8008dc2 <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008da0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008da4:	ee07 3a90 	vmov	s15, r3
 8008da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db8:	edc7 7a00 	vstr	s15, [r7]
 8008dbc:	783b      	ldrb	r3, [r7, #0]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	e00e      	b.n	8008de0 <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008dc8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd8:	edc7 7a00 	vstr	s15, [r7]
 8008ddc:	783b      	ldrb	r3, [r7, #0]
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2b0d      	cmp	r3, #13
 8008df0:	d113      	bne.n	8008e1a <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008df8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e10:	edc7 7a00 	vstr	s15, [r7]
 8008e14:	783b      	ldrb	r3, [r7, #0]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	e00e      	b.n	8008e38 <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008e20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008e24:	ee07 3a90 	vmov	s15, r3
 8008e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e30:	edc7 7a00 	vstr	s15, [r7]
 8008e34:	783b      	ldrb	r3, [r7, #0]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                        jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	2b0e      	cmp	r3, #14
 8008e48:	d113      	bne.n	8008e72 <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008e50:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e68:	edc7 7a00 	vstr	s15, [r7]
 8008e6c:	783b      	ldrb	r3, [r7, #0]
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	e00e      	b.n	8008e90 <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008e78:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e88:	edc7 7a00 	vstr	s15, [r7]
 8008e8c:	783b      	ldrb	r3, [r7, #0]
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                        jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	d113      	bne.n	8008eca <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ea8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec0:	edc7 7a00 	vstr	s15, [r7]
 8008ec4:	783b      	ldrb	r3, [r7, #0]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	e00e      	b.n	8008ee8 <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ed0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ee0:	edc7 7a00 	vstr	s15, [r7]
 8008ee4:	783b      	ldrb	r3, [r7, #0]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
                        jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b10      	cmp	r3, #16
 8008ef8:	d113      	bne.n	8008f22 <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008f00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f18:	edc7 7a00 	vstr	s15, [r7]
 8008f1c:	783b      	ldrb	r3, [r7, #0]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	e00e      	b.n	8008f40 <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008f2c:	ee07 3a90 	vmov	s15, r3
 8008f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f38:	edc7 7a00 	vstr	s15, [r7]
 8008f3c:	783b      	ldrb	r3, [r7, #0]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
                        jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b11      	cmp	r3, #17
 8008f50:	d113      	bne.n	8008f7a <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f5c:	ee07 3a90 	vmov	s15, r3
 8008f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f70:	edc7 7a00 	vstr	s15, [r7]
 8008f74:	783b      	ldrb	r3, [r7, #0]
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	e00e      	b.n	8008f98 <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f84:	ee07 3a90 	vmov	s15, r3
 8008f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f90:	edc7 7a00 	vstr	s15, [r7]
 8008f94:	783b      	ldrb	r3, [r7, #0]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b12      	cmp	r3, #18
 8008fa8:	d113      	bne.n	8008fd2 <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008fb0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8008fb4:	ee07 3a90 	vmov	s15, r3
 8008fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fbc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc8:	edc7 7a00 	vstr	s15, [r7]
 8008fcc:	783b      	ldrb	r3, [r7, #0]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	e00e      	b.n	8008ff0 <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008fd8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8008fdc:	ee07 3a90 	vmov	s15, r3
 8008fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe8:	edc7 7a00 	vstr	s15, [r7]
 8008fec:	783b      	ldrb	r3, [r7, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                        jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b13      	cmp	r3, #19
 8009000:	d113      	bne.n	800902a <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009008:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009014:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800901c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009020:	edc7 7a00 	vstr	s15, [r7]
 8009024:	783b      	ldrb	r3, [r7, #0]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	e00e      	b.n	8009048 <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009030:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8009034:	ee07 3a90 	vmov	s15, r3
 8009038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009040:	edc7 7a00 	vstr	s15, [r7]
 8009044:	783b      	ldrb	r3, [r7, #0]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                        jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b14      	cmp	r3, #20
 8009058:	d113      	bne.n	8009082 <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009060:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800906c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009078:	edc7 7a00 	vstr	s15, [r7]
 800907c:	783b      	ldrb	r3, [r7, #0]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	e00e      	b.n	80090a0 <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009088:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800908c:	ee07 3a90 	vmov	s15, r3
 8009090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009098:	edc7 7a00 	vstr	s15, [r7]
 800909c:	783b      	ldrb	r3, [r7, #0]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                        jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b15      	cmp	r3, #21
 80090b0:	d113      	bne.n	80090da <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80090b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80090bc:	ee07 3a90 	vmov	s15, r3
 80090c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80090c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090d0:	edc7 7a00 	vstr	s15, [r7]
 80090d4:	783b      	ldrb	r3, [r7, #0]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	e00e      	b.n	80090f8 <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80090e0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090f0:	edc7 7a00 	vstr	s15, [r7]
 80090f4:	783b      	ldrb	r3, [r7, #0]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
                        jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	2b16      	cmp	r3, #22
 8009108:	d113      	bne.n	8009132 <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009110:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009114:	ee07 3a90 	vmov	s15, r3
 8009118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800911c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009128:	edc7 7a00 	vstr	s15, [r7]
 800912c:	783b      	ldrb	r3, [r7, #0]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	e00e      	b.n	8009150 <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009138:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800913c:	ee07 3a90 	vmov	s15, r3
 8009140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009148:	edc7 7a00 	vstr	s15, [r7]
 800914c:	783b      	ldrb	r3, [r7, #0]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                        jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2b17      	cmp	r3, #23
 8009160:	d113      	bne.n	800918a <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009168:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009174:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009178:	ee77 7a87 	vadd.f32	s15, s15, s14
 800917c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009180:	edc7 7a00 	vstr	s15, [r7]
 8009184:	783b      	ldrb	r3, [r7, #0]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	e00e      	b.n	80091a8 <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009190:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8009194:	ee07 3a90 	vmov	s15, r3
 8009198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a0:	edc7 7a00 	vstr	s15, [r7]
 80091a4:	783b      	ldrb	r3, [r7, #0]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
                        jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2b18      	cmp	r3, #24
 80091b8:	d113      	bne.n	80091e2 <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80091c0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80091c4:	ee07 3a90 	vmov	s15, r3
 80091c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091cc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d8:	edc7 7a00 	vstr	s15, [r7]
 80091dc:	783b      	ldrb	r3, [r7, #0]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	e00e      	b.n	8009200 <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80091e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80091ec:	ee07 3a90 	vmov	s15, r3
 80091f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f8:	edc7 7a00 	vstr	s15, [r7]
 80091fc:	783b      	ldrb	r3, [r7, #0]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                        jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b19      	cmp	r3, #25
 8009210:	d113      	bne.n	800923a <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009218:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800921c:	ee07 3a90 	vmov	s15, r3
 8009220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009224:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800922c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009230:	edc7 7a00 	vstr	s15, [r7]
 8009234:	783b      	ldrb	r3, [r7, #0]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	e00e      	b.n	8009258 <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009240:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009250:	edc7 7a00 	vstr	s15, [r7]
 8009254:	783b      	ldrb	r3, [r7, #0]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
                        jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	2b1a      	cmp	r3, #26
 8009268:	d113      	bne.n	8009292 <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009270:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8009274:	ee07 3a90 	vmov	s15, r3
 8009278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800927c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009288:	edc7 7a00 	vstr	s15, [r7]
 800928c:	783b      	ldrb	r3, [r7, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	e00e      	b.n	80092b0 <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009298:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a8:	edc7 7a00 	vstr	s15, [r7]
 80092ac:	783b      	ldrb	r3, [r7, #0]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                        jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2b1b      	cmp	r3, #27
 80092c0:	d113      	bne.n	80092ea <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80092c8:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80092cc:	ee07 3a90 	vmov	s15, r3
 80092d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80092d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e0:	edc7 7a00 	vstr	s15, [r7]
 80092e4:	783b      	ldrb	r3, [r7, #0]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	e00e      	b.n	8009308 <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80092f0:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009300:	edc7 7a00 	vstr	s15, [r7]
 8009304:	783b      	ldrb	r3, [r7, #0]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
                        jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b1c      	cmp	r3, #28
 8009318:	d113      	bne.n	8009342 <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009320:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800932c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009330:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009338:	edc7 7a00 	vstr	s15, [r7]
 800933c:	783b      	ldrb	r3, [r7, #0]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	e00e      	b.n	8009360 <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009348:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800934c:	ee07 3a90 	vmov	s15, r3
 8009350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009358:	edc7 7a00 	vstr	s15, [r7]
 800935c:	783b      	ldrb	r3, [r7, #0]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
                        jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b1d      	cmp	r3, #29
 8009370:	d113      	bne.n	800939a <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009378:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009384:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009388:	ee77 7a87 	vadd.f32	s15, s15, s14
 800938c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009390:	edc7 7a00 	vstr	s15, [r7]
 8009394:	783b      	ldrb	r3, [r7, #0]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	e00e      	b.n	80093b8 <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093a0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b0:	edc7 7a00 	vstr	s15, [r7]
 80093b4:	783b      	ldrb	r3, [r7, #0]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
                        jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b1e      	cmp	r3, #30
 80093c8:	d113      	bne.n	80093f2 <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093d0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80093e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e8:	edc7 7a00 	vstr	s15, [r7]
 80093ec:	783b      	ldrb	r3, [r7, #0]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	e00e      	b.n	8009410 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093f8:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009408:	edc7 7a00 	vstr	s15, [r7]
 800940c:	783b      	ldrb	r3, [r7, #0]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
                        jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	2b1f      	cmp	r3, #31
 8009420:	d113      	bne.n	800944a <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009428:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009434:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800943c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009440:	edc7 7a00 	vstr	s15, [r7]
 8009444:	783b      	ldrb	r3, [r7, #0]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	e00e      	b.n	8009468 <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009450:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009460:	edc7 7a00 	vstr	s15, [r7]
 8009464:	783b      	ldrb	r3, [r7, #0]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

                        char data[measurements_2_DLC + 2] = {0};
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	f107 0310 	add.w	r3, r7, #16
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_2_IDE;
 800947c:	2300      	movs	r3, #0
 800947e:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_2_DLC;
 8009480:	2308      	movs	r3, #8
 8009482:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_2_CANID;
 8009484:	2302      	movs	r3, #2
 8009486:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_2_DLC;
 8009488:	2308      	movs	r3, #8
 800948a:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f103 0020 	add.w	r0, r3, #32
 8009492:	f107 010c 	add.w	r1, r7, #12
 8009496:	3102      	adds	r1, #2
 8009498:	f107 030b 	add.w	r3, r7, #11
 800949c:	f107 020a 	add.w	r2, r7, #10
 80094a0:	f7f7 fe94 	bl	80011cc <Pack_measurements_2_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 fafe 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 80094b6:	4603      	mov	r3, r0
 80094b8:	61fb      	str	r3, [r7, #28]
 80094ba:	f107 021c 	add.w	r2, r7, #28
 80094be:	f107 0318 	add.w	r3, r7, #24
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 fb05 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 80094ca:	f107 030c 	add.w	r3, r7, #12
 80094ce:	330a      	adds	r3, #10
 80094d0:	f107 020c 	add.w	r2, r7, #12
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	4620      	mov	r0, r4
 80094d8:	f001 fb0d 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 80094dc:	bf00      	nop
 80094de:	3724      	adds	r7, #36	; 0x24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd90      	pop	{r4, r7, pc}

080094e4 <_ZN3jlb12SignalSender14measurements_3Ev>:

                void measurements_3()
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b089      	sub	sp, #36	; 0x24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f7 f819 	bl	800052c <__aeabi_f2d>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                        jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	4618      	mov	r0, r3
 800950e:	f7f7 f80d 	bl	800052c <__aeabi_f2d>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                        jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	4618      	mov	r0, r3
 8009526:	f7f7 f801 	bl	800052c <__aeabi_f2d>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

                        char data[measurements_2_DLC + 2] = {0};
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	f107 0310 	add.w	r3, r7, #16
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_3_IDE;
 8009542:	2300      	movs	r3, #0
 8009544:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_3_DLC;
 8009546:	2308      	movs	r3, #8
 8009548:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_3_CANID;
 800954a:	2303      	movs	r3, #3
 800954c:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_3_DLC;
 800954e:	2308      	movs	r3, #8
 8009550:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009558:	f107 010c 	add.w	r1, r7, #12
 800955c:	3102      	adds	r1, #2
 800955e:	f107 030b 	add.w	r3, r7, #11
 8009562:	f107 020a 	add.w	r2, r7, #10
 8009566:	f7f7 ff7b 	bl	8001460 <Pack_measurements_3_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009576:	4618      	mov	r0, r3
 8009578:	f001 fa9b 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 800957c:	4603      	mov	r3, r0
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	f107 021c 	add.w	r2, r7, #28
 8009584:	f107 0318 	add.w	r3, r7, #24
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f001 faa2 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009590:	f107 030c 	add.w	r3, r7, #12
 8009594:	330a      	adds	r3, #10
 8009596:	f107 020c 	add.w	r2, r7, #12
 800959a:	69b9      	ldr	r1, [r7, #24]
 800959c:	4620      	mov	r0, r4
 800959e:	f001 faaa 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 80095a2:	bf00      	nop
 80095a4:	3724      	adds	r7, #36	; 0x24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd90      	pop	{r4, r7, pc}

080095aa <_ZN3jlb12SignalSender14measurements_4Ev>:

                void measurements_4()
 80095aa:	b590      	push	{r4, r7, lr}
 80095ac:	b089      	sub	sp, #36	; 0x24
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7f6 ffb6 	bl	800052c <__aeabi_f2d>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                        jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f6 ffaa 	bl	800052c <__aeabi_f2d>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                        jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7f6 ff9e 	bl	800052c <__aeabi_f2d>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	6879      	ldr	r1, [r7, #4]
 80095f6:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

                        char data[measurements_3_DLC + 2] = {0};
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	f107 0310 	add.w	r3, r7, #16
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_4_IDE;
 8009608:	2300      	movs	r3, #0
 800960a:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_4_DLC;
 800960c:	2308      	movs	r3, #8
 800960e:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_4_CANID;
 8009610:	2304      	movs	r3, #4
 8009612:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_4_DLC;
 8009614:	2308      	movs	r3, #8
 8009616:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800961e:	f107 010c 	add.w	r1, r7, #12
 8009622:	3102      	adds	r1, #2
 8009624:	f107 030b 	add.w	r3, r7, #11
 8009628:	f107 020a 	add.w	r2, r7, #10
 800962c:	f7f7 ffd8 	bl	80015e0 <Pack_measurements_4_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800963c:	4618      	mov	r0, r3
 800963e:	f001 fa38 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8009642:	4603      	mov	r3, r0
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	f107 021c 	add.w	r2, r7, #28
 800964a:	f107 0318 	add.w	r3, r7, #24
 800964e:	4611      	mov	r1, r2
 8009650:	4618      	mov	r0, r3
 8009652:	f001 fa3f 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009656:	f107 030c 	add.w	r3, r7, #12
 800965a:	330a      	adds	r3, #10
 800965c:	f107 020c 	add.w	r2, r7, #12
 8009660:	69b9      	ldr	r1, [r7, #24]
 8009662:	4620      	mov	r0, r4
 8009664:	f001 fa47 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 8009668:	bf00      	nop
 800966a:	3724      	adds	r7, #36	; 0x24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <_ZN3jlb12SignalSender14measurements_5Ev>:

                void measurements_5()
 8009670:	b590      	push	{r4, r7, lr}
 8009672:	b089      	sub	sp, #36	; 0x24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_5.motor_rpm_phys = odometry.meas_motor_rpm;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	4618      	mov	r0, r3
 8009682:	f7f6 ff53 	bl	800052c <__aeabi_f2d>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                        jlb_rx.measurements_5.object_range_phys = controller.object_range;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009698:	4618      	mov	r0, r3
 800969a:	f7f6 ff47 	bl	800052c <__aeabi_f2d>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

                        char data[measurements_4_DLC + 2] = {0};
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	f107 0310 	add.w	r3, r7, #16
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_5_IDE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_5_DLC;
 80096ba:	2308      	movs	r3, #8
 80096bc:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_5_CANID;
 80096be:	2305      	movs	r3, #5
 80096c0:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_5_DLC;
 80096c2:	2308      	movs	r3, #8
 80096c4:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80096cc:	f107 010c 	add.w	r1, r7, #12
 80096d0:	3102      	adds	r1, #2
 80096d2:	f107 030b 	add.w	r3, r7, #11
 80096d6:	f107 020a 	add.w	r2, r7, #10
 80096da:	f7f8 f841 	bl	8001760 <Pack_measurements_5_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 f9e1 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 80096f0:	4603      	mov	r3, r0
 80096f2:	61fb      	str	r3, [r7, #28]
 80096f4:	f107 021c 	add.w	r2, r7, #28
 80096f8:	f107 0318 	add.w	r3, r7, #24
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f001 f9e8 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	330a      	adds	r3, #10
 800970a:	f107 020c 	add.w	r2, r7, #12
 800970e:	69b9      	ldr	r1, [r7, #24]
 8009710:	4620      	mov	r0, r4
 8009712:	f001 f9f0 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 8009716:	bf00      	nop
 8009718:	3724      	adds	r7, #36	; 0x24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd90      	pop	{r4, r7, pc}

0800971e <_ZN3jlb12SignalSender10odometry_1Ev>:

                void odometry_1()
 800971e:	b590      	push	{r4, r7, lr}
 8009720:	b089      	sub	sp, #36	; 0x24
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.odometry_1.position_x_phys = odometry.x_t;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	4618      	mov	r0, r3
 8009730:	f7f6 fefc 	bl	800052c <__aeabi_f2d>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	6879      	ldr	r1, [r7, #4]
 800973a:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
                        jlb_rx.odometry_1.position_y_phys = odometry.y_t;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	4618      	mov	r0, r3
 8009748:	f7f6 fef0 	bl	800052c <__aeabi_f2d>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	6879      	ldr	r1, [r7, #4]
 8009752:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
                        jlb_rx.odometry_1.orientation_phys = odometry.theta_t;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	4618      	mov	r0, r3
 8009760:	f7f6 fee4 	bl	800052c <__aeabi_f2d>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8

                        char data[odometry_1_DLC + 2] = {0};
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	f107 0310 	add.w	r3, r7, #16
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = odometry_1_IDE;
 800977c:	2300      	movs	r3, #0
 800977e:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = odometry_1_DLC;
 8009780:	2308      	movs	r3, #8
 8009782:	72bb      	strb	r3, [r7, #10]
                        data[0] = odometry_1_CANID;
 8009784:	2311      	movs	r3, #17
 8009786:	733b      	strb	r3, [r7, #12]
                        data[1] = odometry_1_DLC;
 8009788:	2308      	movs	r3, #8
 800978a:	737b      	strb	r3, [r7, #13]
                        Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8009792:	f107 010c 	add.w	r1, r7, #12
 8009796:	3102      	adds	r1, #2
 8009798:	f107 030b 	add.w	r3, r7, #11
 800979c:	f107 020a 	add.w	r2, r7, #10
 80097a0:	f7f8 f866 	bl	8001870 <Pack_odometry_1_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 f97e 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	61fb      	str	r3, [r7, #28]
 80097ba:	f107 021c 	add.w	r2, r7, #28
 80097be:	f107 0318 	add.w	r3, r7, #24
 80097c2:	4611      	mov	r1, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 f985 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 80097ca:	f107 030c 	add.w	r3, r7, #12
 80097ce:	330a      	adds	r3, #10
 80097d0:	f107 020c 	add.w	r2, r7, #12
 80097d4:	69b9      	ldr	r1, [r7, #24]
 80097d6:	4620      	mov	r0, r4
 80097d8:	f001 f98d 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 80097dc:	bf00      	nop
 80097de:	3724      	adds	r7, #36	; 0x24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd90      	pop	{r4, r7, pc}

080097e4 <_ZN3jlb12SignalSender10odometry_2Ev>:

                void odometry_2()
 80097e4:	b590      	push	{r4, r7, lr}
 80097e6:	b089      	sub	sp, #36	; 0x24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.odometry_2.linear_velocity_x_phys = odometry.vx_t;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f6 fe99 	bl	800052c <__aeabi_f2d>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
                        jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	4618      	mov	r0, r3
 800980e:	f7f6 fe8d 	bl	800052c <__aeabi_f2d>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8

                        char data[odometry_2_DLC + 2] = {0};
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	f107 0310 	add.w	r3, r7, #16
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = odometry_2_IDE;
 800982a:	2300      	movs	r3, #0
 800982c:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = odometry_2_DLC;
 800982e:	2308      	movs	r3, #8
 8009830:	72bb      	strb	r3, [r7, #10]
                        data[0] = odometry_2_CANID;
 8009832:	2312      	movs	r3, #18
 8009834:	733b      	strb	r3, [r7, #12]
                        data[1] = odometry_2_DLC;
 8009836:	2308      	movs	r3, #8
 8009838:	737b      	strb	r3, [r7, #13]
                        Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8009840:	f107 010c 	add.w	r1, r7, #12
 8009844:	3102      	adds	r1, #2
 8009846:	f107 030b 	add.w	r3, r7, #11
 800984a:	f107 020a 	add.w	r2, r7, #10
 800984e:	f7f8 f8d7 	bl	8001a00 <Pack_odometry_2_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800985e:	4618      	mov	r0, r3
 8009860:	f001 f927 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8009864:	4603      	mov	r3, r0
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	f107 021c 	add.w	r2, r7, #28
 800986c:	f107 0318 	add.w	r3, r7, #24
 8009870:	4611      	mov	r1, r2
 8009872:	4618      	mov	r0, r3
 8009874:	f001 f92e 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	330a      	adds	r3, #10
 800987e:	f107 020c 	add.w	r2, r7, #12
 8009882:	69b9      	ldr	r1, [r7, #24]
 8009884:	4620      	mov	r0, r4
 8009886:	f001 f936 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800988a:	bf00      	nop
 800988c:	3724      	adds	r7, #36	; 0x24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd90      	pop	{r4, r7, pc}

08009892 <_ZN3jlb12SignalSender7logic_1Ev>:

                void logic_1()
 8009892:	b590      	push	{r4, r7, lr}
 8009894:	b089      	sub	sp, #36	; 0x24
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.logic_1.target_angle_phys = controller.target_angle;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f6 fe42 	bl	800052c <__aeabi_f2d>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	6879      	ldr	r1, [r7, #4]
 80098ae:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
                        jlb_rx.logic_1.target_speed_phys = controller.target_speed;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f6 fe36 	bl	800052c <__aeabi_f2d>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	6879      	ldr	r1, [r7, #4]
 80098c6:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
                        jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7f6 fe2a 	bl	800052c <__aeabi_f2d>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                        jlb_rx.logic_1.heading_error_phys = controller.heading_error;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7f6 fe1e 	bl	800052c <__aeabi_f2d>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

                        char data[logic_1_DLC + 2] = {0};
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	f107 0310 	add.w	r3, r7, #16
 8009902:	2200      	movs	r2, #0
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = logic_1_IDE;
 8009908:	2300      	movs	r3, #0
 800990a:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = logic_1_DLC;
 800990c:	2308      	movs	r3, #8
 800990e:	72bb      	strb	r3, [r7, #10]
                        data[0] = logic_1_CANID;
 8009910:	2321      	movs	r3, #33	; 0x21
 8009912:	733b      	strb	r3, [r7, #12]
                        data[1] = logic_1_DLC;
 8009914:	2308      	movs	r3, #8
 8009916:	737b      	strb	r3, [r7, #13]
                        Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800991e:	f107 010c 	add.w	r1, r7, #12
 8009922:	3102      	adds	r1, #2
 8009924:	f107 030b 	add.w	r3, r7, #11
 8009928:	f107 020a 	add.w	r2, r7, #10
 800992c:	f7f8 f8fc 	bl	8001b28 <Pack_logic_1_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800993c:	4618      	mov	r0, r3
 800993e:	f001 f8b8 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8009942:	4603      	mov	r3, r0
 8009944:	61fb      	str	r3, [r7, #28]
 8009946:	f107 021c 	add.w	r2, r7, #28
 800994a:	f107 0318 	add.w	r3, r7, #24
 800994e:	4611      	mov	r1, r2
 8009950:	4618      	mov	r0, r3
 8009952:	f001 f8bf 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009956:	f107 030c 	add.w	r3, r7, #12
 800995a:	330a      	adds	r3, #10
 800995c:	f107 020c 	add.w	r2, r7, #12
 8009960:	69b9      	ldr	r1, [r7, #24]
 8009962:	4620      	mov	r0, r4
 8009964:	f001 f8c7 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 8009968:	bf00      	nop
 800996a:	3724      	adds	r7, #36	; 0x24
 800996c:	46bd      	mov	sp, r7
 800996e:	bd90      	pop	{r4, r7, pc}

08009970 <_ZN3jlb12SignalSender7logic_2Ev>:

                void logic_2()
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b089      	sub	sp, #36	; 0x24
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.logic_2.state = static_cast<uint8_t>(controller.mission);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800997e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009982:	b2da      	uxtb	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
                        jlb_rx.logic_2.direction = static_cast<uint8_t>(controller.direction);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
                        jlb_rx.logic_2.under_gate = as_state.under_gate;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
                        jlb_rx.logic_2.at_cross_section = as_state.at_cross_section;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80099b2:	785b      	ldrb	r3, [r3, #1]
 80099b4:	461a      	mov	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
                        jlb_rx.logic_2.previous_node = as_state.previous_node;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80099c2:	78da      	ldrb	r2, [r3, #3]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
                        jlb_rx.logic_2.next_node = as_state.next_node;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80099d0:	791a      	ldrb	r2, [r3, #4]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

                        char data[logic_2_DLC + 2] = {0};
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	f107 0310 	add.w	r3, r7, #16
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = logic_2_IDE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = logic_2_DLC;
 80099ea:	2308      	movs	r3, #8
 80099ec:	72bb      	strb	r3, [r7, #10]
                        data[0] = logic_2_CANID;
 80099ee:	2322      	movs	r3, #34	; 0x22
 80099f0:	733b      	strb	r3, [r7, #12]
                        data[1] = logic_2_DLC;
 80099f2:	2308      	movs	r3, #8
 80099f4:	737b      	strb	r3, [r7, #13]
                        Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 80099fc:	f107 010c 	add.w	r1, r7, #12
 8009a00:	3102      	adds	r1, #2
 8009a02:	f107 030b 	add.w	r3, r7, #11
 8009a06:	f107 020a 	add.w	r2, r7, #10
 8009a0a:	f7f8 f991 	bl	8001d30 <Pack_logic_2_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 f849 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8009a20:	4603      	mov	r3, r0
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	f107 021c 	add.w	r2, r7, #28
 8009a28:	f107 0318 	add.w	r3, r7, #24
 8009a2c:	4611      	mov	r1, r2
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f001 f850 	bl	800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009a34:	f107 030c 	add.w	r3, r7, #12
 8009a38:	330a      	adds	r3, #10
 8009a3a:	f107 020c 	add.w	r2, r7, #12
 8009a3e:	69b9      	ldr	r1, [r7, #24]
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 f858 	bl	800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 8009a46:	bf00      	nop
 8009a48:	3724      	adds	r7, #36	; 0x24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd90      	pop	{r4, r7, pc}

08009a4e <_ZN3jlb7ASStateC1Ev>:
#define AS_STATE_HXX

namespace jlb
{

    class ASState
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	701a      	strb	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	705a      	strb	r2, [r3, #1]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	709a      	strb	r2, [r3, #2]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2255      	movs	r2, #85	; 0x55
 8009a6c:	70da      	strb	r2, [r3, #3]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2255      	movs	r2, #85	; 0x55
 8009a72:	711a      	strb	r2, [r3, #4]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
        ASState as_state;
        Graph graph;

        SignalSender signal_sender = SignalSender(odometry, controller, as_state, graph);

        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 8009a82:	b590      	push	{r4, r7, lr}
 8009a84:	b089      	sub	sp, #36	; 0x24
 8009a86:	af02      	add	r7, sp, #8
 8009a88:	6178      	str	r0, [r7, #20]
 8009a8a:	6139      	str	r1, [r7, #16]
 8009a8c:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a90:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a94:	ed87 1a01 	vstr	s2, [r7, #4]
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	ed97 1a01 	vldr	s2, [r7, #4]
 8009a9e:	edd7 0a02 	vldr	s1, [r7, #8]
 8009aa2:	ed97 0a03 	vldr	s0, [r7, #12]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7f9 fb7e 	bl	80031a8 <_ZN3jlb8OdometryC1Efff>
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	3384      	adds	r3, #132	; 0x84
 8009ab0:	6939      	ldr	r1, [r7, #16]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fa f8aa 	bl	8003c0c <_ZN3jlb10ControllerC1ENS_9DirectionE>
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff ffc5 	bl	8009a4e <_ZN3jlb7ASStateC1Ev>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fa fd74 	bl	80045b8 <_ZN3jlb5GraphC1Ev>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8009ad6:	6979      	ldr	r1, [r7, #20]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	4623      	mov	r3, r4
 8009aee:	f7fd ffc1 	bl	8007a74 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphE>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4618      	mov	r0, r3
 8009af6:	371c      	adds	r7, #28
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}

08009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 8009b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b14:	ed2d 8b02 	vpush	{d8}
 8009b18:	b097      	sub	sp, #92	; 0x5c
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7f9 fca1 	bl	8003468 <_ZN3jlb8Odometry11update_odomEv>
 8009b26:	eeb0 6a40 	vmov.f32	s12, s0
 8009b2a:	eef0 6a60 	vmov.f32	s13, s1
 8009b2e:	eeb0 7a41 	vmov.f32	s14, s2
 8009b32:	eef0 7a61 	vmov.f32	s15, s3
 8009b36:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8009b3a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8009b3e:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8009b42:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            controller.set_current_velocity(vx);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3384      	adds	r3, #132	; 0x84
            auto [vx, x, y, theta] = odometry.update_odom();
 8009b4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_current_velocity(vx);
 8009b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fa fc67 	bl	8004426 <_ZN3jlb10Controller20set_current_velocityEf>

            bool at_decision_point = as_state.under_gate || as_state.at_cross_section;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <_ZN3jlb5Logic6updateEv+0x5a>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <_ZN3jlb5Logic6updateEv+0x5e>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e000      	b.n	8009b72 <_ZN3jlb5Logic6updateEv+0x60>
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

            if (!as_state.prev_at_decision_point && at_decision_point)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8009b7c:	f083 0301 	eor.w	r3, r3, #1
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 815e 	beq.w	8009e44 <_ZN3jlb5Logic6updateEv+0x332>
 8009b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8159 	beq.w	8009e44 <_ZN3jlb5Logic6updateEv+0x332>
            {
                float inaccuracy = 0.25f;
 8009b92:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009b96:	653b      	str	r3, [r7, #80]	; 0x50
                if (std::sqrt(std::pow(graph[as_state.next_node].x - odometry.x_t, 2) + std::pow(graph[as_state.next_node].y - odometry.y_t, 2)) < inaccuracy)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fd ff2c 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009bac:	4603      	mov	r3, r0
 8009bae:	ed93 7a01 	vldr	s14, [r3, #4]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8009bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bbc:	2002      	movs	r0, #2
 8009bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8009bc2:	f7f8 fa83 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8009bc6:	ec55 4b10 	vmov	r4, r5, d0
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fd ff13 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009bde:	4603      	mov	r3, r0
 8009be0:	ed93 7a02 	vldr	s14, [r3, #8]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	edd3 7a03 	vldr	s15, [r3, #12]
 8009bea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bee:	2002      	movs	r0, #2
 8009bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf4:	f7f8 fa6a 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8009bf8:	ec53 2b10 	vmov	r2, r3, d0
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fb36 	bl	8000270 <__adddf3>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	ec43 2b17 	vmov	d7, r2, r3
 8009c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8009c10:	eef0 0a67 	vmov.f32	s1, s15
 8009c14:	f015 fb72 	bl	801f2fc <sqrt>
 8009c18:	ec55 4b10 	vmov	r4, r5, d0
 8009c1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009c1e:	f7f6 fc85 	bl	800052c <__aeabi_f2d>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	2101      	movs	r1, #1
 8009c28:	460e      	mov	r6, r1
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 ff47 	bl	8000ac0 <__aeabi_dcmplt>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <_ZN3jlb5Logic6updateEv+0x12a>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	461e      	mov	r6, r3
 8009c3c:	b2f3      	uxtb	r3, r6
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 8100 	beq.w	8009e44 <_ZN3jlb5Logic6updateEv+0x332>
                {
                    auto at_node = as_state.next_node;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8009c4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

                    while (true)
                    {
                        unsigned long num_neighbors = graph[at_node].edges.size();
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009c54:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009c58:	4611      	mov	r1, r2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fd fed2 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009c60:	4603      	mov	r3, r0
 8009c62:	330c      	adds	r3, #12
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 ff7f 	bl	800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8009c6a:	64b8      	str	r0, [r7, #72]	; 0x48
                        auto selected_edge = rand() % num_neighbors;
 8009c6c:	f017 fd30 	bl	80216d0 <rand>
 8009c70:	4603      	mov	r3, r0
 8009c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c74:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009c7a:	fb01 f202 	mul.w	r2, r1, r2
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	647b      	str	r3, [r7, #68]	; 0x44

                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009c88:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd feb8 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009c94:	4603      	mov	r3, r0
 8009c96:	330c      	adds	r3, #12
 8009c98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 ff7a 	bl	800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	781b      	ldrb	r3, [r3, #0]
                            graph[at_node].edges[selected_edge].node == 'U' ||
 8009ca4:	2b50      	cmp	r3, #80	; 0x50
 8009ca6:	d025      	beq.n	8009cf4 <_ZN3jlb5Logic6updateEv+0x1e2>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009cae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fd fea5 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	330c      	adds	r3, #12
 8009cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 ff67 	bl	800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	781b      	ldrb	r3, [r3, #0]
                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 8009cca:	2b55      	cmp	r3, #85	; 0x55
 8009ccc:	d012      	beq.n	8009cf4 <_ZN3jlb5Logic6updateEv+0x1e2>
                            graph[at_node].edges[selected_edge].node == 'X')
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009cd4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fd fe92 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	330c      	adds	r3, #12
 8009ce4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ff54 	bl	800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009cec:	4603      	mov	r3, r0
 8009cee:	781b      	ldrb	r3, [r3, #0]
                            graph[at_node].edges[selected_edge].node == 'U' ||
 8009cf0:	2b58      	cmp	r3, #88	; 0x58
 8009cf2:	d101      	bne.n	8009cf8 <_ZN3jlb5Logic6updateEv+0x1e6>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <_ZN3jlb5Logic6updateEv+0x1e8>
 8009cf8:	2300      	movs	r3, #0
                        if (graph[at_node].edges[selected_edge].node == 'P' ||
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f040 80a0 	bne.w	8009e40 <_ZN3jlb5Logic6updateEv+0x32e>
                        {
                            continue;
                        }

                        auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d06:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fd fe79 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009d12:	4603      	mov	r3, r0
 8009d14:	330c      	adds	r3, #12
 8009d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 ff3b 	bl	800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	f103 0208 	add.w	r2, r3, #8
 8009d24:	f107 0310 	add.w	r3, r7, #16
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fd97 	bl	800a85e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                        if (std::find(prev_nodes.begin(), prev_nodes.end(), as_state.previous_node) != prev_nodes.end())
 8009d30:	f107 0310 	add.w	r3, r7, #16
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 ff40 	bl	800abba <_ZNSt6vectorIcSaIcEE5beginEv>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	f107 0310 	add.w	r3, r7, #16
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 feb6 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8009d46:	4601      	mov	r1, r0
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 ff42 	bl	800abda <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8009d56:	4603      	mov	r3, r0
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5a:	f107 0310 	add.w	r3, r7, #16
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fea7 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 8009d64:	4603      	mov	r3, r0
 8009d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009d6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 ff45 	bl	800ac02 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f083 0301 	eor.w	r3, r3, #1
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d054      	beq.n	8009e2e <_ZN3jlb5Logic6updateEv+0x31c>
                        {
                            as_state.next_node = graph[at_node].edges[selected_edge].node;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d8a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fd fe37 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009d96:	4603      	mov	r3, r0
 8009d98:	330c      	adds	r3, #12
 8009d9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fef9 	bl	800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009da2:	4603      	mov	r3, r0
 8009da4:	781a      	ldrb	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
                            as_state.previous_node = at_node;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009db2:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

                            controller.set_direction(graph[at_node].edges[selected_edge].direction);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009dc2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fd fe1b 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	330c      	adds	r3, #12
 8009dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fedd 	bl	800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	4619      	mov	r1, r3
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7fa fb30 	bl	8004446 <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                            odometry.correction(graph[as_state.previous_node].x, graph[as_state.previous_node].y);
 8009de6:	68fc      	ldr	r4, [r7, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fd fe04 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	ed93 8a01 	vldr	s16, [r3, #4]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fd fdf7 	bl	8007a04 <_ZN3jlb5GraphixEc>
 8009e16:	4603      	mov	r3, r0
 8009e18:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e1c:	eef0 0a67 	vmov.f32	s1, s15
 8009e20:	eeb0 0a48 	vmov.f32	s0, s16
 8009e24:	4620      	mov	r0, r4
 8009e26:	f7f9 fc57 	bl	80036d8 <_ZN3jlb8Odometry10correctionEff>

                            break;
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	e000      	b.n	8009e30 <_ZN3jlb5Logic6updateEv+0x31e>
                        }
                    }
 8009e2e:	2401      	movs	r4, #1
 8009e30:	f107 0310 	add.w	r3, r7, #16
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fd4f 	bl	800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>
 8009e3a:	2c01      	cmp	r4, #1
 8009e3c:	d102      	bne.n	8009e44 <_ZN3jlb5Logic6updateEv+0x332>
 8009e3e:	e000      	b.n	8009e42 <_ZN3jlb5Logic6updateEv+0x330>
                            continue;
 8009e40:	bf00      	nop
                    }
 8009e42:	e704      	b.n	8009c4e <_ZN3jlb5Logic6updateEv+0x13c>
                    }
#endif
                }
            }

            as_state.prev_at_decision_point = at_decision_point;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009e4a:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e

            auto [target_angle, target_speed] = controller.update();
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3384      	adds	r3, #132	; 0x84
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fa fa84 	bl	8004360 <_ZN3jlb10Controller6updateEv>
 8009e58:	eeb0 7a40 	vmov.f32	s14, s0
 8009e5c:	eef0 7a60 	vmov.f32	s15, s1
 8009e60:	ed87 7a07 	vstr	s14, [r7, #28]
 8009e64:	edc7 7a08 	vstr	s15, [r7, #32]
 8009e68:	69fb      	ldr	r3, [r7, #28]
            return ControlSignal{target_angle, target_speed};
 8009e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
            auto [target_angle, target_speed] = controller.update();
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
            return ControlSignal{target_angle, target_speed};
 8009e6e:	643b      	str	r3, [r7, #64]	; 0x40
 8009e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e74:	ee07 2a10 	vmov	s14, r2
 8009e78:	ee07 3a90 	vmov	s15, r3
        }
 8009e7c:	eeb0 0a47 	vmov.f32	s0, s14
 8009e80:	eef0 0a67 	vmov.f32	s1, s15
 8009e84:	375c      	adds	r7, #92	; 0x5c
 8009e86:	46bd      	mov	sp, r7
 8009e88:	ecbd 8b02 	vpop	{d8}
 8009e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009e90 <_Z19RegistrateUserTasksv>:
{ .name = "EncoderTask", .stack_size = 128 * 4, .priority = (osPriority_t) osPriorityRealtime2 };



void RegistrateUserTasks()
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 8009e94:	4a0c      	ldr	r2, [pc, #48]	; (8009ec8 <_Z19RegistrateUserTasksv+0x38>)
 8009e96:	2100      	movs	r1, #0
 8009e98:	480c      	ldr	r0, [pc, #48]	; (8009ecc <_Z19RegistrateUserTasksv+0x3c>)
 8009e9a:	f012 fd87 	bl	801c9ac <osThreadNew>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	4a0b      	ldr	r2, [pc, #44]	; (8009ed0 <_Z19RegistrateUserTasksv+0x40>)
 8009ea2:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 8009ea4:	4a0b      	ldr	r2, [pc, #44]	; (8009ed4 <_Z19RegistrateUserTasksv+0x44>)
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	480b      	ldr	r0, [pc, #44]	; (8009ed8 <_Z19RegistrateUserTasksv+0x48>)
 8009eaa:	f012 fd7f 	bl	801c9ac <osThreadNew>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <_Z19RegistrateUserTasksv+0x4c>)
 8009eb2:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 8009eb4:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <_Z19RegistrateUserTasksv+0x50>)
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	480a      	ldr	r0, [pc, #40]	; (8009ee4 <_Z19RegistrateUserTasksv+0x54>)
 8009eba:	f012 fd77 	bl	801c9ac <osThreadNew>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <_Z19RegistrateUserTasksv+0x58>)
 8009ec2:	6013      	str	r3, [r2, #0]

}
 8009ec4:	bf00      	nop
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	0802310c 	.word	0x0802310c
 8009ecc:	08009eed 	.word	0x08009eed
 8009ed0:	200002d8 	.word	0x200002d8
 8009ed4:	08023130 	.word	0x08023130
 8009ed8:	08009f21 	.word	0x08009f21
 8009edc:	200002dc 	.word	0x200002dc
 8009ee0:	08023154 	.word	0x08023154
 8009ee4:	08002209 	.word	0x08002209
 8009ee8:	200002e0 	.word	0x200002e0

08009eec <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8009ef4:	f013 fecc 	bl	801dc90 <xTaskGetTickCount>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8009efc:	2208      	movs	r2, #8
 8009efe:	4905      	ldr	r1, [pc, #20]	; (8009f14 <_Z7ADCTaskPv+0x28>)
 8009f00:	4805      	ldr	r0, [pc, #20]	; (8009f18 <_Z7ADCTaskPv+0x2c>)
 8009f02:	f008 fda3 	bl	8012a4c <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 8009f06:	f107 030c 	add.w	r3, r7, #12
 8009f0a:	2105      	movs	r1, #5
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f013 fc6f 	bl	801d7f0 <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 8009f12:	e7f3      	b.n	8009efc <_Z7ADCTaskPv+0x10>
 8009f14:	20000128 	.word	0x20000128
 8009f18:	200002e4 	.word	0x200002e4
 8009f1c:	00000000 	.word	0x00000000

08009f20 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009f2c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8009f30:	6018      	str	r0, [r3, #0]
	static uint8_t direction = 1u;
	jlb::Logic logic;
 8009f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f36:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 800a120 <_Z8MainTaskPv+0x200>
 8009f3a:	eddf 0a79 	vldr	s1, [pc, #484]	; 800a120 <_Z8MainTaskPv+0x200>
 8009f3e:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800a120 <_Z8MainTaskPv+0x200>
 8009f42:	2102      	movs	r1, #2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff fd9c 	bl	8009a82 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
	logic.controller.mission = jlb::Mission::FAST;
 8009f4a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8009f4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009f52:	2201      	movs	r2, #1
 8009f54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 8009f58:	4b72      	ldr	r3, [pc, #456]	; (800a124 <_Z8MainTaskPv+0x204>)
 8009f5a:	899b      	ldrh	r3, [r3, #12]
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f64:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a128 <_Z8MainTaskPv+0x208>
 8009f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f6c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a12c <_Z8MainTaskPv+0x20c>
 8009f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f74:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800a130 <_Z8MainTaskPv+0x210>
 8009f78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f7c:	ee16 0a90 	vmov	r0, s13
 8009f80:	f7f6 fad4 	bl	800052c <__aeabi_f2d>
 8009f84:	a364      	add	r3, pc, #400	; (adr r3, 800a118 <_Z8MainTaskPv+0x1f8>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f7f6 fb27 	bl	80005dc <__aeabi_dmul>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	4610      	mov	r0, r2
 8009f94:	4619      	mov	r1, r3
 8009f96:	f7f6 fdf1 	bl	8000b7c <__aeabi_d2f>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4a65      	ldr	r2, [pc, #404]	; (800a134 <_Z8MainTaskPv+0x214>)
 8009f9e:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 8009fa0:	f7f8 fc2e 	bl	8002800 <_Z14LineSensorTaskv>
		MotorControlTask();
 8009fa4:	f7f8 fe48 	bl	8002c38 <_Z16MotorControlTaskv>
		IMU_Task();
 8009fa8:	f7f8 f9f0 	bl	800238c <_Z8IMU_Taskv>
		DistanceSensorTask();
 8009fac:	f7f7 ff5a 	bl	8001e64 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 8009fb0:	f7f8 f97c 	bl	80022ac <_Z12CalculateRPMv>
 8009fb4:	eef0 7a40 	vmov.f32	s15, s0
 8009fb8:	4b5f      	ldr	r3, [pc, #380]	; (800a138 <_Z8MainTaskPv+0x218>)
 8009fba:	edc3 7a00 	vstr	s15, [r3]
		{
			motorcontrol.target_velocity = 0.0f;
		}
#else

		logic.odometry.imu_callback(imu.yaw);
 8009fbe:	4b5f      	ldr	r3, [pc, #380]	; (800a13c <_Z8MainTaskPv+0x21c>)
 8009fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8009fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7f9 f9d9 	bl	8003384 <_ZN3jlb8Odometry12imu_callbackEf>
		logic.odometry.rpm_callback(wheel_rpm);
 8009fd2:	4b59      	ldr	r3, [pc, #356]	; (800a138 <_Z8MainTaskPv+0x218>)
 8009fd4:	edd3 7a00 	vldr	s15, [r3]
 8009fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7f9 f935 	bl	8003250 <_ZN3jlb8Odometry12rpm_callbackEf>

		std::vector<float> front;
 8009fe6:	f107 031c 	add.w	r3, r7, #28
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f9 fe00 	bl	8003bf0 <_ZNSt6vectorIfSaIfEEC1Ev>
		std::vector<float> rear;
 8009ff0:	f107 0310 	add.w	r3, r7, #16
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7f9 fdfb 	bl	8003bf0 <_ZNSt6vectorIfSaIfEEC1Ev>

		front.push_back(ls_data.position_front);
 8009ffa:	f107 031c 	add.w	r3, r7, #28
 8009ffe:	4950      	ldr	r1, [pc, #320]	; (800a140 <_Z8MainTaskPv+0x220>)
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fe16 	bl	800ac32 <_ZNSt6vectorIfSaIfEE9push_backERKf>
		rear.push_back(ls_data.position_rear);
 800a006:	f107 0310 	add.w	r3, r7, #16
 800a00a:	494e      	ldr	r1, [pc, #312]	; (800a144 <_Z8MainTaskPv+0x224>)
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fe10 	bl	800ac32 <_ZNSt6vectorIfSaIfEE9push_backERKf>

		logic.controller.set_detection_front(ls_data.front_detection, front);
 800a012:	f107 021c 	add.w	r2, r7, #28
 800a016:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800a01a:	4611      	mov	r1, r2
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fa61 	bl	800a4e4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800a022:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800a026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a02a:	3384      	adds	r3, #132	; 0x84
 800a02c:	4946      	ldr	r1, [pc, #280]	; (800a148 <_Z8MainTaskPv+0x228>)
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fa f9b3 	bl	800439a <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 800a034:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 f9a4 	bl	800a386 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.controller.set_detection_rear(ls_data.rear_detection, rear);
 800a03e:	f107 0210 	add.w	r2, r7, #16
 800a042:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fa4b 	bl	800a4e4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800a04e:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 800a052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a056:	3384      	adds	r3, #132	; 0x84
 800a058:	493c      	ldr	r1, [pc, #240]	; (800a14c <_Z8MainTaskPv+0x22c>)
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fa f9c0 	bl	80043e0 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 800a060:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f98e 	bl	800a386 <_ZNSt6vectorIfSaIfEED1Ev>

		auto [target_angle, target_speed] = logic.update();
 800a06a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fd4f 	bl	8009b12 <_ZN3jlb5Logic6updateEv>
 800a074:	eeb0 7a40 	vmov.f32	s14, s0
 800a078:	eef0 7a60 	vmov.f32	s15, s1
 800a07c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800a080:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800a084:	ed83 7a00 	vstr	s14, [r3]
 800a088:	edc3 7a01 	vstr	s15, [r3, #4]
 800a08c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800a090:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800a094:	edd3 7a00 	vldr	s15, [r3]
		SetSteeringAngle(target_angle);
 800a098:	eeb0 0a67 	vmov.f32	s0, s15
 800a09c:	f7f8 ff22 	bl	8002ee4 <_Z16SetSteeringAnglef>
		motorcontrol.actual_velocity = logic.odometry.vx_t;
 800a0a0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800a0a4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a29      	ldr	r2, [pc, #164]	; (800a150 <_Z8MainTaskPv+0x230>)
 800a0ac:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800a0ae:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800a0b2:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800a0b6:	685b      	ldr	r3, [r3, #4]
		motorcontrol.target_velocity = target_speed;
 800a0b8:	4a25      	ldr	r2, [pc, #148]	; (800a150 <_Z8MainTaskPv+0x230>)
 800a0ba:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800a0bc:	f7f8 fdbc 	bl	8002c38 <_Z16MotorControlTaskv>
		auto [target_angle, target_speed] = logic.update();
 800a0c0:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800a0c4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800a0c8:	edd3 7a00 	vldr	s15, [r3]
		SetSteeringAngle(target_angle * 180.0f / 3.14f);
 800a0cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a154 <_Z8MainTaskPv+0x234>
 800a0d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0d4:	eddf 6a20 	vldr	s13, [pc, #128]	; 800a158 <_Z8MainTaskPv+0x238>
 800a0d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0dc:	eeb0 0a47 	vmov.f32	s0, s14
 800a0e0:	f7f8 ff00 	bl	8002ee4 <_Z16SetSteeringAnglef>

		logic.signal_sender.send_telemetry();
 800a0e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fd fce3 	bl	8007ab8 <_ZN3jlb12SignalSender14send_telemetryEv>

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <_Z8MainTaskPv+0x23c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f013 fbfc 	bl	801d8f4 <vTaskSuspend>
	}
 800a0fc:	f107 0310 	add.w	r3, r7, #16
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f940 	bl	800a386 <_ZNSt6vectorIfSaIfEED1Ev>
 800a106:	f107 031c 	add.w	r3, r7, #28
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 f93b 	bl	800a386 <_ZNSt6vectorIfSaIfEED1Ev>
 800a110:	e722      	b.n	8009f58 <_Z8MainTaskPv+0x38>
 800a112:	bf00      	nop
 800a114:	f3af 8000 	nop.w
 800a118:	2cba732e 	.word	0x2cba732e
 800a11c:	3ff0b626 	.word	0x3ff0b626
 800a120:	00000000 	.word	0x00000000
 800a124:	20000148 	.word	0x20000148
 800a128:	45800000 	.word	0x45800000
 800a12c:	40533333 	.word	0x40533333
 800a130:	3e7df3b6 	.word	0x3e7df3b6
 800a134:	200002d0 	.word	0x200002d0
 800a138:	200002d4 	.word	0x200002d4
 800a13c:	200001a4 	.word	0x200001a4
 800a140:	2000027c 	.word	0x2000027c
 800a144:	20000280 	.word	0x20000280
 800a148:	2000023c 	.word	0x2000023c
 800a14c:	2000025c 	.word	0x2000025c
 800a150:	20000284 	.word	0x20000284
 800a154:	43340000 	.word	0x43340000
 800a158:	4048f5c3 	.word	0x4048f5c3
 800a15c:	200002dc 	.word	0x200002dc

0800a160 <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fd86 	bl	800ac7c <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800a170:	2100      	movs	r1, #0
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fd92 	bl	800ac9c <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4618      	mov	r0, r3
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800a182:	b580      	push	{r7, lr}
 800a184:	b082      	sub	sp, #8
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800a196:	429a      	cmp	r2, r3
 800a198:	d00c      	beq.n	800a1b4 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f000 fe18 	bl	800add8 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	1d1a      	adds	r2, r3, #4
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800a1b2:	e003      	b.n	800a1bc <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fe20 	bl	800adfc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f103 0218 	add.w	r2, r3, #24
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f000 fe53 	bl	800ae84 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d010      	beq.n	800a220 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4618      	mov	r0, r3
 800a202:	f000 fdc9 	bl	800ad98 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a206:	4602      	mov	r2, r0
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f000 fe64 	bl	800aedc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	1d1a      	adds	r2, r3, #4
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800a21e:	e002      	b.n	800a226 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fe67 	bl	800aef4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 800a226:	bf00      	nop
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	3308      	adds	r3, #8
 800a23c:	4619      	mov	r1, r3
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fe80 	bl	800af44 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	3318      	adds	r3, #24
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fe71 	bl	800af44 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4618      	mov	r0, r3
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 800a280:	b580      	push	{r7, lr}
 800a282:	ed2d 8b02 	vpush	{d8}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800a292:	e013      	b.n	800a2bc <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 800a294:	1d3b      	adds	r3, r7, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff ffe7 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800a29c:	4603      	mov	r3, r0
 800a29e:	ed93 8a00 	vldr	s16, [r3]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 fe9d 	bl	800afe2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	edd3 7a00 	vldr	s15, [r3]
 800a2ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 800a2b2:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f000 fe74 	bl	800afa4 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 fe5c 	bl	800af7c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f083 0301 	eor.w	r3, r3, #1
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d1e1      	bne.n	800a294 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	ee07 3a90 	vmov	s15, r3
    }
 800a2d6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	ecbd 8b02 	vpop	{d8}
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <_ZSt3minIfET_St16initializer_listIS0_E>:

  // N2722 + DR 915.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline _Tp
    min(initializer_list<_Tp> __l)
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 800a2f0:	463b      	mov	r3, r7
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 fe81 	bl	800affa <_ZNKSt16initializer_listIfE5beginEv>
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	463b      	mov	r3, r7
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f000 fe88 	bl	800b012 <_ZNKSt16initializer_listIfE3endEv>
 800a302:	4603      	mov	r3, r0
 800a304:	4619      	mov	r1, r3
 800a306:	4620      	mov	r0, r4
 800a308:	f000 fe95 	bl	800b036 <_ZSt11min_elementIPKfET_S2_S2_>
 800a30c:	4603      	mov	r3, r0
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eeb0 0a67 	vmov.f32	s0, s15
 800a318:	370c      	adds	r7, #12
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd90      	pop	{r4, r7, pc}

0800a31e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fe96 	bl	800b058 <_ZNSaIfEC1Ev>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fe9e 	bl	800b070 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800a36c:	461a      	mov	r2, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fe92 	bl	800b098 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4618      	mov	r0, r3
 800a378:	f7f9 fc21 	bl	8003bbe <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800a386:	b5b0      	push	{r4, r5, r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681c      	ldr	r4, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 fe90 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a39e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fe95 	bl	800b0d4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ffd1 	bl	800a354 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bdb0      	pop	{r4, r5, r7, pc}

0800a3bc <_ZNSt6vectorIfSaIfEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	f107 030c 	add.w	r3, r7, #12
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fe8f 	bl	800b0f0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <_ZNSt6vectorIfSaIfEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	1d1a      	adds	r2, r3, #4
 800a3e8:	f107 030c 	add.w	r3, r7, #12
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fe7e 	bl	800b0f0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800a3fe:	b590      	push	{r4, r7, lr}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800a408:	f7f8 fe8a 	bl	8003120 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 800a40c:	4622      	mov	r2, r4
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 feb5 	bl	800b180 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800a416:	bf00      	nop
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd90      	pop	{r4, r7, pc}

0800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800a41e:	b480      	push	{r7}
 800a420:	b083      	sub	sp, #12
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	109b      	asrs	r3, r3, #2
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
      }
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3320      	adds	r3, #32
 800a480:	4618      	mov	r0, r3
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800a498:	461a      	mov	r2, r3
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	f000 fe9f 	bl	800b1e0 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE_ET_S4_S4_T0_>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEvEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 fe9c 	bl	800b206 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE0_ET_S4_S4_T0_>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	bf0c      	ite	eq
 800a4d6:	2301      	moveq	r3, #1
 800a4d8:	2300      	movne	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3710      	adds	r7, #16
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800a4ee:	687c      	ldr	r4, [r7, #4]
 800a4f0:	6838      	ldr	r0, [r7, #0]
 800a4f2:	f7ff ff94 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fea4 	bl	800b248 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a500:	4602      	mov	r2, r0
 800a502:	f107 030c 	add.w	r3, r7, #12
 800a506:	4611      	mov	r1, r2
 800a508:	4618      	mov	r0, r3
 800a50a:	f000 fe8f 	bl	800b22c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800a50e:	f107 030c 	add.w	r3, r7, #12
 800a512:	461a      	mov	r2, r3
 800a514:	4629      	mov	r1, r5
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fea1 	bl	800b25e <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800a51c:	f107 030c 	add.w	r3, r7, #12
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff ff0c 	bl	800a33e <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a526:	6838      	ldr	r0, [r7, #0]
 800a528:	f000 fead 	bl	800b286 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800a52c:	4605      	mov	r5, r0
 800a52e:	6838      	ldr	r0, [r7, #0]
 800a530:	f000 feb9 	bl	800b2a6 <_ZNKSt6vectorIfSaIfEE3endEv>
 800a534:	4606      	mov	r6, r0
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fdbe 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a542:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a544:	4622      	mov	r2, r4
 800a546:	4631      	mov	r1, r6
 800a548:	4628      	mov	r0, r5
 800a54a:	f000 febd 	bl	800b2c8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800a54e:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
      }
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4618      	mov	r0, r3
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a55e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800a55e:	b480      	push	{r7}
 800a560:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800a562:	2300      	movs	r3, #0
 800a564:	4618      	mov	r0, r3
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800a56e:	b480      	push	{r7}
 800a570:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800a572:	2301      	movs	r3, #1
 800a574:	4618      	mov	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <_ZSteqRKSaIfES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
      { return true; }
 800a588:	2301      	movs	r3, #1
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800a596:	b590      	push	{r4, r7, lr}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 ff0c 	bl	800b3c0 <_ZSt12__miter_baseIPfET_S1_>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	68b8      	ldr	r0, [r7, #8]
 800a5ac:	f000 ff08 	bl	800b3c0 <_ZSt12__miter_baseIPfET_S1_>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f000 ff0d 	bl	800b3d6 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 800a5bc:	4603      	mov	r3, r0
    }
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}

0800a5c6 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800a5c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	f000 80e9 	beq.w	800a7ac <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800a5da:	f7ff ffc0 	bl	800a55e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d046      	beq.n	800a672 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 800a5e4:	f7ff ffc3 	bl	800a56e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f083 0301 	eor.w	r3, r3, #1
 800a5ee:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d015      	beq.n	800a620 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fd61 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	4618      	mov	r0, r3
 800a602:	f000 fe21 	bl	800b248 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a606:	4603      	mov	r3, r0
 800a608:	4619      	mov	r1, r3
 800a60a:	4620      	mov	r0, r4
 800a60c:	f7ff ffb7 	bl	800a57e <_ZSteqRKSaIfES1_>
 800a610:	4603      	mov	r3, r0
 800a612:	f083 0301 	eor.w	r3, r3, #1
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800a620:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800a622:	2b00      	cmp	r3, #0
 800a624:	d017      	beq.n	800a656 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fe5f 	bl	800b2ea <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800a63e:	461a      	mov	r2, r3
 800a640:	f000 fd2a 	bl	800b098 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fd30 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a65e:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fdf0 	bl	800b248 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a668:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800a66a:	4619      	mov	r1, r3
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fe4a 	bl	800b306 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 800a672:	6838      	ldr	r0, [r7, #0]
 800a674:	f7ff fed3 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800a678:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fe4e 	bl	800b31c <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800a680:	4602      	mov	r2, r0
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4293      	cmp	r3, r2
 800a686:	bf8c      	ite	hi
 800a688:	2301      	movhi	r3, #1
 800a68a:	2300      	movls	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d032      	beq.n	800a6f8 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800a692:	6838      	ldr	r0, [r7, #0]
 800a694:	f000 fdf7 	bl	800b286 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800a698:	4604      	mov	r4, r0
 800a69a:	6838      	ldr	r0, [r7, #0]
 800a69c:	f000 fe03 	bl	800b2a6 <_ZNKSt6vectorIfSaIfEE3endEv>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	68f9      	ldr	r1, [r7, #12]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fe48 	bl	800b33c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800a6ac:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681c      	ldr	r4, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 fd00 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a6be:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 fd05 	bl	800b0d4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f000 fcdb 	bl	800b098 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	441a      	add	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	609a      	str	r2, [r3, #8]
 800a6f6:	e052      	b.n	800a79e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	    }
	  else if (size() >= __xlen)
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff fe90 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800a6fe:	4602      	mov	r2, r0
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4293      	cmp	r3, r2
 800a704:	bf94      	ite	ls
 800a706:	2301      	movls	r3, #1
 800a708:	2300      	movhi	r3, #0
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d020      	beq.n	800a752 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800a710:	6838      	ldr	r0, [r7, #0]
 800a712:	f000 fdb8 	bl	800b286 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800a716:	4604      	mov	r4, r0
 800a718:	6838      	ldr	r0, [r7, #0]
 800a71a:	f000 fdc4 	bl	800b2a6 <_ZNKSt6vectorIfSaIfEE3endEv>
 800a71e:	4605      	mov	r5, r0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff fe4b 	bl	800a3bc <_ZNSt6vectorIfSaIfEE5beginEv>
 800a726:	4603      	mov	r3, r0
 800a728:	461a      	mov	r2, r3
 800a72a:	4629      	mov	r1, r5
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 fe21 	bl	800b374 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800a732:	4604      	mov	r4, r0
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff fe51 	bl	800a3dc <_ZNSt6vectorIfSaIfEE3endEv>
 800a73a:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fcbd 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a744:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800a746:	461a      	mov	r2, r3
 800a748:	4629      	mov	r1, r5
 800a74a:	4620      	mov	r0, r4
 800a74c:	f000 fe2a 	bl	800b3a4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800a750:	e025      	b.n	800a79e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	681d      	ldr	r5, [r3, #0]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681c      	ldr	r4, [r3, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fe5f 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800a760:	4603      	mov	r3, r0
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	18e1      	adds	r1, r4, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	4628      	mov	r0, r5
 800a76e:	f7ff ff12 	bl	800a596 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681c      	ldr	r4, [r3, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff fe51 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800a77c:	4603      	mov	r3, r0
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 fc96 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800a792:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800a794:	4632      	mov	r2, r6
 800a796:	4629      	mov	r1, r5
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fe3f 	bl	800b41c <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	441a      	add	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	605a      	str	r2, [r3, #4]
	}
      return *this;
 800a7ac:	687b      	ldr	r3, [r7, #4]
    }
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7b6 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fe3d 	bl	800b43e <_ZNSaIN3jlb4EdgeEEC1Ev>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fe45 	bl	800b456 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	10db      	asrs	r3, r3, #3
 800a804:	4a07      	ldr	r2, [pc, #28]	; (800a824 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800a806:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800a80a:	461a      	mov	r2, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fe36 	bl	800b47e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4618      	mov	r0, r3
 800a816:	f7f9 fe2b 	bl	8004470 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	aaaaaaab 	.word	0xaaaaaaab

0800a828 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a828:	b5b0      	push	{r4, r5, r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681c      	ldr	r4, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fe32 	bl	800b4a4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800a840:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a842:	461a      	mov	r2, r3
 800a844:	4629      	mov	r1, r5
 800a846:	4620      	mov	r0, r4
 800a848:	f000 fe37 	bl	800b4ba <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff ffcc 	bl	800a7ec <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bdb0      	pop	{r4, r5, r7, pc}

0800a85e <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800a85e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800a868:	687c      	ldr	r4, [r7, #4]
 800a86a:	6838      	ldr	r0, [r7, #0]
 800a86c:	f000 f912 	bl	800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800a870:	4605      	mov	r5, r0
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 fe3c 	bl	800b4f2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800a87a:	4602      	mov	r2, r0
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f000 fe27 	bl	800b4d6 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800a888:	f107 030c 	add.w	r3, r7, #12
 800a88c:	461a      	mov	r2, r3
 800a88e:	4629      	mov	r1, r5
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fe39 	bl	800b508 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800a896:	f107 030c 	add.w	r3, r7, #12
 800a89a:	4618      	mov	r0, r3
 800a89c:	f014 fc7d 	bl	801f19a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a8a0:	6838      	ldr	r0, [r7, #0]
 800a8a2:	f000 fe45 	bl	800b530 <_ZNKSt6vectorIcSaIcEE5beginEv>
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	6838      	ldr	r0, [r7, #0]
 800a8aa:	f000 fe51 	bl	800b550 <_ZNKSt6vectorIcSaIcEE3endEv>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fe5b 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800a8bc:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800a8be:	4622      	mov	r2, r4
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	f000 fe60 	bl	800b588 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800a8c8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	605a      	str	r2, [r3, #4]
      }
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8d8 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800a8d8:	b5b0      	push	{r4, r5, r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681c      	ldr	r4, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fe41 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800a8f0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fe57 	bl	800b5aa <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 f893 	bl	800aa2a <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bdb0      	pop	{r4, r5, r7, pc}

0800a90e <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a918:	6838      	ldr	r0, [r7, #0]
 800a91a:	f000 fe54 	bl	800b5c6 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800a91e:	4603      	mov	r3, r0
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fe5a 	bl	800b5dc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fe82 	bl	800b642 <_ZNSaIN3jlb4NodeEEC1Ev>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4618      	mov	r0, r3
 800a942:	f000 fe8a 	bl	800b65a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800a95a:	6838      	ldr	r0, [r7, #0]
 800a95c:	f000 febd 	bl	800b6da <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 800a960:	4603      	mov	r3, r0
 800a962:	4619      	mov	r1, r3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fec3 	bl	800b6f0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 800a972:	b5b0      	push	{r4, r5, r7, lr}
 800a974:	b086      	sub	sp, #24
 800a976:	af00      	add	r7, sp, #0
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	1d38      	adds	r0, r7, #4
 800a97c:	e880 0006 	stmia.w	r0, {r1, r2}
 800a980:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	4618      	mov	r0, r3
 800a988:	f000 fee5 	bl	800b756 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800a98c:	1d3b      	adds	r3, r7, #4
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fef0 	bl	800b774 <_ZNKSt16initializer_listIcE5beginEv>
 800a994:	4604      	mov	r4, r0
 800a996:	1d3b      	adds	r3, r7, #4
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fef7 	bl	800b78c <_ZNKSt16initializer_listIcE3endEv>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 ff16 	bl	800b7d6 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a9b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6819      	ldr	r1, [r3, #0]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	4413      	add	r3, r2
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	440b      	add	r3, r1
      }
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800a9da:	b590      	push	{r4, r7, lr}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	60b9      	str	r1, [r7, #8]
 800a9e4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 ff2d 	bl	800b846 <_ZSt12__miter_baseIPKcET_S2_>
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	68b8      	ldr	r0, [r7, #8]
 800a9f0:	f000 ff29 	bl	800b846 <_ZSt12__miter_baseIPKcET_S2_>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 ff2e 	bl	800b85c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800aa00:	4603      	mov	r3, r0
    }
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd90      	pop	{r4, r7, pc}

0800aa0a <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f014 fbbf 	bl	801f196 <_ZNSaIcEC1Ev>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 ff4b 	bl	800b8b6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4618      	mov	r0, r3
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689a      	ldr	r2, [r3, #8]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800aa40:	461a      	mov	r2, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 ff4b 	bl	800b8de <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fc ffec 	bl	8007a28 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZNSt6vectorIcSaIcEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 ff4b 	bl	800b904 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 ff5d 	bl	800b944 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685a      	ldr	r2, [r3, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b084      	sub	sp, #16
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	1d1a      	adds	r2, r3, #4
 800aabe:	f107 030c 	add.w	r3, r7, #12
 800aac2:	4611      	mov	r1, r2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 ff49 	bl	800b95c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800aade:	6838      	ldr	r0, [r7, #0]
 800aae0:	f7ff f80c 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800aae4:	4603      	mov	r3, r0
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	601a      	str	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 800aaf6:	b590      	push	{r4, r7, lr}
 800aaf8:	b08b      	sub	sp, #44	; 0x2c
 800aafa:	af02      	add	r7, sp, #8
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 ff39 	bl	800b97c <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	613b      	str	r3, [r7, #16]
 800ab0e:	f107 0210 	add.w	r2, r7, #16
 800ab12:	f107 0308 	add.w	r3, r7, #8
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f000 ff3f 	bl	800b99c <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800ab1e:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f84a 	bl	800abba <_ZNSt6vectorIcSaIcEE5beginEv>
 800ab26:	4603      	mov	r3, r0
 800ab28:	617b      	str	r3, [r7, #20]
 800ab2a:	f107 0314 	add.w	r3, r7, #20
 800ab2e:	69f9      	ldr	r1, [r7, #28]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f000 ff47 	bl	800b9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800ab36:	4601      	mov	r1, r0
 800ab38:	f88d 4000 	strb.w	r4, [sp]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 ff56 	bl	800b9f2 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 f837 	bl	800abba <_ZNSt6vectorIcSaIcEE5beginEv>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	61bb      	str	r3, [r7, #24]
 800ab50:	f107 0318 	add.w	r3, r7, #24
 800ab54:	69f9      	ldr	r1, [r7, #28]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 ff34 	bl	800b9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800ab5c:	4603      	mov	r3, r0
	}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3724      	adds	r7, #36	; 0x24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd90      	pop	{r4, r7, pc}
	...

0800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	10db      	asrs	r3, r3, #3
 800ab7c:	4a04      	ldr	r2, [pc, #16]	; (800ab90 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 800ab7e:	fb02 f303 	mul.w	r3, r2, r3
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	aaaaaaab 	.word	0xaaaaaaab

0800ab94 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6819      	ldr	r1, [r3, #0]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	4613      	mov	r3, r2
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	4413      	add	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	440b      	add	r3, r1
      }
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	f107 030c 	add.w	r3, r7, #12
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 fec6 	bl	800b95c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	60b9      	str	r1, [r7, #8]
 800abe4:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 ff1b 	bl	800ba22 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 ff24 	bl	800ba40 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 800abf8:	4603      	mov	r3, r0
    }
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ac02:	b590      	push	{r4, r7, lr}
 800ac04:	b083      	sub	sp, #12
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7fe ff75 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ac12:	4603      	mov	r3, r0
 800ac14:	681c      	ldr	r4, [r3, #0]
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f7fe ff70 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429c      	cmp	r4, r3
 800ac22:	bf0c      	ite	eq
 800ac24:	2301      	moveq	r3, #1
 800ac26:	2300      	movne	r3, #0
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	370c      	adds	r7, #12
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd90      	pop	{r4, r7, pc}

0800ac32 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d00c      	beq.n	800ac62 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	4619      	mov	r1, r3
 800ac52:	f000 f8c1 	bl	800add8 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	1d1a      	adds	r2, r3, #4
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	605a      	str	r2, [r3, #4]
      }
 800ac60:	e008      	b.n	800ac74 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff fbba 	bl	800a3dc <_ZNSt6vectorIfSaIfEE3endEv>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fefc 	bl	800ba6c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f9e7 	bl	800b058 <_ZNSaIfEC1Ev>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 ff69 	bl	800bb64 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800ac9c:	b590      	push	{r4, r7, lr}
 800ac9e:	b089      	sub	sp, #36	; 0x24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800aca6:	2004      	movs	r0, #4
 800aca8:	f7f8 fa5c 	bl	8003164 <_ZSt16__deque_buf_sizej>
 800acac:	4602      	mov	r2, r0
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb4:	3301      	adds	r3, #1
 800acb6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800acb8:	2308      	movs	r3, #8
 800acba:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	3302      	adds	r3, #2
 800acc0:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800acc2:	f107 0210 	add.w	r2, r7, #16
 800acc6:	f107 030c 	add.w	r3, r7, #12
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f000 ff62 	bl	800bb96 <_ZSt3maxIjERKT_S2_S2_>
 800acd2:	4603      	mov	r3, r0
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 ff6c 	bl	800bbbe <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800ace6:	4602      	mov	r2, r0
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6859      	ldr	r1, [r3, #4]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	1acb      	subs	r3, r1, r3
 800acf8:	085b      	lsrs	r3, r3, #1
 800acfa:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800acfc:	4413      	add	r3, r2
 800acfe:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	69ba      	ldr	r2, [r7, #24]
 800ad06:	4413      	add	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800ad0a:	697a      	ldr	r2, [r7, #20]
 800ad0c:	69b9      	ldr	r1, [r7, #24]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 ff72 	bl	800bbf8 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3308      	adds	r3, #8
 800ad18:	69b9      	ldr	r1, [r7, #24]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 ff87 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f103 0218 	add.w	r2, r3, #24
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	3b04      	subs	r3, #4
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	f000 ff7e 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68da      	ldr	r2, [r3, #12]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800ad3e:	2004      	movs	r0, #4
 800ad40:	f7f8 fa10 	bl	8003164 <_ZSt16__deque_buf_sizej>
 800ad44:	4602      	mov	r2, r0
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad4c:	fb01 f202 	mul.w	r2, r1, r2
 800ad50:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	619a      	str	r2, [r3, #24]
    }
 800ad5a:	bf00      	nop
 800ad5c:	3724      	adds	r7, #36	; 0x24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd90      	pop	{r4, r7, pc}

0800ad62 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800ad6e:	f107 0314 	add.w	r3, r7, #20
 800ad72:	68f9      	ldr	r1, [r7, #12]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 ff86 	bl	800bc86 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800ad7a:	f107 0314 	add.w	r3, r7, #20
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	68b9      	ldr	r1, [r7, #8]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 ff9b 	bl	800bcbe <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800ad88:	f107 0314 	add.w	r3, r7, #20
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 ff8b 	bl	800bca8 <_ZNSaIPfED1Ev>
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4618      	mov	r0, r3
 800ada4:	370c      	adds	r7, #12
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 800adae:	b590      	push	{r4, r7, lr}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800adb8:	6838      	ldr	r0, [r7, #0]
 800adba:	f000 ff9f 	bl	800bcfc <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800adbe:	4603      	mov	r3, r0
 800adc0:	681c      	ldr	r4, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4619      	mov	r1, r3
 800adc6:	2004      	movs	r0, #4
 800adc8:	f7f8 f99e 	bl	8003108 <_ZnwjPv>
 800adcc:	4603      	mov	r3, r0
 800adce:	601c      	str	r4, [r3, #0]
 800add0:	4618      	mov	r0, r3
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	bd90      	pop	{r4, r7, pc}

0800add8 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 ff89 	bl	800bcfc <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800adea:	4603      	mov	r3, r0
 800adec:	4619      	mov	r1, r3
 800adee:	68b8      	ldr	r0, [r7, #8]
 800adf0:	f7ff ffdd 	bl	800adae <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800adf4:	bf00      	nop
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800adfc:	b5b0      	push	{r4, r5, r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff f9dc 	bl	800a1c4 <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 ff7f 	bl	800bd12 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800ae14:	4603      	mov	r3, r0
 800ae16:	429c      	cmp	r4, r3
 800ae18:	bf0c      	ite	eq
 800ae1a:	2301      	moveq	r3, #1
 800ae1c:	2300      	movne	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800ae24:	4816      	ldr	r0, [pc, #88]	; (800ae80 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800ae26:	f014 f9bf 	bl	801f1a8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 ff81 	bl	800bd34 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	1d1c      	adds	r4, r3, #4
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f000 ff95 	bl	800bd6a <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800ae40:	4603      	mov	r3, r0
 800ae42:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800ae44:	687c      	ldr	r4, [r7, #4]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699d      	ldr	r5, [r3, #24]
 800ae4a:	6838      	ldr	r0, [r7, #0]
 800ae4c:	f000 ff56 	bl	800bcfc <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800ae50:	4603      	mov	r3, r0
 800ae52:	461a      	mov	r2, r3
 800ae54:	4629      	mov	r1, r5
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7ff ffbe 	bl	800add8 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f103 0218 	add.w	r2, r3, #24
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	3304      	adds	r3, #4
 800ae68:	4619      	mov	r1, r3
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	f000 fedf 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	69da      	ldr	r2, [r3, #28]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800ae78:	bf00      	nop
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bdb0      	pop	{r4, r5, r7, pc}
 800ae80:	08023040 	.word	0x08023040

0800ae84 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800ae8e:	f000 ff7e 	bl	800bd8e <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800ae92:	4603      	mov	r3, r0
 800ae94:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68da      	ldr	r2, [r3, #12]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	109b      	asrs	r3, r3, #2
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bf14      	ite	ne
 800aeac:	2301      	movne	r3, #1
 800aeae:	2300      	moveq	r3, #0
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	6811      	ldr	r1, [r2, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	6852      	ldr	r2, [r2, #4]
 800aec0:	1a8a      	subs	r2, r1, r2
 800aec2:	1092      	asrs	r2, r2, #2
 800aec4:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	6891      	ldr	r1, [r2, #8]
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	6812      	ldr	r2, [r2, #0]
 800aece:	1a8a      	subs	r2, r1, r2
 800aed0:	1092      	asrs	r2, r2, #2
 800aed2:	4413      	add	r3, r2
      }
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
#else
	  std::destroy_at(__p);
 800aee6:	6838      	ldr	r0, [r7, #0]
 800aee8:	f000 ff59 	bl	800bd9e <_ZSt10destroy_atIfEvPT_>
#endif
	}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff ff4a 	bl	800ad98 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800af04:	4602      	mov	r2, r0
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f7ff ffe5 	bl	800aedc <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f000 fea0 	bl	800bc60 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f103 0208 	add.w	r2, r3, #8
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4619      	mov	r1, r3
 800af2e:	4610      	mov	r0, r2
 800af30:	f000 fe7d 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	609a      	str	r2, [r3, #8]
    }
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	609a      	str	r2, [r3, #8]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68da      	ldr	r2, [r3, #12]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4618      	mov	r0, r3
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	bf0c      	ite	eq
 800af92:	2301      	moveq	r3, #1
 800af94:	2300      	movne	r3, #0
 800af96:	b2db      	uxtb	r3, r3
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	1d1a      	adds	r2, r3, #4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d10a      	bne.n	800afd8 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	3304      	adds	r3, #4
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fe2f 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	601a      	str	r2, [r3, #0]
	return *this;
 800afd8:	687b      	ldr	r3, [r7, #4]
      }
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800afe2:	b480      	push	{r7}
 800afe4:	b083      	sub	sp, #12
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800b012:	b590      	push	{r4, r7, lr}
 800b014:	b083      	sub	sp, #12
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff ffed 	bl	800affa <_ZNKSt16initializer_listIfE5beginEv>
 800b020:	4604      	mov	r4, r0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fec5 	bl	800bdb2 <_ZNKSt16initializer_listIfE4sizeEv>
 800b028:	4603      	mov	r3, r0
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4423      	add	r3, r4
 800b02e:	4618      	mov	r0, r3
 800b030:	370c      	adds	r7, #12
 800b032:	46bd      	mov	sp, r7
 800b034:	bd90      	pop	{r4, r7, pc}

0800b036 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800b036:	b590      	push	{r4, r7, lr}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800b040:	f7f8 f86e 	bl	8003120 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800b044:	4622      	mov	r2, r4
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fed8 	bl	800bdfe <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800b04e:	4603      	mov	r3, r0
    }
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	bd90      	pop	{r4, r7, pc}

0800b058 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fef7 	bl	800be54 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	605a      	str	r2, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	609a      	str	r2, [r3, #8]
	{ }
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4618      	mov	r0, r3
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
	if (__p)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d005      	beq.n	800b0b6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 feda 	bl	800be6a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800b0b6:	bf00      	nop
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b0be:	b480      	push	{r7}
 800b0c0:	b083      	sub	sp, #12
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 fee0 	bl	800bea8 <_ZSt8_DestroyIPfEvT_S1_>
    }
 800b0e8:	bf00      	nop
 800b0ea:	3710      	adds	r7, #16
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b126:	b590      	push	{r4, r7, lr}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff ffed 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800b136:	4603      	mov	r3, r0
 800b138:	681c      	ldr	r4, [r3, #0]
 800b13a:	6838      	ldr	r0, [r7, #0]
 800b13c:	f7ff ffe8 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800b140:	4603      	mov	r3, r0
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	429c      	cmp	r4, r3
 800b146:	bf0c      	ite	eq
 800b148:	2301      	moveq	r3, #1
 800b14a:	2300      	movne	r3, #0
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	bd90      	pop	{r4, r7, pc}

0800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b156:	b590      	push	{r4, r7, lr}
 800b158:	b083      	sub	sp, #12
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ffd5 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800b166:	4603      	mov	r3, r0
 800b168:	681c      	ldr	r4, [r3, #0]
 800b16a:	6838      	ldr	r0, [r7, #0]
 800b16c:	f7ff ffd0 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800b170:	4603      	mov	r3, r0
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	1ae3      	subs	r3, r4, r3
 800b176:	109b      	asrs	r3, r3, #2
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd90      	pop	{r4, r7, pc}

0800b180 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800b180:	b5b0      	push	{r4, r5, r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800b18c:	f107 0208 	add.w	r2, r7, #8
 800b190:	f107 030c 	add.w	r3, r7, #12
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7ff ffc5 	bl	800b126 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f083 0301 	eor.w	r3, r3, #1
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d017      	beq.n	800b1d8 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 800b1a8:	f107 020c 	add.w	r2, r7, #12
 800b1ac:	f107 0308 	add.w	r3, r7, #8
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff ffcf 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7f7 ffc3 	bl	8003146 <_ZSt4__lgi>
 800b1c0:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800b1c2:	005a      	lsls	r2, r3, #1
 800b1c4:	462b      	mov	r3, r5
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fe83 	bl	800bed4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 feb5 	bl	800bf42 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bdb0      	pop	{r4, r5, r7, pc}

0800b1e0 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800b1e0:	b590      	push	{r4, r7, lr}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fee0 	bl	800bfb2 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_10_Iter_predIT_EES6_>
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	68b9      	ldr	r1, [r7, #8]
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f000 feee 	bl	800bfd8 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_>
 800b1fc:	4603      	mov	r3, r0
    }
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	bd90      	pop	{r4, r7, pc}

0800b206 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEvEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800b206:	b590      	push	{r4, r7, lr}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fefa 	bl	800c00c <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800b218:	4622      	mov	r2, r4
 800b21a:	68b9      	ldr	r1, [r7, #8]
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 ff08 	bl	800c032 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_>
 800b222:	4603      	mov	r3, r0
    }
 800b224:	4618      	mov	r0, r3
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd90      	pop	{r4, r7, pc}

0800b22c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 ff13 	bl	800c066 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4618      	mov	r0, r3
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b25e:	b580      	push	{r7, lr}
 800b260:	b084      	sub	sp, #16
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 ff06 	bl	800c080 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800b274:	68b9      	ldr	r1, [r7, #8]
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f000 ff14 	bl	800c0a4 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800b286:	b580      	push	{r7, lr}
 800b288:	b084      	sub	sp, #16
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	f107 030c 	add.w	r3, r7, #12
 800b294:	4611      	mov	r1, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f000 ff1f 	bl	800c0da <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b084      	sub	sp, #16
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	1d1a      	adds	r2, r3, #4
 800b2b2:	f107 030c 	add.w	r3, r7, #12
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f000 ff0e 	bl	800c0da <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68b9      	ldr	r1, [r7, #8]
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 ff0d 	bl	800c0fa <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <_ZNSt6vectorIfSaIfEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 ff10 	bl	800c11e <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 800b2fe:	bf00      	nop
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	6039      	str	r1, [r7, #0]
    }
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	109b      	asrs	r3, r3, #2
 800b330:	4618      	mov	r0, r3
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 ff06 	bl	800c160 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800b354:	6178      	str	r0, [r7, #20]
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff feb0 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b35e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7ff ffaf 	bl	800b2c8 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800b36a:	697b      	ldr	r3, [r7, #20]
	  __catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
	    }
	}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800b374:	b590      	push	{r4, r7, lr}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 ff01 	bl	800c188 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800b386:	4604      	mov	r4, r0
 800b388:	68b8      	ldr	r0, [r7, #8]
 800b38a:	f000 fefd 	bl	800c188 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800b38e:	4603      	mov	r3, r0
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	4619      	mov	r1, r3
 800b394:	4620      	mov	r0, r4
 800b396:	f000 ff02 	bl	800c19e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800b39a:	4603      	mov	r3, r0
    }
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd90      	pop	{r4, r7, pc}

0800b3a4 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 ff14 	bl	800c1e0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <_ZSt12__miter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800b3d6:	b5b0      	push	{r4, r5, r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	60b9      	str	r1, [r7, #8]
 800b3e0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 ff12 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	68b8      	ldr	r0, [r7, #8]
 800b3ec:	f000 ff0e 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 ff09 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4629      	mov	r1, r5
 800b400:	4620      	mov	r0, r4
 800b402:	f000 ff0e 	bl	800c222 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800b406:	4602      	mov	r2, r0
 800b408:	1d3b      	adds	r3, r7, #4
 800b40a:	4611      	mov	r1, r2
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 ff18 	bl	800c242 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800b412:	4603      	mov	r3, r0
    }
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bdb0      	pop	{r4, r5, r7, pc}

0800b41c <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	68b9      	ldr	r1, [r7, #8]
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 ff13 	bl	800c25a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800b434:	4603      	mov	r3, r0
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <_ZNSaIN3jlb4EdgeEEC1Ev>:
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 ff19 	bl	800c27e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	605a      	str	r2, [r3, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	609a      	str	r2, [r3, #8]
	{ }
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4618      	mov	r0, r3
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	607a      	str	r2, [r7, #4]
	if (__p)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fefc 	bl	800c294 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800b49c:	bf00      	nop
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	60f8      	str	r0, [r7, #12]
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 ff02 	bl	800c2d2 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800b4ce:	bf00      	nop
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 ff0a 	bl	800c2fe <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fefd 	bl	800c318 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 ff0b 	bl	800c33c <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	f107 030c 	add.w	r3, r7, #12
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f000 ff15 	bl	800c370 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	4618      	mov	r0, r3
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	1d1a      	adds	r2, r3, #4
 800b55c:	f107 030c 	add.w	r3, r7, #12
 800b560:	4611      	mov	r1, r2
 800b562:	4618      	mov	r0, r3
 800b564:	f000 ff04 	bl	800c370 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b572:	b480      	push	{r7}
 800b574:	b083      	sub	sp, #12
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
 800b594:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 fef8 	bl	800c390 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b5b6:	68b9      	ldr	r1, [r7, #8]
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 fefb 	bl	800c3b4 <_ZSt8_DestroyIPcEvT_S1_>
    }
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b5c6:	b480      	push	{r7}
 800b5c8:	b083      	sub	sp, #12
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800b5dc:	b5b0      	push	{r4, r5, r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d012      	beq.n	800b618 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b5f2:	687c      	ldr	r4, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685d      	ldr	r5, [r3, #4]
 800b5f8:	6838      	ldr	r0, [r7, #0]
 800b5fa:	f000 fef1 	bl	800c3e0 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b5fe:	4603      	mov	r3, r0
 800b600:	461a      	mov	r2, r3
 800b602:	4629      	mov	r1, r5
 800b604:	4620      	mov	r0, r4
 800b606:	f000 ff4d 	bl	800c4a4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	f103 0218 	add.w	r2, r3, #24
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	605a      	str	r2, [r3, #4]
 800b616:	e00c      	b.n	800b632 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 ff55 	bl	800c4c8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800b61e:	4604      	mov	r4, r0
 800b620:	6838      	ldr	r0, [r7, #0]
 800b622:	f000 fedd 	bl	800c3e0 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b626:	4603      	mov	r3, r0
 800b628:	461a      	mov	r2, r3
 800b62a:	4621      	mov	r1, r4
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 ff5d 	bl	800c4ec <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 ffe4 	bl	800c600 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800b638:	4603      	mov	r3, r0
      }
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bdb0      	pop	{r4, r5, r7, pc}

0800b642 <_ZNSaIN3jlb4NodeEEC1Ev>:
 800b642:	b580      	push	{r7, lr}
 800b644:	b082      	sub	sp, #8
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fff3 	bl	800c636 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	609a      	str	r2, [r3, #8]
	{ }
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4618      	mov	r0, r3
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
	if (__p)
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d005      	beq.n	800b6a0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	68b9      	ldr	r1, [r7, #8]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f000 ffd6 	bl	800c64c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800b6a0:	bf00      	nop
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	60f8      	str	r0, [r7, #12]
 800b6c6:	60b9      	str	r1, [r7, #8]
 800b6c8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 ffdc 	bl	800c68a <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800b6da:	b480      	push	{r7}
 800b6dc:	b083      	sub	sp, #12
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800b6f0:	b5b0      	push	{r4, r5, r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	429a      	cmp	r2, r3
 800b704:	d012      	beq.n	800b72c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800b706:	687c      	ldr	r4, [r7, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685d      	ldr	r5, [r3, #4]
 800b70c:	6838      	ldr	r0, [r7, #0]
 800b70e:	f000 ffd2 	bl	800c6b6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	4629      	mov	r1, r5
 800b718:	4620      	mov	r0, r4
 800b71a:	f001 f80e 	bl	800c73a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f103 0218 	add.w	r2, r3, #24
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	605a      	str	r2, [r3, #4]
 800b72a:	e00c      	b.n	800b746 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 f816 	bl	800c75e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800b732:	4604      	mov	r4, r0
 800b734:	6838      	ldr	r0, [r7, #0]
 800b736:	f000 ffbe 	bl	800c6b6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800b73a:	4603      	mov	r3, r0
 800b73c:	461a      	mov	r2, r3
 800b73e:	4621      	mov	r1, r4
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 f81d 	bl	800c780 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f001 f8ae 	bl	800c8a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800b74c:	4603      	mov	r3, r0
      }
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bdb0      	pop	{r4, r5, r7, pc}

0800b756 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6839      	ldr	r1, [r7, #0]
 800b764:	4618      	mov	r0, r3
 800b766:	f000 fdd7 	bl	800c318 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <_ZNKSt16initializer_listIcE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <_ZNKSt16initializer_listIcE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b78c:	b590      	push	{r4, r7, lr}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff ffed 	bl	800b774 <_ZNKSt16initializer_listIcE5beginEv>
 800b79a:	4604      	mov	r4, r0
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f001 f89e 	bl	800c8de <_ZNKSt16initializer_listIcE4sizeEv>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	4423      	add	r3, r4
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd90      	pop	{r4, r7, pc}

0800b7ae <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800b7ae:	b5b0      	push	{r4, r5, r7, lr}
 800b7b0:	b082      	sub	sp, #8
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800b7b8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800b7ba:	1d3b      	adds	r3, r7, #4
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 f89a 	bl	800c8f6 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f001 f89f 	bl	800c90a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800b7cc:	4603      	mov	r3, r0
    }
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bdb0      	pop	{r4, r5, r7, pc}

0800b7d6 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800b7d6:	b590      	push	{r4, r7, lr}
 800b7d8:	b087      	sub	sp, #28
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	60b9      	str	r1, [r7, #8]
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	68b8      	ldr	r0, [r7, #8]
 800b7e8:	f7ff ffe1 	bl	800b7ae <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800b7f0:	68fc      	ldr	r4, [r7, #12]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff febc 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6978      	ldr	r0, [r7, #20]
 800b800:	f001 f892 	bl	800c928 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800b804:	4603      	mov	r3, r0
 800b806:	4619      	mov	r1, r3
 800b808:	4620      	mov	r0, r4
 800b80a:	f001 f8b5 	bl	800c978 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800b80e:	4602      	mov	r2, r0
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	441a      	add	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff fea3 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800b82c:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800b82e:	4622      	mov	r2, r4
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	68b8      	ldr	r0, [r7, #8]
 800b834:	f001 f8b4 	bl	800c9a0 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800b838:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	605a      	str	r2, [r3, #4]
	}
 800b83e:	bf00      	nop
 800b840:	371c      	adds	r7, #28
 800b842:	46bd      	mov	sp, r7
 800b844:	bd90      	pop	{r4, r7, pc}

0800b846 <_ZSt12__miter_baseIPKcET_S2_>:
    __miter_base(_Iterator __it)
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800b85c:	b5b0      	push	{r4, r5, r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f001 f8aa 	bl	800c9c2 <_ZSt12__niter_baseIPKcET_S2_>
 800b86e:	4604      	mov	r4, r0
 800b870:	68b8      	ldr	r0, [r7, #8]
 800b872:	f001 f8a6 	bl	800c9c2 <_ZSt12__niter_baseIPKcET_S2_>
 800b876:	4605      	mov	r5, r0
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f001 f8ac 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	4629      	mov	r1, r5
 800b886:	4620      	mov	r0, r4
 800b888:	f001 f8b1 	bl	800c9ee <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800b88c:	4602      	mov	r2, r0
 800b88e:	1d3b      	adds	r3, r7, #4
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f001 f8bb 	bl	800ca0e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800b898:	4603      	mov	r3, r0
    }
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bdb0      	pop	{r4, r5, r7, pc}

0800b8a2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b8b6:	b480      	push	{r7}
 800b8b8:	b083      	sub	sp, #12
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	605a      	str	r2, [r3, #4]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	609a      	str	r2, [r3, #8]
	{ }
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	370c      	adds	r7, #12
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	60b9      	str	r1, [r7, #8]
 800b8e8:	607a      	str	r2, [r7, #4]
	if (__p)
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d005      	beq.n	800b8fc <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	68b9      	ldr	r1, [r7, #8]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 f895 	bl	800ca26 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800b8fc:	bf00      	nop
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800b904:	b590      	push	{r4, r7, lr}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00e      	beq.n	800b93c <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fe24 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800b92a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800b92c:	461a      	mov	r2, r3
 800b92e:	4621      	mov	r1, r4
 800b930:	6838      	ldr	r0, [r7, #0]
 800b932:	f7ff fe3a 	bl	800b5aa <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800b93c:	bf00      	nop
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}

0800b944 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	f107 030c 	add.w	r3, r7, #12
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fcef 	bl	800c370 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f001 f85c 	bl	800ca64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	681c      	ldr	r4, [r3, #0]
 800b9b0:	6838      	ldr	r0, [r7, #0]
 800b9b2:	f001 f857 	bl	800ca64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	1ae3      	subs	r3, r4, r3
 800b9bc:	4618      	mov	r0, r3
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd90      	pop	{r4, r7, pc}

0800b9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	f107 020c 	add.w	r2, r7, #12
 800b9dc:	f107 0308 	add.w	r3, r7, #8
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff ffba 	bl	800b95c <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 800b9f2:	b5b0      	push	{r4, r5, r7, lr}
 800b9f4:	b088      	sub	sp, #32
 800b9f6:	af02      	add	r7, sp, #8
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 800ba00:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 800ba02:	1d3b      	adds	r3, r7, #4
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff ff4c 	bl	800b8a2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 800ba0a:	f88d 5000 	strb.w	r5, [sp]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	4622      	mov	r2, r4
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f001 f875 	bl	800cb04 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 800ba1a:	bf00      	nop
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bdb0      	pop	{r4, r5, r7, pc}

0800ba22 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800ba2a:	f107 030c 	add.w	r3, r7, #12
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 f96f 	bl	800cd14 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800ba40:	b590      	push	{r4, r7, lr}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800ba4c:	f107 030c 	add.w	r3, r7, #12
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 f96e 	bl	800cd32 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800ba56:	4623      	mov	r3, r4
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	68b9      	ldr	r1, [r7, #8]
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f001 f9b9 	bl	800cdd4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800ba62:	4603      	mov	r3, r0
    }
 800ba64:	4618      	mov	r0, r3
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd90      	pop	{r4, r7, pc}

0800ba6c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800ba6c:	b5b0      	push	{r4, r5, r7, lr}
 800ba6e:	b08c      	sub	sp, #48	; 0x30
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800ba78:	4a39      	ldr	r2, [pc, #228]	; (800bb60 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f001 fa42 	bl	800cf06 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 800ba82:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7fe fc93 	bl	800a3bc <_ZNSt6vectorIfSaIfEE5beginEv>
 800ba96:	4603      	mov	r3, r0
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	f107 0214 	add.w	r2, r7, #20
 800ba9e:	f107 0308 	add.w	r3, r7, #8
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff fb56 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800baaa:	4603      	mov	r3, r0
 800baac:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 fb54 	bl	800c160 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800bab8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800babe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800bac4:	69fa      	ldr	r2, [r7, #28]
 800bac6:	18d5      	adds	r5, r2, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f917 	bl	800bcfc <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800bace:	4603      	mov	r3, r0
 800bad0:	461a      	mov	r2, r3
 800bad2:	4629      	mov	r1, r5
 800bad4:	4620      	mov	r0, r4
 800bad6:	f7ff f97f 	bl	800add8 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800bada:	2300      	movs	r3, #0
 800badc:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800bade:	f107 0308 	add.w	r3, r7, #8
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff fb14 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800bae8:	4603      	mov	r3, r0
 800baea:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fae5 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800baf4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800baf6:	69fa      	ldr	r2, [r7, #28]
 800baf8:	4621      	mov	r1, r4
 800bafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bafc:	f001 fa4a 	bl	800cf94 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800bb00:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	3304      	adds	r3, #4
 800bb06:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bb08:	f107 0308 	add.w	r3, r7, #8
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff faff 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800bb12:	4603      	mov	r3, r0
 800bb14:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff fad0 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bb1e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb24:	4620      	mov	r0, r4
 800bb26:	f001 fa35 	bl	800cf94 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800bb2a:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800bb2c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	689a      	ldr	r2, [r3, #8]
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800bb38:	461a      	mov	r2, r3
 800bb3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb3c:	f7ff faac 	bl	800b098 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	69fa      	ldr	r2, [r7, #28]
 800bb44:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	69fa      	ldr	r2, [r7, #28]
 800bb52:	441a      	add	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	609a      	str	r2, [r3, #8]
    }
 800bb58:	bf00      	nop
 800bb5a:	3730      	adds	r7, #48	; 0x30
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bdb0      	pop	{r4, r5, r7, pc}
 800bb60:	08023070 	.word	0x08023070

0800bb64 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	605a      	str	r2, [r3, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 fa1d 	bl	800cfbc <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3318      	adds	r3, #24
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 fa18 	bl	800cfbc <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d201      	bcs.n	800bbb0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	e000      	b.n	800bbb2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800bbb0:	687b      	ldr	r3, [r7, #4]
    }
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800bbbe:	b590      	push	{r4, r7, lr}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800bbc8:	f107 030c 	add.w	r3, r7, #12
 800bbcc:	6879      	ldr	r1, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f859 	bl	800bc86 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800bbd4:	f107 030c 	add.w	r3, r7, #12
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f001 fa05 	bl	800cfea <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	bf00      	nop
      }
 800bbe4:	f107 030c 	add.w	r3, r7, #12
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 f85d 	bl	800bca8 <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800bbee:	4623      	mov	r3, r4
      }
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd90      	pop	{r4, r7, pc}

0800bbf8 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e008      	b.n	800bc1c <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 f8ad 	bl	800bd6a <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800bc10:	4602      	mov	r2, r0
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	3304      	adds	r3, #4
 800bc1a:	617b      	str	r3, [r7, #20]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d3f2      	bcc.n	800bc0a <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 800bc24:	bf00      	nop
 800bc26:	bf00      	nop
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800bc2e:	b590      	push	{r4, r7, lr}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685c      	ldr	r4, [r3, #4]
 800bc4a:	f000 f8a0 	bl	800bd8e <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	18e2      	adds	r2, r4, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	609a      	str	r2, [r3, #8]
      }
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd90      	pop	{r4, r7, pc}

0800bc60 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800bc60:	b590      	push	{r4, r7, lr}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800bc6a:	687c      	ldr	r4, [r7, #4]
 800bc6c:	2004      	movs	r0, #4
 800bc6e:	f7f7 fa79 	bl	8003164 <_ZSt16__deque_buf_sizej>
 800bc72:	4603      	mov	r3, r0
 800bc74:	461a      	mov	r2, r3
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f000 f8f6 	bl	800be6a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800bc7e:	bf00      	nop
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd90      	pop	{r4, r7, pc}

0800bc86 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800bc90:	6838      	ldr	r0, [r7, #0]
 800bc92:	f001 f9ca 	bl	800d02a <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bc96:	4603      	mov	r3, r0
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f001 f9d0 	bl	800d040 <_ZNSaIPfEC1IfEERKSaIT_E>
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b088      	sub	sp, #32
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	61bb      	str	r3, [r7, #24]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bcd6:	f7f7 f9f3 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 800bce0:	69b8      	ldr	r0, [r7, #24]
 800bce2:	f013 fa43 	bl	801f16c <_ZdlPv>
	    return;
 800bce6:	e005      	b.n	800bcf4 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800bce8:	697a      	ldr	r2, [r7, #20]
 800bcea:	69b9      	ldr	r1, [r7, #24]
 800bcec:	69f8      	ldr	r0, [r7, #28]
 800bcee:	f002 faad 	bl	800e24c <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	3720      	adds	r7, #32
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f001 f984 	bl	800d02a <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bd22:	4603      	mov	r3, r0
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 f9a4 	bl	800d072 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	6809      	ldr	r1, [r1, #0]
 800bd4e:	1a41      	subs	r1, r0, r1
 800bd50:	1089      	asrs	r1, r1, #2
 800bd52:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d904      	bls.n	800bd62 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800bd58:	2200      	movs	r2, #0
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f001 f9d2 	bl	800d106 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800bd6a:	b590      	push	{r4, r7, lr}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800bd72:	687c      	ldr	r4, [r7, #4]
 800bd74:	2004      	movs	r0, #4
 800bd76:	f7f7 f9f5 	bl	8003164 <_ZSt16__deque_buf_sizej>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f001 fa5b 	bl	800d23a <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800bd84:	4603      	mov	r3, r0
      }
 800bd86:	4618      	mov	r0, r3
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd90      	pop	{r4, r7, pc}

0800bd8e <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800bd92:	2004      	movs	r0, #4
 800bd94:	f7f7 f9e6 	bl	8003164 <_ZSt16__deque_buf_sizej>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
    }
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 800bdb2:	b480      	push	{r7}
 800bdb4:	b083      	sub	sp, #12
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	370c      	adds	r7, #12
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr

0800bdca <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800bdca:	b480      	push	{r7}
 800bdcc:	b085      	sub	sp, #20
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	60f8      	str	r0, [r7, #12]
 800bdd2:	60b9      	str	r1, [r7, #8]
 800bdd4:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	ed93 7a00 	vldr	s14, [r3]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	edd3 7a00 	vldr	s15, [r3]
 800bde2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdea:	bf4c      	ite	mi
 800bdec:	2301      	movmi	r3, #1
 800bdee:	2300      	movpl	r3, #0
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b086      	sub	sp, #24
 800be02:	af00      	add	r7, sp, #0
 800be04:	60f8      	str	r0, [r7, #12]
 800be06:	60b9      	str	r1, [r7, #8]
 800be08:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d101      	bne.n	800be16 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	e01a      	b.n	800be4c <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800be1a:	e00a      	b.n	800be32 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 800be1c:	1d3b      	adds	r3, r7, #4
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	68f9      	ldr	r1, [r7, #12]
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff ffd1 	bl	800bdca <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3304      	adds	r3, #4
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	bf14      	ite	ne
 800be40:	2301      	movne	r3, #1
 800be42:	2300      	moveq	r3, #0
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e8      	bne.n	800be1c <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 800be4a:	697b      	ldr	r3, [r7, #20]
    }
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b088      	sub	sp, #32
 800be6e:	af00      	add	r7, sp, #0
 800be70:	60f8      	str	r0, [r7, #12]
 800be72:	60b9      	str	r1, [r7, #8]
 800be74:	607a      	str	r2, [r7, #4]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	61fb      	str	r3, [r7, #28]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	61bb      	str	r3, [r7, #24]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800be82:	f7f7 f91d 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 800be8c:	69b8      	ldr	r0, [r7, #24]
 800be8e:	f013 f96d 	bl	801f16c <_ZdlPv>
	    return;
 800be92:	e005      	b.n	800bea0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	69b9      	ldr	r1, [r7, #24]
 800be98:	69f8      	ldr	r0, [r7, #28]
 800be9a:	f002 fa4b 	bl	800e334 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	3720      	adds	r7, #32
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800beb2:	f7f7 f905 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d004      	beq.n	800bec6 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f001 f9db 	bl	800d27a <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 800bec4:	e003      	b.n	800bece <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f001 f9ef 	bl	800d2ac <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800bed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
 800bee0:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800bee2:	e01b      	b.n	800bf1c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d106      	bne.n	800bef8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800beea:	4633      	mov	r3, r6
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f001 f9e6 	bl	800d2c2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800bef6:	e021      	b.n	800bf3c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	3b01      	subs	r3, #1
 800befc:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800befe:	462a      	mov	r2, r5
 800bf00:	68b9      	ldr	r1, [r7, #8]
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f001 f9f4 	bl	800d2f0 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800bf0c:	4623      	mov	r3, r4
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	68b9      	ldr	r1, [r7, #8]
 800bf12:	6978      	ldr	r0, [r7, #20]
 800bf14:	f7ff ffde 	bl	800bed4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800bf1c:	f107 020c 	add.w	r2, r7, #12
 800bf20:	f107 0308 	add.w	r3, r7, #8
 800bf24:	4611      	mov	r1, r2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff f915 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b10      	cmp	r3, #16
 800bf30:	bfcc      	ite	gt
 800bf32:	2301      	movgt	r3, #1
 800bf34:	2300      	movle	r3, #0
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1d3      	bne.n	800bee4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf42 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800bf42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf44:	b085      	sub	sp, #20
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	60f8      	str	r0, [r7, #12]
 800bf4a:	60b9      	str	r1, [r7, #8]
 800bf4c:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800bf4e:	f107 020c 	add.w	r2, r7, #12
 800bf52:	f107 0308 	add.w	r3, r7, #8
 800bf56:	4611      	mov	r1, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff f8fc 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b10      	cmp	r3, #16
 800bf62:	bfcc      	ite	gt
 800bf64:	2301      	movgt	r3, #1
 800bf66:	2300      	movle	r3, #0
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d018      	beq.n	800bfa0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800bf6e:	f107 030c 	add.w	r3, r7, #12
 800bf72:	2110      	movs	r1, #16
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 f9fb 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4632      	mov	r2, r6
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f001 fa66 	bl	800d452 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800bf86:	f107 030c 	add.w	r3, r7, #12
 800bf8a:	2110      	movs	r1, #16
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f9ef 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800bf92:	4603      	mov	r3, r0
 800bf94:	462a      	mov	r2, r5
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f001 fac3 	bl	800d524 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800bf9e:	e004      	b.n	800bfaa <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f001 fa54 	bl	800d452 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800bfaa:	bf00      	nop
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfb2 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800bfb2:	b5b0      	push	{r4, r5, r7, lr}
 800bfb4:	b084      	sub	sp, #16
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800bfba:	1d3b      	adds	r3, r7, #4
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 fad9 	bl	800d574 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800bfc2:	f107 030c 	add.w	r3, r7, #12
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 fade 	bl	800d58a <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>
 800bfce:	bf00      	nop
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bdb0      	pop	{r4, r5, r7, pc}

0800bfd8 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800bfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800bfe4:	68fc      	ldr	r4, [r7, #12]
 800bfe6:	7938      	ldrb	r0, [r7, #4]
 800bfe8:	f001 fadd 	bl	800d5a6 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800bfec:	f107 030c 	add.w	r3, r7, #12
 800bff0:	4618      	mov	r0, r3
 800bff2:	f001 faeb 	bl	800d5cc <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800bff6:	4633      	mov	r3, r6
 800bff8:	462a      	mov	r2, r5
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	4620      	mov	r0, r4
 800bffe:	f001 fb03 	bl	800d608 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800c002:	4603      	mov	r3, r0
    }
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c00c <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800c00c:	b5b0      	push	{r4, r5, r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800c014:	1d3b      	adds	r3, r7, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f001 fb75 	bl	800d706 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800c01c:	f107 030c 	add.w	r3, r7, #12
 800c020:	4629      	mov	r1, r5
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fb7a 	bl	800d71c <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>
 800c028:	bf00      	nop
 800c02a:	4620      	mov	r0, r4
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bdb0      	pop	{r4, r5, r7, pc}

0800c032 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800c032:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	60b9      	str	r1, [r7, #8]
 800c03c:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800c03e:	68fc      	ldr	r4, [r7, #12]
 800c040:	7938      	ldrb	r0, [r7, #4]
 800c042:	f001 fb79 	bl	800d738 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800c046:	f107 030c 	add.w	r3, r7, #12
 800c04a:	4618      	mov	r0, r3
 800c04c:	f001 fabe 	bl	800d5cc <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800c050:	4633      	mov	r3, r6
 800c052:	462a      	mov	r2, r5
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	4620      	mov	r0, r4
 800c058:	f001 fb95 	bl	800d786 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800c05c:	4603      	mov	r3, r0
    }
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c066 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 fc06 	bl	800d884 <_ZNSaIfEC1ERKS_>
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f001 fbf9 	bl	800d884 <_ZNSaIfEC1ERKS_>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe ffeb 	bl	800b070 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f855 	bl	800c160 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	441a      	add	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	609a      	str	r2, [r3, #8]
      }
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b086      	sub	sp, #24
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	60f8      	str	r0, [r7, #12]
 800c102:	60b9      	str	r1, [r7, #8]
 800c104:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800c106:	2301      	movs	r3, #1
 800c108:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	68b9      	ldr	r1, [r7, #8]
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f001 fbc6 	bl	800d8a0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800c114:	4603      	mov	r3, r0
    }
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800c11e:	b590      	push	{r4, r7, lr}
 800c120:	b085      	sub	sp, #20
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	109b      	asrs	r3, r3, #2
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00e      	beq.n	800c158 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe ffbc 	bl	800b0be <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c146:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800c148:	461a      	mov	r2, r3
 800c14a:	4621      	mov	r1, r4
 800c14c:	6838      	ldr	r0, [r7, #0]
 800c14e:	f7fe ffc1 	bl	800b0d4 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	605a      	str	r2, [r3, #4]
      }
 800c158:	bf00      	nop
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd90      	pop	{r4, r7, pc}

0800c160 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d006      	beq.n	800c17e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	4618      	mov	r0, r3
 800c176:	f001 f860 	bl	800d23a <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800c17a:	4603      	mov	r3, r0
 800c17c:	e000      	b.n	800c180 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800c17e:	2300      	movs	r3, #0
      }
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800c19e:	b5b0      	push	{r4, r5, r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f001 fb88 	bl	800d8c0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	68b8      	ldr	r0, [r7, #8]
 800c1b4:	f001 fb84 	bl	800d8c0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f001 fb8e 	bl	800d8dc <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f001 fb96 	bl	800d8f8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f001 fba1 	bl	800d918 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800c1d6:	4603      	mov	r3, r0
    }
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bdb0      	pop	{r4, r5, r7, pc}

0800c1e0 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c1ea:	f7f6 ff69 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d004      	beq.n	800c1fe <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 fba5 	bl	800d946 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800c1fc:	e003      	b.n	800c206 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 fbc7 	bl	800d994 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4618      	mov	r0, r3
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	60b9      	str	r1, [r7, #8]
 800c22c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	68b9      	ldr	r1, [r7, #8]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f001 fbb9 	bl	800d9aa <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800c238:	4603      	mov	r3, r0
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800c242:	b480      	push	{r7}
 800c244:	b083      	sub	sp, #12
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b086      	sub	sp, #24
 800c25e:	af00      	add	r7, sp, #0
 800c260:	60f8      	str	r0, [r7, #12]
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800c266:	2301      	movs	r3, #1
 800c268:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f001 fbb8 	bl	800d9e4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800c274:	4603      	mov	r3, r0
    }
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
 800c27e:	b480      	push	{r7}
 800c280:	b083      	sub	sp, #12
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	61fb      	str	r3, [r7, #28]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	61bb      	str	r3, [r7, #24]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c2ac:	f7f6 ff08 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c2b6:	69b8      	ldr	r0, [r7, #24]
 800c2b8:	f012 ff58 	bl	801f16c <_ZdlPv>
	    return;
 800c2bc:	e005      	b.n	800c2ca <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	69b9      	ldr	r1, [r7, #24]
 800c2c2:	69f8      	ldr	r0, [r7, #28]
 800c2c4:	f002 fb07 	bl	800e8d6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c2dc:	f7f6 fef0 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d004      	beq.n	800c2f0 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 fb8b 	bl	800da04 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800c2ee:	e003      	b.n	800c2f8 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f001 fb86 	bl	800da04 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}

0800c2fe <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b082      	sub	sp, #8
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
 800c306:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f012 ff44 	bl	801f198 <_ZNSaIcEC1ERKS_>
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f012 ff37 	bl	801f198 <_ZNSaIcEC1ERKS_>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff fac2 	bl	800b8b6 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fb15 	bl	800c978 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800c34e:	4602      	mov	r2, r0
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	441a      	add	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	609a      	str	r2, [r3, #8]
      }
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800c39c:	2301      	movs	r3, #1
 800c39e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f001 fb46 	bl	800da36 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800c3aa:	4603      	mov	r3, r0
    }
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c3be:	f7f6 fe7f 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f001 fb43 	bl	800da56 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800c3d0:	e003      	b.n	800c3da <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f001 fb57 	bl	800da88 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
 800c3fe:	6039      	str	r1, [r7, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	4611      	mov	r1, r2
 800c406:	4618      	mov	r0, r3
 800c408:	f001 fb49 	bl	800da9e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800c416:	b580      	push	{r7, lr}
 800c418:	b082      	sub	sp, #8
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	4611      	mov	r1, r2
 800c426:	4618      	mov	r0, r3
 800c428:	f7ff ffe5 	bl	800c3f6 <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800c436:	b580      	push	{r7, lr}
 800c438:	b082      	sub	sp, #8
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	6039      	str	r1, [r7, #0]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781a      	ldrb	r2, [r3, #0]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	605a      	str	r2, [r3, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f103 0208 	add.w	r2, r3, #8
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	3308      	adds	r3, #8
 800c45a:	4619      	mov	r1, r3
 800c45c:	4610      	mov	r0, r2
 800c45e:	f7ff ffda 	bl	800c416 <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	695a      	ldr	r2, [r3, #20]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	615a      	str	r2, [r3, #20]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c474:	b5b0      	push	{r4, r5, r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c47e:	6838      	ldr	r0, [r7, #0]
 800c480:	f7ff ffae 	bl	800c3e0 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c484:	4605      	mov	r5, r0
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4619      	mov	r1, r3
 800c48a:	2018      	movs	r0, #24
 800c48c:	f7f6 fe3c 	bl	8003108 <_ZnwjPv>
 800c490:	4604      	mov	r4, r0
 800c492:	4629      	mov	r1, r5
 800c494:	4620      	mov	r0, r4
 800c496:	f7ff ffce 	bl	800c436 <_ZN3jlb4EdgeC1EOS0_>
 800c49a:	4623      	mov	r3, r4
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c4a4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ff95 	bl	800c3e0 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	68b8      	ldr	r0, [r7, #8]
 800c4bc:	f7ff ffda 	bl	800c474 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c4c0:	bf00      	nop
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	1d1a      	adds	r2, r3, #4
 800c4d4:	f107 030c 	add.w	r3, r7, #12
 800c4d8:	4611      	mov	r1, r2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f001 fafa 	bl	800dad4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c4ec:	b5b0      	push	{r4, r5, r7, lr}
 800c4ee:	b08c      	sub	sp, #48	; 0x30
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c4f8:	4a3f      	ldr	r2, [pc, #252]	; (800c5f8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f001 faf9 	bl	800daf4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800c502:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f001 fb36 	bl	800db82 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800c516:	4603      	mov	r3, r0
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	f107 0214 	add.w	r2, r7, #20
 800c51e:	f107 0308 	add.w	r3, r7, #8
 800c522:	4611      	mov	r1, r2
 800c524:	4618      	mov	r0, r3
 800c526:	f001 fb3d 	bl	800dba4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c52a:	4603      	mov	r3, r0
 800c52c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c532:	4618      	mov	r0, r3
 800c534:	f001 fb50 	bl	800dbd8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800c538:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c53e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c540:	6a3a      	ldr	r2, [r7, #32]
 800c542:	4613      	mov	r3, r2
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	4413      	add	r3, r2
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	189d      	adds	r5, r3, r2
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff ff45 	bl	800c3e0 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c556:	4603      	mov	r3, r0
 800c558:	461a      	mov	r2, r3
 800c55a:	4629      	mov	r1, r5
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7ff ffa1 	bl	800c4a4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c562:	2300      	movs	r3, #0
 800c564:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c566:	f107 0308 	add.w	r3, r7, #8
 800c56a:	4618      	mov	r0, r3
 800c56c:	f001 fb5c 	bl	800dc28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c570:	4603      	mov	r3, r0
 800c572:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe ff94 	bl	800b4a4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c57c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	4621      	mov	r1, r4
 800c582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c584:	f001 fb3c 	bl	800dc00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c588:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	3318      	adds	r3, #24
 800c58e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c590:	f107 0308 	add.w	r3, r7, #8
 800c594:	4618      	mov	r0, r3
 800c596:	f001 fb47 	bl	800dc28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c59a:	4603      	mov	r3, r0
 800c59c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe ff7f 	bl	800b4a4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c5a6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f001 fb27 	bl	800dc00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c5b2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800c5b4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	689a      	ldr	r2, [r3, #8]
 800c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	10db      	asrs	r3, r3, #3
 800c5c0:	4a0e      	ldr	r2, [pc, #56]	; (800c5fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800c5c2:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5ca:	f7fe ff58 	bl	800b47e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	69fa      	ldr	r2, [r7, #28]
 800c5d2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5dc:	4613      	mov	r3, r2
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	4413      	add	r3, r2
 800c5e2:	00db      	lsls	r3, r3, #3
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	441a      	add	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	609a      	str	r2, [r3, #8]
    }
 800c5ee:	bf00      	nop
 800c5f0:	3730      	adds	r7, #48	; 0x30
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	08023070 	.word	0x08023070
 800c5fc:	aaaaaaab 	.word	0xaaaaaaab

0800c600 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff ff5d 	bl	800c4c8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800c60e:	4603      	mov	r3, r0
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	f107 030c 	add.w	r3, r7, #12
 800c616:	2101      	movs	r1, #1
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 fb1c 	bl	800dc56 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800c61e:	4603      	mov	r3, r0
 800c620:	60bb      	str	r3, [r7, #8]
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	4618      	mov	r0, r3
 800c628:	f001 fb31 	bl	800dc8e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800c62c:	4603      	mov	r3, r0
      }
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	61fb      	str	r3, [r7, #28]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	61bb      	str	r3, [r7, #24]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c664:	f7f6 fd2c 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c66e:	69b8      	ldr	r0, [r7, #24]
 800c670:	f012 fd7c 	bl	801f16c <_ZdlPv>
	    return;
 800c674:	e005      	b.n	800c682 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	69b9      	ldr	r1, [r7, #24]
 800c67a:	69f8      	ldr	r0, [r7, #28]
 800c67c:	f002 fa00 	bl	800ea80 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	3720      	adds	r7, #32
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b082      	sub	sp, #8
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c694:	f7f6 fd14 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d004      	beq.n	800c6a8 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f001 fb00 	bl	800dca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800c6a6:	e003      	b.n	800c6b0 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800c6a8:	6839      	ldr	r1, [r7, #0]
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f001 fafb 	bl	800dca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c6b6:	b480      	push	{r7}
 800c6b8:	b083      	sub	sp, #12
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	701a      	strb	r2, [r3, #0]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	685a      	ldr	r2, [r3, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	605a      	str	r2, [r3, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	689a      	ldr	r2, [r3, #8]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	609a      	str	r2, [r3, #8]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f103 020c 	add.w	r2, r3, #12
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	330c      	adds	r3, #12
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	f001 faec 	bl	800dcd8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c70a:	b5b0      	push	{r4, r5, r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c714:	6838      	ldr	r0, [r7, #0]
 800c716:	f7ff ffce 	bl	800c6b6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c71a:	4605      	mov	r5, r0
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4619      	mov	r1, r3
 800c720:	2018      	movs	r0, #24
 800c722:	f7f6 fcf1 	bl	8003108 <_ZnwjPv>
 800c726:	4604      	mov	r4, r0
 800c728:	4629      	mov	r1, r5
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7ff ffce 	bl	800c6cc <_ZN3jlb4NodeC1ERKS0_>
 800c730:	4623      	mov	r3, r4
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bdb0      	pop	{r4, r5, r7, pc}

0800c73a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7ff ffb5 	bl	800c6b6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c74c:	4603      	mov	r3, r0
 800c74e:	4619      	mov	r1, r3
 800c750:	68b8      	ldr	r0, [r7, #8]
 800c752:	f7ff ffda 	bl	800c70a <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c756:	bf00      	nop
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	1d1a      	adds	r2, r3, #4
 800c76a:	f107 030c 	add.w	r3, r7, #12
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f001 faee 	bl	800dd52 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c780:	b5b0      	push	{r4, r5, r7, lr}
 800c782:	b08c      	sub	sp, #48	; 0x30
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c78c:	4a44      	ldr	r2, [pc, #272]	; (800c8a0 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800c78e:	2101      	movs	r1, #1
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f001 faee 	bl	800dd72 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800c796:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f001 fb2b 	bl	800de00 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	f107 0214 	add.w	r2, r7, #20
 800c7b2:	f107 0308 	add.w	r3, r7, #8
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f001 fb31 	bl	800de20 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f001 fb44 	bl	800de54 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800c7cc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c7d2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c7d4:	6a3a      	ldr	r2, [r7, #32]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	189d      	adds	r5, r3, r2
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7ff ff66 	bl	800c6b6 <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7ff ffa2 	bl	800c73a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800c7fa:	f107 0308 	add.w	r3, r7, #8
 800c7fe:	4618      	mov	r0, r3
 800c800:	f001 fb3c 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c804:	4603      	mov	r3, r0
 800c806:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe ff4c 	bl	800b6a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c810:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800c812:	69fa      	ldr	r2, [r7, #28]
 800c814:	4621      	mov	r1, r4
 800c816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c818:	f001 fb3b 	bl	800de92 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800c81c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	3318      	adds	r3, #24
 800c822:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800c824:	f107 0308 	add.w	r3, r7, #8
 800c828:	4618      	mov	r0, r3
 800c82a:	f001 fb27 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800c82e:	4603      	mov	r3, r0
 800c830:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe ff37 	bl	800b6a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c83a:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800c83c:	69ba      	ldr	r2, [r7, #24]
 800c83e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c840:	4620      	mov	r0, r4
 800c842:	f001 fb26 	bl	800de92 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800c846:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fe ff2c 	bl	800b6a8 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800c850:	4603      	mov	r3, r0
 800c852:	461a      	mov	r2, r3
 800c854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c858:	f7fe ff31 	bl	800b6be <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800c85c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689a      	ldr	r2, [r3, #8]
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	10db      	asrs	r3, r3, #3
 800c868:	4a0e      	ldr	r2, [pc, #56]	; (800c8a4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800c86a:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800c86e:	461a      	mov	r2, r3
 800c870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c872:	f7fe ff06 	bl	800b682 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	69fa      	ldr	r2, [r7, #28]
 800c87a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800c882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c884:	4613      	mov	r3, r2
 800c886:	005b      	lsls	r3, r3, #1
 800c888:	4413      	add	r3, r2
 800c88a:	00db      	lsls	r3, r3, #3
 800c88c:	461a      	mov	r2, r3
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	441a      	add	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	609a      	str	r2, [r3, #8]
    }
 800c896:	bf00      	nop
 800c898:	3730      	adds	r7, #48	; 0x30
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bdb0      	pop	{r4, r5, r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	08023070 	.word	0x08023070
 800c8a4:	aaaaaaab 	.word	0xaaaaaaab

0800c8a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff ff54 	bl	800c75e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	f107 030c 	add.w	r3, r7, #12
 800c8be:	2101      	movs	r1, #1
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f001 faff 	bl	800dec4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	60bb      	str	r3, [r7, #8]
 800c8ca:	f107 0308 	add.w	r3, r7, #8
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f001 fb14 	bl	800defc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800c8d4:	4603      	mov	r3, r0
      }
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <_ZNKSt16initializer_listIcE4sizeEv>:
 800c8de:	b480      	push	{r7}
 800c8e0:	b083      	sub	sp, #12
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	370c      	adds	r7, #12
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800c8f6:	b480      	push	{r7}
 800c8f8:	b083      	sub	sp, #12
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr

0800c90a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800c90a:	b480      	push	{r7}
 800c90c:	b085      	sub	sp, #20
 800c90e:	af00      	add	r7, sp, #0
 800c910:	60f8      	str	r0, [r7, #12]
 800c912:	60b9      	str	r1, [r7, #8]
 800c914:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	1ad3      	subs	r3, r2, r3
    }
 800c91c:	4618      	mov	r0, r3
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800c932:	f107 030c 	add.w	r3, r7, #12
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	4618      	mov	r0, r3
 800c93a:	f012 fc2d 	bl	801f198 <_ZNSaIcEC1ERKS_>
 800c93e:	f107 030c 	add.w	r3, r7, #12
 800c942:	4618      	mov	r0, r3
 800c944:	f001 faf2 	bl	800df2c <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800c948:	4602      	mov	r2, r0
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4293      	cmp	r3, r2
 800c94e:	bf8c      	ite	hi
 800c950:	2301      	movhi	r3, #1
 800c952:	2300      	movls	r3, #0
 800c954:	b2dc      	uxtb	r4, r3
 800c956:	f107 030c 	add.w	r3, r7, #12
 800c95a:	4618      	mov	r0, r3
 800c95c:	f012 fc1d 	bl	801f19a <_ZNSaIcED1Ev>
 800c960:	2c00      	cmp	r4, #0
 800c962:	d002      	beq.n	800c96a <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800c964:	4803      	ldr	r0, [pc, #12]	; (800c974 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800c966:	f012 fc1f 	bl	801f1a8 <_ZSt20__throw_length_errorPKc>
	return __n;
 800c96a:	687b      	ldr	r3, [r7, #4]
      }
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	bd90      	pop	{r4, r7, pc}
 800c974:	0802308c 	.word	0x0802308c

0800c978 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d006      	beq.n	800c996 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 fae7 	bl	800df60 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800c992:	4603      	mov	r3, r0
 800c994:	e000      	b.n	800c998 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800c996:	2300      	movs	r3, #0
      }
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	68b9      	ldr	r1, [r7, #8]
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f001 faf2 	bl	800df9c <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800c9c2:	b480      	push	{r7}
 800c9c4:	b083      	sub	sp, #12
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	68b9      	ldr	r1, [r7, #8]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 fade 	bl	800dfc0 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800ca04:	4603      	mov	r3, r0
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800ca0e:	b480      	push	{r7}
 800ca10:	b083      	sub	sp, #12
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	6039      	str	r1, [r7, #0]
    { return __res; }
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b088      	sub	sp, #32
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	61fb      	str	r3, [r7, #28]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	61bb      	str	r3, [r7, #24]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800ca3e:	f7f6 fb3f 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d003      	beq.n	800ca50 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800ca48:	69b8      	ldr	r0, [r7, #24]
 800ca4a:	f012 fb8f 	bl	801f16c <_ZdlPv>
	    return;
 800ca4e:	e005      	b.n	800ca5c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	69b9      	ldr	r1, [r7, #24]
 800ca54:	69f8      	ldr	r0, [r7, #28]
 800ca56:	f002 f957 	bl	800ed08 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800ca5a:	bf00      	nop
 800ca5c:	bf00      	nop
 800ca5e:	3720      	adds	r7, #32
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800ca7a:	b5b0      	push	{r4, r5, r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800ca84:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800ca86:	1d3b      	adds	r3, r7, #4
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe ff0a 	bl	800b8a2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800ca8e:	462a      	mov	r2, r5
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	4620      	mov	r0, r4
 800ca94:	f001 fab1 	bl	800dffa <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800ca98:	4603      	mov	r3, r0
    }
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bdb0      	pop	{r4, r5, r7, pc}

0800caa2 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800caa2:	b590      	push	{r4, r7, lr}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f001 facb 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 800cab4:	4604      	mov	r4, r0
 800cab6:	68b8      	ldr	r0, [r7, #8]
 800cab8:	f001 fac7 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 800cabc:	4603      	mov	r3, r0
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4619      	mov	r1, r3
 800cac2:	4620      	mov	r0, r4
 800cac4:	f001 facc 	bl	800e060 <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 800cac8:	4603      	mov	r3, r0
    }
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd90      	pop	{r4, r7, pc}

0800cad2 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800cad2:	b590      	push	{r4, r7, lr}
 800cad4:	b085      	sub	sp, #20
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	60f8      	str	r0, [r7, #12]
 800cada:	60b9      	str	r1, [r7, #8]
 800cadc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f001 fab3 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 800cae4:	4604      	mov	r4, r0
 800cae6:	68b8      	ldr	r0, [r7, #8]
 800cae8:	f001 faaf 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 800caec:	4603      	mov	r3, r0
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	4619      	mov	r1, r3
 800caf2:	4620      	mov	r0, r4
 800caf4:	f001 fad7 	bl	800e0a6 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>
 800caf8:	4603      	mov	r3, r0
    }
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd90      	pop	{r4, r7, pc}
	...

0800cb04 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800cb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb06:	b08d      	sub	sp, #52	; 0x34
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	f000 80f6 	beq.w	800cd08 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f7ff ffab 	bl	800ca7a <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800cb24:	4603      	mov	r3, r0
 800cb26:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 800cb32:	461a      	mov	r2, r3
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	4293      	cmp	r3, r2
 800cb38:	f200 8081 	bhi.w	800cc3e <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f7fd ffb8 	bl	800aab2 <_ZNSt6vectorIcSaIcEE3endEv>
 800cb42:	4603      	mov	r3, r0
 800cb44:	617b      	str	r3, [r7, #20]
 800cb46:	f107 0208 	add.w	r2, r7, #8
 800cb4a:	f107 0314 	add.w	r3, r7, #20
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 f8f8 	bl	800cd46 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800cb56:	4603      	mov	r3, r0
 800cb58:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 800cb60:	69fa      	ldr	r2, [r7, #28]
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d92d      	bls.n	800cbc4 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	425b      	negs	r3, r3
 800cb70:	18d4      	adds	r4, r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685d      	ldr	r5, [r3, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fe fcf8 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cb82:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800cb84:	4632      	mov	r2, r6
 800cb86:	4629      	mov	r1, r5
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f001 fa45 	bl	800e018 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	441a      	add	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800cb9a:	f107 0308 	add.w	r3, r7, #8
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fc ffac 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cba4:	4603      	mov	r3, r0
 800cba6:	6818      	ldr	r0, [r3, #0]
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	425b      	negs	r3, r3
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	4413      	add	r3, r2
 800cbb0:	69ba      	ldr	r2, [r7, #24]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	f7ff ff75 	bl	800caa2 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff ff88 	bl	800cad2 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 800cbc2:	e0a1      	b.n	800cd08 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 800cbc8:	f107 0310 	add.w	r3, r7, #16
 800cbcc:	69f9      	ldr	r1, [r7, #28]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f001 fa8a 	bl	800e0e8 <_ZSt7advanceIPcjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 800cbd4:	693c      	ldr	r4, [r7, #16]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe fcc8 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cbe2:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f001 fa90 	bl	800e10e <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	685a      	ldr	r2, [r3, #4]
 800cbf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	1acb      	subs	r3, r1, r3
 800cbf8:	441a      	add	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 800cbfe:	f107 0308 	add.w	r3, r7, #8
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fc ff7a 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	681c      	ldr	r4, [r3, #0]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fe fcad 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cc18:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 800cc1a:	462a      	mov	r2, r5
 800cc1c:	69b9      	ldr	r1, [r7, #24]
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f001 f9fa 	bl	800e018 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	685a      	ldr	r2, [r3, #4]
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	441a      	add	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff ff4b 	bl	800cad2 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
      }
 800cc3c:	e064      	b.n	800cd08 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 800cc3e:	4a34      	ldr	r2, [pc, #208]	; (800cd10 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 800cc40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f001 fa74 	bl	800e130 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800cc48:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff fe92 	bl	800c978 <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800cc54:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 800cc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc58:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681c      	ldr	r4, [r3, #0]
 800cc5e:	f107 0308 	add.w	r3, r7, #8
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7fc ff4a 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fc7f 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cc74:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 800cc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc78:	4629      	mov	r1, r5
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f001 fa9f 	bl	800e1be <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800cc80:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fe fc74 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cc8a:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 800cc8c:	6a3a      	ldr	r2, [r7, #32]
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 fa3c 	bl	800e10e <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
 800cc96:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 800cc98:	f107 0308 	add.w	r3, r7, #8
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fc ff2d 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cca2:	4603      	mov	r3, r0
 800cca4:	681c      	ldr	r4, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fe fc60 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ccb2:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 800ccb4:	6a3a      	ldr	r2, [r7, #32]
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f001 fa80 	bl	800e1be <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800ccbe:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681c      	ldr	r4, [r3, #0]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fe fc51 	bl	800b572 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ccd0:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7fe fc67 	bl	800b5aa <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 800ccec:	461a      	mov	r2, r3
 800ccee:	f7fe fdf6 	bl	800b8de <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		this->_M_impl._M_start = __new_start;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccf6:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6a3a      	ldr	r2, [r7, #32]
 800ccfc:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800ccfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	441a      	add	r2, r3
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	609a      	str	r2, [r3, #8]
      }
 800cd08:	bf00      	nop
 800cd0a:	3734      	adds	r7, #52	; 0x34
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd10:	080230c0 	.word	0x080230c0

0800cd14 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	601a      	str	r2, [r3, #0]
      { }
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800cd32:	b480      	push	{r7}
 800cd34:	b083      	sub	sp, #12
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cd46:	b590      	push	{r4, r7, lr}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7fc fed3 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cd56:	4603      	mov	r3, r0
 800cd58:	681c      	ldr	r4, [r3, #0]
 800cd5a:	6838      	ldr	r0, [r7, #0]
 800cd5c:	f7fc fece 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800cd60:	4603      	mov	r3, r0
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	1ae3      	subs	r3, r4, r3
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd90      	pop	{r4, r7, pc}

0800cd6e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	370c      	adds	r7, #12
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800cd90:	463b      	mov	r3, r7
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff ffeb 	bl	800cd6e <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	781a      	ldrb	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	bf0c      	ite	eq
 800cda6:	2301      	moveq	r3, #1
 800cda8:	2300      	movne	r3, #0
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
	++_M_current;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
	return *this;
 800cdc6:	687b      	ldr	r3, [r7, #4]
      }
 800cdc8:	4618      	mov	r0, r3
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800cde2:	f107 020c 	add.w	r2, r7, #12
 800cde6:	f107 0308 	add.w	r3, r7, #8
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff ffaa 	bl	800cd46 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	109b      	asrs	r3, r3, #2
 800cdf6:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800cdf8:	e03e      	b.n	800ce78 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800cdfa:	1d3b      	adds	r3, r7, #4
 800cdfc:	68f9      	ldr	r1, [r7, #12]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff ffc1 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ce04:	4603      	mov	r3, r0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	e077      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ce0e:	f107 030c 	add.w	r3, r7, #12
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff ffce 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ce18:	1d3b      	adds	r3, r7, #4
 800ce1a:	68f9      	ldr	r1, [r7, #12]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff ffb2 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	e068      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ce2c:	f107 030c 	add.w	r3, r7, #12
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff ffbf 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ce36:	1d3b      	adds	r3, r7, #4
 800ce38:	68f9      	ldr	r1, [r7, #12]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff ffa3 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	e059      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ce4a:	f107 030c 	add.w	r3, r7, #12
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff ffb0 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ce54:	1d3b      	adds	r3, r7, #4
 800ce56:	68f9      	ldr	r1, [r7, #12]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff ff94 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	e04a      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ce68:	f107 030c 	add.w	r3, r7, #12
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff ffa1 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	3b01      	subs	r3, #1
 800ce76:	617b      	str	r3, [r7, #20]
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dcbd      	bgt.n	800cdfa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800ce7e:	f107 020c 	add.w	r2, r7, #12
 800ce82:	f107 0308 	add.w	r3, r7, #8
 800ce86:	4611      	mov	r1, r2
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff ff5c 	bl	800cd46 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b03      	cmp	r3, #3
 800ce92:	d006      	beq.n	800cea2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	dc31      	bgt.n	800cefc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d020      	beq.n	800cede <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d00f      	beq.n	800cec0 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800cea0:	e02c      	b.n	800cefc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800cea2:	1d3b      	adds	r3, r7, #4
 800cea4:	68f9      	ldr	r1, [r7, #12]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff ff6d 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d001      	beq.n	800ceb6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	e023      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ceb6:	f107 030c 	add.w	r3, r7, #12
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff ff7a 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800cec0:	1d3b      	adds	r3, r7, #4
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff ff5e 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	e014      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800ced4:	f107 030c 	add.w	r3, r7, #12
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff ff6b 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800cede:	1d3b      	adds	r3, r7, #4
 800cee0:	68f9      	ldr	r1, [r7, #12]
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff ff4f 	bl	800cd86 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	e005      	b.n	800cefe <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800cef2:	f107 030c 	add.w	r3, r7, #12
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff ff5c 	bl	800cdb4 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800cefc:	68bb      	ldr	r3, [r7, #8]
    }
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cf06:	b590      	push	{r4, r7, lr}
 800cf08:	b087      	sub	sp, #28
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	60f8      	str	r0, [r7, #12]
 800cf0e:	60b9      	str	r1, [r7, #8]
 800cf10:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f001 f96c 	bl	800e1f0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 800cf18:	4604      	mov	r4, r0
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f7fd fa7f 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800cf20:	4603      	mov	r3, r0
 800cf22:	1ae2      	subs	r2, r4, r3
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	bf34      	ite	cc
 800cf2a:	2301      	movcc	r3, #1
 800cf2c:	2300      	movcs	r3, #0
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f012 f937 	bl	801f1a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f7fd fa6f 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800cf40:	4604      	mov	r4, r0
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7fd fa6b 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	613b      	str	r3, [r7, #16]
 800cf4c:	f107 0208 	add.w	r2, r7, #8
 800cf50:	f107 0310 	add.w	r3, r7, #16
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe fe1d 	bl	800bb96 <_ZSt3maxIjERKT_S2_S2_>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4423      	add	r3, r4
 800cf62:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7fd fa5a 	bl	800a41e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d306      	bcc.n	800cf80 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f001 f93c 	bl	800e1f0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d904      	bls.n	800cf8a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f001 f935 	bl	800e1f0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 800cf86:	4603      	mov	r3, r0
 800cf88:	e000      	b.n	800cf8c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 800cf8a:	697b      	ldr	r3, [r7, #20]
      }
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	371c      	adds	r7, #28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd90      	pop	{r4, r7, pc}

0800cf94 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cf94:	b590      	push	{r4, r7, lr}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cfa2:	f88d 4000 	strb.w	r4, [sp]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f001 f930 	bl	800e212 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 800cfb2:	4603      	mov	r3, r0
      }
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd90      	pop	{r4, r7, pc}

0800cfbc <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	601a      	str	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	605a      	str	r2, [r3, #4]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	609a      	str	r2, [r3, #8]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	60da      	str	r2, [r3, #12]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4618      	mov	r0, r3
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b084      	sub	sp, #16
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
 800cff2:	6039      	str	r1, [r7, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800cffc:	f7f6 f860 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d006      	beq.n	800d014 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4618      	mov	r0, r3
 800d00c:	f012 f8b2 	bl	801f174 <_Znwj>
 800d010:	4603      	mov	r3, r0
 800d012:	e006      	b.n	800d022 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800d014:	2200      	movs	r2, #0
 800d016:	68b9      	ldr	r1, [r7, #8]
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f001 ff72 	bl	800ef02 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800d01e:	4603      	mov	r3, r0
 800d020:	bf00      	nop
      { return __a.allocate(__n); }
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4618      	mov	r0, r3
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr

0800d040 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 f8f3 	bl	800e236 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4618      	mov	r0, r3
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800d05a:	b480      	push	{r7}
 800d05c:	b083      	sub	sp, #12
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800d062:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800d066:	4618      	mov	r0, r3
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800d07a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d07e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7ff ffea 	bl	800d05a <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800d086:	4603      	mov	r3, r0
 800d088:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800d08a:	f107 0208 	add.w	r2, r7, #8
 800d08e:	f107 030c 	add.w	r3, r7, #12
 800d092:	4611      	mov	r1, r2
 800d094:	4618      	mov	r0, r3
 800d096:	f001 f8e8 	bl	800e26a <_ZSt3minIjERKT_S2_S2_>
 800d09a:	4603      	mov	r3, r0
 800d09c:	681b      	ldr	r3, [r3, #0]
      }
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800d0a6:	b590      	push	{r4, r7, lr}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f001 f8ed 	bl	800e292 <_ZSt12__miter_baseIPPfET_S2_>
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	68b8      	ldr	r0, [r7, #8]
 800d0bc:	f001 f8e9 	bl	800e292 <_ZSt12__miter_baseIPPfET_S2_>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f001 f8ee 	bl	800e2a8 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 800d0cc:	4603      	mov	r3, r0
    }
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd90      	pop	{r4, r7, pc}

0800d0d6 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800d0d6:	b590      	push	{r4, r7, lr}
 800d0d8:	b085      	sub	sp, #20
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	60f8      	str	r0, [r7, #12]
 800d0de:	60b9      	str	r1, [r7, #8]
 800d0e0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f001 f8d5 	bl	800e292 <_ZSt12__miter_baseIPPfET_S2_>
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	68b8      	ldr	r0, [r7, #8]
 800d0ec:	f001 f8d1 	bl	800e292 <_ZSt12__miter_baseIPPfET_S2_>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f001 f8f9 	bl	800e2ee <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 800d0fc:	4603      	mov	r3, r0
    }
 800d0fe:	4618      	mov	r0, r3
 800d100:	3714      	adds	r7, #20
 800d102:	46bd      	mov	sp, r7
 800d104:	bd90      	pop	{r4, r7, pc}

0800d106 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800d106:	b590      	push	{r4, r7, lr}
 800d108:	b08b      	sub	sp, #44	; 0x2c
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	60f8      	str	r0, [r7, #12]
 800d10e:	60b9      	str	r1, [r7, #8]
 800d110:	4613      	mov	r3, r2
 800d112:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	695b      	ldr	r3, [r3, #20]
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	109b      	asrs	r3, r3, #2
 800d120:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800d122:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	6a3a      	ldr	r2, [r7, #32]
 800d128:	4413      	add	r3, r2
 800d12a:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	429a      	cmp	r2, r3
 800d136:	d92d      	bls.n	800d194 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	1acb      	subs	r3, r1, r3
 800d144:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800d146:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	e000      	b.n	800d156 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 800d154:	2300      	movs	r3, #0
 800d156:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800d158:	4413      	add	r3, r2
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d162:	429a      	cmp	r2, r3
 800d164:	d209      	bcs.n	800d17a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800d16e:	3304      	adds	r3, #4
 800d170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d172:	4619      	mov	r1, r3
 800d174:	f7ff ff97 	bl	800d0a6 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 800d178:	e048      	b.n	800d20c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800d182:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800d188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d18a:	4413      	add	r3, r2
 800d18c:	461a      	mov	r2, r3
 800d18e:	f7ff ffa2 	bl	800d0d6 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 800d192:	e03b      	b.n	800d20c <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3304      	adds	r3, #4
 800d19c:	f107 0208 	add.w	r2, r7, #8
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7fe fcf7 	bl	800bb96 <_ZSt3maxIjERKT_S2_S2_>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800d1ae:	3302      	adds	r3, #2
 800d1b0:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	69b9      	ldr	r1, [r7, #24]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fe fd01 	bl	800bbbe <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800d1bc:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	085b      	lsrs	r3, r3, #1
 800d1c6:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d002      	beq.n	800d1d4 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	e000      	b.n	800d1d6 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800d1d8:	697a      	ldr	r2, [r7, #20]
 800d1da:	4413      	add	r3, r2
 800d1dc:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	f7ff ff5b 	bl	800d0a6 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6819      	ldr	r1, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7fd fdb1 	bl	800ad62 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	69ba      	ldr	r2, [r7, #24]
 800d20a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3308      	adds	r3, #8
 800d210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d212:	4618      	mov	r0, r3
 800d214:	f7fe fd0b 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f103 0018 	add.w	r0, r3, #24
 800d21e:	6a3b      	ldr	r3, [r7, #32]
 800d220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d224:	3b01      	subs	r3, #1
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22a:	4413      	add	r3, r2
 800d22c:	4619      	mov	r1, r3
 800d22e:	f7fe fcfe 	bl	800bc2e <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800d232:	bf00      	nop
 800d234:	372c      	adds	r7, #44	; 0x2c
 800d236:	46bd      	mov	sp, r7
 800d238:	bd90      	pop	{r4, r7, pc}

0800d23a <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b084      	sub	sp, #16
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800d24c:	f7f5 ff38 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d006      	beq.n	800d264 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4618      	mov	r0, r3
 800d25c:	f011 ff8a 	bl	801f174 <_Znwj>
 800d260:	4603      	mov	r3, r0
 800d262:	e006      	b.n	800d272 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800d264:	2200      	movs	r2, #0
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f001 feb7 	bl	800efdc <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 800d26e:	4603      	mov	r3, r0
 800d270:	bf00      	nop
      { return __a.allocate(__n); }
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b082      	sub	sp, #8
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d284:	e009      	b.n	800d29a <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 f863 	bl	800e352 <_ZSt11__addressofIfEPT_RS0_>
 800d28c:	4603      	mov	r3, r0
 800d28e:	4618      	mov	r0, r3
 800d290:	f001 f86a 	bl	800e368 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3304      	adds	r3, #4
 800d298:	607b      	str	r3, [r7, #4]
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d1f1      	bne.n	800d286 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 800d2a2:	bf00      	nop
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
 800d2b6:	bf00      	nop
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800d2c2:	b590      	push	{r4, r7, lr}
 800d2c4:	b085      	sub	sp, #20
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	60f8      	str	r0, [r7, #12]
 800d2ca:	60b9      	str	r1, [r7, #8]
 800d2cc:	607a      	str	r2, [r7, #4]
 800d2ce:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800d2d0:	4623      	mov	r3, r4
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	68b9      	ldr	r1, [r7, #8]
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f001 f888 	bl	800e3ec <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800d2dc:	463b      	mov	r3, r7
 800d2de:	461a      	mov	r2, r3
 800d2e0:	68b9      	ldr	r1, [r7, #8]
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f001 f8d0 	bl	800e488 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800d2e8:	bf00      	nop
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd90      	pop	{r4, r7, pc}

0800d2f0 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800d2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2f2:	b089      	sub	sp, #36	; 0x24
 800d2f4:	af02      	add	r7, sp, #8
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800d2fc:	f107 020c 	add.w	r2, r7, #12
 800d300:	f107 0308 	add.w	r3, r7, #8
 800d304:	4611      	mov	r1, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7fd ff25 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d30c:	4603      	mov	r3, r0
 800d30e:	0fda      	lsrs	r2, r3, #31
 800d310:	4413      	add	r3, r2
 800d312:	105b      	asrs	r3, r3, #1
 800d314:	461a      	mov	r2, r3
 800d316:	f107 030c 	add.w	r3, r7, #12
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 f827 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d322:	4603      	mov	r3, r0
 800d324:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800d326:	f107 030c 	add.w	r3, r7, #12
 800d32a:	2101      	movs	r1, #1
 800d32c:	4618      	mov	r0, r3
 800d32e:	f000 f81f 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d332:	4604      	mov	r4, r0
 800d334:	f107 0308 	add.w	r3, r7, #8
 800d338:	2101      	movs	r1, #1
 800d33a:	4618      	mov	r0, r3
 800d33c:	f001 f8cb 	bl	800e4d6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800d340:	4603      	mov	r3, r0
 800d342:	f88d 5000 	strb.w	r5, [sp]
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	4621      	mov	r1, r4
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f001 f8dc 	bl	800e508 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800d350:	f107 030c 	add.w	r3, r7, #12
 800d354:	2101      	movs	r1, #1
 800d356:	4618      	mov	r0, r3
 800d358:	f000 f80a 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d35c:	4633      	mov	r3, r6
 800d35e:	68fa      	ldr	r2, [r7, #12]
 800d360:	68b9      	ldr	r1, [r7, #8]
 800d362:	f001 f926 	bl	800e5b2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800d366:	4603      	mov	r3, r0
    }
 800d368:	4618      	mov	r0, r3
 800d36a:	371c      	adds	r7, #28
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4413      	add	r3, r2
 800d384:	60fb      	str	r3, [r7, #12]
 800d386:	f107 020c 	add.w	r2, r7, #12
 800d38a:	f107 0308 	add.w	r3, r7, #8
 800d38e:	4611      	mov	r1, r2
 800d390:	4618      	mov	r0, r3
 800d392:	f7fd fead 	bl	800b0f0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	1d1a      	adds	r2, r3, #4
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	601a      	str	r2, [r3, #0]
	return *this;
 800d3b2:	687b      	ldr	r3, [r7, #4]
      }
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	ed2d 8b02 	vpush	{d8}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800d3e8:	f107 0308 	add.w	r3, r7, #8
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff ffe7 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	ed93 8a00 	vldr	s16, [r3]
 800d3f8:	1d3b      	adds	r3, r7, #4
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff ffe0 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d400:	4603      	mov	r3, r0
 800d402:	edd3 7a00 	vldr	s15, [r3]
 800d406:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	bf4c      	ite	mi
 800d410:	2301      	movmi	r3, #1
 800d412:	2300      	movpl	r3, #0
 800d414:	b2db      	uxtb	r3, r3
 800d416:	4618      	mov	r0, r3
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	ecbd 8b02 	vpop	{d8}
 800d420:	bd80      	pop	{r7, pc}

0800d422 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800d422:	b590      	push	{r4, r7, lr}
 800d424:	b085      	sub	sp, #20
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f001 f912 	bl	800e658 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800d434:	4604      	mov	r4, r0
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f001 f90e 	bl	800e658 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800d43c:	4603      	mov	r3, r0
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4619      	mov	r1, r3
 800d442:	4620      	mov	r0, r4
 800d444:	f001 f913 	bl	800e66e <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800d448:	4603      	mov	r3, r0
    }
 800d44a:	4618      	mov	r0, r3
 800d44c:	3714      	adds	r7, #20
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd90      	pop	{r4, r7, pc}

0800d452 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800d452:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d454:	b087      	sub	sp, #28
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800d45e:	f107 0208 	add.w	r2, r7, #8
 800d462:	f107 030c 	add.w	r3, r7, #12
 800d466:	4611      	mov	r1, r2
 800d468:	4618      	mov	r0, r3
 800d46a:	f7fd fe5c 	bl	800b126 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d153      	bne.n	800d51c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800d474:	f107 030c 	add.w	r3, r7, #12
 800d478:	2101      	movs	r1, #1
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff ff78 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d480:	4603      	mov	r3, r0
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	e03b      	b.n	800d4fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800d486:	1d3b      	adds	r3, r7, #4
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	6979      	ldr	r1, [r7, #20]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff ffa3 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d026      	beq.n	800d4e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800d498:	f107 0314 	add.w	r3, r7, #20
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff ff8f 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fc fee0 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800d4b0:	f107 0314 	add.w	r3, r7, #20
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff ff5a 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6979      	ldr	r1, [r7, #20]
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff ffad 	bl	800d422 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800d4c8:	f107 0310 	add.w	r3, r7, #16
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fc fecc 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	681c      	ldr	r4, [r3, #0]
 800d4d6:	f107 030c 	add.w	r3, r7, #12
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff ff70 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	601c      	str	r4, [r3, #0]
 800d4e4:	e006      	b.n	800d4f4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7f5 fe22 	bl	8003130 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	6978      	ldr	r0, [r7, #20]
 800d4f0:	f001 f8fe 	bl	800e6f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800d4f4:	f107 0314 	add.w	r3, r7, #20
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff ff51 	bl	800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800d4fe:	f107 0208 	add.w	r2, r7, #8
 800d502:	f107 0314 	add.w	r3, r7, #20
 800d506:	4611      	mov	r1, r2
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fd fe0c 	bl	800b126 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800d50e:	4603      	mov	r3, r0
 800d510:	f083 0301 	eor.w	r3, r3, #1
 800d514:	b2db      	uxtb	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1b5      	bne.n	800d486 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800d51a:	e000      	b.n	800d51e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800d51c:	bf00      	nop
    }
 800d51e:	371c      	adds	r7, #28
 800d520:	46bd      	mov	sp, r7
 800d522:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d524 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800d524:	b5b0      	push	{r4, r5, r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	617b      	str	r3, [r7, #20]
 800d534:	e00b      	b.n	800d54e <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800d536:	4628      	mov	r0, r5
 800d538:	f7f5 fdfa 	bl	8003130 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800d53c:	4621      	mov	r1, r4
 800d53e:	6978      	ldr	r0, [r7, #20]
 800d540:	f001 f8d6 	bl	800e6f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800d544:	f107 0314 	add.w	r3, r7, #20
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff ff29 	bl	800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800d54e:	f107 0208 	add.w	r2, r7, #8
 800d552:	f107 0314 	add.w	r3, r7, #20
 800d556:	4611      	mov	r1, r2
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fd fde4 	bl	800b126 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800d55e:	4603      	mov	r3, r0
 800d560:	f083 0301 	eor.w	r3, r3, #1
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1e5      	bne.n	800d536 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800d56a:	bf00      	nop
 800d56c:	bf00      	nop
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bdb0      	pop	{r4, r5, r7, pc}

0800d574 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4618      	mov	r0, r3
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b082      	sub	sp, #8
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800d594:	463b      	mov	r3, r7
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff ffec 	bl	800d574 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800d5a6:	b5b0      	push	{r4, r5, r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800d5ae:	1d3b      	adds	r3, r7, #4
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff ffdf 	bl	800d574 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800d5b6:	f107 030c 	add.w	r3, r7, #12
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f001 f8e2 	bl	800e786 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>
 800d5c2:	bf00      	nop
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}

0800d5cc <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	f7f6 fd08 	bl	8004008 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE_clEb>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	f083 0301 	eor.w	r3, r3, #1
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	4618      	mov	r0, r3
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	713a      	strb	r2, [r7, #4]
 800d614:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	109b      	asrs	r3, r3, #2
 800d61e:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800d620:	e036      	b.n	800d690 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800d622:	1d3b      	adds	r3, r7, #4
 800d624:	68f9      	ldr	r1, [r7, #12]
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff ffda 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	e063      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3301      	adds	r3, #1
 800d63a:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d63c:	1d3b      	adds	r3, r7, #4
 800d63e:	68f9      	ldr	r1, [r7, #12]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff ffcd 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	e056      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	3301      	adds	r3, #1
 800d654:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d656:	1d3b      	adds	r3, r7, #4
 800d658:	68f9      	ldr	r1, [r7, #12]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff ffc0 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	e049      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3301      	adds	r3, #1
 800d66e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d670:	1d3b      	adds	r3, r7, #4
 800d672:	68f9      	ldr	r1, [r7, #12]
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff ffb3 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	e03c      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3301      	adds	r3, #1
 800d688:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	617b      	str	r3, [r7, #20]
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	dcc5      	bgt.n	800d622 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	2b03      	cmp	r3, #3
 800d69e:	d006      	beq.n	800d6ae <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800d6a0:	2b03      	cmp	r3, #3
 800d6a2:	dc2b      	bgt.n	800d6fc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d01c      	beq.n	800d6e2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d00d      	beq.n	800d6c8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800d6ac:	e026      	b.n	800d6fc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800d6ae:	1d3b      	adds	r3, r7, #4
 800d6b0:	68f9      	ldr	r1, [r7, #12]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff ff94 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	e01d      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d6c8:	1d3b      	adds	r3, r7, #4
 800d6ca:	68f9      	ldr	r1, [r7, #12]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff ff87 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	e010      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d6e2:	1d3b      	adds	r3, r7, #4
 800d6e4:	68f9      	ldr	r1, [r7, #12]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7ff ff7a 	bl	800d5e0 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EclIPbEEbT_>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	e003      	b.n	800d6fe <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	60fb      	str	r3, [r7, #12]
	  return __last;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
    }
 800d6fe:	4618      	mov	r0, r3
 800d700:	3718      	adds	r7, #24
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4618      	mov	r0, r3
 800d712:	370c      	adds	r7, #12
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800d726:	463b      	mov	r3, r7
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff ffec 	bl	800d706 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4618      	mov	r0, r3
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800d738:	b5b0      	push	{r4, r5, r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800d740:	1d3b      	adds	r3, r7, #4
 800d742:	4618      	mov	r0, r3
 800d744:	f7ff ffdf 	bl	800d706 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800d748:	f107 030c 	add.w	r3, r7, #12
 800d74c:	4629      	mov	r1, r5
 800d74e:	4618      	mov	r0, r3
 800d750:	f001 f827 	bl	800e7a2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>
 800d754:	bf00      	nop
 800d756:	4620      	mov	r0, r4
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bdb0      	pop	{r4, r5, r7, pc}

0800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	4619      	mov	r1, r3
 800d770:	4610      	mov	r0, r2
 800d772:	f7f6 fc56 	bl	8004022 <_ZZN3jlb10Controller15lateral_controlEvENKUlbE0_clEb>
 800d776:	4603      	mov	r3, r0
 800d778:	f083 0301 	eor.w	r3, r3, #1
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800d786:	b580      	push	{r7, lr}
 800d788:	b086      	sub	sp, #24
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	60f8      	str	r0, [r7, #12]
 800d78e:	60b9      	str	r1, [r7, #8]
 800d790:	713a      	strb	r2, [r7, #4]
 800d792:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	109b      	asrs	r3, r3, #2
 800d79c:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800d79e:	e036      	b.n	800d80e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800d7a0:	1d3b      	adds	r3, r7, #4
 800d7a2:	68f9      	ldr	r1, [r7, #12]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff ffda 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	e063      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d7ba:	1d3b      	adds	r3, r7, #4
 800d7bc:	68f9      	ldr	r1, [r7, #12]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff ffcd 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d001      	beq.n	800d7ce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	e056      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d7d4:	1d3b      	adds	r3, r7, #4
 800d7d6:	68f9      	ldr	r1, [r7, #12]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff ffc0 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d001      	beq.n	800d7e8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	e049      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d7ee:	1d3b      	adds	r3, r7, #4
 800d7f0:	68f9      	ldr	r1, [r7, #12]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff ffb3 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d001      	beq.n	800d802 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	e03c      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	3301      	adds	r3, #1
 800d806:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	617b      	str	r3, [r7, #20]
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2b00      	cmp	r3, #0
 800d812:	dcc5      	bgt.n	800d7a0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d006      	beq.n	800d82c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800d81e:	2b03      	cmp	r3, #3
 800d820:	dc2b      	bgt.n	800d87a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800d822:	2b01      	cmp	r3, #1
 800d824:	d01c      	beq.n	800d860 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800d826:	2b02      	cmp	r3, #2
 800d828:	d00d      	beq.n	800d846 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800d82a:	e026      	b.n	800d87a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800d82c:	1d3b      	adds	r3, r7, #4
 800d82e:	68f9      	ldr	r1, [r7, #12]
 800d830:	4618      	mov	r0, r3
 800d832:	f7ff ff94 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	e01d      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3301      	adds	r3, #1
 800d844:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d846:	1d3b      	adds	r3, r7, #4
 800d848:	68f9      	ldr	r1, [r7, #12]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff ff87 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	e010      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3301      	adds	r3, #1
 800d85e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800d860:	1d3b      	adds	r3, r7, #4
 800d862:	68f9      	ldr	r1, [r7, #12]
 800d864:	4618      	mov	r0, r3
 800d866:	f7ff ff7a 	bl	800d75e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EclIPbEEbT_>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	e003      	b.n	800d87c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3301      	adds	r3, #1
 800d878:	60fb      	str	r3, [r7, #12]
	  return __last;
 800d87a:	68bb      	ldr	r3, [r7, #8]
    }
 800d87c:	4618      	mov	r0, r3
 800d87e:	3718      	adds	r7, #24
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 ff94 	bl	800e7be <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	68b9      	ldr	r1, [r7, #8]
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 ff90 	bl	800e7d6 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800d8c8:	1d3b      	adds	r3, r7, #4
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 ff9b 	bl	800e806 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800d8e4:	1d3b      	adds	r3, r7, #4
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fd fc12 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	68b9      	ldr	r1, [r7, #8]
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f000 ff87 	bl	800e81c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800d90e:	4603      	mov	r3, r0
 800d910:	4618      	mov	r0, r3
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f7ff ffda 	bl	800d8dc <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800d928:	4602      	mov	r2, r0
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	1a9b      	subs	r3, r3, r2
 800d92e:	109b      	asrs	r3, r3, #2
 800d930:	461a      	mov	r2, r3
 800d932:	1d3b      	adds	r3, r7, #4
 800d934:	4611      	mov	r1, r2
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff fd1a 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d93c:	4603      	mov	r3, r0
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d950:	e00f      	b.n	800d972 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800d952:	1d3b      	adds	r3, r7, #4
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fd33 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f000 fcf8 	bl	800e352 <_ZSt11__addressofIfEPT_RS0_>
 800d962:	4603      	mov	r3, r0
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fcff 	bl	800e368 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800d96a:	1d3b      	adds	r3, r7, #4
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff fd17 	bl	800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800d972:	463a      	mov	r2, r7
 800d974:	1d3b      	adds	r3, r7, #4
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fd fbd4 	bl	800b126 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800d97e:	4603      	mov	r3, r0
 800d980:	f083 0301 	eor.w	r3, r3, #1
 800d984:	b2db      	uxtb	r3, r3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1e3      	bne.n	800d952 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800d98a:	bf00      	nop
 800d98c:	bf00      	nop
 800d98e:	3708      	adds	r7, #8
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
 800d99e:	bf00      	nop
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b084      	sub	sp, #16
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	60b9      	str	r1, [r7, #8]
 800d9b4:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800d9b6:	f7f5 fb83 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d006      	beq.n	800d9ce <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 ff46 	bl	800e856 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	e006      	b.n	800d9dc <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	68b9      	ldr	r1, [r7, #8]
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 ff62 	bl	800e89c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	bf00      	nop
    }
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	68b9      	ldr	r1, [r7, #8]
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7fc fdce 	bl	800a596 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800da0e:	e009      	b.n	800da24 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 ff72 	bl	800e8fa <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800da16:	4603      	mov	r3, r0
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 ff79 	bl	800e910 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3318      	adds	r3, #24
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d1f1      	bne.n	800da10 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800da2c:	bf00      	nop
 800da2e:	bf00      	nop
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	68b9      	ldr	r1, [r7, #8]
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f000 ff6d 	bl	800e926 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800da4c:	4603      	mov	r3, r0
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
 800da5e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800da60:	e009      	b.n	800da76 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 ff77 	bl	800e956 <_ZSt11__addressofIcEPT_RS0_>
 800da68:	4603      	mov	r3, r0
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 ff7e 	bl	800e96c <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3301      	adds	r3, #1
 800da74:	607b      	str	r3, [r7, #4]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d1f1      	bne.n	800da62 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800da7e:	bf00      	nop
 800da80:	bf00      	nop
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
 800da92:	bf00      	nop
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800da9e:	b590      	push	{r4, r7, lr}
 800daa0:	b083      	sub	sp, #12
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800daa8:	6838      	ldr	r0, [r7, #0]
 800daaa:	f000 ff6a 	bl	800e982 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800daae:	4603      	mov	r3, r0
 800dab0:	4619      	mov	r1, r3
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f011 fb70 	bl	801f198 <_ZNSaIcEC1ERKS_>
 800dab8:	687c      	ldr	r4, [r7, #4]
 800daba:	6838      	ldr	r0, [r7, #0]
 800dabc:	f000 ff61 	bl	800e982 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800dac0:	4603      	mov	r3, r0
 800dac2:	4619      	mov	r1, r3
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 ff67 	bl	800e998 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4618      	mov	r0, r3
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd90      	pop	{r4, r7, pc}

0800dad4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	601a      	str	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4618      	mov	r0, r3
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800daf4:	b590      	push	{r4, r7, lr}
 800daf6:	b087      	sub	sp, #28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f000 ff6c 	bl	800e9de <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800db06:	4604      	mov	r4, r0
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f7fd f82d 	bl	800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800db0e:	4603      	mov	r3, r0
 800db10:	1ae2      	subs	r2, r4, r3
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	429a      	cmp	r2, r3
 800db16:	bf34      	ite	cc
 800db18:	2301      	movcc	r3, #1
 800db1a:	2300      	movcs	r3, #0
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d002      	beq.n	800db28 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f011 fb40 	bl	801f1a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f7fd f81d 	bl	800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800db2e:	4604      	mov	r4, r0
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f7fd f819 	bl	800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800db36:	4603      	mov	r3, r0
 800db38:	613b      	str	r3, [r7, #16]
 800db3a:	f107 0208 	add.w	r2, r7, #8
 800db3e:	f107 0310 	add.w	r3, r7, #16
 800db42:	4611      	mov	r1, r2
 800db44:	4618      	mov	r0, r3
 800db46:	f7fe f826 	bl	800bb96 <_ZSt3maxIjERKT_S2_S2_>
 800db4a:	4603      	mov	r3, r0
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4423      	add	r3, r4
 800db50:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f7fd f808 	bl	800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800db58:	4602      	mov	r2, r0
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d306      	bcc.n	800db6e <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 ff3c 	bl	800e9de <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800db66:	4602      	mov	r2, r0
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d904      	bls.n	800db78 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 ff35 	bl	800e9de <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800db74:	4603      	mov	r3, r0
 800db76:	e000      	b.n	800db7a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800db78:	697b      	ldr	r3, [r7, #20]
      }
 800db7a:	4618      	mov	r0, r3
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}

0800db82 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800db82:	b580      	push	{r7, lr}
 800db84:	b084      	sub	sp, #16
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	f107 030c 	add.w	r3, r7, #12
 800db90:	4611      	mov	r1, r2
 800db92:	4618      	mov	r0, r3
 800db94:	f7ff ff9e 	bl	800dad4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800dba4:	b590      	push	{r4, r7, lr}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f83a 	bl	800dc28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	681c      	ldr	r4, [r3, #0]
 800dbb8:	6838      	ldr	r0, [r7, #0]
 800dbba:	f000 f835 	bl	800dc28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	1ae3      	subs	r3, r4, r3
 800dbc4:	10db      	asrs	r3, r3, #3
 800dbc6:	4a03      	ldr	r2, [pc, #12]	; (800dbd4 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800dbc8:	fb02 f303 	mul.w	r3, r2, r3
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd90      	pop	{r4, r7, pc}
 800dbd4:	aaaaaaab 	.word	0xaaaaaaab

0800dbd8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d006      	beq.n	800dbf6 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f000 ff07 	bl	800ea00 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	e000      	b.n	800dbf8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800dbf6:	2300      	movs	r3, #0
      }
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b087      	sub	sp, #28
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
 800dc0c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800dc0e:	f88d 4000 	strb.w	r4, [sp]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	68b9      	ldr	r1, [r7, #8]
 800dc18:	68f8      	ldr	r0, [r7, #12]
 800dc1a:	f000 ff14 	bl	800ea46 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800dc1e:	4603      	mov	r3, r0
      }
 800dc20:	4618      	mov	r0, r3
 800dc22:	3714      	adds	r7, #20
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd90      	pop	{r4, r7, pc}

0800dc28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b082      	sub	sp, #8
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800dc48:	6838      	ldr	r0, [r7, #0]
 800dc4a:	f000 ff0e 	bl	800ea6a <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800dc4e:	bf00      	nop
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6819      	ldr	r1, [r3, #0]
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	4613      	mov	r3, r2
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	4413      	add	r3, r2
 800dc6c:	00db      	lsls	r3, r3, #3
 800dc6e:	425b      	negs	r3, r3
 800dc70:	440b      	add	r3, r1
 800dc72:	60fb      	str	r3, [r7, #12]
 800dc74:	f107 020c 	add.w	r2, r7, #12
 800dc78:	f107 0308 	add.w	r3, r7, #8
 800dc7c:	4611      	mov	r1, r2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff ff28 	bl	800dad4 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
 800dcae:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800dcb0:	e009      	b.n	800dcc6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f000 fef6 	bl	800eaa4 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fefd 	bl	800eaba <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	3318      	adds	r3, #24
 800dcc4:	607b      	str	r3, [r7, #4]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d1f1      	bne.n	800dcb2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800dcce:	bf00      	nop
 800dcd0:	bf00      	nop
 800dcd2:	3708      	adds	r7, #8
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800dcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800dce2:	687c      	ldr	r4, [r7, #4]
 800dce4:	6838      	ldr	r0, [r7, #0]
 800dce6:	f7fc ff3f 	bl	800ab68 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800dcea:	4605      	mov	r5, r0
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 fefc 	bl	800eaec <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	f107 030c 	add.w	r3, r7, #12
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 fee7 	bl	800ead0 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800dd02:	f107 030c 	add.w	r3, r7, #12
 800dd06:	461a      	mov	r2, r3
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 fef9 	bl	800eb02 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800dd10:	f107 030c 	add.w	r3, r7, #12
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fc fd5e 	bl	800a7d6 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800dd1a:	6838      	ldr	r0, [r7, #0]
 800dd1c:	f000 ff05 	bl	800eb2a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800dd20:	4605      	mov	r5, r0
 800dd22:	6838      	ldr	r0, [r7, #0]
 800dd24:	f000 ff11 	bl	800eb4a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800dd28:	4606      	mov	r6, r0
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd fbb7 	bl	800b4a4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800dd36:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800dd38:	4622      	mov	r2, r4
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f000 ff15 	bl	800eb6c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800dd42:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	605a      	str	r2, [r3, #4]
      }
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd52 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800dd52:	b480      	push	{r7}
 800dd54:	b083      	sub	sp, #12
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	601a      	str	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4618      	mov	r0, r3
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800dd72:	b590      	push	{r4, r7, lr}
 800dd74:	b087      	sub	sp, #28
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	60f8      	str	r0, [r7, #12]
 800dd7a:	60b9      	str	r1, [r7, #8]
 800dd7c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f000 ff05 	bl	800eb8e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800dd84:	4604      	mov	r4, r0
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 ff12 	bl	800ebb0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	1ae2      	subs	r2, r4, r3
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	bf34      	ite	cc
 800dd96:	2301      	movcc	r3, #1
 800dd98:	2300      	movcs	r3, #0
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f011 fa01 	bl	801f1a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 ff02 	bl	800ebb0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ddac:	4604      	mov	r4, r0
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f000 fefe 	bl	800ebb0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	f107 0208 	add.w	r2, r7, #8
 800ddbc:	f107 0310 	add.w	r3, r7, #16
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fd fee7 	bl	800bb96 <_ZSt3maxIjERKT_S2_S2_>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4423      	add	r3, r4
 800ddce:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f000 feed 	bl	800ebb0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d306      	bcc.n	800ddec <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f000 fed5 	bl	800eb8e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800dde4:	4602      	mov	r2, r0
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d904      	bls.n	800ddf6 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 fece 	bl	800eb8e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	e000      	b.n	800ddf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800ddf6:	697b      	ldr	r3, [r7, #20]
      }
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	371c      	adds	r7, #28
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd90      	pop	{r4, r7, pc}

0800de00 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	f107 030c 	add.w	r3, r7, #12
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f7ff ff9e 	bl	800dd52 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	4618      	mov	r0, r3
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800de20:	b590      	push	{r4, r7, lr}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f826 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800de30:	4603      	mov	r3, r0
 800de32:	681c      	ldr	r4, [r3, #0]
 800de34:	6838      	ldr	r0, [r7, #0]
 800de36:	f000 f821 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800de3a:	4603      	mov	r3, r0
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	1ae3      	subs	r3, r4, r3
 800de40:	10db      	asrs	r3, r3, #3
 800de42:	4a03      	ldr	r2, [pc, #12]	; (800de50 <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800de44:	fb02 f303 	mul.w	r3, r2, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd90      	pop	{r4, r7, pc}
 800de50:	aaaaaaab 	.word	0xaaaaaaab

0800de54 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d006      	beq.n	800de72 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6839      	ldr	r1, [r7, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 feb7 	bl	800ebdc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800de6e:	4603      	mov	r3, r0
 800de70:	e000      	b.n	800de74 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800de72:	2300      	movs	r3, #0
      }
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800de92:	b590      	push	{r4, r7, lr}
 800de94:	b085      	sub	sp, #20
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	607a      	str	r2, [r7, #4]
 800de9e:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f000 febe 	bl	800ec22 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800dea6:	4604      	mov	r4, r0
 800dea8:	68b8      	ldr	r0, [r7, #8]
 800deaa:	f000 feba 	bl	800ec22 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800deae:	4601      	mov	r1, r0
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	4620      	mov	r0, r4
 800deb6:	f000 febf 	bl	800ec38 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800deba:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800debc:	4618      	mov	r0, r3
 800debe:	3714      	adds	r7, #20
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd90      	pop	{r4, r7, pc}

0800dec4 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6819      	ldr	r1, [r3, #0]
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	4613      	mov	r3, r2
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	4413      	add	r3, r2
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	425b      	negs	r3, r3
 800dede:	440b      	add	r3, r1
 800dee0:	60fb      	str	r3, [r7, #12]
 800dee2:	f107 020c 	add.w	r2, r7, #12
 800dee6:	f107 0308 	add.w	r3, r7, #8
 800deea:	4611      	mov	r1, r2
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff ff30 	bl	800dd52 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4618      	mov	r0, r3
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800df1c:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800df20:	4618      	mov	r0, r3
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800df34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800df38:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff ffea 	bl	800df14 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800df40:	4603      	mov	r3, r0
 800df42:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800df44:	f107 0208 	add.w	r2, r7, #8
 800df48:	f107 030c 	add.w	r3, r7, #12
 800df4c:	4611      	mov	r1, r2
 800df4e:	4618      	mov	r0, r3
 800df50:	f000 f98b 	bl	800e26a <_ZSt3minIjERKT_S2_S2_>
 800df54:	4603      	mov	r3, r0
 800df56:	681b      	ldr	r3, [r3, #0]
      }
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	60fb      	str	r3, [r7, #12]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800df72:	f7f5 f8a5 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d004      	beq.n	800df86 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800df7c:	68b8      	ldr	r0, [r7, #8]
 800df7e:	f011 f8f9 	bl	801f174 <_Znwj>
 800df82:	4603      	mov	r3, r0
 800df84:	e006      	b.n	800df94 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800df86:	2200      	movs	r2, #0
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f001 fa85 	bl	800f49a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800df90:	4603      	mov	r3, r0
 800df92:	bf00      	nop
      { return __a.allocate(__n); }
 800df94:	4618      	mov	r0, r3
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	68b9      	ldr	r1, [r7, #8]
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f000 fe5d 	bl	800ec70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800dfb6:	4603      	mov	r3, r0
    }
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3718      	adds	r7, #24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800dfcc:	f7f5 f878 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d006      	beq.n	800dfe4 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	68b9      	ldr	r1, [r7, #8]
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f000 fe58 	bl	800ec90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	e006      	b.n	800dff2 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f000 fe73 	bl	800ecd4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800dfee:	4603      	mov	r3, r0
 800dff0:	bf00      	nop
    }
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800dffa:	b480      	push	{r7}
 800dffc:	b085      	sub	sp, #20
 800dffe:	af00      	add	r7, sp, #0
 800e000:	60f8      	str	r0, [r7, #12]
 800e002:	60b9      	str	r1, [r7, #8]
 800e004:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	1ad3      	subs	r3, r2, r3
    }
 800e00c:	4618      	mov	r0, r3
 800e00e:	3714      	adds	r7, #20
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f000 fe7b 	bl	800ed22 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800e02c:	4604      	mov	r4, r0
 800e02e:	68b8      	ldr	r0, [r7, #8]
 800e030:	f000 fe77 	bl	800ed22 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800e034:	4601      	mov	r1, r0
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	687a      	ldr	r2, [r7, #4]
 800e03a:	4620      	mov	r0, r4
 800e03c:	f000 fe86 	bl	800ed4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800e040:	4603      	mov	r3, r0
    }
 800e042:	4618      	mov	r0, r3
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	bd90      	pop	{r4, r7, pc}

0800e04a <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800e060:	b5b0      	push	{r4, r5, r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f7fe fcb3 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800e072:	4604      	mov	r4, r0
 800e074:	68b8      	ldr	r0, [r7, #8]
 800e076:	f7fe fcaf 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800e07a:	4605      	mov	r5, r0
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe fcaa 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800e084:	4603      	mov	r3, r0
 800e086:	461a      	mov	r2, r3
 800e088:	4629      	mov	r1, r5
 800e08a:	4620      	mov	r0, r4
 800e08c:	f000 fe6f 	bl	800ed6e <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>
 800e090:	4602      	mov	r2, r0
 800e092:	1d3b      	adds	r3, r7, #4
 800e094:	4611      	mov	r1, r2
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe fcb9 	bl	800ca0e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800e09c:	4603      	mov	r3, r0
    }
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bdb0      	pop	{r4, r5, r7, pc}

0800e0a6 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e0a6:	b5b0      	push	{r4, r5, r7, lr}
 800e0a8:	b084      	sub	sp, #16
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	60f8      	str	r0, [r7, #12]
 800e0ae:	60b9      	str	r1, [r7, #8]
 800e0b0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7fe fc90 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	68b8      	ldr	r0, [r7, #8]
 800e0bc:	f7fe fc8c 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fe63 	bl	800ed8e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f000 fe6b 	bl	800edaa <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fe76 	bl	800edca <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>
 800e0de:	4603      	mov	r3, r0
    }
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bdb0      	pop	{r4, r5, r7, pc}

0800e0e8 <_ZSt7advanceIPcjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b085      	sub	sp, #20
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7fd fbd3 	bl	800b8a2 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800e0fc:	4622      	mov	r2, r4
 800e0fe:	68f9      	ldr	r1, [r7, #12]
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f000 fe77 	bl	800edf4 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>
    }
 800e106:	bf00      	nop
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd90      	pop	{r4, r7, pc}

0800e10e <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	60f8      	str	r0, [r7, #12]
 800e116:	60b9      	str	r1, [r7, #8]
 800e118:	607a      	str	r2, [r7, #4]
 800e11a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	68b9      	ldr	r1, [r7, #8]
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 fe79 	bl	800ee18 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>
 800e126:	4603      	mov	r3, r0
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800e130:	b590      	push	{r4, r7, lr}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f000 fe7d 	bl	800ee3c <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800e142:	4604      	mov	r4, r0
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f7fc fca5 	bl	800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800e14a:	4603      	mov	r3, r0
 800e14c:	1ae2      	subs	r2, r4, r3
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	429a      	cmp	r2, r3
 800e152:	bf34      	ite	cc
 800e154:	2301      	movcc	r3, #1
 800e156:	2300      	movcs	r3, #0
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f011 f822 	bl	801f1a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f7fc fc95 	bl	800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800e16a:	4604      	mov	r4, r0
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7fc fc91 	bl	800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800e172:	4603      	mov	r3, r0
 800e174:	613b      	str	r3, [r7, #16]
 800e176:	f107 0208 	add.w	r2, r7, #8
 800e17a:	f107 0310 	add.w	r3, r7, #16
 800e17e:	4611      	mov	r1, r2
 800e180:	4618      	mov	r0, r3
 800e182:	f7fd fd08 	bl	800bb96 <_ZSt3maxIjERKT_S2_S2_>
 800e186:	4603      	mov	r3, r0
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4423      	add	r3, r4
 800e18c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f7fc fc80 	bl	800aa94 <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800e194:	4602      	mov	r2, r0
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	4293      	cmp	r3, r2
 800e19a:	d306      	bcc.n	800e1aa <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f000 fe4d 	bl	800ee3c <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d904      	bls.n	800e1b4 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 fe46 	bl	800ee3c <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	e000      	b.n	800e1b6 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 800e1b4:	697b      	ldr	r3, [r7, #20]
      }
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	371c      	adds	r7, #28
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd90      	pop	{r4, r7, pc}

0800e1be <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800e1be:	b590      	push	{r4, r7, lr}
 800e1c0:	b085      	sub	sp, #20
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	60f8      	str	r0, [r7, #12]
 800e1c6:	60b9      	str	r1, [r7, #8]
 800e1c8:	607a      	str	r2, [r7, #4]
 800e1ca:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 fe46 	bl	800ee5e <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	68b8      	ldr	r0, [r7, #8]
 800e1d6:	f000 fe42 	bl	800ee5e <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800e1da:	4601      	mov	r1, r0
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f000 fdb3 	bl	800ed4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800e1e6:	4603      	mov	r3, r0
    }
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3714      	adds	r7, #20
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd90      	pop	{r4, r7, pc}

0800e1f0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fd f824 	bl	800b248 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800e200:	4603      	mov	r3, r0
 800e202:	4618      	mov	r0, r3
 800e204:	f000 fe3a 	bl	800ee7c <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 800e208:	4603      	mov	r3, r0
 800e20a:	4618      	mov	r0, r3
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	60f8      	str	r0, [r7, #12]
 800e21a:	60b9      	str	r1, [r7, #8]
 800e21c:	607a      	str	r2, [r7, #4]
 800e21e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	68b9      	ldr	r1, [r7, #8]
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f000 fe42 	bl	800eeb0 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 800e22c:	4603      	mov	r3, r0
      }
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
 800e236:	b480      	push	{r7}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4619      	mov	r1, r3
 800e25e:	68b8      	ldr	r0, [r7, #8]
 800e260:	f010 ff86 	bl	801f170 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800e26a:	b480      	push	{r7}
 800e26c:	b083      	sub	sp, #12
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d201      	bcs.n	800e284 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	e000      	b.n	800e286 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800e284:	687b      	ldr	r3, [r7, #4]
    }
 800e286:	4618      	mov	r0, r3
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 800e292:	b480      	push	{r7}
 800e294:	b083      	sub	sp, #12
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4618      	mov	r0, r3
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e2a8:	b5b0      	push	{r4, r5, r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f000 fe4e 	bl	800ef56 <_ZSt12__niter_baseIPPfET_S2_>
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	68b8      	ldr	r0, [r7, #8]
 800e2be:	f000 fe4a 	bl	800ef56 <_ZSt12__niter_baseIPPfET_S2_>
 800e2c2:	4605      	mov	r5, r0
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f000 fe45 	bl	800ef56 <_ZSt12__niter_baseIPPfET_S2_>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 fe4a 	bl	800ef6c <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	1d3b      	adds	r3, r7, #4
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 fe54 	bl	800ef8c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800e2e4:	4603      	mov	r3, r0
    }
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bdb0      	pop	{r4, r5, r7, pc}

0800e2ee <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800e2ee:	b5b0      	push	{r4, r5, r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	60f8      	str	r0, [r7, #12]
 800e2f6:	60b9      	str	r1, [r7, #8]
 800e2f8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f000 fe2b 	bl	800ef56 <_ZSt12__niter_baseIPPfET_S2_>
 800e300:	4604      	mov	r4, r0
 800e302:	68b8      	ldr	r0, [r7, #8]
 800e304:	f000 fe27 	bl	800ef56 <_ZSt12__niter_baseIPPfET_S2_>
 800e308:	4605      	mov	r5, r0
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fe22 	bl	800ef56 <_ZSt12__niter_baseIPPfET_S2_>
 800e312:	4603      	mov	r3, r0
 800e314:	461a      	mov	r2, r3
 800e316:	4629      	mov	r1, r5
 800e318:	4620      	mov	r0, r4
 800e31a:	f000 fe43 	bl	800efa4 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800e31e:	4602      	mov	r2, r0
 800e320:	1d3b      	adds	r3, r7, #4
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f000 fe31 	bl	800ef8c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800e32a:	4603      	mov	r3, r0
    }
 800e32c:	4618      	mov	r0, r3
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bdb0      	pop	{r4, r5, r7, pc}

0800e334 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4619      	mov	r1, r3
 800e346:	68b8      	ldr	r0, [r7, #8]
 800e348:	f010 ff12 	bl	801f170 <_ZdlPvj>
      }
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e352:	b480      	push	{r7}
 800e354:	b083      	sub	sp, #12
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4618      	mov	r0, r3
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7fd fd14 	bl	800bd9e <_ZSt10destroy_atIfEvPT_>
    }
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 800e37e:	b480      	push	{r7}
 800e380:	b085      	sub	sp, #20
 800e382:	af00      	add	r7, sp, #0
 800e384:	60f8      	str	r0, [r7, #12]
 800e386:	60b9      	str	r1, [r7, #8]
 800e388:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	429a      	cmp	r2, r3
 800e394:	d009      	beq.n	800e3aa <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d201      	bcs.n	800e3a6 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 800e3a2:	23ff      	movs	r3, #255	; 0xff
 800e3a4:	e002      	b.n	800e3ac <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e000      	b.n	800e3ac <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800e3aa:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e3b8:	b590      	push	{r4, r7, lr}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7fc fea4 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	6838      	ldr	r0, [r7, #0]
 800e3cc:	f7fc fea0 	bl	800b110 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	4804      	ldr	r0, [pc, #16]	; (800e3e8 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 800e3d8:	f7ff ffd1 	bl	800e37e <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	4618      	mov	r0, r3
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd90      	pop	{r4, r7, pc}
 800e3e6:	bf00      	nop
 800e3e8:	08023108 	.word	0x08023108

0800e3ec <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800e3ec:	b590      	push	{r4, r7, lr}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800e3fa:	463b      	mov	r3, r7
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	68f8      	ldr	r0, [r7, #12]
 800e402:	f000 fe15 	bl	800f030 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	613b      	str	r3, [r7, #16]
 800e40a:	e013      	b.n	800e434 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 800e40c:	463b      	mov	r3, r7
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	6939      	ldr	r1, [r7, #16]
 800e412:	4618      	mov	r0, r3
 800e414:	f7fe ffe0 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d005      	beq.n	800e42a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800e41e:	463b      	mov	r3, r7
 800e420:	693a      	ldr	r2, [r7, #16]
 800e422:	68b9      	ldr	r1, [r7, #8]
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f000 fe59 	bl	800f0dc <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800e42a:	f107 0310 	add.w	r3, r7, #16
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe ffb6 	bl	800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800e434:	1d3a      	adds	r2, r7, #4
 800e436:	f107 0310 	add.w	r3, r7, #16
 800e43a:	4611      	mov	r1, r2
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7ff ffbb 	bl	800e3b8 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800e442:	4604      	mov	r4, r0
 800e444:	f107 0314 	add.w	r3, r7, #20
 800e448:	2100      	movs	r1, #0
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7f4 fe40 	bl	80030d0 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800e450:	7d39      	ldrb	r1, [r7, #20]
 800e452:	4620      	mov	r0, r4
 800e454:	f7f4 fe48 	bl	80030e8 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1d6      	bne.n	800e40c <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	371c      	adds	r7, #28
 800e464:	46bd      	mov	sp, r7
 800e466:	bd90      	pop	{r4, r7, pc}

0800e468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800e468:	b480      	push	{r7}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
	--_M_current;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	1f1a      	subs	r2, r3, #4
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	601a      	str	r2, [r3, #0]
	return *this;
 800e47a:	687b      	ldr	r3, [r7, #4]
      }
 800e47c:	4618      	mov	r0, r3
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800e494:	e00a      	b.n	800e4ac <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 800e496:	f107 0308 	add.w	r3, r7, #8
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ffe4 	bl	800e468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	68b9      	ldr	r1, [r7, #8]
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f000 fe18 	bl	800f0dc <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 800e4ac:	f107 020c 	add.w	r2, r7, #12
 800e4b0:	f107 0308 	add.w	r3, r7, #8
 800e4b4:	4611      	mov	r1, r2
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fc fe4d 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	bfcc      	ite	gt
 800e4c2:	2301      	movgt	r3, #1
 800e4c4:	2300      	movle	r3, #0
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d1e4      	bne.n	800e496 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 800e4cc:	bf00      	nop
 800e4ce:	bf00      	nop
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	425b      	negs	r3, r3
 800e4ea:	4413      	add	r3, r2
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	f107 020c 	add.w	r2, r7, #12
 800e4f2:	f107 0308 	add.w	r3, r7, #8
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fc fdf9 	bl	800b0f0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4618      	mov	r0, r3
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	68b9      	ldr	r1, [r7, #8]
 800e51a:	f107 0018 	add.w	r0, r7, #24
 800e51e:	f7fe ff5b 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d020      	beq.n	800e56a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	f107 0018 	add.w	r0, r7, #24
 800e530:	f7fe ff52 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d004      	beq.n	800e544 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800e53a:	6879      	ldr	r1, [r7, #4]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 fe0d 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800e542:	e032      	b.n	800e5aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	68b9      	ldr	r1, [r7, #8]
 800e548:	f107 0018 	add.w	r0, r7, #24
 800e54c:	f7fe ff44 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d004      	beq.n	800e560 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f000 fdff 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800e55e:	e024      	b.n	800e5aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800e560:	68b9      	ldr	r1, [r7, #8]
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f000 fdfa 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800e568:	e01f      	b.n	800e5aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	68b9      	ldr	r1, [r7, #8]
 800e56e:	f107 0018 	add.w	r0, r7, #24
 800e572:	f7fe ff31 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d004      	beq.n	800e586 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 800e57c:	68b9      	ldr	r1, [r7, #8]
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f000 fdec 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800e584:	e011      	b.n	800e5aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	6879      	ldr	r1, [r7, #4]
 800e58a:	f107 0018 	add.w	r0, r7, #24
 800e58e:	f7fe ff23 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d004      	beq.n	800e5a2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 800e598:	6839      	ldr	r1, [r7, #0]
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f000 fdde 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800e5a0:	e003      	b.n	800e5aa <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 800e5a2:	6879      	ldr	r1, [r7, #4]
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f000 fdd9 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800e5aa:	bf00      	nop
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800e5b2:	b590      	push	{r4, r7, lr}
 800e5b4:	b087      	sub	sp, #28
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	60b9      	str	r1, [r7, #8]
 800e5bc:	607a      	str	r2, [r7, #4]
 800e5be:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800e5c0:	e004      	b.n	800e5cc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 800e5c2:	f107 030c 	add.w	r3, r7, #12
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fe feea 	bl	800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800e5cc:	463b      	mov	r3, r7
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	68f9      	ldr	r1, [r7, #12]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe ff00 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1f1      	bne.n	800e5c2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 800e5de:	f107 0308 	add.w	r3, r7, #8
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7ff ff40 	bl	800e468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800e5e8:	e004      	b.n	800e5f4 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 800e5ea:	f107 0308 	add.w	r3, r7, #8
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7ff ff3a 	bl	800e468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800e5f4:	463b      	mov	r3, r7
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	6879      	ldr	r1, [r7, #4]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fe feec 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1f1      	bne.n	800e5ea <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 800e606:	f107 0208 	add.w	r2, r7, #8
 800e60a:	f107 030c 	add.w	r3, r7, #12
 800e60e:	4611      	mov	r1, r2
 800e610:	4618      	mov	r0, r3
 800e612:	f7ff fed1 	bl	800e3b8 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800e616:	4604      	mov	r4, r0
 800e618:	f107 0314 	add.w	r3, r7, #20
 800e61c:	2100      	movs	r1, #0
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f4 fd56 	bl	80030d0 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800e624:	7d39      	ldrb	r1, [r7, #20]
 800e626:	4620      	mov	r0, r4
 800e628:	f7f4 fd5e 	bl	80030e8 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800e62c:	4603      	mov	r3, r0
 800e62e:	f083 0301 	eor.w	r3, r3, #1
 800e632:	b2db      	uxtb	r3, r3
 800e634:	2b00      	cmp	r3, #0
 800e636:	d001      	beq.n	800e63c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	e009      	b.n	800e650 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 800e63c:	68b9      	ldr	r1, [r7, #8]
 800e63e:	68f8      	ldr	r0, [r7, #12]
 800e640:	f000 fd8c 	bl	800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 800e644:	f107 030c 	add.w	r3, r7, #12
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fea9 	bl	800d3a0 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800e64e:	e7bd      	b.n	800e5cc <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 800e650:	4618      	mov	r0, r3
 800e652:	371c      	adds	r7, #28
 800e654:	46bd      	mov	sp, r7
 800e656:	bd90      	pop	{r4, r7, pc}

0800e658 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4618      	mov	r0, r3
 800e664:	370c      	adds	r7, #12
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr

0800e66e <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800e66e:	b5b0      	push	{r4, r5, r7, lr}
 800e670:	b084      	sub	sp, #16
 800e672:	af00      	add	r7, sp, #0
 800e674:	60f8      	str	r0, [r7, #12]
 800e676:	60b9      	str	r1, [r7, #8]
 800e678:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f7ff f92e 	bl	800d8dc <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800e680:	4604      	mov	r4, r0
 800e682:	68b8      	ldr	r0, [r7, #8]
 800e684:	f7ff f92a 	bl	800d8dc <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800e688:	4605      	mov	r5, r0
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff f926 	bl	800d8dc <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800e690:	4603      	mov	r3, r0
 800e692:	461a      	mov	r2, r3
 800e694:	4629      	mov	r1, r5
 800e696:	4620      	mov	r0, r4
 800e698:	f000 fd77 	bl	800f18a <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800e69c:	4603      	mov	r3, r0
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f7ff f939 	bl	800d918 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800e6a6:	4603      	mov	r3, r0
    }
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bdb0      	pop	{r4, r5, r7, pc}

0800e6b0 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	ed2d 8b02 	vpush	{d8}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	ed93 8a00 	vldr	s16, [r3]
 800e6c6:	1d3b      	adds	r3, r7, #4
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe fe79 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	edd3 7a00 	vldr	s15, [r3]
 800e6d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6dc:	bf4c      	ite	mi
 800e6de:	2301      	movmi	r3, #1
 800e6e0:	2300      	movpl	r3, #0
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	ecbd 8b02 	vpop	{d8}
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800e6f0:	b590      	push	{r4, r7, lr}
 800e6f2:	b085      	sub	sp, #20
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800e6fa:	1d3b      	adds	r3, r7, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe fe5f 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e702:	4603      	mov	r3, r0
 800e704:	4618      	mov	r0, r3
 800e706:	f7fb fdb0 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e70a:	4603      	mov	r3, r0
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	60bb      	str	r3, [r7, #8]
      --__next;
 800e714:	f107 0308 	add.w	r3, r7, #8
 800e718:	4618      	mov	r0, r3
 800e71a:	f7ff fea5 	bl	800e468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800e71e:	e017      	b.n	800e750 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800e720:	f107 0308 	add.w	r3, r7, #8
 800e724:	4618      	mov	r0, r3
 800e726:	f7fe fe4b 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e72a:	4603      	mov	r3, r0
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fb fd9c 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e732:	4603      	mov	r3, r0
 800e734:	681c      	ldr	r4, [r3, #0]
 800e736:	1d3b      	adds	r3, r7, #4
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fe fe41 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e73e:	4603      	mov	r3, r0
 800e740:	601c      	str	r4, [r3, #0]
	  __last = __next;
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	607b      	str	r3, [r7, #4]
	  --__next;
 800e746:	f107 0308 	add.w	r3, r7, #8
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7ff fe8c 	bl	800e468 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800e750:	f107 010c 	add.w	r1, r7, #12
 800e754:	463b      	mov	r3, r7
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7ff ffa9 	bl	800e6b0 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1dd      	bne.n	800e720 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800e764:	f107 030c 	add.w	r3, r7, #12
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fb fd7e 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e76e:	4603      	mov	r3, r0
 800e770:	681c      	ldr	r4, [r3, #0]
 800e772:	1d3b      	adds	r3, r7, #4
 800e774:	4618      	mov	r0, r3
 800e776:	f7fe fe23 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e77a:	4603      	mov	r3, r0
 800e77c:	601c      	str	r4, [r3, #0]
    }
 800e77e:	bf00      	nop
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	bd90      	pop	{r4, r7, pc}

0800e786 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800e786:	b580      	push	{r7, lr}
 800e788:	b082      	sub	sp, #8
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800e790:	463b      	mov	r3, r7
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe feee 	bl	800d574 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEvEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800e7ac:	463b      	mov	r3, r7
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe ffa9 	bl	800d706 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEvEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800e7be:	b480      	push	{r7}
 800e7c0:	b083      	sub	sp, #12
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	6039      	str	r1, [r7, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	370c      	adds	r7, #12
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800e7d6:	b590      	push	{r4, r7, lr}
 800e7d8:	b085      	sub	sp, #20
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	60f8      	str	r0, [r7, #12]
 800e7de:	60b9      	str	r1, [r7, #8]
 800e7e0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7fd fcd0 	bl	800c188 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	68b8      	ldr	r0, [r7, #8]
 800e7ec:	f7fd fccc 	bl	800c188 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f000 fcd7 	bl	800f1aa <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800e7fc:	4603      	mov	r3, r0
    }
 800e7fe:	4618      	mov	r0, r3
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	bd90      	pop	{r4, r7, pc}

0800e806 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e806:	b480      	push	{r7}
 800e808:	b083      	sub	sp, #12
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800e828:	f7f4 fc4a 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d006      	beq.n	800e840 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f000 fcda 	bl	800f1f0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800e83c:	4603      	mov	r3, r0
 800e83e:	e006      	b.n	800e84e <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	68b9      	ldr	r1, [r7, #8]
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f000 f829 	bl	800e89c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800e84a:	4603      	mov	r3, r0
 800e84c:	bf00      	nop
    }
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800e856:	b480      	push	{r7}
 800e858:	b087      	sub	sp, #28
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	60f8      	str	r0, [r7, #12]
 800e85e:	60b9      	str	r1, [r7, #8]
 800e860:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	1ad3      	subs	r3, r2, r3
 800e868:	109b      	asrs	r3, r3, #2
 800e86a:	617b      	str	r3, [r7, #20]
 800e86c:	e00c      	b.n	800e888 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	601a      	str	r2, [r3, #0]
	      ++__first;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	3304      	adds	r3, #4
 800e87a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	3304      	adds	r3, #4
 800e880:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	3b01      	subs	r3, #1
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	dcef      	bgt.n	800e86e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800e88e:	687b      	ldr	r3, [r7, #4]
	}
 800e890:	4618      	mov	r0, r3
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800e8a8:	68ba      	ldr	r2, [r7, #8]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	109b      	asrs	r3, r3, #2
 800e8b0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d006      	beq.n	800e8c6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68f9      	ldr	r1, [r7, #12]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f013 f876 	bl	80219b2 <memmove>
	  return __result + _Num;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	4413      	add	r3, r2
	}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	4413      	add	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	68b8      	ldr	r0, [r7, #8]
 800e8f0:	f010 fc3e 	bl	801f170 <_ZdlPvj>
      }
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e8fa:	b480      	push	{r7}
 800e8fc:	b083      	sub	sp, #12
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4618      	mov	r0, r3
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f8a6 	bl	800ea6a <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800e91e:	bf00      	nop
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800e926:	b590      	push	{r4, r7, lr}
 800e928:	b085      	sub	sp, #20
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f000 fc7f 	bl	800f236 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800e938:	4604      	mov	r4, r0
 800e93a:	68b8      	ldr	r0, [r7, #8]
 800e93c:	f000 fc7b 	bl	800f236 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800e940:	4603      	mov	r3, r0
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	4619      	mov	r1, r3
 800e946:	4620      	mov	r0, r4
 800e948:	f000 fc80 	bl	800f24c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800e94c:	4603      	mov	r3, r0
    }
 800e94e:	4618      	mov	r0, r3
 800e950:	3714      	adds	r7, #20
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}

0800e956 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fc8c 	bl	800f292 <_ZSt10destroy_atIcEvPT_>
    }
 800e97a:	bf00      	nop
 800e97c:	3708      	adds	r7, #8
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	685a      	ldr	r2, [r3, #4]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	609a      	str	r2, [r3, #8]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	605a      	str	r2, [r3, #4]
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	685a      	ldr	r2, [r3, #4]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 f87f 	bl	800eaec <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f000 fc67 	bl	800f2c4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60fb      	str	r3, [r7, #12]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ea12:	f7f4 fb55 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d009      	beq.n	800ea30 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ea1c:	68ba      	ldr	r2, [r7, #8]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	4413      	add	r3, r2
 800ea24:	00db      	lsls	r3, r3, #3
 800ea26:	4618      	mov	r0, r3
 800ea28:	f010 fba4 	bl	801f174 <_Znwj>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	e006      	b.n	800ea3e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ea30:	2200      	movs	r2, #0
 800ea32:	68b9      	ldr	r1, [r7, #8]
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f000 ff23 	bl	800f880 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	bf00      	nop
      { return __a.allocate(__n); }
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3710      	adds	r7, #16
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b084      	sub	sp, #16
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	60f8      	str	r0, [r7, #12]
 800ea4e:	60b9      	str	r1, [r7, #8]
 800ea50:	607a      	str	r2, [r7, #4]
 800ea52:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	68b9      	ldr	r1, [r7, #8]
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f000 fc4e 	bl	800f2fc <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800ea60:	4603      	mov	r3, r0
      }
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7f5 fd4d 	bl	8004512 <_ZN3jlb4EdgeD1Ev>
    }
 800ea78:	bf00      	nop
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	4413      	add	r3, r2
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	4619      	mov	r1, r3
 800ea98:	68b8      	ldr	r0, [r7, #8]
 800ea9a:	f010 fb69 	bl	801f170 <_ZdlPvj>
      }
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f8c9 	bl	800ec5a <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	4618      	mov	r0, r3
 800eae0:	f000 fc29 	bl	800f336 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	60f8      	str	r0, [r7, #12]
 800eb0a:	60b9      	str	r1, [r7, #8]
 800eb0c:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6879      	ldr	r1, [r7, #4]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fc1c 	bl	800f350 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800eb18:	68b9      	ldr	r1, [r7, #8]
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f000 fc2a 	bl	800f374 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	4618      	mov	r0, r3
 800eb24:	3710      	adds	r7, #16
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	f107 030c 	add.w	r3, r7, #12
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 fc38 	bl	800f3b0 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	1d1a      	adds	r2, r3, #4
 800eb56:	f107 030c 	add.w	r3, r7, #12
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 fc27 	bl	800f3b0 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
 800eb78:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	68b9      	ldr	r1, [r7, #8]
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f000 fc26 	bl	800f3d0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800eb84:	4603      	mov	r3, r0
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b082      	sub	sp, #8
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f000 fc55 	bl	800f448 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 fc35 	bl	800f410 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800eba6:	4603      	mov	r3, r0
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	685a      	ldr	r2, [r3, #4]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	10db      	asrs	r3, r3, #3
 800ebc4:	4a04      	ldr	r2, [pc, #16]	; (800ebd8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800ebc6:	fb02 f303 	mul.w	r3, r2, r3
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	aaaaaaab 	.word	0xaaaaaaab

0800ebdc <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	60fb      	str	r3, [r7, #12]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ebee:	f7f4 fa67 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d009      	beq.n	800ec0c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	005b      	lsls	r3, r3, #1
 800ebfe:	4413      	add	r3, r2
 800ec00:	00db      	lsls	r3, r3, #3
 800ec02:	4618      	mov	r0, r3
 800ec04:	f010 fab6 	bl	801f174 <_Znwj>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	e006      	b.n	800ec1a <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	68b9      	ldr	r1, [r7, #8]
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f000 ff01 	bl	800fa18 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 800ec16:	4603      	mov	r3, r0
 800ec18:	bf00      	nop
      { return __a.allocate(__n); }
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800ec22:	b480      	push	{r7}
 800ec24:	b083      	sub	sp, #12
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr

0800ec38 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	68b9      	ldr	r1, [r7, #8]
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f000 fc07 	bl	800f45e <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 800ec50:	4603      	mov	r3, r0
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b082      	sub	sp, #8
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7f5 fc47 	bl	80044f6 <_ZN3jlb4NodeD1Ev>
    }
 800ec68:	bf00      	nop
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f7fb feaa 	bl	800a9da <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800ec86:	4603      	mov	r3, r0
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800ec90:	b480      	push	{r7}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ec9c:	68ba      	ldr	r2, [r7, #8]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	617b      	str	r3, [r7, #20]
 800eca4:	e00c      	b.n	800ecc0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	781a      	ldrb	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	617b      	str	r3, [r7, #20]
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	dcef      	bgt.n	800eca6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 800ecc6:	687b      	ldr	r3, [r7, #4]
	}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	371c      	adds	r7, #28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d005      	beq.n	800ecfa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	68f9      	ldr	r1, [r7, #12]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f012 fe5c 	bl	80219b2 <memmove>
	  return __result + _Num;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	4413      	add	r3, r2
	}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3718      	adds	r7, #24
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ed14:	6879      	ldr	r1, [r7, #4]
 800ed16:	68b8      	ldr	r0, [r7, #8]
 800ed18:	f010 fa2a 	bl	801f170 <_ZdlPvj>
      }
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b084      	sub	sp, #16
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800ed2a:	1d3b      	adds	r3, r7, #4
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f000 fbd6 	bl	800f4de <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 800ed32:	4603      	mov	r3, r0
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	f107 030c 	add.w	r3, r7, #12
 800ed3a:	4611      	mov	r1, r2
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 fbd9 	bl	800f4f4 <_ZNSt13move_iteratorIPcEC1ES0_>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	4618      	mov	r0, r3
 800ed46:	3710      	adds	r7, #16
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	68b9      	ldr	r1, [r7, #8]
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f000 fbda 	bl	800f518 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 800ed64:	4603      	mov	r3, r0
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	60f8      	str	r0, [r7, #12]
 800ed76:	60b9      	str	r1, [r7, #8]
 800ed78:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	68b9      	ldr	r1, [r7, #8]
 800ed7e:	68f8      	ldr	r0, [r7, #12]
 800ed80:	f000 fbdc 	bl	800f53c <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 800ed84:	4603      	mov	r3, r0
 800ed86:	4618      	mov	r0, r3
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800ed8e:	b580      	push	{r7, lr}
 800ed90:	b082      	sub	sp, #8
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800ed96:	1d3b      	adds	r3, r7, #4
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fa feaf 	bl	8009afc <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800edaa:	b580      	push	{r7, lr}
 800edac:	b084      	sub	sp, #16
 800edae:	af00      	add	r7, sp, #0
 800edb0:	60f8      	str	r0, [r7, #12]
 800edb2:	60b9      	str	r1, [r7, #8]
 800edb4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	68b9      	ldr	r1, [r7, #8]
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 fbdb 	bl	800f576 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>
 800edc0:	4603      	mov	r3, r0
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800edca:	b580      	push	{r7, lr}
 800edcc:	b082      	sub	sp, #8
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
 800edd2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7ff ffda 	bl	800ed8e <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800edda:	4602      	mov	r2, r0
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	1a9a      	subs	r2, r3, r2
 800ede0:	1d3b      	adds	r3, r7, #4
 800ede2:	4611      	mov	r1, r2
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fc fded 	bl	800b9c4 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800edea:	4603      	mov	r3, r0
 800edec:	4618      	mov	r0, r3
 800edee:	3708      	adds	r7, #8
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	60f8      	str	r0, [r7, #12]
 800edfc:	60b9      	str	r1, [r7, #8]
 800edfe:	713a      	strb	r2, [r7, #4]
	__i += __n;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	441a      	add	r2, r3
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	601a      	str	r2, [r3, #0]
    }
 800ee0c:	bf00      	nop
 800ee0e:	3714      	adds	r7, #20
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ee24:	2301      	movs	r3, #1
 800ee26:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	68b9      	ldr	r1, [r7, #8]
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f000 fbbf 	bl	800f5b0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>
 800ee32:	4603      	mov	r3, r0
    }
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fc fb53 	bl	800b4f2 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff f86c 	bl	800df2c <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800ee54:	4603      	mov	r3, r0
 800ee56:	4618      	mov	r0, r3
 800ee58:	3708      	adds	r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b084      	sub	sp, #16
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800ee66:	f107 030c 	add.w	r3, r7, #12
 800ee6a:	6879      	ldr	r1, [r7, #4]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 fb41 	bl	800f4f4 <_ZNSt13move_iteratorIPcEC1ES0_>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ee84:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ee88:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7fe f8e5 	bl	800d05a <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800ee90:	4603      	mov	r3, r0
 800ee92:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ee94:	f107 0208 	add.w	r2, r7, #8
 800ee98:	f107 030c 	add.w	r3, r7, #12
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff f9e3 	bl	800e26a <_ZSt3minIjERKT_S2_S2_>
 800eea4:	4603      	mov	r3, r0
 800eea6:	681b      	ldr	r3, [r3, #0]
      }
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800eeb0:	b5b0      	push	{r4, r5, r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f7fd f9a4 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800eec4:	4604      	mov	r4, r0
 800eec6:	68b8      	ldr	r0, [r7, #8]
 800eec8:	f7fd f9a0 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800eecc:	4605      	mov	r5, r0
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7fd f99c 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800eed4:	4602      	mov	r2, r0
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	4629      	mov	r1, r5
 800eeda:	4620      	mov	r0, r4
 800eedc:	f000 fb78 	bl	800f5d0 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 800eee0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bdb0      	pop	{r4, r5, r7, pc}

0800eeea <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800eeea:	b480      	push	{r7}
 800eeec:	b083      	sub	sp, #12
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800eef2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800eef6:	4618      	mov	r0, r3
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr

0800ef02 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b084      	sub	sp, #16
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7ff ffeb 	bl	800eeea <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 800ef14:	4602      	mov	r2, r0
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	bf8c      	ite	hi
 800ef1c:	2301      	movhi	r3, #1
 800ef1e:	2300      	movls	r3, #0
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	bf14      	ite	ne
 800ef26:	2301      	movne	r3, #1
 800ef28:	2300      	moveq	r3, #0
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d007      	beq.n	800ef40 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef36:	d301      	bcc.n	800ef3c <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ef38:	f010 f933 	bl	801f1a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ef3c:	f010 f92e 	bl	801f19c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	009b      	lsls	r3, r3, #2
 800ef44:	4618      	mov	r0, r3
 800ef46:	f010 f915 	bl	801f174 <_Znwj>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	bf00      	nop
      }
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 800ef56:	b480      	push	{r7}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	60b9      	str	r1, [r7, #8]
 800ef76:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	68b9      	ldr	r1, [r7, #8]
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 fb45 	bl	800f60c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800ef82:	4603      	mov	r3, r0
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
    { return __res; }
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f000 fb46 	bl	800f646 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800efba:	4603      	mov	r3, r0
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800efcc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800efd0:	4618      	mov	r0, r3
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f7ff ffeb 	bl	800efc4 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 800efee:	4602      	mov	r2, r0
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	4293      	cmp	r3, r2
 800eff4:	bf8c      	ite	hi
 800eff6:	2301      	movhi	r3, #1
 800eff8:	2300      	movls	r3, #0
 800effa:	b2db      	uxtb	r3, r3
 800effc:	2b00      	cmp	r3, #0
 800effe:	bf14      	ite	ne
 800f000:	2301      	movne	r3, #1
 800f002:	2300      	moveq	r3, #0
 800f004:	b2db      	uxtb	r3, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	d007      	beq.n	800f01a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f010:	d301      	bcc.n	800f016 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f012:	f010 f8c6 	bl	801f1a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f016:	f010 f8c1 	bl	801f19c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4618      	mov	r0, r3
 800f020:	f010 f8a8 	bl	801f174 <_Znwj>
 800f024:	4603      	mov	r3, r0
 800f026:	bf00      	nop
      }
 800f028:	4618      	mov	r0, r3
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f030:	b590      	push	{r4, r7, lr}
 800f032:	b089      	sub	sp, #36	; 0x24
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800f03c:	f107 020c 	add.w	r2, r7, #12
 800f040:	f107 0308 	add.w	r3, r7, #8
 800f044:	4611      	mov	r1, r2
 800f046:	4618      	mov	r0, r3
 800f048:	f7fc f885 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b01      	cmp	r3, #1
 800f050:	bfd4      	ite	le
 800f052:	2301      	movle	r3, #1
 800f054:	2300      	movgt	r3, #0
 800f056:	b2db      	uxtb	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d139      	bne.n	800f0d0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 800f05c:	f107 020c 	add.w	r2, r7, #12
 800f060:	f107 0308 	add.w	r3, r7, #8
 800f064:	4611      	mov	r1, r2
 800f066:	4618      	mov	r0, r3
 800f068:	f7fc f875 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f06c:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	3b02      	subs	r3, #2
 800f072:	0fda      	lsrs	r2, r3, #31
 800f074:	4413      	add	r3, r2
 800f076:	105b      	asrs	r3, r3, #1
 800f078:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800f07a:	f107 030c 	add.w	r3, r7, #12
 800f07e:	69f9      	ldr	r1, [r7, #28]
 800f080:	4618      	mov	r0, r3
 800f082:	f7fe f975 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f086:	4603      	mov	r3, r0
 800f088:	617b      	str	r3, [r7, #20]
 800f08a:	f107 0314 	add.w	r3, r7, #20
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fe f996 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f094:	4603      	mov	r3, r0
 800f096:	4618      	mov	r0, r3
 800f098:	f7fb f8e7 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f09c:	4603      	mov	r3, r0
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800f0a2:	f107 0310 	add.w	r3, r7, #16
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fb f8df 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	edd3 7a00 	vldr	s15, [r3]
 800f0b2:	4623      	mov	r3, r4
 800f0b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f0b8:	69ba      	ldr	r2, [r7, #24]
 800f0ba:	69f9      	ldr	r1, [r7, #28]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f000 fadf 	bl	800f680 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d005      	beq.n	800f0d4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	61fb      	str	r3, [r7, #28]
      while (true)
 800f0ce:	e7d4      	b.n	800f07a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 800f0d0:	bf00      	nop
 800f0d2:	e000      	b.n	800f0d6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 800f0d4:	bf00      	nop
    }
 800f0d6:	3724      	adds	r7, #36	; 0x24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd90      	pop	{r4, r7, pc}

0800f0dc <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f0dc:	b5b0      	push	{r4, r5, r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800f0ea:	1d3b      	adds	r3, r7, #4
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fe f967 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fb f8b8 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 800f100:	f107 030c 	add.w	r3, r7, #12
 800f104:	4618      	mov	r0, r3
 800f106:	f7fe f95b 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f10a:	4603      	mov	r3, r0
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fb f8ac 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f112:	4603      	mov	r3, r0
 800f114:	681c      	ldr	r4, [r3, #0]
 800f116:	1d3b      	adds	r3, r7, #4
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fe f951 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f11e:	4603      	mov	r3, r0
 800f120:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 800f122:	f107 020c 	add.w	r2, r7, #12
 800f126:	f107 0308 	add.w	r3, r7, #8
 800f12a:	4611      	mov	r1, r2
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fc f812 	bl	800b156 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f132:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 800f134:	f107 0314 	add.w	r3, r7, #20
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fb f896 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f13e:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 800f140:	edd3 7a00 	vldr	s15, [r3]
 800f144:	462b      	mov	r3, r5
 800f146:	eeb0 0a67 	vmov.f32	s0, s15
 800f14a:	4622      	mov	r2, r4
 800f14c:	2100      	movs	r1, #0
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f000 fa96 	bl	800f680 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 800f154:	bf00      	nop
 800f156:	3718      	adds	r7, #24
 800f158:	46bd      	mov	sp, r7
 800f15a:	bdb0      	pop	{r4, r5, r7, pc}

0800f15c <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800f15c:	b590      	push	{r4, r7, lr}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800f166:	1d3b      	adds	r3, r7, #4
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe f929 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f16e:	4604      	mov	r4, r0
 800f170:	463b      	mov	r3, r7
 800f172:	4618      	mov	r0, r3
 800f174:	f7fe f924 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f178:	4603      	mov	r3, r0
 800f17a:	4619      	mov	r1, r3
 800f17c:	4620      	mov	r0, r4
 800f17e:	f000 fb27 	bl	800f7d0 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800f182:	bf00      	nop
 800f184:	370c      	adds	r7, #12
 800f186:	46bd      	mov	sp, r7
 800f188:	bd90      	pop	{r4, r7, pc}

0800f18a <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800f18a:	b580      	push	{r7, lr}
 800f18c:	b084      	sub	sp, #16
 800f18e:	af00      	add	r7, sp, #0
 800f190:	60f8      	str	r0, [r7, #12]
 800f192:	60b9      	str	r1, [r7, #8]
 800f194:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f000 fb37 	bl	800f80e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f1aa:	b5b0      	push	{r4, r5, r7, lr}
 800f1ac:	b084      	sub	sp, #16
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	60f8      	str	r0, [r7, #12]
 800f1b2:	60b9      	str	r1, [r7, #8]
 800f1b4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f7fe fb82 	bl	800d8c0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	68b8      	ldr	r0, [r7, #8]
 800f1c0:	f7fe fb7e 	bl	800d8c0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fd f81f 	bl	800c20c <_ZSt12__niter_baseIPfET_S1_>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f7fe fb8f 	bl	800d8f8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	1d3b      	adds	r3, r7, #4
 800f1de:	4611      	mov	r1, r2
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd f82e 	bl	800c242 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800f1e6:	4603      	mov	r3, r0
    }
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bdb0      	pop	{r4, r5, r7, pc}

0800f1f0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800f1f0:	b480      	push	{r7}
 800f1f2:	b087      	sub	sp, #28
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f1fc:	68ba      	ldr	r2, [r7, #8]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	109b      	asrs	r3, r3, #2
 800f204:	617b      	str	r3, [r7, #20]
 800f206:	e00c      	b.n	800f222 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	601a      	str	r2, [r3, #0]
	      ++__first;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	3304      	adds	r3, #4
 800f214:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	3304      	adds	r3, #4
 800f21a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	3b01      	subs	r3, #1
 800f220:	617b      	str	r3, [r7, #20]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	dcef      	bgt.n	800f208 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 800f228:	687b      	ldr	r3, [r7, #4]
	}
 800f22a:	4618      	mov	r0, r3
 800f22c:	371c      	adds	r7, #28
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr

0800f236 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800f236:	b480      	push	{r7}
 800f238:	b083      	sub	sp, #12
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4618      	mov	r0, r3
 800f242:	370c      	adds	r7, #12
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr

0800f24c <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f24c:	b5b0      	push	{r4, r5, r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f258:	68f8      	ldr	r0, [r7, #12]
 800f25a:	f000 faf5 	bl	800f848 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f25e:	4604      	mov	r4, r0
 800f260:	68b8      	ldr	r0, [r7, #8]
 800f262:	f000 faf1 	bl	800f848 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800f266:	4605      	mov	r5, r0
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fd fbb4 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800f270:	4603      	mov	r3, r0
 800f272:	461a      	mov	r2, r3
 800f274:	4629      	mov	r1, r5
 800f276:	4620      	mov	r0, r4
 800f278:	f7fd fbb9 	bl	800c9ee <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800f27c:	4602      	mov	r2, r0
 800f27e:	1d3b      	adds	r3, r7, #4
 800f280:	4611      	mov	r1, r2
 800f282:	4618      	mov	r0, r3
 800f284:	f7fd fbc3 	bl	800ca0e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800f288:	4603      	mov	r3, r0
    }
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bdb0      	pop	{r4, r5, r7, pc}

0800f292 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 800f292:	b480      	push	{r7}
 800f294:	b083      	sub	sp, #12
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
    }
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr
	...

0800f2a8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800f2b0:	4b03      	ldr	r3, [pc, #12]	; (800f2c0 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	370c      	adds	r7, #12
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	0aaaaaaa 	.word	0x0aaaaaaa

0800f2c4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800f2ce:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7ff ffe9 	bl	800f2a8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f2da:	f107 0208 	add.w	r2, r7, #8
 800f2de:	f107 030c 	add.w	r3, r7, #12
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fe ffc0 	bl	800e26a <_ZSt3minIjERKT_S2_S2_>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	681b      	ldr	r3, [r3, #0]
      }
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	05555555 	.word	0x05555555

0800f2fc <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800f2fc:	b5b0      	push	{r4, r5, r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	607a      	str	r2, [r7, #4]
 800f308:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f000 fae8 	bl	800f8e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800f310:	4604      	mov	r4, r0
 800f312:	68b8      	ldr	r0, [r7, #8]
 800f314:	f000 fae4 	bl	800f8e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800f318:	4605      	mov	r5, r0
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fae0 	bl	800f8e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 800f320:	4602      	mov	r2, r0
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	4629      	mov	r1, r5
 800f326:	4620      	mov	r0, r4
 800f328:	f000 fae5 	bl	800f8f6 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800f32c:	4603      	mov	r3, r0
    }
 800f32e:	4618      	mov	r0, r3
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bdb0      	pop	{r4, r5, r7, pc}

0800f336 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800f336:	b580      	push	{r7, lr}
 800f338:	b082      	sub	sp, #8
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
 800f33e:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800f340:	6839      	ldr	r1, [r7, #0]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fafd 	bl	800f942 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 faf0 	bl	800f942 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4618      	mov	r0, r3
 800f366:	f7fc f876 	bl	800b456 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4618      	mov	r0, r3
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800f37e:	6839      	ldr	r1, [r7, #0]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7fe fc29 	bl	800dbd8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800f386:	4602      	mov	r2, r0
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6819      	ldr	r1, [r3, #0]
 800f398:	683a      	ldr	r2, [r7, #0]
 800f39a:	4613      	mov	r3, r2
 800f39c:	005b      	lsls	r3, r3, #1
 800f39e:	4413      	add	r3, r2
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	18ca      	adds	r2, r1, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	609a      	str	r2, [r3, #8]
      }
 800f3a8:	bf00      	nop
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	68b9      	ldr	r1, [r7, #8]
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 fad6 	bl	800f996 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 800f3ea:	4603      	mov	r3, r0
    }
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800f3fc:	4b03      	ldr	r3, [pc, #12]	; (800f40c <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 800f3fe:	4618      	mov	r0, r3
 800f400:	370c      	adds	r7, #12
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	0aaaaaaa 	.word	0x0aaaaaaa

0800f410 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800f418:	4b0a      	ldr	r3, [pc, #40]	; (800f444 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 800f41a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7ff ffe9 	bl	800f3f4 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 800f422:	4603      	mov	r3, r0
 800f424:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f426:	f107 0208 	add.w	r2, r7, #8
 800f42a:	f107 030c 	add.w	r3, r7, #12
 800f42e:	4611      	mov	r1, r2
 800f430:	4618      	mov	r0, r3
 800f432:	f7fe ff1a 	bl	800e26a <_ZSt3minIjERKT_S2_S2_>
 800f436:	4603      	mov	r3, r0
 800f438:	681b      	ldr	r3, [r3, #0]
      }
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	05555555 	.word	0x05555555

0800f448 <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	4618      	mov	r0, r3
 800f454:	370c      	adds	r7, #12
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr

0800f45e <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f45e:	b580      	push	{r7, lr}
 800f460:	b086      	sub	sp, #24
 800f462:	af00      	add	r7, sp, #0
 800f464:	60f8      	str	r0, [r7, #12]
 800f466:	60b9      	str	r1, [r7, #8]
 800f468:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f46a:	2301      	movs	r3, #1
 800f46c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 fb00 	bl	800fa78 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 800f478:	4603      	mov	r3, r0
    }
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f48a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800f48e:	4618      	mov	r0, r3
 800f490:	370c      	adds	r7, #12
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b084      	sub	sp, #16
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	60f8      	str	r0, [r7, #12]
 800f4a2:	60b9      	str	r1, [r7, #8]
 800f4a4:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f4a6:	68f8      	ldr	r0, [r7, #12]
 800f4a8:	f7ff ffeb 	bl	800f482 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	bf8c      	ite	hi
 800f4b4:	2301      	movhi	r3, #1
 800f4b6:	2300      	movls	r3, #0
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	bf14      	ite	ne
 800f4be:	2301      	movne	r3, #1
 800f4c0:	2300      	moveq	r3, #0
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d001      	beq.n	800f4cc <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800f4c8:	f00f fe68 	bl	801f19c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f4cc:	68b8      	ldr	r0, [r7, #8]
 800f4ce:	f00f fe51 	bl	801f174 <_Znwj>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	bf00      	nop
      }
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800f4de:	b480      	push	{r7}
 800f4e0:	b083      	sub	sp, #12
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	370c      	adds	r7, #12
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800f4fe:	463b      	mov	r3, r7
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff ffec 	bl	800f4de <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 800f506:	4603      	mov	r3, r0
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	601a      	str	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4618      	mov	r0, r3
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f524:	2301      	movs	r3, #1
 800f526:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	68b9      	ldr	r1, [r7, #8]
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 fac3 	bl	800fab8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 800f532:	4603      	mov	r3, r0
    }
 800f534:	4618      	mov	r0, r3
 800f536:	3718      	adds	r7, #24
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f548:	f7f3 fdba 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d006      	beq.n	800f560 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	68b9      	ldr	r1, [r7, #8]
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f000 fabe 	bl	800fad8 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>
 800f55c:	4603      	mov	r3, r0
 800f55e:	e006      	b.n	800f56e <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	68b9      	ldr	r1, [r7, #8]
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f000 fada 	bl	800fb1e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 800f56a:	4603      	mov	r3, r0
								 __result);
 800f56c:	bf00      	nop
    }
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f576:	b580      	push	{r7, lr}
 800f578:	b084      	sub	sp, #16
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	60f8      	str	r0, [r7, #12]
 800f57e:	60b9      	str	r1, [r7, #8]
 800f580:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f582:	f7f3 fd9d 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d006      	beq.n	800f59a <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	68b9      	ldr	r1, [r7, #8]
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 fae2 	bl	800fb5a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 800f596:	4603      	mov	r3, r0
 800f598:	e006      	b.n	800f5a8 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	68b9      	ldr	r1, [r7, #8]
 800f59e:	68f8      	ldr	r0, [r7, #12]
 800f5a0:	f7ff fb98 	bl	800ecd4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	bf00      	nop
    }
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	68b9      	ldr	r1, [r7, #8]
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f000 faec 	bl	800fb9e <_ZSt4copyIPcS0_ET0_T_S2_S1_>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b086      	sub	sp, #24
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
 800f5dc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	109b      	asrs	r3, r3, #2
 800f5e6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	dd06      	ble.n	800f5fc <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	68f9      	ldr	r1, [r7, #12]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f012 f9db 	bl	80219b2 <memmove>
      return __result + __count;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	4413      	add	r3, r2
    }
 800f604:	4618      	mov	r0, r3
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f618:	f7f3 fd52 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d006      	beq.n	800f630 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	68b9      	ldr	r1, [r7, #8]
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 fad1 	bl	800fbce <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 800f62c:	4603      	mov	r3, r0
 800f62e:	e006      	b.n	800f63e <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	68b9      	ldr	r1, [r7, #8]
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f000 faed 	bl	800fc14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 800f63a:	4603      	mov	r3, r0
 800f63c:	bf00      	nop
    }
 800f63e:	4618      	mov	r0, r3
 800f640:	3710      	adds	r7, #16
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800f646:	b580      	push	{r7, lr}
 800f648:	b084      	sub	sp, #16
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	60f8      	str	r0, [r7, #12]
 800f64e:	60b9      	str	r1, [r7, #8]
 800f650:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f652:	f7f3 fd35 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d006      	beq.n	800f66a <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	68b9      	ldr	r1, [r7, #8]
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f000 faf4 	bl	800fc4e <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 800f666:	4603      	mov	r3, r0
 800f668:	e006      	b.n	800f678 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	68b9      	ldr	r1, [r7, #8]
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f000 fb10 	bl	800fc94 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 800f674:	4603      	mov	r3, r0
								 __result);
 800f676:	bf00      	nop
    }
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800f680:	b590      	push	{r4, r7, lr}
 800f682:	b08f      	sub	sp, #60	; 0x3c
 800f684:	af00      	add	r7, sp, #0
 800f686:	6178      	str	r0, [r7, #20]
 800f688:	6139      	str	r1, [r7, #16]
 800f68a:	60fa      	str	r2, [r7, #12]
 800f68c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f690:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 800f69a:	e042      	b.n	800f722 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 800f69c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f69e:	3301      	adds	r3, #1
 800f6a0:	005b      	lsls	r3, r3, #1
 800f6a2:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 800f6a4:	f107 0314 	add.w	r3, r7, #20
 800f6a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7fd fe60 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b4:	1e5a      	subs	r2, r3, #1
 800f6b6:	f107 0314 	add.w	r3, r7, #20
 800f6ba:	4611      	mov	r1, r2
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fd fe57 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	1d3b      	adds	r3, r7, #4
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fd fe85 	bl	800d3d8 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 800f6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800f6da:	f107 0314 	add.w	r3, r7, #20
 800f6de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fd fe45 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	623b      	str	r3, [r7, #32]
 800f6ea:	f107 0320 	add.w	r3, r7, #32
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fd fe66 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fa fdb7 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	681c      	ldr	r4, [r3, #0]
 800f700:	f107 0314 	add.w	r3, r7, #20
 800f704:	6939      	ldr	r1, [r7, #16]
 800f706:	4618      	mov	r0, r3
 800f708:	f7fd fe32 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f70c:	4603      	mov	r3, r0
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
 800f710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f714:	4618      	mov	r0, r3
 800f716:	f7fd fe53 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f71a:	4603      	mov	r3, r0
 800f71c:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 800f71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f720:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3b01      	subs	r3, #1
 800f726:	0fda      	lsrs	r2, r3, #31
 800f728:	4413      	add	r3, r2
 800f72a:	105b      	asrs	r3, r3, #1
 800f72c:	461a      	mov	r2, r3
 800f72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f730:	4293      	cmp	r3, r2
 800f732:	dbb3      	blt.n	800f69c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f003 0301 	and.w	r3, r3, #1
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d133      	bne.n	800f7a6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3b02      	subs	r3, #2
 800f742:	0fda      	lsrs	r2, r3, #31
 800f744:	4413      	add	r3, r2
 800f746:	105b      	asrs	r3, r3, #1
 800f748:	461a      	mov	r2, r3
 800f74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d12a      	bne.n	800f7a6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 800f750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f752:	3301      	adds	r3, #1
 800f754:	005b      	lsls	r3, r3, #1
 800f756:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800f758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f75a:	1e5a      	subs	r2, r3, #1
 800f75c:	f107 0314 	add.w	r3, r7, #20
 800f760:	4611      	mov	r1, r2
 800f762:	4618      	mov	r0, r3
 800f764:	f7fd fe04 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f768:	4603      	mov	r3, r0
 800f76a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f76c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f770:	4618      	mov	r0, r3
 800f772:	f7fd fe25 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f776:	4603      	mov	r3, r0
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fa fd76 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f77e:	4603      	mov	r3, r0
 800f780:	681c      	ldr	r4, [r3, #0]
 800f782:	f107 0314 	add.w	r3, r7, #20
 800f786:	6939      	ldr	r1, [r7, #16]
 800f788:	4618      	mov	r0, r3
 800f78a:	f7fd fdf1 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800f78e:	4603      	mov	r3, r0
 800f790:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f796:	4618      	mov	r0, r3
 800f798:	f7fd fe12 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f79c:	4603      	mov	r3, r0
 800f79e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 800f7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 800f7a6:	f107 0308 	add.w	r3, r7, #8
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fa fd5d 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f7b0:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 800f7b2:	edd3 7a00 	vldr	s15, [r3]
 800f7b6:	f107 031c 	add.w	r3, r7, #28
 800f7ba:	eeb0 0a67 	vmov.f32	s0, s15
 800f7be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7c0:	6939      	ldr	r1, [r7, #16]
 800f7c2:	6978      	ldr	r0, [r7, #20]
 800f7c4:	f000 faa5 	bl	800fd12 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 800f7c8:	bf00      	nop
 800f7ca:	373c      	adds	r7, #60	; 0x3c
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd90      	pop	{r4, r7, pc}

0800f7d0 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
 800f7d8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f7fa fd45 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800f7e6:	6838      	ldr	r0, [r7, #0]
 800f7e8:	f7fa fd3f 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f7f4:	f107 030c 	add.w	r3, r7, #12
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7fa fd36 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f7fe:	4603      	mov	r3, r0
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	601a      	str	r2, [r3, #0]
    }
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800f80e:	b580      	push	{r7, lr}
 800f810:	b084      	sub	sp, #16
 800f812:	af00      	add	r7, sp, #0
 800f814:	60f8      	str	r0, [r7, #12]
 800f816:	60b9      	str	r1, [r7, #8]
 800f818:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f81a:	f7f3 fc51 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d006      	beq.n	800f832 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68b9      	ldr	r1, [r7, #8]
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 fadf 	bl	800fdec <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 800f82e:	4603      	mov	r3, r0
 800f830:	e006      	b.n	800f840 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	68b9      	ldr	r1, [r7, #8]
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f000 fafc 	bl	800fe34 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 800f83c:	4603      	mov	r3, r0
								 __result);
 800f83e:	bf00      	nop
    }
 800f840:	4618      	mov	r0, r3
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800f850:	1d3b      	adds	r3, r7, #4
 800f852:	4618      	mov	r0, r3
 800f854:	f7fd f906 	bl	800ca64 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800f858:	4603      	mov	r3, r0
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4618      	mov	r0, r3
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f86c:	4b03      	ldr	r3, [pc, #12]	; (800f87c <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 800f86e:	4618      	mov	r0, r3
 800f870:	370c      	adds	r7, #12
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop
 800f87c:	05555555 	.word	0x05555555

0800f880 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f880:	b580      	push	{r7, lr}
 800f882:	b084      	sub	sp, #16
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	f7ff ffe9 	bl	800f864 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 800f892:	4602      	mov	r2, r0
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	4293      	cmp	r3, r2
 800f898:	bf8c      	ite	hi
 800f89a:	2301      	movhi	r3, #1
 800f89c:	2300      	movls	r3, #0
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	bf14      	ite	ne
 800f8a4:	2301      	movne	r3, #1
 800f8a6:	2300      	moveq	r3, #0
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d007      	beq.n	800f8be <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	4a0a      	ldr	r2, [pc, #40]	; (800f8dc <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d901      	bls.n	800f8ba <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800f8b6:	f00f fc74 	bl	801f1a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800f8ba:	f00f fc6f 	bl	801f19c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f8be:	68ba      	ldr	r2, [r7, #8]
 800f8c0:	4613      	mov	r3, r2
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	4413      	add	r3, r2
 800f8c6:	00db      	lsls	r3, r3, #3
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f00f fc53 	bl	801f174 <_Znwj>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	bf00      	nop
      }
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	0aaaaaaa 	.word	0x0aaaaaaa

0800f8e0 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	370c      	adds	r7, #12
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800f8f6:	b590      	push	{r4, r7, lr}
 800f8f8:	b087      	sub	sp, #28
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	60f8      	str	r0, [r7, #12]
 800f8fe:	60b9      	str	r1, [r7, #8]
 800f900:	607a      	str	r2, [r7, #4]
 800f902:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800f908:	e012      	b.n	800f930 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800f90a:	6978      	ldr	r0, [r7, #20]
 800f90c:	f7fe fff5 	bl	800e8fa <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800f910:	4604      	mov	r4, r0
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f7fe fff1 	bl	800e8fa <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800f918:	4603      	mov	r3, r0
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	4619      	mov	r1, r3
 800f91e:	4620      	mov	r0, r4
 800f920:	f000 faaa 	bl	800fe78 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	3318      	adds	r3, #24
 800f928:	60fb      	str	r3, [r7, #12]
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	3318      	adds	r3, #24
 800f92e:	617b      	str	r3, [r7, #20]
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	429a      	cmp	r2, r3
 800f936:	d1e8      	bne.n	800f90a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 800f938:	697b      	ldr	r3, [r7, #20]
    }
 800f93a:	4618      	mov	r0, r3
 800f93c:	371c      	adds	r7, #28
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd90      	pop	{r4, r7, pc}

0800f942 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800f942:	b580      	push	{r7, lr}
 800f944:	b082      	sub	sp, #8
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
 800f94a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 faad 	bl	800feae <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4618      	mov	r0, r3
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f95e:	b480      	push	{r7}
 800f960:	b083      	sub	sp, #12
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4618      	mov	r0, r3
 800f96a:	370c      	adds	r7, #12
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800f974:	b480      	push	{r7}
 800f976:	b083      	sub	sp, #12
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f103 0218 	add.w	r2, r3, #24
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	601a      	str	r2, [r3, #0]
	return *this;
 800f988:	687b      	ldr	r3, [r7, #4]
      }
 800f98a:	4618      	mov	r0, r3
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f996:	b590      	push	{r4, r7, lr}
 800f998:	b087      	sub	sp, #28
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	60f8      	str	r0, [r7, #12]
 800f99e:	60b9      	str	r1, [r7, #8]
 800f9a0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800f9a6:	e015      	b.n	800f9d4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800f9a8:	6978      	ldr	r0, [r7, #20]
 800f9aa:	f7fe ffa6 	bl	800e8fa <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	f107 030c 	add.w	r3, r7, #12
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f000 fa9e 	bl	800fef6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	4619      	mov	r1, r3
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 fac4 	bl	800ff4c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800f9c4:	f107 030c 	add.w	r3, r7, #12
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7ff ffd3 	bl	800f974 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	3318      	adds	r3, #24
 800f9d2:	617b      	str	r3, [r7, #20]
 800f9d4:	f107 0208 	add.w	r2, r7, #8
 800f9d8:	f107 030c 	add.w	r3, r7, #12
 800f9dc:	4611      	mov	r1, r2
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f000 fa71 	bl	800fec6 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	f083 0301 	eor.w	r3, r3, #1
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1db      	bne.n	800f9a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 800f9f0:	697b      	ldr	r3, [r7, #20]
	}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	371c      	adds	r7, #28
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd90      	pop	{r4, r7, pc}
	...

0800f9fc <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800fa04:	4b03      	ldr	r3, [pc, #12]	; (800fa14 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 800fa06:	4618      	mov	r0, r3
 800fa08:	370c      	adds	r7, #12
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	05555555 	.word	0x05555555

0800fa18 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f7ff ffe9 	bl	800f9fc <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	bf8c      	ite	hi
 800fa32:	2301      	movhi	r3, #1
 800fa34:	2300      	movls	r3, #0
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	bf14      	ite	ne
 800fa3c:	2301      	movne	r3, #1
 800fa3e:	2300      	moveq	r3, #0
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d007      	beq.n	800fa56 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	4a0a      	ldr	r2, [pc, #40]	; (800fa74 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d901      	bls.n	800fa52 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800fa4e:	f00f fba8 	bl	801f1a2 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800fa52:	f00f fba3 	bl	801f19c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	005b      	lsls	r3, r3, #1
 800fa5c:	4413      	add	r3, r2
 800fa5e:	00db      	lsls	r3, r3, #3
 800fa60:	4618      	mov	r0, r3
 800fa62:	f00f fb87 	bl	801f174 <_Znwj>
 800fa66:	4603      	mov	r3, r0
 800fa68:	bf00      	nop
      }
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3710      	adds	r7, #16
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	0aaaaaaa 	.word	0x0aaaaaaa

0800fa78 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800fa88:	e00d      	b.n	800faa6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800fa8a:	6978      	ldr	r0, [r7, #20]
 800fa8c:	f7ff f80a 	bl	800eaa4 <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800fa90:	4603      	mov	r3, r0
 800fa92:	68f9      	ldr	r1, [r7, #12]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f000 fa6f 	bl	800ff78 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3318      	adds	r3, #24
 800fa9e:	60fb      	str	r3, [r7, #12]
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	3318      	adds	r3, #24
 800faa4:	617b      	str	r3, [r7, #20]
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d1ed      	bne.n	800fa8a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 800faae:	697b      	ldr	r3, [r7, #20]
	}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3718      	adds	r7, #24
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	68b9      	ldr	r1, [r7, #8]
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f000 fa6b 	bl	800ffa4 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 800face:	4603      	mov	r3, r0
 800fad0:	4618      	mov	r0, r3
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800fad8:	b580      	push	{r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800faec:	e00f      	b.n	800fb0e <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x36>
	    *--__result = std::move(*--__last);
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	3b01      	subs	r3, #1
 800faf2:	60bb      	str	r3, [r7, #8]
 800faf4:	68b8      	ldr	r0, [r7, #8]
 800faf6:	f000 fa6d 	bl	800ffd4 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800fafa:	4603      	mov	r3, r0
 800fafc:	781a      	ldrb	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	3b01      	subs	r3, #1
 800fb02:	607b      	str	r3, [r7, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	617b      	str	r3, [r7, #20]
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	dcec      	bgt.n	800faee <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 800fb14:	687b      	ldr	r3, [r7, #4]
	}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3718      	adds	r7, #24
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b086      	sub	sp, #24
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	60f8      	str	r0, [r7, #12]
 800fb26:	60b9      	str	r1, [r7, #8]
 800fb28:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fb2a:	68ba      	ldr	r2, [r7, #8]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	1ad3      	subs	r3, r2, r3
 800fb30:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d008      	beq.n	800fb4a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	425b      	negs	r3, r3
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	4413      	add	r3, r2
 800fb40:	697a      	ldr	r2, [r7, #20]
 800fb42:	68f9      	ldr	r1, [r7, #12]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f011 ff34 	bl	80219b2 <memmove>
	  return __result - _Num;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	425b      	negs	r3, r3
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	4413      	add	r3, r2
	}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3718      	adds	r7, #24
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800fb5a:	b480      	push	{r7}
 800fb5c:	b087      	sub	sp, #28
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	60f8      	str	r0, [r7, #12]
 800fb62:	60b9      	str	r1, [r7, #8]
 800fb64:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800fb66:	68ba      	ldr	r2, [r7, #8]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	617b      	str	r3, [r7, #20]
 800fb6e:	e00c      	b.n	800fb8a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	781a      	ldrb	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	3301      	adds	r3, #1
 800fb82:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	3b01      	subs	r3, #1
 800fb88:	617b      	str	r3, [r7, #20]
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	dcef      	bgt.n	800fb70 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 800fb90:	687b      	ldr	r3, [r7, #4]
	}
 800fb92:	4618      	mov	r0, r3
 800fb94:	371c      	adds	r7, #28
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <_ZSt4copyIPcS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800fb9e:	b590      	push	{r4, r7, lr}
 800fba0:	b085      	sub	sp, #20
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	60f8      	str	r0, [r7, #12]
 800fba6:	60b9      	str	r1, [r7, #8]
 800fba8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f7fe fa4d 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 800fbb0:	4604      	mov	r4, r0
 800fbb2:	68b8      	ldr	r0, [r7, #8]
 800fbb4:	f7fe fa49 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 fa13 	bl	800ffea <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>
 800fbc4:	4603      	mov	r3, r0
    }
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd90      	pop	{r4, r7, pc}

0800fbce <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800fbce:	b480      	push	{r7}
 800fbd0:	b087      	sub	sp, #28
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	60f8      	str	r0, [r7, #12]
 800fbd6:	60b9      	str	r1, [r7, #8]
 800fbd8:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	1ad3      	subs	r3, r2, r3
 800fbe0:	109b      	asrs	r3, r3, #2
 800fbe2:	617b      	str	r3, [r7, #20]
 800fbe4:	e00c      	b.n	800fc00 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	601a      	str	r2, [r3, #0]
	      ++__first;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	3304      	adds	r3, #4
 800fbf2:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3304      	adds	r3, #4
 800fbf8:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	617b      	str	r3, [r7, #20]
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	dcef      	bgt.n	800fbe6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800fc06:	687b      	ldr	r3, [r7, #4]
	}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	371c      	adds	r7, #28
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	1ad3      	subs	r3, r2, r3
 800fc26:	109b      	asrs	r3, r3, #2
 800fc28:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d006      	beq.n	800fc3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	461a      	mov	r2, r3
 800fc36:	68f9      	ldr	r1, [r7, #12]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f011 feba 	bl	80219b2 <memmove>
	  return __result + _Num;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	4413      	add	r3, r2
	}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3718      	adds	r7, #24
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800fc4e:	b480      	push	{r7}
 800fc50:	b087      	sub	sp, #28
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	60f8      	str	r0, [r7, #12]
 800fc56:	60b9      	str	r1, [r7, #8]
 800fc58:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	109b      	asrs	r3, r3, #2
 800fc62:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800fc64:	e00c      	b.n	800fc80 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	3b04      	subs	r3, #4
 800fc6a:	60bb      	str	r3, [r7, #8]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	681a      	ldr	r2, [r3, #0]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	3b04      	subs	r3, #4
 800fc74:	607b      	str	r3, [r7, #4]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	617b      	str	r3, [r7, #20]
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	dcef      	bgt.n	800fc66 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 800fc86:	687b      	ldr	r3, [r7, #4]
	}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	371c      	adds	r7, #28
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	109b      	asrs	r3, r3, #2
 800fca8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00a      	beq.n	800fcc6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	425b      	negs	r3, r3
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	18d0      	adds	r0, r2, r3
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	68f9      	ldr	r1, [r7, #12]
 800fcc2:	f011 fe76 	bl	80219b2 <memmove>
	  return __result - _Num;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	009b      	lsls	r3, r3, #2
 800fcca:	425b      	negs	r3, r3
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	4413      	add	r3, r2
	}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 800fce4:	f107 0308 	add.w	r3, r7, #8
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fd fb69 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	ed93 7a00 	vldr	s14, [r3]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	edd3 7a00 	vldr	s15, [r3]
 800fcfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd02:	bf4c      	ite	mi
 800fd04:	2301      	movmi	r3, #1
 800fd06:	2300      	movpl	r3, #0
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}

0800fd12 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 800fd12:	b590      	push	{r4, r7, lr}
 800fd14:	b08b      	sub	sp, #44	; 0x2c
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6178      	str	r0, [r7, #20]
 800fd1a:	6139      	str	r1, [r7, #16]
 800fd1c:	60fa      	str	r2, [r7, #12]
 800fd1e:	ed87 0a02 	vstr	s0, [r7, #8]
 800fd22:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	3b01      	subs	r3, #1
 800fd28:	0fda      	lsrs	r2, r3, #31
 800fd2a:	4413      	add	r3, r2
 800fd2c:	105b      	asrs	r3, r3, #1
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fd30:	e029      	b.n	800fd86 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800fd32:	f107 0314 	add.w	r3, r7, #20
 800fd36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fd fb19 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	61bb      	str	r3, [r7, #24]
 800fd42:	f107 0318 	add.w	r3, r7, #24
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fd fb3a 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fa fa8b 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fd54:	4603      	mov	r3, r0
 800fd56:	681c      	ldr	r4, [r3, #0]
 800fd58:	f107 0314 	add.w	r3, r7, #20
 800fd5c:	6939      	ldr	r1, [r7, #16]
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fd fb06 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800fd64:	4603      	mov	r3, r0
 800fd66:	61fb      	str	r3, [r7, #28]
 800fd68:	f107 031c 	add.w	r3, r7, #28
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fd fb27 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800fd72:	4603      	mov	r3, r0
 800fd74:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 800fd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd78:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	0fda      	lsrs	r2, r3, #31
 800fd80:	4413      	add	r3, r2
 800fd82:	105b      	asrs	r3, r3, #1
 800fd84:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800fd86:	693a      	ldr	r2, [r7, #16]
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	dd11      	ble.n	800fdb2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800fd8e:	f107 0314 	add.w	r3, r7, #20
 800fd92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7fd faeb 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800fd9a:	4601      	mov	r1, r0
 800fd9c:	f107 0308 	add.w	r3, r7, #8
 800fda0:	461a      	mov	r2, r3
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff ff98 	bl	800fcd8 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 800fdae:	2301      	movs	r3, #1
 800fdb0:	e000      	b.n	800fdb4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1bc      	bne.n	800fd32 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800fdb8:	f107 0308 	add.w	r3, r7, #8
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fa fa54 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	681c      	ldr	r4, [r3, #0]
 800fdc6:	f107 0314 	add.w	r3, r7, #20
 800fdca:	6939      	ldr	r1, [r7, #16]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fd facf 	bl	800d370 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	623b      	str	r3, [r7, #32]
 800fdd6:	f107 0320 	add.w	r3, r7, #32
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fd faf0 	bl	800d3c0 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800fde0:	4603      	mov	r3, r0
 800fde2:	601c      	str	r4, [r3, #0]
    }
 800fde4:	bf00      	nop
 800fde6:	372c      	adds	r7, #44	; 0x2c
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd90      	pop	{r4, r7, pc}

0800fdec <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b086      	sub	sp, #24
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	109b      	asrs	r3, r3, #2
 800fe00:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 800fe02:	e00f      	b.n	800fe24 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	3b04      	subs	r3, #4
 800fe08:	60bb      	str	r3, [r7, #8]
 800fe0a:	68b8      	ldr	r0, [r7, #8]
 800fe0c:	f7fa fa2d 	bl	800a26a <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800fe10:	4603      	mov	r3, r0
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	3b04      	subs	r3, #4
 800fe18:	607b      	str	r3, [r7, #4]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	3b01      	subs	r3, #1
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	dcec      	bgt.n	800fe04 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800fe2a:	687b      	ldr	r3, [r7, #4]
	}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3718      	adds	r7, #24
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b086      	sub	sp, #24
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	109b      	asrs	r3, r3, #2
 800fe48:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00a      	beq.n	800fe66 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	425b      	negs	r3, r3
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	18d0      	adds	r0, r2, r3
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	461a      	mov	r2, r3
 800fe60:	68f9      	ldr	r1, [r7, #12]
 800fe62:	f011 fda6 	bl	80219b2 <memmove>
	  return __result - _Num;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	425b      	negs	r3, r3
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	4413      	add	r3, r2
	}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800fe84:	68b8      	ldr	r0, [r7, #8]
 800fe86:	f7fb fb9e 	bl	800b5c6 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	68f9      	ldr	r1, [r7, #12]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7fc fb07 	bl	800c4a4 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800fe96:	68b8      	ldr	r0, [r7, #8]
 800fe98:	f7fe fd2f 	bl	800e8fa <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	4619      	mov	r1, r3
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f7fd fecc 	bl	800dc3e <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 800fea6:	bf00      	nop
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}

0800feae <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800feae:	b480      	push	{r7}
 800feb0:	b083      	sub	sp, #12
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	370c      	adds	r7, #12
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr

0800fec6 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800fec6:	b590      	push	{r4, r7, lr}
 800fec8:	b083      	sub	sp, #12
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7ff fd44 	bl	800f95e <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800fed6:	4603      	mov	r3, r0
 800fed8:	681c      	ldr	r4, [r3, #0]
 800feda:	6838      	ldr	r0, [r7, #0]
 800fedc:	f7ff fd3f 	bl	800f95e <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800fee0:	4603      	mov	r3, r0
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	429c      	cmp	r4, r3
 800fee6:	bf0c      	ite	eq
 800fee8:	2301      	moveq	r3, #1
 800feea:	2300      	movne	r3, #0
 800feec:	b2db      	uxtb	r3, r3
 800feee:	4618      	mov	r0, r3
 800fef0:	370c      	adds	r7, #12
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd90      	pop	{r4, r7, pc}

0800fef6 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fef6:	b480      	push	{r7}
 800fef8:	b083      	sub	sp, #12
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4618      	mov	r0, r3
 800ff04:	370c      	adds	r7, #12
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr

0800ff0e <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
 800ff16:	6039      	str	r1, [r7, #0]
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	781a      	ldrb	r2, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	701a      	strb	r2, [r3, #0]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	685a      	ldr	r2, [r3, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	605a      	str	r2, [r3, #4]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f103 0208 	add.w	r2, r3, #8
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	3308      	adds	r3, #8
 800ff32:	4619      	mov	r1, r3
 800ff34:	4610      	mov	r0, r2
 800ff36:	f7fa fc92 	bl	800a85e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	695a      	ldr	r2, [r3, #20]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	615a      	str	r2, [r3, #20]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4618      	mov	r0, r3
 800ff46:	3708      	adds	r7, #8
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800ff4c:	b590      	push	{r4, r7, lr}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ff56:	6838      	ldr	r0, [r7, #0]
 800ff58:	f000 f86a 	bl	8010030 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	4619      	mov	r1, r3
 800ff62:	2018      	movs	r0, #24
 800ff64:	f7f3 f8d0 	bl	8003108 <_ZnwjPv>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	4621      	mov	r1, r4
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7ff ffce 	bl	800ff0e <_ZN3jlb4EdgeC1ERKS0_>
    }
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd90      	pop	{r4, r7, pc}

0800ff78 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800ff78:	b590      	push	{r4, r7, lr}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800ff82:	6838      	ldr	r0, [r7, #0]
 800ff84:	f000 f85f 	bl	8010046 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ff88:	4604      	mov	r4, r0
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	2018      	movs	r0, #24
 800ff90:	f7f3 f8ba 	bl	8003108 <_ZnwjPv>
 800ff94:	4603      	mov	r3, r0
 800ff96:	4621      	mov	r1, r4
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fc fb97 	bl	800c6cc <_ZN3jlb4NodeC1ERKS0_>
    }
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd90      	pop	{r4, r7, pc}

0800ffa4 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800ffa4:	b590      	push	{r4, r7, lr}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f000 f853 	bl	801005c <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	68b8      	ldr	r0, [r7, #8]
 800ffba:	f000 f84f 	bl	801005c <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f000 f85b 	bl	8010080 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 800ffca:	4603      	mov	r3, r0
    }
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3714      	adds	r7, #20
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd90      	pop	{r4, r7, pc}

0800ffd4 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	370c      	adds	r7, #12
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr

0800ffea <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ffea:	b5b0      	push	{r4, r5, r7, lr}
 800ffec:	b084      	sub	sp, #16
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	60f8      	str	r0, [r7, #12]
 800fff2:	60b9      	str	r1, [r7, #8]
 800fff4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800fff6:	68f8      	ldr	r0, [r7, #12]
 800fff8:	f7fc fcee 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 800fffc:	4604      	mov	r4, r0
 800fffe:	68b8      	ldr	r0, [r7, #8]
 8010000:	f7fc fcea 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 8010004:	4605      	mov	r5, r0
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4618      	mov	r0, r3
 801000a:	f7fc fce5 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 801000e:	4603      	mov	r3, r0
 8010010:	461a      	mov	r2, r3
 8010012:	4629      	mov	r1, r5
 8010014:	4620      	mov	r0, r4
 8010016:	f7fe fec8 	bl	800edaa <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 801001a:	4602      	mov	r2, r0
 801001c:	1d3b      	adds	r3, r7, #4
 801001e:	4611      	mov	r1, r2
 8010020:	4618      	mov	r0, r3
 8010022:	f7fc fcf4 	bl	800ca0e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8010026:	4603      	mov	r3, r0
    }
 8010028:	4618      	mov	r0, r3
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bdb0      	pop	{r4, r5, r7, pc}

08010030 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	4618      	mov	r0, r3
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr

08010046 <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010046:	b480      	push	{r7}
 8010048:	b083      	sub	sp, #12
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4618      	mov	r0, r3
 8010052:	370c      	adds	r7, #12
 8010054:	46bd      	mov	sp, r7
 8010056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005a:	4770      	bx	lr

0801005c <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8010064:	1d3b      	adds	r3, r7, #4
 8010066:	4618      	mov	r0, r3
 8010068:	f000 f82d 	bl	80100c6 <_ZNKRSt13move_iteratorIPcE4baseEv>
 801006c:	4603      	mov	r3, r0
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4618      	mov	r0, r3
 8010072:	f7fd ffea 	bl	800e04a <_ZSt12__miter_baseIPcET_S1_>
 8010076:	4603      	mov	r3, r0
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8010080:	b5b0      	push	{r4, r5, r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	f7fc fca3 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 8010092:	4604      	mov	r4, r0
 8010094:	68b8      	ldr	r0, [r7, #8]
 8010096:	f7fc fc9f 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 801009a:	4605      	mov	r5, r0
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fc fc9a 	bl	800c9d8 <_ZSt12__niter_baseIPcET_S1_>
 80100a4:	4603      	mov	r3, r0
 80100a6:	461a      	mov	r2, r3
 80100a8:	4629      	mov	r1, r5
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 f816 	bl	80100dc <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>
 80100b0:	4602      	mov	r2, r0
 80100b2:	1d3b      	adds	r3, r7, #4
 80100b4:	4611      	mov	r1, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fc fca9 	bl	800ca0e <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80100bc:	4603      	mov	r3, r0
    }
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bdb0      	pop	{r4, r5, r7, pc}

080100c6 <_ZNKRSt13move_iteratorIPcE4baseEv>:
      base() const & noexcept
 80100c6:	b480      	push	{r7}
 80100c8:	b083      	sub	sp, #12
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4618      	mov	r0, r3
 80100d2:	370c      	adds	r7, #12
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80100e8:	687a      	ldr	r2, [r7, #4]
 80100ea:	68b9      	ldr	r1, [r7, #8]
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f000 f805 	bl	80100fc <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 80100f2:	4603      	mov	r3, r0
 80100f4:	4618      	mov	r0, r3
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010108:	f7f2 ffda 	bl	80030c0 <_ZSt21is_constant_evaluatedv>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d006      	beq.n	8010120 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	68b9      	ldr	r1, [r7, #8]
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f000 f80d 	bl	8010136 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 801011c:	4603      	mov	r3, r0
 801011e:	e006      	b.n	801012e <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	68b9      	ldr	r1, [r7, #8]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f000 f829 	bl	801017c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 801012a:	4603      	mov	r3, r0
 801012c:	bf00      	nop
    }
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}

08010136 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010136:	b580      	push	{r7, lr}
 8010138:	b086      	sub	sp, #24
 801013a:	af00      	add	r7, sp, #0
 801013c:	60f8      	str	r0, [r7, #12]
 801013e:	60b9      	str	r1, [r7, #8]
 8010140:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	1ad3      	subs	r3, r2, r3
 8010148:	617b      	str	r3, [r7, #20]
 801014a:	e00f      	b.n	801016c <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x36>
	      *__result = std::move(*__first);
 801014c:	68f8      	ldr	r0, [r7, #12]
 801014e:	f7ff ff41 	bl	800ffd4 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8010152:	4603      	mov	r3, r0
 8010154:	781a      	ldrb	r2, [r3, #0]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	701a      	strb	r2, [r3, #0]
	      ++__first;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	3301      	adds	r3, #1
 801015e:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	3301      	adds	r3, #1
 8010164:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	3b01      	subs	r3, #1
 801016a:	617b      	str	r3, [r7, #20]
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	dcec      	bgt.n	801014c <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8010172:	687b      	ldr	r3, [r7, #4]
	}
 8010174:	4618      	mov	r0, r3
 8010176:	3718      	adds	r7, #24
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801017c:	b580      	push	{r7, lr}
 801017e:	b086      	sub	sp, #24
 8010180:	af00      	add	r7, sp, #0
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	60b9      	str	r1, [r7, #8]
 8010186:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010188:	68ba      	ldr	r2, [r7, #8]
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d005      	beq.n	80101a2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	461a      	mov	r2, r3
 801019a:	68f9      	ldr	r1, [r7, #12]
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f011 fc08 	bl	80219b2 <memmove>
	  return __result + _Num;
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	4413      	add	r3, r2
	}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3718      	adds	r7, #24
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80101b8:	4b08      	ldr	r3, [pc, #32]	; (80101dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80101ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101bc:	4907      	ldr	r1, [pc, #28]	; (80101dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4313      	orrs	r3, r2
 80101c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80101c4:	4b05      	ldr	r3, [pc, #20]	; (80101dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80101c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4013      	ands	r3, r2
 80101cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80101ce:	68fb      	ldr	r3, [r7, #12]
}
 80101d0:	bf00      	nop
 80101d2:	3714      	adds	r7, #20
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr
 80101dc:	40021000 	.word	0x40021000

080101e0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80101e8:	4b08      	ldr	r3, [pc, #32]	; (801020c <LL_APB1_GRP2_EnableClock+0x2c>)
 80101ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101ec:	4907      	ldr	r1, [pc, #28]	; (801020c <LL_APB1_GRP2_EnableClock+0x2c>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4313      	orrs	r3, r2
 80101f2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80101f4:	4b05      	ldr	r3, [pc, #20]	; (801020c <LL_APB1_GRP2_EnableClock+0x2c>)
 80101f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4013      	ands	r3, r2
 80101fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80101fe:	68fb      	ldr	r3, [r7, #12]
}
 8010200:	bf00      	nop
 8010202:	3714      	adds	r7, #20
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr
 801020c:	40021000 	.word	0x40021000

08010210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010214:	f002 f889 	bl	801232a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010218:	f000 f862 	bl	80102e0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801021c:	f000 ffb8 	bl	8011190 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8010220:	f000 ff8c 	bl	801113c <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8010224:	f000 fa62 	bl	80106ec <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8010228:	f000 fb82 	bl	8010930 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 801022c:	f000 ff22 	bl	8011074 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8010230:	f000 ff56 	bl	80110e0 <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 8010234:	f000 fabc 	bl	80107b0 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8010238:	f000 fbce 	bl	80109d8 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 801023c:	f000 fc0e 	bl	8010a5c <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8010240:	f000 fc4e 	bl	8010ae0 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8010244:	f000 fc8e 	bl	8010b64 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8010248:	f000 fd2c 	bl	8010ca4 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 801024c:	f000 fb10 	bl	8010870 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8010250:	f000 f8b6 	bl	80103c0 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 8010254:	f000 fd86 	bl	8010d64 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 8010258:	f000 f9dc 	bl	8010614 <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 801025c:	f000 fa28 	bl	80106b0 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 8010260:	f000 fe20 	bl	8010ea4 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8010264:	f000 fe5e 	bl	8010f24 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 8010268:	f7f2 fdce 	bl	8002e08 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 801026c:	2100      	movs	r1, #0
 801026e:	4814      	ldr	r0, [pc, #80]	; (80102c0 <main+0xb0>)
 8010270:	f008 f972 	bl	8018558 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8010274:	2100      	movs	r1, #0
 8010276:	4813      	ldr	r0, [pc, #76]	; (80102c4 <main+0xb4>)
 8010278:	f008 f96e 	bl	8018558 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 801027c:	210c      	movs	r1, #12
 801027e:	4811      	ldr	r0, [pc, #68]	; (80102c4 <main+0xb4>)
 8010280:	f008 f96a 	bl	8018558 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8010284:	213c      	movs	r1, #60	; 0x3c
 8010286:	4810      	ldr	r0, [pc, #64]	; (80102c8 <main+0xb8>)
 8010288:	f008 fcbe 	bl	8018c08 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 801028c:	480f      	ldr	r0, [pc, #60]	; (80102cc <main+0xbc>)
 801028e:	f008 f833 	bl	80182f8 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8010292:	2108      	movs	r1, #8
 8010294:	480e      	ldr	r0, [pc, #56]	; (80102d0 <main+0xc0>)
 8010296:	f008 fac7 	bl	8018828 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 801029a:	210c      	movs	r1, #12
 801029c:	480c      	ldr	r0, [pc, #48]	; (80102d0 <main+0xc0>)
 801029e:	f008 fac3 	bl	8018828 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80102a2:	f00c fb39 	bl	801c918 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80102a6:	4a0b      	ldr	r2, [pc, #44]	; (80102d4 <main+0xc4>)
 80102a8:	2100      	movs	r1, #0
 80102aa:	480b      	ldr	r0, [pc, #44]	; (80102d8 <main+0xc8>)
 80102ac:	f00c fb7e 	bl	801c9ac <osThreadNew>
 80102b0:	4603      	mov	r3, r0
 80102b2:	4a0a      	ldr	r2, [pc, #40]	; (80102dc <main+0xcc>)
 80102b4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 80102b6:	f7f9 fdeb 	bl	8009e90 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80102ba:	f00c fb51 	bl	801c960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80102be:	e7fe      	b.n	80102be <main+0xae>
 80102c0:	20000848 	.word	0x20000848
 80102c4:	200007b0 	.word	0x200007b0
 80102c8:	20000764 	.word	0x20000764
 80102cc:	200007fc 	.word	0x200007fc
 80102d0:	20000718 	.word	0x20000718
 80102d4:	08023178 	.word	0x08023178
 80102d8:	080113f5 	.word	0x080113f5
 80102dc:	20000b88 	.word	0x20000b88

080102e0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b098      	sub	sp, #96	; 0x60
 80102e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80102e6:	f107 0318 	add.w	r3, r7, #24
 80102ea:	2248      	movs	r2, #72	; 0x48
 80102ec:	2100      	movs	r1, #0
 80102ee:	4618      	mov	r0, r3
 80102f0:	f011 fb79 	bl	80219e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80102f4:	1d3b      	adds	r3, r7, #4
 80102f6:	2200      	movs	r2, #0
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	605a      	str	r2, [r3, #4]
 80102fc:	609a      	str	r2, [r3, #8]
 80102fe:	60da      	str	r2, [r3, #12]
 8010300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8010302:	2000      	movs	r0, #0
 8010304:	f005 f9c4 	bl	8015690 <HAL_PWREx_ControlVoltageScaling>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	bf14      	ite	ne
 801030e:	2301      	movne	r3, #1
 8010310:	2300      	moveq	r3, #0
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b00      	cmp	r3, #0
 8010316:	d001      	beq.n	801031c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8010318:	f001 f88b 	bl	8011432 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 801031c:	f005 f99a 	bl	8015654 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8010320:	4b26      	ldr	r3, [pc, #152]	; (80103bc <_Z18SystemClock_Configv+0xdc>)
 8010322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010326:	4a25      	ldr	r2, [pc, #148]	; (80103bc <_Z18SystemClock_Configv+0xdc>)
 8010328:	f023 0318 	bic.w	r3, r3, #24
 801032c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8010330:	2334      	movs	r3, #52	; 0x34
 8010332:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8010334:	2381      	movs	r3, #129	; 0x81
 8010336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8010338:	2301      	movs	r3, #1
 801033a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801033c:	2301      	movs	r3, #1
 801033e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8010340:	2300      	movs	r3, #0
 8010342:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8010344:	2360      	movs	r3, #96	; 0x60
 8010346:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010348:	2302      	movs	r3, #2
 801034a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 801034c:	2301      	movs	r3, #1
 801034e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8010350:	2301      	movs	r3, #1
 8010352:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8010354:	2337      	movs	r3, #55	; 0x37
 8010356:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8010358:	2307      	movs	r3, #7
 801035a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801035c:	2302      	movs	r3, #2
 801035e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8010360:	2302      	movs	r3, #2
 8010362:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010364:	f107 0318 	add.w	r3, r7, #24
 8010368:	4618      	mov	r0, r3
 801036a:	f005 fa21 	bl	80157b0 <HAL_RCC_OscConfig>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	bf14      	ite	ne
 8010374:	2301      	movne	r3, #1
 8010376:	2300      	moveq	r3, #0
 8010378:	b2db      	uxtb	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	d001      	beq.n	8010382 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 801037e:	f001 f858 	bl	8011432 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010382:	230f      	movs	r3, #15
 8010384:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010386:	2303      	movs	r3, #3
 8010388:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801038a:	2300      	movs	r3, #0
 801038c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801038e:	2300      	movs	r3, #0
 8010390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8010392:	2300      	movs	r3, #0
 8010394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010396:	1d3b      	adds	r3, r7, #4
 8010398:	2105      	movs	r1, #5
 801039a:	4618      	mov	r0, r3
 801039c:	f005 fede 	bl	801615c <HAL_RCC_ClockConfig>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	bf14      	ite	ne
 80103a6:	2301      	movne	r3, #1
 80103a8:	2300      	moveq	r3, #0
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80103b0:	f001 f83f 	bl	8011432 <Error_Handler>
  }
}
 80103b4:	bf00      	nop
 80103b6:	3760      	adds	r7, #96	; 0x60
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	40021000 	.word	0x40021000

080103c0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b08a      	sub	sp, #40	; 0x28
 80103c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80103c6:	f107 031c 	add.w	r3, r7, #28
 80103ca:	2200      	movs	r2, #0
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	605a      	str	r2, [r3, #4]
 80103d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80103d2:	1d3b      	adds	r3, r7, #4
 80103d4:	2200      	movs	r2, #0
 80103d6:	601a      	str	r2, [r3, #0]
 80103d8:	605a      	str	r2, [r3, #4]
 80103da:	609a      	str	r2, [r3, #8]
 80103dc:	60da      	str	r2, [r3, #12]
 80103de:	611a      	str	r2, [r3, #16]
 80103e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80103e2:	4b82      	ldr	r3, [pc, #520]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80103e4:	4a82      	ldr	r2, [pc, #520]	; (80105f0 <_ZL12MX_ADC1_Initv+0x230>)
 80103e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80103e8:	4b80      	ldr	r3, [pc, #512]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80103ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80103ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80103f0:	4b7e      	ldr	r3, [pc, #504]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80103f6:	4b7d      	ldr	r3, [pc, #500]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80103fc:	4b7b      	ldr	r3, [pc, #492]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80103fe:	2201      	movs	r2, #1
 8010400:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010402:	4b7a      	ldr	r3, [pc, #488]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010404:	2208      	movs	r2, #8
 8010406:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8010408:	4b78      	ldr	r3, [pc, #480]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801040a:	2201      	movs	r2, #1
 801040c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801040e:	4b77      	ldr	r3, [pc, #476]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010410:	2200      	movs	r2, #0
 8010412:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8010414:	4b75      	ldr	r3, [pc, #468]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010416:	2208      	movs	r2, #8
 8010418:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801041a:	4b74      	ldr	r3, [pc, #464]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801041c:	2200      	movs	r2, #0
 801041e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8010422:	4b72      	ldr	r3, [pc, #456]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010424:	2200      	movs	r2, #0
 8010426:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8010428:	4b70      	ldr	r3, [pc, #448]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801042a:	2200      	movs	r2, #0
 801042c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 801042e:	4b6f      	ldr	r3, [pc, #444]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010430:	2201      	movs	r2, #1
 8010432:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8010436:	4b6d      	ldr	r3, [pc, #436]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801043c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 801043e:	4b6b      	ldr	r3, [pc, #428]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010440:	2201      	movs	r2, #1
 8010442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8010446:	4b69      	ldr	r3, [pc, #420]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010448:	2214      	movs	r2, #20
 801044a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 801044c:	4b67      	ldr	r3, [pc, #412]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801044e:	22c0      	movs	r2, #192	; 0xc0
 8010450:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8010452:	4b66      	ldr	r3, [pc, #408]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010454:	2200      	movs	r2, #0
 8010456:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8010458:	4b64      	ldr	r3, [pc, #400]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801045a:	2201      	movs	r2, #1
 801045c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801045e:	4863      	ldr	r0, [pc, #396]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010460:	f002 f9a8 	bl	80127b4 <HAL_ADC_Init>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	bf14      	ite	ne
 801046a:	2301      	movne	r3, #1
 801046c:	2300      	moveq	r3, #0
 801046e:	b2db      	uxtb	r3, r3
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 8010474:	f000 ffdd 	bl	8011432 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010478:	2300      	movs	r3, #0
 801047a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 801047c:	f107 031c 	add.w	r3, r7, #28
 8010480:	4619      	mov	r1, r3
 8010482:	485a      	ldr	r0, [pc, #360]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010484:	f003 fb2a 	bl	8013adc <HAL_ADCEx_MultiModeConfigChannel>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	bf14      	ite	ne
 801048e:	2301      	movne	r3, #1
 8010490:	2300      	moveq	r3, #0
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d001      	beq.n	801049c <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 8010498:	f000 ffcb 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 801049c:	4b55      	ldr	r3, [pc, #340]	; (80105f4 <_ZL12MX_ADC1_Initv+0x234>)
 801049e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80104a0:	2306      	movs	r3, #6
 80104a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80104a4:	2301      	movs	r3, #1
 80104a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80104a8:	237f      	movs	r3, #127	; 0x7f
 80104aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80104ac:	2304      	movs	r3, #4
 80104ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80104b4:	1d3b      	adds	r3, r7, #4
 80104b6:	4619      	mov	r1, r3
 80104b8:	484c      	ldr	r0, [pc, #304]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80104ba:	f002 fdb3 	bl	8013024 <HAL_ADC_ConfigChannel>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	bf14      	ite	ne
 80104c4:	2301      	movne	r3, #1
 80104c6:	2300      	moveq	r3, #0
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d001      	beq.n	80104d2 <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 80104ce:	f000 ffb0 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80104d2:	4b49      	ldr	r3, [pc, #292]	; (80105f8 <_ZL12MX_ADC1_Initv+0x238>)
 80104d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80104d6:	230c      	movs	r3, #12
 80104d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80104da:	1d3b      	adds	r3, r7, #4
 80104dc:	4619      	mov	r1, r3
 80104de:	4843      	ldr	r0, [pc, #268]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80104e0:	f002 fda0 	bl	8013024 <HAL_ADC_ConfigChannel>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	bf14      	ite	ne
 80104ea:	2301      	movne	r3, #1
 80104ec:	2300      	moveq	r3, #0
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d001      	beq.n	80104f8 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 80104f4:	f000 ff9d 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80104f8:	4b40      	ldr	r3, [pc, #256]	; (80105fc <_ZL12MX_ADC1_Initv+0x23c>)
 80104fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80104fc:	2312      	movs	r3, #18
 80104fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010500:	1d3b      	adds	r3, r7, #4
 8010502:	4619      	mov	r1, r3
 8010504:	4839      	ldr	r0, [pc, #228]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010506:	f002 fd8d 	bl	8013024 <HAL_ADC_ConfigChannel>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	bf14      	ite	ne
 8010510:	2301      	movne	r3, #1
 8010512:	2300      	moveq	r3, #0
 8010514:	b2db      	uxtb	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 801051a:	f000 ff8a 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 801051e:	4b38      	ldr	r3, [pc, #224]	; (8010600 <_ZL12MX_ADC1_Initv+0x240>)
 8010520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8010522:	2318      	movs	r3, #24
 8010524:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010526:	1d3b      	adds	r3, r7, #4
 8010528:	4619      	mov	r1, r3
 801052a:	4830      	ldr	r0, [pc, #192]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801052c:	f002 fd7a 	bl	8013024 <HAL_ADC_ConfigChannel>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	bf14      	ite	ne
 8010536:	2301      	movne	r3, #1
 8010538:	2300      	moveq	r3, #0
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d001      	beq.n	8010544 <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8010540:	f000 ff77 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8010544:	4b2f      	ldr	r3, [pc, #188]	; (8010604 <_ZL12MX_ADC1_Initv+0x244>)
 8010546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8010548:	f44f 7380 	mov.w	r3, #256	; 0x100
 801054c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801054e:	1d3b      	adds	r3, r7, #4
 8010550:	4619      	mov	r1, r3
 8010552:	4826      	ldr	r0, [pc, #152]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 8010554:	f002 fd66 	bl	8013024 <HAL_ADC_ConfigChannel>
 8010558:	4603      	mov	r3, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	bf14      	ite	ne
 801055e:	2301      	movne	r3, #1
 8010560:	2300      	moveq	r3, #0
 8010562:	b2db      	uxtb	r3, r3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 8010568:	f000 ff63 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 801056c:	4b26      	ldr	r3, [pc, #152]	; (8010608 <_ZL12MX_ADC1_Initv+0x248>)
 801056e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8010570:	f44f 7383 	mov.w	r3, #262	; 0x106
 8010574:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8010576:	1d3b      	adds	r3, r7, #4
 8010578:	4619      	mov	r1, r3
 801057a:	481c      	ldr	r0, [pc, #112]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 801057c:	f002 fd52 	bl	8013024 <HAL_ADC_ConfigChannel>
 8010580:	4603      	mov	r3, r0
 8010582:	2b00      	cmp	r3, #0
 8010584:	bf14      	ite	ne
 8010586:	2301      	movne	r3, #1
 8010588:	2300      	moveq	r3, #0
 801058a:	b2db      	uxtb	r3, r3
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 8010590:	f000 ff4f 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8010594:	4b1d      	ldr	r3, [pc, #116]	; (801060c <_ZL12MX_ADC1_Initv+0x24c>)
 8010596:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8010598:	f44f 7386 	mov.w	r3, #268	; 0x10c
 801059c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801059e:	1d3b      	adds	r3, r7, #4
 80105a0:	4619      	mov	r1, r3
 80105a2:	4812      	ldr	r0, [pc, #72]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80105a4:	f002 fd3e 	bl	8013024 <HAL_ADC_ConfigChannel>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	bf14      	ite	ne
 80105ae:	2301      	movne	r3, #1
 80105b0:	2300      	moveq	r3, #0
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d001      	beq.n	80105bc <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 80105b8:	f000 ff3b 	bl	8011432 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80105bc:	4b14      	ldr	r3, [pc, #80]	; (8010610 <_ZL12MX_ADC1_Initv+0x250>)
 80105be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80105c0:	f44f 7389 	mov.w	r3, #274	; 0x112
 80105c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80105c6:	1d3b      	adds	r3, r7, #4
 80105c8:	4619      	mov	r1, r3
 80105ca:	4808      	ldr	r0, [pc, #32]	; (80105ec <_ZL12MX_ADC1_Initv+0x22c>)
 80105cc:	f002 fd2a 	bl	8013024 <HAL_ADC_ConfigChannel>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	bf14      	ite	ne
 80105d6:	2301      	movne	r3, #1
 80105d8:	2300      	moveq	r3, #0
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d001      	beq.n	80105e4 <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 80105e0:	f000 ff27 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80105e4:	bf00      	nop
 80105e6:	3728      	adds	r7, #40	; 0x28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	200002e4 	.word	0x200002e4
 80105f0:	42028000 	.word	0x42028000
 80105f4:	04300002 	.word	0x04300002
 80105f8:	08600004 	.word	0x08600004
 80105fc:	0c900008 	.word	0x0c900008
 8010600:	1d500080 	.word	0x1d500080
 8010604:	21800100 	.word	0x21800100
 8010608:	25b00200 	.word	0x25b00200
 801060c:	32601000 	.word	0x32601000
 8010610:	43210000 	.word	0x43210000

08010614 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8010618:	4b22      	ldr	r3, [pc, #136]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 801061a:	4a23      	ldr	r2, [pc, #140]	; (80106a8 <_ZL12MX_I2C1_Initv+0x94>)
 801061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 801061e:	4b21      	ldr	r3, [pc, #132]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010620:	4a22      	ldr	r2, [pc, #136]	; (80106ac <_ZL12MX_I2C1_Initv+0x98>)
 8010622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8010624:	4b1f      	ldr	r3, [pc, #124]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010626:	2200      	movs	r2, #0
 8010628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801062a:	4b1e      	ldr	r3, [pc, #120]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 801062c:	2201      	movs	r2, #1
 801062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010630:	4b1c      	ldr	r3, [pc, #112]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010632:	2200      	movs	r2, #0
 8010634:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8010636:	4b1b      	ldr	r3, [pc, #108]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010638:	2200      	movs	r2, #0
 801063a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801063c:	4b19      	ldr	r3, [pc, #100]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 801063e:	2200      	movs	r2, #0
 8010640:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010642:	4b18      	ldr	r3, [pc, #96]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010644:	2200      	movs	r2, #0
 8010646:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8010648:	4b16      	ldr	r3, [pc, #88]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 801064a:	2200      	movs	r2, #0
 801064c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801064e:	4815      	ldr	r0, [pc, #84]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010650:	f004 f928 	bl	80148a4 <HAL_I2C_Init>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	bf14      	ite	ne
 801065a:	2301      	movne	r3, #1
 801065c:	2300      	moveq	r3, #0
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8010664:	f000 fee5 	bl	8011432 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8010668:	2100      	movs	r1, #0
 801066a:	480e      	ldr	r0, [pc, #56]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 801066c:	f004 fe26 	bl	80152bc <HAL_I2CEx_ConfigAnalogFilter>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	bf14      	ite	ne
 8010676:	2301      	movne	r3, #1
 8010678:	2300      	moveq	r3, #0
 801067a:	b2db      	uxtb	r3, r3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d001      	beq.n	8010684 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8010680:	f000 fed7 	bl	8011432 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8010684:	2100      	movs	r1, #0
 8010686:	4807      	ldr	r0, [pc, #28]	; (80106a4 <_ZL12MX_I2C1_Initv+0x90>)
 8010688:	f004 fe63 	bl	8015352 <HAL_I2CEx_ConfigDigitalFilter>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	bf14      	ite	ne
 8010692:	2301      	movne	r3, #1
 8010694:	2300      	moveq	r3, #0
 8010696:	b2db      	uxtb	r3, r3
 8010698:	2b00      	cmp	r3, #0
 801069a:	d001      	beq.n	80106a0 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 801069c:	f000 fec9 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80106a0:	bf00      	nop
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	200003b4 	.word	0x200003b4
 80106a8:	40005400 	.word	0x40005400
 80106ac:	60514452 	.word	0x60514452

080106b0 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80106b4:	2000      	movs	r0, #0
 80106b6:	f004 fe99 	bl	80153ec <HAL_ICACHE_ConfigAssociativityMode>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	bf14      	ite	ne
 80106c0:	2301      	movne	r3, #1
 80106c2:	2300      	moveq	r3, #0
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d001      	beq.n	80106ce <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 80106ca:	f000 feb2 	bl	8011432 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80106ce:	f004 fead 	bl	801542c <HAL_ICACHE_Enable>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	bf14      	ite	ne
 80106d8:	2301      	movne	r3, #1
 80106da:	2300      	moveq	r3, #0
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 80106e2:	f000 fea6 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80106e6:	bf00      	nop
 80106e8:	bd80      	pop	{r7, pc}
	...

080106ec <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80106f0:	4b2c      	ldr	r3, [pc, #176]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80106f2:	4a2d      	ldr	r2, [pc, #180]	; (80107a8 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 80106f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80106f6:	4b2b      	ldr	r3, [pc, #172]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80106f8:	4a2c      	ldr	r2, [pc, #176]	; (80107ac <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 80106fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80106fc:	4b29      	ldr	r3, [pc, #164]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80106fe:	2200      	movs	r2, #0
 8010700:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8010702:	4b28      	ldr	r3, [pc, #160]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010704:	2200      	movs	r2, #0
 8010706:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8010708:	4b26      	ldr	r3, [pc, #152]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801070a:	2200      	movs	r2, #0
 801070c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 801070e:	4b25      	ldr	r3, [pc, #148]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010710:	220c      	movs	r2, #12
 8010712:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010714:	4b23      	ldr	r3, [pc, #140]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010716:	2200      	movs	r2, #0
 8010718:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801071a:	4b22      	ldr	r3, [pc, #136]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801071c:	2200      	movs	r2, #0
 801071e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8010720:	4b20      	ldr	r3, [pc, #128]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010722:	2200      	movs	r2, #0
 8010724:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010726:	4b1f      	ldr	r3, [pc, #124]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010728:	2200      	movs	r2, #0
 801072a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 801072c:	4b1d      	ldr	r3, [pc, #116]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801072e:	2200      	movs	r2, #0
 8010730:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8010732:	481c      	ldr	r0, [pc, #112]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010734:	f009 fd8e 	bl	801a254 <HAL_UART_Init>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	bf14      	ite	ne
 801073e:	2301      	movne	r3, #1
 8010740:	2300      	moveq	r3, #0
 8010742:	b2db      	uxtb	r3, r3
 8010744:	2b00      	cmp	r3, #0
 8010746:	d001      	beq.n	801074c <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 8010748:	f000 fe73 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801074c:	2100      	movs	r1, #0
 801074e:	4815      	ldr	r0, [pc, #84]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010750:	f00b fddf 	bl	801c312 <HAL_UARTEx_SetTxFifoThreshold>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	bf14      	ite	ne
 801075a:	2301      	movne	r3, #1
 801075c:	2300      	moveq	r3, #0
 801075e:	b2db      	uxtb	r3, r3
 8010760:	2b00      	cmp	r3, #0
 8010762:	d001      	beq.n	8010768 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 8010764:	f000 fe65 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010768:	2100      	movs	r1, #0
 801076a:	480e      	ldr	r0, [pc, #56]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801076c:	f00b fe0f 	bl	801c38e <HAL_UARTEx_SetRxFifoThreshold>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	bf14      	ite	ne
 8010776:	2301      	movne	r3, #1
 8010778:	2300      	moveq	r3, #0
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b00      	cmp	r3, #0
 801077e:	d001      	beq.n	8010784 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 8010780:	f000 fe57 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8010784:	4807      	ldr	r0, [pc, #28]	; (80107a4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8010786:	f00b fd8b 	bl	801c2a0 <HAL_UARTEx_DisableFifoMode>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	bf14      	ite	ne
 8010790:	2301      	movne	r3, #1
 8010792:	2300      	moveq	r3, #0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 801079a:	f000 fe4a 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 801079e:	bf00      	nop
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	20000408 	.word	0x20000408
 80107a8:	40008000 	.word	0x40008000
 80107ac:	00033324 	.word	0x00033324

080107b0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80107b4:	4b2c      	ldr	r3, [pc, #176]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107b6:	4a2d      	ldr	r2, [pc, #180]	; (801086c <_ZL13MX_UART4_Initv+0xbc>)
 80107b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80107ba:	4b2b      	ldr	r3, [pc, #172]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80107c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80107c2:	4b29      	ldr	r3, [pc, #164]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80107c8:	4b27      	ldr	r3, [pc, #156]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107ca:	2200      	movs	r2, #0
 80107cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80107ce:	4b26      	ldr	r3, [pc, #152]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107d0:	2200      	movs	r2, #0
 80107d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80107d4:	4b24      	ldr	r3, [pc, #144]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107d6:	2204      	movs	r2, #4
 80107d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80107da:	4b23      	ldr	r3, [pc, #140]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107dc:	2200      	movs	r2, #0
 80107de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80107e0:	4b21      	ldr	r3, [pc, #132]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80107e6:	4b20      	ldr	r3, [pc, #128]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80107ec:	4b1e      	ldr	r3, [pc, #120]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80107f2:	4b1d      	ldr	r3, [pc, #116]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80107f8:	481b      	ldr	r0, [pc, #108]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 80107fa:	f009 fd2b 	bl	801a254 <HAL_UART_Init>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	bf14      	ite	ne
 8010804:	2301      	movne	r3, #1
 8010806:	2300      	moveq	r3, #0
 8010808:	b2db      	uxtb	r3, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	d001      	beq.n	8010812 <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 801080e:	f000 fe10 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8010812:	2100      	movs	r1, #0
 8010814:	4814      	ldr	r0, [pc, #80]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 8010816:	f00b fd7c 	bl	801c312 <HAL_UARTEx_SetTxFifoThreshold>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	bf14      	ite	ne
 8010820:	2301      	movne	r3, #1
 8010822:	2300      	moveq	r3, #0
 8010824:	b2db      	uxtb	r3, r3
 8010826:	2b00      	cmp	r3, #0
 8010828:	d001      	beq.n	801082e <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 801082a:	f000 fe02 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801082e:	2100      	movs	r1, #0
 8010830:	480d      	ldr	r0, [pc, #52]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 8010832:	f00b fdac 	bl	801c38e <HAL_UARTEx_SetRxFifoThreshold>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	bf14      	ite	ne
 801083c:	2301      	movne	r3, #1
 801083e:	2300      	moveq	r3, #0
 8010840:	b2db      	uxtb	r3, r3
 8010842:	2b00      	cmp	r3, #0
 8010844:	d001      	beq.n	801084a <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 8010846:	f000 fdf4 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 801084a:	4807      	ldr	r0, [pc, #28]	; (8010868 <_ZL13MX_UART4_Initv+0xb8>)
 801084c:	f00b fd28 	bl	801c2a0 <HAL_UARTEx_DisableFifoMode>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	bf14      	ite	ne
 8010856:	2301      	movne	r3, #1
 8010858:	2300      	moveq	r3, #0
 801085a:	b2db      	uxtb	r3, r3
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8010860:	f000 fde7 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8010864:	bf00      	nop
 8010866:	bd80      	pop	{r7, pc}
 8010868:	2000049c 	.word	0x2000049c
 801086c:	40004c00 	.word	0x40004c00

08010870 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8010874:	4b2c      	ldr	r3, [pc, #176]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8010876:	4a2d      	ldr	r2, [pc, #180]	; (801092c <_ZL19MX_USART2_UART_Initv+0xbc>)
 8010878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801087a:	4b2b      	ldr	r3, [pc, #172]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 801087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010882:	4b29      	ldr	r3, [pc, #164]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8010884:	2200      	movs	r2, #0
 8010886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010888:	4b27      	ldr	r3, [pc, #156]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 801088a:	2200      	movs	r2, #0
 801088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801088e:	4b26      	ldr	r3, [pc, #152]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8010890:	2200      	movs	r2, #0
 8010892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8010894:	4b24      	ldr	r3, [pc, #144]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8010896:	2208      	movs	r2, #8
 8010898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801089a:	4b23      	ldr	r3, [pc, #140]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 801089c:	2200      	movs	r2, #0
 801089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80108a0:	4b21      	ldr	r3, [pc, #132]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80108a6:	4b20      	ldr	r3, [pc, #128]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80108ac:	4b1e      	ldr	r3, [pc, #120]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80108b2:	4b1d      	ldr	r3, [pc, #116]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80108b8:	481b      	ldr	r0, [pc, #108]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108ba:	f009 fccb 	bl	801a254 <HAL_UART_Init>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	bf14      	ite	ne
 80108c4:	2301      	movne	r3, #1
 80108c6:	2300      	moveq	r3, #0
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 80108ce:	f000 fdb0 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80108d2:	2100      	movs	r1, #0
 80108d4:	4814      	ldr	r0, [pc, #80]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108d6:	f00b fd1c 	bl	801c312 <HAL_UARTEx_SetTxFifoThreshold>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	bf14      	ite	ne
 80108e0:	2301      	movne	r3, #1
 80108e2:	2300      	moveq	r3, #0
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d001      	beq.n	80108ee <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 80108ea:	f000 fda2 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80108ee:	2100      	movs	r1, #0
 80108f0:	480d      	ldr	r0, [pc, #52]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80108f2:	f00b fd4c 	bl	801c38e <HAL_UARTEx_SetRxFifoThreshold>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	bf14      	ite	ne
 80108fc:	2301      	movne	r3, #1
 80108fe:	2300      	moveq	r3, #0
 8010900:	b2db      	uxtb	r3, r3
 8010902:	2b00      	cmp	r3, #0
 8010904:	d001      	beq.n	801090a <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8010906:	f000 fd94 	bl	8011432 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801090a:	4807      	ldr	r0, [pc, #28]	; (8010928 <_ZL19MX_USART2_UART_Initv+0xb8>)
 801090c:	f00b fcc8 	bl	801c2a0 <HAL_UARTEx_DisableFifoMode>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	bf14      	ite	ne
 8010916:	2301      	movne	r3, #1
 8010918:	2300      	moveq	r3, #0
 801091a:	b2db      	uxtb	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8010920:	f000 fd87 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8010924:	bf00      	nop
 8010926:	bd80      	pop	{r7, pc}
 8010928:	20000530 	.word	0x20000530
 801092c:	40004400 	.word	0x40004400

08010930 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b086      	sub	sp, #24
 8010934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8010936:	463b      	mov	r3, r7
 8010938:	2200      	movs	r2, #0
 801093a:	601a      	str	r2, [r3, #0]
 801093c:	605a      	str	r2, [r3, #4]
 801093e:	609a      	str	r2, [r3, #8]
 8010940:	60da      	str	r2, [r3, #12]
 8010942:	611a      	str	r2, [r3, #16]
 8010944:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8010946:	4b22      	ldr	r3, [pc, #136]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 8010948:	4a22      	ldr	r2, [pc, #136]	; (80109d4 <_ZL11MX_RTC_Initv+0xa4>)
 801094a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801094c:	4b20      	ldr	r3, [pc, #128]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 801094e:	2200      	movs	r2, #0
 8010950:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8010952:	4b1f      	ldr	r3, [pc, #124]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 8010954:	227f      	movs	r2, #127	; 0x7f
 8010956:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8010958:	4b1d      	ldr	r3, [pc, #116]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 801095a:	22ff      	movs	r2, #255	; 0xff
 801095c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801095e:	4b1c      	ldr	r3, [pc, #112]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 8010960:	2200      	movs	r2, #0
 8010962:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8010964:	4b1a      	ldr	r3, [pc, #104]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 8010966:	2200      	movs	r2, #0
 8010968:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801096a:	4b19      	ldr	r3, [pc, #100]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 801096c:	2200      	movs	r2, #0
 801096e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8010970:	4b17      	ldr	r3, [pc, #92]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 8010972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010976:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8010978:	4b15      	ldr	r3, [pc, #84]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 801097a:	2200      	movs	r2, #0
 801097c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801097e:	4814      	ldr	r0, [pc, #80]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 8010980:	f006 fc18 	bl	80171b4 <HAL_RTC_Init>
 8010984:	4603      	mov	r3, r0
 8010986:	2b00      	cmp	r3, #0
 8010988:	bf14      	ite	ne
 801098a:	2301      	movne	r3, #1
 801098c:	2300      	moveq	r3, #0
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	d001      	beq.n	8010998 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8010994:	f000 fd4d 	bl	8011432 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8010998:	2300      	movs	r3, #0
 801099a:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 801099c:	2300      	movs	r3, #0
 801099e:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80109a4:	2300      	movs	r3, #0
 80109a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80109a8:	463b      	mov	r3, r7
 80109aa:	4619      	mov	r1, r3
 80109ac:	4808      	ldr	r0, [pc, #32]	; (80109d0 <_ZL11MX_RTC_Initv+0xa0>)
 80109ae:	f006 fd0f 	bl	80173d0 <HAL_RTCEx_PrivilegeModeSet>
 80109b2:	4603      	mov	r3, r0
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	bf14      	ite	ne
 80109b8:	2301      	movne	r3, #1
 80109ba:	2300      	moveq	r3, #0
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d001      	beq.n	80109c6 <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 80109c2:	f000 fd36 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80109c6:	bf00      	nop
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	200005c4 	.word	0x200005c4
 80109d4:	40002800 	.word	0x40002800

080109d8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80109dc:	4b1d      	ldr	r3, [pc, #116]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 80109de:	4a1e      	ldr	r2, [pc, #120]	; (8010a58 <_ZL12MX_SPI1_Initv+0x80>)
 80109e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80109e2:	4b1c      	ldr	r3, [pc, #112]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 80109e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80109e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80109ea:	4b1a      	ldr	r3, [pc, #104]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80109f0:	4b18      	ldr	r3, [pc, #96]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 80109f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80109f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80109f8:	4b16      	ldr	r3, [pc, #88]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80109fe:	4b15      	ldr	r3, [pc, #84]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8010a04:	4b13      	ldr	r3, [pc, #76]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8010a0c:	4b11      	ldr	r3, [pc, #68]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a0e:	2228      	movs	r2, #40	; 0x28
 8010a10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010a12:	4b10      	ldr	r3, [pc, #64]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8010a18:	4b0e      	ldr	r3, [pc, #56]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010a1e:	4b0d      	ldr	r3, [pc, #52]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8010a24:	4b0b      	ldr	r3, [pc, #44]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a26:	2207      	movs	r2, #7
 8010a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8010a2a:	4b0a      	ldr	r3, [pc, #40]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010a30:	4b08      	ldr	r3, [pc, #32]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a32:	2208      	movs	r2, #8
 8010a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8010a36:	4807      	ldr	r0, [pc, #28]	; (8010a54 <_ZL12MX_SPI1_Initv+0x7c>)
 8010a38:	f006 fcf6 	bl	8017428 <HAL_SPI_Init>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	bf14      	ite	ne
 8010a42:	2301      	movne	r3, #1
 8010a44:	2300      	moveq	r3, #0
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d001      	beq.n	8010a50 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8010a4c:	f000 fcf1 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8010a50:	bf00      	nop
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	200005ec 	.word	0x200005ec
 8010a58:	40013000 	.word	0x40013000

08010a5c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8010a60:	4b1d      	ldr	r3, [pc, #116]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a62:	4a1e      	ldr	r2, [pc, #120]	; (8010adc <_ZL12MX_SPI2_Initv+0x80>)
 8010a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010a66:	4b1c      	ldr	r3, [pc, #112]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010a6e:	4b1a      	ldr	r3, [pc, #104]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a70:	2200      	movs	r2, #0
 8010a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8010a74:	4b18      	ldr	r3, [pc, #96]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8010a7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010a7c:	4b16      	ldr	r3, [pc, #88]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a7e:	2200      	movs	r2, #0
 8010a80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010a82:	4b15      	ldr	r3, [pc, #84]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a84:	2200      	movs	r2, #0
 8010a86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010a88:	4b13      	ldr	r3, [pc, #76]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010a90:	4b11      	ldr	r3, [pc, #68]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a92:	2218      	movs	r2, #24
 8010a94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8010a96:	4b10      	ldr	r3, [pc, #64]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a98:	2280      	movs	r2, #128	; 0x80
 8010a9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010a9c:	4b0e      	ldr	r3, [pc, #56]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010aa2:	4b0d      	ldr	r3, [pc, #52]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8010aa8:	4b0b      	ldr	r3, [pc, #44]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010aaa:	2207      	movs	r2, #7
 8010aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8010aae:	4b0a      	ldr	r3, [pc, #40]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010ab4:	4b08      	ldr	r3, [pc, #32]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010ab6:	2208      	movs	r2, #8
 8010ab8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010aba:	4807      	ldr	r0, [pc, #28]	; (8010ad8 <_ZL12MX_SPI2_Initv+0x7c>)
 8010abc:	f006 fcb4 	bl	8017428 <HAL_SPI_Init>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	bf14      	ite	ne
 8010ac6:	2301      	movne	r3, #1
 8010ac8:	2300      	moveq	r3, #0
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d001      	beq.n	8010ad4 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8010ad0:	f000 fcaf 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8010ad4:	bf00      	nop
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	20000650 	.word	0x20000650
 8010adc:	40003800 	.word	0x40003800

08010ae0 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8010ae4:	4b1d      	ldr	r3, [pc, #116]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010ae6:	4a1e      	ldr	r2, [pc, #120]	; (8010b60 <_ZL12MX_SPI3_Initv+0x80>)
 8010ae8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8010aea:	4b1c      	ldr	r3, [pc, #112]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010af0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8010af2:	4b1a      	ldr	r3, [pc, #104]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010af4:	2200      	movs	r2, #0
 8010af6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8010af8:	4b18      	ldr	r3, [pc, #96]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010afa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8010afe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010b00:	4b16      	ldr	r3, [pc, #88]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010b06:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b08:	2200      	movs	r2, #0
 8010b0a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8010b0c:	4b13      	ldr	r3, [pc, #76]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b12:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010b14:	4b11      	ldr	r3, [pc, #68]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b16:	2218      	movs	r2, #24
 8010b18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010b1a:	4b10      	ldr	r3, [pc, #64]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8010b20:	4b0e      	ldr	r3, [pc, #56]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010b26:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b2e:	2207      	movs	r2, #7
 8010b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8010b32:	4b0a      	ldr	r3, [pc, #40]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8010b38:	4b08      	ldr	r3, [pc, #32]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b3a:	2208      	movs	r2, #8
 8010b3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8010b3e:	4807      	ldr	r0, [pc, #28]	; (8010b5c <_ZL12MX_SPI3_Initv+0x7c>)
 8010b40:	f006 fc72 	bl	8017428 <HAL_SPI_Init>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	bf14      	ite	ne
 8010b4a:	2301      	movne	r3, #1
 8010b4c:	2300      	moveq	r3, #0
 8010b4e:	b2db      	uxtb	r3, r3
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8010b54:	f000 fc6d 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8010b58:	bf00      	nop
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	200006b4 	.word	0x200006b4
 8010b60:	40003c00 	.word	0x40003c00

08010b64 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08c      	sub	sp, #48	; 0x30
 8010b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010b6a:	f107 0320 	add.w	r3, r7, #32
 8010b6e:	2200      	movs	r2, #0
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	605a      	str	r2, [r3, #4]
 8010b74:	609a      	str	r2, [r3, #8]
 8010b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010b78:	f107 0314 	add.w	r3, r7, #20
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	601a      	str	r2, [r3, #0]
 8010b80:	605a      	str	r2, [r3, #4]
 8010b82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8010b84:	1d3b      	adds	r3, r7, #4
 8010b86:	2200      	movs	r2, #0
 8010b88:	601a      	str	r2, [r3, #0]
 8010b8a:	605a      	str	r2, [r3, #4]
 8010b8c:	609a      	str	r2, [r3, #8]
 8010b8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8010b90:	4b42      	ldr	r3, [pc, #264]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010b92:	4a43      	ldr	r2, [pc, #268]	; (8010ca0 <_ZL12MX_TIM1_Initv+0x13c>)
 8010b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 8010b96:	4b41      	ldr	r3, [pc, #260]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010b98:	226e      	movs	r2, #110	; 0x6e
 8010b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010b9c:	4b3f      	ldr	r3, [pc, #252]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8010ba2:	4b3e      	ldr	r3, [pc, #248]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010ba4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8010ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010baa:	4b3c      	ldr	r3, [pc, #240]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010bac:	2200      	movs	r2, #0
 8010bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8010bb0:	4b3a      	ldr	r3, [pc, #232]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010bb6:	4b39      	ldr	r3, [pc, #228]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010bb8:	2280      	movs	r2, #128	; 0x80
 8010bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8010bbc:	4837      	ldr	r0, [pc, #220]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010bbe:	f007 fb43 	bl	8018248 <HAL_TIM_Base_Init>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	bf14      	ite	ne
 8010bc8:	2301      	movne	r3, #1
 8010bca:	2300      	moveq	r3, #0
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 8010bd2:	f000 fc2e 	bl	8011432 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bda:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8010bdc:	f107 0320 	add.w	r3, r7, #32
 8010be0:	4619      	mov	r1, r3
 8010be2:	482e      	ldr	r0, [pc, #184]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010be4:	f008 fb6e 	bl	80192c4 <HAL_TIM_ConfigClockSource>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bf14      	ite	ne
 8010bee:	2301      	movne	r3, #1
 8010bf0:	2300      	moveq	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d001      	beq.n	8010bfc <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 8010bf8:	f000 fc1b 	bl	8011432 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8010bfc:	4827      	ldr	r0, [pc, #156]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010bfe:	f007 fdb1 	bl	8018764 <HAL_TIM_IC_Init>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	bf14      	ite	ne
 8010c08:	2301      	movne	r3, #1
 8010c0a:	2300      	moveq	r3, #0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d001      	beq.n	8010c16 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8010c12:	f000 fc0e 	bl	8011432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010c16:	2300      	movs	r3, #0
 8010c18:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8010c22:	f107 0314 	add.w	r3, r7, #20
 8010c26:	4619      	mov	r1, r3
 8010c28:	481c      	ldr	r0, [pc, #112]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010c2a:	f009 f9cd 	bl	8019fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	bf14      	ite	ne
 8010c34:	2301      	movne	r3, #1
 8010c36:	2300      	moveq	r3, #0
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d001      	beq.n	8010c42 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 8010c3e:	f000 fbf8 	bl	8011432 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8010c42:	230a      	movs	r3, #10
 8010c44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8010c46:	2301      	movs	r3, #1
 8010c48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8010c52:	1d3b      	adds	r3, r7, #4
 8010c54:	2208      	movs	r2, #8
 8010c56:	4619      	mov	r1, r3
 8010c58:	4810      	ldr	r0, [pc, #64]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010c5a:	f008 f982 	bl	8018f62 <HAL_TIM_IC_ConfigChannel>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	bf14      	ite	ne
 8010c64:	2301      	movne	r3, #1
 8010c66:	2300      	moveq	r3, #0
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8010c6e:	f000 fbe0 	bl	8011432 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8010c72:	1d3b      	adds	r3, r7, #4
 8010c74:	220c      	movs	r2, #12
 8010c76:	4619      	mov	r1, r3
 8010c78:	4808      	ldr	r0, [pc, #32]	; (8010c9c <_ZL12MX_TIM1_Initv+0x138>)
 8010c7a:	f008 f972 	bl	8018f62 <HAL_TIM_IC_ConfigChannel>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	bf14      	ite	ne
 8010c84:	2301      	movne	r3, #1
 8010c86:	2300      	moveq	r3, #0
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d001      	beq.n	8010c92 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 8010c8e:	f000 fbd0 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8010c92:	bf00      	nop
 8010c94:	3730      	adds	r7, #48	; 0x30
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20000718 	.word	0x20000718
 8010ca0:	40012c00 	.word	0x40012c00

08010ca4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08c      	sub	sp, #48	; 0x30
 8010ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8010caa:	f107 030c 	add.w	r3, r7, #12
 8010cae:	2224      	movs	r2, #36	; 0x24
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f010 fe97 	bl	80219e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010cb8:	463b      	mov	r3, r7
 8010cba:	2200      	movs	r2, #0
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	605a      	str	r2, [r3, #4]
 8010cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8010cc2:	4b26      	ldr	r3, [pc, #152]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010cc4:	4a26      	ldr	r2, [pc, #152]	; (8010d60 <_ZL12MX_TIM3_Initv+0xbc>)
 8010cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8010cc8:	4b24      	ldr	r3, [pc, #144]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010cce:	4b23      	ldr	r3, [pc, #140]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8010cd4:	4b21      	ldr	r3, [pc, #132]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010cdc:	4b1f      	ldr	r3, [pc, #124]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010cde:	2200      	movs	r2, #0
 8010ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010ce2:	4b1e      	ldr	r3, [pc, #120]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8010cec:	2300      	movs	r3, #0
 8010cee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8010d00:	2301      	movs	r3, #1
 8010d02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8010d04:	2300      	movs	r3, #0
 8010d06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8010d0c:	f107 030c 	add.w	r3, r7, #12
 8010d10:	4619      	mov	r1, r3
 8010d12:	4812      	ldr	r0, [pc, #72]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010d14:	f007 fed2 	bl	8018abc <HAL_TIM_Encoder_Init>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	bf14      	ite	ne
 8010d1e:	2301      	movne	r3, #1
 8010d20:	2300      	moveq	r3, #0
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8010d28:	f000 fb83 	bl	8011432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010d30:	2300      	movs	r3, #0
 8010d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8010d34:	463b      	mov	r3, r7
 8010d36:	4619      	mov	r1, r3
 8010d38:	4808      	ldr	r0, [pc, #32]	; (8010d5c <_ZL12MX_TIM3_Initv+0xb8>)
 8010d3a:	f009 f945 	bl	8019fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	bf14      	ite	ne
 8010d44:	2301      	movne	r3, #1
 8010d46:	2300      	moveq	r3, #0
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8010d4e:	f000 fb70 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8010d52:	bf00      	nop
 8010d54:	3730      	adds	r7, #48	; 0x30
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop
 8010d5c:	20000764 	.word	0x20000764
 8010d60:	40000400 	.word	0x40000400

08010d64 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b08e      	sub	sp, #56	; 0x38
 8010d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d6e:	2200      	movs	r2, #0
 8010d70:	601a      	str	r2, [r3, #0]
 8010d72:	605a      	str	r2, [r3, #4]
 8010d74:	609a      	str	r2, [r3, #8]
 8010d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010d78:	f107 031c 	add.w	r3, r7, #28
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	605a      	str	r2, [r3, #4]
 8010d82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010d84:	463b      	mov	r3, r7
 8010d86:	2200      	movs	r2, #0
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	605a      	str	r2, [r3, #4]
 8010d8c:	609a      	str	r2, [r3, #8]
 8010d8e:	60da      	str	r2, [r3, #12]
 8010d90:	611a      	str	r2, [r3, #16]
 8010d92:	615a      	str	r2, [r3, #20]
 8010d94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8010d96:	4b41      	ldr	r3, [pc, #260]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010d98:	4a41      	ldr	r2, [pc, #260]	; (8010ea0 <_ZL12MX_TIM5_Initv+0x13c>)
 8010d9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8010d9c:	4b3f      	ldr	r3, [pc, #252]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8010da2:	4b3e      	ldr	r3, [pc, #248]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010da4:	2220      	movs	r2, #32
 8010da6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 8010da8:	4b3c      	ldr	r3, [pc, #240]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010daa:	f240 722a 	movw	r2, #1834	; 0x72a
 8010dae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010db0:	4b3a      	ldr	r3, [pc, #232]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010db6:	4b39      	ldr	r3, [pc, #228]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010db8:	2280      	movs	r2, #128	; 0x80
 8010dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8010dbc:	4837      	ldr	r0, [pc, #220]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010dbe:	f007 fa43 	bl	8018248 <HAL_TIM_Base_Init>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bf14      	ite	ne
 8010dc8:	2301      	movne	r3, #1
 8010dca:	2300      	moveq	r3, #0
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8010dd2:	f000 fb2e 	bl	8011432 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010dda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8010ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010de0:	4619      	mov	r1, r3
 8010de2:	482e      	ldr	r0, [pc, #184]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010de4:	f008 fa6e 	bl	80192c4 <HAL_TIM_ConfigClockSource>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	bf14      	ite	ne
 8010dee:	2301      	movne	r3, #1
 8010df0:	2300      	moveq	r3, #0
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d001      	beq.n	8010dfc <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8010df8:	f000 fb1b 	bl	8011432 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8010dfc:	4827      	ldr	r0, [pc, #156]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010dfe:	f007 fb53 	bl	80184a8 <HAL_TIM_PWM_Init>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	bf14      	ite	ne
 8010e08:	2301      	movne	r3, #1
 8010e0a:	2300      	moveq	r3, #0
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d001      	beq.n	8010e16 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8010e12:	f000 fb0e 	bl	8011432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010e16:	2300      	movs	r3, #0
 8010e18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8010e1e:	f107 031c 	add.w	r3, r7, #28
 8010e22:	4619      	mov	r1, r3
 8010e24:	481d      	ldr	r0, [pc, #116]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010e26:	f009 f8cf 	bl	8019fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	bf14      	ite	ne
 8010e30:	2301      	movne	r3, #1
 8010e32:	2300      	moveq	r3, #0
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d001      	beq.n	8010e3e <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8010e3a:	f000 fafa 	bl	8011432 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010e3e:	2360      	movs	r3, #96	; 0x60
 8010e40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8010e42:	2300      	movs	r3, #0
 8010e44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010e46:	2300      	movs	r3, #0
 8010e48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010e4e:	463b      	mov	r3, r7
 8010e50:	2200      	movs	r2, #0
 8010e52:	4619      	mov	r1, r3
 8010e54:	4811      	ldr	r0, [pc, #68]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010e56:	f008 f921 	bl	801909c <HAL_TIM_PWM_ConfigChannel>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	bf14      	ite	ne
 8010e60:	2301      	movne	r3, #1
 8010e62:	2300      	moveq	r3, #0
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8010e6a:	f000 fae2 	bl	8011432 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8010e6e:	463b      	mov	r3, r7
 8010e70:	220c      	movs	r2, #12
 8010e72:	4619      	mov	r1, r3
 8010e74:	4809      	ldr	r0, [pc, #36]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010e76:	f008 f911 	bl	801909c <HAL_TIM_PWM_ConfigChannel>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	bf14      	ite	ne
 8010e80:	2301      	movne	r3, #1
 8010e82:	2300      	moveq	r3, #0
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d001      	beq.n	8010e8e <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8010e8a:	f000 fad2 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8010e8e:	4803      	ldr	r0, [pc, #12]	; (8010e9c <_ZL12MX_TIM5_Initv+0x138>)
 8010e90:	f000 ff2c 	bl	8011cec <HAL_TIM_MspPostInit>

}
 8010e94:	bf00      	nop
 8010e96:	3738      	adds	r7, #56	; 0x38
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	200007b0 	.word	0x200007b0
 8010ea0:	40000c00 	.word	0x40000c00

08010ea4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b084      	sub	sp, #16
 8010ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010eaa:	1d3b      	adds	r3, r7, #4
 8010eac:	2200      	movs	r2, #0
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	605a      	str	r2, [r3, #4]
 8010eb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8010eb4:	4b19      	ldr	r3, [pc, #100]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010eb6:	4a1a      	ldr	r2, [pc, #104]	; (8010f20 <_ZL12MX_TIM6_Initv+0x7c>)
 8010eb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8010eba:	4b18      	ldr	r3, [pc, #96]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010ebc:	226e      	movs	r2, #110	; 0x6e
 8010ebe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010ec0:	4b16      	ldr	r3, [pc, #88]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8010ec6:	4b15      	ldr	r3, [pc, #84]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ecc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010ece:	4b13      	ldr	r3, [pc, #76]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8010ed4:	4811      	ldr	r0, [pc, #68]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010ed6:	f007 f9b7 	bl	8018248 <HAL_TIM_Base_Init>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	bf14      	ite	ne
 8010ee0:	2301      	movne	r3, #1
 8010ee2:	2300      	moveq	r3, #0
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d001      	beq.n	8010eee <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8010eea:	f000 faa2 	bl	8011432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8010ef6:	1d3b      	adds	r3, r7, #4
 8010ef8:	4619      	mov	r1, r3
 8010efa:	4808      	ldr	r0, [pc, #32]	; (8010f1c <_ZL12MX_TIM6_Initv+0x78>)
 8010efc:	f009 f864 	bl	8019fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	bf14      	ite	ne
 8010f06:	2301      	movne	r3, #1
 8010f08:	2300      	moveq	r3, #0
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8010f10:	f000 fa8f 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8010f14:	bf00      	nop
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	200007fc 	.word	0x200007fc
 8010f20:	40001000 	.word	0x40001000

08010f24 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b098      	sub	sp, #96	; 0x60
 8010f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010f2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f2e:	2200      	movs	r2, #0
 8010f30:	601a      	str	r2, [r3, #0]
 8010f32:	605a      	str	r2, [r3, #4]
 8010f34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010f36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
 8010f3e:	605a      	str	r2, [r3, #4]
 8010f40:	609a      	str	r2, [r3, #8]
 8010f42:	60da      	str	r2, [r3, #12]
 8010f44:	611a      	str	r2, [r3, #16]
 8010f46:	615a      	str	r2, [r3, #20]
 8010f48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010f4a:	1d3b      	adds	r3, r7, #4
 8010f4c:	2234      	movs	r2, #52	; 0x34
 8010f4e:	2100      	movs	r1, #0
 8010f50:	4618      	mov	r0, r3
 8010f52:	f010 fd48 	bl	80219e6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8010f56:	4b45      	ldr	r3, [pc, #276]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f58:	4a45      	ldr	r2, [pc, #276]	; (8011070 <_ZL12MX_TIM8_Initv+0x14c>)
 8010f5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 8010f5c:	4b43      	ldr	r3, [pc, #268]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f5e:	226e      	movs	r2, #110	; 0x6e
 8010f60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010f62:	4b42      	ldr	r3, [pc, #264]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f64:	2200      	movs	r2, #0
 8010f66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 8010f68:	4b40      	ldr	r3, [pc, #256]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f6a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8010f6e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010f70:	4b3e      	ldr	r3, [pc, #248]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8010f76:	4b3d      	ldr	r3, [pc, #244]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f78:	2200      	movs	r2, #0
 8010f7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010f7c:	4b3b      	ldr	r3, [pc, #236]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f7e:	2200      	movs	r2, #0
 8010f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8010f82:	483a      	ldr	r0, [pc, #232]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010f84:	f007 fa90 	bl	80184a8 <HAL_TIM_PWM_Init>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	bf14      	ite	ne
 8010f8e:	2301      	movne	r3, #1
 8010f90:	2300      	moveq	r3, #0
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8010f98:	f000 fa4b 	bl	8011432 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8010fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010fac:	4619      	mov	r1, r3
 8010fae:	482f      	ldr	r0, [pc, #188]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010fb0:	f009 f80a 	bl	8019fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	bf14      	ite	ne
 8010fba:	2301      	movne	r3, #1
 8010fbc:	2300      	moveq	r3, #0
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d001      	beq.n	8010fc8 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8010fc4:	f000 fa35 	bl	8011432 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010fc8:	2360      	movs	r3, #96	; 0x60
 8010fca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010fe4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010fe8:	2200      	movs	r2, #0
 8010fea:	4619      	mov	r1, r3
 8010fec:	481f      	ldr	r0, [pc, #124]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8010fee:	f008 f855 	bl	801909c <HAL_TIM_PWM_ConfigChannel>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	bf14      	ite	ne
 8010ff8:	2301      	movne	r3, #1
 8010ffa:	2300      	moveq	r3, #0
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d001      	beq.n	8011006 <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 8011002:	f000 fa16 	bl	8011432 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011006:	2300      	movs	r3, #0
 8011008:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801100a:	2300      	movs	r3, #0
 801100c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801100e:	2300      	movs	r3, #0
 8011010:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8011012:	2300      	movs	r3, #0
 8011014:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011016:	2300      	movs	r3, #0
 8011018:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801101e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8011020:	2300      	movs	r3, #0
 8011022:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8011024:	2300      	movs	r3, #0
 8011026:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8011028:	2300      	movs	r3, #0
 801102a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801102c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011030:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8011032:	2300      	movs	r3, #0
 8011034:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8011036:	2300      	movs	r3, #0
 8011038:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801103a:	2300      	movs	r3, #0
 801103c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801103e:	1d3b      	adds	r3, r7, #4
 8011040:	4619      	mov	r1, r3
 8011042:	480a      	ldr	r0, [pc, #40]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 8011044:	f009 f848 	bl	801a0d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	bf14      	ite	ne
 801104e:	2301      	movne	r3, #1
 8011050:	2300      	moveq	r3, #0
 8011052:	b2db      	uxtb	r3, r3
 8011054:	2b00      	cmp	r3, #0
 8011056:	d001      	beq.n	801105c <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 8011058:	f000 f9eb 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801105c:	4803      	ldr	r0, [pc, #12]	; (801106c <_ZL12MX_TIM8_Initv+0x148>)
 801105e:	f000 fe45 	bl	8011cec <HAL_TIM_MspPostInit>

}
 8011062:	bf00      	nop
 8011064:	3760      	adds	r7, #96	; 0x60
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	20000848 	.word	0x20000848
 8011070:	40013400 	.word	0x40013400

08011074 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b086      	sub	sp, #24
 8011078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 801107a:	463b      	mov	r3, r7
 801107c:	2200      	movs	r2, #0
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	605a      	str	r2, [r3, #4]
 8011082:	609a      	str	r2, [r3, #8]
 8011084:	60da      	str	r2, [r3, #12]
 8011086:	611a      	str	r2, [r3, #16]
 8011088:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 801108a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801108e:	f7ff f8a7 	bl	80101e0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8011092:	2002      	movs	r0, #2
 8011094:	f7ff f88c 	bl	80101b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8011098:	2001      	movs	r0, #1
 801109a:	f7ff f889 	bl	80101b0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 801109e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80110a4:	2303      	movs	r3, #3
 80110a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80110a8:	2300      	movs	r3, #0
 80110aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80110ac:	463b      	mov	r3, r7
 80110ae:	4619      	mov	r1, r3
 80110b0:	4809      	ldr	r0, [pc, #36]	; (80110d8 <_ZL13MX_UCPD1_Initv+0x64>)
 80110b2:	f00b fb44 	bl	801c73e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80110b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80110bc:	2303      	movs	r3, #3
 80110be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80110c0:	2300      	movs	r3, #0
 80110c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80110c4:	463b      	mov	r3, r7
 80110c6:	4619      	mov	r1, r3
 80110c8:	4804      	ldr	r0, [pc, #16]	; (80110dc <_ZL13MX_UCPD1_Initv+0x68>)
 80110ca:	f00b fb38 	bl	801c73e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80110ce:	bf00      	nop
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	42020400 	.word	0x42020400
 80110dc:	42020000 	.word	0x42020000

080110e0 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80110e4:	4b13      	ldr	r3, [pc, #76]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 80110e6:	4a14      	ldr	r2, [pc, #80]	; (8011138 <_ZL15MX_USB_PCD_Initv+0x58>)
 80110e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80110ea:	4b12      	ldr	r3, [pc, #72]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 80110ec:	2208      	movs	r2, #8
 80110ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80110f0:	4b10      	ldr	r3, [pc, #64]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 80110f2:	2202      	movs	r2, #2
 80110f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80110f6:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 80110f8:	2202      	movs	r2, #2
 80110fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80110fc:	4b0d      	ldr	r3, [pc, #52]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 80110fe:	2200      	movs	r2, #0
 8011100:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011102:	4b0c      	ldr	r3, [pc, #48]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 8011104:	2200      	movs	r2, #0
 8011106:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011108:	4b0a      	ldr	r3, [pc, #40]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 801110a:	2200      	movs	r2, #0
 801110c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801110e:	4b09      	ldr	r3, [pc, #36]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 8011110:	2200      	movs	r2, #0
 8011112:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011114:	4807      	ldr	r0, [pc, #28]	; (8011134 <_ZL15MX_USB_PCD_Initv+0x54>)
 8011116:	f004 f999 	bl	801544c <HAL_PCD_Init>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	bf14      	ite	ne
 8011120:	2301      	movne	r3, #1
 8011122:	2300      	moveq	r3, #0
 8011124:	b2db      	uxtb	r3, r3
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 801112a:	f000 f982 	bl	8011432 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 801112e:	bf00      	nop
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	20000894 	.word	0x20000894
 8011138:	4000d400 	.word	0x4000d400

0801113c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8011142:	4b12      	ldr	r3, [pc, #72]	; (801118c <_ZL11MX_DMA_Initv+0x50>)
 8011144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011146:	4a11      	ldr	r2, [pc, #68]	; (801118c <_ZL11MX_DMA_Initv+0x50>)
 8011148:	f043 0304 	orr.w	r3, r3, #4
 801114c:	6493      	str	r3, [r2, #72]	; 0x48
 801114e:	4b0f      	ldr	r3, [pc, #60]	; (801118c <_ZL11MX_DMA_Initv+0x50>)
 8011150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011152:	f003 0304 	and.w	r3, r3, #4
 8011156:	607b      	str	r3, [r7, #4]
 8011158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801115a:	4b0c      	ldr	r3, [pc, #48]	; (801118c <_ZL11MX_DMA_Initv+0x50>)
 801115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801115e:	4a0b      	ldr	r2, [pc, #44]	; (801118c <_ZL11MX_DMA_Initv+0x50>)
 8011160:	f043 0301 	orr.w	r3, r3, #1
 8011164:	6493      	str	r3, [r2, #72]	; 0x48
 8011166:	4b09      	ldr	r3, [pc, #36]	; (801118c <_ZL11MX_DMA_Initv+0x50>)
 8011168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801116a:	f003 0301 	and.w	r3, r3, #1
 801116e:	603b      	str	r3, [r7, #0]
 8011170:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8011172:	2200      	movs	r2, #0
 8011174:	2105      	movs	r1, #5
 8011176:	201d      	movs	r0, #29
 8011178:	f002 fe0c 	bl	8013d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801117c:	201d      	movs	r0, #29
 801117e:	f002 fe23 	bl	8013dc8 <HAL_NVIC_EnableIRQ>

}
 8011182:	bf00      	nop
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	40021000 	.word	0x40021000

08011190 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08c      	sub	sp, #48	; 0x30
 8011194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011196:	f107 031c 	add.w	r3, r7, #28
 801119a:	2200      	movs	r2, #0
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	605a      	str	r2, [r3, #4]
 80111a0:	609a      	str	r2, [r3, #8]
 80111a2:	60da      	str	r2, [r3, #12]
 80111a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80111a6:	4b8b      	ldr	r3, [pc, #556]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111aa:	4a8a      	ldr	r2, [pc, #552]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111ac:	f043 0310 	orr.w	r3, r3, #16
 80111b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111b2:	4b88      	ldr	r3, [pc, #544]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111b6:	f003 0310 	and.w	r3, r3, #16
 80111ba:	61bb      	str	r3, [r7, #24]
 80111bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80111be:	4b85      	ldr	r3, [pc, #532]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111c2:	4a84      	ldr	r2, [pc, #528]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111c4:	f043 0304 	orr.w	r3, r3, #4
 80111c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111ca:	4b82      	ldr	r3, [pc, #520]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111ce:	f003 0304 	and.w	r3, r3, #4
 80111d2:	617b      	str	r3, [r7, #20]
 80111d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80111d6:	4b7f      	ldr	r3, [pc, #508]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111da:	4a7e      	ldr	r2, [pc, #504]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111dc:	f043 0320 	orr.w	r3, r3, #32
 80111e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111e2:	4b7c      	ldr	r3, [pc, #496]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111e6:	f003 0320 	and.w	r3, r3, #32
 80111ea:	613b      	str	r3, [r7, #16]
 80111ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80111ee:	4b79      	ldr	r3, [pc, #484]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111f2:	4a78      	ldr	r2, [pc, #480]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111f4:	f043 0301 	orr.w	r3, r3, #1
 80111f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111fa:	4b76      	ldr	r3, [pc, #472]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 80111fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111fe:	f003 0301 	and.w	r3, r3, #1
 8011202:	60fb      	str	r3, [r7, #12]
 8011204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011206:	4b73      	ldr	r3, [pc, #460]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 8011208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801120a:	4a72      	ldr	r2, [pc, #456]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 801120c:	f043 0302 	orr.w	r3, r3, #2
 8011210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011212:	4b70      	ldr	r3, [pc, #448]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 8011214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011216:	f003 0302 	and.w	r3, r3, #2
 801121a:	60bb      	str	r3, [r7, #8]
 801121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801121e:	4b6d      	ldr	r3, [pc, #436]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 8011220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011222:	4a6c      	ldr	r2, [pc, #432]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 8011224:	f043 0308 	orr.w	r3, r3, #8
 8011228:	64d3      	str	r3, [r2, #76]	; 0x4c
 801122a:	4b6a      	ldr	r3, [pc, #424]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 801122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801122e:	f003 0308 	and.w	r3, r3, #8
 8011232:	607b      	str	r3, [r7, #4]
 8011234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011236:	4b67      	ldr	r3, [pc, #412]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 8011238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801123a:	4a66      	ldr	r2, [pc, #408]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 801123c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011242:	4b64      	ldr	r3, [pc, #400]	; (80113d4 <_ZL12MX_GPIO_Initv+0x244>)
 8011244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801124a:	603b      	str	r3, [r7, #0]
 801124c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 801124e:	f004 fa7b 	bl	8015748 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 8011252:	2200      	movs	r2, #0
 8011254:	f24e 0108 	movw	r1, #57352	; 0xe008
 8011258:	485f      	ldr	r0, [pc, #380]	; (80113d8 <_ZL12MX_GPIO_Initv+0x248>)
 801125a:	f003 faf1 	bl	8014840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 801125e:	2200      	movs	r2, #0
 8011260:	21a4      	movs	r1, #164	; 0xa4
 8011262:	485e      	ldr	r0, [pc, #376]	; (80113dc <_ZL12MX_GPIO_Initv+0x24c>)
 8011264:	f003 faec 	bl	8014840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8011268:	2200      	movs	r2, #0
 801126a:	f64f 7187 	movw	r1, #65415	; 0xff87
 801126e:	485c      	ldr	r0, [pc, #368]	; (80113e0 <_ZL12MX_GPIO_Initv+0x250>)
 8011270:	f003 fae6 	bl	8014840 <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8011274:	2200      	movs	r2, #0
 8011276:	2180      	movs	r1, #128	; 0x80
 8011278:	485a      	ldr	r0, [pc, #360]	; (80113e4 <_ZL12MX_GPIO_Initv+0x254>)
 801127a:	f003 fae1 	bl	8014840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 801127e:	2200      	movs	r2, #0
 8011280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011284:	4858      	ldr	r0, [pc, #352]	; (80113e8 <_ZL12MX_GPIO_Initv+0x258>)
 8011286:	f003 fadb 	bl	8014840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 801128a:	2200      	movs	r2, #0
 801128c:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8011290:	4856      	ldr	r0, [pc, #344]	; (80113ec <_ZL12MX_GPIO_Initv+0x25c>)
 8011292:	f003 fad5 	bl	8014840 <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 8011296:	2308      	movs	r3, #8
 8011298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801129a:	2301      	movs	r3, #1
 801129c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801129e:	2302      	movs	r3, #2
 80112a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80112a2:	2303      	movs	r3, #3
 80112a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80112a6:	f107 031c 	add.w	r3, r7, #28
 80112aa:	4619      	mov	r1, r3
 80112ac:	484a      	ldr	r0, [pc, #296]	; (80113d8 <_ZL12MX_GPIO_Initv+0x248>)
 80112ae:	f003 f947 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 80112b2:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80112b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80112b8:	2300      	movs	r3, #0
 80112ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112bc:	2300      	movs	r3, #0
 80112be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80112c0:	f107 031c 	add.w	r3, r7, #28
 80112c4:	4619      	mov	r1, r3
 80112c6:	4844      	ldr	r0, [pc, #272]	; (80113d8 <_ZL12MX_GPIO_Initv+0x248>)
 80112c8:	f003 f93a 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 80112cc:	23a4      	movs	r3, #164	; 0xa4
 80112ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112d0:	2301      	movs	r3, #1
 80112d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112d4:	2300      	movs	r3, #0
 80112d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112d8:	2300      	movs	r3, #0
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80112dc:	f107 031c 	add.w	r3, r7, #28
 80112e0:	4619      	mov	r1, r3
 80112e2:	483e      	ldr	r0, [pc, #248]	; (80113dc <_ZL12MX_GPIO_Initv+0x24c>)
 80112e4:	f003 f92c 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 80112e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80112ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112ee:	2301      	movs	r3, #1
 80112f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112f2:	2300      	movs	r3, #0
 80112f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80112f6:	2300      	movs	r3, #0
 80112f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80112fa:	f107 031c 	add.w	r3, r7, #28
 80112fe:	4619      	mov	r1, r3
 8011300:	4835      	ldr	r0, [pc, #212]	; (80113d8 <_ZL12MX_GPIO_Initv+0x248>)
 8011302:	f003 f91d 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8011306:	f643 6301 	movw	r3, #15873	; 0x3e01
 801130a:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801130c:	2300      	movs	r3, #0
 801130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011310:	2300      	movs	r3, #0
 8011312:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011314:	f107 031c 	add.w	r3, r7, #28
 8011318:	4619      	mov	r1, r3
 801131a:	4835      	ldr	r0, [pc, #212]	; (80113f0 <_ZL12MX_GPIO_Initv+0x260>)
 801131c:	f003 f910 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8011320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011326:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801132c:	2300      	movs	r3, #0
 801132e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8011330:	f107 031c 	add.w	r3, r7, #28
 8011334:	4619      	mov	r1, r3
 8011336:	4829      	ldr	r0, [pc, #164]	; (80113dc <_ZL12MX_GPIO_Initv+0x24c>)
 8011338:	f003 f902 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 801133c:	f64f 7387 	movw	r3, #65415	; 0xff87
 8011340:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011342:	2301      	movs	r3, #1
 8011344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011346:	2300      	movs	r3, #0
 8011348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801134a:	2300      	movs	r3, #0
 801134c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801134e:	f107 031c 	add.w	r3, r7, #28
 8011352:	4619      	mov	r1, r3
 8011354:	4822      	ldr	r0, [pc, #136]	; (80113e0 <_ZL12MX_GPIO_Initv+0x250>)
 8011356:	f003 f8f3 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 801135a:	2370      	movs	r3, #112	; 0x70
 801135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801135e:	2300      	movs	r3, #0
 8011360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011362:	2300      	movs	r3, #0
 8011364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011366:	f107 031c 	add.w	r3, r7, #28
 801136a:	4619      	mov	r1, r3
 801136c:	481f      	ldr	r0, [pc, #124]	; (80113ec <_ZL12MX_GPIO_Initv+0x25c>)
 801136e:	f003 f8e7 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8011372:	2380      	movs	r3, #128	; 0x80
 8011374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011376:	2301      	movs	r3, #1
 8011378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801137a:	2300      	movs	r3, #0
 801137c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801137e:	2300      	movs	r3, #0
 8011380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8011382:	f107 031c 	add.w	r3, r7, #28
 8011386:	4619      	mov	r1, r3
 8011388:	4816      	ldr	r0, [pc, #88]	; (80113e4 <_ZL12MX_GPIO_Initv+0x254>)
 801138a:	f003 f8d9 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 801138e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011394:	2301      	movs	r3, #1
 8011396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011398:	2300      	movs	r3, #0
 801139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801139c:	2300      	movs	r3, #0
 801139e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80113a0:	f107 031c 	add.w	r3, r7, #28
 80113a4:	4619      	mov	r1, r3
 80113a6:	4810      	ldr	r0, [pc, #64]	; (80113e8 <_ZL12MX_GPIO_Initv+0x258>)
 80113a8:	f003 f8ca 	bl	8014540 <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 80113ac:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 80113b0:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80113b2:	2301      	movs	r3, #1
 80113b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113b6:	2300      	movs	r3, #0
 80113b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113ba:	2300      	movs	r3, #0
 80113bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80113be:	f107 031c 	add.w	r3, r7, #28
 80113c2:	4619      	mov	r1, r3
 80113c4:	4809      	ldr	r0, [pc, #36]	; (80113ec <_ZL12MX_GPIO_Initv+0x25c>)
 80113c6:	f003 f8bb 	bl	8014540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80113ca:	bf00      	nop
 80113cc:	3730      	adds	r7, #48	; 0x30
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	40021000 	.word	0x40021000
 80113d8:	42021400 	.word	0x42021400
 80113dc:	42020400 	.word	0x42020400
 80113e0:	42020c00 	.word	0x42020c00
 80113e4:	42020800 	.word	0x42020800
 80113e8:	42020000 	.word	0x42020000
 80113ec:	42021800 	.word	0x42021800
 80113f0:	42021000 	.word	0x42021000

080113f4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80113fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011400:	4803      	ldr	r0, [pc, #12]	; (8011410 <_Z16StartDefaultTaskPv+0x1c>)
 8011402:	f003 fa35 	bl	8014870 <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 8011406:	2064      	movs	r0, #100	; 0x64
 8011408:	f00c fa50 	bl	801d8ac <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 801140c:	e7f6      	b.n	80113fc <_Z16StartDefaultTaskPv+0x8>
 801140e:	bf00      	nop
 8011410:	42020000 	.word	0x42020000

08011414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011424:	d101      	bne.n	801142a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8011426:	f000 ff9b 	bl	8012360 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 801142a:	bf00      	nop
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}

08011432 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011432:	b480      	push	{r7}
 8011434:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011436:	b672      	cpsid	i
}
 8011438:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801143a:	e7fe      	b.n	801143a <Error_Handler+0x8>

0801143c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011442:	4b11      	ldr	r3, [pc, #68]	; (8011488 <HAL_MspInit+0x4c>)
 8011444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011446:	4a10      	ldr	r2, [pc, #64]	; (8011488 <HAL_MspInit+0x4c>)
 8011448:	f043 0301 	orr.w	r3, r3, #1
 801144c:	6613      	str	r3, [r2, #96]	; 0x60
 801144e:	4b0e      	ldr	r3, [pc, #56]	; (8011488 <HAL_MspInit+0x4c>)
 8011450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011452:	f003 0301 	and.w	r3, r3, #1
 8011456:	607b      	str	r3, [r7, #4]
 8011458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801145a:	4b0b      	ldr	r3, [pc, #44]	; (8011488 <HAL_MspInit+0x4c>)
 801145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801145e:	4a0a      	ldr	r2, [pc, #40]	; (8011488 <HAL_MspInit+0x4c>)
 8011460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011464:	6593      	str	r3, [r2, #88]	; 0x58
 8011466:	4b08      	ldr	r3, [pc, #32]	; (8011488 <HAL_MspInit+0x4c>)
 8011468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801146e:	603b      	str	r3, [r7, #0]
 8011470:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8011472:	2200      	movs	r2, #0
 8011474:	2107      	movs	r1, #7
 8011476:	f06f 0001 	mvn.w	r0, #1
 801147a:	f002 fc8b 	bl	8013d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801147e:	bf00      	nop
 8011480:	3708      	adds	r7, #8
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	40021000 	.word	0x40021000

0801148c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b08c      	sub	sp, #48	; 0x30
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011494:	f107 031c 	add.w	r3, r7, #28
 8011498:	2200      	movs	r2, #0
 801149a:	601a      	str	r2, [r3, #0]
 801149c:	605a      	str	r2, [r3, #4]
 801149e:	609a      	str	r2, [r3, #8]
 80114a0:	60da      	str	r2, [r3, #12]
 80114a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	4a4b      	ldr	r2, [pc, #300]	; (80115d8 <HAL_ADC_MspInit+0x14c>)
 80114aa:	4293      	cmp	r3, r2
 80114ac:	f040 8090 	bne.w	80115d0 <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80114b0:	4b4a      	ldr	r3, [pc, #296]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114b4:	4a49      	ldr	r2, [pc, #292]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80114ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80114bc:	4b47      	ldr	r3, [pc, #284]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80114c4:	61bb      	str	r3, [r7, #24]
 80114c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80114c8:	4b44      	ldr	r3, [pc, #272]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114cc:	4a43      	ldr	r2, [pc, #268]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114ce:	f043 0304 	orr.w	r3, r3, #4
 80114d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80114d4:	4b41      	ldr	r3, [pc, #260]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	617b      	str	r3, [r7, #20]
 80114de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80114e0:	4b3e      	ldr	r3, [pc, #248]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114e4:	4a3d      	ldr	r2, [pc, #244]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114e6:	f043 0301 	orr.w	r3, r3, #1
 80114ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80114ec:	4b3b      	ldr	r3, [pc, #236]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114f0:	f003 0301 	and.w	r3, r3, #1
 80114f4:	613b      	str	r3, [r7, #16]
 80114f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80114f8:	4b38      	ldr	r3, [pc, #224]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114fc:	4a37      	ldr	r2, [pc, #220]	; (80115dc <HAL_ADC_MspInit+0x150>)
 80114fe:	f043 0302 	orr.w	r3, r3, #2
 8011502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011504:	4b35      	ldr	r3, [pc, #212]	; (80115dc <HAL_ADC_MspInit+0x150>)
 8011506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011508:	f003 0302 	and.w	r3, r3, #2
 801150c:	60fb      	str	r3, [r7, #12]
 801150e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 8011510:	230f      	movs	r3, #15
 8011512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011514:	2303      	movs	r3, #3
 8011516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011518:	2300      	movs	r3, #0
 801151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801151c:	f107 031c 	add.w	r3, r7, #28
 8011520:	4619      	mov	r1, r3
 8011522:	482f      	ldr	r0, [pc, #188]	; (80115e0 <HAL_ADC_MspInit+0x154>)
 8011524:	f003 f80c 	bl	8014540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8011528:	239c      	movs	r3, #156	; 0x9c
 801152a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801152c:	2303      	movs	r3, #3
 801152e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011530:	2300      	movs	r3, #0
 8011532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011534:	f107 031c 	add.w	r3, r7, #28
 8011538:	4619      	mov	r1, r3
 801153a:	482a      	ldr	r0, [pc, #168]	; (80115e4 <HAL_ADC_MspInit+0x158>)
 801153c:	f003 f800 	bl	8014540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 8011540:	2303      	movs	r3, #3
 8011542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011544:	2303      	movs	r3, #3
 8011546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011548:	2300      	movs	r3, #0
 801154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801154c:	f107 031c 	add.w	r3, r7, #28
 8011550:	4619      	mov	r1, r3
 8011552:	4825      	ldr	r0, [pc, #148]	; (80115e8 <HAL_ADC_MspInit+0x15c>)
 8011554:	f002 fff4 	bl	8014540 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8011558:	4b24      	ldr	r3, [pc, #144]	; (80115ec <HAL_ADC_MspInit+0x160>)
 801155a:	4a25      	ldr	r2, [pc, #148]	; (80115f0 <HAL_ADC_MspInit+0x164>)
 801155c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801155e:	4b23      	ldr	r3, [pc, #140]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011560:	2205      	movs	r2, #5
 8011562:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011564:	4b21      	ldr	r3, [pc, #132]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011566:	2200      	movs	r2, #0
 8011568:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 801156a:	4b20      	ldr	r3, [pc, #128]	; (80115ec <HAL_ADC_MspInit+0x160>)
 801156c:	2200      	movs	r2, #0
 801156e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8011570:	4b1e      	ldr	r3, [pc, #120]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011572:	2280      	movs	r2, #128	; 0x80
 8011574:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8011576:	4b1d      	ldr	r3, [pc, #116]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011578:	f44f 7200 	mov.w	r2, #512	; 0x200
 801157c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801157e:	4b1b      	ldr	r3, [pc, #108]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011584:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8011586:	4b19      	ldr	r3, [pc, #100]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011588:	2200      	movs	r2, #0
 801158a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801158c:	4b17      	ldr	r3, [pc, #92]	; (80115ec <HAL_ADC_MspInit+0x160>)
 801158e:	2200      	movs	r2, #0
 8011590:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8011592:	4816      	ldr	r0, [pc, #88]	; (80115ec <HAL_ADC_MspInit+0x160>)
 8011594:	f002 fc26 	bl	8013de4 <HAL_DMA_Init>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d001      	beq.n	80115a2 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 801159e:	f7ff ff48 	bl	8011432 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80115a2:	2110      	movs	r1, #16
 80115a4:	4811      	ldr	r0, [pc, #68]	; (80115ec <HAL_ADC_MspInit+0x160>)
 80115a6:	f002 fefb 	bl	80143a0 <HAL_DMA_ConfigChannelAttributes>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d001      	beq.n	80115b4 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 80115b0:	f7ff ff3f 	bl	8011432 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4a0d      	ldr	r2, [pc, #52]	; (80115ec <HAL_ADC_MspInit+0x160>)
 80115b8:	651a      	str	r2, [r3, #80]	; 0x50
 80115ba:	4a0c      	ldr	r2, [pc, #48]	; (80115ec <HAL_ADC_MspInit+0x160>)
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80115c0:	2200      	movs	r2, #0
 80115c2:	2105      	movs	r1, #5
 80115c4:	2025      	movs	r0, #37	; 0x25
 80115c6:	f002 fbe5 	bl	8013d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80115ca:	2025      	movs	r0, #37	; 0x25
 80115cc:	f002 fbfc 	bl	8013dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80115d0:	bf00      	nop
 80115d2:	3730      	adds	r7, #48	; 0x30
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	42028000 	.word	0x42028000
 80115dc:	40021000 	.word	0x40021000
 80115e0:	42020800 	.word	0x42020800
 80115e4:	42020000 	.word	0x42020000
 80115e8:	42020400 	.word	0x42020400
 80115ec:	2000034c 	.word	0x2000034c
 80115f0:	40020008 	.word	0x40020008

080115f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b0ae      	sub	sp, #184	; 0xb8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011600:	2200      	movs	r2, #0
 8011602:	601a      	str	r2, [r3, #0]
 8011604:	605a      	str	r2, [r3, #4]
 8011606:	609a      	str	r2, [r3, #8]
 8011608:	60da      	str	r2, [r3, #12]
 801160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801160c:	f107 0310 	add.w	r3, r7, #16
 8011610:	2294      	movs	r2, #148	; 0x94
 8011612:	2100      	movs	r1, #0
 8011614:	4618      	mov	r0, r3
 8011616:	f010 f9e6 	bl	80219e6 <memset>
  if(hi2c->Instance==I2C1)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4a21      	ldr	r2, [pc, #132]	; (80116a4 <HAL_I2C_MspInit+0xb0>)
 8011620:	4293      	cmp	r3, r2
 8011622:	d13b      	bne.n	801169c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8011624:	2340      	movs	r3, #64	; 0x40
 8011626:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8011628:	2300      	movs	r3, #0
 801162a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801162c:	f107 0310 	add.w	r3, r7, #16
 8011630:	4618      	mov	r0, r3
 8011632:	f005 f8a9 	bl	8016788 <HAL_RCCEx_PeriphCLKConfig>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d001      	beq.n	8011640 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 801163c:	f7ff fef9 	bl	8011432 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011640:	4b19      	ldr	r3, [pc, #100]	; (80116a8 <HAL_I2C_MspInit+0xb4>)
 8011642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011644:	4a18      	ldr	r2, [pc, #96]	; (80116a8 <HAL_I2C_MspInit+0xb4>)
 8011646:	f043 0302 	orr.w	r3, r3, #2
 801164a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801164c:	4b16      	ldr	r3, [pc, #88]	; (80116a8 <HAL_I2C_MspInit+0xb4>)
 801164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011650:	f003 0302 	and.w	r3, r3, #2
 8011654:	60fb      	str	r3, [r7, #12]
 8011656:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8011658:	f44f 7340 	mov.w	r3, #768	; 0x300
 801165c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011660:	2312      	movs	r3, #18
 8011662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011666:	2300      	movs	r3, #0
 8011668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801166c:	2300      	movs	r3, #0
 801166e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011672:	2304      	movs	r3, #4
 8011674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801167c:	4619      	mov	r1, r3
 801167e:	480b      	ldr	r0, [pc, #44]	; (80116ac <HAL_I2C_MspInit+0xb8>)
 8011680:	f002 ff5e 	bl	8014540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011684:	4b08      	ldr	r3, [pc, #32]	; (80116a8 <HAL_I2C_MspInit+0xb4>)
 8011686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011688:	4a07      	ldr	r2, [pc, #28]	; (80116a8 <HAL_I2C_MspInit+0xb4>)
 801168a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801168e:	6593      	str	r3, [r2, #88]	; 0x58
 8011690:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <HAL_I2C_MspInit+0xb4>)
 8011692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011698:	60bb      	str	r3, [r7, #8]
 801169a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801169c:	bf00      	nop
 801169e:	37b8      	adds	r7, #184	; 0xb8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	40005400 	.word	0x40005400
 80116a8:	40021000 	.word	0x40021000
 80116ac:	42020400 	.word	0x42020400

080116b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b0b2      	sub	sp, #200	; 0xc8
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80116bc:	2200      	movs	r2, #0
 80116be:	601a      	str	r2, [r3, #0]
 80116c0:	605a      	str	r2, [r3, #4]
 80116c2:	609a      	str	r2, [r3, #8]
 80116c4:	60da      	str	r2, [r3, #12]
 80116c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80116c8:	f107 0320 	add.w	r3, r7, #32
 80116cc:	2294      	movs	r2, #148	; 0x94
 80116ce:	2100      	movs	r1, #0
 80116d0:	4618      	mov	r0, r3
 80116d2:	f010 f988 	bl	80219e6 <memset>
  if(huart->Instance==LPUART1)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	4a67      	ldr	r2, [pc, #412]	; (8011878 <HAL_UART_MspInit+0x1c8>)
 80116dc:	4293      	cmp	r3, r2
 80116de:	d13e      	bne.n	801175e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80116e0:	2320      	movs	r3, #32
 80116e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80116e4:	2300      	movs	r3, #0
 80116e6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80116e8:	f107 0320 	add.w	r3, r7, #32
 80116ec:	4618      	mov	r0, r3
 80116ee:	f005 f84b 	bl	8016788 <HAL_RCCEx_PeriphCLKConfig>
 80116f2:	4603      	mov	r3, r0
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d001      	beq.n	80116fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80116f8:	f7ff fe9b 	bl	8011432 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80116fc:	4b5f      	ldr	r3, [pc, #380]	; (801187c <HAL_UART_MspInit+0x1cc>)
 80116fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011700:	4a5e      	ldr	r2, [pc, #376]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011702:	f043 0301 	orr.w	r3, r3, #1
 8011706:	65d3      	str	r3, [r2, #92]	; 0x5c
 8011708:	4b5c      	ldr	r3, [pc, #368]	; (801187c <HAL_UART_MspInit+0x1cc>)
 801170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801170c:	f003 0301 	and.w	r3, r3, #1
 8011710:	61fb      	str	r3, [r7, #28]
 8011712:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011714:	4b59      	ldr	r3, [pc, #356]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011718:	4a58      	ldr	r2, [pc, #352]	; (801187c <HAL_UART_MspInit+0x1cc>)
 801171a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011720:	4b56      	ldr	r3, [pc, #344]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011728:	61bb      	str	r3, [r7, #24]
 801172a:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 801172c:	f004 f80c 	bl	8015748 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8011730:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8011734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011738:	2302      	movs	r3, #2
 801173a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801173e:	2300      	movs	r3, #0
 8011740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011744:	2300      	movs	r3, #0
 8011746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801174a:	2308      	movs	r3, #8
 801174c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011754:	4619      	mov	r1, r3
 8011756:	484a      	ldr	r0, [pc, #296]	; (8011880 <HAL_UART_MspInit+0x1d0>)
 8011758:	f002 fef2 	bl	8014540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 801175c:	e088      	b.n	8011870 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a48      	ldr	r2, [pc, #288]	; (8011884 <HAL_UART_MspInit+0x1d4>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d143      	bne.n	80117f0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8011768:	2308      	movs	r3, #8
 801176a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801176c:	2300      	movs	r3, #0
 801176e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011770:	f107 0320 	add.w	r3, r7, #32
 8011774:	4618      	mov	r0, r3
 8011776:	f005 f807 	bl	8016788 <HAL_RCCEx_PeriphCLKConfig>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8011780:	f7ff fe57 	bl	8011432 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8011784:	4b3d      	ldr	r3, [pc, #244]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011788:	4a3c      	ldr	r2, [pc, #240]	; (801187c <HAL_UART_MspInit+0x1cc>)
 801178a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801178e:	6593      	str	r3, [r2, #88]	; 0x58
 8011790:	4b3a      	ldr	r3, [pc, #232]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011798:	617b      	str	r3, [r7, #20]
 801179a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801179c:	4b37      	ldr	r3, [pc, #220]	; (801187c <HAL_UART_MspInit+0x1cc>)
 801179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117a0:	4a36      	ldr	r2, [pc, #216]	; (801187c <HAL_UART_MspInit+0x1cc>)
 80117a2:	f043 0301 	orr.w	r3, r3, #1
 80117a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80117a8:	4b34      	ldr	r3, [pc, #208]	; (801187c <HAL_UART_MspInit+0x1cc>)
 80117aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117ac:	f003 0301 	and.w	r3, r3, #1
 80117b0:	613b      	str	r3, [r7, #16]
 80117b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80117b4:	2303      	movs	r3, #3
 80117b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117ba:	2302      	movs	r3, #2
 80117bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117c0:	2300      	movs	r3, #0
 80117c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117c6:	2300      	movs	r3, #0
 80117c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80117cc:	2308      	movs	r3, #8
 80117ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80117d6:	4619      	mov	r1, r3
 80117d8:	482b      	ldr	r0, [pc, #172]	; (8011888 <HAL_UART_MspInit+0x1d8>)
 80117da:	f002 feb1 	bl	8014540 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80117de:	2200      	movs	r2, #0
 80117e0:	2105      	movs	r1, #5
 80117e2:	2040      	movs	r0, #64	; 0x40
 80117e4:	f002 fad6 	bl	8013d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80117e8:	2040      	movs	r0, #64	; 0x40
 80117ea:	f002 faed 	bl	8013dc8 <HAL_NVIC_EnableIRQ>
}
 80117ee:	e03f      	b.n	8011870 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4a25      	ldr	r2, [pc, #148]	; (801188c <HAL_UART_MspInit+0x1dc>)
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d13a      	bne.n	8011870 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80117fa:	2302      	movs	r3, #2
 80117fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80117fe:	2300      	movs	r3, #0
 8011800:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011802:	f107 0320 	add.w	r3, r7, #32
 8011806:	4618      	mov	r0, r3
 8011808:	f004 ffbe 	bl	8016788 <HAL_RCCEx_PeriphCLKConfig>
 801180c:	4603      	mov	r3, r0
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8011812:	f7ff fe0e 	bl	8011432 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011816:	4b19      	ldr	r3, [pc, #100]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801181a:	4a18      	ldr	r2, [pc, #96]	; (801187c <HAL_UART_MspInit+0x1cc>)
 801181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011820:	6593      	str	r3, [r2, #88]	; 0x58
 8011822:	4b16      	ldr	r3, [pc, #88]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801182e:	4b13      	ldr	r3, [pc, #76]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011832:	4a12      	ldr	r2, [pc, #72]	; (801187c <HAL_UART_MspInit+0x1cc>)
 8011834:	f043 0308 	orr.w	r3, r3, #8
 8011838:	64d3      	str	r3, [r2, #76]	; 0x4c
 801183a:	4b10      	ldr	r3, [pc, #64]	; (801187c <HAL_UART_MspInit+0x1cc>)
 801183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801183e:	f003 0308 	and.w	r3, r3, #8
 8011842:	60bb      	str	r3, [r7, #8]
 8011844:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8011846:	2360      	movs	r3, #96	; 0x60
 8011848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801184c:	2302      	movs	r3, #2
 801184e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011852:	2300      	movs	r3, #0
 8011854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011858:	2300      	movs	r3, #0
 801185a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801185e:	2307      	movs	r3, #7
 8011860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011864:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011868:	4619      	mov	r1, r3
 801186a:	4809      	ldr	r0, [pc, #36]	; (8011890 <HAL_UART_MspInit+0x1e0>)
 801186c:	f002 fe68 	bl	8014540 <HAL_GPIO_Init>
}
 8011870:	bf00      	nop
 8011872:	37c8      	adds	r7, #200	; 0xc8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	40008000 	.word	0x40008000
 801187c:	40021000 	.word	0x40021000
 8011880:	42021800 	.word	0x42021800
 8011884:	40004c00 	.word	0x40004c00
 8011888:	42020000 	.word	0x42020000
 801188c:	40004400 	.word	0x40004400
 8011890:	42020c00 	.word	0x42020c00

08011894 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b0a8      	sub	sp, #160	; 0xa0
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801189c:	f107 030c 	add.w	r3, r7, #12
 80118a0:	2294      	movs	r2, #148	; 0x94
 80118a2:	2100      	movs	r1, #0
 80118a4:	4618      	mov	r0, r3
 80118a6:	f010 f89e 	bl	80219e6 <memset>
  if(hrtc->Instance==RTC)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4a16      	ldr	r2, [pc, #88]	; (8011908 <HAL_RTC_MspInit+0x74>)
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d124      	bne.n	80118fe <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80118b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80118b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80118ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80118c2:	f107 030c 	add.w	r3, r7, #12
 80118c6:	4618      	mov	r0, r3
 80118c8:	f004 ff5e 	bl	8016788 <HAL_RCCEx_PeriphCLKConfig>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d001      	beq.n	80118d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80118d2:	f7ff fdae 	bl	8011432 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80118d6:	4b0d      	ldr	r3, [pc, #52]	; (801190c <HAL_RTC_MspInit+0x78>)
 80118d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80118dc:	4a0b      	ldr	r2, [pc, #44]	; (801190c <HAL_RTC_MspInit+0x78>)
 80118de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80118e6:	4b09      	ldr	r3, [pc, #36]	; (801190c <HAL_RTC_MspInit+0x78>)
 80118e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118ea:	4a08      	ldr	r2, [pc, #32]	; (801190c <HAL_RTC_MspInit+0x78>)
 80118ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80118f0:	6593      	str	r3, [r2, #88]	; 0x58
 80118f2:	4b06      	ldr	r3, [pc, #24]	; (801190c <HAL_RTC_MspInit+0x78>)
 80118f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118fa:	60bb      	str	r3, [r7, #8]
 80118fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80118fe:	bf00      	nop
 8011900:	37a0      	adds	r7, #160	; 0xa0
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
 8011906:	bf00      	nop
 8011908:	40002800 	.word	0x40002800
 801190c:	40021000 	.word	0x40021000

08011910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b090      	sub	sp, #64	; 0x40
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801191c:	2200      	movs	r2, #0
 801191e:	601a      	str	r2, [r3, #0]
 8011920:	605a      	str	r2, [r3, #4]
 8011922:	609a      	str	r2, [r3, #8]
 8011924:	60da      	str	r2, [r3, #12]
 8011926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	4a62      	ldr	r2, [pc, #392]	; (8011ab8 <HAL_SPI_MspInit+0x1a8>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d145      	bne.n	80119be <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011932:	4b62      	ldr	r3, [pc, #392]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011936:	4a61      	ldr	r2, [pc, #388]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801193c:	6613      	str	r3, [r2, #96]	; 0x60
 801193e:	4b5f      	ldr	r3, [pc, #380]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011946:	62bb      	str	r3, [r7, #40]	; 0x28
 8011948:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801194a:	4b5c      	ldr	r3, [pc, #368]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 801194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801194e:	4a5b      	ldr	r2, [pc, #364]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011950:	f043 0301 	orr.w	r3, r3, #1
 8011954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011956:	4b59      	ldr	r3, [pc, #356]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801195a:	f003 0301 	and.w	r3, r3, #1
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8011962:	4b56      	ldr	r3, [pc, #344]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011966:	4a55      	ldr	r2, [pc, #340]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011968:	f043 0310 	orr.w	r3, r3, #16
 801196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801196e:	4b53      	ldr	r3, [pc, #332]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011972:	f003 0310 	and.w	r3, r3, #16
 8011976:	623b      	str	r3, [r7, #32]
 8011978:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 801197a:	2360      	movs	r3, #96	; 0x60
 801197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801197e:	2302      	movs	r3, #2
 8011980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011982:	2300      	movs	r3, #0
 8011984:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011986:	2300      	movs	r3, #0
 8011988:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801198a:	2305      	movs	r3, #5
 801198c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011992:	4619      	mov	r1, r3
 8011994:	484a      	ldr	r0, [pc, #296]	; (8011ac0 <HAL_SPI_MspInit+0x1b0>)
 8011996:	f002 fdd3 	bl	8014540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 801199a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119a0:	2302      	movs	r3, #2
 80119a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119a4:	2300      	movs	r3, #0
 80119a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119a8:	2300      	movs	r3, #0
 80119aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80119ac:	2305      	movs	r3, #5
 80119ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 80119b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80119b4:	4619      	mov	r1, r3
 80119b6:	4843      	ldr	r0, [pc, #268]	; (8011ac4 <HAL_SPI_MspInit+0x1b4>)
 80119b8:	f002 fdc2 	bl	8014540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80119bc:	e078      	b.n	8011ab0 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4a41      	ldr	r2, [pc, #260]	; (8011ac8 <HAL_SPI_MspInit+0x1b8>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d145      	bne.n	8011a54 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80119c8:	4b3c      	ldr	r3, [pc, #240]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119cc:	4a3b      	ldr	r2, [pc, #236]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80119d2:	6593      	str	r3, [r2, #88]	; 0x58
 80119d4:	4b39      	ldr	r3, [pc, #228]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119dc:	61fb      	str	r3, [r7, #28]
 80119de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80119e0:	4b36      	ldr	r3, [pc, #216]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119e4:	4a35      	ldr	r2, [pc, #212]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119e6:	f043 0302 	orr.w	r3, r3, #2
 80119ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80119ec:	4b33      	ldr	r3, [pc, #204]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119f0:	f003 0302 	and.w	r3, r3, #2
 80119f4:	61bb      	str	r3, [r7, #24]
 80119f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80119f8:	4b30      	ldr	r3, [pc, #192]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119fc:	4a2f      	ldr	r2, [pc, #188]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 80119fe:	f043 0308 	orr.w	r3, r3, #8
 8011a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011a04:	4b2d      	ldr	r3, [pc, #180]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a08:	f003 0308 	and.w	r3, r3, #8
 8011a0c:	617b      	str	r3, [r7, #20]
 8011a0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8011a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a16:	2302      	movs	r3, #2
 8011a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011a22:	2305      	movs	r3, #5
 8011a24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	4827      	ldr	r0, [pc, #156]	; (8011acc <HAL_SPI_MspInit+0x1bc>)
 8011a2e:	f002 fd87 	bl	8014540 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8011a32:	2318      	movs	r3, #24
 8011a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a36:	2302      	movs	r3, #2
 8011a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011a42:	2305      	movs	r3, #5
 8011a44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011a4a:	4619      	mov	r1, r3
 8011a4c:	4820      	ldr	r0, [pc, #128]	; (8011ad0 <HAL_SPI_MspInit+0x1c0>)
 8011a4e:	f002 fd77 	bl	8014540 <HAL_GPIO_Init>
}
 8011a52:	e02d      	b.n	8011ab0 <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4a1e      	ldr	r2, [pc, #120]	; (8011ad4 <HAL_SPI_MspInit+0x1c4>)
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d128      	bne.n	8011ab0 <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011a5e:	4b17      	ldr	r3, [pc, #92]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a62:	4a16      	ldr	r2, [pc, #88]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a68:	6593      	str	r3, [r2, #88]	; 0x58
 8011a6a:	4b14      	ldr	r3, [pc, #80]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a72:	613b      	str	r3, [r7, #16]
 8011a74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011a76:	4b11      	ldr	r3, [pc, #68]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a7a:	4a10      	ldr	r2, [pc, #64]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a7c:	f043 0304 	orr.w	r3, r3, #4
 8011a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011a82:	4b0e      	ldr	r3, [pc, #56]	; (8011abc <HAL_SPI_MspInit+0x1ac>)
 8011a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a86:	f003 0304 	and.w	r3, r3, #4
 8011a8a:	60fb      	str	r3, [r7, #12]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8011a8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a94:	2302      	movs	r3, #2
 8011a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011aa0:	2306      	movs	r3, #6
 8011aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	480b      	ldr	r0, [pc, #44]	; (8011ad8 <HAL_SPI_MspInit+0x1c8>)
 8011aac:	f002 fd48 	bl	8014540 <HAL_GPIO_Init>
}
 8011ab0:	bf00      	nop
 8011ab2:	3740      	adds	r7, #64	; 0x40
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	40013000 	.word	0x40013000
 8011abc:	40021000 	.word	0x40021000
 8011ac0:	42020000 	.word	0x42020000
 8011ac4:	42021000 	.word	0x42021000
 8011ac8:	40003800 	.word	0x40003800
 8011acc:	42020400 	.word	0x42020400
 8011ad0:	42020c00 	.word	0x42020c00
 8011ad4:	40003c00 	.word	0x40003c00
 8011ad8:	42020800 	.word	0x42020800

08011adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08c      	sub	sp, #48	; 0x30
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ae4:	f107 031c 	add.w	r3, r7, #28
 8011ae8:	2200      	movs	r2, #0
 8011aea:	601a      	str	r2, [r3, #0]
 8011aec:	605a      	str	r2, [r3, #4]
 8011aee:	609a      	str	r2, [r3, #8]
 8011af0:	60da      	str	r2, [r3, #12]
 8011af2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4a40      	ldr	r2, [pc, #256]	; (8011bfc <HAL_TIM_Base_MspInit+0x120>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d14e      	bne.n	8011b9c <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011afe:	4b40      	ldr	r3, [pc, #256]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b02:	4a3f      	ldr	r2, [pc, #252]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011b08:	6613      	str	r3, [r2, #96]	; 0x60
 8011b0a:	4b3d      	ldr	r3, [pc, #244]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b12:	61bb      	str	r3, [r7, #24]
 8011b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8011b16:	4b3a      	ldr	r3, [pc, #232]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b1a:	4a39      	ldr	r2, [pc, #228]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b1c:	f043 0310 	orr.w	r3, r3, #16
 8011b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b22:	4b37      	ldr	r3, [pc, #220]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b26:	f003 0310 	and.w	r3, r3, #16
 8011b2a:	617b      	str	r3, [r7, #20]
 8011b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b2e:	4b34      	ldr	r3, [pc, #208]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b32:	4a33      	ldr	r2, [pc, #204]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b34:	f043 0301 	orr.w	r3, r3, #1
 8011b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b3a:	4b31      	ldr	r3, [pc, #196]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b3e:	f003 0301 	and.w	r3, r3, #1
 8011b42:	613b      	str	r3, [r7, #16]
 8011b44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8011b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b4c:	2302      	movs	r3, #2
 8011b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b50:	2300      	movs	r3, #0
 8011b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b54:	2300      	movs	r3, #0
 8011b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8011b5c:	f107 031c 	add.w	r3, r7, #28
 8011b60:	4619      	mov	r1, r3
 8011b62:	4828      	ldr	r0, [pc, #160]	; (8011c04 <HAL_TIM_Base_MspInit+0x128>)
 8011b64:	f002 fcec 	bl	8014540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8011b68:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8011b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b6e:	2302      	movs	r3, #2
 8011b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b72:	2300      	movs	r3, #0
 8011b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011b76:	2300      	movs	r3, #0
 8011b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011b7e:	f107 031c 	add.w	r3, r7, #28
 8011b82:	4619      	mov	r1, r3
 8011b84:	4820      	ldr	r0, [pc, #128]	; (8011c08 <HAL_TIM_Base_MspInit+0x12c>)
 8011b86:	f002 fcdb 	bl	8014540 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	2105      	movs	r1, #5
 8011b8e:	202c      	movs	r0, #44	; 0x2c
 8011b90:	f002 f900 	bl	8013d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8011b94:	202c      	movs	r0, #44	; 0x2c
 8011b96:	f002 f917 	bl	8013dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8011b9a:	e02a      	b.n	8011bf2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a1a      	ldr	r2, [pc, #104]	; (8011c0c <HAL_TIM_Base_MspInit+0x130>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d10c      	bne.n	8011bc0 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8011ba6:	4b16      	ldr	r3, [pc, #88]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011baa:	4a15      	ldr	r2, [pc, #84]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011bac:	f043 0308 	orr.w	r3, r3, #8
 8011bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8011bb2:	4b13      	ldr	r3, [pc, #76]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bb6:	f003 0308 	and.w	r3, r3, #8
 8011bba:	60fb      	str	r3, [r7, #12]
 8011bbc:	68fb      	ldr	r3, [r7, #12]
}
 8011bbe:	e018      	b.n	8011bf2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	4a12      	ldr	r2, [pc, #72]	; (8011c10 <HAL_TIM_Base_MspInit+0x134>)
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d113      	bne.n	8011bf2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011bca:	4b0d      	ldr	r3, [pc, #52]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bce:	4a0c      	ldr	r2, [pc, #48]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011bd0:	f043 0310 	orr.w	r3, r3, #16
 8011bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8011bd6:	4b0a      	ldr	r3, [pc, #40]	; (8011c00 <HAL_TIM_Base_MspInit+0x124>)
 8011bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bda:	f003 0310 	and.w	r3, r3, #16
 8011bde:	60bb      	str	r3, [r7, #8]
 8011be0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8011be2:	2200      	movs	r2, #0
 8011be4:	2105      	movs	r1, #5
 8011be6:	2031      	movs	r0, #49	; 0x31
 8011be8:	f002 f8d4 	bl	8013d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8011bec:	2031      	movs	r0, #49	; 0x31
 8011bee:	f002 f8eb 	bl	8013dc8 <HAL_NVIC_EnableIRQ>
}
 8011bf2:	bf00      	nop
 8011bf4:	3730      	adds	r7, #48	; 0x30
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	40012c00 	.word	0x40012c00
 8011c00:	40021000 	.word	0x40021000
 8011c04:	42021000 	.word	0x42021000
 8011c08:	42020000 	.word	0x42020000
 8011c0c:	40000c00 	.word	0x40000c00
 8011c10:	40001000 	.word	0x40001000

08011c14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b08a      	sub	sp, #40	; 0x28
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	2200      	movs	r2, #0
 8011c22:	601a      	str	r2, [r3, #0]
 8011c24:	605a      	str	r2, [r3, #4]
 8011c26:	609a      	str	r2, [r3, #8]
 8011c28:	60da      	str	r2, [r3, #12]
 8011c2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a1b      	ldr	r2, [pc, #108]	; (8011ca0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d12f      	bne.n	8011c96 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011c36:	4b1b      	ldr	r3, [pc, #108]	; (8011ca4 <HAL_TIM_Encoder_MspInit+0x90>)
 8011c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c3a:	4a1a      	ldr	r2, [pc, #104]	; (8011ca4 <HAL_TIM_Encoder_MspInit+0x90>)
 8011c3c:	f043 0302 	orr.w	r3, r3, #2
 8011c40:	6593      	str	r3, [r2, #88]	; 0x58
 8011c42:	4b18      	ldr	r3, [pc, #96]	; (8011ca4 <HAL_TIM_Encoder_MspInit+0x90>)
 8011c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c46:	f003 0302 	and.w	r3, r3, #2
 8011c4a:	613b      	str	r3, [r7, #16]
 8011c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8011c4e:	4b15      	ldr	r3, [pc, #84]	; (8011ca4 <HAL_TIM_Encoder_MspInit+0x90>)
 8011c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c52:	4a14      	ldr	r2, [pc, #80]	; (8011ca4 <HAL_TIM_Encoder_MspInit+0x90>)
 8011c54:	f043 0310 	orr.w	r3, r3, #16
 8011c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011c5a:	4b12      	ldr	r3, [pc, #72]	; (8011ca4 <HAL_TIM_Encoder_MspInit+0x90>)
 8011c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c5e:	f003 0310 	and.w	r3, r3, #16
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8011c66:	2318      	movs	r3, #24
 8011c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c6a:	2302      	movs	r3, #2
 8011c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c72:	2300      	movs	r3, #0
 8011c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8011c76:	2302      	movs	r3, #2
 8011c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011c7a:	f107 0314 	add.w	r3, r7, #20
 8011c7e:	4619      	mov	r1, r3
 8011c80:	4809      	ldr	r0, [pc, #36]	; (8011ca8 <HAL_TIM_Encoder_MspInit+0x94>)
 8011c82:	f002 fc5d 	bl	8014540 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8011c86:	2200      	movs	r2, #0
 8011c88:	2105      	movs	r1, #5
 8011c8a:	202e      	movs	r0, #46	; 0x2e
 8011c8c:	f002 f882 	bl	8013d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8011c90:	202e      	movs	r0, #46	; 0x2e
 8011c92:	f002 f899 	bl	8013dc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8011c96:	bf00      	nop
 8011c98:	3728      	adds	r7, #40	; 0x28
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	40000400 	.word	0x40000400
 8011ca4:	40021000 	.word	0x40021000
 8011ca8:	42021000 	.word	0x42021000

08011cac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b085      	sub	sp, #20
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	4a0a      	ldr	r2, [pc, #40]	; (8011ce4 <HAL_TIM_PWM_MspInit+0x38>)
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d10b      	bne.n	8011cd6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8011cbe:	4b0a      	ldr	r3, [pc, #40]	; (8011ce8 <HAL_TIM_PWM_MspInit+0x3c>)
 8011cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cc2:	4a09      	ldr	r2, [pc, #36]	; (8011ce8 <HAL_TIM_PWM_MspInit+0x3c>)
 8011cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8011cca:	4b07      	ldr	r3, [pc, #28]	; (8011ce8 <HAL_TIM_PWM_MspInit+0x3c>)
 8011ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011cd2:	60fb      	str	r3, [r7, #12]
 8011cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8011cd6:	bf00      	nop
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	40013400 	.word	0x40013400
 8011ce8:	40021000 	.word	0x40021000

08011cec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08a      	sub	sp, #40	; 0x28
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cf4:	f107 0314 	add.w	r3, r7, #20
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	601a      	str	r2, [r3, #0]
 8011cfc:	605a      	str	r2, [r3, #4]
 8011cfe:	609a      	str	r2, [r3, #8]
 8011d00:	60da      	str	r2, [r3, #12]
 8011d02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4a22      	ldr	r2, [pc, #136]	; (8011d94 <HAL_TIM_MspPostInit+0xa8>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d11d      	bne.n	8011d4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8011d0e:	4b22      	ldr	r3, [pc, #136]	; (8011d98 <HAL_TIM_MspPostInit+0xac>)
 8011d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d12:	4a21      	ldr	r2, [pc, #132]	; (8011d98 <HAL_TIM_MspPostInit+0xac>)
 8011d14:	f043 0320 	orr.w	r3, r3, #32
 8011d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011d1a:	4b1f      	ldr	r3, [pc, #124]	; (8011d98 <HAL_TIM_MspPostInit+0xac>)
 8011d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d1e:	f003 0320 	and.w	r3, r3, #32
 8011d22:	613b      	str	r3, [r7, #16]
 8011d24:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8011d26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8011d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d2c:	2302      	movs	r3, #2
 8011d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d30:	2300      	movs	r3, #0
 8011d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d34:	2300      	movs	r3, #0
 8011d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8011d38:	2302      	movs	r3, #2
 8011d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011d3c:	f107 0314 	add.w	r3, r7, #20
 8011d40:	4619      	mov	r1, r3
 8011d42:	4816      	ldr	r0, [pc, #88]	; (8011d9c <HAL_TIM_MspPostInit+0xb0>)
 8011d44:	f002 fbfc 	bl	8014540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011d48:	e020      	b.n	8011d8c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	4a14      	ldr	r2, [pc, #80]	; (8011da0 <HAL_TIM_MspPostInit+0xb4>)
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d11b      	bne.n	8011d8c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011d54:	4b10      	ldr	r3, [pc, #64]	; (8011d98 <HAL_TIM_MspPostInit+0xac>)
 8011d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d58:	4a0f      	ldr	r2, [pc, #60]	; (8011d98 <HAL_TIM_MspPostInit+0xac>)
 8011d5a:	f043 0304 	orr.w	r3, r3, #4
 8011d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011d60:	4b0d      	ldr	r3, [pc, #52]	; (8011d98 <HAL_TIM_MspPostInit+0xac>)
 8011d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d64:	f003 0304 	and.w	r3, r3, #4
 8011d68:	60fb      	str	r3, [r7, #12]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8011d6c:	2340      	movs	r3, #64	; 0x40
 8011d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d70:	2302      	movs	r3, #2
 8011d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d74:	2300      	movs	r3, #0
 8011d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d80:	f107 0314 	add.w	r3, r7, #20
 8011d84:	4619      	mov	r1, r3
 8011d86:	4807      	ldr	r0, [pc, #28]	; (8011da4 <HAL_TIM_MspPostInit+0xb8>)
 8011d88:	f002 fbda 	bl	8014540 <HAL_GPIO_Init>
}
 8011d8c:	bf00      	nop
 8011d8e:	3728      	adds	r7, #40	; 0x28
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}
 8011d94:	40000c00 	.word	0x40000c00
 8011d98:	40021000 	.word	0x40021000
 8011d9c:	42021400 	.word	0x42021400
 8011da0:	40013400 	.word	0x40013400
 8011da4:	42020800 	.word	0x42020800

08011da8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b0ae      	sub	sp, #184	; 0xb8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011db0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011db4:	2200      	movs	r2, #0
 8011db6:	601a      	str	r2, [r3, #0]
 8011db8:	605a      	str	r2, [r3, #4]
 8011dba:	609a      	str	r2, [r3, #8]
 8011dbc:	60da      	str	r2, [r3, #12]
 8011dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011dc0:	f107 0310 	add.w	r3, r7, #16
 8011dc4:	2294      	movs	r2, #148	; 0x94
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f00f fe0c 	bl	80219e6 <memset>
  if(hpcd->Instance==USB)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a22      	ldr	r2, [pc, #136]	; (8011e5c <HAL_PCD_MspInit+0xb4>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d13d      	bne.n	8011e54 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ddc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011dde:	2300      	movs	r3, #0
 8011de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011de4:	f107 0310 	add.w	r3, r7, #16
 8011de8:	4618      	mov	r0, r3
 8011dea:	f004 fccd 	bl	8016788 <HAL_RCCEx_PeriphCLKConfig>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d001      	beq.n	8011df8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8011df4:	f7ff fb1d 	bl	8011432 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011df8:	4b19      	ldr	r3, [pc, #100]	; (8011e60 <HAL_PCD_MspInit+0xb8>)
 8011dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011dfc:	4a18      	ldr	r2, [pc, #96]	; (8011e60 <HAL_PCD_MspInit+0xb8>)
 8011dfe:	f043 0301 	orr.w	r3, r3, #1
 8011e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011e04:	4b16      	ldr	r3, [pc, #88]	; (8011e60 <HAL_PCD_MspInit+0xb8>)
 8011e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e08:	f003 0301 	and.w	r3, r3, #1
 8011e0c:	60fb      	str	r3, [r7, #12]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011e10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011e14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e18:	2302      	movs	r3, #2
 8011e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011e24:	2300      	movs	r3, #0
 8011e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011e2a:	230a      	movs	r3, #10
 8011e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011e34:	4619      	mov	r1, r3
 8011e36:	480b      	ldr	r0, [pc, #44]	; (8011e64 <HAL_PCD_MspInit+0xbc>)
 8011e38:	f002 fb82 	bl	8014540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011e3c:	4b08      	ldr	r3, [pc, #32]	; (8011e60 <HAL_PCD_MspInit+0xb8>)
 8011e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e40:	4a07      	ldr	r2, [pc, #28]	; (8011e60 <HAL_PCD_MspInit+0xb8>)
 8011e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e46:	65d3      	str	r3, [r2, #92]	; 0x5c
 8011e48:	4b05      	ldr	r3, [pc, #20]	; (8011e60 <HAL_PCD_MspInit+0xb8>)
 8011e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011e50:	60bb      	str	r3, [r7, #8]
 8011e52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8011e54:	bf00      	nop
 8011e56:	37b8      	adds	r7, #184	; 0xb8
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	4000d400 	.word	0x4000d400
 8011e60:	40021000 	.word	0x40021000
 8011e64:	42020000 	.word	0x42020000

08011e68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b08c      	sub	sp, #48	; 0x30
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8011e78:	2200      	movs	r2, #0
 8011e7a:	6879      	ldr	r1, [r7, #4]
 8011e7c:	202d      	movs	r0, #45	; 0x2d
 8011e7e:	f001 ff89 	bl	8013d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8011e82:	202d      	movs	r0, #45	; 0x2d
 8011e84:	f001 ffa0 	bl	8013dc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8011e88:	4b1f      	ldr	r3, [pc, #124]	; (8011f08 <HAL_InitTick+0xa0>)
 8011e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e8c:	4a1e      	ldr	r2, [pc, #120]	; (8011f08 <HAL_InitTick+0xa0>)
 8011e8e:	f043 0301 	orr.w	r3, r3, #1
 8011e92:	6593      	str	r3, [r2, #88]	; 0x58
 8011e94:	4b1c      	ldr	r3, [pc, #112]	; (8011f08 <HAL_InitTick+0xa0>)
 8011e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e98:	f003 0301 	and.w	r3, r3, #1
 8011e9c:	60fb      	str	r3, [r7, #12]
 8011e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8011ea0:	f107 0210 	add.w	r2, r7, #16
 8011ea4:	f107 0314 	add.w	r3, r7, #20
 8011ea8:	4611      	mov	r1, r2
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f004 fb68 	bl	8016580 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8011eb0:	f004 fb3e 	bl	8016530 <HAL_RCC_GetPCLK1Freq>
 8011eb4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8011eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb8:	4a14      	ldr	r2, [pc, #80]	; (8011f0c <HAL_InitTick+0xa4>)
 8011eba:	fba2 2303 	umull	r2, r3, r2, r3
 8011ebe:	0c9b      	lsrs	r3, r3, #18
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8011ec4:	4b12      	ldr	r3, [pc, #72]	; (8011f10 <HAL_InitTick+0xa8>)
 8011ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011eca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8011ecc:	4b10      	ldr	r3, [pc, #64]	; (8011f10 <HAL_InitTick+0xa8>)
 8011ece:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8011ed4:	4a0e      	ldr	r2, [pc, #56]	; (8011f10 <HAL_InitTick+0xa8>)
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8011eda:	4b0d      	ldr	r3, [pc, #52]	; (8011f10 <HAL_InitTick+0xa8>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011ee0:	4b0b      	ldr	r3, [pc, #44]	; (8011f10 <HAL_InitTick+0xa8>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8011ee6:	480a      	ldr	r0, [pc, #40]	; (8011f10 <HAL_InitTick+0xa8>)
 8011ee8:	f006 f9ae 	bl	8018248 <HAL_TIM_Base_Init>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d104      	bne.n	8011efc <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8011ef2:	4807      	ldr	r0, [pc, #28]	; (8011f10 <HAL_InitTick+0xa8>)
 8011ef4:	f006 fa68 	bl	80183c8 <HAL_TIM_Base_Start_IT>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	e000      	b.n	8011efe <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8011efc:	2301      	movs	r3, #1
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3730      	adds	r7, #48	; 0x30
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	40021000 	.word	0x40021000
 8011f0c:	431bde83 	.word	0x431bde83
 8011f10:	20000b8c 	.word	0x20000b8c

08011f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011f14:	b480      	push	{r7}
 8011f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011f18:	e7fe      	b.n	8011f18 <NMI_Handler+0x4>

08011f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011f1a:	b480      	push	{r7}
 8011f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011f1e:	e7fe      	b.n	8011f1e <HardFault_Handler+0x4>

08011f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011f20:	b480      	push	{r7}
 8011f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011f24:	e7fe      	b.n	8011f24 <MemManage_Handler+0x4>

08011f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011f26:	b480      	push	{r7}
 8011f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011f2a:	e7fe      	b.n	8011f2a <BusFault_Handler+0x4>

08011f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011f30:	e7fe      	b.n	8011f30 <UsageFault_Handler+0x4>

08011f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011f32:	b480      	push	{r7}
 8011f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011f36:	bf00      	nop
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3e:	4770      	bx	lr

08011f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011f44:	4802      	ldr	r0, [pc, #8]	; (8011f50 <DMA1_Channel1_IRQHandler+0x10>)
 8011f46:	f002 f92b 	bl	80141a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8011f4a:	bf00      	nop
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	2000034c 	.word	0x2000034c

08011f54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8011f58:	4802      	ldr	r0, [pc, #8]	; (8011f64 <ADC1_2_IRQHandler+0x10>)
 8011f5a:	f000 fe2b 	bl	8012bb4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8011f5e:	bf00      	nop
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	200002e4 	.word	0x200002e4

08011f68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8011f6c:	4802      	ldr	r0, [pc, #8]	; (8011f78 <TIM1_CC_IRQHandler+0x10>)
 8011f6e:	f006 fed9 	bl	8018d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8011f72:	bf00      	nop
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	20000718 	.word	0x20000718

08011f7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8011f80:	4802      	ldr	r0, [pc, #8]	; (8011f8c <TIM2_IRQHandler+0x10>)
 8011f82:	f006 fecf 	bl	8018d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8011f86:	bf00      	nop
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	20000b8c 	.word	0x20000b8c

08011f90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8011f94:	4802      	ldr	r0, [pc, #8]	; (8011fa0 <TIM3_IRQHandler+0x10>)
 8011f96:	f006 fec5 	bl	8018d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8011f9a:	bf00      	nop
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20000764 	.word	0x20000764

08011fa4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8011fa8:	4802      	ldr	r0, [pc, #8]	; (8011fb4 <TIM6_IRQHandler+0x10>)
 8011faa:	f006 febb 	bl	8018d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8011fae:	bf00      	nop
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	200007fc 	.word	0x200007fc

08011fb8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8011fbc:	4802      	ldr	r0, [pc, #8]	; (8011fc8 <UART4_IRQHandler+0x10>)
 8011fbe:	f008 fa73 	bl	801a4a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8011fc2:	bf00      	nop
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	2000049c 	.word	0x2000049c

08011fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	af00      	add	r7, sp, #0
  return 1;
 8011fd0:	2301      	movs	r3, #1
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr

08011fdc <_kill>:

int _kill(int pid, int sig)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
 8011fe4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8011fe6:	f00f fda1 	bl	8021b2c <__errno>
 8011fea:	4603      	mov	r3, r0
 8011fec:	2216      	movs	r2, #22
 8011fee:	601a      	str	r2, [r3, #0]
  return -1;
 8011ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <_exit>:

void _exit (int status)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012004:	f04f 31ff 	mov.w	r1, #4294967295
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7ff ffe7 	bl	8011fdc <_kill>
  while (1) {}    /* Make sure we hang here */
 801200e:	e7fe      	b.n	801200e <_exit+0x12>

08012010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801201c:	2300      	movs	r3, #0
 801201e:	617b      	str	r3, [r7, #20]
 8012020:	e00a      	b.n	8012038 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012022:	f3af 8000 	nop.w
 8012026:	4601      	mov	r1, r0
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	60ba      	str	r2, [r7, #8]
 801202e:	b2ca      	uxtb	r2, r1
 8012030:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	3301      	adds	r3, #1
 8012036:	617b      	str	r3, [r7, #20]
 8012038:	697a      	ldr	r2, [r7, #20]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	429a      	cmp	r2, r3
 801203e:	dbf0      	blt.n	8012022 <_read+0x12>
  }

  return len;
 8012040:	687b      	ldr	r3, [r7, #4]
}
 8012042:	4618      	mov	r0, r3
 8012044:	3718      	adds	r7, #24
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801204a:	b580      	push	{r7, lr}
 801204c:	b086      	sub	sp, #24
 801204e:	af00      	add	r7, sp, #0
 8012050:	60f8      	str	r0, [r7, #12]
 8012052:	60b9      	str	r1, [r7, #8]
 8012054:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012056:	2300      	movs	r3, #0
 8012058:	617b      	str	r3, [r7, #20]
 801205a:	e009      	b.n	8012070 <_write+0x26>
  {
    __io_putchar(*ptr++);
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	60ba      	str	r2, [r7, #8]
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	4618      	mov	r0, r3
 8012066:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	3301      	adds	r3, #1
 801206e:	617b      	str	r3, [r7, #20]
 8012070:	697a      	ldr	r2, [r7, #20]
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	429a      	cmp	r2, r3
 8012076:	dbf1      	blt.n	801205c <_write+0x12>
  }
  return len;
 8012078:	687b      	ldr	r3, [r7, #4]
}
 801207a:	4618      	mov	r0, r3
 801207c:	3718      	adds	r7, #24
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}

08012082 <_close>:

int _close(int file)
{
 8012082:	b480      	push	{r7}
 8012084:	b083      	sub	sp, #12
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801208e:	4618      	mov	r0, r3
 8012090:	370c      	adds	r7, #12
 8012092:	46bd      	mov	sp, r7
 8012094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012098:	4770      	bx	lr

0801209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801209a:	b480      	push	{r7}
 801209c:	b083      	sub	sp, #12
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
 80120a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80120aa:	605a      	str	r2, [r3, #4]
  return 0;
 80120ac:	2300      	movs	r3, #0
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <_isatty>:

int _isatty(int file)
{
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80120c2:	2301      	movs	r3, #1
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b085      	sub	sp, #20
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	60f8      	str	r0, [r7, #12]
 80120d8:	60b9      	str	r1, [r7, #8]
 80120da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80120dc:	2300      	movs	r3, #0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3714      	adds	r7, #20
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr
	...

080120ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80120f4:	4a14      	ldr	r2, [pc, #80]	; (8012148 <_sbrk+0x5c>)
 80120f6:	4b15      	ldr	r3, [pc, #84]	; (801214c <_sbrk+0x60>)
 80120f8:	1ad3      	subs	r3, r2, r3
 80120fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012100:	4b13      	ldr	r3, [pc, #76]	; (8012150 <_sbrk+0x64>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d102      	bne.n	801210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012108:	4b11      	ldr	r3, [pc, #68]	; (8012150 <_sbrk+0x64>)
 801210a:	4a12      	ldr	r2, [pc, #72]	; (8012154 <_sbrk+0x68>)
 801210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801210e:	4b10      	ldr	r3, [pc, #64]	; (8012150 <_sbrk+0x64>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4413      	add	r3, r2
 8012116:	693a      	ldr	r2, [r7, #16]
 8012118:	429a      	cmp	r2, r3
 801211a:	d207      	bcs.n	801212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801211c:	f00f fd06 	bl	8021b2c <__errno>
 8012120:	4603      	mov	r3, r0
 8012122:	220c      	movs	r2, #12
 8012124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012126:	f04f 33ff 	mov.w	r3, #4294967295
 801212a:	e009      	b.n	8012140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801212c:	4b08      	ldr	r3, [pc, #32]	; (8012150 <_sbrk+0x64>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012132:	4b07      	ldr	r3, [pc, #28]	; (8012150 <_sbrk+0x64>)
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4413      	add	r3, r2
 801213a:	4a05      	ldr	r2, [pc, #20]	; (8012150 <_sbrk+0x64>)
 801213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801213e:	68fb      	ldr	r3, [r7, #12]
}
 8012140:	4618      	mov	r0, r3
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	20030000 	.word	0x20030000
 801214c:	00000400 	.word	0x00000400
 8012150:	20000bd8 	.word	0x20000bd8
 8012154:	20003a78 	.word	0x20003a78

08012158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8012158:	b480      	push	{r7}
 801215a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 801215c:	4b06      	ldr	r3, [pc, #24]	; (8012178 <SystemInit+0x20>)
 801215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012162:	4a05      	ldr	r2, [pc, #20]	; (8012178 <SystemInit+0x20>)
 8012164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 801216c:	bf00      	nop
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop
 8012178:	e000ed00 	.word	0xe000ed00

0801217c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 801217c:	b480      	push	{r7}
 801217e:	b087      	sub	sp, #28
 8012180:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8012182:	4b4f      	ldr	r3, [pc, #316]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	f003 0308 	and.w	r3, r3, #8
 801218a:	2b00      	cmp	r3, #0
 801218c:	d107      	bne.n	801219e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 801218e:	4b4c      	ldr	r3, [pc, #304]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012194:	0a1b      	lsrs	r3, r3, #8
 8012196:	f003 030f 	and.w	r3, r3, #15
 801219a:	617b      	str	r3, [r7, #20]
 801219c:	e005      	b.n	80121aa <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 801219e:	4b48      	ldr	r3, [pc, #288]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	091b      	lsrs	r3, r3, #4
 80121a4:	f003 030f 	and.w	r3, r3, #15
 80121a8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80121aa:	4a46      	ldr	r2, [pc, #280]	; (80122c4 <SystemCoreClockUpdate+0x148>)
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121b2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80121b4:	4b42      	ldr	r3, [pc, #264]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	f003 030c 	and.w	r3, r3, #12
 80121bc:	2b0c      	cmp	r3, #12
 80121be:	d866      	bhi.n	801228e <SystemCoreClockUpdate+0x112>
 80121c0:	a201      	add	r2, pc, #4	; (adr r2, 80121c8 <SystemCoreClockUpdate+0x4c>)
 80121c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c6:	bf00      	nop
 80121c8:	080121fd 	.word	0x080121fd
 80121cc:	0801228f 	.word	0x0801228f
 80121d0:	0801228f 	.word	0x0801228f
 80121d4:	0801228f 	.word	0x0801228f
 80121d8:	08012205 	.word	0x08012205
 80121dc:	0801228f 	.word	0x0801228f
 80121e0:	0801228f 	.word	0x0801228f
 80121e4:	0801228f 	.word	0x0801228f
 80121e8:	0801220d 	.word	0x0801220d
 80121ec:	0801228f 	.word	0x0801228f
 80121f0:	0801228f 	.word	0x0801228f
 80121f4:	0801228f 	.word	0x0801228f
 80121f8:	08012215 	.word	0x08012215
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80121fc:	4a32      	ldr	r2, [pc, #200]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	6013      	str	r3, [r2, #0]
      break;
 8012202:	e048      	b.n	8012296 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8012204:	4b30      	ldr	r3, [pc, #192]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 8012206:	4a31      	ldr	r2, [pc, #196]	; (80122cc <SystemCoreClockUpdate+0x150>)
 8012208:	601a      	str	r2, [r3, #0]
      break;
 801220a:	e044      	b.n	8012296 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 801220c:	4b2e      	ldr	r3, [pc, #184]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 801220e:	4a30      	ldr	r2, [pc, #192]	; (80122d0 <SystemCoreClockUpdate+0x154>)
 8012210:	601a      	str	r2, [r3, #0]
      break;
 8012212:	e040      	b.n	8012296 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012214:	4b2a      	ldr	r3, [pc, #168]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012216:	68db      	ldr	r3, [r3, #12]
 8012218:	f003 0303 	and.w	r3, r3, #3
 801221c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 801221e:	4b28      	ldr	r3, [pc, #160]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	091b      	lsrs	r3, r3, #4
 8012224:	f003 030f 	and.w	r3, r3, #15
 8012228:	3301      	adds	r3, #1
 801222a:	60bb      	str	r3, [r7, #8]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2b02      	cmp	r3, #2
 8012230:	d003      	beq.n	801223a <SystemCoreClockUpdate+0xbe>
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2b03      	cmp	r3, #3
 8012236:	d006      	beq.n	8012246 <SystemCoreClockUpdate+0xca>
 8012238:	e00b      	b.n	8012252 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 801223a:	4a24      	ldr	r2, [pc, #144]	; (80122cc <SystemCoreClockUpdate+0x150>)
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012242:	613b      	str	r3, [r7, #16]
          break;
 8012244:	e00b      	b.n	801225e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8012246:	4a22      	ldr	r2, [pc, #136]	; (80122d0 <SystemCoreClockUpdate+0x154>)
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	fbb2 f3f3 	udiv	r3, r2, r3
 801224e:	613b      	str	r3, [r7, #16]
          break;
 8012250:	e005      	b.n	801225e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8012252:	697a      	ldr	r2, [r7, #20]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	fbb2 f3f3 	udiv	r3, r2, r3
 801225a:	613b      	str	r3, [r7, #16]
          break;
 801225c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 801225e:	4b18      	ldr	r3, [pc, #96]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	0a1b      	lsrs	r3, r3, #8
 8012264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	fb02 f303 	mul.w	r3, r2, r3
 801226e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8012270:	4b13      	ldr	r3, [pc, #76]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	0e5b      	lsrs	r3, r3, #25
 8012276:	f003 0303 	and.w	r3, r3, #3
 801227a:	3301      	adds	r3, #1
 801227c:	005b      	lsls	r3, r3, #1
 801227e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8012280:	693a      	ldr	r2, [r7, #16]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	fbb2 f3f3 	udiv	r3, r2, r3
 8012288:	4a0f      	ldr	r2, [pc, #60]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 801228a:	6013      	str	r3, [r2, #0]
      break;
 801228c:	e003      	b.n	8012296 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 801228e:	4a0e      	ldr	r2, [pc, #56]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	6013      	str	r3, [r2, #0]
      break;
 8012294:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8012296:	4b0a      	ldr	r3, [pc, #40]	; (80122c0 <SystemCoreClockUpdate+0x144>)
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	091b      	lsrs	r3, r3, #4
 801229c:	f003 030f 	and.w	r3, r3, #15
 80122a0:	4a0c      	ldr	r2, [pc, #48]	; (80122d4 <SystemCoreClockUpdate+0x158>)
 80122a2:	5cd3      	ldrb	r3, [r2, r3]
 80122a4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80122a6:	4b08      	ldr	r3, [pc, #32]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	fa22 f303 	lsr.w	r3, r2, r3
 80122b0:	4a05      	ldr	r2, [pc, #20]	; (80122c8 <SystemCoreClockUpdate+0x14c>)
 80122b2:	6013      	str	r3, [r2, #0]
}
 80122b4:	bf00      	nop
 80122b6:	371c      	adds	r7, #28
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr
 80122c0:	40021000 	.word	0x40021000
 80122c4:	080231b4 	.word	0x080231b4
 80122c8:	20000090 	.word	0x20000090
 80122cc:	00f42400 	.word	0x00f42400
 80122d0:	007a1200 	.word	0x007a1200
 80122d4:	0802319c 	.word	0x0802319c

080122d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80122d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012310 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80122dc:	f7ff ff3c 	bl	8012158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80122e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80122e2:	e003      	b.n	80122ec <LoopCopyDataInit>

080122e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80122e4:	4b0b      	ldr	r3, [pc, #44]	; (8012314 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80122e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80122e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80122ea:	3104      	adds	r1, #4

080122ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80122ec:	480a      	ldr	r0, [pc, #40]	; (8012318 <LoopForever+0xa>)
	ldr	r3, =_edata
 80122ee:	4b0b      	ldr	r3, [pc, #44]	; (801231c <LoopForever+0xe>)
	adds	r2, r0, r1
 80122f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80122f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80122f4:	d3f6      	bcc.n	80122e4 <CopyDataInit>
	ldr	r2, =_sbss
 80122f6:	4a0a      	ldr	r2, [pc, #40]	; (8012320 <LoopForever+0x12>)
	b	LoopFillZerobss
 80122f8:	e002      	b.n	8012300 <LoopFillZerobss>

080122fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80122fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80122fc:	f842 3b04 	str.w	r3, [r2], #4

08012300 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8012300:	4b08      	ldr	r3, [pc, #32]	; (8012324 <LoopForever+0x16>)
	cmp	r2, r3
 8012302:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8012304:	d3f9      	bcc.n	80122fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8012306:	f00f fc17 	bl	8021b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801230a:	f7fd ff81 	bl	8010210 <main>

0801230e <LoopForever>:

LoopForever:
    b LoopForever
 801230e:	e7fe      	b.n	801230e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8012310:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8012314:	080238e4 	.word	0x080238e4
	ldr	r0, =_sdata
 8012318:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801231c:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 8012320:	2000010c 	.word	0x2000010c
	ldr	r3, = _ebss
 8012324:	20003a78 	.word	0x20003a78

08012328 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8012328:	e7fe      	b.n	8012328 <COMP_IRQHandler>

0801232a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801232a:	b580      	push	{r7, lr}
 801232c:	b082      	sub	sp, #8
 801232e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8012334:	2004      	movs	r0, #4
 8012336:	f001 fd22 	bl	8013d7e <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 801233a:	f7ff ff1f 	bl	801217c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801233e:	2007      	movs	r0, #7
 8012340:	f7ff fd92 	bl	8011e68 <HAL_InitTick>
 8012344:	4603      	mov	r3, r0
 8012346:	2b00      	cmp	r3, #0
 8012348:	d002      	beq.n	8012350 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 801234a:	2301      	movs	r3, #1
 801234c:	71fb      	strb	r3, [r7, #7]
 801234e:	e001      	b.n	8012354 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012350:	f7ff f874 	bl	801143c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012354:	79fb      	ldrb	r3, [r7, #7]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3708      	adds	r7, #8
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
	...

08012360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012360:	b480      	push	{r7}
 8012362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012364:	4b06      	ldr	r3, [pc, #24]	; (8012380 <HAL_IncTick+0x20>)
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	461a      	mov	r2, r3
 801236a:	4b06      	ldr	r3, [pc, #24]	; (8012384 <HAL_IncTick+0x24>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	4413      	add	r3, r2
 8012370:	4a04      	ldr	r2, [pc, #16]	; (8012384 <HAL_IncTick+0x24>)
 8012372:	6013      	str	r3, [r2, #0]
}
 8012374:	bf00      	nop
 8012376:	46bd      	mov	sp, r7
 8012378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237c:	4770      	bx	lr
 801237e:	bf00      	nop
 8012380:	20000098 	.word	0x20000098
 8012384:	20000bdc 	.word	0x20000bdc

08012388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012388:	b480      	push	{r7}
 801238a:	af00      	add	r7, sp, #0
  return uwTick;
 801238c:	4b03      	ldr	r3, [pc, #12]	; (801239c <HAL_GetTick+0x14>)
 801238e:	681b      	ldr	r3, [r3, #0]
}
 8012390:	4618      	mov	r0, r3
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop
 801239c:	20000bdc 	.word	0x20000bdc

080123a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	689b      	ldr	r3, [r3, #8]
 80123ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	431a      	orrs	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	609a      	str	r2, [r3, #8]
}
 80123ba:	bf00      	nop
 80123bc:	370c      	adds	r7, #12
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr

080123c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80123c6:	b480      	push	{r7}
 80123c8:	b083      	sub	sp, #12
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	6078      	str	r0, [r7, #4]
 80123ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	689b      	ldr	r3, [r3, #8]
 80123d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	431a      	orrs	r2, r3
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	609a      	str	r2, [r3, #8]
}
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	689b      	ldr	r3, [r3, #8]
 80123f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	370c      	adds	r7, #12
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8012408:	b480      	push	{r7}
 801240a:	b087      	sub	sp, #28
 801240c:	af00      	add	r7, sp, #0
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
 8012414:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	3360      	adds	r3, #96	; 0x60
 801241a:	461a      	mov	r2, r3
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	4413      	add	r3, r2
 8012422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	4b08      	ldr	r3, [pc, #32]	; (801244c <LL_ADC_SetOffset+0x44>)
 801242a:	4013      	ands	r3, r2
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8012432:	683a      	ldr	r2, [r7, #0]
 8012434:	430a      	orrs	r2, r1
 8012436:	4313      	orrs	r3, r2
 8012438:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8012440:	bf00      	nop
 8012442:	371c      	adds	r7, #28
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr
 801244c:	03fff000 	.word	0x03fff000

08012450 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8012450:	b480      	push	{r7}
 8012452:	b085      	sub	sp, #20
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	3360      	adds	r3, #96	; 0x60
 801245e:	461a      	mov	r2, r3
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	4413      	add	r3, r2
 8012466:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8012470:	4618      	mov	r0, r3
 8012472:	3714      	adds	r7, #20
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 801247c:	b480      	push	{r7}
 801247e:	b087      	sub	sp, #28
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	60b9      	str	r1, [r7, #8]
 8012486:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	3360      	adds	r3, #96	; 0x60
 801248c:	461a      	mov	r2, r3
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	4413      	add	r3, r2
 8012494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	431a      	orrs	r2, r3
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80124a6:	bf00      	nop
 80124a8:	371c      	adds	r7, #28
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80124b2:	b480      	push	{r7}
 80124b4:	b083      	sub	sp, #12
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
 80124ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	695b      	ldr	r3, [r3, #20]
 80124c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	431a      	orrs	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	615a      	str	r2, [r3, #20]
}
 80124cc:	bf00      	nop
 80124ce:	370c      	adds	r7, #12
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr

080124d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	68db      	ldr	r3, [r3, #12]
 80124e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d101      	bne.n	80124f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80124ec:	2301      	movs	r3, #1
 80124ee:	e000      	b.n	80124f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80124fe:	b480      	push	{r7}
 8012500:	b087      	sub	sp, #28
 8012502:	af00      	add	r7, sp, #0
 8012504:	60f8      	str	r0, [r7, #12]
 8012506:	60b9      	str	r1, [r7, #8]
 8012508:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3330      	adds	r3, #48	; 0x30
 801250e:	461a      	mov	r2, r3
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	0a1b      	lsrs	r3, r3, #8
 8012514:	009b      	lsls	r3, r3, #2
 8012516:	f003 030c 	and.w	r3, r3, #12
 801251a:	4413      	add	r3, r2
 801251c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	681a      	ldr	r2, [r3, #0]
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	f003 031f 	and.w	r3, r3, #31
 8012528:	211f      	movs	r1, #31
 801252a:	fa01 f303 	lsl.w	r3, r1, r3
 801252e:	43db      	mvns	r3, r3
 8012530:	401a      	ands	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	0e9b      	lsrs	r3, r3, #26
 8012536:	f003 011f 	and.w	r1, r3, #31
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	f003 031f 	and.w	r3, r3, #31
 8012540:	fa01 f303 	lsl.w	r3, r1, r3
 8012544:	431a      	orrs	r2, r3
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801254a:	bf00      	nop
 801254c:	371c      	adds	r7, #28
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr

08012556 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8012556:	b480      	push	{r7}
 8012558:	b083      	sub	sp, #12
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012562:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012566:	2b00      	cmp	r3, #0
 8012568:	d101      	bne.n	801256e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 801256a:	2301      	movs	r3, #1
 801256c:	e000      	b.n	8012570 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	370c      	adds	r7, #12
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801257c:	b480      	push	{r7}
 801257e:	b087      	sub	sp, #28
 8012580:	af00      	add	r7, sp, #0
 8012582:	60f8      	str	r0, [r7, #12]
 8012584:	60b9      	str	r1, [r7, #8]
 8012586:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	3314      	adds	r3, #20
 801258c:	461a      	mov	r2, r3
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	0e5b      	lsrs	r3, r3, #25
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	f003 0304 	and.w	r3, r3, #4
 8012598:	4413      	add	r3, r2
 801259a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	0d1b      	lsrs	r3, r3, #20
 80125a4:	f003 031f 	and.w	r3, r3, #31
 80125a8:	2107      	movs	r1, #7
 80125aa:	fa01 f303 	lsl.w	r3, r1, r3
 80125ae:	43db      	mvns	r3, r3
 80125b0:	401a      	ands	r2, r3
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	0d1b      	lsrs	r3, r3, #20
 80125b6:	f003 031f 	and.w	r3, r3, #31
 80125ba:	6879      	ldr	r1, [r7, #4]
 80125bc:	fa01 f303 	lsl.w	r3, r1, r3
 80125c0:	431a      	orrs	r2, r3
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80125c6:	bf00      	nop
 80125c8:	371c      	adds	r7, #28
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr
	...

080125d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
 80125da:	60f8      	str	r0, [r7, #12]
 80125dc:	60b9      	str	r1, [r7, #8]
 80125de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125ec:	43db      	mvns	r3, r3
 80125ee:	401a      	ands	r2, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f003 0318 	and.w	r3, r3, #24
 80125f6:	4908      	ldr	r1, [pc, #32]	; (8012618 <LL_ADC_SetChannelSingleDiff+0x44>)
 80125f8:	40d9      	lsrs	r1, r3
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	400b      	ands	r3, r1
 80125fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012602:	431a      	orrs	r2, r3
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 801260a:	bf00      	nop
 801260c:	3714      	adds	r7, #20
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	0007ffff 	.word	0x0007ffff

0801261c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	f003 031f 	and.w	r3, r3, #31
}
 801262c:	4618      	mov	r0, r3
 801262e:	370c      	adds	r7, #12
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr

08012638 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8012664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012668:	687a      	ldr	r2, [r7, #4]
 801266a:	6093      	str	r3, [r2, #8]
}
 801266c:	bf00      	nop
 801266e:	370c      	adds	r7, #12
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr

08012678 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801268c:	d101      	bne.n	8012692 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801268e:	2301      	movs	r3, #1
 8012690:	e000      	b.n	8012694 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	370c      	adds	r7, #12
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b083      	sub	sp, #12
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	689b      	ldr	r3, [r3, #8]
 80126ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80126b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80126b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80126bc:	bf00      	nop
 80126be:	370c      	adds	r7, #12
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	689b      	ldr	r3, [r3, #8]
 80126d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80126dc:	d101      	bne.n	80126e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80126de:	2301      	movs	r3, #1
 80126e0:	e000      	b.n	80126e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80126e2:	2300      	movs	r3, #0
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	370c      	adds	r7, #12
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012704:	f043 0201 	orr.w	r2, r3, #1
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801270c:	bf00      	nop
 801270e:	370c      	adds	r7, #12
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8012718:	b480      	push	{r7}
 801271a:	b083      	sub	sp, #12
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	689b      	ldr	r3, [r3, #8]
 8012724:	f003 0301 	and.w	r3, r3, #1
 8012728:	2b01      	cmp	r3, #1
 801272a:	d101      	bne.n	8012730 <LL_ADC_IsEnabled+0x18>
 801272c:	2301      	movs	r3, #1
 801272e:	e000      	b.n	8012732 <LL_ADC_IsEnabled+0x1a>
 8012730:	2300      	movs	r3, #0
}
 8012732:	4618      	mov	r0, r3
 8012734:	370c      	adds	r7, #12
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 801273e:	b480      	push	{r7}
 8012740:	b083      	sub	sp, #12
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801274e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012752:	f043 0204 	orr.w	r2, r3, #4
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801275a:	bf00      	nop
 801275c:	370c      	adds	r7, #12
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr

08012766 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012766:	b480      	push	{r7}
 8012768:	b083      	sub	sp, #12
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	f003 0304 	and.w	r3, r3, #4
 8012776:	2b04      	cmp	r3, #4
 8012778:	d101      	bne.n	801277e <LL_ADC_REG_IsConversionOngoing+0x18>
 801277a:	2301      	movs	r3, #1
 801277c:	e000      	b.n	8012780 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	f003 0308 	and.w	r3, r3, #8
 801279c:	2b08      	cmp	r3, #8
 801279e:	d101      	bne.n	80127a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80127a0:	2301      	movs	r3, #1
 80127a2:	e000      	b.n	80127a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80127a4:	2300      	movs	r3, #0
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	370c      	adds	r7, #12
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr
	...

080127b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80127b4:	b590      	push	{r4, r7, lr}
 80127b6:	b089      	sub	sp, #36	; 0x24
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80127bc:	2300      	movs	r3, #0
 80127be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80127c0:	2300      	movs	r3, #0
 80127c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d101      	bne.n	80127ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80127ca:	2301      	movs	r3, #1
 80127cc:	e12e      	b.n	8012a2c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	691b      	ldr	r3, [r3, #16]
 80127d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d109      	bne.n	80127f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f7fe fe55 	bl	801148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2200      	movs	r2, #0
 80127e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2200      	movs	r2, #0
 80127ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7ff ff3f 	bl	8012678 <LL_ADC_IsDeepPowerDownEnabled>
 80127fa:	4603      	mov	r3, r0
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d004      	beq.n	801280a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4618      	mov	r0, r3
 8012806:	f7ff ff25 	bl	8012654 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff ff5a 	bl	80126c8 <LL_ADC_IsInternalRegulatorEnabled>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d115      	bne.n	8012846 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff ff3e 	bl	80126a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8012824:	4b83      	ldr	r3, [pc, #524]	; (8012a34 <HAL_ADC_Init+0x280>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	099b      	lsrs	r3, r3, #6
 801282a:	4a83      	ldr	r2, [pc, #524]	; (8012a38 <HAL_ADC_Init+0x284>)
 801282c:	fba2 2303 	umull	r2, r3, r2, r3
 8012830:	099b      	lsrs	r3, r3, #6
 8012832:	3301      	adds	r3, #1
 8012834:	005b      	lsls	r3, r3, #1
 8012836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012838:	e002      	b.n	8012840 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3b01      	subs	r3, #1
 801283e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1f9      	bne.n	801283a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4618      	mov	r0, r3
 801284c:	f7ff ff3c 	bl	80126c8 <LL_ADC_IsInternalRegulatorEnabled>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d10d      	bne.n	8012872 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801285a:	f043 0210 	orr.w	r2, r3, #16
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012866:	f043 0201 	orr.w	r2, r3, #1
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801286e:	2301      	movs	r3, #1
 8012870:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff ff75 	bl	8012766 <LL_ADC_REG_IsConversionOngoing>
 801287c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012882:	f003 0310 	and.w	r3, r3, #16
 8012886:	2b00      	cmp	r3, #0
 8012888:	f040 80c7 	bne.w	8012a1a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	2b00      	cmp	r3, #0
 8012890:	f040 80c3 	bne.w	8012a1a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012898:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801289c:	f043 0202 	orr.w	r2, r3, #2
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7ff ff35 	bl	8012718 <LL_ADC_IsEnabled>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d110      	bne.n	80128d6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80128b4:	4861      	ldr	r0, [pc, #388]	; (8012a3c <HAL_ADC_Init+0x288>)
 80128b6:	f7ff ff2f 	bl	8012718 <LL_ADC_IsEnabled>
 80128ba:	4604      	mov	r4, r0
 80128bc:	4860      	ldr	r0, [pc, #384]	; (8012a40 <HAL_ADC_Init+0x28c>)
 80128be:	f7ff ff2b 	bl	8012718 <LL_ADC_IsEnabled>
 80128c2:	4603      	mov	r3, r0
 80128c4:	4323      	orrs	r3, r4
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d105      	bne.n	80128d6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	4619      	mov	r1, r3
 80128d0:	485c      	ldr	r0, [pc, #368]	; (8012a44 <HAL_ADC_Init+0x290>)
 80128d2:	f7ff fd65 	bl	80123a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	7e5b      	ldrb	r3, [r3, #25]
 80128da:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80128e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80128e6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80128ec:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128f4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80128f6:	4313      	orrs	r3, r2
 80128f8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d106      	bne.n	8012912 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	3b01      	subs	r3, #1
 801290a:	045b      	lsls	r3, r3, #17
 801290c:	69ba      	ldr	r2, [r7, #24]
 801290e:	4313      	orrs	r3, r2
 8012910:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012916:	2b00      	cmp	r3, #0
 8012918:	d009      	beq.n	801292e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801291e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012926:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8012928:	69ba      	ldr	r2, [r7, #24]
 801292a:	4313      	orrs	r3, r2
 801292c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	68da      	ldr	r2, [r3, #12]
 8012934:	4b44      	ldr	r3, [pc, #272]	; (8012a48 <HAL_ADC_Init+0x294>)
 8012936:	4013      	ands	r3, r2
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	6812      	ldr	r2, [r2, #0]
 801293c:	69b9      	ldr	r1, [r7, #24]
 801293e:	430b      	orrs	r3, r1
 8012940:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	4618      	mov	r0, r3
 8012948:	f7ff ff20 	bl	801278c <LL_ADC_INJ_IsConversionOngoing>
 801294c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d140      	bne.n	80129d6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d13d      	bne.n	80129d6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	7e1b      	ldrb	r3, [r3, #24]
 8012962:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8012964:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801296c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 801296e:	4313      	orrs	r3, r2
 8012970:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801297c:	f023 0306 	bic.w	r3, r3, #6
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	6812      	ldr	r2, [r2, #0]
 8012984:	69b9      	ldr	r1, [r7, #24]
 8012986:	430b      	orrs	r3, r1
 8012988:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012990:	2b01      	cmp	r3, #1
 8012992:	d118      	bne.n	80129c6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	691b      	ldr	r3, [r3, #16]
 801299a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801299e:	f023 0304 	bic.w	r3, r3, #4
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80129aa:	4311      	orrs	r1, r2
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80129b0:	4311      	orrs	r1, r2
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80129b6:	430a      	orrs	r2, r1
 80129b8:	431a      	orrs	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f042 0201 	orr.w	r2, r2, #1
 80129c2:	611a      	str	r2, [r3, #16]
 80129c4:	e007      	b.n	80129d6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	691a      	ldr	r2, [r3, #16]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f022 0201 	bic.w	r2, r2, #1
 80129d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	691b      	ldr	r3, [r3, #16]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d10c      	bne.n	80129f8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129e4:	f023 010f 	bic.w	r1, r3, #15
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	1e5a      	subs	r2, r3, #1
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	430a      	orrs	r2, r1
 80129f4:	631a      	str	r2, [r3, #48]	; 0x30
 80129f6:	e007      	b.n	8012a08 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f022 020f 	bic.w	r2, r2, #15
 8012a06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a0c:	f023 0303 	bic.w	r3, r3, #3
 8012a10:	f043 0201 	orr.w	r2, r3, #1
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	659a      	str	r2, [r3, #88]	; 0x58
 8012a18:	e007      	b.n	8012a2a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a1e:	f043 0210 	orr.w	r2, r3, #16
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8012a26:	2301      	movs	r3, #1
 8012a28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8012a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3724      	adds	r7, #36	; 0x24
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd90      	pop	{r4, r7, pc}
 8012a34:	20000090 	.word	0x20000090
 8012a38:	053e2d63 	.word	0x053e2d63
 8012a3c:	42028000 	.word	0x42028000
 8012a40:	42028100 	.word	0x42028100
 8012a44:	42028300 	.word	0x42028300
 8012a48:	fff0c007 	.word	0xfff0c007

08012a4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012a58:	4850      	ldr	r0, [pc, #320]	; (8012b9c <HAL_ADC_Start_DMA+0x150>)
 8012a5a:	f7ff fddf 	bl	801261c <LL_ADC_GetMultimode>
 8012a5e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7ff fe7e 	bl	8012766 <LL_ADC_REG_IsConversionOngoing>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	f040 808e 	bne.w	8012b8e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d101      	bne.n	8012a80 <HAL_ADC_Start_DMA+0x34>
 8012a7c:	2302      	movs	r3, #2
 8012a7e:	e089      	b.n	8012b94 <HAL_ADC_Start_DMA+0x148>
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	2201      	movs	r2, #1
 8012a84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d005      	beq.n	8012a9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	2b05      	cmp	r3, #5
 8012a92:	d002      	beq.n	8012a9a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	2b09      	cmp	r3, #9
 8012a98:	d172      	bne.n	8012b80 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8012a9a:	68f8      	ldr	r0, [r7, #12]
 8012a9c:	f000 feac 	bl	80137f8 <ADC_Enable>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8012aa4:	7dfb      	ldrb	r3, [r7, #23]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d165      	bne.n	8012b76 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8012ab2:	f023 0301 	bic.w	r3, r3, #1
 8012ab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	4a37      	ldr	r2, [pc, #220]	; (8012ba0 <HAL_ADC_Start_DMA+0x154>)
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d002      	beq.n	8012ace <HAL_ADC_Start_DMA+0x82>
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	e000      	b.n	8012ad0 <HAL_ADC_Start_DMA+0x84>
 8012ace:	4b35      	ldr	r3, [pc, #212]	; (8012ba4 <HAL_ADC_Start_DMA+0x158>)
 8012ad0:	68fa      	ldr	r2, [r7, #12]
 8012ad2:	6812      	ldr	r2, [r2, #0]
 8012ad4:	4293      	cmp	r3, r2
 8012ad6:	d002      	beq.n	8012ade <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d105      	bne.n	8012aea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ae2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d006      	beq.n	8012b04 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012afa:	f023 0206 	bic.w	r2, r3, #6
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	65da      	str	r2, [r3, #92]	; 0x5c
 8012b02:	e002      	b.n	8012b0a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b0e:	4a26      	ldr	r2, [pc, #152]	; (8012ba8 <HAL_ADC_Start_DMA+0x15c>)
 8012b10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b16:	4a25      	ldr	r2, [pc, #148]	; (8012bac <HAL_ADC_Start_DMA+0x160>)
 8012b18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b1e:	4a24      	ldr	r2, [pc, #144]	; (8012bb0 <HAL_ADC_Start_DMA+0x164>)
 8012b20:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	221c      	movs	r2, #28
 8012b28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	685a      	ldr	r2, [r3, #4]
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	f042 0210 	orr.w	r2, r2, #16
 8012b40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	68da      	ldr	r2, [r3, #12]
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f042 0201 	orr.w	r2, r2, #1
 8012b50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	3340      	adds	r3, #64	; 0x40
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	68ba      	ldr	r2, [r7, #8]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f001 f9e7 	bl	8013f34 <HAL_DMA_Start_IT>
 8012b66:	4603      	mov	r3, r0
 8012b68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ff fde5 	bl	801273e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8012b74:	e00d      	b.n	8012b92 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8012b7e:	e008      	b.n	8012b92 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2200      	movs	r2, #0
 8012b88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8012b8c:	e001      	b.n	8012b92 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8012b8e:	2302      	movs	r3, #2
 8012b90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8012b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3718      	adds	r7, #24
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	42028300 	.word	0x42028300
 8012ba0:	42028100 	.word	0x42028100
 8012ba4:	42028000 	.word	0x42028000
 8012ba8:	08013905 	.word	0x08013905
 8012bac:	080139dd 	.word	0x080139dd
 8012bb0:	080139f9 	.word	0x080139f9

08012bb4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b08a      	sub	sp, #40	; 0x28
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012bd0:	4882      	ldr	r0, [pc, #520]	; (8012ddc <HAL_ADC_IRQHandler+0x228>)
 8012bd2:	f7ff fd23 	bl	801261c <LL_ADC_GetMultimode>
 8012bd6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	f003 0302 	and.w	r3, r3, #2
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d017      	beq.n	8012c12 <HAL_ADC_IRQHandler+0x5e>
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	f003 0302 	and.w	r3, r3, #2
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d012      	beq.n	8012c12 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bf0:	f003 0310 	and.w	r3, r3, #16
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d105      	bne.n	8012c04 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bfc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f000 ff5f 	bl	8013ac8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2202      	movs	r2, #2
 8012c10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	f003 0304 	and.w	r3, r3, #4
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d004      	beq.n	8012c26 <HAL_ADC_IRQHandler+0x72>
 8012c1c:	69bb      	ldr	r3, [r7, #24]
 8012c1e:	f003 0304 	and.w	r3, r3, #4
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d10a      	bne.n	8012c3c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 8083 	beq.w	8012d38 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	f003 0308 	and.w	r3, r3, #8
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d07d      	beq.n	8012d38 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c40:	f003 0310 	and.w	r3, r3, #16
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d105      	bne.n	8012c54 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7ff fc3d 	bl	80124d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d062      	beq.n	8012d2a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	4a5d      	ldr	r2, [pc, #372]	; (8012de0 <HAL_ADC_IRQHandler+0x22c>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d002      	beq.n	8012c74 <HAL_ADC_IRQHandler+0xc0>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	e000      	b.n	8012c76 <HAL_ADC_IRQHandler+0xc2>
 8012c74:	4b5b      	ldr	r3, [pc, #364]	; (8012de4 <HAL_ADC_IRQHandler+0x230>)
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	6812      	ldr	r2, [r2, #0]
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	d008      	beq.n	8012c90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d005      	beq.n	8012c90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	2b05      	cmp	r3, #5
 8012c88:	d002      	beq.n	8012c90 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2b09      	cmp	r3, #9
 8012c8e:	d104      	bne.n	8012c9a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	623b      	str	r3, [r7, #32]
 8012c98:	e00c      	b.n	8012cb4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4a50      	ldr	r2, [pc, #320]	; (8012de0 <HAL_ADC_IRQHandler+0x22c>)
 8012ca0:	4293      	cmp	r3, r2
 8012ca2:	d002      	beq.n	8012caa <HAL_ADC_IRQHandler+0xf6>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	e000      	b.n	8012cac <HAL_ADC_IRQHandler+0xf8>
 8012caa:	4b4e      	ldr	r3, [pc, #312]	; (8012de4 <HAL_ADC_IRQHandler+0x230>)
 8012cac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8012cb4:	6a3b      	ldr	r3, [r7, #32]
 8012cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d135      	bne.n	8012d2a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	f003 0308 	and.w	r3, r3, #8
 8012cc8:	2b08      	cmp	r3, #8
 8012cca:	d12e      	bne.n	8012d2a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7ff fd48 	bl	8012766 <LL_ADC_REG_IsConversionOngoing>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d11a      	bne.n	8012d12 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	685a      	ldr	r2, [r3, #4]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f022 020c 	bic.w	r2, r2, #12
 8012cea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d112      	bne.n	8012d2a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d08:	f043 0201 	orr.w	r2, r3, #1
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	659a      	str	r2, [r3, #88]	; 0x58
 8012d10:	e00b      	b.n	8012d2a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d16:	f043 0210 	orr.w	r2, r3, #16
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012d22:	f043 0201 	orr.w	r2, r3, #1
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7ef f85e 	bl	8001dec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	220c      	movs	r2, #12
 8012d36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	f003 0320 	and.w	r3, r3, #32
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d004      	beq.n	8012d4c <HAL_ADC_IRQHandler+0x198>
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	f003 0320 	and.w	r3, r3, #32
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d10b      	bne.n	8012d64 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f000 809f 	beq.w	8012e96 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8012d58:	69bb      	ldr	r3, [r7, #24]
 8012d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 8099 	beq.w	8012e96 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d68:	f003 0310 	and.w	r3, r3, #16
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d105      	bne.n	8012d7c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7ff fbe8 	bl	8012556 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8012d86:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7ff fba3 	bl	80124d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8012d92:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4a11      	ldr	r2, [pc, #68]	; (8012de0 <HAL_ADC_IRQHandler+0x22c>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d002      	beq.n	8012da4 <HAL_ADC_IRQHandler+0x1f0>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	e000      	b.n	8012da6 <HAL_ADC_IRQHandler+0x1f2>
 8012da4:	4b0f      	ldr	r3, [pc, #60]	; (8012de4 <HAL_ADC_IRQHandler+0x230>)
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	6812      	ldr	r2, [r2, #0]
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d008      	beq.n	8012dc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d005      	beq.n	8012dc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	2b06      	cmp	r3, #6
 8012db8:	d002      	beq.n	8012dc0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8012dba:	697b      	ldr	r3, [r7, #20]
 8012dbc:	2b07      	cmp	r3, #7
 8012dbe:	d104      	bne.n	8012dca <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	68db      	ldr	r3, [r3, #12]
 8012dc6:	623b      	str	r3, [r7, #32]
 8012dc8:	e013      	b.n	8012df2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a04      	ldr	r2, [pc, #16]	; (8012de0 <HAL_ADC_IRQHandler+0x22c>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d009      	beq.n	8012de8 <HAL_ADC_IRQHandler+0x234>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	e007      	b.n	8012dea <HAL_ADC_IRQHandler+0x236>
 8012dda:	bf00      	nop
 8012ddc:	42028300 	.word	0x42028300
 8012de0:	42028100 	.word	0x42028100
 8012de4:	42028000 	.word	0x42028000
 8012de8:	4b7d      	ldr	r3, [pc, #500]	; (8012fe0 <HAL_ADC_IRQHandler+0x42c>)
 8012dea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d047      	beq.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8012df8:	6a3b      	ldr	r3, [r7, #32]
 8012dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d007      	beq.n	8012e12 <HAL_ADC_IRQHandler+0x25e>
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d03f      	beq.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d13a      	bne.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e1c:	2b40      	cmp	r3, #64	; 0x40
 8012e1e:	d133      	bne.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8012e20:	6a3b      	ldr	r3, [r7, #32]
 8012e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d12e      	bne.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff fcac 	bl	801278c <LL_ADC_INJ_IsConversionOngoing>
 8012e34:	4603      	mov	r3, r0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d11a      	bne.n	8012e70 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	685a      	ldr	r2, [r3, #4]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012e48:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d112      	bne.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e66:	f043 0201 	orr.w	r2, r3, #1
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	659a      	str	r2, [r3, #88]	; 0x58
 8012e6e:	e00b      	b.n	8012e88 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e74:	f043 0210 	orr.w	r2, r3, #16
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e80:	f043 0201 	orr.w	r2, r3, #1
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 fdf5 	bl	8013a78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2260      	movs	r2, #96	; 0x60
 8012e94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d011      	beq.n	8012ec4 <HAL_ADC_IRQHandler+0x310>
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00c      	beq.n	8012ec4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012eae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f8a0 	bl	8012ffc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	2280      	movs	r2, #128	; 0x80
 8012ec2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d012      	beq.n	8012ef4 <HAL_ADC_IRQHandler+0x340>
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00d      	beq.n	8012ef4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012edc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f000 fddb 	bl	8013aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012ef2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d012      	beq.n	8012f24 <HAL_ADC_IRQHandler+0x370>
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d00d      	beq.n	8012f24 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 fdcd 	bl	8013ab4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	f003 0310 	and.w	r3, r3, #16
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d036      	beq.n	8012f9c <HAL_ADC_IRQHandler+0x3e8>
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	f003 0310 	and.w	r3, r3, #16
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d031      	beq.n	8012f9c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d102      	bne.n	8012f46 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8012f40:	2301      	movs	r3, #1
 8012f42:	627b      	str	r3, [r7, #36]	; 0x24
 8012f44:	e014      	b.n	8012f70 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d008      	beq.n	8012f5e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8012f4c:	4825      	ldr	r0, [pc, #148]	; (8012fe4 <HAL_ADC_IRQHandler+0x430>)
 8012f4e:	f7ff fb73 	bl	8012638 <LL_ADC_GetMultiDMATransfer>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00b      	beq.n	8012f70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f5c:	e008      	b.n	8012f70 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	f003 0301 	and.w	r3, r3, #1
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d001      	beq.n	8012f70 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8012f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d10e      	bne.n	8012f94 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f7a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f86:	f043 0202 	orr.w	r2, r3, #2
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f83e 	bl	8013010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	2210      	movs	r2, #16
 8012f9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d018      	beq.n	8012fd8 <HAL_ADC_IRQHandler+0x424>
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d013      	beq.n	8012fd8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fb4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fc0:	f043 0208 	orr.w	r2, r3, #8
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012fd0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f000 fd5a 	bl	8013a8c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8012fd8:	bf00      	nop
 8012fda:	3728      	adds	r7, #40	; 0x28
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	42028000 	.word	0x42028000
 8012fe4:	42028300 	.word	0x42028300

08012fe8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8012ff0:	bf00      	nop
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr

08012ffc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b083      	sub	sp, #12
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8013004:	bf00      	nop
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8013010:	b480      	push	{r7}
 8013012:	b083      	sub	sp, #12
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8013018:	bf00      	nop
 801301a:	370c      	adds	r7, #12
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr

08013024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8013024:	b590      	push	{r4, r7, lr}
 8013026:	b0b7      	sub	sp, #220	; 0xdc
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801302e:	2300      	movs	r3, #0
 8013030:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8013034:	2300      	movs	r3, #0
 8013036:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 801303e:	2b01      	cmp	r3, #1
 8013040:	d101      	bne.n	8013046 <HAL_ADC_ConfigChannel+0x22>
 8013042:	2302      	movs	r3, #2
 8013044:	e3c1      	b.n	80137ca <HAL_ADC_ConfigChannel+0x7a6>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2201      	movs	r2, #1
 801304a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	4618      	mov	r0, r3
 8013054:	f7ff fb87 	bl	8012766 <LL_ADC_REG_IsConversionOngoing>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	f040 83a6 	bne.w	80137ac <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6818      	ldr	r0, [r3, #0]
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	6859      	ldr	r1, [r3, #4]
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	461a      	mov	r2, r3
 801306e:	f7ff fa46 	bl	80124fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4618      	mov	r0, r3
 8013078:	f7ff fb75 	bl	8012766 <LL_ADC_REG_IsConversionOngoing>
 801307c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	4618      	mov	r0, r3
 8013086:	f7ff fb81 	bl	801278c <LL_ADC_INJ_IsConversionOngoing>
 801308a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801308e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013092:	2b00      	cmp	r3, #0
 8013094:	f040 81c1 	bne.w	801341a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801309c:	2b00      	cmp	r3, #0
 801309e:	f040 81bc 	bne.w	801341a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	689b      	ldr	r3, [r3, #8]
 80130a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130aa:	d10f      	bne.n	80130cc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6818      	ldr	r0, [r3, #0]
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2200      	movs	r2, #0
 80130b6:	4619      	mov	r1, r3
 80130b8:	f7ff fa60 	bl	801257c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7ff f9f4 	bl	80124b2 <LL_ADC_SetSamplingTimeCommonConfig>
 80130ca:	e00e      	b.n	80130ea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	6818      	ldr	r0, [r3, #0]
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	6819      	ldr	r1, [r3, #0]
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	461a      	mov	r2, r3
 80130da:	f7ff fa4f 	bl	801257c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2100      	movs	r1, #0
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7ff f9e4 	bl	80124b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	695a      	ldr	r2, [r3, #20]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	08db      	lsrs	r3, r3, #3
 80130f6:	f003 0303 	and.w	r3, r3, #3
 80130fa:	005b      	lsls	r3, r3, #1
 80130fc:	fa02 f303 	lsl.w	r3, r2, r3
 8013100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	691b      	ldr	r3, [r3, #16]
 8013108:	2b04      	cmp	r3, #4
 801310a:	d00a      	beq.n	8013122 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6818      	ldr	r0, [r3, #0]
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	6919      	ldr	r1, [r3, #16]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801311c:	f7ff f974 	bl	8012408 <LL_ADC_SetOffset>
 8013120:	e17b      	b.n	801341a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	2100      	movs	r1, #0
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff f991 	bl	8012450 <LL_ADC_GetOffsetChannel>
 801312e:	4603      	mov	r3, r0
 8013130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013134:	2b00      	cmp	r3, #0
 8013136:	d10a      	bne.n	801314e <HAL_ADC_ConfigChannel+0x12a>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2100      	movs	r1, #0
 801313e:	4618      	mov	r0, r3
 8013140:	f7ff f986 	bl	8012450 <LL_ADC_GetOffsetChannel>
 8013144:	4603      	mov	r3, r0
 8013146:	0e9b      	lsrs	r3, r3, #26
 8013148:	f003 021f 	and.w	r2, r3, #31
 801314c:	e01e      	b.n	801318c <HAL_ADC_ConfigChannel+0x168>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	2100      	movs	r1, #0
 8013154:	4618      	mov	r0, r3
 8013156:	f7ff f97b 	bl	8012450 <LL_ADC_GetOffsetChannel>
 801315a:	4603      	mov	r3, r0
 801315c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013164:	fa93 f3a3 	rbit	r3, r3
 8013168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801316c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8013174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d101      	bne.n	8013180 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 801317c:	2320      	movs	r3, #32
 801317e:	e004      	b.n	801318a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8013180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013184:	fab3 f383 	clz	r3, r3
 8013188:	b2db      	uxtb	r3, r3
 801318a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013194:	2b00      	cmp	r3, #0
 8013196:	d105      	bne.n	80131a4 <HAL_ADC_ConfigChannel+0x180>
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	0e9b      	lsrs	r3, r3, #26
 801319e:	f003 031f 	and.w	r3, r3, #31
 80131a2:	e018      	b.n	80131d6 <HAL_ADC_ConfigChannel+0x1b2>
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80131ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80131b0:	fa93 f3a3 	rbit	r3, r3
 80131b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80131b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80131bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80131c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d101      	bne.n	80131cc <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80131c8:	2320      	movs	r3, #32
 80131ca:	e004      	b.n	80131d6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80131cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80131d0:	fab3 f383 	clz	r3, r3
 80131d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d106      	bne.n	80131e8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2200      	movs	r2, #0
 80131e0:	2100      	movs	r1, #0
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7ff f94a 	bl	801247c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2101      	movs	r1, #1
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7ff f92e 	bl	8012450 <LL_ADC_GetOffsetChannel>
 80131f4:	4603      	mov	r3, r0
 80131f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d10a      	bne.n	8013214 <HAL_ADC_ConfigChannel+0x1f0>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2101      	movs	r1, #1
 8013204:	4618      	mov	r0, r3
 8013206:	f7ff f923 	bl	8012450 <LL_ADC_GetOffsetChannel>
 801320a:	4603      	mov	r3, r0
 801320c:	0e9b      	lsrs	r3, r3, #26
 801320e:	f003 021f 	and.w	r2, r3, #31
 8013212:	e01e      	b.n	8013252 <HAL_ADC_ConfigChannel+0x22e>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2101      	movs	r1, #1
 801321a:	4618      	mov	r0, r3
 801321c:	f7ff f918 	bl	8012450 <LL_ADC_GetOffsetChannel>
 8013220:	4603      	mov	r3, r0
 8013222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801322a:	fa93 f3a3 	rbit	r3, r3
 801322e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8013232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801323a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8013242:	2320      	movs	r3, #32
 8013244:	e004      	b.n	8013250 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8013246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801324a:	fab3 f383 	clz	r3, r3
 801324e:	b2db      	uxtb	r3, r3
 8013250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801325a:	2b00      	cmp	r3, #0
 801325c:	d105      	bne.n	801326a <HAL_ADC_ConfigChannel+0x246>
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	0e9b      	lsrs	r3, r3, #26
 8013264:	f003 031f 	and.w	r3, r3, #31
 8013268:	e018      	b.n	801329c <HAL_ADC_ConfigChannel+0x278>
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013276:	fa93 f3a3 	rbit	r3, r3
 801327a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801327e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8013286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801328a:	2b00      	cmp	r3, #0
 801328c:	d101      	bne.n	8013292 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 801328e:	2320      	movs	r3, #32
 8013290:	e004      	b.n	801329c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8013292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013296:	fab3 f383 	clz	r3, r3
 801329a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801329c:	429a      	cmp	r2, r3
 801329e:	d106      	bne.n	80132ae <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2200      	movs	r2, #0
 80132a6:	2101      	movs	r1, #1
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7ff f8e7 	bl	801247c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2102      	movs	r1, #2
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7ff f8cb 	bl	8012450 <LL_ADC_GetOffsetChannel>
 80132ba:	4603      	mov	r3, r0
 80132bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d10a      	bne.n	80132da <HAL_ADC_ConfigChannel+0x2b6>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2102      	movs	r1, #2
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff f8c0 	bl	8012450 <LL_ADC_GetOffsetChannel>
 80132d0:	4603      	mov	r3, r0
 80132d2:	0e9b      	lsrs	r3, r3, #26
 80132d4:	f003 021f 	and.w	r2, r3, #31
 80132d8:	e01e      	b.n	8013318 <HAL_ADC_ConfigChannel+0x2f4>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2102      	movs	r1, #2
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7ff f8b5 	bl	8012450 <LL_ADC_GetOffsetChannel>
 80132e6:	4603      	mov	r3, r0
 80132e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80132ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80132f0:	fa93 f3a3 	rbit	r3, r3
 80132f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80132f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80132fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8013300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013304:	2b00      	cmp	r3, #0
 8013306:	d101      	bne.n	801330c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8013308:	2320      	movs	r3, #32
 801330a:	e004      	b.n	8013316 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 801330c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013310:	fab3 f383 	clz	r3, r3
 8013314:	b2db      	uxtb	r3, r3
 8013316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013320:	2b00      	cmp	r3, #0
 8013322:	d105      	bne.n	8013330 <HAL_ADC_ConfigChannel+0x30c>
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	0e9b      	lsrs	r3, r3, #26
 801332a:	f003 031f 	and.w	r3, r3, #31
 801332e:	e016      	b.n	801335e <HAL_ADC_ConfigChannel+0x33a>
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801333c:	fa93 f3a3 	rbit	r3, r3
 8013340:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8013342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8013348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8013350:	2320      	movs	r3, #32
 8013352:	e004      	b.n	801335e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8013354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013358:	fab3 f383 	clz	r3, r3
 801335c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801335e:	429a      	cmp	r2, r3
 8013360:	d106      	bne.n	8013370 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	2200      	movs	r2, #0
 8013368:	2102      	movs	r1, #2
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff f886 	bl	801247c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	2103      	movs	r1, #3
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff f86a 	bl	8012450 <LL_ADC_GetOffsetChannel>
 801337c:	4603      	mov	r3, r0
 801337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013382:	2b00      	cmp	r3, #0
 8013384:	d10a      	bne.n	801339c <HAL_ADC_ConfigChannel+0x378>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	2103      	movs	r1, #3
 801338c:	4618      	mov	r0, r3
 801338e:	f7ff f85f 	bl	8012450 <LL_ADC_GetOffsetChannel>
 8013392:	4603      	mov	r3, r0
 8013394:	0e9b      	lsrs	r3, r3, #26
 8013396:	f003 021f 	and.w	r2, r3, #31
 801339a:	e017      	b.n	80133cc <HAL_ADC_ConfigChannel+0x3a8>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2103      	movs	r1, #3
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7ff f854 	bl	8012450 <LL_ADC_GetOffsetChannel>
 80133a8:	4603      	mov	r3, r0
 80133aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80133ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133ae:	fa93 f3a3 	rbit	r3, r3
 80133b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80133b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80133b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d101      	bne.n	80133c2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80133be:	2320      	movs	r3, #32
 80133c0:	e003      	b.n	80133ca <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80133c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80133c4:	fab3 f383 	clz	r3, r3
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d105      	bne.n	80133e4 <HAL_ADC_ConfigChannel+0x3c0>
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	0e9b      	lsrs	r3, r3, #26
 80133de:	f003 031f 	and.w	r3, r3, #31
 80133e2:	e011      	b.n	8013408 <HAL_ADC_ConfigChannel+0x3e4>
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80133ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133ec:	fa93 f3a3 	rbit	r3, r3
 80133f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80133f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80133f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80133f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d101      	bne.n	8013400 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80133fc:	2320      	movs	r3, #32
 80133fe:	e003      	b.n	8013408 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8013400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013402:	fab3 f383 	clz	r3, r3
 8013406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8013408:	429a      	cmp	r2, r3
 801340a:	d106      	bne.n	801341a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2200      	movs	r2, #0
 8013412:	2103      	movs	r1, #3
 8013414:	4618      	mov	r0, r3
 8013416:	f7ff f831 	bl	801247c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	4618      	mov	r0, r3
 8013420:	f7ff f97a 	bl	8012718 <LL_ADC_IsEnabled>
 8013424:	4603      	mov	r3, r0
 8013426:	2b00      	cmp	r3, #0
 8013428:	f040 81c9 	bne.w	80137be <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6818      	ldr	r0, [r3, #0]
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	6819      	ldr	r1, [r3, #0]
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	461a      	mov	r2, r3
 801343a:	f7ff f8cb 	bl	80125d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	4a8f      	ldr	r2, [pc, #572]	; (8013680 <HAL_ADC_ConfigChannel+0x65c>)
 8013444:	4293      	cmp	r3, r2
 8013446:	f040 8131 	bne.w	80136ac <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013456:	2b00      	cmp	r3, #0
 8013458:	d10b      	bne.n	8013472 <HAL_ADC_ConfigChannel+0x44e>
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	0e9b      	lsrs	r3, r3, #26
 8013460:	3301      	adds	r3, #1
 8013462:	f003 031f 	and.w	r3, r3, #31
 8013466:	2b09      	cmp	r3, #9
 8013468:	bf94      	ite	ls
 801346a:	2301      	movls	r3, #1
 801346c:	2300      	movhi	r3, #0
 801346e:	b2db      	uxtb	r3, r3
 8013470:	e019      	b.n	80134a6 <HAL_ADC_ConfigChannel+0x482>
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801347a:	fa93 f3a3 	rbit	r3, r3
 801347e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8013480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013482:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8013484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 801348a:	2320      	movs	r3, #32
 801348c:	e003      	b.n	8013496 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 801348e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013490:	fab3 f383 	clz	r3, r3
 8013494:	b2db      	uxtb	r3, r3
 8013496:	3301      	adds	r3, #1
 8013498:	f003 031f 	and.w	r3, r3, #31
 801349c:	2b09      	cmp	r3, #9
 801349e:	bf94      	ite	ls
 80134a0:	2301      	movls	r3, #1
 80134a2:	2300      	movhi	r3, #0
 80134a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d079      	beq.n	801359e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d107      	bne.n	80134c6 <HAL_ADC_ConfigChannel+0x4a2>
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	0e9b      	lsrs	r3, r3, #26
 80134bc:	3301      	adds	r3, #1
 80134be:	069b      	lsls	r3, r3, #26
 80134c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80134c4:	e015      	b.n	80134f2 <HAL_ADC_ConfigChannel+0x4ce>
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80134cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134ce:	fa93 f3a3 	rbit	r3, r3
 80134d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80134d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80134d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d101      	bne.n	80134e2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80134de:	2320      	movs	r3, #32
 80134e0:	e003      	b.n	80134ea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80134e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134e4:	fab3 f383 	clz	r3, r3
 80134e8:	b2db      	uxtb	r3, r3
 80134ea:	3301      	adds	r3, #1
 80134ec:	069b      	lsls	r3, r3, #26
 80134ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d109      	bne.n	8013512 <HAL_ADC_ConfigChannel+0x4ee>
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	0e9b      	lsrs	r3, r3, #26
 8013504:	3301      	adds	r3, #1
 8013506:	f003 031f 	and.w	r3, r3, #31
 801350a:	2101      	movs	r1, #1
 801350c:	fa01 f303 	lsl.w	r3, r1, r3
 8013510:	e017      	b.n	8013542 <HAL_ADC_ConfigChannel+0x51e>
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801351a:	fa93 f3a3 	rbit	r3, r3
 801351e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8013520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8013524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013526:	2b00      	cmp	r3, #0
 8013528:	d101      	bne.n	801352e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 801352a:	2320      	movs	r3, #32
 801352c:	e003      	b.n	8013536 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 801352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013530:	fab3 f383 	clz	r3, r3
 8013534:	b2db      	uxtb	r3, r3
 8013536:	3301      	adds	r3, #1
 8013538:	f003 031f 	and.w	r3, r3, #31
 801353c:	2101      	movs	r1, #1
 801353e:	fa01 f303 	lsl.w	r3, r1, r3
 8013542:	ea42 0103 	orr.w	r1, r2, r3
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10a      	bne.n	8013568 <HAL_ADC_ConfigChannel+0x544>
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	0e9b      	lsrs	r3, r3, #26
 8013558:	3301      	adds	r3, #1
 801355a:	f003 021f 	and.w	r2, r3, #31
 801355e:	4613      	mov	r3, r2
 8013560:	005b      	lsls	r3, r3, #1
 8013562:	4413      	add	r3, r2
 8013564:	051b      	lsls	r3, r3, #20
 8013566:	e018      	b.n	801359a <HAL_ADC_ConfigChannel+0x576>
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013570:	fa93 f3a3 	rbit	r3, r3
 8013574:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8013576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8013580:	2320      	movs	r3, #32
 8013582:	e003      	b.n	801358c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8013584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013586:	fab3 f383 	clz	r3, r3
 801358a:	b2db      	uxtb	r3, r3
 801358c:	3301      	adds	r3, #1
 801358e:	f003 021f 	and.w	r2, r3, #31
 8013592:	4613      	mov	r3, r2
 8013594:	005b      	lsls	r3, r3, #1
 8013596:	4413      	add	r3, r2
 8013598:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801359a:	430b      	orrs	r3, r1
 801359c:	e081      	b.n	80136a2 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d107      	bne.n	80135ba <HAL_ADC_ConfigChannel+0x596>
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	0e9b      	lsrs	r3, r3, #26
 80135b0:	3301      	adds	r3, #1
 80135b2:	069b      	lsls	r3, r3, #26
 80135b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80135b8:	e015      	b.n	80135e6 <HAL_ADC_ConfigChannel+0x5c2>
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80135c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c2:	fa93 f3a3 	rbit	r3, r3
 80135c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80135c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80135cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d101      	bne.n	80135d6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80135d2:	2320      	movs	r3, #32
 80135d4:	e003      	b.n	80135de <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	fab3 f383 	clz	r3, r3
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	3301      	adds	r3, #1
 80135e0:	069b      	lsls	r3, r3, #26
 80135e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d109      	bne.n	8013606 <HAL_ADC_ConfigChannel+0x5e2>
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	0e9b      	lsrs	r3, r3, #26
 80135f8:	3301      	adds	r3, #1
 80135fa:	f003 031f 	and.w	r3, r3, #31
 80135fe:	2101      	movs	r1, #1
 8013600:	fa01 f303 	lsl.w	r3, r1, r3
 8013604:	e017      	b.n	8013636 <HAL_ADC_ConfigChannel+0x612>
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	fa93 f3a3 	rbit	r3, r3
 8013612:	61fb      	str	r3, [r7, #28]
  return result;
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	2b00      	cmp	r3, #0
 801361c:	d101      	bne.n	8013622 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 801361e:	2320      	movs	r3, #32
 8013620:	e003      	b.n	801362a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8013622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013624:	fab3 f383 	clz	r3, r3
 8013628:	b2db      	uxtb	r3, r3
 801362a:	3301      	adds	r3, #1
 801362c:	f003 031f 	and.w	r3, r3, #31
 8013630:	2101      	movs	r1, #1
 8013632:	fa01 f303 	lsl.w	r3, r1, r3
 8013636:	ea42 0103 	orr.w	r1, r2, r3
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013642:	2b00      	cmp	r3, #0
 8013644:	d10d      	bne.n	8013662 <HAL_ADC_ConfigChannel+0x63e>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	0e9b      	lsrs	r3, r3, #26
 801364c:	3301      	adds	r3, #1
 801364e:	f003 021f 	and.w	r2, r3, #31
 8013652:	4613      	mov	r3, r2
 8013654:	005b      	lsls	r3, r3, #1
 8013656:	4413      	add	r3, r2
 8013658:	3b1e      	subs	r3, #30
 801365a:	051b      	lsls	r3, r3, #20
 801365c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013660:	e01e      	b.n	80136a0 <HAL_ADC_ConfigChannel+0x67c>
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	fa93 f3a3 	rbit	r3, r3
 801366e:	613b      	str	r3, [r7, #16]
  return result;
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d104      	bne.n	8013684 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 801367a:	2320      	movs	r3, #32
 801367c:	e006      	b.n	801368c <HAL_ADC_ConfigChannel+0x668>
 801367e:	bf00      	nop
 8013680:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8013684:	69bb      	ldr	r3, [r7, #24]
 8013686:	fab3 f383 	clz	r3, r3
 801368a:	b2db      	uxtb	r3, r3
 801368c:	3301      	adds	r3, #1
 801368e:	f003 021f 	and.w	r2, r3, #31
 8013692:	4613      	mov	r3, r2
 8013694:	005b      	lsls	r3, r3, #1
 8013696:	4413      	add	r3, r2
 8013698:	3b1e      	subs	r3, #30
 801369a:	051b      	lsls	r3, r3, #20
 801369c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80136a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80136a2:	683a      	ldr	r2, [r7, #0]
 80136a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80136a6:	4619      	mov	r1, r3
 80136a8:	f7fe ff68 	bl	801257c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	4b48      	ldr	r3, [pc, #288]	; (80137d4 <HAL_ADC_ConfigChannel+0x7b0>)
 80136b2:	4013      	ands	r3, r2
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f000 8082 	beq.w	80137be <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80136ba:	4847      	ldr	r0, [pc, #284]	; (80137d8 <HAL_ADC_ConfigChannel+0x7b4>)
 80136bc:	f7fe fe96 	bl	80123ec <LL_ADC_GetCommonPathInternalCh>
 80136c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80136c4:	4845      	ldr	r0, [pc, #276]	; (80137dc <HAL_ADC_ConfigChannel+0x7b8>)
 80136c6:	f7ff f827 	bl	8012718 <LL_ADC_IsEnabled>
 80136ca:	4604      	mov	r4, r0
 80136cc:	4844      	ldr	r0, [pc, #272]	; (80137e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80136ce:	f7ff f823 	bl	8012718 <LL_ADC_IsEnabled>
 80136d2:	4603      	mov	r3, r0
 80136d4:	4323      	orrs	r3, r4
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d15e      	bne.n	8013798 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	4a41      	ldr	r2, [pc, #260]	; (80137e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80136e0:	4293      	cmp	r3, r2
 80136e2:	d127      	bne.n	8013734 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80136e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80136e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d121      	bne.n	8013734 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	4a39      	ldr	r2, [pc, #228]	; (80137dc <HAL_ADC_ConfigChannel+0x7b8>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d161      	bne.n	80137be <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80136fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80136fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013702:	4619      	mov	r1, r3
 8013704:	4834      	ldr	r0, [pc, #208]	; (80137d8 <HAL_ADC_ConfigChannel+0x7b4>)
 8013706:	f7fe fe5e 	bl	80123c6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801370a:	4b37      	ldr	r3, [pc, #220]	; (80137e8 <HAL_ADC_ConfigChannel+0x7c4>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	099b      	lsrs	r3, r3, #6
 8013710:	4a36      	ldr	r2, [pc, #216]	; (80137ec <HAL_ADC_ConfigChannel+0x7c8>)
 8013712:	fba2 2303 	umull	r2, r3, r2, r3
 8013716:	099b      	lsrs	r3, r3, #6
 8013718:	1c5a      	adds	r2, r3, #1
 801371a:	4613      	mov	r3, r2
 801371c:	005b      	lsls	r3, r3, #1
 801371e:	4413      	add	r3, r2
 8013720:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8013722:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8013724:	e002      	b.n	801372c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	3b01      	subs	r3, #1
 801372a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d1f9      	bne.n	8013726 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8013732:	e044      	b.n	80137be <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4a2d      	ldr	r2, [pc, #180]	; (80137f0 <HAL_ADC_ConfigChannel+0x7cc>)
 801373a:	4293      	cmp	r3, r2
 801373c:	d113      	bne.n	8013766 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801373e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013746:	2b00      	cmp	r3, #0
 8013748:	d10d      	bne.n	8013766 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	4a23      	ldr	r2, [pc, #140]	; (80137dc <HAL_ADC_ConfigChannel+0x7b8>)
 8013750:	4293      	cmp	r3, r2
 8013752:	d134      	bne.n	80137be <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801375c:	4619      	mov	r1, r3
 801375e:	481e      	ldr	r0, [pc, #120]	; (80137d8 <HAL_ADC_ConfigChannel+0x7b4>)
 8013760:	f7fe fe31 	bl	80123c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8013764:	e02b      	b.n	80137be <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	4a22      	ldr	r2, [pc, #136]	; (80137f4 <HAL_ADC_ConfigChannel+0x7d0>)
 801376c:	4293      	cmp	r3, r2
 801376e:	d126      	bne.n	80137be <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8013770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013778:	2b00      	cmp	r3, #0
 801377a:	d120      	bne.n	80137be <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	4a16      	ldr	r2, [pc, #88]	; (80137dc <HAL_ADC_ConfigChannel+0x7b8>)
 8013782:	4293      	cmp	r3, r2
 8013784:	d11b      	bne.n	80137be <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8013786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801378a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801378e:	4619      	mov	r1, r3
 8013790:	4811      	ldr	r0, [pc, #68]	; (80137d8 <HAL_ADC_ConfigChannel+0x7b4>)
 8013792:	f7fe fe18 	bl	80123c6 <LL_ADC_SetCommonPathInternalCh>
 8013796:	e012      	b.n	80137be <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801379c:	f043 0220 	orr.w	r2, r3, #32
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80137a4:	2301      	movs	r3, #1
 80137a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80137aa:	e008      	b.n	80137be <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137b0:	f043 0220 	orr.w	r2, r3, #32
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80137b8:	2301      	movs	r3, #1
 80137ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2200      	movs	r2, #0
 80137c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80137c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	37dc      	adds	r7, #220	; 0xdc
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd90      	pop	{r4, r7, pc}
 80137d2:	bf00      	nop
 80137d4:	80080000 	.word	0x80080000
 80137d8:	42028300 	.word	0x42028300
 80137dc:	42028000 	.word	0x42028000
 80137e0:	42028100 	.word	0x42028100
 80137e4:	c7520000 	.word	0xc7520000
 80137e8:	20000090 	.word	0x20000090
 80137ec:	053e2d63 	.word	0x053e2d63
 80137f0:	cb840000 	.word	0xcb840000
 80137f4:	80000001 	.word	0x80000001

080137f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b084      	sub	sp, #16
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8013800:	2300      	movs	r3, #0
 8013802:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	4618      	mov	r0, r3
 801380a:	f7fe ff85 	bl	8012718 <LL_ADC_IsEnabled>
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	d169      	bne.n	80138e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	689a      	ldr	r2, [r3, #8]
 801381a:	4b36      	ldr	r3, [pc, #216]	; (80138f4 <ADC_Enable+0xfc>)
 801381c:	4013      	ands	r3, r2
 801381e:	2b00      	cmp	r3, #0
 8013820:	d00d      	beq.n	801383e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013826:	f043 0210 	orr.w	r2, r3, #16
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013832:	f043 0201 	orr.w	r2, r3, #1
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 801383a:	2301      	movs	r3, #1
 801383c:	e055      	b.n	80138ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4618      	mov	r0, r3
 8013844:	f7fe ff54 	bl	80126f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8013848:	482b      	ldr	r0, [pc, #172]	; (80138f8 <ADC_Enable+0x100>)
 801384a:	f7fe fdcf 	bl	80123ec <LL_ADC_GetCommonPathInternalCh>
 801384e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8013850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8013854:	2b00      	cmp	r3, #0
 8013856:	d013      	beq.n	8013880 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013858:	4b28      	ldr	r3, [pc, #160]	; (80138fc <ADC_Enable+0x104>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	099b      	lsrs	r3, r3, #6
 801385e:	4a28      	ldr	r2, [pc, #160]	; (8013900 <ADC_Enable+0x108>)
 8013860:	fba2 2303 	umull	r2, r3, r2, r3
 8013864:	099b      	lsrs	r3, r3, #6
 8013866:	1c5a      	adds	r2, r3, #1
 8013868:	4613      	mov	r3, r2
 801386a:	005b      	lsls	r3, r3, #1
 801386c:	4413      	add	r3, r2
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8013872:	e002      	b.n	801387a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	3b01      	subs	r3, #1
 8013878:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d1f9      	bne.n	8013874 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8013880:	f7fe fd82 	bl	8012388 <HAL_GetTick>
 8013884:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8013886:	e028      	b.n	80138da <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	4618      	mov	r0, r3
 801388e:	f7fe ff43 	bl	8012718 <LL_ADC_IsEnabled>
 8013892:	4603      	mov	r3, r0
 8013894:	2b00      	cmp	r3, #0
 8013896:	d104      	bne.n	80138a2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4618      	mov	r0, r3
 801389e:	f7fe ff27 	bl	80126f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80138a2:	f7fe fd71 	bl	8012388 <HAL_GetTick>
 80138a6:	4602      	mov	r2, r0
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	1ad3      	subs	r3, r2, r3
 80138ac:	2b02      	cmp	r3, #2
 80138ae:	d914      	bls.n	80138da <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	f003 0301 	and.w	r3, r3, #1
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d00d      	beq.n	80138da <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138c2:	f043 0210 	orr.w	r2, r3, #16
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80138ce:	f043 0201 	orr.w	r2, r3, #1
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80138d6:	2301      	movs	r3, #1
 80138d8:	e007      	b.n	80138ea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f003 0301 	and.w	r3, r3, #1
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d1cf      	bne.n	8013888 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3710      	adds	r7, #16
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop
 80138f4:	8000003f 	.word	0x8000003f
 80138f8:	42028300 	.word	0x42028300
 80138fc:	20000090 	.word	0x20000090
 8013900:	053e2d63 	.word	0x053e2d63

08013904 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013910:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013916:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801391a:	2b00      	cmp	r3, #0
 801391c:	d14b      	bne.n	80139b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f003 0308 	and.w	r3, r3, #8
 8013934:	2b00      	cmp	r3, #0
 8013936:	d021      	beq.n	801397c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4618      	mov	r0, r3
 801393e:	f7fe fdcb 	bl	80124d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d032      	beq.n	80139ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	68db      	ldr	r3, [r3, #12]
 801394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013952:	2b00      	cmp	r3, #0
 8013954:	d12b      	bne.n	80139ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801395a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013966:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801396a:	2b00      	cmp	r3, #0
 801396c:	d11f      	bne.n	80139ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013972:	f043 0201 	orr.w	r2, r3, #1
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	659a      	str	r2, [r3, #88]	; 0x58
 801397a:	e018      	b.n	80139ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	f003 0302 	and.w	r3, r3, #2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d111      	bne.n	80139ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801398e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801399a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d105      	bne.n	80139ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139a6:	f043 0201 	orr.w	r2, r3, #1
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80139ae:	68f8      	ldr	r0, [r7, #12]
 80139b0:	f7ee fa1c 	bl	8001dec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80139b4:	e00e      	b.n	80139d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139ba:	f003 0310 	and.w	r3, r3, #16
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d003      	beq.n	80139ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80139c2:	68f8      	ldr	r0, [r7, #12]
 80139c4:	f7ff fb24 	bl	8013010 <HAL_ADC_ErrorCallback>
}
 80139c8:	e004      	b.n	80139d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	4798      	blx	r3
}
 80139d4:	bf00      	nop
 80139d6:	3710      	adds	r7, #16
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80139ea:	68f8      	ldr	r0, [r7, #12]
 80139ec:	f7ff fafc 	bl	8012fe8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80139f0:	bf00      	nop
 80139f2:	3710      	adds	r7, #16
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013a16:	f043 0204 	orr.w	r2, r3, #4
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8013a1e:	68f8      	ldr	r0, [r7, #12]
 8013a20:	f7ff faf6 	bl	8013010 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8013a24:	bf00      	nop
 8013a26:	3710      	adds	r7, #16
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <LL_ADC_IsEnabled>:
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b083      	sub	sp, #12
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	689b      	ldr	r3, [r3, #8]
 8013a38:	f003 0301 	and.w	r3, r3, #1
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	d101      	bne.n	8013a44 <LL_ADC_IsEnabled+0x18>
 8013a40:	2301      	movs	r3, #1
 8013a42:	e000      	b.n	8013a46 <LL_ADC_IsEnabled+0x1a>
 8013a44:	2300      	movs	r3, #0
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	370c      	adds	r7, #12
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr

08013a52 <LL_ADC_REG_IsConversionOngoing>:
{
 8013a52:	b480      	push	{r7}
 8013a54:	b083      	sub	sp, #12
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	689b      	ldr	r3, [r3, #8]
 8013a5e:	f003 0304 	and.w	r3, r3, #4
 8013a62:	2b04      	cmp	r3, #4
 8013a64:	d101      	bne.n	8013a6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8013a66:	2301      	movs	r3, #1
 8013a68:	e000      	b.n	8013a6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	370c      	adds	r7, #12
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b083      	sub	sp, #12
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8013a80:	bf00      	nop
 8013a82:	370c      	adds	r7, #12
 8013a84:	46bd      	mov	sp, r7
 8013a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8a:	4770      	bx	lr

08013a8c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8013a8c:	b480      	push	{r7}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8013a94:	bf00      	nop
 8013a96:	370c      	adds	r7, #12
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr

08013aa0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b083      	sub	sp, #12
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8013aa8:	bf00      	nop
 8013aaa:	370c      	adds	r7, #12
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8013abc:	bf00      	nop
 8013abe:	370c      	adds	r7, #12
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8013ad0:	bf00      	nop
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8013adc:	b590      	push	{r4, r7, lr}
 8013ade:	b0a1      	sub	sp, #132	; 0x84
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d101      	bne.n	8013afa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8013af6:	2302      	movs	r3, #2
 8013af8:	e089      	b.n	8013c0e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	2201      	movs	r2, #1
 8013afe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8013b02:	2300      	movs	r3, #0
 8013b04:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8013b06:	2300      	movs	r3, #0
 8013b08:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4a42      	ldr	r2, [pc, #264]	; (8013c18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d102      	bne.n	8013b1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8013b14:	4b41      	ldr	r3, [pc, #260]	; (8013c1c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	e001      	b.n	8013b1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d10b      	bne.n	8013b3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b28:	f043 0220 	orr.w	r2, r3, #32
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2200      	movs	r2, #0
 8013b34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e068      	b.n	8013c0e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7ff ff87 	bl	8013a52 <LL_ADC_REG_IsConversionOngoing>
 8013b44:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7ff ff81 	bl	8013a52 <LL_ADC_REG_IsConversionOngoing>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d14a      	bne.n	8013bec <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8013b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d147      	bne.n	8013bec <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8013b5c:	4b30      	ldr	r3, [pc, #192]	; (8013c20 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8013b5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d027      	beq.n	8013bb8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8013b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b6a:	689b      	ldr	r3, [r3, #8]
 8013b6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	6859      	ldr	r1, [r3, #4]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b7a:	035b      	lsls	r3, r3, #13
 8013b7c:	430b      	orrs	r3, r1
 8013b7e:	431a      	orrs	r2, r3
 8013b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013b84:	4824      	ldr	r0, [pc, #144]	; (8013c18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8013b86:	f7ff ff51 	bl	8013a2c <LL_ADC_IsEnabled>
 8013b8a:	4604      	mov	r4, r0
 8013b8c:	4823      	ldr	r0, [pc, #140]	; (8013c1c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8013b8e:	f7ff ff4d 	bl	8013a2c <LL_ADC_IsEnabled>
 8013b92:	4603      	mov	r3, r0
 8013b94:	4323      	orrs	r3, r4
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d132      	bne.n	8013c00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8013b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8013ba2:	f023 030f 	bic.w	r3, r3, #15
 8013ba6:	683a      	ldr	r2, [r7, #0]
 8013ba8:	6811      	ldr	r1, [r2, #0]
 8013baa:	683a      	ldr	r2, [r7, #0]
 8013bac:	6892      	ldr	r2, [r2, #8]
 8013bae:	430a      	orrs	r2, r1
 8013bb0:	431a      	orrs	r2, r3
 8013bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bb4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8013bb6:	e023      	b.n	8013c00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8013bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bba:	689b      	ldr	r3, [r3, #8]
 8013bbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013bc4:	4814      	ldr	r0, [pc, #80]	; (8013c18 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8013bc6:	f7ff ff31 	bl	8013a2c <LL_ADC_IsEnabled>
 8013bca:	4604      	mov	r4, r0
 8013bcc:	4813      	ldr	r0, [pc, #76]	; (8013c1c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8013bce:	f7ff ff2d 	bl	8013a2c <LL_ADC_IsEnabled>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	4323      	orrs	r3, r4
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d112      	bne.n	8013c00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8013bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bdc:	689b      	ldr	r3, [r3, #8]
 8013bde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8013be2:	f023 030f 	bic.w	r3, r3, #15
 8013be6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013be8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8013bea:	e009      	b.n	8013c00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bf0:	f043 0220 	orr.w	r2, r3, #32
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8013bfe:	e000      	b.n	8013c02 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8013c00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2200      	movs	r2, #0
 8013c06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8013c0a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3784      	adds	r7, #132	; 0x84
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd90      	pop	{r4, r7, pc}
 8013c16:	bf00      	nop
 8013c18:	42028000 	.word	0x42028000
 8013c1c:	42028100 	.word	0x42028100
 8013c20:	42028300 	.word	0x42028300

08013c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b085      	sub	sp, #20
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f003 0307 	and.w	r3, r3, #7
 8013c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013c34:	4b0c      	ldr	r3, [pc, #48]	; (8013c68 <__NVIC_SetPriorityGrouping+0x44>)
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8013c3a:	68ba      	ldr	r2, [r7, #8]
 8013c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013c40:	4013      	ands	r3, r2
 8013c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8013c56:	4a04      	ldr	r2, [pc, #16]	; (8013c68 <__NVIC_SetPriorityGrouping+0x44>)
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	60d3      	str	r3, [r2, #12]
}
 8013c5c:	bf00      	nop
 8013c5e:	3714      	adds	r7, #20
 8013c60:	46bd      	mov	sp, r7
 8013c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c66:	4770      	bx	lr
 8013c68:	e000ed00 	.word	0xe000ed00

08013c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8013c6c:	b480      	push	{r7}
 8013c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8013c70:	4b04      	ldr	r3, [pc, #16]	; (8013c84 <__NVIC_GetPriorityGrouping+0x18>)
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	0a1b      	lsrs	r3, r3, #8
 8013c76:	f003 0307 	and.w	r3, r3, #7
}
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr
 8013c84:	e000ed00 	.word	0xe000ed00

08013c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	4603      	mov	r3, r0
 8013c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	db0b      	blt.n	8013cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013c9a:	79fb      	ldrb	r3, [r7, #7]
 8013c9c:	f003 021f 	and.w	r2, r3, #31
 8013ca0:	4907      	ldr	r1, [pc, #28]	; (8013cc0 <__NVIC_EnableIRQ+0x38>)
 8013ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ca6:	095b      	lsrs	r3, r3, #5
 8013ca8:	2001      	movs	r0, #1
 8013caa:	fa00 f202 	lsl.w	r2, r0, r2
 8013cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8013cb2:	bf00      	nop
 8013cb4:	370c      	adds	r7, #12
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	e000e100 	.word	0xe000e100

08013cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	4603      	mov	r3, r0
 8013ccc:	6039      	str	r1, [r7, #0]
 8013cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	db0a      	blt.n	8013cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	b2da      	uxtb	r2, r3
 8013cdc:	490c      	ldr	r1, [pc, #48]	; (8013d10 <__NVIC_SetPriority+0x4c>)
 8013cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ce2:	0152      	lsls	r2, r2, #5
 8013ce4:	b2d2      	uxtb	r2, r2
 8013ce6:	440b      	add	r3, r1
 8013ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8013cec:	e00a      	b.n	8013d04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	b2da      	uxtb	r2, r3
 8013cf2:	4908      	ldr	r1, [pc, #32]	; (8013d14 <__NVIC_SetPriority+0x50>)
 8013cf4:	79fb      	ldrb	r3, [r7, #7]
 8013cf6:	f003 030f 	and.w	r3, r3, #15
 8013cfa:	3b04      	subs	r3, #4
 8013cfc:	0152      	lsls	r2, r2, #5
 8013cfe:	b2d2      	uxtb	r2, r2
 8013d00:	440b      	add	r3, r1
 8013d02:	761a      	strb	r2, [r3, #24]
}
 8013d04:	bf00      	nop
 8013d06:	370c      	adds	r7, #12
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr
 8013d10:	e000e100 	.word	0xe000e100
 8013d14:	e000ed00 	.word	0xe000ed00

08013d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b089      	sub	sp, #36	; 0x24
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f003 0307 	and.w	r3, r3, #7
 8013d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013d2c:	69fb      	ldr	r3, [r7, #28]
 8013d2e:	f1c3 0307 	rsb	r3, r3, #7
 8013d32:	2b03      	cmp	r3, #3
 8013d34:	bf28      	it	cs
 8013d36:	2303      	movcs	r3, #3
 8013d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	3303      	adds	r3, #3
 8013d3e:	2b06      	cmp	r3, #6
 8013d40:	d902      	bls.n	8013d48 <NVIC_EncodePriority+0x30>
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	3b04      	subs	r3, #4
 8013d46:	e000      	b.n	8013d4a <NVIC_EncodePriority+0x32>
 8013d48:	2300      	movs	r3, #0
 8013d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8013d50:	69bb      	ldr	r3, [r7, #24]
 8013d52:	fa02 f303 	lsl.w	r3, r2, r3
 8013d56:	43da      	mvns	r2, r3
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	401a      	ands	r2, r3
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013d60:	f04f 31ff 	mov.w	r1, #4294967295
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	fa01 f303 	lsl.w	r3, r1, r3
 8013d6a:	43d9      	mvns	r1, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013d70:	4313      	orrs	r3, r2
         );
}
 8013d72:	4618      	mov	r0, r3
 8013d74:	3724      	adds	r7, #36	; 0x24
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr

08013d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013d7e:	b580      	push	{r7, lr}
 8013d80:	b082      	sub	sp, #8
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f7ff ff4c 	bl	8013c24 <__NVIC_SetPriorityGrouping>
}
 8013d8c:	bf00      	nop
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b086      	sub	sp, #24
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	607a      	str	r2, [r7, #4]
 8013da0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8013da2:	f7ff ff63 	bl	8013c6c <__NVIC_GetPriorityGrouping>
 8013da6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	68b9      	ldr	r1, [r7, #8]
 8013dac:	6978      	ldr	r0, [r7, #20]
 8013dae:	f7ff ffb3 	bl	8013d18 <NVIC_EncodePriority>
 8013db2:	4602      	mov	r2, r0
 8013db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013db8:	4611      	mov	r1, r2
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7ff ff82 	bl	8013cc4 <__NVIC_SetPriority>
}
 8013dc0:	bf00      	nop
 8013dc2:	3718      	adds	r7, #24
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	4603      	mov	r3, r0
 8013dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ff ff56 	bl	8013c88 <__NVIC_EnableIRQ>
}
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e08d      	b.n	8013f12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	4b47      	ldr	r3, [pc, #284]	; (8013f1c <HAL_DMA_Init+0x138>)
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d80f      	bhi.n	8013e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	461a      	mov	r2, r3
 8013e08:	4b45      	ldr	r3, [pc, #276]	; (8013f20 <HAL_DMA_Init+0x13c>)
 8013e0a:	4413      	add	r3, r2
 8013e0c:	4a45      	ldr	r2, [pc, #276]	; (8013f24 <HAL_DMA_Init+0x140>)
 8013e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8013e12:	091b      	lsrs	r3, r3, #4
 8013e14:	009a      	lsls	r2, r3, #2
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4a42      	ldr	r2, [pc, #264]	; (8013f28 <HAL_DMA_Init+0x144>)
 8013e1e:	649a      	str	r2, [r3, #72]	; 0x48
 8013e20:	e00e      	b.n	8013e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	4b40      	ldr	r3, [pc, #256]	; (8013f2c <HAL_DMA_Init+0x148>)
 8013e2a:	4413      	add	r3, r2
 8013e2c:	4a3d      	ldr	r2, [pc, #244]	; (8013f24 <HAL_DMA_Init+0x140>)
 8013e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8013e32:	091b      	lsrs	r3, r3, #4
 8013e34:	009a      	lsls	r2, r3, #2
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4a3c      	ldr	r2, [pc, #240]	; (8013f30 <HAL_DMA_Init+0x14c>)
 8013e3e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2202      	movs	r2, #2
 8013e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8013e56:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8013e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8013e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	691b      	ldr	r3, [r3, #16]
 8013e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	699b      	ldr	r3, [r3, #24]
 8013e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6a1b      	ldr	r3, [r3, #32]
 8013e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8013e84:	68fa      	ldr	r2, [r7, #12]
 8013e86:	4313      	orrs	r3, r2
 8013e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	68fa      	ldr	r2, [r7, #12]
 8013e90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f000 faf2 	bl	801447c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	689b      	ldr	r3, [r3, #8]
 8013e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013ea0:	d102      	bne.n	8013ea8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	685a      	ldr	r2, [r3, #4]
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013eb0:	b2d2      	uxtb	r2, r2
 8013eb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8013ebc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d010      	beq.n	8013ee8 <HAL_DMA_Init+0x104>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	2b04      	cmp	r3, #4
 8013ecc:	d80c      	bhi.n	8013ee8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f000 fb12 	bl	80144f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ed8:	2200      	movs	r2, #0
 8013eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013ee0:	687a      	ldr	r2, [r7, #4]
 8013ee2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8013ee4:	605a      	str	r2, [r3, #4]
 8013ee6:	e008      	b.n	8013efa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2200      	movs	r2, #0
 8013efe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2201      	movs	r2, #1
 8013f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8013f10:	2300      	movs	r3, #0
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3710      	adds	r7, #16
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	40020407 	.word	0x40020407
 8013f20:	bffdfff8 	.word	0xbffdfff8
 8013f24:	cccccccd 	.word	0xcccccccd
 8013f28:	40020000 	.word	0x40020000
 8013f2c:	bffdfbf8 	.word	0xbffdfbf8
 8013f30:	40020400 	.word	0x40020400

08013f34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b086      	sub	sp, #24
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
 8013f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013f42:	2300      	movs	r3, #0
 8013f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d101      	bne.n	8013f54 <HAL_DMA_Start_IT+0x20>
 8013f50:	2302      	movs	r3, #2
 8013f52:	e066      	b.n	8014022 <HAL_DMA_Start_IT+0xee>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2201      	movs	r2, #1
 8013f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d155      	bne.n	8014014 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	2200      	movs	r2, #0
 8013f74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	681a      	ldr	r2, [r3, #0]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	f022 0201 	bic.w	r2, r2, #1
 8013f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	68b9      	ldr	r1, [r7, #8]
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f000 fa37 	bl	8014400 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d008      	beq.n	8013fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f042 020e 	orr.w	r2, r2, #14
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	e00f      	b.n	8013fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f022 0204 	bic.w	r2, r2, #4
 8013fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f042 020a 	orr.w	r2, r2, #10
 8013fca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d007      	beq.n	8013fea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013fe8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d007      	beq.n	8014002 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ff6:	681a      	ldr	r2, [r3, #0]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014000:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	f042 0201 	orr.w	r2, r2, #1
 8014010:	601a      	str	r2, [r3, #0]
 8014012:	e005      	b.n	8014020 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	2200      	movs	r2, #0
 8014018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801401c:	2302      	movs	r3, #2
 801401e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8014020:	7dfb      	ldrb	r3, [r7, #23]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3718      	adds	r7, #24
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801402a:	b480      	push	{r7}
 801402c:	b085      	sub	sp, #20
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014032:	2300      	movs	r3, #0
 8014034:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801403c:	b2db      	uxtb	r3, r3
 801403e:	2b02      	cmp	r3, #2
 8014040:	d008      	beq.n	8014054 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2204      	movs	r2, #4
 8014046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2200      	movs	r2, #0
 801404c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014050:	2301      	movs	r3, #1
 8014052:	e040      	b.n	80140d6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	681a      	ldr	r2, [r3, #0]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	f022 020e 	bic.w	r2, r2, #14
 8014062:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801406e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014072:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	681a      	ldr	r2, [r3, #0]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	f022 0201 	bic.w	r2, r2, #1
 8014082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014088:	f003 021c 	and.w	r2, r3, #28
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014090:	2101      	movs	r1, #1
 8014092:	fa01 f202 	lsl.w	r2, r1, r2
 8014096:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80140a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d00c      	beq.n	80140c4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80140b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80140b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80140be:	687a      	ldr	r2, [r7, #4]
 80140c0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80140c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2201      	movs	r2, #1
 80140c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2200      	movs	r2, #0
 80140d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80140d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3714      	adds	r7, #20
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80140e2:	b580      	push	{r7, lr}
 80140e4:	b084      	sub	sp, #16
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80140ea:	2300      	movs	r3, #0
 80140ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	2b02      	cmp	r3, #2
 80140f8:	d005      	beq.n	8014106 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2204      	movs	r2, #4
 80140fe:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8014100:	2301      	movs	r3, #1
 8014102:	73fb      	strb	r3, [r7, #15]
 8014104:	e047      	b.n	8014196 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	f022 020e 	bic.w	r2, r2, #14
 8014114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f022 0201 	bic.w	r2, r2, #1
 8014124:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8014134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801413a:	f003 021c 	and.w	r2, r3, #28
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014142:	2101      	movs	r1, #1
 8014144:	fa01 f202 	lsl.w	r2, r1, r2
 8014148:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8014152:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014158:	2b00      	cmp	r3, #0
 801415a:	d00c      	beq.n	8014176 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801416a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8014174:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2201      	movs	r2, #1
 801417a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2200      	movs	r2, #0
 8014182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801418a:	2b00      	cmp	r3, #0
 801418c:	d003      	beq.n	8014196 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014192:	6878      	ldr	r0, [r7, #4]
 8014194:	4798      	blx	r3
    }
  }
  return status;
 8014196:	7bfb      	ldrb	r3, [r7, #15]
}
 8014198:	4618      	mov	r0, r3
 801419a:	3710      	adds	r7, #16
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141bc:	f003 031c 	and.w	r3, r3, #28
 80141c0:	2204      	movs	r2, #4
 80141c2:	409a      	lsls	r2, r3
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	4013      	ands	r3, r2
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d053      	beq.n	8014274 <HAL_DMA_IRQHandler+0xd4>
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	f003 0304 	and.w	r3, r3, #4
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d04e      	beq.n	8014274 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d024      	beq.n	801422e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141e8:	f003 021c 	and.w	r2, r3, #28
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80141f0:	2104      	movs	r1, #4
 80141f2:	fa01 f202 	lsl.w	r2, r1, r2
 80141f6:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014202:	2b00      	cmp	r3, #0
 8014204:	d109      	bne.n	801421a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801420a:	2b00      	cmp	r3, #0
 801420c:	f000 80c0 	beq.w	8014390 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8014218:	e0ba      	b.n	8014390 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801421e:	2b00      	cmp	r3, #0
 8014220:	f000 80b6 	beq.w	8014390 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801422c:	e0b0      	b.n	8014390 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	f003 0320 	and.w	r3, r3, #32
 8014238:	2b00      	cmp	r3, #0
 801423a:	d107      	bne.n	801424c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	681a      	ldr	r2, [r3, #0]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f022 0204 	bic.w	r2, r2, #4
 801424a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014250:	f003 021c 	and.w	r2, r3, #28
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014258:	2104      	movs	r1, #4
 801425a:	fa01 f202 	lsl.w	r2, r1, r2
 801425e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014264:	2b00      	cmp	r3, #0
 8014266:	f000 8093 	beq.w	8014390 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8014272:	e08d      	b.n	8014390 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014278:	f003 031c 	and.w	r3, r3, #28
 801427c:	2202      	movs	r2, #2
 801427e:	409a      	lsls	r2, r3
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	4013      	ands	r3, r2
 8014284:	2b00      	cmp	r3, #0
 8014286:	d04e      	beq.n	8014326 <HAL_DMA_IRQHandler+0x186>
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	f003 0302 	and.w	r3, r3, #2
 801428e:	2b00      	cmp	r3, #0
 8014290:	d049      	beq.n	8014326 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801429c:	2b00      	cmp	r3, #0
 801429e:	d018      	beq.n	80142d2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d108      	bne.n	80142c0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d06e      	beq.n	8014394 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80142be:	e069      	b.n	8014394 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d065      	beq.n	8014394 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80142d0:	e060      	b.n	8014394 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	f003 0320 	and.w	r3, r3, #32
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d10b      	bne.n	80142f8 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	681a      	ldr	r2, [r3, #0]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	f022 020a 	bic.w	r2, r2, #10
 80142ee:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2201      	movs	r2, #1
 80142f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142fc:	f003 021c 	and.w	r2, r3, #28
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014304:	2102      	movs	r1, #2
 8014306:	fa01 f202 	lsl.w	r2, r1, r2
 801430a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2200      	movs	r2, #0
 8014310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014318:	2b00      	cmp	r3, #0
 801431a:	d03b      	beq.n	8014394 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8014324:	e036      	b.n	8014394 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801432a:	f003 031c 	and.w	r3, r3, #28
 801432e:	2208      	movs	r2, #8
 8014330:	409a      	lsls	r2, r3
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	4013      	ands	r3, r2
 8014336:	2b00      	cmp	r3, #0
 8014338:	d02e      	beq.n	8014398 <HAL_DMA_IRQHandler+0x1f8>
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	f003 0308 	and.w	r3, r3, #8
 8014340:	2b00      	cmp	r3, #0
 8014342:	d029      	beq.n	8014398 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	f022 020e 	bic.w	r2, r2, #14
 8014352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014358:	f003 021c 	and.w	r2, r3, #28
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014360:	2101      	movs	r1, #1
 8014362:	fa01 f202 	lsl.w	r2, r1, r2
 8014366:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2201      	movs	r2, #1
 801436c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2201      	movs	r2, #1
 8014372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	2200      	movs	r2, #0
 801437a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d008      	beq.n	8014398 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801438e:	e002      	b.n	8014396 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8014390:	bf00      	nop
 8014392:	e000      	b.n	8014396 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8014394:	bf00      	nop
  return;
 8014396:	bf00      	nop
 8014398:	bf00      	nop
}
 801439a:	3710      	adds	r7, #16
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}

080143a0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80143a0:	b480      	push	{r7}
 80143a2:	b085      	sub	sp, #20
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d103      	bne.n	80143bc <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80143b4:	2301      	movs	r3, #1
 80143b6:	72fb      	strb	r3, [r7, #11]
    return status;
 80143b8:	7afb      	ldrb	r3, [r7, #11]
 80143ba:	e01b      	b.n	80143f4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	f003 0310 	and.w	r3, r3, #16
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d00d      	beq.n	80143ea <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d004      	beq.n	80143e2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143de:	60fb      	str	r3, [r7, #12]
 80143e0:	e003      	b.n	80143ea <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80143e8:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	601a      	str	r2, [r3, #0]

  return status;
 80143f2:	7afb      	ldrb	r3, [r7, #11]
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	3714      	adds	r7, #20
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr

08014400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014400:	b480      	push	{r7}
 8014402:	b085      	sub	sp, #20
 8014404:	af00      	add	r7, sp, #0
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	607a      	str	r2, [r7, #4]
 801440c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014412:	68fa      	ldr	r2, [r7, #12]
 8014414:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8014416:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801441c:	2b00      	cmp	r3, #0
 801441e:	d004      	beq.n	801442a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014424:	68fa      	ldr	r2, [r7, #12]
 8014426:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8014428:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801442e:	f003 021c 	and.w	r2, r3, #28
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014436:	2101      	movs	r1, #1
 8014438:	fa01 f202 	lsl.w	r2, r1, r2
 801443c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	683a      	ldr	r2, [r7, #0]
 8014444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	2b10      	cmp	r3, #16
 801444c:	d108      	bne.n	8014460 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	68ba      	ldr	r2, [r7, #8]
 801445c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 801445e:	e007      	b.n	8014470 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	68ba      	ldr	r2, [r7, #8]
 8014466:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	60da      	str	r2, [r3, #12]
}
 8014470:	bf00      	nop
 8014472:	3714      	adds	r7, #20
 8014474:	46bd      	mov	sp, r7
 8014476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447a:	4770      	bx	lr

0801447c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801447c:	b480      	push	{r7}
 801447e:	b085      	sub	sp, #20
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	461a      	mov	r2, r3
 801448a:	4b17      	ldr	r3, [pc, #92]	; (80144e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801448c:	429a      	cmp	r2, r3
 801448e:	d80a      	bhi.n	80144a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014494:	089b      	lsrs	r3, r3, #2
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801449c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80144a0:	687a      	ldr	r2, [r7, #4]
 80144a2:	6513      	str	r3, [r2, #80]	; 0x50
 80144a4:	e007      	b.n	80144b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144aa:	089b      	lsrs	r3, r3, #2
 80144ac:	009a      	lsls	r2, r3, #2
 80144ae:	4b0f      	ldr	r3, [pc, #60]	; (80144ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80144b0:	4413      	add	r3, r2
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	3b08      	subs	r3, #8
 80144be:	4a0c      	ldr	r2, [pc, #48]	; (80144f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80144c0:	fba2 2303 	umull	r2, r3, r2, r3
 80144c4:	091b      	lsrs	r3, r3, #4
 80144c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	4a0a      	ldr	r2, [pc, #40]	; (80144f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80144cc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	f003 031f 	and.w	r3, r3, #31
 80144d4:	2201      	movs	r2, #1
 80144d6:	409a      	lsls	r2, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	659a      	str	r2, [r3, #88]	; 0x58
}
 80144dc:	bf00      	nop
 80144de:	3714      	adds	r7, #20
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr
 80144e8:	40020407 	.word	0x40020407
 80144ec:	40020820 	.word	0x40020820
 80144f0:	cccccccd 	.word	0xcccccccd
 80144f4:	40020880 	.word	0x40020880

080144f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	685b      	ldr	r3, [r3, #4]
 8014504:	b2db      	uxtb	r3, r3
 8014506:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	4b0b      	ldr	r3, [pc, #44]	; (8014538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801450c:	4413      	add	r3, r2
 801450e:	009b      	lsls	r3, r3, #2
 8014510:	461a      	mov	r2, r3
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	4a08      	ldr	r2, [pc, #32]	; (801453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801451a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	3b01      	subs	r3, #1
 8014520:	f003 0303 	and.w	r3, r3, #3
 8014524:	2201      	movs	r2, #1
 8014526:	409a      	lsls	r2, r3
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	665a      	str	r2, [r3, #100]	; 0x64
}
 801452c:	bf00      	nop
 801452e:	3714      	adds	r7, #20
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr
 8014538:	1000823f 	.word	0x1000823f
 801453c:	40020940 	.word	0x40020940

08014540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014540:	b480      	push	{r7}
 8014542:	b087      	sub	sp, #28
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 801454a:	2300      	movs	r3, #0
 801454c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801454e:	e158      	b.n	8014802 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	2101      	movs	r1, #1
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	fa01 f303 	lsl.w	r3, r1, r3
 801455c:	4013      	ands	r3, r2
 801455e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	2b00      	cmp	r3, #0
 8014564:	f000 814a 	beq.w	80147fc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	f003 0303 	and.w	r3, r3, #3
 8014570:	2b01      	cmp	r3, #1
 8014572:	d005      	beq.n	8014580 <HAL_GPIO_Init+0x40>
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	f003 0303 	and.w	r3, r3, #3
 801457c:	2b02      	cmp	r3, #2
 801457e:	d130      	bne.n	80145e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	689b      	ldr	r3, [r3, #8]
 8014584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	2203      	movs	r2, #3
 801458c:	fa02 f303 	lsl.w	r3, r2, r3
 8014590:	43db      	mvns	r3, r3
 8014592:	693a      	ldr	r2, [r7, #16]
 8014594:	4013      	ands	r3, r2
 8014596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	68da      	ldr	r2, [r3, #12]
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	005b      	lsls	r3, r3, #1
 80145a0:	fa02 f303 	lsl.w	r3, r2, r3
 80145a4:	693a      	ldr	r2, [r7, #16]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	693a      	ldr	r2, [r7, #16]
 80145ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80145b6:	2201      	movs	r2, #1
 80145b8:	697b      	ldr	r3, [r7, #20]
 80145ba:	fa02 f303 	lsl.w	r3, r2, r3
 80145be:	43db      	mvns	r3, r3
 80145c0:	693a      	ldr	r2, [r7, #16]
 80145c2:	4013      	ands	r3, r2
 80145c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	091b      	lsrs	r3, r3, #4
 80145cc:	f003 0201 	and.w	r2, r3, #1
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	fa02 f303 	lsl.w	r3, r2, r3
 80145d6:	693a      	ldr	r2, [r7, #16]
 80145d8:	4313      	orrs	r3, r2
 80145da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	693a      	ldr	r2, [r7, #16]
 80145e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	f003 0303 	and.w	r3, r3, #3
 80145ea:	2b03      	cmp	r3, #3
 80145ec:	d017      	beq.n	801461e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	68db      	ldr	r3, [r3, #12]
 80145f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	2203      	movs	r2, #3
 80145fa:	fa02 f303 	lsl.w	r3, r2, r3
 80145fe:	43db      	mvns	r3, r3
 8014600:	693a      	ldr	r2, [r7, #16]
 8014602:	4013      	ands	r3, r2
 8014604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014606:	683b      	ldr	r3, [r7, #0]
 8014608:	689a      	ldr	r2, [r3, #8]
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	005b      	lsls	r3, r3, #1
 801460e:	fa02 f303 	lsl.w	r3, r2, r3
 8014612:	693a      	ldr	r2, [r7, #16]
 8014614:	4313      	orrs	r3, r2
 8014616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	693a      	ldr	r2, [r7, #16]
 801461c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	f003 0303 	and.w	r3, r3, #3
 8014626:	2b02      	cmp	r3, #2
 8014628:	d123      	bne.n	8014672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	08da      	lsrs	r2, r3, #3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	3208      	adds	r2, #8
 8014632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014636:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8014638:	697b      	ldr	r3, [r7, #20]
 801463a:	f003 0307 	and.w	r3, r3, #7
 801463e:	009b      	lsls	r3, r3, #2
 8014640:	220f      	movs	r2, #15
 8014642:	fa02 f303 	lsl.w	r3, r2, r3
 8014646:	43db      	mvns	r3, r3
 8014648:	693a      	ldr	r2, [r7, #16]
 801464a:	4013      	ands	r3, r2
 801464c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	691a      	ldr	r2, [r3, #16]
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	f003 0307 	and.w	r3, r3, #7
 8014658:	009b      	lsls	r3, r3, #2
 801465a:	fa02 f303 	lsl.w	r3, r2, r3
 801465e:	693a      	ldr	r2, [r7, #16]
 8014660:	4313      	orrs	r3, r2
 8014662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	08da      	lsrs	r2, r3, #3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	3208      	adds	r2, #8
 801466c:	6939      	ldr	r1, [r7, #16]
 801466e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	2203      	movs	r2, #3
 801467e:	fa02 f303 	lsl.w	r3, r2, r3
 8014682:	43db      	mvns	r3, r3
 8014684:	693a      	ldr	r2, [r7, #16]
 8014686:	4013      	ands	r3, r2
 8014688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	685b      	ldr	r3, [r3, #4]
 801468e:	f003 0203 	and.w	r2, r3, #3
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	fa02 f303 	lsl.w	r3, r2, r3
 801469a:	693a      	ldr	r2, [r7, #16]
 801469c:	4313      	orrs	r3, r2
 801469e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	693a      	ldr	r2, [r7, #16]
 80146a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	f000 80a4 	beq.w	80147fc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80146b4:	4a5a      	ldr	r2, [pc, #360]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	089b      	lsrs	r3, r3, #2
 80146ba:	3318      	adds	r3, #24
 80146bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146c0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	f003 0303 	and.w	r3, r3, #3
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	220f      	movs	r2, #15
 80146cc:	fa02 f303 	lsl.w	r3, r2, r3
 80146d0:	43db      	mvns	r3, r3
 80146d2:	693a      	ldr	r2, [r7, #16]
 80146d4:	4013      	ands	r3, r2
 80146d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	4a52      	ldr	r2, [pc, #328]	; (8014824 <HAL_GPIO_Init+0x2e4>)
 80146dc:	4293      	cmp	r3, r2
 80146de:	d025      	beq.n	801472c <HAL_GPIO_Init+0x1ec>
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	4a51      	ldr	r2, [pc, #324]	; (8014828 <HAL_GPIO_Init+0x2e8>)
 80146e4:	4293      	cmp	r3, r2
 80146e6:	d01f      	beq.n	8014728 <HAL_GPIO_Init+0x1e8>
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	4a50      	ldr	r2, [pc, #320]	; (801482c <HAL_GPIO_Init+0x2ec>)
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d019      	beq.n	8014724 <HAL_GPIO_Init+0x1e4>
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	4a4f      	ldr	r2, [pc, #316]	; (8014830 <HAL_GPIO_Init+0x2f0>)
 80146f4:	4293      	cmp	r3, r2
 80146f6:	d013      	beq.n	8014720 <HAL_GPIO_Init+0x1e0>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	4a4e      	ldr	r2, [pc, #312]	; (8014834 <HAL_GPIO_Init+0x2f4>)
 80146fc:	4293      	cmp	r3, r2
 80146fe:	d00d      	beq.n	801471c <HAL_GPIO_Init+0x1dc>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4a4d      	ldr	r2, [pc, #308]	; (8014838 <HAL_GPIO_Init+0x2f8>)
 8014704:	4293      	cmp	r3, r2
 8014706:	d007      	beq.n	8014718 <HAL_GPIO_Init+0x1d8>
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	4a4c      	ldr	r2, [pc, #304]	; (801483c <HAL_GPIO_Init+0x2fc>)
 801470c:	4293      	cmp	r3, r2
 801470e:	d101      	bne.n	8014714 <HAL_GPIO_Init+0x1d4>
 8014710:	2306      	movs	r3, #6
 8014712:	e00c      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 8014714:	2307      	movs	r3, #7
 8014716:	e00a      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 8014718:	2305      	movs	r3, #5
 801471a:	e008      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 801471c:	2304      	movs	r3, #4
 801471e:	e006      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 8014720:	2303      	movs	r3, #3
 8014722:	e004      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 8014724:	2302      	movs	r3, #2
 8014726:	e002      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 8014728:	2301      	movs	r3, #1
 801472a:	e000      	b.n	801472e <HAL_GPIO_Init+0x1ee>
 801472c:	2300      	movs	r3, #0
 801472e:	697a      	ldr	r2, [r7, #20]
 8014730:	f002 0203 	and.w	r2, r2, #3
 8014734:	00d2      	lsls	r2, r2, #3
 8014736:	4093      	lsls	r3, r2
 8014738:	693a      	ldr	r2, [r7, #16]
 801473a:	4313      	orrs	r3, r2
 801473c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 801473e:	4938      	ldr	r1, [pc, #224]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	089b      	lsrs	r3, r3, #2
 8014744:	3318      	adds	r3, #24
 8014746:	693a      	ldr	r2, [r7, #16]
 8014748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801474c:	4b34      	ldr	r3, [pc, #208]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	43db      	mvns	r3, r3
 8014756:	693a      	ldr	r2, [r7, #16]
 8014758:	4013      	ands	r3, r2
 801475a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014764:	2b00      	cmp	r3, #0
 8014766:	d003      	beq.n	8014770 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8014768:	693a      	ldr	r2, [r7, #16]
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	4313      	orrs	r3, r2
 801476e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8014770:	4a2b      	ldr	r2, [pc, #172]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8014776:	4b2a      	ldr	r3, [pc, #168]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	43db      	mvns	r3, r3
 8014780:	693a      	ldr	r2, [r7, #16]
 8014782:	4013      	ands	r3, r2
 8014784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801478e:	2b00      	cmp	r3, #0
 8014790:	d003      	beq.n	801479a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	4313      	orrs	r3, r2
 8014798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801479a:	4a21      	ldr	r2, [pc, #132]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80147a0:	4b1f      	ldr	r3, [pc, #124]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 80147a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80147a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	43db      	mvns	r3, r3
 80147ac:	693a      	ldr	r2, [r7, #16]
 80147ae:	4013      	ands	r3, r2
 80147b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d003      	beq.n	80147c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80147be:	693a      	ldr	r2, [r7, #16]
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	4313      	orrs	r3, r2
 80147c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80147c6:	4a16      	ldr	r2, [pc, #88]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80147ce:	4b14      	ldr	r3, [pc, #80]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 80147d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	43db      	mvns	r3, r3
 80147da:	693a      	ldr	r2, [r7, #16]
 80147dc:	4013      	ands	r3, r2
 80147de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d003      	beq.n	80147f4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80147ec:	693a      	ldr	r2, [r7, #16]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	4313      	orrs	r3, r2
 80147f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80147f4:	4a0a      	ldr	r2, [pc, #40]	; (8014820 <HAL_GPIO_Init+0x2e0>)
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	3301      	adds	r3, #1
 8014800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	fa22 f303 	lsr.w	r3, r2, r3
 801480c:	2b00      	cmp	r3, #0
 801480e:	f47f ae9f 	bne.w	8014550 <HAL_GPIO_Init+0x10>
  }
}
 8014812:	bf00      	nop
 8014814:	bf00      	nop
 8014816:	371c      	adds	r7, #28
 8014818:	46bd      	mov	sp, r7
 801481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481e:	4770      	bx	lr
 8014820:	4002f400 	.word	0x4002f400
 8014824:	42020000 	.word	0x42020000
 8014828:	42020400 	.word	0x42020400
 801482c:	42020800 	.word	0x42020800
 8014830:	42020c00 	.word	0x42020c00
 8014834:	42021000 	.word	0x42021000
 8014838:	42021400 	.word	0x42021400
 801483c:	42021800 	.word	0x42021800

08014840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014840:	b480      	push	{r7}
 8014842:	b083      	sub	sp, #12
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	460b      	mov	r3, r1
 801484a:	807b      	strh	r3, [r7, #2]
 801484c:	4613      	mov	r3, r2
 801484e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014850:	787b      	ldrb	r3, [r7, #1]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d003      	beq.n	801485e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8014856:	887a      	ldrh	r2, [r7, #2]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801485c:	e002      	b.n	8014864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801485e:	887a      	ldrh	r2, [r7, #2]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014864:	bf00      	nop
 8014866:	370c      	adds	r7, #12
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8014870:	b480      	push	{r7}
 8014872:	b085      	sub	sp, #20
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	460b      	mov	r3, r1
 801487a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	695b      	ldr	r3, [r3, #20]
 8014880:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8014882:	887a      	ldrh	r2, [r7, #2]
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	4013      	ands	r3, r2
 8014888:	041a      	lsls	r2, r3, #16
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	43d9      	mvns	r1, r3
 801488e:	887b      	ldrh	r3, [r7, #2]
 8014890:	400b      	ands	r3, r1
 8014892:	431a      	orrs	r2, r3
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	619a      	str	r2, [r3, #24]
}
 8014898:	bf00      	nop
 801489a:	3714      	adds	r7, #20
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr

080148a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d101      	bne.n	80148b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80148b2:	2301      	movs	r3, #1
 80148b4:	e081      	b.n	80149ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d106      	bne.n	80148d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2200      	movs	r2, #0
 80148c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7fc fe92 	bl	80115f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2224      	movs	r2, #36	; 0x24
 80148d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f022 0201 	bic.w	r2, r2, #1
 80148e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	685a      	ldr	r2, [r3, #4]
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80148f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	689a      	ldr	r2, [r3, #8]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014904:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	68db      	ldr	r3, [r3, #12]
 801490a:	2b01      	cmp	r3, #1
 801490c:	d107      	bne.n	801491e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	689a      	ldr	r2, [r3, #8]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801491a:	609a      	str	r2, [r3, #8]
 801491c:	e006      	b.n	801492c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	689a      	ldr	r2, [r3, #8]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801492a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	68db      	ldr	r3, [r3, #12]
 8014930:	2b02      	cmp	r3, #2
 8014932:	d104      	bne.n	801493e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801493c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	6812      	ldr	r2, [r2, #0]
 8014948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801494c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014950:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	68da      	ldr	r2, [r3, #12]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014960:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	691a      	ldr	r2, [r3, #16]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	695b      	ldr	r3, [r3, #20]
 801496a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	699b      	ldr	r3, [r3, #24]
 8014972:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	430a      	orrs	r2, r1
 801497a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	69d9      	ldr	r1, [r3, #28]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6a1a      	ldr	r2, [r3, #32]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	430a      	orrs	r2, r1
 801498a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	f042 0201 	orr.w	r2, r2, #1
 801499a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2200      	movs	r2, #0
 80149a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2220      	movs	r2, #32
 80149a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2200      	movs	r2, #0
 80149ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2200      	movs	r2, #0
 80149b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80149b8:	2300      	movs	r3, #0
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
	...

080149c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b088      	sub	sp, #32
 80149c8:	af02      	add	r7, sp, #8
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	607a      	str	r2, [r7, #4]
 80149ce:	461a      	mov	r2, r3
 80149d0:	460b      	mov	r3, r1
 80149d2:	817b      	strh	r3, [r7, #10]
 80149d4:	4613      	mov	r3, r2
 80149d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80149de:	b2db      	uxtb	r3, r3
 80149e0:	2b20      	cmp	r3, #32
 80149e2:	f040 80da 	bne.w	8014b9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d101      	bne.n	80149f4 <HAL_I2C_Master_Transmit+0x30>
 80149f0:	2302      	movs	r3, #2
 80149f2:	e0d3      	b.n	8014b9c <HAL_I2C_Master_Transmit+0x1d8>
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	2201      	movs	r2, #1
 80149f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80149fc:	f7fd fcc4 	bl	8012388 <HAL_GetTick>
 8014a00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	2319      	movs	r3, #25
 8014a08:	2201      	movs	r2, #1
 8014a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014a0e:	68f8      	ldr	r0, [r7, #12]
 8014a10:	f000 f9e6 	bl	8014de0 <I2C_WaitOnFlagUntilTimeout>
 8014a14:	4603      	mov	r3, r0
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d001      	beq.n	8014a1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	e0be      	b.n	8014b9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2221      	movs	r2, #33	; 0x21
 8014a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	2210      	movs	r2, #16
 8014a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2200      	movs	r2, #0
 8014a32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	893a      	ldrh	r2, [r7, #8]
 8014a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2200      	movs	r2, #0
 8014a44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	2bff      	cmp	r3, #255	; 0xff
 8014a4e:	d90e      	bls.n	8014a6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	22ff      	movs	r2, #255	; 0xff
 8014a54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a5a:	b2da      	uxtb	r2, r3
 8014a5c:	8979      	ldrh	r1, [r7, #10]
 8014a5e:	4b51      	ldr	r3, [pc, #324]	; (8014ba4 <HAL_I2C_Master_Transmit+0x1e0>)
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014a66:	68f8      	ldr	r0, [r7, #12]
 8014a68:	f000 fbf6 	bl	8015258 <I2C_TransferConfig>
 8014a6c:	e06c      	b.n	8014b48 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a7c:	b2da      	uxtb	r2, r3
 8014a7e:	8979      	ldrh	r1, [r7, #10]
 8014a80:	4b48      	ldr	r3, [pc, #288]	; (8014ba4 <HAL_I2C_Master_Transmit+0x1e0>)
 8014a82:	9300      	str	r3, [sp, #0]
 8014a84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f000 fbe5 	bl	8015258 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8014a8e:	e05b      	b.n	8014b48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014a90:	697a      	ldr	r2, [r7, #20]
 8014a92:	6a39      	ldr	r1, [r7, #32]
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f000 f9f2 	bl	8014e7e <I2C_WaitOnTXISFlagUntilTimeout>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d001      	beq.n	8014aa4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8014aa0:	2301      	movs	r3, #1
 8014aa2:	e07b      	b.n	8014b9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa8:	781a      	ldrb	r2, [r3, #0]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ab4:	1c5a      	adds	r2, r3, #1
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014abe:	b29b      	uxth	r3, r3
 8014ac0:	3b01      	subs	r3, #1
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014acc:	3b01      	subs	r3, #1
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d034      	beq.n	8014b48 <HAL_I2C_Master_Transmit+0x184>
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d130      	bne.n	8014b48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	6a3b      	ldr	r3, [r7, #32]
 8014aec:	2200      	movs	r2, #0
 8014aee:	2180      	movs	r1, #128	; 0x80
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f000 f975 	bl	8014de0 <I2C_WaitOnFlagUntilTimeout>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d001      	beq.n	8014b00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8014afc:	2301      	movs	r3, #1
 8014afe:	e04d      	b.n	8014b9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	2bff      	cmp	r3, #255	; 0xff
 8014b08:	d90e      	bls.n	8014b28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	22ff      	movs	r2, #255	; 0xff
 8014b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b14:	b2da      	uxtb	r2, r3
 8014b16:	8979      	ldrh	r1, [r7, #10]
 8014b18:	2300      	movs	r3, #0
 8014b1a:	9300      	str	r3, [sp, #0]
 8014b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014b20:	68f8      	ldr	r0, [r7, #12]
 8014b22:	f000 fb99 	bl	8015258 <I2C_TransferConfig>
 8014b26:	e00f      	b.n	8014b48 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b36:	b2da      	uxtb	r2, r3
 8014b38:	8979      	ldrh	r1, [r7, #10]
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	9300      	str	r3, [sp, #0]
 8014b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f000 fb88 	bl	8015258 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d19e      	bne.n	8014a90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014b52:	697a      	ldr	r2, [r7, #20]
 8014b54:	6a39      	ldr	r1, [r7, #32]
 8014b56:	68f8      	ldr	r0, [r7, #12]
 8014b58:	f000 f9d8 	bl	8014f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8014b62:	2301      	movs	r3, #1
 8014b64:	e01a      	b.n	8014b9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2220      	movs	r2, #32
 8014b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	6859      	ldr	r1, [r3, #4]
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	4b0b      	ldr	r3, [pc, #44]	; (8014ba8 <HAL_I2C_Master_Transmit+0x1e4>)
 8014b7a:	400b      	ands	r3, r1
 8014b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2220      	movs	r2, #32
 8014b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2200      	movs	r2, #0
 8014b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014b96:	2300      	movs	r3, #0
 8014b98:	e000      	b.n	8014b9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8014b9a:	2302      	movs	r3, #2
  }
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3718      	adds	r7, #24
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	80002000 	.word	0x80002000
 8014ba8:	fe00e800 	.word	0xfe00e800

08014bac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b088      	sub	sp, #32
 8014bb0:	af02      	add	r7, sp, #8
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	607a      	str	r2, [r7, #4]
 8014bb6:	461a      	mov	r2, r3
 8014bb8:	460b      	mov	r3, r1
 8014bba:	817b      	strh	r3, [r7, #10]
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b20      	cmp	r3, #32
 8014bca:	f040 80db 	bne.w	8014d84 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d101      	bne.n	8014bdc <HAL_I2C_Master_Receive+0x30>
 8014bd8:	2302      	movs	r3, #2
 8014bda:	e0d4      	b.n	8014d86 <HAL_I2C_Master_Receive+0x1da>
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2201      	movs	r2, #1
 8014be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014be4:	f7fd fbd0 	bl	8012388 <HAL_GetTick>
 8014be8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014bea:	697b      	ldr	r3, [r7, #20]
 8014bec:	9300      	str	r3, [sp, #0]
 8014bee:	2319      	movs	r3, #25
 8014bf0:	2201      	movs	r2, #1
 8014bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014bf6:	68f8      	ldr	r0, [r7, #12]
 8014bf8:	f000 f8f2 	bl	8014de0 <I2C_WaitOnFlagUntilTimeout>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d001      	beq.n	8014c06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8014c02:	2301      	movs	r3, #1
 8014c04:	e0bf      	b.n	8014d86 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2222      	movs	r2, #34	; 0x22
 8014c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	2210      	movs	r2, #16
 8014c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2200      	movs	r2, #0
 8014c1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	687a      	ldr	r2, [r7, #4]
 8014c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	893a      	ldrh	r2, [r7, #8]
 8014c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014c32:	b29b      	uxth	r3, r3
 8014c34:	2bff      	cmp	r3, #255	; 0xff
 8014c36:	d90e      	bls.n	8014c56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	22ff      	movs	r2, #255	; 0xff
 8014c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c42:	b2da      	uxtb	r2, r3
 8014c44:	8979      	ldrh	r1, [r7, #10]
 8014c46:	4b52      	ldr	r3, [pc, #328]	; (8014d90 <HAL_I2C_Master_Receive+0x1e4>)
 8014c48:	9300      	str	r3, [sp, #0]
 8014c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014c4e:	68f8      	ldr	r0, [r7, #12]
 8014c50:	f000 fb02 	bl	8015258 <I2C_TransferConfig>
 8014c54:	e06d      	b.n	8014d32 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	8979      	ldrh	r1, [r7, #10]
 8014c68:	4b49      	ldr	r3, [pc, #292]	; (8014d90 <HAL_I2C_Master_Receive+0x1e4>)
 8014c6a:	9300      	str	r3, [sp, #0]
 8014c6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f000 faf1 	bl	8015258 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8014c76:	e05c      	b.n	8014d32 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014c78:	697a      	ldr	r2, [r7, #20]
 8014c7a:	6a39      	ldr	r1, [r7, #32]
 8014c7c:	68f8      	ldr	r0, [r7, #12]
 8014c7e:	f000 f989 	bl	8014f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d001      	beq.n	8014c8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e07c      	b.n	8014d86 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c96:	b2d2      	uxtb	r2, r2
 8014c98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c9e:	1c5a      	adds	r2, r3, #1
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	b29a      	uxth	r2, r3
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d034      	beq.n	8014d32 <HAL_I2C_Master_Receive+0x186>
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d130      	bne.n	8014d32 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	6a3b      	ldr	r3, [r7, #32]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	2180      	movs	r1, #128	; 0x80
 8014cda:	68f8      	ldr	r0, [r7, #12]
 8014cdc:	f000 f880 	bl	8014de0 <I2C_WaitOnFlagUntilTimeout>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d001      	beq.n	8014cea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	e04d      	b.n	8014d86 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	2bff      	cmp	r3, #255	; 0xff
 8014cf2:	d90e      	bls.n	8014d12 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	22ff      	movs	r2, #255	; 0xff
 8014cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014cfe:	b2da      	uxtb	r2, r3
 8014d00:	8979      	ldrh	r1, [r7, #10]
 8014d02:	2300      	movs	r3, #0
 8014d04:	9300      	str	r3, [sp, #0]
 8014d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8014d0a:	68f8      	ldr	r0, [r7, #12]
 8014d0c:	f000 faa4 	bl	8015258 <I2C_TransferConfig>
 8014d10:	e00f      	b.n	8014d32 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014d16:	b29a      	uxth	r2, r3
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d20:	b2da      	uxtb	r2, r3
 8014d22:	8979      	ldrh	r1, [r7, #10]
 8014d24:	2300      	movs	r3, #0
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014d2c:	68f8      	ldr	r0, [r7, #12]
 8014d2e:	f000 fa93 	bl	8015258 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d19d      	bne.n	8014c78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014d3c:	697a      	ldr	r2, [r7, #20]
 8014d3e:	6a39      	ldr	r1, [r7, #32]
 8014d40:	68f8      	ldr	r0, [r7, #12]
 8014d42:	f000 f8e3 	bl	8014f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8014d46:	4603      	mov	r3, r0
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d001      	beq.n	8014d50 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	e01a      	b.n	8014d86 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	2220      	movs	r2, #32
 8014d56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	6859      	ldr	r1, [r3, #4]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	4b0c      	ldr	r3, [pc, #48]	; (8014d94 <HAL_I2C_Master_Receive+0x1e8>)
 8014d64:	400b      	ands	r3, r1
 8014d66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2220      	movs	r2, #32
 8014d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	2200      	movs	r2, #0
 8014d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	e000      	b.n	8014d86 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8014d84:	2302      	movs	r3, #2
  }
}
 8014d86:	4618      	mov	r0, r3
 8014d88:	3718      	adds	r7, #24
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	bd80      	pop	{r7, pc}
 8014d8e:	bf00      	nop
 8014d90:	80002400 	.word	0x80002400
 8014d94:	fe00e800 	.word	0xfe00e800

08014d98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b083      	sub	sp, #12
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	699b      	ldr	r3, [r3, #24]
 8014da6:	f003 0302 	and.w	r3, r3, #2
 8014daa:	2b02      	cmp	r3, #2
 8014dac:	d103      	bne.n	8014db6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	2200      	movs	r2, #0
 8014db4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	699b      	ldr	r3, [r3, #24]
 8014dbc:	f003 0301 	and.w	r3, r3, #1
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d007      	beq.n	8014dd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	699a      	ldr	r2, [r3, #24]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	f042 0201 	orr.w	r2, r2, #1
 8014dd2:	619a      	str	r2, [r3, #24]
  }
}
 8014dd4:	bf00      	nop
 8014dd6:	370c      	adds	r7, #12
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dde:	4770      	bx	lr

08014de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b084      	sub	sp, #16
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	60f8      	str	r0, [r7, #12]
 8014de8:	60b9      	str	r1, [r7, #8]
 8014dea:	603b      	str	r3, [r7, #0]
 8014dec:	4613      	mov	r3, r2
 8014dee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014df0:	e031      	b.n	8014e56 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df8:	d02d      	beq.n	8014e56 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014dfa:	f7fd fac5 	bl	8012388 <HAL_GetTick>
 8014dfe:	4602      	mov	r2, r0
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	683a      	ldr	r2, [r7, #0]
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d302      	bcc.n	8014e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d122      	bne.n	8014e56 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	699a      	ldr	r2, [r3, #24]
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	4013      	ands	r3, r2
 8014e1a:	68ba      	ldr	r2, [r7, #8]
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	bf0c      	ite	eq
 8014e20:	2301      	moveq	r3, #1
 8014e22:	2300      	movne	r3, #0
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	461a      	mov	r2, r3
 8014e28:	79fb      	ldrb	r3, [r7, #7]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d113      	bne.n	8014e56 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e32:	f043 0220 	orr.w	r2, r3, #32
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	2220      	movs	r2, #32
 8014e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2200      	movs	r2, #0
 8014e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8014e52:	2301      	movs	r3, #1
 8014e54:	e00f      	b.n	8014e76 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	699a      	ldr	r2, [r3, #24]
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	4013      	ands	r3, r2
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	429a      	cmp	r2, r3
 8014e64:	bf0c      	ite	eq
 8014e66:	2301      	moveq	r3, #1
 8014e68:	2300      	movne	r3, #0
 8014e6a:	b2db      	uxtb	r3, r3
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	79fb      	ldrb	r3, [r7, #7]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d0be      	beq.n	8014df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}

08014e7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014e7e:	b580      	push	{r7, lr}
 8014e80:	b084      	sub	sp, #16
 8014e82:	af00      	add	r7, sp, #0
 8014e84:	60f8      	str	r0, [r7, #12]
 8014e86:	60b9      	str	r1, [r7, #8]
 8014e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014e8a:	e033      	b.n	8014ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	68b9      	ldr	r1, [r7, #8]
 8014e90:	68f8      	ldr	r0, [r7, #12]
 8014e92:	f000 f901 	bl	8015098 <I2C_IsErrorOccurred>
 8014e96:	4603      	mov	r3, r0
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d001      	beq.n	8014ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e031      	b.n	8014f04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ea6:	d025      	beq.n	8014ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ea8:	f7fd fa6e 	bl	8012388 <HAL_GetTick>
 8014eac:	4602      	mov	r2, r0
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	1ad3      	subs	r3, r2, r3
 8014eb2:	68ba      	ldr	r2, [r7, #8]
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d302      	bcc.n	8014ebe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d11a      	bne.n	8014ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	699b      	ldr	r3, [r3, #24]
 8014ec4:	f003 0302 	and.w	r3, r3, #2
 8014ec8:	2b02      	cmp	r3, #2
 8014eca:	d013      	beq.n	8014ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ed0:	f043 0220 	orr.w	r2, r3, #32
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	2220      	movs	r2, #32
 8014edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2200      	movs	r2, #0
 8014eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	e007      	b.n	8014f04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	699b      	ldr	r3, [r3, #24]
 8014efa:	f003 0302 	and.w	r3, r3, #2
 8014efe:	2b02      	cmp	r3, #2
 8014f00:	d1c4      	bne.n	8014e8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014f02:	2300      	movs	r3, #0
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3710      	adds	r7, #16
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014f18:	e02f      	b.n	8014f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	68b9      	ldr	r1, [r7, #8]
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	f000 f8ba 	bl	8015098 <I2C_IsErrorOccurred>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e02d      	b.n	8014f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014f2e:	f7fd fa2b 	bl	8012388 <HAL_GetTick>
 8014f32:	4602      	mov	r2, r0
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	1ad3      	subs	r3, r2, r3
 8014f38:	68ba      	ldr	r2, [r7, #8]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d302      	bcc.n	8014f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d11a      	bne.n	8014f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	699b      	ldr	r3, [r3, #24]
 8014f4a:	f003 0320 	and.w	r3, r3, #32
 8014f4e:	2b20      	cmp	r3, #32
 8014f50:	d013      	beq.n	8014f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f56:	f043 0220 	orr.w	r2, r3, #32
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2220      	movs	r2, #32
 8014f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2200      	movs	r2, #0
 8014f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8014f76:	2301      	movs	r3, #1
 8014f78:	e007      	b.n	8014f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	699b      	ldr	r3, [r3, #24]
 8014f80:	f003 0320 	and.w	r3, r3, #32
 8014f84:	2b20      	cmp	r3, #32
 8014f86:	d1c8      	bne.n	8014f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014f88:	2300      	movs	r3, #0
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3710      	adds	r7, #16
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
	...

08014f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b084      	sub	sp, #16
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	60b9      	str	r1, [r7, #8]
 8014f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014fa0:	e06b      	b.n	801507a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	68b9      	ldr	r1, [r7, #8]
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f000 f876 	bl	8015098 <I2C_IsErrorOccurred>
 8014fac:	4603      	mov	r3, r0
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d001      	beq.n	8014fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	e069      	b.n	801508a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	699b      	ldr	r3, [r3, #24]
 8014fbc:	f003 0320 	and.w	r3, r3, #32
 8014fc0:	2b20      	cmp	r3, #32
 8014fc2:	d138      	bne.n	8015036 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	699b      	ldr	r3, [r3, #24]
 8014fca:	f003 0304 	and.w	r3, r3, #4
 8014fce:	2b04      	cmp	r3, #4
 8014fd0:	d105      	bne.n	8014fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d001      	beq.n	8014fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	e055      	b.n	801508a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	699b      	ldr	r3, [r3, #24]
 8014fe4:	f003 0310 	and.w	r3, r3, #16
 8014fe8:	2b10      	cmp	r3, #16
 8014fea:	d107      	bne.n	8014ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2210      	movs	r2, #16
 8014ff2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	2204      	movs	r2, #4
 8014ff8:	645a      	str	r2, [r3, #68]	; 0x44
 8014ffa:	e002      	b.n	8015002 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	2200      	movs	r2, #0
 8015000:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	2220      	movs	r2, #32
 8015008:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	6859      	ldr	r1, [r3, #4]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	4b1f      	ldr	r3, [pc, #124]	; (8015094 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8015016:	400b      	ands	r3, r1
 8015018:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2220      	movs	r2, #32
 801501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2200      	movs	r2, #0
 8015026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2200      	movs	r2, #0
 801502e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8015032:	2301      	movs	r3, #1
 8015034:	e029      	b.n	801508a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015036:	f7fd f9a7 	bl	8012388 <HAL_GetTick>
 801503a:	4602      	mov	r2, r0
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	429a      	cmp	r2, r3
 8015044:	d302      	bcc.n	801504c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d116      	bne.n	801507a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	699b      	ldr	r3, [r3, #24]
 8015052:	f003 0304 	and.w	r3, r3, #4
 8015056:	2b04      	cmp	r3, #4
 8015058:	d00f      	beq.n	801507a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801505e:	f043 0220 	orr.w	r2, r3, #32
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2220      	movs	r2, #32
 801506a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2200      	movs	r2, #0
 8015072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8015076:	2301      	movs	r3, #1
 8015078:	e007      	b.n	801508a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	699b      	ldr	r3, [r3, #24]
 8015080:	f003 0304 	and.w	r3, r3, #4
 8015084:	2b04      	cmp	r3, #4
 8015086:	d18c      	bne.n	8014fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015088:	2300      	movs	r3, #0
}
 801508a:	4618      	mov	r0, r3
 801508c:	3710      	adds	r7, #16
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}
 8015092:	bf00      	nop
 8015094:	fe00e800 	.word	0xfe00e800

08015098 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b08a      	sub	sp, #40	; 0x28
 801509c:	af00      	add	r7, sp, #0
 801509e:	60f8      	str	r0, [r7, #12]
 80150a0:	60b9      	str	r1, [r7, #8]
 80150a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80150a4:	2300      	movs	r3, #0
 80150a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	699b      	ldr	r3, [r3, #24]
 80150b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80150b2:	2300      	movs	r3, #0
 80150b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80150ba:	69bb      	ldr	r3, [r7, #24]
 80150bc:	f003 0310 	and.w	r3, r3, #16
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d068      	beq.n	8015196 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2210      	movs	r2, #16
 80150ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80150cc:	e049      	b.n	8015162 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150d4:	d045      	beq.n	8015162 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80150d6:	f7fd f957 	bl	8012388 <HAL_GetTick>
 80150da:	4602      	mov	r2, r0
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	68ba      	ldr	r2, [r7, #8]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d302      	bcc.n	80150ec <I2C_IsErrorOccurred+0x54>
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d13a      	bne.n	8015162 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80150f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80150fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	699b      	ldr	r3, [r3, #24]
 8015106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801510e:	d121      	bne.n	8015154 <I2C_IsErrorOccurred+0xbc>
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015116:	d01d      	beq.n	8015154 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8015118:	7cfb      	ldrb	r3, [r7, #19]
 801511a:	2b20      	cmp	r3, #32
 801511c:	d01a      	beq.n	8015154 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	685a      	ldr	r2, [r3, #4]
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801512c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801512e:	f7fd f92b 	bl	8012388 <HAL_GetTick>
 8015132:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015134:	e00e      	b.n	8015154 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8015136:	f7fd f927 	bl	8012388 <HAL_GetTick>
 801513a:	4602      	mov	r2, r0
 801513c:	69fb      	ldr	r3, [r7, #28]
 801513e:	1ad3      	subs	r3, r2, r3
 8015140:	2b19      	cmp	r3, #25
 8015142:	d907      	bls.n	8015154 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8015144:	6a3b      	ldr	r3, [r7, #32]
 8015146:	f043 0320 	orr.w	r3, r3, #32
 801514a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801514c:	2301      	movs	r3, #1
 801514e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8015152:	e006      	b.n	8015162 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	699b      	ldr	r3, [r3, #24]
 801515a:	f003 0320 	and.w	r3, r3, #32
 801515e:	2b20      	cmp	r3, #32
 8015160:	d1e9      	bne.n	8015136 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	699b      	ldr	r3, [r3, #24]
 8015168:	f003 0320 	and.w	r3, r3, #32
 801516c:	2b20      	cmp	r3, #32
 801516e:	d003      	beq.n	8015178 <I2C_IsErrorOccurred+0xe0>
 8015170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015174:	2b00      	cmp	r3, #0
 8015176:	d0aa      	beq.n	80150ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8015178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801517c:	2b00      	cmp	r3, #0
 801517e:	d103      	bne.n	8015188 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2220      	movs	r2, #32
 8015186:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8015188:	6a3b      	ldr	r3, [r7, #32]
 801518a:	f043 0304 	orr.w	r3, r3, #4
 801518e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8015190:	2301      	movs	r3, #1
 8015192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	699b      	ldr	r3, [r3, #24]
 801519c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d00b      	beq.n	80151c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80151a8:	6a3b      	ldr	r3, [r7, #32]
 80151aa:	f043 0301 	orr.w	r3, r3, #1
 80151ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80151b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80151ba:	2301      	movs	r3, #1
 80151bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80151c0:	69bb      	ldr	r3, [r7, #24]
 80151c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d00b      	beq.n	80151e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	f043 0308 	orr.w	r3, r3, #8
 80151d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80151da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80151dc:	2301      	movs	r3, #1
 80151de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80151e2:	69bb      	ldr	r3, [r7, #24]
 80151e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d00b      	beq.n	8015204 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80151ec:	6a3b      	ldr	r3, [r7, #32]
 80151ee:	f043 0302 	orr.w	r3, r3, #2
 80151f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80151fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80151fe:	2301      	movs	r3, #1
 8015200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8015204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015208:	2b00      	cmp	r3, #0
 801520a:	d01c      	beq.n	8015246 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f7ff fdc3 	bl	8014d98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	6859      	ldr	r1, [r3, #4]
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	4b0d      	ldr	r3, [pc, #52]	; (8015254 <I2C_IsErrorOccurred+0x1bc>)
 801521e:	400b      	ands	r3, r1
 8015220:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015226:	6a3b      	ldr	r3, [r7, #32]
 8015228:	431a      	orrs	r2, r3
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	2220      	movs	r2, #32
 8015232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2200      	movs	r2, #0
 801523a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2200      	movs	r2, #0
 8015242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8015246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801524a:	4618      	mov	r0, r3
 801524c:	3728      	adds	r7, #40	; 0x28
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}
 8015252:	bf00      	nop
 8015254:	fe00e800 	.word	0xfe00e800

08015258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8015258:	b480      	push	{r7}
 801525a:	b087      	sub	sp, #28
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	607b      	str	r3, [r7, #4]
 8015262:	460b      	mov	r3, r1
 8015264:	817b      	strh	r3, [r7, #10]
 8015266:	4613      	mov	r3, r2
 8015268:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801526a:	897b      	ldrh	r3, [r7, #10]
 801526c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015270:	7a7b      	ldrb	r3, [r7, #9]
 8015272:	041b      	lsls	r3, r3, #16
 8015274:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015278:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801527e:	6a3b      	ldr	r3, [r7, #32]
 8015280:	4313      	orrs	r3, r2
 8015282:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015286:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	685a      	ldr	r2, [r3, #4]
 801528e:	6a3b      	ldr	r3, [r7, #32]
 8015290:	0d5b      	lsrs	r3, r3, #21
 8015292:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8015296:	4b08      	ldr	r3, [pc, #32]	; (80152b8 <I2C_TransferConfig+0x60>)
 8015298:	430b      	orrs	r3, r1
 801529a:	43db      	mvns	r3, r3
 801529c:	ea02 0103 	and.w	r1, r2, r3
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	697a      	ldr	r2, [r7, #20]
 80152a6:	430a      	orrs	r2, r1
 80152a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80152aa:	bf00      	nop
 80152ac:	371c      	adds	r7, #28
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	03ff63ff 	.word	0x03ff63ff

080152bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80152bc:	b480      	push	{r7}
 80152be:	b083      	sub	sp, #12
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
 80152c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	2b20      	cmp	r3, #32
 80152d0:	d138      	bne.n	8015344 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d101      	bne.n	80152e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80152dc:	2302      	movs	r3, #2
 80152de:	e032      	b.n	8015346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2201      	movs	r2, #1
 80152e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2224      	movs	r2, #36	; 0x24
 80152ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	f022 0201 	bic.w	r2, r2, #1
 80152fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801530e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	6819      	ldr	r1, [r3, #0]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	430a      	orrs	r2, r1
 801531e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	f042 0201 	orr.w	r2, r2, #1
 801532e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	2220      	movs	r2, #32
 8015334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2200      	movs	r2, #0
 801533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015340:	2300      	movs	r3, #0
 8015342:	e000      	b.n	8015346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015344:	2302      	movs	r3, #2
  }
}
 8015346:	4618      	mov	r0, r3
 8015348:	370c      	adds	r7, #12
 801534a:	46bd      	mov	sp, r7
 801534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015350:	4770      	bx	lr

08015352 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8015352:	b480      	push	{r7}
 8015354:	b085      	sub	sp, #20
 8015356:	af00      	add	r7, sp, #0
 8015358:	6078      	str	r0, [r7, #4]
 801535a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b20      	cmp	r3, #32
 8015366:	d139      	bne.n	80153dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801536e:	2b01      	cmp	r3, #1
 8015370:	d101      	bne.n	8015376 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8015372:	2302      	movs	r3, #2
 8015374:	e033      	b.n	80153de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2201      	movs	r2, #1
 801537a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2224      	movs	r2, #36	; 0x24
 8015382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	681a      	ldr	r2, [r3, #0]
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	f022 0201 	bic.w	r2, r2, #1
 8015394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80153a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	021b      	lsls	r3, r3, #8
 80153aa:	68fa      	ldr	r2, [r7, #12]
 80153ac:	4313      	orrs	r3, r2
 80153ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f042 0201 	orr.w	r2, r2, #1
 80153c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2220      	movs	r2, #32
 80153cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80153d8:	2300      	movs	r3, #0
 80153da:	e000      	b.n	80153de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80153dc:	2302      	movs	r3, #2
  }
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3714      	adds	r7, #20
 80153e2:	46bd      	mov	sp, r7
 80153e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e8:	4770      	bx	lr
	...

080153ec <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b085      	sub	sp, #20
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80153f4:	2300      	movs	r3, #0
 80153f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80153f8:	4b0b      	ldr	r3, [pc, #44]	; (8015428 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	f003 0301 	and.w	r3, r3, #1
 8015400:	2b00      	cmp	r3, #0
 8015402:	d002      	beq.n	801540a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8015404:	2301      	movs	r3, #1
 8015406:	73fb      	strb	r3, [r7, #15]
 8015408:	e007      	b.n	801541a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 801540a:	4b07      	ldr	r3, [pc, #28]	; (8015428 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f023 0204 	bic.w	r2, r3, #4
 8015412:	4905      	ldr	r1, [pc, #20]	; (8015428 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	4313      	orrs	r3, r2
 8015418:	600b      	str	r3, [r1, #0]
  }

  return status;
 801541a:	7bfb      	ldrb	r3, [r7, #15]
}
 801541c:	4618      	mov	r0, r3
 801541e:	3714      	adds	r7, #20
 8015420:	46bd      	mov	sp, r7
 8015422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015426:	4770      	bx	lr
 8015428:	40030400 	.word	0x40030400

0801542c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 801542c:	b480      	push	{r7}
 801542e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8015430:	4b05      	ldr	r3, [pc, #20]	; (8015448 <HAL_ICACHE_Enable+0x1c>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4a04      	ldr	r2, [pc, #16]	; (8015448 <HAL_ICACHE_Enable+0x1c>)
 8015436:	f043 0301 	orr.w	r3, r3, #1
 801543a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801543c:	2300      	movs	r3, #0
}
 801543e:	4618      	mov	r0, r3
 8015440:	46bd      	mov	sp, r7
 8015442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015446:	4770      	bx	lr
 8015448:	40030400 	.word	0x40030400

0801544c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801544e:	b08b      	sub	sp, #44	; 0x2c
 8015450:	af06      	add	r7, sp, #24
 8015452:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d101      	bne.n	801545e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801545a:	2301      	movs	r3, #1
 801545c:	e0cb      	b.n	80155f6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8015464:	b2db      	uxtb	r3, r3
 8015466:	2b00      	cmp	r3, #0
 8015468:	d106      	bne.n	8015478 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2200      	movs	r2, #0
 801546e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f7fc fc98 	bl	8011da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2203      	movs	r2, #3
 801547c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	4618      	mov	r0, r3
 8015486:	f007 f9c7 	bl	801c818 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801548a:	2300      	movs	r3, #0
 801548c:	73fb      	strb	r3, [r7, #15]
 801548e:	e040      	b.n	8015512 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8015490:	7bfb      	ldrb	r3, [r7, #15]
 8015492:	6879      	ldr	r1, [r7, #4]
 8015494:	1c5a      	adds	r2, r3, #1
 8015496:	4613      	mov	r3, r2
 8015498:	009b      	lsls	r3, r3, #2
 801549a:	4413      	add	r3, r2
 801549c:	00db      	lsls	r3, r3, #3
 801549e:	440b      	add	r3, r1
 80154a0:	3301      	adds	r3, #1
 80154a2:	2201      	movs	r2, #1
 80154a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80154a6:	7bfb      	ldrb	r3, [r7, #15]
 80154a8:	6879      	ldr	r1, [r7, #4]
 80154aa:	1c5a      	adds	r2, r3, #1
 80154ac:	4613      	mov	r3, r2
 80154ae:	009b      	lsls	r3, r3, #2
 80154b0:	4413      	add	r3, r2
 80154b2:	00db      	lsls	r3, r3, #3
 80154b4:	440b      	add	r3, r1
 80154b6:	7bfa      	ldrb	r2, [r7, #15]
 80154b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80154ba:	7bfb      	ldrb	r3, [r7, #15]
 80154bc:	6879      	ldr	r1, [r7, #4]
 80154be:	1c5a      	adds	r2, r3, #1
 80154c0:	4613      	mov	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4413      	add	r3, r2
 80154c6:	00db      	lsls	r3, r3, #3
 80154c8:	440b      	add	r3, r1
 80154ca:	3303      	adds	r3, #3
 80154cc:	2200      	movs	r2, #0
 80154ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80154d0:	7bfa      	ldrb	r2, [r7, #15]
 80154d2:	6879      	ldr	r1, [r7, #4]
 80154d4:	4613      	mov	r3, r2
 80154d6:	009b      	lsls	r3, r3, #2
 80154d8:	4413      	add	r3, r2
 80154da:	00db      	lsls	r3, r3, #3
 80154dc:	440b      	add	r3, r1
 80154de:	3338      	adds	r3, #56	; 0x38
 80154e0:	2200      	movs	r2, #0
 80154e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80154e4:	7bfa      	ldrb	r2, [r7, #15]
 80154e6:	6879      	ldr	r1, [r7, #4]
 80154e8:	4613      	mov	r3, r2
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	4413      	add	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	440b      	add	r3, r1
 80154f2:	333c      	adds	r3, #60	; 0x3c
 80154f4:	2200      	movs	r2, #0
 80154f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80154f8:	7bfa      	ldrb	r2, [r7, #15]
 80154fa:	6879      	ldr	r1, [r7, #4]
 80154fc:	4613      	mov	r3, r2
 80154fe:	009b      	lsls	r3, r3, #2
 8015500:	4413      	add	r3, r2
 8015502:	00db      	lsls	r3, r3, #3
 8015504:	440b      	add	r3, r1
 8015506:	3340      	adds	r3, #64	; 0x40
 8015508:	2200      	movs	r2, #0
 801550a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801550c:	7bfb      	ldrb	r3, [r7, #15]
 801550e:	3301      	adds	r3, #1
 8015510:	73fb      	strb	r3, [r7, #15]
 8015512:	7bfa      	ldrb	r2, [r7, #15]
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	429a      	cmp	r2, r3
 801551a:	d3b9      	bcc.n	8015490 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801551c:	2300      	movs	r3, #0
 801551e:	73fb      	strb	r3, [r7, #15]
 8015520:	e044      	b.n	80155ac <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015522:	7bfa      	ldrb	r2, [r7, #15]
 8015524:	6879      	ldr	r1, [r7, #4]
 8015526:	4613      	mov	r3, r2
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	4413      	add	r3, r2
 801552c:	00db      	lsls	r3, r3, #3
 801552e:	440b      	add	r3, r1
 8015530:	f203 1369 	addw	r3, r3, #361	; 0x169
 8015534:	2200      	movs	r2, #0
 8015536:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8015538:	7bfa      	ldrb	r2, [r7, #15]
 801553a:	6879      	ldr	r1, [r7, #4]
 801553c:	4613      	mov	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4413      	add	r3, r2
 8015542:	00db      	lsls	r3, r3, #3
 8015544:	440b      	add	r3, r1
 8015546:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801554a:	7bfa      	ldrb	r2, [r7, #15]
 801554c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801554e:	7bfa      	ldrb	r2, [r7, #15]
 8015550:	6879      	ldr	r1, [r7, #4]
 8015552:	4613      	mov	r3, r2
 8015554:	009b      	lsls	r3, r3, #2
 8015556:	4413      	add	r3, r2
 8015558:	00db      	lsls	r3, r3, #3
 801555a:	440b      	add	r3, r1
 801555c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8015560:	2200      	movs	r2, #0
 8015562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8015564:	7bfa      	ldrb	r2, [r7, #15]
 8015566:	6879      	ldr	r1, [r7, #4]
 8015568:	4613      	mov	r3, r2
 801556a:	009b      	lsls	r3, r3, #2
 801556c:	4413      	add	r3, r2
 801556e:	00db      	lsls	r3, r3, #3
 8015570:	440b      	add	r3, r1
 8015572:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8015576:	2200      	movs	r2, #0
 8015578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801557a:	7bfa      	ldrb	r2, [r7, #15]
 801557c:	6879      	ldr	r1, [r7, #4]
 801557e:	4613      	mov	r3, r2
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	4413      	add	r3, r2
 8015584:	00db      	lsls	r3, r3, #3
 8015586:	440b      	add	r3, r1
 8015588:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801558c:	2200      	movs	r2, #0
 801558e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015590:	7bfa      	ldrb	r2, [r7, #15]
 8015592:	6879      	ldr	r1, [r7, #4]
 8015594:	4613      	mov	r3, r2
 8015596:	009b      	lsls	r3, r3, #2
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	440b      	add	r3, r1
 801559e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80155a2:	2200      	movs	r2, #0
 80155a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80155a6:	7bfb      	ldrb	r3, [r7, #15]
 80155a8:	3301      	adds	r3, #1
 80155aa:	73fb      	strb	r3, [r7, #15]
 80155ac:	7bfa      	ldrb	r2, [r7, #15]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d3b5      	bcc.n	8015522 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	603b      	str	r3, [r7, #0]
 80155bc:	687e      	ldr	r6, [r7, #4]
 80155be:	466d      	mov	r5, sp
 80155c0:	f106 0410 	add.w	r4, r6, #16
 80155c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80155c8:	6823      	ldr	r3, [r4, #0]
 80155ca:	602b      	str	r3, [r5, #0]
 80155cc:	1d33      	adds	r3, r6, #4
 80155ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80155d0:	6838      	ldr	r0, [r7, #0]
 80155d2:	f007 f93c 	bl	801c84e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2200      	movs	r2, #0
 80155da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2201      	movs	r2, #1
 80155e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	69db      	ldr	r3, [r3, #28]
 80155ea:	2b01      	cmp	r3, #1
 80155ec:	d102      	bne.n	80155f4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 f805 	bl	80155fe <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3714      	adds	r7, #20
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080155fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80155fe:	b480      	push	{r7}
 8015600:	b085      	sub	sp, #20
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2201      	movs	r2, #1
 8015610:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2200      	movs	r2, #0
 8015618:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8015622:	b29b      	uxth	r3, r3
 8015624:	f043 0301 	orr.w	r3, r3, #1
 8015628:	b29a      	uxth	r2, r3
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8015636:	b29b      	uxth	r3, r3
 8015638:	f043 0302 	orr.w	r3, r3, #2
 801563c:	b29a      	uxth	r2, r3
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	3714      	adds	r7, #20
 801564a:	46bd      	mov	sp, r7
 801564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015650:	4770      	bx	lr
	...

08015654 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015654:	b480      	push	{r7}
 8015656:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015658:	4b05      	ldr	r3, [pc, #20]	; (8015670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	4a04      	ldr	r2, [pc, #16]	; (8015670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801565e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015662:	6013      	str	r3, [r2, #0]
}
 8015664:	bf00      	nop
 8015666:	46bd      	mov	sp, r7
 8015668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	40007000 	.word	0x40007000

08015674 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8015674:	b480      	push	{r7}
 8015676:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8015678:	4b04      	ldr	r3, [pc, #16]	; (801568c <HAL_PWREx_GetVoltageRange+0x18>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8015680:	4618      	mov	r0, r3
 8015682:	46bd      	mov	sp, r7
 8015684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015688:	4770      	bx	lr
 801568a:	bf00      	nop
 801568c:	40007000 	.word	0x40007000

08015690 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8015698:	4b27      	ldr	r3, [pc, #156]	; (8015738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80156a0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80156a2:	f000 f861 	bl	8015768 <HAL_PWREx_SMPS_GetEffectiveMode>
 80156a6:	4603      	mov	r3, r0
 80156a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156ac:	d101      	bne.n	80156b2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80156ae:	2301      	movs	r3, #1
 80156b0:	e03e      	b.n	8015730 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80156b2:	4b21      	ldr	r3, [pc, #132]	; (8015738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80156ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156be:	d101      	bne.n	80156c4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80156c0:	2301      	movs	r3, #1
 80156c2:	e035      	b.n	8015730 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	429a      	cmp	r2, r3
 80156ca:	d101      	bne.n	80156d0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80156cc:	2300      	movs	r3, #0
 80156ce:	e02f      	b.n	8015730 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80156d0:	4b19      	ldr	r3, [pc, #100]	; (8015738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80156d8:	4917      	ldr	r1, [pc, #92]	; (8015738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	4313      	orrs	r3, r2
 80156de:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80156e0:	4b16      	ldr	r3, [pc, #88]	; (801573c <HAL_PWREx_ControlVoltageScaling+0xac>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	095b      	lsrs	r3, r3, #5
 80156e6:	4a16      	ldr	r2, [pc, #88]	; (8015740 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80156e8:	fba2 2303 	umull	r2, r3, r2, r3
 80156ec:	09db      	lsrs	r3, r3, #7
 80156ee:	2232      	movs	r2, #50	; 0x32
 80156f0:	fb02 f303 	mul.w	r3, r2, r3
 80156f4:	4a13      	ldr	r2, [pc, #76]	; (8015744 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80156f6:	fba2 2303 	umull	r2, r3, r2, r3
 80156fa:	08db      	lsrs	r3, r3, #3
 80156fc:	3301      	adds	r3, #1
 80156fe:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015700:	e002      	b.n	8015708 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	3b01      	subs	r3, #1
 8015706:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8015708:	4b0b      	ldr	r3, [pc, #44]	; (8015738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801570a:	695b      	ldr	r3, [r3, #20]
 801570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015714:	d102      	bne.n	801571c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d1f2      	bne.n	8015702 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801571c:	4b06      	ldr	r3, [pc, #24]	; (8015738 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801571e:	695b      	ldr	r3, [r3, #20]
 8015720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015728:	d101      	bne.n	801572e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 801572a:	2303      	movs	r3, #3
 801572c:	e000      	b.n	8015730 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 801572e:	2300      	movs	r3, #0
}
 8015730:	4618      	mov	r0, r3
 8015732:	3710      	adds	r7, #16
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	40007000 	.word	0x40007000
 801573c:	20000090 	.word	0x20000090
 8015740:	0a7c5ac5 	.word	0x0a7c5ac5
 8015744:	cccccccd 	.word	0xcccccccd

08015748 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8015748:	b480      	push	{r7}
 801574a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 801574c:	4b05      	ldr	r3, [pc, #20]	; (8015764 <HAL_PWREx_EnableVddIO2+0x1c>)
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	4a04      	ldr	r2, [pc, #16]	; (8015764 <HAL_PWREx_EnableVddIO2+0x1c>)
 8015752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015756:	6053      	str	r3, [r2, #4]
}
 8015758:	bf00      	nop
 801575a:	46bd      	mov	sp, r7
 801575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015760:	4770      	bx	lr
 8015762:	bf00      	nop
 8015764:	40007000 	.word	0x40007000

08015768 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 801576e:	4b0f      	ldr	r3, [pc, #60]	; (80157ac <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8015770:	691b      	ldr	r3, [r3, #16]
 8015772:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801577a:	2b00      	cmp	r3, #0
 801577c:	d003      	beq.n	8015786 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 801577e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015782:	607b      	str	r3, [r7, #4]
 8015784:	e00a      	b.n	801579c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801578c:	2b00      	cmp	r3, #0
 801578e:	d103      	bne.n	8015798 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8015790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015794:	607b      	str	r3, [r7, #4]
 8015796:	e001      	b.n	801579c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8015798:	2300      	movs	r3, #0
 801579a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 801579c:	687b      	ldr	r3, [r7, #4]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	370c      	adds	r7, #12
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop
 80157ac:	40007000 	.word	0x40007000

080157b0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b088      	sub	sp, #32
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d102      	bne.n	80157c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80157be:	2301      	movs	r3, #1
 80157c0:	f000 bcc2 	b.w	8016148 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80157c4:	4b99      	ldr	r3, [pc, #612]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80157c6:	689b      	ldr	r3, [r3, #8]
 80157c8:	f003 030c 	and.w	r3, r3, #12
 80157cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80157ce:	4b97      	ldr	r3, [pc, #604]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80157d0:	68db      	ldr	r3, [r3, #12]
 80157d2:	f003 0303 	and.w	r3, r3, #3
 80157d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	f003 0310 	and.w	r3, r3, #16
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	f000 80e9 	beq.w	80159b8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80157e6:	69bb      	ldr	r3, [r7, #24]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d006      	beq.n	80157fa <HAL_RCC_OscConfig+0x4a>
 80157ec:	69bb      	ldr	r3, [r7, #24]
 80157ee:	2b0c      	cmp	r3, #12
 80157f0:	f040 8083 	bne.w	80158fa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	2b01      	cmp	r3, #1
 80157f8:	d17f      	bne.n	80158fa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80157fa:	4b8c      	ldr	r3, [pc, #560]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	f003 0302 	and.w	r3, r3, #2
 8015802:	2b00      	cmp	r3, #0
 8015804:	d006      	beq.n	8015814 <HAL_RCC_OscConfig+0x64>
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	69db      	ldr	r3, [r3, #28]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d102      	bne.n	8015814 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801580e:	2301      	movs	r3, #1
 8015810:	f000 bc9a 	b.w	8016148 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015818:	4b84      	ldr	r3, [pc, #528]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	f003 0308 	and.w	r3, r3, #8
 8015820:	2b00      	cmp	r3, #0
 8015822:	d004      	beq.n	801582e <HAL_RCC_OscConfig+0x7e>
 8015824:	4b81      	ldr	r3, [pc, #516]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801582c:	e005      	b.n	801583a <HAL_RCC_OscConfig+0x8a>
 801582e:	4b7f      	ldr	r3, [pc, #508]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015834:	091b      	lsrs	r3, r3, #4
 8015836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801583a:	4293      	cmp	r3, r2
 801583c:	d224      	bcs.n	8015888 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015842:	4618      	mov	r0, r3
 8015844:	f000 fece 	bl	80165e4 <RCC_SetFlashLatencyFromMSIRange>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d002      	beq.n	8015854 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 801584e:	2301      	movs	r3, #1
 8015850:	f000 bc7a 	b.w	8016148 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015854:	4b75      	ldr	r3, [pc, #468]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	4a74      	ldr	r2, [pc, #464]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801585a:	f043 0308 	orr.w	r3, r3, #8
 801585e:	6013      	str	r3, [r2, #0]
 8015860:	4b72      	ldr	r3, [pc, #456]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586c:	496f      	ldr	r1, [pc, #444]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801586e:	4313      	orrs	r3, r2
 8015870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015872:	4b6e      	ldr	r3, [pc, #440]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6a1b      	ldr	r3, [r3, #32]
 801587e:	021b      	lsls	r3, r3, #8
 8015880:	496a      	ldr	r1, [pc, #424]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015882:	4313      	orrs	r3, r2
 8015884:	604b      	str	r3, [r1, #4]
 8015886:	e026      	b.n	80158d6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015888:	4b68      	ldr	r3, [pc, #416]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4a67      	ldr	r2, [pc, #412]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801588e:	f043 0308 	orr.w	r3, r3, #8
 8015892:	6013      	str	r3, [r2, #0]
 8015894:	4b65      	ldr	r3, [pc, #404]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158a0:	4962      	ldr	r1, [pc, #392]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80158a2:	4313      	orrs	r3, r2
 80158a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80158a6:	4b61      	ldr	r3, [pc, #388]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6a1b      	ldr	r3, [r3, #32]
 80158b2:	021b      	lsls	r3, r3, #8
 80158b4:	495d      	ldr	r1, [pc, #372]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80158b6:	4313      	orrs	r3, r2
 80158b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d10a      	bne.n	80158d6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c4:	4618      	mov	r0, r3
 80158c6:	f000 fe8d 	bl	80165e4 <RCC_SetFlashLatencyFromMSIRange>
 80158ca:	4603      	mov	r3, r0
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d002      	beq.n	80158d6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80158d0:	2301      	movs	r3, #1
 80158d2:	f000 bc39 	b.w	8016148 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80158d6:	f000 fe17 	bl	8016508 <HAL_RCC_GetHCLKFreq>
 80158da:	4603      	mov	r3, r0
 80158dc:	4a54      	ldr	r2, [pc, #336]	; (8015a30 <HAL_RCC_OscConfig+0x280>)
 80158de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80158e0:	4b54      	ldr	r3, [pc, #336]	; (8015a34 <HAL_RCC_OscConfig+0x284>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7fc fabf 	bl	8011e68 <HAL_InitTick>
 80158ea:	4603      	mov	r3, r0
 80158ec:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80158ee:	7bfb      	ldrb	r3, [r7, #15]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d060      	beq.n	80159b6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80158f4:	7bfb      	ldrb	r3, [r7, #15]
 80158f6:	f000 bc27 	b.w	8016148 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	69db      	ldr	r3, [r3, #28]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d039      	beq.n	8015976 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015902:	4b4a      	ldr	r3, [pc, #296]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	4a49      	ldr	r2, [pc, #292]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015908:	f043 0301 	orr.w	r3, r3, #1
 801590c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801590e:	f7fc fd3b 	bl	8012388 <HAL_GetTick>
 8015912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015914:	e00f      	b.n	8015936 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015916:	f7fc fd37 	bl	8012388 <HAL_GetTick>
 801591a:	4602      	mov	r2, r0
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	1ad3      	subs	r3, r2, r3
 8015920:	2b02      	cmp	r3, #2
 8015922:	d908      	bls.n	8015936 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015924:	4b41      	ldr	r3, [pc, #260]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f003 0302 	and.w	r3, r3, #2
 801592c:	2b00      	cmp	r3, #0
 801592e:	d102      	bne.n	8015936 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8015930:	2303      	movs	r3, #3
 8015932:	f000 bc09 	b.w	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8015936:	4b3d      	ldr	r3, [pc, #244]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f003 0302 	and.w	r3, r3, #2
 801593e:	2b00      	cmp	r3, #0
 8015940:	d0e9      	beq.n	8015916 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015942:	4b3a      	ldr	r3, [pc, #232]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	4a39      	ldr	r2, [pc, #228]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015948:	f043 0308 	orr.w	r3, r3, #8
 801594c:	6013      	str	r3, [r2, #0]
 801594e:	4b37      	ldr	r3, [pc, #220]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801595a:	4934      	ldr	r1, [pc, #208]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801595c:	4313      	orrs	r3, r2
 801595e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015960:	4b32      	ldr	r3, [pc, #200]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6a1b      	ldr	r3, [r3, #32]
 801596c:	021b      	lsls	r3, r3, #8
 801596e:	492f      	ldr	r1, [pc, #188]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015970:	4313      	orrs	r3, r2
 8015972:	604b      	str	r3, [r1, #4]
 8015974:	e020      	b.n	80159b8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015976:	4b2d      	ldr	r3, [pc, #180]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	4a2c      	ldr	r2, [pc, #176]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801597c:	f023 0301 	bic.w	r3, r3, #1
 8015980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8015982:	f7fc fd01 	bl	8012388 <HAL_GetTick>
 8015986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015988:	e00e      	b.n	80159a8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801598a:	f7fc fcfd 	bl	8012388 <HAL_GetTick>
 801598e:	4602      	mov	r2, r0
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	1ad3      	subs	r3, r2, r3
 8015994:	2b02      	cmp	r3, #2
 8015996:	d907      	bls.n	80159a8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8015998:	4b24      	ldr	r3, [pc, #144]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	f003 0302 	and.w	r3, r3, #2
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d001      	beq.n	80159a8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80159a4:	2303      	movs	r3, #3
 80159a6:	e3cf      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80159a8:	4b20      	ldr	r3, [pc, #128]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	f003 0302 	and.w	r3, r3, #2
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d1ea      	bne.n	801598a <HAL_RCC_OscConfig+0x1da>
 80159b4:	e000      	b.n	80159b8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80159b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f003 0301 	and.w	r3, r3, #1
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d07e      	beq.n	8015ac2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	2b08      	cmp	r3, #8
 80159c8:	d005      	beq.n	80159d6 <HAL_RCC_OscConfig+0x226>
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	2b0c      	cmp	r3, #12
 80159ce:	d10e      	bne.n	80159ee <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	2b03      	cmp	r3, #3
 80159d4:	d10b      	bne.n	80159ee <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80159d6:	4b15      	ldr	r3, [pc, #84]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d06e      	beq.n	8015ac0 <HAL_RCC_OscConfig+0x310>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d16a      	bne.n	8015ac0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80159ea:	2301      	movs	r3, #1
 80159ec:	e3ac      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159f6:	d106      	bne.n	8015a06 <HAL_RCC_OscConfig+0x256>
 80159f8:	4b0c      	ldr	r3, [pc, #48]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	4a0b      	ldr	r2, [pc, #44]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 80159fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015a02:	6013      	str	r3, [r2, #0]
 8015a04:	e024      	b.n	8015a50 <HAL_RCC_OscConfig+0x2a0>
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015a0e:	d113      	bne.n	8015a38 <HAL_RCC_OscConfig+0x288>
 8015a10:	4b06      	ldr	r3, [pc, #24]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	4a05      	ldr	r2, [pc, #20]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015a1a:	6013      	str	r3, [r2, #0]
 8015a1c:	4b03      	ldr	r3, [pc, #12]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	4a02      	ldr	r2, [pc, #8]	; (8015a2c <HAL_RCC_OscConfig+0x27c>)
 8015a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015a26:	6013      	str	r3, [r2, #0]
 8015a28:	e012      	b.n	8015a50 <HAL_RCC_OscConfig+0x2a0>
 8015a2a:	bf00      	nop
 8015a2c:	40021000 	.word	0x40021000
 8015a30:	20000090 	.word	0x20000090
 8015a34:	20000094 	.word	0x20000094
 8015a38:	4b8b      	ldr	r3, [pc, #556]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4a8a      	ldr	r2, [pc, #552]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015a42:	6013      	str	r3, [r2, #0]
 8015a44:	4b88      	ldr	r3, [pc, #544]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	4a87      	ldr	r2, [pc, #540]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d019      	beq.n	8015a8c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a58:	f7fc fc96 	bl	8012388 <HAL_GetTick>
 8015a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015a5e:	e00e      	b.n	8015a7e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015a60:	f7fc fc92 	bl	8012388 <HAL_GetTick>
 8015a64:	4602      	mov	r2, r0
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	2b64      	cmp	r3, #100	; 0x64
 8015a6c:	d907      	bls.n	8015a7e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015a6e:	4b7e      	ldr	r3, [pc, #504]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d101      	bne.n	8015a7e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8015a7a:	2303      	movs	r3, #3
 8015a7c:	e364      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015a7e:	4b7a      	ldr	r3, [pc, #488]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d0ea      	beq.n	8015a60 <HAL_RCC_OscConfig+0x2b0>
 8015a8a:	e01a      	b.n	8015ac2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a8c:	f7fc fc7c 	bl	8012388 <HAL_GetTick>
 8015a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015a92:	e00e      	b.n	8015ab2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015a94:	f7fc fc78 	bl	8012388 <HAL_GetTick>
 8015a98:	4602      	mov	r2, r0
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	1ad3      	subs	r3, r2, r3
 8015a9e:	2b64      	cmp	r3, #100	; 0x64
 8015aa0:	d907      	bls.n	8015ab2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015aa2:	4b71      	ldr	r3, [pc, #452]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d001      	beq.n	8015ab2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8015aae:	2303      	movs	r3, #3
 8015ab0:	e34a      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8015ab2:	4b6d      	ldr	r3, [pc, #436]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d1ea      	bne.n	8015a94 <HAL_RCC_OscConfig+0x2e4>
 8015abe:	e000      	b.n	8015ac2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	f003 0302 	and.w	r3, r3, #2
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d06c      	beq.n	8015ba8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8015ace:	69bb      	ldr	r3, [r7, #24]
 8015ad0:	2b04      	cmp	r3, #4
 8015ad2:	d005      	beq.n	8015ae0 <HAL_RCC_OscConfig+0x330>
 8015ad4:	69bb      	ldr	r3, [r7, #24]
 8015ad6:	2b0c      	cmp	r3, #12
 8015ad8:	d119      	bne.n	8015b0e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	2b02      	cmp	r3, #2
 8015ade:	d116      	bne.n	8015b0e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015ae0:	4b61      	ldr	r3, [pc, #388]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d005      	beq.n	8015af8 <HAL_RCC_OscConfig+0x348>
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d101      	bne.n	8015af8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8015af4:	2301      	movs	r3, #1
 8015af6:	e327      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015af8:	4b5b      	ldr	r3, [pc, #364]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	691b      	ldr	r3, [r3, #16]
 8015b04:	061b      	lsls	r3, r3, #24
 8015b06:	4958      	ldr	r1, [pc, #352]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b08:	4313      	orrs	r3, r2
 8015b0a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015b0c:	e04c      	b.n	8015ba8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	68db      	ldr	r3, [r3, #12]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d029      	beq.n	8015b6a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015b16:	4b54      	ldr	r3, [pc, #336]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	4a53      	ldr	r2, [pc, #332]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015b22:	f7fc fc31 	bl	8012388 <HAL_GetTick>
 8015b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015b28:	e00e      	b.n	8015b48 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015b2a:	f7fc fc2d 	bl	8012388 <HAL_GetTick>
 8015b2e:	4602      	mov	r2, r0
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	1ad3      	subs	r3, r2, r3
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	d907      	bls.n	8015b48 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015b38:	4b4b      	ldr	r3, [pc, #300]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d101      	bne.n	8015b48 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8015b44:	2303      	movs	r3, #3
 8015b46:	e2ff      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015b48:	4b47      	ldr	r3, [pc, #284]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d0ea      	beq.n	8015b2a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015b54:	4b44      	ldr	r3, [pc, #272]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b56:	685b      	ldr	r3, [r3, #4]
 8015b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	691b      	ldr	r3, [r3, #16]
 8015b60:	061b      	lsls	r3, r3, #24
 8015b62:	4941      	ldr	r1, [pc, #260]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b64:	4313      	orrs	r3, r2
 8015b66:	604b      	str	r3, [r1, #4]
 8015b68:	e01e      	b.n	8015ba8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015b6a:	4b3f      	ldr	r3, [pc, #252]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	4a3e      	ldr	r2, [pc, #248]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015b76:	f7fc fc07 	bl	8012388 <HAL_GetTick>
 8015b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015b7c:	e00e      	b.n	8015b9c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015b7e:	f7fc fc03 	bl	8012388 <HAL_GetTick>
 8015b82:	4602      	mov	r2, r0
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	1ad3      	subs	r3, r2, r3
 8015b88:	2b02      	cmp	r3, #2
 8015b8a:	d907      	bls.n	8015b9c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015b8c:	4b36      	ldr	r3, [pc, #216]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d001      	beq.n	8015b9c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8015b98:	2303      	movs	r3, #3
 8015b9a:	e2d5      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015b9c:	4b32      	ldr	r3, [pc, #200]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d1ea      	bne.n	8015b7e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	f003 0308 	and.w	r3, r3, #8
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d062      	beq.n	8015c7a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	695b      	ldr	r3, [r3, #20]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d038      	beq.n	8015c2e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	699b      	ldr	r3, [r3, #24]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d108      	bne.n	8015bd6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8015bc4:	4b28      	ldr	r3, [pc, #160]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015bca:	4a27      	ldr	r2, [pc, #156]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015bcc:	f023 0310 	bic.w	r3, r3, #16
 8015bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015bd4:	e007      	b.n	8015be6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8015bd6:	4b24      	ldr	r3, [pc, #144]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015bdc:	4a22      	ldr	r2, [pc, #136]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015bde:	f043 0310 	orr.w	r3, r3, #16
 8015be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015be6:	4b20      	ldr	r3, [pc, #128]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015bec:	4a1e      	ldr	r2, [pc, #120]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015bee:	f043 0301 	orr.w	r3, r3, #1
 8015bf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015bf6:	f7fc fbc7 	bl	8012388 <HAL_GetTick>
 8015bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8015bfc:	e00f      	b.n	8015c1e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015bfe:	f7fc fbc3 	bl	8012388 <HAL_GetTick>
 8015c02:	4602      	mov	r2, r0
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	1ad3      	subs	r3, r2, r3
 8015c08:	2b07      	cmp	r3, #7
 8015c0a:	d908      	bls.n	8015c1e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8015c0c:	4b16      	ldr	r3, [pc, #88]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015c12:	f003 0302 	and.w	r3, r3, #2
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d101      	bne.n	8015c1e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8015c1a:	2303      	movs	r3, #3
 8015c1c:	e294      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8015c1e:	4b12      	ldr	r3, [pc, #72]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015c24:	f003 0302 	and.w	r3, r3, #2
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d0e8      	beq.n	8015bfe <HAL_RCC_OscConfig+0x44e>
 8015c2c:	e025      	b.n	8015c7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015c2e:	4b0e      	ldr	r3, [pc, #56]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015c34:	4a0c      	ldr	r2, [pc, #48]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015c36:	f023 0301 	bic.w	r3, r3, #1
 8015c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015c3e:	f7fc fba3 	bl	8012388 <HAL_GetTick>
 8015c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015c44:	e012      	b.n	8015c6c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015c46:	f7fc fb9f 	bl	8012388 <HAL_GetTick>
 8015c4a:	4602      	mov	r2, r0
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	1ad3      	subs	r3, r2, r3
 8015c50:	2b07      	cmp	r3, #7
 8015c52:	d90b      	bls.n	8015c6c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015c54:	4b04      	ldr	r3, [pc, #16]	; (8015c68 <HAL_RCC_OscConfig+0x4b8>)
 8015c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015c5a:	f003 0302 	and.w	r3, r3, #2
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d004      	beq.n	8015c6c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8015c62:	2303      	movs	r3, #3
 8015c64:	e270      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
 8015c66:	bf00      	nop
 8015c68:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015c6c:	4ba8      	ldr	r3, [pc, #672]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015c72:	f003 0302 	and.w	r3, r3, #2
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d1e5      	bne.n	8015c46 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	f003 0304 	and.w	r3, r3, #4
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	f000 812d 	beq.w	8015ee2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8015c8c:	4ba0      	ldr	r3, [pc, #640]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d10d      	bne.n	8015cb4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015c98:	4b9d      	ldr	r3, [pc, #628]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c9c:	4a9c      	ldr	r2, [pc, #624]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8015ca4:	4b9a      	ldr	r3, [pc, #616]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015cac:	60bb      	str	r3, [r7, #8]
 8015cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015cb4:	4b97      	ldr	r3, [pc, #604]	; (8015f14 <HAL_RCC_OscConfig+0x764>)
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d11e      	bne.n	8015cfe <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015cc0:	4b94      	ldr	r3, [pc, #592]	; (8015f14 <HAL_RCC_OscConfig+0x764>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	4a93      	ldr	r2, [pc, #588]	; (8015f14 <HAL_RCC_OscConfig+0x764>)
 8015cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015ccc:	f7fc fb5c 	bl	8012388 <HAL_GetTick>
 8015cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015cd2:	e00e      	b.n	8015cf2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015cd4:	f7fc fb58 	bl	8012388 <HAL_GetTick>
 8015cd8:	4602      	mov	r2, r0
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	1ad3      	subs	r3, r2, r3
 8015cde:	2b02      	cmp	r3, #2
 8015ce0:	d907      	bls.n	8015cf2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015ce2:	4b8c      	ldr	r3, [pc, #560]	; (8015f14 <HAL_RCC_OscConfig+0x764>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d101      	bne.n	8015cf2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8015cee:	2303      	movs	r3, #3
 8015cf0:	e22a      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015cf2:	4b88      	ldr	r3, [pc, #544]	; (8015f14 <HAL_RCC_OscConfig+0x764>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d0ea      	beq.n	8015cd4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	689b      	ldr	r3, [r3, #8]
 8015d02:	f003 0301 	and.w	r3, r3, #1
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d01f      	beq.n	8015d4a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	689b      	ldr	r3, [r3, #8]
 8015d0e:	f003 0304 	and.w	r3, r3, #4
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d010      	beq.n	8015d38 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015d16:	4b7e      	ldr	r3, [pc, #504]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d1c:	4a7c      	ldr	r2, [pc, #496]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d1e:	f043 0304 	orr.w	r3, r3, #4
 8015d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015d26:	4b7a      	ldr	r3, [pc, #488]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d2c:	4a78      	ldr	r2, [pc, #480]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d2e:	f043 0301 	orr.w	r3, r3, #1
 8015d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8015d36:	e018      	b.n	8015d6a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015d38:	4b75      	ldr	r3, [pc, #468]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d3e:	4a74      	ldr	r2, [pc, #464]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d40:	f043 0301 	orr.w	r3, r3, #1
 8015d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8015d48:	e00f      	b.n	8015d6a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8015d4a:	4b71      	ldr	r3, [pc, #452]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d50:	4a6f      	ldr	r2, [pc, #444]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d52:	f023 0301 	bic.w	r3, r3, #1
 8015d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8015d5a:	4b6d      	ldr	r3, [pc, #436]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d60:	4a6b      	ldr	r2, [pc, #428]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d62:	f023 0304 	bic.w	r3, r3, #4
 8015d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	689b      	ldr	r3, [r3, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d068      	beq.n	8015e44 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d72:	f7fc fb09 	bl	8012388 <HAL_GetTick>
 8015d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015d78:	e011      	b.n	8015d9e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015d7a:	f7fc fb05 	bl	8012388 <HAL_GetTick>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d908      	bls.n	8015d9e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015d8c:	4b60      	ldr	r3, [pc, #384]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015d92:	f003 0302 	and.w	r3, r3, #2
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d101      	bne.n	8015d9e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8015d9a:	2303      	movs	r3, #3
 8015d9c:	e1d4      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015d9e:	4b5c      	ldr	r3, [pc, #368]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015da4:	f003 0302 	and.w	r3, r3, #2
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d0e6      	beq.n	8015d7a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	689b      	ldr	r3, [r3, #8]
 8015db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d022      	beq.n	8015dfe <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015db8:	4b55      	ldr	r3, [pc, #340]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015dbe:	4a54      	ldr	r2, [pc, #336]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8015dc8:	e011      	b.n	8015dee <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015dca:	f7fc fadd 	bl	8012388 <HAL_GetTick>
 8015dce:	4602      	mov	r2, r0
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	1ad3      	subs	r3, r2, r3
 8015dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8015dd8:	4293      	cmp	r3, r2
 8015dda:	d908      	bls.n	8015dee <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8015ddc:	4b4c      	ldr	r3, [pc, #304]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d101      	bne.n	8015dee <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8015dea:	2303      	movs	r3, #3
 8015dec:	e1ac      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8015dee:	4b48      	ldr	r3, [pc, #288]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d0e6      	beq.n	8015dca <HAL_RCC_OscConfig+0x61a>
 8015dfc:	e068      	b.n	8015ed0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015dfe:	4b44      	ldr	r3, [pc, #272]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e04:	4a42      	ldr	r2, [pc, #264]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015e0e:	e011      	b.n	8015e34 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015e10:	f7fc faba 	bl	8012388 <HAL_GetTick>
 8015e14:	4602      	mov	r2, r0
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d908      	bls.n	8015e34 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015e22:	4b3b      	ldr	r3, [pc, #236]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d001      	beq.n	8015e34 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8015e30:	2303      	movs	r3, #3
 8015e32:	e189      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015e34:	4b36      	ldr	r3, [pc, #216]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d1e6      	bne.n	8015e10 <HAL_RCC_OscConfig+0x660>
 8015e42:	e045      	b.n	8015ed0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015e44:	f7fc faa0 	bl	8012388 <HAL_GetTick>
 8015e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015e4a:	e011      	b.n	8015e70 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015e4c:	f7fc fa9c 	bl	8012388 <HAL_GetTick>
 8015e50:	4602      	mov	r2, r0
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	1ad3      	subs	r3, r2, r3
 8015e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8015e5a:	4293      	cmp	r3, r2
 8015e5c:	d908      	bls.n	8015e70 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015e5e:	4b2c      	ldr	r3, [pc, #176]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e64:	f003 0302 	and.w	r3, r3, #2
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d001      	beq.n	8015e70 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8015e6c:	2303      	movs	r3, #3
 8015e6e:	e16b      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015e70:	4b27      	ldr	r3, [pc, #156]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e76:	f003 0302 	and.w	r3, r3, #2
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d1e6      	bne.n	8015e4c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8015e7e:	4b24      	ldr	r3, [pc, #144]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d021      	beq.n	8015ed0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8015e8c:	4b20      	ldr	r3, [pc, #128]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e92:	4a1f      	ldr	r2, [pc, #124]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015e9c:	e011      	b.n	8015ec2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015e9e:	f7fc fa73 	bl	8012388 <HAL_GetTick>
 8015ea2:	4602      	mov	r2, r0
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	1ad3      	subs	r3, r2, r3
 8015ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8015eac:	4293      	cmp	r3, r2
 8015eae:	d908      	bls.n	8015ec2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015eb0:	4b17      	ldr	r3, [pc, #92]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d001      	beq.n	8015ec2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8015ebe:	2303      	movs	r3, #3
 8015ec0:	e142      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8015ec2:	4b13      	ldr	r3, [pc, #76]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d1e6      	bne.n	8015e9e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8015ed0:	7ffb      	ldrb	r3, [r7, #31]
 8015ed2:	2b01      	cmp	r3, #1
 8015ed4:	d105      	bne.n	8015ee2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015ed6:	4b0e      	ldr	r3, [pc, #56]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015eda:	4a0d      	ldr	r2, [pc, #52]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015ee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	f003 0320 	and.w	r3, r3, #32
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d04f      	beq.n	8015f8e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d028      	beq.n	8015f48 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8015ef6:	4b06      	ldr	r3, [pc, #24]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015efc:	4a04      	ldr	r2, [pc, #16]	; (8015f10 <HAL_RCC_OscConfig+0x760>)
 8015efe:	f043 0301 	orr.w	r3, r3, #1
 8015f02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015f06:	f7fc fa3f 	bl	8012388 <HAL_GetTick>
 8015f0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8015f0c:	e014      	b.n	8015f38 <HAL_RCC_OscConfig+0x788>
 8015f0e:	bf00      	nop
 8015f10:	40021000 	.word	0x40021000
 8015f14:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015f18:	f7fc fa36 	bl	8012388 <HAL_GetTick>
 8015f1c:	4602      	mov	r2, r0
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	1ad3      	subs	r3, r2, r3
 8015f22:	2b02      	cmp	r3, #2
 8015f24:	d908      	bls.n	8015f38 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8015f26:	4b8a      	ldr	r3, [pc, #552]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015f2c:	f003 0302 	and.w	r3, r3, #2
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d101      	bne.n	8015f38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8015f34:	2303      	movs	r3, #3
 8015f36:	e107      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8015f38:	4b85      	ldr	r3, [pc, #532]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015f3e:	f003 0302 	and.w	r3, r3, #2
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d0e8      	beq.n	8015f18 <HAL_RCC_OscConfig+0x768>
 8015f46:	e022      	b.n	8015f8e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8015f48:	4b81      	ldr	r3, [pc, #516]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015f4e:	4a80      	ldr	r2, [pc, #512]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f50:	f023 0301 	bic.w	r3, r3, #1
 8015f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015f58:	f7fc fa16 	bl	8012388 <HAL_GetTick>
 8015f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8015f5e:	e00f      	b.n	8015f80 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015f60:	f7fc fa12 	bl	8012388 <HAL_GetTick>
 8015f64:	4602      	mov	r2, r0
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	1ad3      	subs	r3, r2, r3
 8015f6a:	2b02      	cmp	r3, #2
 8015f6c:	d908      	bls.n	8015f80 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8015f6e:	4b78      	ldr	r3, [pc, #480]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015f74:	f003 0302 	and.w	r3, r3, #2
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d001      	beq.n	8015f80 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8015f7c:	2303      	movs	r3, #3
 8015f7e:	e0e3      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8015f80:	4b73      	ldr	r3, [pc, #460]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015f86:	f003 0302 	and.w	r3, r3, #2
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d1e8      	bne.n	8015f60 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	f000 80d7 	beq.w	8016146 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015f98:	4b6d      	ldr	r3, [pc, #436]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015f9a:	689b      	ldr	r3, [r3, #8]
 8015f9c:	f003 030c 	and.w	r3, r3, #12
 8015fa0:	2b0c      	cmp	r3, #12
 8015fa2:	f000 8091 	beq.w	80160c8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015faa:	2b02      	cmp	r3, #2
 8015fac:	d166      	bne.n	801607c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015fae:	4b68      	ldr	r3, [pc, #416]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	4a67      	ldr	r2, [pc, #412]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015fba:	f7fc f9e5 	bl	8012388 <HAL_GetTick>
 8015fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015fc0:	e00e      	b.n	8015fe0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015fc2:	f7fc f9e1 	bl	8012388 <HAL_GetTick>
 8015fc6:	4602      	mov	r2, r0
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	1ad3      	subs	r3, r2, r3
 8015fcc:	2b02      	cmp	r3, #2
 8015fce:	d907      	bls.n	8015fe0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015fd0:	4b5f      	ldr	r3, [pc, #380]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d001      	beq.n	8015fe0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8015fdc:	2303      	movs	r3, #3
 8015fde:	e0b3      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015fe0:	4b5b      	ldr	r3, [pc, #364]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d1ea      	bne.n	8015fc2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015fec:	4b58      	ldr	r3, [pc, #352]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8015fee:	68da      	ldr	r2, [r3, #12]
 8015ff0:	4b58      	ldr	r3, [pc, #352]	; (8016154 <HAL_RCC_OscConfig+0x9a4>)
 8015ff2:	4013      	ands	r3, r2
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015ffc:	3a01      	subs	r2, #1
 8015ffe:	0112      	lsls	r2, r2, #4
 8016000:	4311      	orrs	r1, r2
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016006:	0212      	lsls	r2, r2, #8
 8016008:	4311      	orrs	r1, r2
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801600e:	0852      	lsrs	r2, r2, #1
 8016010:	3a01      	subs	r2, #1
 8016012:	0552      	lsls	r2, r2, #21
 8016014:	4311      	orrs	r1, r2
 8016016:	687a      	ldr	r2, [r7, #4]
 8016018:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801601a:	0852      	lsrs	r2, r2, #1
 801601c:	3a01      	subs	r2, #1
 801601e:	0652      	lsls	r2, r2, #25
 8016020:	4311      	orrs	r1, r2
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8016026:	06d2      	lsls	r2, r2, #27
 8016028:	430a      	orrs	r2, r1
 801602a:	4949      	ldr	r1, [pc, #292]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 801602c:	4313      	orrs	r3, r2
 801602e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016030:	4b47      	ldr	r3, [pc, #284]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	4a46      	ldr	r2, [pc, #280]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8016036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801603a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801603c:	4b44      	ldr	r3, [pc, #272]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 801603e:	68db      	ldr	r3, [r3, #12]
 8016040:	4a43      	ldr	r2, [pc, #268]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8016042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016046:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016048:	f7fc f99e 	bl	8012388 <HAL_GetTick>
 801604c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801604e:	e00e      	b.n	801606e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016050:	f7fc f99a 	bl	8012388 <HAL_GetTick>
 8016054:	4602      	mov	r2, r0
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	1ad3      	subs	r3, r2, r3
 801605a:	2b02      	cmp	r3, #2
 801605c:	d907      	bls.n	801606e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801605e:	4b3c      	ldr	r3, [pc, #240]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016066:	2b00      	cmp	r3, #0
 8016068:	d101      	bne.n	801606e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 801606a:	2303      	movs	r3, #3
 801606c:	e06c      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801606e:	4b38      	ldr	r3, [pc, #224]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016076:	2b00      	cmp	r3, #0
 8016078:	d0ea      	beq.n	8016050 <HAL_RCC_OscConfig+0x8a0>
 801607a:	e064      	b.n	8016146 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801607c:	4b34      	ldr	r3, [pc, #208]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4a33      	ldr	r2, [pc, #204]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 8016082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016088:	f7fc f97e 	bl	8012388 <HAL_GetTick>
 801608c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801608e:	e00e      	b.n	80160ae <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8016090:	f7fc f97a 	bl	8012388 <HAL_GetTick>
 8016094:	4602      	mov	r2, r0
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	2b02      	cmp	r3, #2
 801609c:	d907      	bls.n	80160ae <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801609e:	4b2c      	ldr	r3, [pc, #176]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d001      	beq.n	80160ae <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80160aa:	2303      	movs	r3, #3
 80160ac:	e04c      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80160ae:	4b28      	ldr	r3, [pc, #160]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1ea      	bne.n	8016090 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80160ba:	4b25      	ldr	r3, [pc, #148]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 80160bc:	68da      	ldr	r2, [r3, #12]
 80160be:	4924      	ldr	r1, [pc, #144]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 80160c0:	4b25      	ldr	r3, [pc, #148]	; (8016158 <HAL_RCC_OscConfig+0x9a8>)
 80160c2:	4013      	ands	r3, r2
 80160c4:	60cb      	str	r3, [r1, #12]
 80160c6:	e03e      	b.n	8016146 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d101      	bne.n	80160d4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80160d0:	2301      	movs	r3, #1
 80160d2:	e039      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80160d4:	4b1e      	ldr	r3, [pc, #120]	; (8016150 <HAL_RCC_OscConfig+0x9a0>)
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80160da:	697b      	ldr	r3, [r7, #20]
 80160dc:	f003 0203 	and.w	r2, r3, #3
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d12c      	bne.n	8016142 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80160e8:	697b      	ldr	r3, [r7, #20]
 80160ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160f2:	3b01      	subs	r3, #1
 80160f4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80160f6:	429a      	cmp	r2, r3
 80160f8:	d123      	bne.n	8016142 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016104:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8016106:	429a      	cmp	r2, r3
 8016108:	d11b      	bne.n	8016142 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016114:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8016116:	429a      	cmp	r2, r3
 8016118:	d113      	bne.n	8016142 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801611a:	697b      	ldr	r3, [r7, #20]
 801611c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016124:	085b      	lsrs	r3, r3, #1
 8016126:	3b01      	subs	r3, #1
 8016128:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801612a:	429a      	cmp	r2, r3
 801612c:	d109      	bne.n	8016142 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016138:	085b      	lsrs	r3, r3, #1
 801613a:	3b01      	subs	r3, #1
 801613c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801613e:	429a      	cmp	r2, r3
 8016140:	d001      	beq.n	8016146 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8016142:	2301      	movs	r3, #1
 8016144:	e000      	b.n	8016148 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8016146:	2300      	movs	r3, #0
}
 8016148:	4618      	mov	r0, r3
 801614a:	3720      	adds	r7, #32
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}
 8016150:	40021000 	.word	0x40021000
 8016154:	019f800c 	.word	0x019f800c
 8016158:	feeefffc 	.word	0xfeeefffc

0801615c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b086      	sub	sp, #24
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8016166:	2300      	movs	r3, #0
 8016168:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d101      	bne.n	8016174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8016170:	2301      	movs	r3, #1
 8016172:	e11c      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016174:	4b90      	ldr	r3, [pc, #576]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	f003 030f 	and.w	r3, r3, #15
 801617c:	683a      	ldr	r2, [r7, #0]
 801617e:	429a      	cmp	r2, r3
 8016180:	d910      	bls.n	80161a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016182:	4b8d      	ldr	r3, [pc, #564]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	f023 020f 	bic.w	r2, r3, #15
 801618a:	498b      	ldr	r1, [pc, #556]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	4313      	orrs	r3, r2
 8016190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016192:	4b89      	ldr	r3, [pc, #548]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	f003 030f 	and.w	r3, r3, #15
 801619a:	683a      	ldr	r2, [r7, #0]
 801619c:	429a      	cmp	r2, r3
 801619e:	d001      	beq.n	80161a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80161a0:	2301      	movs	r3, #1
 80161a2:	e104      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	f003 0302 	and.w	r3, r3, #2
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d010      	beq.n	80161d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	689a      	ldr	r2, [r3, #8]
 80161b4:	4b81      	ldr	r3, [pc, #516]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80161b6:	689b      	ldr	r3, [r3, #8]
 80161b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161bc:	429a      	cmp	r2, r3
 80161be:	d908      	bls.n	80161d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80161c0:	4b7e      	ldr	r3, [pc, #504]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80161c2:	689b      	ldr	r3, [r3, #8]
 80161c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	689b      	ldr	r3, [r3, #8]
 80161cc:	497b      	ldr	r1, [pc, #492]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80161ce:	4313      	orrs	r3, r2
 80161d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	f003 0301 	and.w	r3, r3, #1
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f000 8085 	beq.w	80162ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	2b03      	cmp	r3, #3
 80161e6:	d11f      	bne.n	8016228 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80161e8:	4b74      	ldr	r3, [pc, #464]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d101      	bne.n	80161f8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80161f4:	2301      	movs	r3, #1
 80161f6:	e0da      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80161f8:	f000 fa58 	bl	80166ac <RCC_GetSysClockFreqFromPLLSource>
 80161fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80161fe:	693b      	ldr	r3, [r7, #16]
 8016200:	4a6f      	ldr	r2, [pc, #444]	; (80163c0 <HAL_RCC_ClockConfig+0x264>)
 8016202:	4293      	cmp	r3, r2
 8016204:	d947      	bls.n	8016296 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8016206:	4b6d      	ldr	r3, [pc, #436]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016208:	689b      	ldr	r3, [r3, #8]
 801620a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d141      	bne.n	8016296 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8016212:	4b6a      	ldr	r3, [pc, #424]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016214:	689b      	ldr	r3, [r3, #8]
 8016216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801621a:	4a68      	ldr	r2, [pc, #416]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 801621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8016222:	2380      	movs	r3, #128	; 0x80
 8016224:	617b      	str	r3, [r7, #20]
 8016226:	e036      	b.n	8016296 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	685b      	ldr	r3, [r3, #4]
 801622c:	2b02      	cmp	r3, #2
 801622e:	d107      	bne.n	8016240 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016230:	4b62      	ldr	r3, [pc, #392]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016238:	2b00      	cmp	r3, #0
 801623a:	d115      	bne.n	8016268 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 801623c:	2301      	movs	r3, #1
 801623e:	e0b6      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d107      	bne.n	8016258 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016248:	4b5c      	ldr	r3, [pc, #368]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	f003 0302 	and.w	r3, r3, #2
 8016250:	2b00      	cmp	r3, #0
 8016252:	d109      	bne.n	8016268 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8016254:	2301      	movs	r3, #1
 8016256:	e0aa      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016258:	4b58      	ldr	r3, [pc, #352]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016260:	2b00      	cmp	r3, #0
 8016262:	d101      	bne.n	8016268 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8016264:	2301      	movs	r3, #1
 8016266:	e0a2      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8016268:	f000 f8b0 	bl	80163cc <HAL_RCC_GetSysClockFreq>
 801626c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	4a53      	ldr	r2, [pc, #332]	; (80163c0 <HAL_RCC_ClockConfig+0x264>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d90f      	bls.n	8016296 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8016276:	4b51      	ldr	r3, [pc, #324]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016278:	689b      	ldr	r3, [r3, #8]
 801627a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801627e:	2b00      	cmp	r3, #0
 8016280:	d109      	bne.n	8016296 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8016282:	4b4e      	ldr	r3, [pc, #312]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016284:	689b      	ldr	r3, [r3, #8]
 8016286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801628a:	4a4c      	ldr	r2, [pc, #304]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 801628c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016290:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8016292:	2380      	movs	r3, #128	; 0x80
 8016294:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8016296:	4b49      	ldr	r3, [pc, #292]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016298:	689b      	ldr	r3, [r3, #8]
 801629a:	f023 0203 	bic.w	r2, r3, #3
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	4946      	ldr	r1, [pc, #280]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80162a4:	4313      	orrs	r3, r2
 80162a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80162a8:	f7fc f86e 	bl	8012388 <HAL_GetTick>
 80162ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162ae:	e013      	b.n	80162d8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80162b0:	f7fc f86a 	bl	8012388 <HAL_GetTick>
 80162b4:	4602      	mov	r2, r0
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	1ad3      	subs	r3, r2, r3
 80162ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80162be:	4293      	cmp	r3, r2
 80162c0:	d90a      	bls.n	80162d8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162c2:	4b3e      	ldr	r3, [pc, #248]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80162c4:	689b      	ldr	r3, [r3, #8]
 80162c6:	f003 020c 	and.w	r2, r3, #12
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	429a      	cmp	r2, r3
 80162d2:	d001      	beq.n	80162d8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80162d4:	2303      	movs	r3, #3
 80162d6:	e06a      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80162d8:	4b38      	ldr	r3, [pc, #224]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80162da:	689b      	ldr	r3, [r3, #8]
 80162dc:	f003 020c 	and.w	r2, r3, #12
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d1e2      	bne.n	80162b0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	2b80      	cmp	r3, #128	; 0x80
 80162ee:	d105      	bne.n	80162fc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80162f0:	4b32      	ldr	r3, [pc, #200]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80162f2:	689b      	ldr	r3, [r3, #8]
 80162f4:	4a31      	ldr	r2, [pc, #196]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 80162f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80162fa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f003 0302 	and.w	r3, r3, #2
 8016304:	2b00      	cmp	r3, #0
 8016306:	d010      	beq.n	801632a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	689a      	ldr	r2, [r3, #8]
 801630c:	4b2b      	ldr	r3, [pc, #172]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 801630e:	689b      	ldr	r3, [r3, #8]
 8016310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016314:	429a      	cmp	r2, r3
 8016316:	d208      	bcs.n	801632a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016318:	4b28      	ldr	r3, [pc, #160]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	689b      	ldr	r3, [r3, #8]
 8016324:	4925      	ldr	r1, [pc, #148]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016326:	4313      	orrs	r3, r2
 8016328:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801632a:	4b23      	ldr	r3, [pc, #140]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	f003 030f 	and.w	r3, r3, #15
 8016332:	683a      	ldr	r2, [r7, #0]
 8016334:	429a      	cmp	r2, r3
 8016336:	d210      	bcs.n	801635a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016338:	4b1f      	ldr	r3, [pc, #124]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	f023 020f 	bic.w	r2, r3, #15
 8016340:	491d      	ldr	r1, [pc, #116]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	4313      	orrs	r3, r2
 8016346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016348:	4b1b      	ldr	r3, [pc, #108]	; (80163b8 <HAL_RCC_ClockConfig+0x25c>)
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	f003 030f 	and.w	r3, r3, #15
 8016350:	683a      	ldr	r2, [r7, #0]
 8016352:	429a      	cmp	r2, r3
 8016354:	d001      	beq.n	801635a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8016356:	2301      	movs	r3, #1
 8016358:	e029      	b.n	80163ae <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	f003 0304 	and.w	r3, r3, #4
 8016362:	2b00      	cmp	r3, #0
 8016364:	d008      	beq.n	8016378 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016366:	4b15      	ldr	r3, [pc, #84]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016368:	689b      	ldr	r3, [r3, #8]
 801636a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	68db      	ldr	r3, [r3, #12]
 8016372:	4912      	ldr	r1, [pc, #72]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016374:	4313      	orrs	r3, r2
 8016376:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	f003 0308 	and.w	r3, r3, #8
 8016380:	2b00      	cmp	r3, #0
 8016382:	d009      	beq.n	8016398 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8016384:	4b0d      	ldr	r3, [pc, #52]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016386:	689b      	ldr	r3, [r3, #8]
 8016388:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	691b      	ldr	r3, [r3, #16]
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	490a      	ldr	r1, [pc, #40]	; (80163bc <HAL_RCC_ClockConfig+0x260>)
 8016394:	4313      	orrs	r3, r2
 8016396:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016398:	f000 f8b6 	bl	8016508 <HAL_RCC_GetHCLKFreq>
 801639c:	4603      	mov	r3, r0
 801639e:	4a09      	ldr	r2, [pc, #36]	; (80163c4 <HAL_RCC_ClockConfig+0x268>)
 80163a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80163a2:	4b09      	ldr	r3, [pc, #36]	; (80163c8 <HAL_RCC_ClockConfig+0x26c>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	4618      	mov	r0, r3
 80163a8:	f7fb fd5e 	bl	8011e68 <HAL_InitTick>
 80163ac:	4603      	mov	r3, r0
}
 80163ae:	4618      	mov	r0, r3
 80163b0:	3718      	adds	r7, #24
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}
 80163b6:	bf00      	nop
 80163b8:	40022000 	.word	0x40022000
 80163bc:	40021000 	.word	0x40021000
 80163c0:	04c4b400 	.word	0x04c4b400
 80163c4:	20000090 	.word	0x20000090
 80163c8:	20000094 	.word	0x20000094

080163cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80163cc:	b480      	push	{r7}
 80163ce:	b089      	sub	sp, #36	; 0x24
 80163d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80163d2:	2300      	movs	r3, #0
 80163d4:	61fb      	str	r3, [r7, #28]
 80163d6:	2300      	movs	r3, #0
 80163d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80163da:	4b47      	ldr	r3, [pc, #284]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80163dc:	689b      	ldr	r3, [r3, #8]
 80163de:	f003 030c 	and.w	r3, r3, #12
 80163e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80163e4:	4b44      	ldr	r3, [pc, #272]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80163e6:	68db      	ldr	r3, [r3, #12]
 80163e8:	f003 0303 	and.w	r3, r3, #3
 80163ec:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d005      	beq.n	8016400 <HAL_RCC_GetSysClockFreq+0x34>
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	2b0c      	cmp	r3, #12
 80163f8:	d121      	bne.n	801643e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d11e      	bne.n	801643e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8016400:	4b3d      	ldr	r3, [pc, #244]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	f003 0308 	and.w	r3, r3, #8
 8016408:	2b00      	cmp	r3, #0
 801640a:	d107      	bne.n	801641c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801640c:	4b3a      	ldr	r3, [pc, #232]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 801640e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016412:	0a1b      	lsrs	r3, r3, #8
 8016414:	f003 030f 	and.w	r3, r3, #15
 8016418:	61fb      	str	r3, [r7, #28]
 801641a:	e005      	b.n	8016428 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801641c:	4b36      	ldr	r3, [pc, #216]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	091b      	lsrs	r3, r3, #4
 8016422:	f003 030f 	and.w	r3, r3, #15
 8016426:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8016428:	4a34      	ldr	r2, [pc, #208]	; (80164fc <HAL_RCC_GetSysClockFreq+0x130>)
 801642a:	69fb      	ldr	r3, [r7, #28]
 801642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016430:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d10d      	bne.n	8016454 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8016438:	69fb      	ldr	r3, [r7, #28]
 801643a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801643c:	e00a      	b.n	8016454 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	2b04      	cmp	r3, #4
 8016442:	d102      	bne.n	801644a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8016444:	4b2e      	ldr	r3, [pc, #184]	; (8016500 <HAL_RCC_GetSysClockFreq+0x134>)
 8016446:	61bb      	str	r3, [r7, #24]
 8016448:	e004      	b.n	8016454 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801644a:	693b      	ldr	r3, [r7, #16]
 801644c:	2b08      	cmp	r3, #8
 801644e:	d101      	bne.n	8016454 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8016450:	4b2c      	ldr	r3, [pc, #176]	; (8016504 <HAL_RCC_GetSysClockFreq+0x138>)
 8016452:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	2b0c      	cmp	r3, #12
 8016458:	d146      	bne.n	80164e8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801645a:	4b27      	ldr	r3, [pc, #156]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 801645c:	68db      	ldr	r3, [r3, #12]
 801645e:	f003 0303 	and.w	r3, r3, #3
 8016462:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8016464:	4b24      	ldr	r3, [pc, #144]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8016466:	68db      	ldr	r3, [r3, #12]
 8016468:	091b      	lsrs	r3, r3, #4
 801646a:	f003 030f 	and.w	r3, r3, #15
 801646e:	3301      	adds	r3, #1
 8016470:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	2b02      	cmp	r3, #2
 8016476:	d003      	beq.n	8016480 <HAL_RCC_GetSysClockFreq+0xb4>
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	2b03      	cmp	r3, #3
 801647c:	d00d      	beq.n	801649a <HAL_RCC_GetSysClockFreq+0xce>
 801647e:	e019      	b.n	80164b4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8016480:	4a1f      	ldr	r2, [pc, #124]	; (8016500 <HAL_RCC_GetSysClockFreq+0x134>)
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	fbb2 f3f3 	udiv	r3, r2, r3
 8016488:	4a1b      	ldr	r2, [pc, #108]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 801648a:	68d2      	ldr	r2, [r2, #12]
 801648c:	0a12      	lsrs	r2, r2, #8
 801648e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016492:	fb02 f303 	mul.w	r3, r2, r3
 8016496:	617b      	str	r3, [r7, #20]
        break;
 8016498:	e019      	b.n	80164ce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801649a:	4a1a      	ldr	r2, [pc, #104]	; (8016504 <HAL_RCC_GetSysClockFreq+0x138>)
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80164a2:	4a15      	ldr	r2, [pc, #84]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80164a4:	68d2      	ldr	r2, [r2, #12]
 80164a6:	0a12      	lsrs	r2, r2, #8
 80164a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80164ac:	fb02 f303 	mul.w	r3, r2, r3
 80164b0:	617b      	str	r3, [r7, #20]
        break;
 80164b2:	e00c      	b.n	80164ce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80164b4:	69fa      	ldr	r2, [r7, #28]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80164bc:	4a0e      	ldr	r2, [pc, #56]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80164be:	68d2      	ldr	r2, [r2, #12]
 80164c0:	0a12      	lsrs	r2, r2, #8
 80164c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80164c6:	fb02 f303 	mul.w	r3, r2, r3
 80164ca:	617b      	str	r3, [r7, #20]
        break;
 80164cc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80164ce:	4b0a      	ldr	r3, [pc, #40]	; (80164f8 <HAL_RCC_GetSysClockFreq+0x12c>)
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	0e5b      	lsrs	r3, r3, #25
 80164d4:	f003 0303 	and.w	r3, r3, #3
 80164d8:	3301      	adds	r3, #1
 80164da:	005b      	lsls	r3, r3, #1
 80164dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80164de:	697a      	ldr	r2, [r7, #20]
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80164e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80164e8:	69bb      	ldr	r3, [r7, #24]
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3724      	adds	r7, #36	; 0x24
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr
 80164f6:	bf00      	nop
 80164f8:	40021000 	.word	0x40021000
 80164fc:	080231b4 	.word	0x080231b4
 8016500:	00f42400 	.word	0x00f42400
 8016504:	007a1200 	.word	0x007a1200

08016508 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 801650c:	f7ff ff5e 	bl	80163cc <HAL_RCC_GetSysClockFreq>
 8016510:	4602      	mov	r2, r0
 8016512:	4b05      	ldr	r3, [pc, #20]	; (8016528 <HAL_RCC_GetHCLKFreq+0x20>)
 8016514:	689b      	ldr	r3, [r3, #8]
 8016516:	091b      	lsrs	r3, r3, #4
 8016518:	f003 030f 	and.w	r3, r3, #15
 801651c:	4903      	ldr	r1, [pc, #12]	; (801652c <HAL_RCC_GetHCLKFreq+0x24>)
 801651e:	5ccb      	ldrb	r3, [r1, r3]
 8016520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016524:	4618      	mov	r0, r3
 8016526:	bd80      	pop	{r7, pc}
 8016528:	40021000 	.word	0x40021000
 801652c:	0802319c 	.word	0x0802319c

08016530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016534:	f7ff ffe8 	bl	8016508 <HAL_RCC_GetHCLKFreq>
 8016538:	4602      	mov	r2, r0
 801653a:	4b05      	ldr	r3, [pc, #20]	; (8016550 <HAL_RCC_GetPCLK1Freq+0x20>)
 801653c:	689b      	ldr	r3, [r3, #8]
 801653e:	0a1b      	lsrs	r3, r3, #8
 8016540:	f003 0307 	and.w	r3, r3, #7
 8016544:	4903      	ldr	r1, [pc, #12]	; (8016554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8016546:	5ccb      	ldrb	r3, [r1, r3]
 8016548:	fa22 f303 	lsr.w	r3, r2, r3
}
 801654c:	4618      	mov	r0, r3
 801654e:	bd80      	pop	{r7, pc}
 8016550:	40021000 	.word	0x40021000
 8016554:	080231ac 	.word	0x080231ac

08016558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801655c:	f7ff ffd4 	bl	8016508 <HAL_RCC_GetHCLKFreq>
 8016560:	4602      	mov	r2, r0
 8016562:	4b05      	ldr	r3, [pc, #20]	; (8016578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8016564:	689b      	ldr	r3, [r3, #8]
 8016566:	0adb      	lsrs	r3, r3, #11
 8016568:	f003 0307 	and.w	r3, r3, #7
 801656c:	4903      	ldr	r1, [pc, #12]	; (801657c <HAL_RCC_GetPCLK2Freq+0x24>)
 801656e:	5ccb      	ldrb	r3, [r1, r3]
 8016570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016574:	4618      	mov	r0, r3
 8016576:	bd80      	pop	{r7, pc}
 8016578:	40021000 	.word	0x40021000
 801657c:	080231ac 	.word	0x080231ac

08016580 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016580:	b480      	push	{r7}
 8016582:	b083      	sub	sp, #12
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	220f      	movs	r2, #15
 801658e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016590:	4b12      	ldr	r3, [pc, #72]	; (80165dc <HAL_RCC_GetClockConfig+0x5c>)
 8016592:	689b      	ldr	r3, [r3, #8]
 8016594:	f003 0203 	and.w	r2, r3, #3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801659c:	4b0f      	ldr	r3, [pc, #60]	; (80165dc <HAL_RCC_GetClockConfig+0x5c>)
 801659e:	689b      	ldr	r3, [r3, #8]
 80165a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80165a8:	4b0c      	ldr	r3, [pc, #48]	; (80165dc <HAL_RCC_GetClockConfig+0x5c>)
 80165aa:	689b      	ldr	r3, [r3, #8]
 80165ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80165b4:	4b09      	ldr	r3, [pc, #36]	; (80165dc <HAL_RCC_GetClockConfig+0x5c>)
 80165b6:	689b      	ldr	r3, [r3, #8]
 80165b8:	08db      	lsrs	r3, r3, #3
 80165ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80165c2:	4b07      	ldr	r3, [pc, #28]	; (80165e0 <HAL_RCC_GetClockConfig+0x60>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f003 020f 	and.w	r2, r3, #15
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	601a      	str	r2, [r3, #0]
}
 80165ce:	bf00      	nop
 80165d0:	370c      	adds	r7, #12
 80165d2:	46bd      	mov	sp, r7
 80165d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop
 80165dc:	40021000 	.word	0x40021000
 80165e0:	40022000 	.word	0x40022000

080165e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b086      	sub	sp, #24
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80165ec:	2300      	movs	r3, #0
 80165ee:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80165f0:	4b2c      	ldr	r3, [pc, #176]	; (80166a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80165f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d003      	beq.n	8016604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80165fc:	f7ff f83a 	bl	8015674 <HAL_PWREx_GetVoltageRange>
 8016600:	6138      	str	r0, [r7, #16]
 8016602:	e014      	b.n	801662e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8016604:	4b27      	ldr	r3, [pc, #156]	; (80166a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8016606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016608:	4a26      	ldr	r2, [pc, #152]	; (80166a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801660a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801660e:	6593      	str	r3, [r2, #88]	; 0x58
 8016610:	4b24      	ldr	r3, [pc, #144]	; (80166a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8016612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016618:	60fb      	str	r3, [r7, #12]
 801661a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801661c:	f7ff f82a 	bl	8015674 <HAL_PWREx_GetVoltageRange>
 8016620:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8016622:	4b20      	ldr	r3, [pc, #128]	; (80166a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8016624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016626:	4a1f      	ldr	r2, [pc, #124]	; (80166a4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8016628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801662c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 801662e:	693b      	ldr	r3, [r7, #16]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d003      	beq.n	801663c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8016634:	693b      	ldr	r3, [r7, #16]
 8016636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801663a:	d10b      	bne.n	8016654 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2b80      	cmp	r3, #128	; 0x80
 8016640:	d919      	bls.n	8016676 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2ba0      	cmp	r3, #160	; 0xa0
 8016646:	d902      	bls.n	801664e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8016648:	2302      	movs	r3, #2
 801664a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 801664c:	e013      	b.n	8016676 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801664e:	2301      	movs	r3, #1
 8016650:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8016652:	e010      	b.n	8016676 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2b80      	cmp	r3, #128	; 0x80
 8016658:	d902      	bls.n	8016660 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801665a:	2303      	movs	r3, #3
 801665c:	617b      	str	r3, [r7, #20]
 801665e:	e00a      	b.n	8016676 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2b80      	cmp	r3, #128	; 0x80
 8016664:	d102      	bne.n	801666c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8016666:	2302      	movs	r3, #2
 8016668:	617b      	str	r3, [r7, #20]
 801666a:	e004      	b.n	8016676 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2b70      	cmp	r3, #112	; 0x70
 8016670:	d101      	bne.n	8016676 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8016672:	2301      	movs	r3, #1
 8016674:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8016676:	4b0c      	ldr	r3, [pc, #48]	; (80166a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	f023 020f 	bic.w	r2, r3, #15
 801667e:	490a      	ldr	r1, [pc, #40]	; (80166a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8016680:	697b      	ldr	r3, [r7, #20]
 8016682:	4313      	orrs	r3, r2
 8016684:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8016686:	4b08      	ldr	r3, [pc, #32]	; (80166a8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	f003 030f 	and.w	r3, r3, #15
 801668e:	697a      	ldr	r2, [r7, #20]
 8016690:	429a      	cmp	r2, r3
 8016692:	d001      	beq.n	8016698 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8016694:	2301      	movs	r3, #1
 8016696:	e000      	b.n	801669a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3718      	adds	r7, #24
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	40021000 	.word	0x40021000
 80166a8:	40022000 	.word	0x40022000

080166ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80166ac:	b480      	push	{r7}
 80166ae:	b087      	sub	sp, #28
 80166b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80166b2:	4b31      	ldr	r3, [pc, #196]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80166b4:	68db      	ldr	r3, [r3, #12]
 80166b6:	f003 0303 	and.w	r3, r3, #3
 80166ba:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80166bc:	4b2e      	ldr	r3, [pc, #184]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80166be:	68db      	ldr	r3, [r3, #12]
 80166c0:	091b      	lsrs	r3, r3, #4
 80166c2:	f003 030f 	and.w	r3, r3, #15
 80166c6:	3301      	adds	r3, #1
 80166c8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	2b03      	cmp	r3, #3
 80166ce:	d015      	beq.n	80166fc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2b03      	cmp	r3, #3
 80166d4:	d839      	bhi.n	801674a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	2b01      	cmp	r3, #1
 80166da:	d01c      	beq.n	8016716 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	2b02      	cmp	r3, #2
 80166e0:	d133      	bne.n	801674a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80166e2:	4a26      	ldr	r2, [pc, #152]	; (801677c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80166e4:	68bb      	ldr	r3, [r7, #8]
 80166e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80166ea:	4a23      	ldr	r2, [pc, #140]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80166ec:	68d2      	ldr	r2, [r2, #12]
 80166ee:	0a12      	lsrs	r2, r2, #8
 80166f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80166f4:	fb02 f303 	mul.w	r3, r2, r3
 80166f8:	613b      	str	r3, [r7, #16]
      break;
 80166fa:	e029      	b.n	8016750 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80166fc:	4a20      	ldr	r2, [pc, #128]	; (8016780 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80166fe:	68bb      	ldr	r3, [r7, #8]
 8016700:	fbb2 f3f3 	udiv	r3, r2, r3
 8016704:	4a1c      	ldr	r2, [pc, #112]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8016706:	68d2      	ldr	r2, [r2, #12]
 8016708:	0a12      	lsrs	r2, r2, #8
 801670a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801670e:	fb02 f303 	mul.w	r3, r2, r3
 8016712:	613b      	str	r3, [r7, #16]
      break;
 8016714:	e01c      	b.n	8016750 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8016716:	4b18      	ldr	r3, [pc, #96]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	f003 0308 	and.w	r3, r3, #8
 801671e:	2b00      	cmp	r3, #0
 8016720:	d107      	bne.n	8016732 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8016722:	4b15      	ldr	r3, [pc, #84]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8016724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016728:	0a1b      	lsrs	r3, r3, #8
 801672a:	f003 030f 	and.w	r3, r3, #15
 801672e:	617b      	str	r3, [r7, #20]
 8016730:	e005      	b.n	801673e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8016732:	4b11      	ldr	r3, [pc, #68]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	091b      	lsrs	r3, r3, #4
 8016738:	f003 030f 	and.w	r3, r3, #15
 801673c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 801673e:	4a11      	ldr	r2, [pc, #68]	; (8016784 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016746:	613b      	str	r3, [r7, #16]
        break;
 8016748:	e002      	b.n	8016750 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 801674a:	2300      	movs	r3, #0
 801674c:	613b      	str	r3, [r7, #16]
      break;
 801674e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8016750:	4b09      	ldr	r3, [pc, #36]	; (8016778 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8016752:	68db      	ldr	r3, [r3, #12]
 8016754:	0e5b      	lsrs	r3, r3, #25
 8016756:	f003 0303 	and.w	r3, r3, #3
 801675a:	3301      	adds	r3, #1
 801675c:	005b      	lsls	r3, r3, #1
 801675e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8016760:	693a      	ldr	r2, [r7, #16]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	fbb2 f3f3 	udiv	r3, r2, r3
 8016768:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 801676a:	683b      	ldr	r3, [r7, #0]
}
 801676c:	4618      	mov	r0, r3
 801676e:	371c      	adds	r7, #28
 8016770:	46bd      	mov	sp, r7
 8016772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016776:	4770      	bx	lr
 8016778:	40021000 	.word	0x40021000
 801677c:	00f42400 	.word	0x00f42400
 8016780:	007a1200 	.word	0x007a1200
 8016784:	080231b4 	.word	0x080231b4

08016788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b088      	sub	sp, #32
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8016790:	2300      	movs	r3, #0
 8016792:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8016794:	2300      	movs	r3, #0
 8016796:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d040      	beq.n	8016826 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167a8:	2b80      	cmp	r3, #128	; 0x80
 80167aa:	d02a      	beq.n	8016802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80167ac:	2b80      	cmp	r3, #128	; 0x80
 80167ae:	d825      	bhi.n	80167fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80167b0:	2b60      	cmp	r3, #96	; 0x60
 80167b2:	d026      	beq.n	8016802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80167b4:	2b60      	cmp	r3, #96	; 0x60
 80167b6:	d821      	bhi.n	80167fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80167b8:	2b40      	cmp	r3, #64	; 0x40
 80167ba:	d006      	beq.n	80167ca <HAL_RCCEx_PeriphCLKConfig+0x42>
 80167bc:	2b40      	cmp	r3, #64	; 0x40
 80167be:	d81d      	bhi.n	80167fc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d009      	beq.n	80167d8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80167c4:	2b20      	cmp	r3, #32
 80167c6:	d010      	beq.n	80167ea <HAL_RCCEx_PeriphCLKConfig+0x62>
 80167c8:	e018      	b.n	80167fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80167ca:	4b8f      	ldr	r3, [pc, #572]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80167cc:	68db      	ldr	r3, [r3, #12]
 80167ce:	4a8e      	ldr	r2, [pc, #568]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80167d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80167d4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80167d6:	e015      	b.n	8016804 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	3304      	adds	r3, #4
 80167dc:	2100      	movs	r1, #0
 80167de:	4618      	mov	r0, r3
 80167e0:	f000 fb56 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 80167e4:	4603      	mov	r3, r0
 80167e6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80167e8:	e00c      	b.n	8016804 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	3320      	adds	r3, #32
 80167ee:	2100      	movs	r1, #0
 80167f0:	4618      	mov	r0, r3
 80167f2:	f000 fc33 	bl	801705c <RCCEx_PLLSAI2_Config>
 80167f6:	4603      	mov	r3, r0
 80167f8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80167fa:	e003      	b.n	8016804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80167fc:	2301      	movs	r3, #1
 80167fe:	77fb      	strb	r3, [r7, #31]
        break;
 8016800:	e000      	b.n	8016804 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8016802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016804:	7ffb      	ldrb	r3, [r7, #31]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d10b      	bne.n	8016822 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801680a:	4b7f      	ldr	r3, [pc, #508]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801680c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016810:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016818:	497b      	ldr	r1, [pc, #492]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801681a:	4313      	orrs	r3, r2
 801681c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8016820:	e001      	b.n	8016826 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016822:	7ffb      	ldrb	r3, [r7, #31]
 8016824:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801682e:	2b00      	cmp	r3, #0
 8016830:	d047      	beq.n	80168c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801683a:	d030      	beq.n	801689e <HAL_RCCEx_PeriphCLKConfig+0x116>
 801683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016840:	d82a      	bhi.n	8016898 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8016842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016846:	d02a      	beq.n	801689e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8016848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801684c:	d824      	bhi.n	8016898 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801684e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016852:	d008      	beq.n	8016866 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8016854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016858:	d81e      	bhi.n	8016898 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801685a:	2b00      	cmp	r3, #0
 801685c:	d00a      	beq.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0xec>
 801685e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016862:	d010      	beq.n	8016886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8016864:	e018      	b.n	8016898 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8016866:	4b68      	ldr	r3, [pc, #416]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016868:	68db      	ldr	r3, [r3, #12]
 801686a:	4a67      	ldr	r2, [pc, #412]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801686c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016870:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8016872:	e015      	b.n	80168a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	3304      	adds	r3, #4
 8016878:	2100      	movs	r1, #0
 801687a:	4618      	mov	r0, r3
 801687c:	f000 fb08 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 8016880:	4603      	mov	r3, r0
 8016882:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8016884:	e00c      	b.n	80168a0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	3320      	adds	r3, #32
 801688a:	2100      	movs	r1, #0
 801688c:	4618      	mov	r0, r3
 801688e:	f000 fbe5 	bl	801705c <RCCEx_PLLSAI2_Config>
 8016892:	4603      	mov	r3, r0
 8016894:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8016896:	e003      	b.n	80168a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016898:	2301      	movs	r3, #1
 801689a:	77fb      	strb	r3, [r7, #31]
        break;
 801689c:	e000      	b.n	80168a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 801689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80168a0:	7ffb      	ldrb	r3, [r7, #31]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d10b      	bne.n	80168be <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80168a6:	4b58      	ldr	r3, [pc, #352]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80168a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80168ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80168b4:	4954      	ldr	r1, [pc, #336]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80168b6:	4313      	orrs	r3, r2
 80168b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80168bc:	e001      	b.n	80168c2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168be:	7ffb      	ldrb	r3, [r7, #31]
 80168c0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	f000 80ab 	beq.w	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80168d0:	2300      	movs	r3, #0
 80168d2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80168d4:	4b4c      	ldr	r3, [pc, #304]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80168d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d10d      	bne.n	80168fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80168e0:	4b49      	ldr	r3, [pc, #292]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80168e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168e4:	4a48      	ldr	r2, [pc, #288]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80168e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80168ea:	6593      	str	r3, [r2, #88]	; 0x58
 80168ec:	4b46      	ldr	r3, [pc, #280]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80168ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80168f4:	60fb      	str	r3, [r7, #12]
 80168f6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80168f8:	2301      	movs	r3, #1
 80168fa:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80168fc:	4b43      	ldr	r3, [pc, #268]	; (8016a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	4a42      	ldr	r2, [pc, #264]	; (8016a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8016902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016906:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8016908:	f7fb fd3e 	bl	8012388 <HAL_GetTick>
 801690c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801690e:	e00f      	b.n	8016930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016910:	f7fb fd3a 	bl	8012388 <HAL_GetTick>
 8016914:	4602      	mov	r2, r0
 8016916:	693b      	ldr	r3, [r7, #16]
 8016918:	1ad3      	subs	r3, r2, r3
 801691a:	2b02      	cmp	r3, #2
 801691c:	d908      	bls.n	8016930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801691e:	4b3b      	ldr	r3, [pc, #236]	; (8016a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016926:	2b00      	cmp	r3, #0
 8016928:	d109      	bne.n	801693e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 801692a:	2303      	movs	r3, #3
 801692c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 801692e:	e006      	b.n	801693e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8016930:	4b36      	ldr	r3, [pc, #216]	; (8016a0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016938:	2b00      	cmp	r3, #0
 801693a:	d0e9      	beq.n	8016910 <HAL_RCCEx_PeriphCLKConfig+0x188>
 801693c:	e000      	b.n	8016940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 801693e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8016940:	7ffb      	ldrb	r3, [r7, #31]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d164      	bne.n	8016a10 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8016946:	4b30      	ldr	r3, [pc, #192]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801694c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016950:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d01f      	beq.n	8016998 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801695e:	69ba      	ldr	r2, [r7, #24]
 8016960:	429a      	cmp	r2, r3
 8016962:	d019      	beq.n	8016998 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8016964:	4b28      	ldr	r3, [pc, #160]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801696a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801696e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8016970:	4b25      	ldr	r3, [pc, #148]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016976:	4a24      	ldr	r2, [pc, #144]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801697c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016980:	4b21      	ldr	r3, [pc, #132]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016986:	4a20      	ldr	r2, [pc, #128]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801698c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8016990:	4a1d      	ldr	r2, [pc, #116]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8016998:	69bb      	ldr	r3, [r7, #24]
 801699a:	f003 0301 	and.w	r3, r3, #1
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d01f      	beq.n	80169e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80169a2:	f7fb fcf1 	bl	8012388 <HAL_GetTick>
 80169a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80169a8:	e012      	b.n	80169d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80169aa:	f7fb fced 	bl	8012388 <HAL_GetTick>
 80169ae:	4602      	mov	r2, r0
 80169b0:	693b      	ldr	r3, [r7, #16]
 80169b2:	1ad3      	subs	r3, r2, r3
 80169b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d909      	bls.n	80169d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80169bc:	4b12      	ldr	r3, [pc, #72]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80169be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169c2:	f003 0302 	and.w	r3, r3, #2
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d10a      	bne.n	80169e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80169ca:	2303      	movs	r3, #3
 80169cc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80169ce:	e007      	b.n	80169e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80169d0:	4b0d      	ldr	r3, [pc, #52]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80169d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169d6:	f003 0302 	and.w	r3, r3, #2
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d0e5      	beq.n	80169aa <HAL_RCCEx_PeriphCLKConfig+0x222>
 80169de:	e000      	b.n	80169e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80169e0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80169e2:	7ffb      	ldrb	r3, [r7, #31]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d10c      	bne.n	8016a02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80169e8:	4b07      	ldr	r3, [pc, #28]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80169ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80169f8:	4903      	ldr	r1, [pc, #12]	; (8016a08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80169fa:	4313      	orrs	r3, r2
 80169fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8016a00:	e008      	b.n	8016a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8016a02:	7ffb      	ldrb	r3, [r7, #31]
 8016a04:	77bb      	strb	r3, [r7, #30]
 8016a06:	e005      	b.n	8016a14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8016a08:	40021000 	.word	0x40021000
 8016a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016a10:	7ffb      	ldrb	r3, [r7, #31]
 8016a12:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8016a14:	7dfb      	ldrb	r3, [r7, #23]
 8016a16:	2b01      	cmp	r3, #1
 8016a18:	d105      	bne.n	8016a26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016a1a:	4b9c      	ldr	r3, [pc, #624]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a1e:	4a9b      	ldr	r2, [pc, #620]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	f003 0301 	and.w	r3, r3, #1
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d00a      	beq.n	8016a48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8016a32:	4b96      	ldr	r3, [pc, #600]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a38:	f023 0203 	bic.w	r2, r3, #3
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a40:	4992      	ldr	r1, [pc, #584]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a42:	4313      	orrs	r3, r2
 8016a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	f003 0302 	and.w	r3, r3, #2
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d00a      	beq.n	8016a6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8016a54:	4b8d      	ldr	r3, [pc, #564]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a5a:	f023 020c 	bic.w	r2, r3, #12
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a62:	498a      	ldr	r1, [pc, #552]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a64:	4313      	orrs	r3, r2
 8016a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f003 0304 	and.w	r3, r3, #4
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00a      	beq.n	8016a8c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8016a76:	4b85      	ldr	r3, [pc, #532]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016a84:	4981      	ldr	r1, [pc, #516]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a86:	4313      	orrs	r3, r2
 8016a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	f003 0308 	and.w	r3, r3, #8
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d00a      	beq.n	8016aae <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8016a98:	4b7c      	ldr	r3, [pc, #496]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aa6:	4979      	ldr	r1, [pc, #484]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016aa8:	4313      	orrs	r3, r2
 8016aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f003 0310 	and.w	r3, r3, #16
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00a      	beq.n	8016ad0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8016aba:	4b74      	ldr	r3, [pc, #464]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ac8:	4970      	ldr	r1, [pc, #448]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016aca:	4313      	orrs	r3, r2
 8016acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	f003 0320 	and.w	r3, r3, #32
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00a      	beq.n	8016af2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016adc:	4b6b      	ldr	r3, [pc, #428]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016ae2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016aea:	4968      	ldr	r1, [pc, #416]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016aec:	4313      	orrs	r3, r2
 8016aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00a      	beq.n	8016b14 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016afe:	4b63      	ldr	r3, [pc, #396]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b0c:	495f      	ldr	r1, [pc, #380]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b0e:	4313      	orrs	r3, r2
 8016b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d00a      	beq.n	8016b36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016b20:	4b5a      	ldr	r3, [pc, #360]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016b2e:	4957      	ldr	r1, [pc, #348]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b30:	4313      	orrs	r3, r2
 8016b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00a      	beq.n	8016b58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8016b42:	4b52      	ldr	r3, [pc, #328]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016b50:	494e      	ldr	r1, [pc, #312]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b52:	4313      	orrs	r3, r2
 8016b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d031      	beq.n	8016bc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016b68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016b6c:	d00e      	beq.n	8016b8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8016b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016b72:	d814      	bhi.n	8016b9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d015      	beq.n	8016ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8016b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016b7c:	d10f      	bne.n	8016b9e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8016b7e:	4b43      	ldr	r3, [pc, #268]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b80:	68db      	ldr	r3, [r3, #12]
 8016b82:	4a42      	ldr	r2, [pc, #264]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b88:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8016b8a:	e00c      	b.n	8016ba6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	3304      	adds	r3, #4
 8016b90:	2100      	movs	r1, #0
 8016b92:	4618      	mov	r0, r3
 8016b94:	f000 f97c 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8016b9c:	e003      	b.n	8016ba6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	77fb      	strb	r3, [r7, #31]
        break;
 8016ba2:	e000      	b.n	8016ba6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8016ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016ba6:	7ffb      	ldrb	r3, [r7, #31]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d10b      	bne.n	8016bc4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8016bac:	4b37      	ldr	r3, [pc, #220]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016bb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016bba:	4934      	ldr	r1, [pc, #208]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016bbc:	4313      	orrs	r3, r2
 8016bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8016bc2:	e001      	b.n	8016bc8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016bc4:	7ffb      	ldrb	r3, [r7, #31]
 8016bc6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d00a      	beq.n	8016bea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8016bd4:	4b2d      	ldr	r3, [pc, #180]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016be2:	492a      	ldr	r1, [pc, #168]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016be4:	4313      	orrs	r3, r2
 8016be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00a      	beq.n	8016c0c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8016bf6:	4b25      	ldr	r3, [pc, #148]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c04:	4921      	ldr	r1, [pc, #132]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c06:	4313      	orrs	r3, r2
 8016c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d00a      	beq.n	8016c2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8016c18:	4b1c      	ldr	r3, [pc, #112]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c26:	4919      	ldr	r1, [pc, #100]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c28:	4313      	orrs	r3, r2
 8016c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d00a      	beq.n	8016c50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8016c3a:	4b14      	ldr	r3, [pc, #80]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016c40:	f023 0203 	bic.w	r2, r3, #3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c48:	4910      	ldr	r1, [pc, #64]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c4a:	4313      	orrs	r3, r2
 8016c4c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d02b      	beq.n	8016cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016c5c:	4b0b      	ldr	r3, [pc, #44]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c6a:	4908      	ldr	r1, [pc, #32]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016c7a:	d109      	bne.n	8016c90 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8016c7c:	4b03      	ldr	r3, [pc, #12]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c7e:	68db      	ldr	r3, [r3, #12]
 8016c80:	4a02      	ldr	r2, [pc, #8]	; (8016c8c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8016c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016c86:	60d3      	str	r3, [r2, #12]
 8016c88:	e014      	b.n	8016cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8016c8a:	bf00      	nop
 8016c8c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8016c98:	d10c      	bne.n	8016cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	3304      	adds	r3, #4
 8016c9e:	2101      	movs	r1, #1
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f000 f8f5 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8016caa:	7ffb      	ldrb	r3, [r7, #31]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d001      	beq.n	8016cb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8016cb0:	7ffb      	ldrb	r3, [r7, #31]
 8016cb2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d04a      	beq.n	8016d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016cc8:	d108      	bne.n	8016cdc <HAL_RCCEx_PeriphCLKConfig+0x554>
 8016cca:	4b70      	ldr	r3, [pc, #448]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016cd0:	4a6e      	ldr	r2, [pc, #440]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016cd6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8016cda:	e012      	b.n	8016d02 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8016cdc:	4b6b      	ldr	r3, [pc, #428]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cea:	4968      	ldr	r1, [pc, #416]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016cec:	4313      	orrs	r3, r2
 8016cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8016cf2:	4b66      	ldr	r3, [pc, #408]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016cf8:	4a64      	ldr	r2, [pc, #400]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016cfe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8016d0a:	d10d      	bne.n	8016d28 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	3304      	adds	r3, #4
 8016d10:	2101      	movs	r1, #1
 8016d12:	4618      	mov	r0, r3
 8016d14:	f000 f8bc 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8016d1c:	7ffb      	ldrb	r3, [r7, #31]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d019      	beq.n	8016d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8016d22:	7ffb      	ldrb	r3, [r7, #31]
 8016d24:	77bb      	strb	r3, [r7, #30]
 8016d26:	e016      	b.n	8016d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016d30:	d106      	bne.n	8016d40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8016d32:	4b56      	ldr	r3, [pc, #344]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d34:	68db      	ldr	r3, [r3, #12]
 8016d36:	4a55      	ldr	r2, [pc, #340]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d3c:	60d3      	str	r3, [r2, #12]
 8016d3e:	e00a      	b.n	8016d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016d48:	d105      	bne.n	8016d56 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8016d4a:	4b50      	ldr	r3, [pc, #320]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	4a4f      	ldr	r2, [pc, #316]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016d54:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d028      	beq.n	8016db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016d62:	4b4a      	ldr	r3, [pc, #296]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016d68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016d70:	4946      	ldr	r1, [pc, #280]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d72:	4313      	orrs	r3, r2
 8016d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8016d80:	d106      	bne.n	8016d90 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8016d82:	4b42      	ldr	r3, [pc, #264]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d84:	68db      	ldr	r3, [r3, #12]
 8016d86:	4a41      	ldr	r2, [pc, #260]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d8c:	60d3      	str	r3, [r2, #12]
 8016d8e:	e011      	b.n	8016db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8016d98:	d10c      	bne.n	8016db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	3304      	adds	r3, #4
 8016d9e:	2101      	movs	r1, #1
 8016da0:	4618      	mov	r0, r3
 8016da2:	f000 f875 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 8016da6:	4603      	mov	r3, r0
 8016da8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8016daa:	7ffb      	ldrb	r3, [r7, #31]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d001      	beq.n	8016db4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8016db0:	7ffb      	ldrb	r3, [r7, #31]
 8016db2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d01e      	beq.n	8016dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016dc0:	4b32      	ldr	r3, [pc, #200]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016dc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016dd0:	492e      	ldr	r1, [pc, #184]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016dd2:	4313      	orrs	r3, r2
 8016dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016de2:	d10c      	bne.n	8016dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	3304      	adds	r3, #4
 8016de8:	2102      	movs	r1, #2
 8016dea:	4618      	mov	r0, r3
 8016dec:	f000 f850 	bl	8016e90 <RCCEx_PLLSAI1_Config>
 8016df0:	4603      	mov	r3, r0
 8016df2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8016df4:	7ffb      	ldrb	r3, [r7, #31]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d001      	beq.n	8016dfe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8016dfa:	7ffb      	ldrb	r3, [r7, #31]
 8016dfc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d00b      	beq.n	8016e22 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016e0a:	4b20      	ldr	r3, [pc, #128]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016e10:	f023 0204 	bic.w	r2, r3, #4
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e1a:	491c      	ldr	r1, [pc, #112]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e1c:	4313      	orrs	r3, r2
 8016e1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d00b      	beq.n	8016e46 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8016e2e:	4b17      	ldr	r3, [pc, #92]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016e34:	f023 0218 	bic.w	r2, r3, #24
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016e3e:	4913      	ldr	r1, [pc, #76]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e40:	4313      	orrs	r3, r2
 8016e42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d017      	beq.n	8016e82 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8016e52:	4b0e      	ldr	r3, [pc, #56]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e62:	490a      	ldr	r1, [pc, #40]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e64:	4313      	orrs	r3, r2
 8016e66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016e74:	d105      	bne.n	8016e82 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8016e76:	4b05      	ldr	r3, [pc, #20]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e78:	68db      	ldr	r3, [r3, #12]
 8016e7a:	4a04      	ldr	r2, [pc, #16]	; (8016e8c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8016e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8016e82:	7fbb      	ldrb	r3, [r7, #30]
}
 8016e84:	4618      	mov	r0, r3
 8016e86:	3720      	adds	r7, #32
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	bd80      	pop	{r7, pc}
 8016e8c:	40021000 	.word	0x40021000

08016e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b084      	sub	sp, #16
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2b03      	cmp	r3, #3
 8016ea4:	d018      	beq.n	8016ed8 <RCCEx_PLLSAI1_Config+0x48>
 8016ea6:	2b03      	cmp	r3, #3
 8016ea8:	d81f      	bhi.n	8016eea <RCCEx_PLLSAI1_Config+0x5a>
 8016eaa:	2b01      	cmp	r3, #1
 8016eac:	d002      	beq.n	8016eb4 <RCCEx_PLLSAI1_Config+0x24>
 8016eae:	2b02      	cmp	r3, #2
 8016eb0:	d009      	beq.n	8016ec6 <RCCEx_PLLSAI1_Config+0x36>
 8016eb2:	e01a      	b.n	8016eea <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8016eb4:	4b65      	ldr	r3, [pc, #404]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	f003 0302 	and.w	r3, r3, #2
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d117      	bne.n	8016ef0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8016ec0:	2301      	movs	r3, #1
 8016ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016ec4:	e014      	b.n	8016ef0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8016ec6:	4b61      	ldr	r3, [pc, #388]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d110      	bne.n	8016ef4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8016ed2:	2301      	movs	r3, #1
 8016ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016ed6:	e00d      	b.n	8016ef4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8016ed8:	4b5c      	ldr	r3, [pc, #368]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d109      	bne.n	8016ef8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016ee8:	e006      	b.n	8016ef8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8016eea:	2301      	movs	r3, #1
 8016eec:	73fb      	strb	r3, [r7, #15]
      break;
 8016eee:	e004      	b.n	8016efa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8016ef0:	bf00      	nop
 8016ef2:	e002      	b.n	8016efa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8016ef4:	bf00      	nop
 8016ef6:	e000      	b.n	8016efa <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8016ef8:	bf00      	nop
  }

  if (status == HAL_OK)
 8016efa:	7bfb      	ldrb	r3, [r7, #15]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f040 809f 	bne.w	8017040 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8016f02:	4b52      	ldr	r3, [pc, #328]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	4a51      	ldr	r2, [pc, #324]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016f0e:	f7fb fa3b 	bl	8012388 <HAL_GetTick>
 8016f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8016f14:	e00f      	b.n	8016f36 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8016f16:	f7fb fa37 	bl	8012388 <HAL_GetTick>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	1ad3      	subs	r3, r2, r3
 8016f20:	2b02      	cmp	r3, #2
 8016f22:	d908      	bls.n	8016f36 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8016f24:	4b49      	ldr	r3, [pc, #292]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d009      	beq.n	8016f44 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8016f30:	2303      	movs	r3, #3
 8016f32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8016f34:	e006      	b.n	8016f44 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8016f36:	4b45      	ldr	r3, [pc, #276]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d1e9      	bne.n	8016f16 <RCCEx_PLLSAI1_Config+0x86>
 8016f42:	e000      	b.n	8016f46 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8016f44:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8016f46:	7bfb      	ldrb	r3, [r7, #15]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d179      	bne.n	8017040 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d116      	bne.n	8016f80 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8016f52:	4b3e      	ldr	r3, [pc, #248]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f54:	691a      	ldr	r2, [r3, #16]
 8016f56:	4b3e      	ldr	r3, [pc, #248]	; (8017050 <RCCEx_PLLSAI1_Config+0x1c0>)
 8016f58:	4013      	ands	r3, r2
 8016f5a:	687a      	ldr	r2, [r7, #4]
 8016f5c:	6892      	ldr	r2, [r2, #8]
 8016f5e:	0211      	lsls	r1, r2, #8
 8016f60:	687a      	ldr	r2, [r7, #4]
 8016f62:	68d2      	ldr	r2, [r2, #12]
 8016f64:	06d2      	lsls	r2, r2, #27
 8016f66:	4311      	orrs	r1, r2
 8016f68:	687a      	ldr	r2, [r7, #4]
 8016f6a:	6852      	ldr	r2, [r2, #4]
 8016f6c:	3a01      	subs	r2, #1
 8016f6e:	0112      	lsls	r2, r2, #4
 8016f70:	4311      	orrs	r1, r2
 8016f72:	687a      	ldr	r2, [r7, #4]
 8016f74:	6812      	ldr	r2, [r2, #0]
 8016f76:	430a      	orrs	r2, r1
 8016f78:	4934      	ldr	r1, [pc, #208]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f7a:	4313      	orrs	r3, r2
 8016f7c:	610b      	str	r3, [r1, #16]
 8016f7e:	e033      	b.n	8016fe8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d118      	bne.n	8016fb8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8016f86:	4b31      	ldr	r3, [pc, #196]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016f88:	691a      	ldr	r2, [r3, #16]
 8016f8a:	4b32      	ldr	r3, [pc, #200]	; (8017054 <RCCEx_PLLSAI1_Config+0x1c4>)
 8016f8c:	4013      	ands	r3, r2
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	6892      	ldr	r2, [r2, #8]
 8016f92:	0211      	lsls	r1, r2, #8
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	6912      	ldr	r2, [r2, #16]
 8016f98:	0852      	lsrs	r2, r2, #1
 8016f9a:	3a01      	subs	r2, #1
 8016f9c:	0552      	lsls	r2, r2, #21
 8016f9e:	4311      	orrs	r1, r2
 8016fa0:	687a      	ldr	r2, [r7, #4]
 8016fa2:	6852      	ldr	r2, [r2, #4]
 8016fa4:	3a01      	subs	r2, #1
 8016fa6:	0112      	lsls	r2, r2, #4
 8016fa8:	4311      	orrs	r1, r2
 8016faa:	687a      	ldr	r2, [r7, #4]
 8016fac:	6812      	ldr	r2, [r2, #0]
 8016fae:	430a      	orrs	r2, r1
 8016fb0:	4926      	ldr	r1, [pc, #152]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016fb2:	4313      	orrs	r3, r2
 8016fb4:	610b      	str	r3, [r1, #16]
 8016fb6:	e017      	b.n	8016fe8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8016fb8:	4b24      	ldr	r3, [pc, #144]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016fba:	691a      	ldr	r2, [r3, #16]
 8016fbc:	4b26      	ldr	r3, [pc, #152]	; (8017058 <RCCEx_PLLSAI1_Config+0x1c8>)
 8016fbe:	4013      	ands	r3, r2
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	6892      	ldr	r2, [r2, #8]
 8016fc4:	0211      	lsls	r1, r2, #8
 8016fc6:	687a      	ldr	r2, [r7, #4]
 8016fc8:	6952      	ldr	r2, [r2, #20]
 8016fca:	0852      	lsrs	r2, r2, #1
 8016fcc:	3a01      	subs	r2, #1
 8016fce:	0652      	lsls	r2, r2, #25
 8016fd0:	4311      	orrs	r1, r2
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	6852      	ldr	r2, [r2, #4]
 8016fd6:	3a01      	subs	r2, #1
 8016fd8:	0112      	lsls	r2, r2, #4
 8016fda:	4311      	orrs	r1, r2
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	6812      	ldr	r2, [r2, #0]
 8016fe0:	430a      	orrs	r2, r1
 8016fe2:	491a      	ldr	r1, [pc, #104]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016fe4:	4313      	orrs	r3, r2
 8016fe6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8016fe8:	4b18      	ldr	r3, [pc, #96]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	4a17      	ldr	r2, [pc, #92]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8016fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016ff4:	f7fb f9c8 	bl	8012388 <HAL_GetTick>
 8016ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8016ffa:	e00f      	b.n	801701c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8016ffc:	f7fb f9c4 	bl	8012388 <HAL_GetTick>
 8017000:	4602      	mov	r2, r0
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	1ad3      	subs	r3, r2, r3
 8017006:	2b02      	cmp	r3, #2
 8017008:	d908      	bls.n	801701c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801700a:	4b10      	ldr	r3, [pc, #64]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017012:	2b00      	cmp	r3, #0
 8017014:	d109      	bne.n	801702a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8017016:	2303      	movs	r3, #3
 8017018:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801701a:	e006      	b.n	801702a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801701c:	4b0b      	ldr	r3, [pc, #44]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017024:	2b00      	cmp	r3, #0
 8017026:	d0e9      	beq.n	8016ffc <RCCEx_PLLSAI1_Config+0x16c>
 8017028:	e000      	b.n	801702c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 801702a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 801702c:	7bfb      	ldrb	r3, [r7, #15]
 801702e:	2b00      	cmp	r3, #0
 8017030:	d106      	bne.n	8017040 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8017032:	4b06      	ldr	r3, [pc, #24]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 8017034:	691a      	ldr	r2, [r3, #16]
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	699b      	ldr	r3, [r3, #24]
 801703a:	4904      	ldr	r1, [pc, #16]	; (801704c <RCCEx_PLLSAI1_Config+0x1bc>)
 801703c:	4313      	orrs	r3, r2
 801703e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8017040:	7bfb      	ldrb	r3, [r7, #15]
}
 8017042:	4618      	mov	r0, r3
 8017044:	3710      	adds	r7, #16
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	40021000 	.word	0x40021000
 8017050:	07ff800c 	.word	0x07ff800c
 8017054:	ff9f800c 	.word	0xff9f800c
 8017058:	f9ff800c 	.word	0xf9ff800c

0801705c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b084      	sub	sp, #16
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017066:	2300      	movs	r3, #0
 8017068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	2b03      	cmp	r3, #3
 8017070:	d018      	beq.n	80170a4 <RCCEx_PLLSAI2_Config+0x48>
 8017072:	2b03      	cmp	r3, #3
 8017074:	d81f      	bhi.n	80170b6 <RCCEx_PLLSAI2_Config+0x5a>
 8017076:	2b01      	cmp	r3, #1
 8017078:	d002      	beq.n	8017080 <RCCEx_PLLSAI2_Config+0x24>
 801707a:	2b02      	cmp	r3, #2
 801707c:	d009      	beq.n	8017092 <RCCEx_PLLSAI2_Config+0x36>
 801707e:	e01a      	b.n	80170b6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8017080:	4b4a      	ldr	r3, [pc, #296]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	f003 0302 	and.w	r3, r3, #2
 8017088:	2b00      	cmp	r3, #0
 801708a:	d117      	bne.n	80170bc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 801708c:	2301      	movs	r3, #1
 801708e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8017090:	e014      	b.n	80170bc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8017092:	4b46      	ldr	r3, [pc, #280]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801709a:	2b00      	cmp	r3, #0
 801709c:	d110      	bne.n	80170c0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 801709e:	2301      	movs	r3, #1
 80170a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80170a2:	e00d      	b.n	80170c0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80170a4:	4b41      	ldr	r3, [pc, #260]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d109      	bne.n	80170c4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80170b0:	2301      	movs	r3, #1
 80170b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80170b4:	e006      	b.n	80170c4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80170b6:	2301      	movs	r3, #1
 80170b8:	73fb      	strb	r3, [r7, #15]
      break;
 80170ba:	e004      	b.n	80170c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80170bc:	bf00      	nop
 80170be:	e002      	b.n	80170c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80170c0:	bf00      	nop
 80170c2:	e000      	b.n	80170c6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80170c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80170c6:	7bfb      	ldrb	r3, [r7, #15]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d169      	bne.n	80171a0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80170cc:	4b37      	ldr	r3, [pc, #220]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	4a36      	ldr	r2, [pc, #216]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 80170d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80170d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80170d8:	f7fb f956 	bl	8012388 <HAL_GetTick>
 80170dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80170de:	e00f      	b.n	8017100 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80170e0:	f7fb f952 	bl	8012388 <HAL_GetTick>
 80170e4:	4602      	mov	r2, r0
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	d908      	bls.n	8017100 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80170ee:	4b2f      	ldr	r3, [pc, #188]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d009      	beq.n	801710e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80170fa:	2303      	movs	r3, #3
 80170fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80170fe:	e006      	b.n	801710e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8017100:	4b2a      	ldr	r3, [pc, #168]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017108:	2b00      	cmp	r3, #0
 801710a:	d1e9      	bne.n	80170e0 <RCCEx_PLLSAI2_Config+0x84>
 801710c:	e000      	b.n	8017110 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 801710e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8017110:	7bfb      	ldrb	r3, [r7, #15]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d144      	bne.n	80171a0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d115      	bne.n	8017148 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801711c:	4b23      	ldr	r3, [pc, #140]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 801711e:	695a      	ldr	r2, [r3, #20]
 8017120:	4b23      	ldr	r3, [pc, #140]	; (80171b0 <RCCEx_PLLSAI2_Config+0x154>)
 8017122:	4013      	ands	r3, r2
 8017124:	687a      	ldr	r2, [r7, #4]
 8017126:	6892      	ldr	r2, [r2, #8]
 8017128:	0211      	lsls	r1, r2, #8
 801712a:	687a      	ldr	r2, [r7, #4]
 801712c:	68d2      	ldr	r2, [r2, #12]
 801712e:	06d2      	lsls	r2, r2, #27
 8017130:	4311      	orrs	r1, r2
 8017132:	687a      	ldr	r2, [r7, #4]
 8017134:	6852      	ldr	r2, [r2, #4]
 8017136:	3a01      	subs	r2, #1
 8017138:	0112      	lsls	r2, r2, #4
 801713a:	4311      	orrs	r1, r2
 801713c:	687a      	ldr	r2, [r7, #4]
 801713e:	6812      	ldr	r2, [r2, #0]
 8017140:	430a      	orrs	r2, r1
 8017142:	491a      	ldr	r1, [pc, #104]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 8017144:	4313      	orrs	r3, r2
 8017146:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8017148:	4b18      	ldr	r3, [pc, #96]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	4a17      	ldr	r2, [pc, #92]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 801714e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017152:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017154:	f7fb f918 	bl	8012388 <HAL_GetTick>
 8017158:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801715a:	e00f      	b.n	801717c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801715c:	f7fb f914 	bl	8012388 <HAL_GetTick>
 8017160:	4602      	mov	r2, r0
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	1ad3      	subs	r3, r2, r3
 8017166:	2b02      	cmp	r3, #2
 8017168:	d908      	bls.n	801717c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801716a:	4b10      	ldr	r3, [pc, #64]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017172:	2b00      	cmp	r3, #0
 8017174:	d109      	bne.n	801718a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8017176:	2303      	movs	r3, #3
 8017178:	73fb      	strb	r3, [r7, #15]
          }
          break;
 801717a:	e006      	b.n	801718a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801717c:	4b0b      	ldr	r3, [pc, #44]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017184:	2b00      	cmp	r3, #0
 8017186:	d0e9      	beq.n	801715c <RCCEx_PLLSAI2_Config+0x100>
 8017188:	e000      	b.n	801718c <RCCEx_PLLSAI2_Config+0x130>
          break;
 801718a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 801718c:	7bfb      	ldrb	r3, [r7, #15]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d106      	bne.n	80171a0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8017192:	4b06      	ldr	r3, [pc, #24]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 8017194:	695a      	ldr	r2, [r3, #20]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	691b      	ldr	r3, [r3, #16]
 801719a:	4904      	ldr	r1, [pc, #16]	; (80171ac <RCCEx_PLLSAI2_Config+0x150>)
 801719c:	4313      	orrs	r3, r2
 801719e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80171a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3710      	adds	r7, #16
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}
 80171aa:	bf00      	nop
 80171ac:	40021000 	.word	0x40021000
 80171b0:	07ff800c 	.word	0x07ff800c

080171b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b084      	sub	sp, #16
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80171bc:	2301      	movs	r3, #1
 80171be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d066      	beq.n	8017294 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80171cc:	b2db      	uxtb	r3, r3
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d106      	bne.n	80171e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2200      	movs	r2, #0
 80171d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f7fa fb5a 	bl	8011894 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2202      	movs	r2, #2
 80171e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	68db      	ldr	r3, [r3, #12]
 80171ee:	f003 0310 	and.w	r3, r3, #16
 80171f2:	2b10      	cmp	r3, #16
 80171f4:	d045      	beq.n	8017282 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80171f6:	4b2a      	ldr	r3, [pc, #168]	; (80172a0 <HAL_RTC_Init+0xec>)
 80171f8:	22ca      	movs	r2, #202	; 0xca
 80171fa:	625a      	str	r2, [r3, #36]	; 0x24
 80171fc:	4b28      	ldr	r3, [pc, #160]	; (80172a0 <HAL_RTC_Init+0xec>)
 80171fe:	2253      	movs	r2, #83	; 0x53
 8017200:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f000 f872 	bl	80172ec <RTC_EnterInitMode>
 8017208:	4603      	mov	r3, r0
 801720a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801720c:	7bfb      	ldrb	r3, [r7, #15]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d121      	bne.n	8017256 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8017212:	4b23      	ldr	r3, [pc, #140]	; (80172a0 <HAL_RTC_Init+0xec>)
 8017214:	699b      	ldr	r3, [r3, #24]
 8017216:	4a22      	ldr	r2, [pc, #136]	; (80172a0 <HAL_RTC_Init+0xec>)
 8017218:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 801721c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017220:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8017222:	4b1f      	ldr	r3, [pc, #124]	; (80172a0 <HAL_RTC_Init+0xec>)
 8017224:	699a      	ldr	r2, [r3, #24]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6859      	ldr	r1, [r3, #4]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	691b      	ldr	r3, [r3, #16]
 801722e:	4319      	orrs	r1, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	699b      	ldr	r3, [r3, #24]
 8017234:	430b      	orrs	r3, r1
 8017236:	491a      	ldr	r1, [pc, #104]	; (80172a0 <HAL_RTC_Init+0xec>)
 8017238:	4313      	orrs	r3, r2
 801723a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68da      	ldr	r2, [r3, #12]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	689b      	ldr	r3, [r3, #8]
 8017244:	041b      	lsls	r3, r3, #16
 8017246:	4916      	ldr	r1, [pc, #88]	; (80172a0 <HAL_RTC_Init+0xec>)
 8017248:	4313      	orrs	r3, r2
 801724a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f000 f881 	bl	8017354 <RTC_ExitInitMode>
 8017252:	4603      	mov	r3, r0
 8017254:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8017256:	7bfb      	ldrb	r3, [r7, #15]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d10e      	bne.n	801727a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 801725c:	4b10      	ldr	r3, [pc, #64]	; (80172a0 <HAL_RTC_Init+0xec>)
 801725e:	699b      	ldr	r3, [r3, #24]
 8017260:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	6a19      	ldr	r1, [r3, #32]
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	69db      	ldr	r3, [r3, #28]
 801726c:	4319      	orrs	r1, r3
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	695b      	ldr	r3, [r3, #20]
 8017272:	430b      	orrs	r3, r1
 8017274:	490a      	ldr	r1, [pc, #40]	; (80172a0 <HAL_RTC_Init+0xec>)
 8017276:	4313      	orrs	r3, r2
 8017278:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801727a:	4b09      	ldr	r3, [pc, #36]	; (80172a0 <HAL_RTC_Init+0xec>)
 801727c:	22ff      	movs	r2, #255	; 0xff
 801727e:	625a      	str	r2, [r3, #36]	; 0x24
 8017280:	e001      	b.n	8017286 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8017282:	2300      	movs	r3, #0
 8017284:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8017286:	7bfb      	ldrb	r3, [r7, #15]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d103      	bne.n	8017294 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2201      	movs	r2, #1
 8017290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8017294:	7bfb      	ldrb	r3, [r7, #15]
}
 8017296:	4618      	mov	r0, r3
 8017298:	3710      	adds	r7, #16
 801729a:	46bd      	mov	sp, r7
 801729c:	bd80      	pop	{r7, pc}
 801729e:	bf00      	nop
 80172a0:	40002800 	.word	0x40002800

080172a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b084      	sub	sp, #16
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80172ac:	4b0d      	ldr	r3, [pc, #52]	; (80172e4 <HAL_RTC_WaitForSynchro+0x40>)
 80172ae:	4a0e      	ldr	r2, [pc, #56]	; (80172e8 <HAL_RTC_WaitForSynchro+0x44>)
 80172b0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80172b2:	f7fb f869 	bl	8012388 <HAL_GetTick>
 80172b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80172b8:	e009      	b.n	80172ce <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80172ba:	f7fb f865 	bl	8012388 <HAL_GetTick>
 80172be:	4602      	mov	r2, r0
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	1ad3      	subs	r3, r2, r3
 80172c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80172c8:	d901      	bls.n	80172ce <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80172ca:	2303      	movs	r3, #3
 80172cc:	e006      	b.n	80172dc <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80172ce:	4b05      	ldr	r3, [pc, #20]	; (80172e4 <HAL_RTC_WaitForSynchro+0x40>)
 80172d0:	68db      	ldr	r3, [r3, #12]
 80172d2:	f003 0320 	and.w	r3, r3, #32
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d0ef      	beq.n	80172ba <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80172da:	2300      	movs	r3, #0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3710      	adds	r7, #16
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}
 80172e4:	40002800 	.word	0x40002800
 80172e8:	0001005c 	.word	0x0001005c

080172ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b084      	sub	sp, #16
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80172f4:	2300      	movs	r3, #0
 80172f6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80172f8:	4b15      	ldr	r3, [pc, #84]	; (8017350 <RTC_EnterInitMode+0x64>)
 80172fa:	68db      	ldr	r3, [r3, #12]
 80172fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017300:	2b00      	cmp	r3, #0
 8017302:	d120      	bne.n	8017346 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017304:	4b12      	ldr	r3, [pc, #72]	; (8017350 <RTC_EnterInitMode+0x64>)
 8017306:	68db      	ldr	r3, [r3, #12]
 8017308:	4a11      	ldr	r2, [pc, #68]	; (8017350 <RTC_EnterInitMode+0x64>)
 801730a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801730e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8017310:	f7fb f83a 	bl	8012388 <HAL_GetTick>
 8017314:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8017316:	e00d      	b.n	8017334 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8017318:	f7fb f836 	bl	8012388 <HAL_GetTick>
 801731c:	4602      	mov	r2, r0
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	1ad3      	subs	r3, r2, r3
 8017322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017326:	d905      	bls.n	8017334 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8017328:	2303      	movs	r3, #3
 801732a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2203      	movs	r2, #3
 8017330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8017334:	4b06      	ldr	r3, [pc, #24]	; (8017350 <RTC_EnterInitMode+0x64>)
 8017336:	68db      	ldr	r3, [r3, #12]
 8017338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801733c:	2b00      	cmp	r3, #0
 801733e:	d102      	bne.n	8017346 <RTC_EnterInitMode+0x5a>
 8017340:	7bfb      	ldrb	r3, [r7, #15]
 8017342:	2b03      	cmp	r3, #3
 8017344:	d1e8      	bne.n	8017318 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8017346:	7bfb      	ldrb	r3, [r7, #15]
}
 8017348:	4618      	mov	r0, r3
 801734a:	3710      	adds	r7, #16
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}
 8017350:	40002800 	.word	0x40002800

08017354 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801735c:	2300      	movs	r3, #0
 801735e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8017360:	4b1a      	ldr	r3, [pc, #104]	; (80173cc <RTC_ExitInitMode+0x78>)
 8017362:	68db      	ldr	r3, [r3, #12]
 8017364:	4a19      	ldr	r2, [pc, #100]	; (80173cc <RTC_ExitInitMode+0x78>)
 8017366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801736a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801736c:	4b17      	ldr	r3, [pc, #92]	; (80173cc <RTC_ExitInitMode+0x78>)
 801736e:	699b      	ldr	r3, [r3, #24]
 8017370:	f003 0320 	and.w	r3, r3, #32
 8017374:	2b00      	cmp	r3, #0
 8017376:	d10c      	bne.n	8017392 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f7ff ff93 	bl	80172a4 <HAL_RTC_WaitForSynchro>
 801737e:	4603      	mov	r3, r0
 8017380:	2b00      	cmp	r3, #0
 8017382:	d01e      	beq.n	80173c2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2203      	movs	r2, #3
 8017388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 801738c:	2303      	movs	r3, #3
 801738e:	73fb      	strb	r3, [r7, #15]
 8017390:	e017      	b.n	80173c2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8017392:	4b0e      	ldr	r3, [pc, #56]	; (80173cc <RTC_ExitInitMode+0x78>)
 8017394:	699b      	ldr	r3, [r3, #24]
 8017396:	4a0d      	ldr	r2, [pc, #52]	; (80173cc <RTC_ExitInitMode+0x78>)
 8017398:	f023 0320 	bic.w	r3, r3, #32
 801739c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f7ff ff80 	bl	80172a4 <HAL_RTC_WaitForSynchro>
 80173a4:	4603      	mov	r3, r0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d005      	beq.n	80173b6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	2203      	movs	r2, #3
 80173ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80173b2:	2303      	movs	r3, #3
 80173b4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80173b6:	4b05      	ldr	r3, [pc, #20]	; (80173cc <RTC_ExitInitMode+0x78>)
 80173b8:	699b      	ldr	r3, [r3, #24]
 80173ba:	4a04      	ldr	r2, [pc, #16]	; (80173cc <RTC_ExitInitMode+0x78>)
 80173bc:	f043 0320 	orr.w	r3, r3, #32
 80173c0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80173c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3710      	adds	r7, #16
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	40002800 	.word	0x40002800

080173d0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80173d0:	b480      	push	{r7}
 80173d2:	b083      	sub	sp, #12
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	685b      	ldr	r3, [r3, #4]
 80173e2:	490f      	ldr	r1, [pc, #60]	; (8017420 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80173e4:	4313      	orrs	r3, r2
 80173e6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	689a      	ldr	r2, [r3, #8]
 80173ec:	683b      	ldr	r3, [r7, #0]
 80173ee:	68db      	ldr	r3, [r3, #12]
 80173f0:	490c      	ldr	r1, [pc, #48]	; (8017424 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80173f2:	4313      	orrs	r3, r2
 80173f4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80173f6:	4b0b      	ldr	r3, [pc, #44]	; (8017424 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80173f8:	6a1b      	ldr	r3, [r3, #32]
 80173fa:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80173fe:	683b      	ldr	r3, [r7, #0]
 8017400:	6919      	ldr	r1, [r3, #16]
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	695b      	ldr	r3, [r3, #20]
 8017406:	041b      	lsls	r3, r3, #16
 8017408:	430b      	orrs	r3, r1
 801740a:	4906      	ldr	r1, [pc, #24]	; (8017424 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801740c:	4313      	orrs	r3, r2
 801740e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8017410:	2300      	movs	r3, #0
}
 8017412:	4618      	mov	r0, r3
 8017414:	370c      	adds	r7, #12
 8017416:	46bd      	mov	sp, r7
 8017418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741c:	4770      	bx	lr
 801741e:	bf00      	nop
 8017420:	40002800 	.word	0x40002800
 8017424:	40003400 	.word	0x40003400

08017428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b084      	sub	sp, #16
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d101      	bne.n	801743a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8017436:	2301      	movs	r3, #1
 8017438:	e095      	b.n	8017566 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801743e:	2b00      	cmp	r3, #0
 8017440:	d108      	bne.n	8017454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	685b      	ldr	r3, [r3, #4]
 8017446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801744a:	d009      	beq.n	8017460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2200      	movs	r2, #0
 8017450:	61da      	str	r2, [r3, #28]
 8017452:	e005      	b.n	8017460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2200      	movs	r2, #0
 8017458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2200      	movs	r2, #0
 801745e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	2200      	movs	r2, #0
 8017464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801746c:	b2db      	uxtb	r3, r3
 801746e:	2b00      	cmp	r3, #0
 8017470:	d106      	bne.n	8017480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f7fa fa48 	bl	8011910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2202      	movs	r2, #2
 8017484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	681a      	ldr	r2, [r3, #0]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017496:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	68db      	ldr	r3, [r3, #12]
 801749c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80174a0:	d902      	bls.n	80174a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80174a2:	2300      	movs	r3, #0
 80174a4:	60fb      	str	r3, [r7, #12]
 80174a6:	e002      	b.n	80174ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80174a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80174ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80174b6:	d007      	beq.n	80174c8 <HAL_SPI_Init+0xa0>
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	68db      	ldr	r3, [r3, #12]
 80174bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80174c0:	d002      	beq.n	80174c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2200      	movs	r2, #0
 80174c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	689b      	ldr	r3, [r3, #8]
 80174d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80174d8:	431a      	orrs	r2, r3
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	691b      	ldr	r3, [r3, #16]
 80174de:	f003 0302 	and.w	r3, r3, #2
 80174e2:	431a      	orrs	r2, r3
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	695b      	ldr	r3, [r3, #20]
 80174e8:	f003 0301 	and.w	r3, r3, #1
 80174ec:	431a      	orrs	r2, r3
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	699b      	ldr	r3, [r3, #24]
 80174f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80174f6:	431a      	orrs	r2, r3
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	69db      	ldr	r3, [r3, #28]
 80174fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8017500:	431a      	orrs	r2, r3
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6a1b      	ldr	r3, [r3, #32]
 8017506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801750a:	ea42 0103 	orr.w	r1, r2, r3
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017512:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	430a      	orrs	r2, r1
 801751c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	699b      	ldr	r3, [r3, #24]
 8017522:	0c1b      	lsrs	r3, r3, #16
 8017524:	f003 0204 	and.w	r2, r3, #4
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801752c:	f003 0310 	and.w	r3, r3, #16
 8017530:	431a      	orrs	r2, r3
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017536:	f003 0308 	and.w	r3, r3, #8
 801753a:	431a      	orrs	r2, r3
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8017544:	ea42 0103 	orr.w	r1, r2, r3
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	430a      	orrs	r2, r1
 8017554:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2200      	movs	r2, #0
 801755a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2201      	movs	r2, #1
 8017560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8017564:	2300      	movs	r3, #0
}
 8017566:	4618      	mov	r0, r3
 8017568:	3710      	adds	r7, #16
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}

0801756e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801756e:	b580      	push	{r7, lr}
 8017570:	b088      	sub	sp, #32
 8017572:	af00      	add	r7, sp, #0
 8017574:	60f8      	str	r0, [r7, #12]
 8017576:	60b9      	str	r1, [r7, #8]
 8017578:	603b      	str	r3, [r7, #0]
 801757a:	4613      	mov	r3, r2
 801757c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801757e:	2300      	movs	r3, #0
 8017580:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017588:	2b01      	cmp	r3, #1
 801758a:	d101      	bne.n	8017590 <HAL_SPI_Transmit+0x22>
 801758c:	2302      	movs	r3, #2
 801758e:	e158      	b.n	8017842 <HAL_SPI_Transmit+0x2d4>
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	2201      	movs	r2, #1
 8017594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017598:	f7fa fef6 	bl	8012388 <HAL_GetTick>
 801759c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801759e:	88fb      	ldrh	r3, [r7, #6]
 80175a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	d002      	beq.n	80175b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80175ae:	2302      	movs	r3, #2
 80175b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80175b2:	e13d      	b.n	8017830 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d002      	beq.n	80175c0 <HAL_SPI_Transmit+0x52>
 80175ba:	88fb      	ldrh	r3, [r7, #6]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d102      	bne.n	80175c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80175c0:	2301      	movs	r3, #1
 80175c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80175c4:	e134      	b.n	8017830 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	2203      	movs	r2, #3
 80175ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	2200      	movs	r2, #0
 80175d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	68ba      	ldr	r2, [r7, #8]
 80175d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	88fa      	ldrh	r2, [r7, #6]
 80175de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	88fa      	ldrh	r2, [r7, #6]
 80175e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80175e6:	68fb      	ldr	r3, [r7, #12]
 80175e8:	2200      	movs	r2, #0
 80175ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	2200      	movs	r2, #0
 80175f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	2200      	movs	r2, #0
 80175f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	2200      	movs	r2, #0
 8017600:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	2200      	movs	r2, #0
 8017606:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	689b      	ldr	r3, [r3, #8]
 801760c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017610:	d10f      	bne.n	8017632 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	681a      	ldr	r2, [r3, #0]
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017630:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801763c:	2b40      	cmp	r3, #64	; 0x40
 801763e:	d007      	beq.n	8017650 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	681a      	ldr	r2, [r3, #0]
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801764e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	68db      	ldr	r3, [r3, #12]
 8017654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017658:	d94b      	bls.n	80176f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d002      	beq.n	8017668 <HAL_SPI_Transmit+0xfa>
 8017662:	8afb      	ldrh	r3, [r7, #22]
 8017664:	2b01      	cmp	r3, #1
 8017666:	d13e      	bne.n	80176e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801766c:	881a      	ldrh	r2, [r3, #0]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017678:	1c9a      	adds	r2, r3, #2
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017682:	b29b      	uxth	r3, r3
 8017684:	3b01      	subs	r3, #1
 8017686:	b29a      	uxth	r2, r3
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801768c:	e02b      	b.n	80176e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	f003 0302 	and.w	r3, r3, #2
 8017698:	2b02      	cmp	r3, #2
 801769a:	d112      	bne.n	80176c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a0:	881a      	ldrh	r2, [r3, #0]
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176ac:	1c9a      	adds	r2, r3, #2
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	3b01      	subs	r3, #1
 80176ba:	b29a      	uxth	r2, r3
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80176c0:	e011      	b.n	80176e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80176c2:	f7fa fe61 	bl	8012388 <HAL_GetTick>
 80176c6:	4602      	mov	r2, r0
 80176c8:	69bb      	ldr	r3, [r7, #24]
 80176ca:	1ad3      	subs	r3, r2, r3
 80176cc:	683a      	ldr	r2, [r7, #0]
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d803      	bhi.n	80176da <HAL_SPI_Transmit+0x16c>
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176d8:	d102      	bne.n	80176e0 <HAL_SPI_Transmit+0x172>
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d102      	bne.n	80176e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80176e0:	2303      	movs	r3, #3
 80176e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80176e4:	e0a4      	b.n	8017830 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d1ce      	bne.n	801768e <HAL_SPI_Transmit+0x120>
 80176f0:	e07c      	b.n	80177ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d002      	beq.n	8017700 <HAL_SPI_Transmit+0x192>
 80176fa:	8afb      	ldrh	r3, [r7, #22]
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d170      	bne.n	80177e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017704:	b29b      	uxth	r3, r3
 8017706:	2b01      	cmp	r3, #1
 8017708:	d912      	bls.n	8017730 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801770e:	881a      	ldrh	r2, [r3, #0]
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801771a:	1c9a      	adds	r2, r3, #2
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017724:	b29b      	uxth	r3, r3
 8017726:	3b02      	subs	r3, #2
 8017728:	b29a      	uxth	r2, r3
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801772e:	e058      	b.n	80177e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	330c      	adds	r3, #12
 801773a:	7812      	ldrb	r2, [r2, #0]
 801773c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017742:	1c5a      	adds	r2, r3, #1
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801774c:	b29b      	uxth	r3, r3
 801774e:	3b01      	subs	r3, #1
 8017750:	b29a      	uxth	r2, r3
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8017756:	e044      	b.n	80177e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	689b      	ldr	r3, [r3, #8]
 801775e:	f003 0302 	and.w	r3, r3, #2
 8017762:	2b02      	cmp	r3, #2
 8017764:	d12b      	bne.n	80177be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801776a:	b29b      	uxth	r3, r3
 801776c:	2b01      	cmp	r3, #1
 801776e:	d912      	bls.n	8017796 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017774:	881a      	ldrh	r2, [r3, #0]
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017780:	1c9a      	adds	r2, r3, #2
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801778a:	b29b      	uxth	r3, r3
 801778c:	3b02      	subs	r3, #2
 801778e:	b29a      	uxth	r2, r3
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017794:	e025      	b.n	80177e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	330c      	adds	r3, #12
 80177a0:	7812      	ldrb	r2, [r2, #0]
 80177a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177a8:	1c5a      	adds	r2, r3, #1
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80177b2:	b29b      	uxth	r3, r3
 80177b4:	3b01      	subs	r3, #1
 80177b6:	b29a      	uxth	r2, r3
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80177bc:	e011      	b.n	80177e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80177be:	f7fa fde3 	bl	8012388 <HAL_GetTick>
 80177c2:	4602      	mov	r2, r0
 80177c4:	69bb      	ldr	r3, [r7, #24]
 80177c6:	1ad3      	subs	r3, r2, r3
 80177c8:	683a      	ldr	r2, [r7, #0]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d803      	bhi.n	80177d6 <HAL_SPI_Transmit+0x268>
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177d4:	d102      	bne.n	80177dc <HAL_SPI_Transmit+0x26e>
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d102      	bne.n	80177e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80177dc:	2303      	movs	r3, #3
 80177de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80177e0:	e026      	b.n	8017830 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d1b5      	bne.n	8017758 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80177ec:	69ba      	ldr	r2, [r7, #24]
 80177ee:	6839      	ldr	r1, [r7, #0]
 80177f0:	68f8      	ldr	r0, [r7, #12]
 80177f2:	f000 fce3 	bl	80181bc <SPI_EndRxTxTransaction>
 80177f6:	4603      	mov	r3, r0
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d002      	beq.n	8017802 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	2220      	movs	r2, #32
 8017800:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	689b      	ldr	r3, [r3, #8]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d10a      	bne.n	8017820 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801780a:	2300      	movs	r3, #0
 801780c:	613b      	str	r3, [r7, #16]
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	68db      	ldr	r3, [r3, #12]
 8017814:	613b      	str	r3, [r7, #16]
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	689b      	ldr	r3, [r3, #8]
 801781c:	613b      	str	r3, [r7, #16]
 801781e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017824:	2b00      	cmp	r3, #0
 8017826:	d002      	beq.n	801782e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8017828:	2301      	movs	r3, #1
 801782a:	77fb      	strb	r3, [r7, #31]
 801782c:	e000      	b.n	8017830 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801782e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	2201      	movs	r2, #1
 8017834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	2200      	movs	r2, #0
 801783c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8017840:	7ffb      	ldrb	r3, [r7, #31]
}
 8017842:	4618      	mov	r0, r3
 8017844:	3720      	adds	r7, #32
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}

0801784a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801784a:	b580      	push	{r7, lr}
 801784c:	b088      	sub	sp, #32
 801784e:	af02      	add	r7, sp, #8
 8017850:	60f8      	str	r0, [r7, #12]
 8017852:	60b9      	str	r1, [r7, #8]
 8017854:	603b      	str	r3, [r7, #0]
 8017856:	4613      	mov	r3, r2
 8017858:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801785a:	2300      	movs	r3, #0
 801785c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	685b      	ldr	r3, [r3, #4]
 8017862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017866:	d112      	bne.n	801788e <HAL_SPI_Receive+0x44>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	689b      	ldr	r3, [r3, #8]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d10e      	bne.n	801788e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	2204      	movs	r2, #4
 8017874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017878:	88fa      	ldrh	r2, [r7, #6]
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	9300      	str	r3, [sp, #0]
 801787e:	4613      	mov	r3, r2
 8017880:	68ba      	ldr	r2, [r7, #8]
 8017882:	68b9      	ldr	r1, [r7, #8]
 8017884:	68f8      	ldr	r0, [r7, #12]
 8017886:	f000 f910 	bl	8017aaa <HAL_SPI_TransmitReceive>
 801788a:	4603      	mov	r3, r0
 801788c:	e109      	b.n	8017aa2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017894:	2b01      	cmp	r3, #1
 8017896:	d101      	bne.n	801789c <HAL_SPI_Receive+0x52>
 8017898:	2302      	movs	r3, #2
 801789a:	e102      	b.n	8017aa2 <HAL_SPI_Receive+0x258>
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	2201      	movs	r2, #1
 80178a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80178a4:	f7fa fd70 	bl	8012388 <HAL_GetTick>
 80178a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80178b0:	b2db      	uxtb	r3, r3
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d002      	beq.n	80178bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80178b6:	2302      	movs	r3, #2
 80178b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80178ba:	e0e9      	b.n	8017a90 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d002      	beq.n	80178c8 <HAL_SPI_Receive+0x7e>
 80178c2:	88fb      	ldrh	r3, [r7, #6]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d102      	bne.n	80178ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80178c8:	2301      	movs	r3, #1
 80178ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80178cc:	e0e0      	b.n	8017a90 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	2204      	movs	r2, #4
 80178d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	2200      	movs	r2, #0
 80178da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	68ba      	ldr	r2, [r7, #8]
 80178e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	88fa      	ldrh	r2, [r7, #6]
 80178e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	88fa      	ldrh	r2, [r7, #6]
 80178ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2200      	movs	r2, #0
 80178f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	2200      	movs	r2, #0
 80178fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	2200      	movs	r2, #0
 8017902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	2200      	movs	r2, #0
 8017908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	2200      	movs	r2, #0
 801790e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017918:	d908      	bls.n	801792c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	685a      	ldr	r2, [r3, #4]
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8017928:	605a      	str	r2, [r3, #4]
 801792a:	e007      	b.n	801793c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	685a      	ldr	r2, [r3, #4]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801793a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	689b      	ldr	r3, [r3, #8]
 8017940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017944:	d10f      	bne.n	8017966 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	681a      	ldr	r2, [r3, #0]
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	681a      	ldr	r2, [r3, #0]
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8017964:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017970:	2b40      	cmp	r3, #64	; 0x40
 8017972:	d007      	beq.n	8017984 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	681a      	ldr	r2, [r3, #0]
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017982:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	68db      	ldr	r3, [r3, #12]
 8017988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801798c:	d867      	bhi.n	8017a5e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801798e:	e030      	b.n	80179f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	689b      	ldr	r3, [r3, #8]
 8017996:	f003 0301 	and.w	r3, r3, #1
 801799a:	2b01      	cmp	r3, #1
 801799c:	d117      	bne.n	80179ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	f103 020c 	add.w	r2, r3, #12
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179aa:	7812      	ldrb	r2, [r2, #0]
 80179ac:	b2d2      	uxtb	r2, r2
 80179ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179b4:	1c5a      	adds	r2, r3, #1
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80179c0:	b29b      	uxth	r3, r3
 80179c2:	3b01      	subs	r3, #1
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80179cc:	e011      	b.n	80179f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80179ce:	f7fa fcdb 	bl	8012388 <HAL_GetTick>
 80179d2:	4602      	mov	r2, r0
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	1ad3      	subs	r3, r2, r3
 80179d8:	683a      	ldr	r2, [r7, #0]
 80179da:	429a      	cmp	r2, r3
 80179dc:	d803      	bhi.n	80179e6 <HAL_SPI_Receive+0x19c>
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179e4:	d102      	bne.n	80179ec <HAL_SPI_Receive+0x1a2>
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d102      	bne.n	80179f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80179ec:	2303      	movs	r3, #3
 80179ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80179f0:	e04e      	b.n	8017a90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80179f8:	b29b      	uxth	r3, r3
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d1c8      	bne.n	8017990 <HAL_SPI_Receive+0x146>
 80179fe:	e034      	b.n	8017a6a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	689b      	ldr	r3, [r3, #8]
 8017a06:	f003 0301 	and.w	r3, r3, #1
 8017a0a:	2b01      	cmp	r3, #1
 8017a0c:	d115      	bne.n	8017a3a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	68da      	ldr	r2, [r3, #12]
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a18:	b292      	uxth	r2, r2
 8017a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a20:	1c9a      	adds	r2, r3, #2
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017a2c:	b29b      	uxth	r3, r3
 8017a2e:	3b01      	subs	r3, #1
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8017a38:	e011      	b.n	8017a5e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017a3a:	f7fa fca5 	bl	8012388 <HAL_GetTick>
 8017a3e:	4602      	mov	r2, r0
 8017a40:	693b      	ldr	r3, [r7, #16]
 8017a42:	1ad3      	subs	r3, r2, r3
 8017a44:	683a      	ldr	r2, [r7, #0]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d803      	bhi.n	8017a52 <HAL_SPI_Receive+0x208>
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a50:	d102      	bne.n	8017a58 <HAL_SPI_Receive+0x20e>
 8017a52:	683b      	ldr	r3, [r7, #0]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d102      	bne.n	8017a5e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8017a58:	2303      	movs	r3, #3
 8017a5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8017a5c:	e018      	b.n	8017a90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017a64:	b29b      	uxth	r3, r3
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d1ca      	bne.n	8017a00 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017a6a:	693a      	ldr	r2, [r7, #16]
 8017a6c:	6839      	ldr	r1, [r7, #0]
 8017a6e:	68f8      	ldr	r0, [r7, #12]
 8017a70:	f000 fb4c 	bl	801810c <SPI_EndRxTransaction>
 8017a74:	4603      	mov	r3, r0
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d002      	beq.n	8017a80 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	2220      	movs	r2, #32
 8017a7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d002      	beq.n	8017a8e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8017a88:	2301      	movs	r3, #1
 8017a8a:	75fb      	strb	r3, [r7, #23]
 8017a8c:	e000      	b.n	8017a90 <HAL_SPI_Receive+0x246>
  }

error :
 8017a8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2201      	movs	r2, #1
 8017a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8017aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	3718      	adds	r7, #24
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}

08017aaa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8017aaa:	b580      	push	{r7, lr}
 8017aac:	b08a      	sub	sp, #40	; 0x28
 8017aae:	af00      	add	r7, sp, #0
 8017ab0:	60f8      	str	r0, [r7, #12]
 8017ab2:	60b9      	str	r1, [r7, #8]
 8017ab4:	607a      	str	r2, [r7, #4]
 8017ab6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8017abc:	2300      	movs	r3, #0
 8017abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017ac8:	2b01      	cmp	r3, #1
 8017aca:	d101      	bne.n	8017ad0 <HAL_SPI_TransmitReceive+0x26>
 8017acc:	2302      	movs	r3, #2
 8017ace:	e1fb      	b.n	8017ec8 <HAL_SPI_TransmitReceive+0x41e>
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	2201      	movs	r2, #1
 8017ad4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8017ad8:	f7fa fc56 	bl	8012388 <HAL_GetTick>
 8017adc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017ae4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	685b      	ldr	r3, [r3, #4]
 8017aea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8017aec:	887b      	ldrh	r3, [r7, #2]
 8017aee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8017af0:	887b      	ldrh	r3, [r7, #2]
 8017af2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8017af4:	7efb      	ldrb	r3, [r7, #27]
 8017af6:	2b01      	cmp	r3, #1
 8017af8:	d00e      	beq.n	8017b18 <HAL_SPI_TransmitReceive+0x6e>
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017b00:	d106      	bne.n	8017b10 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	689b      	ldr	r3, [r3, #8]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d102      	bne.n	8017b10 <HAL_SPI_TransmitReceive+0x66>
 8017b0a:	7efb      	ldrb	r3, [r7, #27]
 8017b0c:	2b04      	cmp	r3, #4
 8017b0e:	d003      	beq.n	8017b18 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8017b10:	2302      	movs	r3, #2
 8017b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8017b16:	e1cd      	b.n	8017eb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8017b18:	68bb      	ldr	r3, [r7, #8]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d005      	beq.n	8017b2a <HAL_SPI_TransmitReceive+0x80>
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d002      	beq.n	8017b2a <HAL_SPI_TransmitReceive+0x80>
 8017b24:	887b      	ldrh	r3, [r7, #2]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d103      	bne.n	8017b32 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8017b2a:	2301      	movs	r3, #1
 8017b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8017b30:	e1c0      	b.n	8017eb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8017b38:	b2db      	uxtb	r3, r3
 8017b3a:	2b04      	cmp	r3, #4
 8017b3c:	d003      	beq.n	8017b46 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2205      	movs	r2, #5
 8017b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	2200      	movs	r2, #0
 8017b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	687a      	ldr	r2, [r7, #4]
 8017b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	887a      	ldrh	r2, [r7, #2]
 8017b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	887a      	ldrh	r2, [r7, #2]
 8017b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	68ba      	ldr	r2, [r7, #8]
 8017b66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	887a      	ldrh	r2, [r7, #2]
 8017b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	887a      	ldrh	r2, [r7, #2]
 8017b72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	2200      	movs	r2, #0
 8017b78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	68db      	ldr	r3, [r3, #12]
 8017b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017b88:	d802      	bhi.n	8017b90 <HAL_SPI_TransmitReceive+0xe6>
 8017b8a:	8a3b      	ldrh	r3, [r7, #16]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d908      	bls.n	8017ba2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	685a      	ldr	r2, [r3, #4]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8017b9e:	605a      	str	r2, [r3, #4]
 8017ba0:	e007      	b.n	8017bb2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	685a      	ldr	r2, [r3, #4]
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017bb0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017bbc:	2b40      	cmp	r3, #64	; 0x40
 8017bbe:	d007      	beq.n	8017bd0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	681a      	ldr	r2, [r3, #0]
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	68db      	ldr	r3, [r3, #12]
 8017bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8017bd8:	d97c      	bls.n	8017cd4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d002      	beq.n	8017be8 <HAL_SPI_TransmitReceive+0x13e>
 8017be2:	8a7b      	ldrh	r3, [r7, #18]
 8017be4:	2b01      	cmp	r3, #1
 8017be6:	d169      	bne.n	8017cbc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bec:	881a      	ldrh	r2, [r3, #0]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bf8:	1c9a      	adds	r2, r3, #2
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	3b01      	subs	r3, #1
 8017c06:	b29a      	uxth	r2, r3
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017c0c:	e056      	b.n	8017cbc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	689b      	ldr	r3, [r3, #8]
 8017c14:	f003 0302 	and.w	r3, r3, #2
 8017c18:	2b02      	cmp	r3, #2
 8017c1a:	d11b      	bne.n	8017c54 <HAL_SPI_TransmitReceive+0x1aa>
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017c20:	b29b      	uxth	r3, r3
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d016      	beq.n	8017c54 <HAL_SPI_TransmitReceive+0x1aa>
 8017c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d113      	bne.n	8017c54 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c30:	881a      	ldrh	r2, [r3, #0]
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c3c:	1c9a      	adds	r2, r3, #2
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	b29a      	uxth	r2, r3
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017c50:	2300      	movs	r3, #0
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	689b      	ldr	r3, [r3, #8]
 8017c5a:	f003 0301 	and.w	r3, r3, #1
 8017c5e:	2b01      	cmp	r3, #1
 8017c60:	d11c      	bne.n	8017c9c <HAL_SPI_TransmitReceive+0x1f2>
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d016      	beq.n	8017c9c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	68da      	ldr	r2, [r3, #12]
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c78:	b292      	uxth	r2, r2
 8017c7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c80:	1c9a      	adds	r2, r3, #2
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	3b01      	subs	r3, #1
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017c98:	2301      	movs	r3, #1
 8017c9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017c9c:	f7fa fb74 	bl	8012388 <HAL_GetTick>
 8017ca0:	4602      	mov	r2, r0
 8017ca2:	69fb      	ldr	r3, [r7, #28]
 8017ca4:	1ad3      	subs	r3, r2, r3
 8017ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d807      	bhi.n	8017cbc <HAL_SPI_TransmitReceive+0x212>
 8017cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017cb2:	d003      	beq.n	8017cbc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8017cb4:	2303      	movs	r3, #3
 8017cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8017cba:	e0fb      	b.n	8017eb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d1a3      	bne.n	8017c0e <HAL_SPI_TransmitReceive+0x164>
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d19d      	bne.n	8017c0e <HAL_SPI_TransmitReceive+0x164>
 8017cd2:	e0df      	b.n	8017e94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	685b      	ldr	r3, [r3, #4]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d003      	beq.n	8017ce4 <HAL_SPI_TransmitReceive+0x23a>
 8017cdc:	8a7b      	ldrh	r3, [r7, #18]
 8017cde:	2b01      	cmp	r3, #1
 8017ce0:	f040 80cb 	bne.w	8017e7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017ce8:	b29b      	uxth	r3, r3
 8017cea:	2b01      	cmp	r3, #1
 8017cec:	d912      	bls.n	8017d14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cf2:	881a      	ldrh	r2, [r3, #0]
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cfe:	1c9a      	adds	r2, r3, #2
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	3b02      	subs	r3, #2
 8017d0c:	b29a      	uxth	r2, r3
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017d12:	e0b2      	b.n	8017e7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	330c      	adds	r3, #12
 8017d1e:	7812      	ldrb	r2, [r2, #0]
 8017d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d26:	1c5a      	adds	r2, r3, #1
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	3b01      	subs	r3, #1
 8017d34:	b29a      	uxth	r2, r3
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017d3a:	e09e      	b.n	8017e7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	689b      	ldr	r3, [r3, #8]
 8017d42:	f003 0302 	and.w	r3, r3, #2
 8017d46:	2b02      	cmp	r3, #2
 8017d48:	d134      	bne.n	8017db4 <HAL_SPI_TransmitReceive+0x30a>
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d02f      	beq.n	8017db4 <HAL_SPI_TransmitReceive+0x30a>
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	2b01      	cmp	r3, #1
 8017d58:	d12c      	bne.n	8017db4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	d912      	bls.n	8017d8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d68:	881a      	ldrh	r2, [r3, #0]
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8017d70:	68fb      	ldr	r3, [r7, #12]
 8017d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d74:	1c9a      	adds	r2, r3, #2
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	3b02      	subs	r3, #2
 8017d82:	b29a      	uxth	r2, r3
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8017d88:	e012      	b.n	8017db0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	330c      	adds	r3, #12
 8017d94:	7812      	ldrb	r2, [r2, #0]
 8017d96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d9c:	1c5a      	adds	r2, r3, #1
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	3b01      	subs	r3, #1
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017db0:	2300      	movs	r3, #0
 8017db2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	689b      	ldr	r3, [r3, #8]
 8017dba:	f003 0301 	and.w	r3, r3, #1
 8017dbe:	2b01      	cmp	r3, #1
 8017dc0:	d148      	bne.n	8017e54 <HAL_SPI_TransmitReceive+0x3aa>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d042      	beq.n	8017e54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	2b01      	cmp	r3, #1
 8017dd8:	d923      	bls.n	8017e22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	68da      	ldr	r2, [r3, #12]
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017de4:	b292      	uxth	r2, r2
 8017de6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dec:	1c9a      	adds	r2, r3, #2
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	3b02      	subs	r3, #2
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	2b01      	cmp	r3, #1
 8017e0e:	d81f      	bhi.n	8017e50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	685a      	ldr	r2, [r3, #4]
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017e1e:	605a      	str	r2, [r3, #4]
 8017e20:	e016      	b.n	8017e50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f103 020c 	add.w	r2, r3, #12
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e2e:	7812      	ldrb	r2, [r2, #0]
 8017e30:	b2d2      	uxtb	r2, r2
 8017e32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e38:	1c5a      	adds	r2, r3, #1
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017e44:	b29b      	uxth	r3, r3
 8017e46:	3b01      	subs	r3, #1
 8017e48:	b29a      	uxth	r2, r3
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017e50:	2301      	movs	r3, #1
 8017e52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017e54:	f7fa fa98 	bl	8012388 <HAL_GetTick>
 8017e58:	4602      	mov	r2, r0
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	1ad3      	subs	r3, r2, r3
 8017e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d803      	bhi.n	8017e6c <HAL_SPI_TransmitReceive+0x3c2>
 8017e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e6a:	d102      	bne.n	8017e72 <HAL_SPI_TransmitReceive+0x3c8>
 8017e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d103      	bne.n	8017e7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8017e72:	2303      	movs	r3, #3
 8017e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8017e78:	e01c      	b.n	8017eb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017e7e:	b29b      	uxth	r3, r3
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	f47f af5b 	bne.w	8017d3c <HAL_SPI_TransmitReceive+0x292>
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	f47f af54 	bne.w	8017d3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017e94:	69fa      	ldr	r2, [r7, #28]
 8017e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017e98:	68f8      	ldr	r0, [r7, #12]
 8017e9a:	f000 f98f 	bl	80181bc <SPI_EndRxTxTransaction>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d006      	beq.n	8017eb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	2220      	movs	r2, #32
 8017eae:	661a      	str	r2, [r3, #96]	; 0x60
 8017eb0:	e000      	b.n	8017eb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8017eb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	2201      	movs	r2, #1
 8017eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8017ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3728      	adds	r7, #40	; 0x28
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}

08017ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b088      	sub	sp, #32
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	60f8      	str	r0, [r7, #12]
 8017ed8:	60b9      	str	r1, [r7, #8]
 8017eda:	603b      	str	r3, [r7, #0]
 8017edc:	4613      	mov	r3, r2
 8017ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8017ee0:	f7fa fa52 	bl	8012388 <HAL_GetTick>
 8017ee4:	4602      	mov	r2, r0
 8017ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee8:	1a9b      	subs	r3, r3, r2
 8017eea:	683a      	ldr	r2, [r7, #0]
 8017eec:	4413      	add	r3, r2
 8017eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8017ef0:	f7fa fa4a 	bl	8012388 <HAL_GetTick>
 8017ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017ef6:	4b39      	ldr	r3, [pc, #228]	; (8017fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	015b      	lsls	r3, r3, #5
 8017efc:	0d1b      	lsrs	r3, r3, #20
 8017efe:	69fa      	ldr	r2, [r7, #28]
 8017f00:	fb02 f303 	mul.w	r3, r2, r3
 8017f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017f06:	e054      	b.n	8017fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f0e:	d050      	beq.n	8017fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017f10:	f7fa fa3a 	bl	8012388 <HAL_GetTick>
 8017f14:	4602      	mov	r2, r0
 8017f16:	69bb      	ldr	r3, [r7, #24]
 8017f18:	1ad3      	subs	r3, r2, r3
 8017f1a:	69fa      	ldr	r2, [r7, #28]
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	d902      	bls.n	8017f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d13d      	bne.n	8017fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	685a      	ldr	r2, [r3, #4]
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8017f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017f3e:	d111      	bne.n	8017f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	689b      	ldr	r3, [r3, #8]
 8017f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017f48:	d004      	beq.n	8017f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	689b      	ldr	r3, [r3, #8]
 8017f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017f52:	d107      	bne.n	8017f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	681a      	ldr	r2, [r3, #0]
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017f6c:	d10f      	bne.n	8017f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017f7c:	601a      	str	r2, [r3, #0]
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	681a      	ldr	r2, [r3, #0]
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2201      	movs	r2, #1
 8017f92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8017f9e:	2303      	movs	r3, #3
 8017fa0:	e017      	b.n	8017fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d101      	bne.n	8017fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	3b01      	subs	r3, #1
 8017fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	689a      	ldr	r2, [r3, #8]
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	4013      	ands	r3, r2
 8017fbc:	68ba      	ldr	r2, [r7, #8]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	bf0c      	ite	eq
 8017fc2:	2301      	moveq	r3, #1
 8017fc4:	2300      	movne	r3, #0
 8017fc6:	b2db      	uxtb	r3, r3
 8017fc8:	461a      	mov	r2, r3
 8017fca:	79fb      	ldrb	r3, [r7, #7]
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d19b      	bne.n	8017f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8017fd0:	2300      	movs	r3, #0
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3720      	adds	r7, #32
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}
 8017fda:	bf00      	nop
 8017fdc:	20000090 	.word	0x20000090

08017fe0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08a      	sub	sp, #40	; 0x28
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
 8017fec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8017ff2:	f7fa f9c9 	bl	8012388 <HAL_GetTick>
 8017ff6:	4602      	mov	r2, r0
 8017ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffa:	1a9b      	subs	r3, r3, r2
 8017ffc:	683a      	ldr	r2, [r7, #0]
 8017ffe:	4413      	add	r3, r2
 8018000:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8018002:	f7fa f9c1 	bl	8012388 <HAL_GetTick>
 8018006:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	330c      	adds	r3, #12
 801800e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8018010:	4b3d      	ldr	r3, [pc, #244]	; (8018108 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8018012:	681a      	ldr	r2, [r3, #0]
 8018014:	4613      	mov	r3, r2
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	4413      	add	r3, r2
 801801a:	00da      	lsls	r2, r3, #3
 801801c:	1ad3      	subs	r3, r2, r3
 801801e:	0d1b      	lsrs	r3, r3, #20
 8018020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018022:	fb02 f303 	mul.w	r3, r2, r3
 8018026:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8018028:	e060      	b.n	80180ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8018030:	d107      	bne.n	8018042 <SPI_WaitFifoStateUntilTimeout+0x62>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d104      	bne.n	8018042 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	b2db      	uxtb	r3, r3
 801803e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8018040:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018048:	d050      	beq.n	80180ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801804a:	f7fa f99d 	bl	8012388 <HAL_GetTick>
 801804e:	4602      	mov	r2, r0
 8018050:	6a3b      	ldr	r3, [r7, #32]
 8018052:	1ad3      	subs	r3, r2, r3
 8018054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018056:	429a      	cmp	r2, r3
 8018058:	d902      	bls.n	8018060 <SPI_WaitFifoStateUntilTimeout+0x80>
 801805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801805c:	2b00      	cmp	r3, #0
 801805e:	d13d      	bne.n	80180dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	685a      	ldr	r2, [r3, #4]
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801806e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018078:	d111      	bne.n	801809e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	689b      	ldr	r3, [r3, #8]
 801807e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018082:	d004      	beq.n	801808e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	689b      	ldr	r3, [r3, #8]
 8018088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801808c:	d107      	bne.n	801809e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	681a      	ldr	r2, [r3, #0]
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801809c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80180a6:	d10f      	bne.n	80180c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	681a      	ldr	r2, [r3, #0]
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80180b6:	601a      	str	r2, [r3, #0]
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	681a      	ldr	r2, [r3, #0]
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80180c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	2201      	movs	r2, #1
 80180cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	2200      	movs	r2, #0
 80180d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80180d8:	2303      	movs	r3, #3
 80180da:	e010      	b.n	80180fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80180dc:	69bb      	ldr	r3, [r7, #24]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d101      	bne.n	80180e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80180e2:	2300      	movs	r3, #0
 80180e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80180e6:	69bb      	ldr	r3, [r7, #24]
 80180e8:	3b01      	subs	r3, #1
 80180ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	689a      	ldr	r2, [r3, #8]
 80180f2:	68bb      	ldr	r3, [r7, #8]
 80180f4:	4013      	ands	r3, r2
 80180f6:	687a      	ldr	r2, [r7, #4]
 80180f8:	429a      	cmp	r2, r3
 80180fa:	d196      	bne.n	801802a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80180fc:	2300      	movs	r3, #0
}
 80180fe:	4618      	mov	r0, r3
 8018100:	3728      	adds	r7, #40	; 0x28
 8018102:	46bd      	mov	sp, r7
 8018104:	bd80      	pop	{r7, pc}
 8018106:	bf00      	nop
 8018108:	20000090 	.word	0x20000090

0801810c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b086      	sub	sp, #24
 8018110:	af02      	add	r7, sp, #8
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018120:	d111      	bne.n	8018146 <SPI_EndRxTransaction+0x3a>
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	689b      	ldr	r3, [r3, #8]
 8018126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801812a:	d004      	beq.n	8018136 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	689b      	ldr	r3, [r3, #8]
 8018130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018134:	d107      	bne.n	8018146 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	681a      	ldr	r2, [r3, #0]
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018144:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	9300      	str	r3, [sp, #0]
 801814a:	68bb      	ldr	r3, [r7, #8]
 801814c:	2200      	movs	r2, #0
 801814e:	2180      	movs	r1, #128	; 0x80
 8018150:	68f8      	ldr	r0, [r7, #12]
 8018152:	f7ff febd 	bl	8017ed0 <SPI_WaitFlagStateUntilTimeout>
 8018156:	4603      	mov	r3, r0
 8018158:	2b00      	cmp	r3, #0
 801815a:	d007      	beq.n	801816c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018160:	f043 0220 	orr.w	r2, r3, #32
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8018168:	2303      	movs	r3, #3
 801816a:	e023      	b.n	80181b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	685b      	ldr	r3, [r3, #4]
 8018170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018174:	d11d      	bne.n	80181b2 <SPI_EndRxTransaction+0xa6>
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	689b      	ldr	r3, [r3, #8]
 801817a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801817e:	d004      	beq.n	801818a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	689b      	ldr	r3, [r3, #8]
 8018184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018188:	d113      	bne.n	80181b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	9300      	str	r3, [sp, #0]
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	2200      	movs	r2, #0
 8018192:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8018196:	68f8      	ldr	r0, [r7, #12]
 8018198:	f7ff ff22 	bl	8017fe0 <SPI_WaitFifoStateUntilTimeout>
 801819c:	4603      	mov	r3, r0
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d007      	beq.n	80181b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181a6:	f043 0220 	orr.w	r2, r3, #32
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80181ae:	2303      	movs	r3, #3
 80181b0:	e000      	b.n	80181b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80181b2:	2300      	movs	r3, #0
}
 80181b4:	4618      	mov	r0, r3
 80181b6:	3710      	adds	r7, #16
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}

080181bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b086      	sub	sp, #24
 80181c0:	af02      	add	r7, sp, #8
 80181c2:	60f8      	str	r0, [r7, #12]
 80181c4:	60b9      	str	r1, [r7, #8]
 80181c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	9300      	str	r3, [sp, #0]
 80181cc:	68bb      	ldr	r3, [r7, #8]
 80181ce:	2200      	movs	r2, #0
 80181d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80181d4:	68f8      	ldr	r0, [r7, #12]
 80181d6:	f7ff ff03 	bl	8017fe0 <SPI_WaitFifoStateUntilTimeout>
 80181da:	4603      	mov	r3, r0
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d007      	beq.n	80181f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181e4:	f043 0220 	orr.w	r2, r3, #32
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80181ec:	2303      	movs	r3, #3
 80181ee:	e027      	b.n	8018240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	9300      	str	r3, [sp, #0]
 80181f4:	68bb      	ldr	r3, [r7, #8]
 80181f6:	2200      	movs	r2, #0
 80181f8:	2180      	movs	r1, #128	; 0x80
 80181fa:	68f8      	ldr	r0, [r7, #12]
 80181fc:	f7ff fe68 	bl	8017ed0 <SPI_WaitFlagStateUntilTimeout>
 8018200:	4603      	mov	r3, r0
 8018202:	2b00      	cmp	r3, #0
 8018204:	d007      	beq.n	8018216 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801820a:	f043 0220 	orr.w	r2, r3, #32
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8018212:	2303      	movs	r3, #3
 8018214:	e014      	b.n	8018240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	68bb      	ldr	r3, [r7, #8]
 801821c:	2200      	movs	r2, #0
 801821e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8018222:	68f8      	ldr	r0, [r7, #12]
 8018224:	f7ff fedc 	bl	8017fe0 <SPI_WaitFifoStateUntilTimeout>
 8018228:	4603      	mov	r3, r0
 801822a:	2b00      	cmp	r3, #0
 801822c:	d007      	beq.n	801823e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018232:	f043 0220 	orr.w	r2, r3, #32
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801823a:	2303      	movs	r3, #3
 801823c:	e000      	b.n	8018240 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801823e:	2300      	movs	r3, #0
}
 8018240:	4618      	mov	r0, r3
 8018242:	3710      	adds	r7, #16
 8018244:	46bd      	mov	sp, r7
 8018246:	bd80      	pop	{r7, pc}

08018248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b082      	sub	sp, #8
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d101      	bne.n	801825a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018256:	2301      	movs	r3, #1
 8018258:	e049      	b.n	80182ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018260:	b2db      	uxtb	r3, r3
 8018262:	2b00      	cmp	r3, #0
 8018264:	d106      	bne.n	8018274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	2200      	movs	r2, #0
 801826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f7f9 fc34 	bl	8011adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2202      	movs	r2, #2
 8018278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	681a      	ldr	r2, [r3, #0]
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	3304      	adds	r3, #4
 8018284:	4619      	mov	r1, r3
 8018286:	4610      	mov	r0, r2
 8018288:	f001 f948 	bl	801951c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2201      	movs	r2, #1
 8018290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2201      	movs	r2, #1
 8018298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2201      	movs	r2, #1
 80182a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2201      	movs	r2, #1
 80182a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	2201      	movs	r2, #1
 80182b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2201      	movs	r2, #1
 80182b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	2201      	movs	r2, #1
 80182c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2201      	movs	r2, #1
 80182c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2201      	movs	r2, #1
 80182d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2201      	movs	r2, #1
 80182d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2201      	movs	r2, #1
 80182e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	2201      	movs	r2, #1
 80182e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80182ec:	2300      	movs	r3, #0
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	3708      	adds	r7, #8
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
	...

080182f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80182f8:	b480      	push	{r7}
 80182fa:	b085      	sub	sp, #20
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018306:	b2db      	uxtb	r3, r3
 8018308:	2b01      	cmp	r3, #1
 801830a:	d001      	beq.n	8018310 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801830c:	2301      	movs	r3, #1
 801830e:	e047      	b.n	80183a0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2202      	movs	r2, #2
 8018314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	4a23      	ldr	r2, [pc, #140]	; (80183ac <HAL_TIM_Base_Start+0xb4>)
 801831e:	4293      	cmp	r3, r2
 8018320:	d01d      	beq.n	801835e <HAL_TIM_Base_Start+0x66>
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801832a:	d018      	beq.n	801835e <HAL_TIM_Base_Start+0x66>
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	4a1f      	ldr	r2, [pc, #124]	; (80183b0 <HAL_TIM_Base_Start+0xb8>)
 8018332:	4293      	cmp	r3, r2
 8018334:	d013      	beq.n	801835e <HAL_TIM_Base_Start+0x66>
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	4a1e      	ldr	r2, [pc, #120]	; (80183b4 <HAL_TIM_Base_Start+0xbc>)
 801833c:	4293      	cmp	r3, r2
 801833e:	d00e      	beq.n	801835e <HAL_TIM_Base_Start+0x66>
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	4a1c      	ldr	r2, [pc, #112]	; (80183b8 <HAL_TIM_Base_Start+0xc0>)
 8018346:	4293      	cmp	r3, r2
 8018348:	d009      	beq.n	801835e <HAL_TIM_Base_Start+0x66>
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	4a1b      	ldr	r2, [pc, #108]	; (80183bc <HAL_TIM_Base_Start+0xc4>)
 8018350:	4293      	cmp	r3, r2
 8018352:	d004      	beq.n	801835e <HAL_TIM_Base_Start+0x66>
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	4a19      	ldr	r2, [pc, #100]	; (80183c0 <HAL_TIM_Base_Start+0xc8>)
 801835a:	4293      	cmp	r3, r2
 801835c:	d115      	bne.n	801838a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	689a      	ldr	r2, [r3, #8]
 8018364:	4b17      	ldr	r3, [pc, #92]	; (80183c4 <HAL_TIM_Base_Start+0xcc>)
 8018366:	4013      	ands	r3, r2
 8018368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	2b06      	cmp	r3, #6
 801836e:	d015      	beq.n	801839c <HAL_TIM_Base_Start+0xa4>
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018376:	d011      	beq.n	801839c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	f042 0201 	orr.w	r2, r2, #1
 8018386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018388:	e008      	b.n	801839c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	f042 0201 	orr.w	r2, r2, #1
 8018398:	601a      	str	r2, [r3, #0]
 801839a:	e000      	b.n	801839e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801839c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801839e:	2300      	movs	r3, #0
}
 80183a0:	4618      	mov	r0, r3
 80183a2:	3714      	adds	r7, #20
 80183a4:	46bd      	mov	sp, r7
 80183a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183aa:	4770      	bx	lr
 80183ac:	40012c00 	.word	0x40012c00
 80183b0:	40000400 	.word	0x40000400
 80183b4:	40000800 	.word	0x40000800
 80183b8:	40000c00 	.word	0x40000c00
 80183bc:	40013400 	.word	0x40013400
 80183c0:	40014000 	.word	0x40014000
 80183c4:	00010007 	.word	0x00010007

080183c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80183c8:	b480      	push	{r7}
 80183ca:	b085      	sub	sp, #20
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	2b01      	cmp	r3, #1
 80183da:	d001      	beq.n	80183e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80183dc:	2301      	movs	r3, #1
 80183de:	e04f      	b.n	8018480 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2202      	movs	r2, #2
 80183e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	68da      	ldr	r2, [r3, #12]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	f042 0201 	orr.w	r2, r2, #1
 80183f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	4a23      	ldr	r2, [pc, #140]	; (801848c <HAL_TIM_Base_Start_IT+0xc4>)
 80183fe:	4293      	cmp	r3, r2
 8018400:	d01d      	beq.n	801843e <HAL_TIM_Base_Start_IT+0x76>
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801840a:	d018      	beq.n	801843e <HAL_TIM_Base_Start_IT+0x76>
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	4a1f      	ldr	r2, [pc, #124]	; (8018490 <HAL_TIM_Base_Start_IT+0xc8>)
 8018412:	4293      	cmp	r3, r2
 8018414:	d013      	beq.n	801843e <HAL_TIM_Base_Start_IT+0x76>
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	4a1e      	ldr	r2, [pc, #120]	; (8018494 <HAL_TIM_Base_Start_IT+0xcc>)
 801841c:	4293      	cmp	r3, r2
 801841e:	d00e      	beq.n	801843e <HAL_TIM_Base_Start_IT+0x76>
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	4a1c      	ldr	r2, [pc, #112]	; (8018498 <HAL_TIM_Base_Start_IT+0xd0>)
 8018426:	4293      	cmp	r3, r2
 8018428:	d009      	beq.n	801843e <HAL_TIM_Base_Start_IT+0x76>
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	4a1b      	ldr	r2, [pc, #108]	; (801849c <HAL_TIM_Base_Start_IT+0xd4>)
 8018430:	4293      	cmp	r3, r2
 8018432:	d004      	beq.n	801843e <HAL_TIM_Base_Start_IT+0x76>
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	4a19      	ldr	r2, [pc, #100]	; (80184a0 <HAL_TIM_Base_Start_IT+0xd8>)
 801843a:	4293      	cmp	r3, r2
 801843c:	d115      	bne.n	801846a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	689a      	ldr	r2, [r3, #8]
 8018444:	4b17      	ldr	r3, [pc, #92]	; (80184a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8018446:	4013      	ands	r3, r2
 8018448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	2b06      	cmp	r3, #6
 801844e:	d015      	beq.n	801847c <HAL_TIM_Base_Start_IT+0xb4>
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018456:	d011      	beq.n	801847c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	f042 0201 	orr.w	r2, r2, #1
 8018466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018468:	e008      	b.n	801847c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	681a      	ldr	r2, [r3, #0]
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	f042 0201 	orr.w	r2, r2, #1
 8018478:	601a      	str	r2, [r3, #0]
 801847a:	e000      	b.n	801847e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801847c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801847e:	2300      	movs	r3, #0
}
 8018480:	4618      	mov	r0, r3
 8018482:	3714      	adds	r7, #20
 8018484:	46bd      	mov	sp, r7
 8018486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801848a:	4770      	bx	lr
 801848c:	40012c00 	.word	0x40012c00
 8018490:	40000400 	.word	0x40000400
 8018494:	40000800 	.word	0x40000800
 8018498:	40000c00 	.word	0x40000c00
 801849c:	40013400 	.word	0x40013400
 80184a0:	40014000 	.word	0x40014000
 80184a4:	00010007 	.word	0x00010007

080184a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b082      	sub	sp, #8
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d101      	bne.n	80184ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80184b6:	2301      	movs	r3, #1
 80184b8:	e049      	b.n	801854e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80184c0:	b2db      	uxtb	r3, r3
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d106      	bne.n	80184d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2200      	movs	r2, #0
 80184ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80184ce:	6878      	ldr	r0, [r7, #4]
 80184d0:	f7f9 fbec 	bl	8011cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	2202      	movs	r2, #2
 80184d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681a      	ldr	r2, [r3, #0]
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	3304      	adds	r3, #4
 80184e4:	4619      	mov	r1, r3
 80184e6:	4610      	mov	r0, r2
 80184e8:	f001 f818 	bl	801951c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2201      	movs	r2, #1
 80184f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	2201      	movs	r2, #1
 80184f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2201      	movs	r2, #1
 8018500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2201      	movs	r2, #1
 8018508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	2201      	movs	r2, #1
 8018510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	2201      	movs	r2, #1
 8018518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2201      	movs	r2, #1
 8018520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	2201      	movs	r2, #1
 8018528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2201      	movs	r2, #1
 8018530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2201      	movs	r2, #1
 8018538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	2201      	movs	r2, #1
 8018540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	2201      	movs	r2, #1
 8018548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801854c:	2300      	movs	r3, #0
}
 801854e:	4618      	mov	r0, r3
 8018550:	3708      	adds	r7, #8
 8018552:	46bd      	mov	sp, r7
 8018554:	bd80      	pop	{r7, pc}
	...

08018558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d109      	bne.n	801857c <HAL_TIM_PWM_Start+0x24>
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801856e:	b2db      	uxtb	r3, r3
 8018570:	2b01      	cmp	r3, #1
 8018572:	bf14      	ite	ne
 8018574:	2301      	movne	r3, #1
 8018576:	2300      	moveq	r3, #0
 8018578:	b2db      	uxtb	r3, r3
 801857a:	e03c      	b.n	80185f6 <HAL_TIM_PWM_Start+0x9e>
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	2b04      	cmp	r3, #4
 8018580:	d109      	bne.n	8018596 <HAL_TIM_PWM_Start+0x3e>
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018588:	b2db      	uxtb	r3, r3
 801858a:	2b01      	cmp	r3, #1
 801858c:	bf14      	ite	ne
 801858e:	2301      	movne	r3, #1
 8018590:	2300      	moveq	r3, #0
 8018592:	b2db      	uxtb	r3, r3
 8018594:	e02f      	b.n	80185f6 <HAL_TIM_PWM_Start+0x9e>
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	2b08      	cmp	r3, #8
 801859a:	d109      	bne.n	80185b0 <HAL_TIM_PWM_Start+0x58>
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	2b01      	cmp	r3, #1
 80185a6:	bf14      	ite	ne
 80185a8:	2301      	movne	r3, #1
 80185aa:	2300      	moveq	r3, #0
 80185ac:	b2db      	uxtb	r3, r3
 80185ae:	e022      	b.n	80185f6 <HAL_TIM_PWM_Start+0x9e>
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	2b0c      	cmp	r3, #12
 80185b4:	d109      	bne.n	80185ca <HAL_TIM_PWM_Start+0x72>
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80185bc:	b2db      	uxtb	r3, r3
 80185be:	2b01      	cmp	r3, #1
 80185c0:	bf14      	ite	ne
 80185c2:	2301      	movne	r3, #1
 80185c4:	2300      	moveq	r3, #0
 80185c6:	b2db      	uxtb	r3, r3
 80185c8:	e015      	b.n	80185f6 <HAL_TIM_PWM_Start+0x9e>
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	2b10      	cmp	r3, #16
 80185ce:	d109      	bne.n	80185e4 <HAL_TIM_PWM_Start+0x8c>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80185d6:	b2db      	uxtb	r3, r3
 80185d8:	2b01      	cmp	r3, #1
 80185da:	bf14      	ite	ne
 80185dc:	2301      	movne	r3, #1
 80185de:	2300      	moveq	r3, #0
 80185e0:	b2db      	uxtb	r3, r3
 80185e2:	e008      	b.n	80185f6 <HAL_TIM_PWM_Start+0x9e>
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	2b01      	cmp	r3, #1
 80185ee:	bf14      	ite	ne
 80185f0:	2301      	movne	r3, #1
 80185f2:	2300      	moveq	r3, #0
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d001      	beq.n	80185fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80185fa:	2301      	movs	r3, #1
 80185fc:	e09c      	b.n	8018738 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d104      	bne.n	801860e <HAL_TIM_PWM_Start+0xb6>
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2202      	movs	r2, #2
 8018608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801860c:	e023      	b.n	8018656 <HAL_TIM_PWM_Start+0xfe>
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	2b04      	cmp	r3, #4
 8018612:	d104      	bne.n	801861e <HAL_TIM_PWM_Start+0xc6>
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	2202      	movs	r2, #2
 8018618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801861c:	e01b      	b.n	8018656 <HAL_TIM_PWM_Start+0xfe>
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	2b08      	cmp	r3, #8
 8018622:	d104      	bne.n	801862e <HAL_TIM_PWM_Start+0xd6>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2202      	movs	r2, #2
 8018628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801862c:	e013      	b.n	8018656 <HAL_TIM_PWM_Start+0xfe>
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	2b0c      	cmp	r3, #12
 8018632:	d104      	bne.n	801863e <HAL_TIM_PWM_Start+0xe6>
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	2202      	movs	r2, #2
 8018638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801863c:	e00b      	b.n	8018656 <HAL_TIM_PWM_Start+0xfe>
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	2b10      	cmp	r3, #16
 8018642:	d104      	bne.n	801864e <HAL_TIM_PWM_Start+0xf6>
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	2202      	movs	r2, #2
 8018648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801864c:	e003      	b.n	8018656 <HAL_TIM_PWM_Start+0xfe>
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2202      	movs	r2, #2
 8018652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	2201      	movs	r2, #1
 801865c:	6839      	ldr	r1, [r7, #0]
 801865e:	4618      	mov	r0, r3
 8018660:	f001 fc8c 	bl	8019f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	4a35      	ldr	r2, [pc, #212]	; (8018740 <HAL_TIM_PWM_Start+0x1e8>)
 801866a:	4293      	cmp	r3, r2
 801866c:	d013      	beq.n	8018696 <HAL_TIM_PWM_Start+0x13e>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	4a34      	ldr	r2, [pc, #208]	; (8018744 <HAL_TIM_PWM_Start+0x1ec>)
 8018674:	4293      	cmp	r3, r2
 8018676:	d00e      	beq.n	8018696 <HAL_TIM_PWM_Start+0x13e>
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4a32      	ldr	r2, [pc, #200]	; (8018748 <HAL_TIM_PWM_Start+0x1f0>)
 801867e:	4293      	cmp	r3, r2
 8018680:	d009      	beq.n	8018696 <HAL_TIM_PWM_Start+0x13e>
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	4a31      	ldr	r2, [pc, #196]	; (801874c <HAL_TIM_PWM_Start+0x1f4>)
 8018688:	4293      	cmp	r3, r2
 801868a:	d004      	beq.n	8018696 <HAL_TIM_PWM_Start+0x13e>
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	4a2f      	ldr	r2, [pc, #188]	; (8018750 <HAL_TIM_PWM_Start+0x1f8>)
 8018692:	4293      	cmp	r3, r2
 8018694:	d101      	bne.n	801869a <HAL_TIM_PWM_Start+0x142>
 8018696:	2301      	movs	r3, #1
 8018698:	e000      	b.n	801869c <HAL_TIM_PWM_Start+0x144>
 801869a:	2300      	movs	r3, #0
 801869c:	2b00      	cmp	r3, #0
 801869e:	d007      	beq.n	80186b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80186ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	4a22      	ldr	r2, [pc, #136]	; (8018740 <HAL_TIM_PWM_Start+0x1e8>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d01d      	beq.n	80186f6 <HAL_TIM_PWM_Start+0x19e>
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80186c2:	d018      	beq.n	80186f6 <HAL_TIM_PWM_Start+0x19e>
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4a22      	ldr	r2, [pc, #136]	; (8018754 <HAL_TIM_PWM_Start+0x1fc>)
 80186ca:	4293      	cmp	r3, r2
 80186cc:	d013      	beq.n	80186f6 <HAL_TIM_PWM_Start+0x19e>
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	4a21      	ldr	r2, [pc, #132]	; (8018758 <HAL_TIM_PWM_Start+0x200>)
 80186d4:	4293      	cmp	r3, r2
 80186d6:	d00e      	beq.n	80186f6 <HAL_TIM_PWM_Start+0x19e>
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	4a1f      	ldr	r2, [pc, #124]	; (801875c <HAL_TIM_PWM_Start+0x204>)
 80186de:	4293      	cmp	r3, r2
 80186e0:	d009      	beq.n	80186f6 <HAL_TIM_PWM_Start+0x19e>
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	4a17      	ldr	r2, [pc, #92]	; (8018744 <HAL_TIM_PWM_Start+0x1ec>)
 80186e8:	4293      	cmp	r3, r2
 80186ea:	d004      	beq.n	80186f6 <HAL_TIM_PWM_Start+0x19e>
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	4a15      	ldr	r2, [pc, #84]	; (8018748 <HAL_TIM_PWM_Start+0x1f0>)
 80186f2:	4293      	cmp	r3, r2
 80186f4:	d115      	bne.n	8018722 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	689a      	ldr	r2, [r3, #8]
 80186fc:	4b18      	ldr	r3, [pc, #96]	; (8018760 <HAL_TIM_PWM_Start+0x208>)
 80186fe:	4013      	ands	r3, r2
 8018700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2b06      	cmp	r3, #6
 8018706:	d015      	beq.n	8018734 <HAL_TIM_PWM_Start+0x1dc>
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801870e:	d011      	beq.n	8018734 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	681a      	ldr	r2, [r3, #0]
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	f042 0201 	orr.w	r2, r2, #1
 801871e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018720:	e008      	b.n	8018734 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	681a      	ldr	r2, [r3, #0]
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	f042 0201 	orr.w	r2, r2, #1
 8018730:	601a      	str	r2, [r3, #0]
 8018732:	e000      	b.n	8018736 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8018736:	2300      	movs	r3, #0
}
 8018738:	4618      	mov	r0, r3
 801873a:	3710      	adds	r7, #16
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	40012c00 	.word	0x40012c00
 8018744:	40013400 	.word	0x40013400
 8018748:	40014000 	.word	0x40014000
 801874c:	40014400 	.word	0x40014400
 8018750:	40014800 	.word	0x40014800
 8018754:	40000400 	.word	0x40000400
 8018758:	40000800 	.word	0x40000800
 801875c:	40000c00 	.word	0x40000c00
 8018760:	00010007 	.word	0x00010007

08018764 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d101      	bne.n	8018776 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8018772:	2301      	movs	r3, #1
 8018774:	e049      	b.n	801880a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801877c:	b2db      	uxtb	r3, r3
 801877e:	2b00      	cmp	r3, #0
 8018780:	d106      	bne.n	8018790 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2200      	movs	r2, #0
 8018786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801878a:	6878      	ldr	r0, [r7, #4]
 801878c:	f000 f841 	bl	8018812 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	2202      	movs	r2, #2
 8018794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	681a      	ldr	r2, [r3, #0]
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	3304      	adds	r3, #4
 80187a0:	4619      	mov	r1, r3
 80187a2:	4610      	mov	r0, r2
 80187a4:	f000 feba 	bl	801951c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2201      	movs	r2, #1
 80187ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2201      	movs	r2, #1
 80187b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	2201      	movs	r2, #1
 80187bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	2201      	movs	r2, #1
 80187c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	2201      	movs	r2, #1
 80187cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2201      	movs	r2, #1
 80187d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2201      	movs	r2, #1
 80187dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	2201      	movs	r2, #1
 80187e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	2201      	movs	r2, #1
 80187ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	2201      	movs	r2, #1
 80187f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	2201      	movs	r2, #1
 80187fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	2201      	movs	r2, #1
 8018804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018808:	2300      	movs	r3, #0
}
 801880a:	4618      	mov	r0, r3
 801880c:	3708      	adds	r7, #8
 801880e:	46bd      	mov	sp, r7
 8018810:	bd80      	pop	{r7, pc}

08018812 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8018812:	b480      	push	{r7}
 8018814:	b083      	sub	sp, #12
 8018816:	af00      	add	r7, sp, #0
 8018818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801881a:	bf00      	nop
 801881c:	370c      	adds	r7, #12
 801881e:	46bd      	mov	sp, r7
 8018820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018824:	4770      	bx	lr
	...

08018828 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
 8018830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018832:	2300      	movs	r3, #0
 8018834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d104      	bne.n	8018846 <HAL_TIM_IC_Start_IT+0x1e>
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018842:	b2db      	uxtb	r3, r3
 8018844:	e023      	b.n	801888e <HAL_TIM_IC_Start_IT+0x66>
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	2b04      	cmp	r3, #4
 801884a:	d104      	bne.n	8018856 <HAL_TIM_IC_Start_IT+0x2e>
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018852:	b2db      	uxtb	r3, r3
 8018854:	e01b      	b.n	801888e <HAL_TIM_IC_Start_IT+0x66>
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	2b08      	cmp	r3, #8
 801885a:	d104      	bne.n	8018866 <HAL_TIM_IC_Start_IT+0x3e>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018862:	b2db      	uxtb	r3, r3
 8018864:	e013      	b.n	801888e <HAL_TIM_IC_Start_IT+0x66>
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	2b0c      	cmp	r3, #12
 801886a:	d104      	bne.n	8018876 <HAL_TIM_IC_Start_IT+0x4e>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018872:	b2db      	uxtb	r3, r3
 8018874:	e00b      	b.n	801888e <HAL_TIM_IC_Start_IT+0x66>
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	2b10      	cmp	r3, #16
 801887a:	d104      	bne.n	8018886 <HAL_TIM_IC_Start_IT+0x5e>
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018882:	b2db      	uxtb	r3, r3
 8018884:	e003      	b.n	801888e <HAL_TIM_IC_Start_IT+0x66>
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801888c:	b2db      	uxtb	r3, r3
 801888e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d104      	bne.n	80188a0 <HAL_TIM_IC_Start_IT+0x78>
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801889c:	b2db      	uxtb	r3, r3
 801889e:	e013      	b.n	80188c8 <HAL_TIM_IC_Start_IT+0xa0>
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	2b04      	cmp	r3, #4
 80188a4:	d104      	bne.n	80188b0 <HAL_TIM_IC_Start_IT+0x88>
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80188ac:	b2db      	uxtb	r3, r3
 80188ae:	e00b      	b.n	80188c8 <HAL_TIM_IC_Start_IT+0xa0>
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	2b08      	cmp	r3, #8
 80188b4:	d104      	bne.n	80188c0 <HAL_TIM_IC_Start_IT+0x98>
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	e003      	b.n	80188c8 <HAL_TIM_IC_Start_IT+0xa0>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80188c6:	b2db      	uxtb	r3, r3
 80188c8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80188ca:	7bbb      	ldrb	r3, [r7, #14]
 80188cc:	2b01      	cmp	r3, #1
 80188ce:	d102      	bne.n	80188d6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80188d0:	7b7b      	ldrb	r3, [r7, #13]
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d001      	beq.n	80188da <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80188d6:	2301      	movs	r3, #1
 80188d8:	e0dd      	b.n	8018a96 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d104      	bne.n	80188ea <HAL_TIM_IC_Start_IT+0xc2>
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2202      	movs	r2, #2
 80188e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80188e8:	e023      	b.n	8018932 <HAL_TIM_IC_Start_IT+0x10a>
 80188ea:	683b      	ldr	r3, [r7, #0]
 80188ec:	2b04      	cmp	r3, #4
 80188ee:	d104      	bne.n	80188fa <HAL_TIM_IC_Start_IT+0xd2>
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	2202      	movs	r2, #2
 80188f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80188f8:	e01b      	b.n	8018932 <HAL_TIM_IC_Start_IT+0x10a>
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	2b08      	cmp	r3, #8
 80188fe:	d104      	bne.n	801890a <HAL_TIM_IC_Start_IT+0xe2>
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2202      	movs	r2, #2
 8018904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018908:	e013      	b.n	8018932 <HAL_TIM_IC_Start_IT+0x10a>
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	2b0c      	cmp	r3, #12
 801890e:	d104      	bne.n	801891a <HAL_TIM_IC_Start_IT+0xf2>
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2202      	movs	r2, #2
 8018914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8018918:	e00b      	b.n	8018932 <HAL_TIM_IC_Start_IT+0x10a>
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	2b10      	cmp	r3, #16
 801891e:	d104      	bne.n	801892a <HAL_TIM_IC_Start_IT+0x102>
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2202      	movs	r2, #2
 8018924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018928:	e003      	b.n	8018932 <HAL_TIM_IC_Start_IT+0x10a>
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	2202      	movs	r2, #2
 801892e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d104      	bne.n	8018942 <HAL_TIM_IC_Start_IT+0x11a>
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2202      	movs	r2, #2
 801893c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018940:	e013      	b.n	801896a <HAL_TIM_IC_Start_IT+0x142>
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	2b04      	cmp	r3, #4
 8018946:	d104      	bne.n	8018952 <HAL_TIM_IC_Start_IT+0x12a>
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	2202      	movs	r2, #2
 801894c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018950:	e00b      	b.n	801896a <HAL_TIM_IC_Start_IT+0x142>
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	2b08      	cmp	r3, #8
 8018956:	d104      	bne.n	8018962 <HAL_TIM_IC_Start_IT+0x13a>
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2202      	movs	r2, #2
 801895c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8018960:	e003      	b.n	801896a <HAL_TIM_IC_Start_IT+0x142>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	2202      	movs	r2, #2
 8018966:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	2b0c      	cmp	r3, #12
 801896e:	d841      	bhi.n	80189f4 <HAL_TIM_IC_Start_IT+0x1cc>
 8018970:	a201      	add	r2, pc, #4	; (adr r2, 8018978 <HAL_TIM_IC_Start_IT+0x150>)
 8018972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018976:	bf00      	nop
 8018978:	080189ad 	.word	0x080189ad
 801897c:	080189f5 	.word	0x080189f5
 8018980:	080189f5 	.word	0x080189f5
 8018984:	080189f5 	.word	0x080189f5
 8018988:	080189bf 	.word	0x080189bf
 801898c:	080189f5 	.word	0x080189f5
 8018990:	080189f5 	.word	0x080189f5
 8018994:	080189f5 	.word	0x080189f5
 8018998:	080189d1 	.word	0x080189d1
 801899c:	080189f5 	.word	0x080189f5
 80189a0:	080189f5 	.word	0x080189f5
 80189a4:	080189f5 	.word	0x080189f5
 80189a8:	080189e3 	.word	0x080189e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	68da      	ldr	r2, [r3, #12]
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	f042 0202 	orr.w	r2, r2, #2
 80189ba:	60da      	str	r2, [r3, #12]
      break;
 80189bc:	e01d      	b.n	80189fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	68da      	ldr	r2, [r3, #12]
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	f042 0204 	orr.w	r2, r2, #4
 80189cc:	60da      	str	r2, [r3, #12]
      break;
 80189ce:	e014      	b.n	80189fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	68da      	ldr	r2, [r3, #12]
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	f042 0208 	orr.w	r2, r2, #8
 80189de:	60da      	str	r2, [r3, #12]
      break;
 80189e0:	e00b      	b.n	80189fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	68da      	ldr	r2, [r3, #12]
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	f042 0210 	orr.w	r2, r2, #16
 80189f0:	60da      	str	r2, [r3, #12]
      break;
 80189f2:	e002      	b.n	80189fa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80189f4:	2301      	movs	r3, #1
 80189f6:	73fb      	strb	r3, [r7, #15]
      break;
 80189f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80189fa:	7bfb      	ldrb	r3, [r7, #15]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d149      	bne.n	8018a94 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	2201      	movs	r2, #1
 8018a06:	6839      	ldr	r1, [r7, #0]
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f001 fab7 	bl	8019f7c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	4a23      	ldr	r2, [pc, #140]	; (8018aa0 <HAL_TIM_IC_Start_IT+0x278>)
 8018a14:	4293      	cmp	r3, r2
 8018a16:	d01d      	beq.n	8018a54 <HAL_TIM_IC_Start_IT+0x22c>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018a20:	d018      	beq.n	8018a54 <HAL_TIM_IC_Start_IT+0x22c>
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	4a1f      	ldr	r2, [pc, #124]	; (8018aa4 <HAL_TIM_IC_Start_IT+0x27c>)
 8018a28:	4293      	cmp	r3, r2
 8018a2a:	d013      	beq.n	8018a54 <HAL_TIM_IC_Start_IT+0x22c>
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	4a1d      	ldr	r2, [pc, #116]	; (8018aa8 <HAL_TIM_IC_Start_IT+0x280>)
 8018a32:	4293      	cmp	r3, r2
 8018a34:	d00e      	beq.n	8018a54 <HAL_TIM_IC_Start_IT+0x22c>
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	4a1c      	ldr	r2, [pc, #112]	; (8018aac <HAL_TIM_IC_Start_IT+0x284>)
 8018a3c:	4293      	cmp	r3, r2
 8018a3e:	d009      	beq.n	8018a54 <HAL_TIM_IC_Start_IT+0x22c>
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	4a1a      	ldr	r2, [pc, #104]	; (8018ab0 <HAL_TIM_IC_Start_IT+0x288>)
 8018a46:	4293      	cmp	r3, r2
 8018a48:	d004      	beq.n	8018a54 <HAL_TIM_IC_Start_IT+0x22c>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	4a19      	ldr	r2, [pc, #100]	; (8018ab4 <HAL_TIM_IC_Start_IT+0x28c>)
 8018a50:	4293      	cmp	r3, r2
 8018a52:	d115      	bne.n	8018a80 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	689a      	ldr	r2, [r3, #8]
 8018a5a:	4b17      	ldr	r3, [pc, #92]	; (8018ab8 <HAL_TIM_IC_Start_IT+0x290>)
 8018a5c:	4013      	ands	r3, r2
 8018a5e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018a60:	68bb      	ldr	r3, [r7, #8]
 8018a62:	2b06      	cmp	r3, #6
 8018a64:	d015      	beq.n	8018a92 <HAL_TIM_IC_Start_IT+0x26a>
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a6c:	d011      	beq.n	8018a92 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	681a      	ldr	r2, [r3, #0]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	f042 0201 	orr.w	r2, r2, #1
 8018a7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018a7e:	e008      	b.n	8018a92 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	681a      	ldr	r2, [r3, #0]
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	f042 0201 	orr.w	r2, r2, #1
 8018a8e:	601a      	str	r2, [r3, #0]
 8018a90:	e000      	b.n	8018a94 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018a92:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8018a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a96:	4618      	mov	r0, r3
 8018a98:	3710      	adds	r7, #16
 8018a9a:	46bd      	mov	sp, r7
 8018a9c:	bd80      	pop	{r7, pc}
 8018a9e:	bf00      	nop
 8018aa0:	40012c00 	.word	0x40012c00
 8018aa4:	40000400 	.word	0x40000400
 8018aa8:	40000800 	.word	0x40000800
 8018aac:	40000c00 	.word	0x40000c00
 8018ab0:	40013400 	.word	0x40013400
 8018ab4:	40014000 	.word	0x40014000
 8018ab8:	00010007 	.word	0x00010007

08018abc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b086      	sub	sp, #24
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d101      	bne.n	8018ad0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8018acc:	2301      	movs	r3, #1
 8018ace:	e097      	b.n	8018c00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ad6:	b2db      	uxtb	r3, r3
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d106      	bne.n	8018aea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8018ae4:	6878      	ldr	r0, [r7, #4]
 8018ae6:	f7f9 f895 	bl	8011c14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	2202      	movs	r2, #2
 8018aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	689b      	ldr	r3, [r3, #8]
 8018af8:	687a      	ldr	r2, [r7, #4]
 8018afa:	6812      	ldr	r2, [r2, #0]
 8018afc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8018b00:	f023 0307 	bic.w	r3, r3, #7
 8018b04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	3304      	adds	r3, #4
 8018b0e:	4619      	mov	r1, r3
 8018b10:	4610      	mov	r0, r2
 8018b12:	f000 fd03 	bl	801951c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	689b      	ldr	r3, [r3, #8]
 8018b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	699b      	ldr	r3, [r3, #24]
 8018b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	6a1b      	ldr	r3, [r3, #32]
 8018b2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	697a      	ldr	r2, [r7, #20]
 8018b34:	4313      	orrs	r3, r2
 8018b36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8018b38:	693b      	ldr	r3, [r7, #16]
 8018b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018b3e:	f023 0303 	bic.w	r3, r3, #3
 8018b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	689a      	ldr	r2, [r3, #8]
 8018b48:	683b      	ldr	r3, [r7, #0]
 8018b4a:	699b      	ldr	r3, [r3, #24]
 8018b4c:	021b      	lsls	r3, r3, #8
 8018b4e:	4313      	orrs	r3, r2
 8018b50:	693a      	ldr	r2, [r7, #16]
 8018b52:	4313      	orrs	r3, r2
 8018b54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8018b5c:	f023 030c 	bic.w	r3, r3, #12
 8018b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8018b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8018b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8018b6e:	683b      	ldr	r3, [r7, #0]
 8018b70:	68da      	ldr	r2, [r3, #12]
 8018b72:	683b      	ldr	r3, [r7, #0]
 8018b74:	69db      	ldr	r3, [r3, #28]
 8018b76:	021b      	lsls	r3, r3, #8
 8018b78:	4313      	orrs	r3, r2
 8018b7a:	693a      	ldr	r2, [r7, #16]
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8018b80:	683b      	ldr	r3, [r7, #0]
 8018b82:	691b      	ldr	r3, [r3, #16]
 8018b84:	011a      	lsls	r2, r3, #4
 8018b86:	683b      	ldr	r3, [r7, #0]
 8018b88:	6a1b      	ldr	r3, [r3, #32]
 8018b8a:	031b      	lsls	r3, r3, #12
 8018b8c:	4313      	orrs	r3, r2
 8018b8e:	693a      	ldr	r2, [r7, #16]
 8018b90:	4313      	orrs	r3, r2
 8018b92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8018b9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8018ba2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8018ba4:	683b      	ldr	r3, [r7, #0]
 8018ba6:	685a      	ldr	r2, [r3, #4]
 8018ba8:	683b      	ldr	r3, [r7, #0]
 8018baa:	695b      	ldr	r3, [r3, #20]
 8018bac:	011b      	lsls	r3, r3, #4
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	68fa      	ldr	r2, [r7, #12]
 8018bb2:	4313      	orrs	r3, r2
 8018bb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	697a      	ldr	r2, [r7, #20]
 8018bbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	693a      	ldr	r2, [r7, #16]
 8018bc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	68fa      	ldr	r2, [r7, #12]
 8018bcc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2201      	movs	r2, #1
 8018bd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	2201      	movs	r2, #1
 8018bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	2201      	movs	r2, #1
 8018be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2201      	movs	r2, #1
 8018bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	2201      	movs	r2, #1
 8018bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	2201      	movs	r2, #1
 8018bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018bfe:	2300      	movs	r3, #0
}
 8018c00:	4618      	mov	r0, r3
 8018c02:	3718      	adds	r7, #24
 8018c04:	46bd      	mov	sp, r7
 8018c06:	bd80      	pop	{r7, pc}

08018c08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b084      	sub	sp, #16
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
 8018c10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018c18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018c20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018c28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018c30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d110      	bne.n	8018c5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8018c38:	7bfb      	ldrb	r3, [r7, #15]
 8018c3a:	2b01      	cmp	r3, #1
 8018c3c:	d102      	bne.n	8018c44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8018c3e:	7b7b      	ldrb	r3, [r7, #13]
 8018c40:	2b01      	cmp	r3, #1
 8018c42:	d001      	beq.n	8018c48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8018c44:	2301      	movs	r3, #1
 8018c46:	e069      	b.n	8018d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2202      	movs	r2, #2
 8018c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2202      	movs	r2, #2
 8018c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018c58:	e031      	b.n	8018cbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	2b04      	cmp	r3, #4
 8018c5e:	d110      	bne.n	8018c82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8018c60:	7bbb      	ldrb	r3, [r7, #14]
 8018c62:	2b01      	cmp	r3, #1
 8018c64:	d102      	bne.n	8018c6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8018c66:	7b3b      	ldrb	r3, [r7, #12]
 8018c68:	2b01      	cmp	r3, #1
 8018c6a:	d001      	beq.n	8018c70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8018c6c:	2301      	movs	r3, #1
 8018c6e:	e055      	b.n	8018d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2202      	movs	r2, #2
 8018c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2202      	movs	r2, #2
 8018c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018c80:	e01d      	b.n	8018cbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8018c82:	7bfb      	ldrb	r3, [r7, #15]
 8018c84:	2b01      	cmp	r3, #1
 8018c86:	d108      	bne.n	8018c9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8018c88:	7bbb      	ldrb	r3, [r7, #14]
 8018c8a:	2b01      	cmp	r3, #1
 8018c8c:	d105      	bne.n	8018c9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8018c8e:	7b7b      	ldrb	r3, [r7, #13]
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d102      	bne.n	8018c9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8018c94:	7b3b      	ldrb	r3, [r7, #12]
 8018c96:	2b01      	cmp	r3, #1
 8018c98:	d001      	beq.n	8018c9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	e03e      	b.n	8018d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	2202      	movs	r2, #2
 8018ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2202      	movs	r2, #2
 8018caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	2202      	movs	r2, #2
 8018cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	2202      	movs	r2, #2
 8018cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d003      	beq.n	8018ccc <HAL_TIM_Encoder_Start+0xc4>
 8018cc4:	683b      	ldr	r3, [r7, #0]
 8018cc6:	2b04      	cmp	r3, #4
 8018cc8:	d008      	beq.n	8018cdc <HAL_TIM_Encoder_Start+0xd4>
 8018cca:	e00f      	b.n	8018cec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	2100      	movs	r1, #0
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f001 f951 	bl	8019f7c <TIM_CCxChannelCmd>
      break;
 8018cda:	e016      	b.n	8018d0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	2201      	movs	r2, #1
 8018ce2:	2104      	movs	r1, #4
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	f001 f949 	bl	8019f7c <TIM_CCxChannelCmd>
      break;
 8018cea:	e00e      	b.n	8018d0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2201      	movs	r2, #1
 8018cf2:	2100      	movs	r1, #0
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f001 f941 	bl	8019f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	2201      	movs	r2, #1
 8018d00:	2104      	movs	r1, #4
 8018d02:	4618      	mov	r0, r3
 8018d04:	f001 f93a 	bl	8019f7c <TIM_CCxChannelCmd>
      break;
 8018d08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	681a      	ldr	r2, [r3, #0]
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	f042 0201 	orr.w	r2, r2, #1
 8018d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8018d1a:	2300      	movs	r3, #0
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3710      	adds	r7, #16
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	691b      	ldr	r3, [r3, #16]
 8018d32:	f003 0302 	and.w	r3, r3, #2
 8018d36:	2b02      	cmp	r3, #2
 8018d38:	d122      	bne.n	8018d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	68db      	ldr	r3, [r3, #12]
 8018d40:	f003 0302 	and.w	r3, r3, #2
 8018d44:	2b02      	cmp	r3, #2
 8018d46:	d11b      	bne.n	8018d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	f06f 0202 	mvn.w	r2, #2
 8018d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	2201      	movs	r2, #1
 8018d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	699b      	ldr	r3, [r3, #24]
 8018d5e:	f003 0303 	and.w	r3, r3, #3
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d003      	beq.n	8018d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f7ea f8e4 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8018d6c:	e005      	b.n	8018d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018d6e:	6878      	ldr	r0, [r7, #4]
 8018d70:	f000 fbb6 	bl	80194e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f000 fbbd 	bl	80194f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	691b      	ldr	r3, [r3, #16]
 8018d86:	f003 0304 	and.w	r3, r3, #4
 8018d8a:	2b04      	cmp	r3, #4
 8018d8c:	d122      	bne.n	8018dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	68db      	ldr	r3, [r3, #12]
 8018d94:	f003 0304 	and.w	r3, r3, #4
 8018d98:	2b04      	cmp	r3, #4
 8018d9a:	d11b      	bne.n	8018dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	f06f 0204 	mvn.w	r2, #4
 8018da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2202      	movs	r2, #2
 8018daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	699b      	ldr	r3, [r3, #24]
 8018db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d003      	beq.n	8018dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018dba:	6878      	ldr	r0, [r7, #4]
 8018dbc:	f7ea f8ba 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8018dc0:	e005      	b.n	8018dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018dc2:	6878      	ldr	r0, [r7, #4]
 8018dc4:	f000 fb8c 	bl	80194e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f000 fb93 	bl	80194f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	691b      	ldr	r3, [r3, #16]
 8018dda:	f003 0308 	and.w	r3, r3, #8
 8018dde:	2b08      	cmp	r3, #8
 8018de0:	d122      	bne.n	8018e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	68db      	ldr	r3, [r3, #12]
 8018de8:	f003 0308 	and.w	r3, r3, #8
 8018dec:	2b08      	cmp	r3, #8
 8018dee:	d11b      	bne.n	8018e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f06f 0208 	mvn.w	r2, #8
 8018df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2204      	movs	r2, #4
 8018dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	69db      	ldr	r3, [r3, #28]
 8018e06:	f003 0303 	and.w	r3, r3, #3
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d003      	beq.n	8018e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018e0e:	6878      	ldr	r0, [r7, #4]
 8018e10:	f7ea f890 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8018e14:	e005      	b.n	8018e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	f000 fb62 	bl	80194e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f000 fb69 	bl	80194f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2200      	movs	r2, #0
 8018e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	691b      	ldr	r3, [r3, #16]
 8018e2e:	f003 0310 	and.w	r3, r3, #16
 8018e32:	2b10      	cmp	r3, #16
 8018e34:	d122      	bne.n	8018e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	68db      	ldr	r3, [r3, #12]
 8018e3c:	f003 0310 	and.w	r3, r3, #16
 8018e40:	2b10      	cmp	r3, #16
 8018e42:	d11b      	bne.n	8018e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	f06f 0210 	mvn.w	r2, #16
 8018e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2208      	movs	r2, #8
 8018e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	69db      	ldr	r3, [r3, #28]
 8018e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d003      	beq.n	8018e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018e62:	6878      	ldr	r0, [r7, #4]
 8018e64:	f7ea f866 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
 8018e68:	e005      	b.n	8018e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018e6a:	6878      	ldr	r0, [r7, #4]
 8018e6c:	f000 fb38 	bl	80194e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f000 fb3f 	bl	80194f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	691b      	ldr	r3, [r3, #16]
 8018e82:	f003 0301 	and.w	r3, r3, #1
 8018e86:	2b01      	cmp	r3, #1
 8018e88:	d10e      	bne.n	8018ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	68db      	ldr	r3, [r3, #12]
 8018e90:	f003 0301 	and.w	r3, r3, #1
 8018e94:	2b01      	cmp	r3, #1
 8018e96:	d107      	bne.n	8018ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	f06f 0201 	mvn.w	r2, #1
 8018ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018ea2:	6878      	ldr	r0, [r7, #4]
 8018ea4:	f7f8 fab6 	bl	8011414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	691b      	ldr	r3, [r3, #16]
 8018eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018eb2:	2b80      	cmp	r3, #128	; 0x80
 8018eb4:	d10e      	bne.n	8018ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	68db      	ldr	r3, [r3, #12]
 8018ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ec0:	2b80      	cmp	r3, #128	; 0x80
 8018ec2:	d107      	bne.n	8018ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018ece:	6878      	ldr	r0, [r7, #4]
 8018ed0:	f001 f9ac 	bl	801a22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	691b      	ldr	r3, [r3, #16]
 8018eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018ee2:	d10e      	bne.n	8018f02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	68db      	ldr	r3, [r3, #12]
 8018eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018eee:	2b80      	cmp	r3, #128	; 0x80
 8018ef0:	d107      	bne.n	8018f02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8018efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f001 f99f 	bl	801a240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	691b      	ldr	r3, [r3, #16]
 8018f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f0c:	2b40      	cmp	r3, #64	; 0x40
 8018f0e:	d10e      	bne.n	8018f2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	68db      	ldr	r3, [r3, #12]
 8018f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f1a:	2b40      	cmp	r3, #64	; 0x40
 8018f1c:	d107      	bne.n	8018f2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018f28:	6878      	ldr	r0, [r7, #4]
 8018f2a:	f000 faed 	bl	8019508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	691b      	ldr	r3, [r3, #16]
 8018f34:	f003 0320 	and.w	r3, r3, #32
 8018f38:	2b20      	cmp	r3, #32
 8018f3a:	d10e      	bne.n	8018f5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	68db      	ldr	r3, [r3, #12]
 8018f42:	f003 0320 	and.w	r3, r3, #32
 8018f46:	2b20      	cmp	r3, #32
 8018f48:	d107      	bne.n	8018f5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	f06f 0220 	mvn.w	r2, #32
 8018f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	f001 f95f 	bl	801a218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018f5a:	bf00      	nop
 8018f5c:	3708      	adds	r7, #8
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}

08018f62 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8018f62:	b580      	push	{r7, lr}
 8018f64:	b086      	sub	sp, #24
 8018f66:	af00      	add	r7, sp, #0
 8018f68:	60f8      	str	r0, [r7, #12]
 8018f6a:	60b9      	str	r1, [r7, #8]
 8018f6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018f78:	2b01      	cmp	r3, #1
 8018f7a:	d101      	bne.n	8018f80 <HAL_TIM_IC_ConfigChannel+0x1e>
 8018f7c:	2302      	movs	r3, #2
 8018f7e:	e088      	b.n	8019092 <HAL_TIM_IC_ConfigChannel+0x130>
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	2201      	movs	r2, #1
 8018f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d11b      	bne.n	8018fc6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8018f92:	68bb      	ldr	r3, [r7, #8]
 8018f94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8018f9a:	68bb      	ldr	r3, [r7, #8]
 8018f9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8018f9e:	f000 fe2d 	bl	8019bfc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	699a      	ldr	r2, [r3, #24]
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	f022 020c 	bic.w	r2, r2, #12
 8018fb0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	6999      	ldr	r1, [r3, #24]
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	689a      	ldr	r2, [r3, #8]
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	430a      	orrs	r2, r1
 8018fc2:	619a      	str	r2, [r3, #24]
 8018fc4:	e060      	b.n	8019088 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2b04      	cmp	r3, #4
 8018fca:	d11c      	bne.n	8019006 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8018fdc:	f000 feab 	bl	8019d36 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	699a      	ldr	r2, [r3, #24]
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8018fee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	6999      	ldr	r1, [r3, #24]
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	689b      	ldr	r3, [r3, #8]
 8018ffa:	021a      	lsls	r2, r3, #8
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	430a      	orrs	r2, r1
 8019002:	619a      	str	r2, [r3, #24]
 8019004:	e040      	b.n	8019088 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	2b08      	cmp	r3, #8
 801900a:	d11b      	bne.n	8019044 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8019018:	68bb      	ldr	r3, [r7, #8]
 801901a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801901c:	f000 fef8 	bl	8019e10 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	69da      	ldr	r2, [r3, #28]
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	f022 020c 	bic.w	r2, r2, #12
 801902e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	69d9      	ldr	r1, [r3, #28]
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	689a      	ldr	r2, [r3, #8]
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	430a      	orrs	r2, r1
 8019040:	61da      	str	r2, [r3, #28]
 8019042:	e021      	b.n	8019088 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2b0c      	cmp	r3, #12
 8019048:	d11c      	bne.n	8019084 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801904a:	68fb      	ldr	r3, [r7, #12]
 801904c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801905a:	f000 ff15 	bl	8019e88 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	69da      	ldr	r2, [r3, #28]
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801906c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	69d9      	ldr	r1, [r3, #28]
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	689b      	ldr	r3, [r3, #8]
 8019078:	021a      	lsls	r2, r3, #8
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	430a      	orrs	r2, r1
 8019080:	61da      	str	r2, [r3, #28]
 8019082:	e001      	b.n	8019088 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8019084:	2301      	movs	r3, #1
 8019086:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	2200      	movs	r2, #0
 801908c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8019090:	7dfb      	ldrb	r3, [r7, #23]
}
 8019092:	4618      	mov	r0, r3
 8019094:	3718      	adds	r7, #24
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}
	...

0801909c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b086      	sub	sp, #24
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	60f8      	str	r0, [r7, #12]
 80190a4:	60b9      	str	r1, [r7, #8]
 80190a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80190a8:	2300      	movs	r3, #0
 80190aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d101      	bne.n	80190ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80190b6:	2302      	movs	r3, #2
 80190b8:	e0ff      	b.n	80192ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	2201      	movs	r2, #1
 80190be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2b14      	cmp	r3, #20
 80190c6:	f200 80f0 	bhi.w	80192aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80190ca:	a201      	add	r2, pc, #4	; (adr r2, 80190d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80190cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190d0:	08019125 	.word	0x08019125
 80190d4:	080192ab 	.word	0x080192ab
 80190d8:	080192ab 	.word	0x080192ab
 80190dc:	080192ab 	.word	0x080192ab
 80190e0:	08019165 	.word	0x08019165
 80190e4:	080192ab 	.word	0x080192ab
 80190e8:	080192ab 	.word	0x080192ab
 80190ec:	080192ab 	.word	0x080192ab
 80190f0:	080191a7 	.word	0x080191a7
 80190f4:	080192ab 	.word	0x080192ab
 80190f8:	080192ab 	.word	0x080192ab
 80190fc:	080192ab 	.word	0x080192ab
 8019100:	080191e7 	.word	0x080191e7
 8019104:	080192ab 	.word	0x080192ab
 8019108:	080192ab 	.word	0x080192ab
 801910c:	080192ab 	.word	0x080192ab
 8019110:	08019229 	.word	0x08019229
 8019114:	080192ab 	.word	0x080192ab
 8019118:	080192ab 	.word	0x080192ab
 801911c:	080192ab 	.word	0x080192ab
 8019120:	08019269 	.word	0x08019269
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	68b9      	ldr	r1, [r7, #8]
 801912a:	4618      	mov	r0, r3
 801912c:	f000 fa90 	bl	8019650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	699a      	ldr	r2, [r3, #24]
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	f042 0208 	orr.w	r2, r2, #8
 801913e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	699a      	ldr	r2, [r3, #24]
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	f022 0204 	bic.w	r2, r2, #4
 801914e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	6999      	ldr	r1, [r3, #24]
 8019156:	68bb      	ldr	r3, [r7, #8]
 8019158:	691a      	ldr	r2, [r3, #16]
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	430a      	orrs	r2, r1
 8019160:	619a      	str	r2, [r3, #24]
      break;
 8019162:	e0a5      	b.n	80192b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	68b9      	ldr	r1, [r7, #8]
 801916a:	4618      	mov	r0, r3
 801916c:	f000 fb00 	bl	8019770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	699a      	ldr	r2, [r3, #24]
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801917e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	699a      	ldr	r2, [r3, #24]
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801918e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	6999      	ldr	r1, [r3, #24]
 8019196:	68bb      	ldr	r3, [r7, #8]
 8019198:	691b      	ldr	r3, [r3, #16]
 801919a:	021a      	lsls	r2, r3, #8
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	430a      	orrs	r2, r1
 80191a2:	619a      	str	r2, [r3, #24]
      break;
 80191a4:	e084      	b.n	80192b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	68b9      	ldr	r1, [r7, #8]
 80191ac:	4618      	mov	r0, r3
 80191ae:	f000 fb69 	bl	8019884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	69da      	ldr	r2, [r3, #28]
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	f042 0208 	orr.w	r2, r2, #8
 80191c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	69da      	ldr	r2, [r3, #28]
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f022 0204 	bic.w	r2, r2, #4
 80191d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	69d9      	ldr	r1, [r3, #28]
 80191d8:	68bb      	ldr	r3, [r7, #8]
 80191da:	691a      	ldr	r2, [r3, #16]
 80191dc:	68fb      	ldr	r3, [r7, #12]
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	430a      	orrs	r2, r1
 80191e2:	61da      	str	r2, [r3, #28]
      break;
 80191e4:	e064      	b.n	80192b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	68b9      	ldr	r1, [r7, #8]
 80191ec:	4618      	mov	r0, r3
 80191ee:	f000 fbd1 	bl	8019994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	69da      	ldr	r2, [r3, #28]
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	69da      	ldr	r2, [r3, #28]
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	69d9      	ldr	r1, [r3, #28]
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	691b      	ldr	r3, [r3, #16]
 801921c:	021a      	lsls	r2, r3, #8
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	430a      	orrs	r2, r1
 8019224:	61da      	str	r2, [r3, #28]
      break;
 8019226:	e043      	b.n	80192b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	68b9      	ldr	r1, [r7, #8]
 801922e:	4618      	mov	r0, r3
 8019230:	f000 fc1a 	bl	8019a68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	f042 0208 	orr.w	r2, r2, #8
 8019242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	f022 0204 	bic.w	r2, r2, #4
 8019252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801925a:	68bb      	ldr	r3, [r7, #8]
 801925c:	691a      	ldr	r2, [r3, #16]
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	430a      	orrs	r2, r1
 8019264:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8019266:	e023      	b.n	80192b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	68b9      	ldr	r1, [r7, #8]
 801926e:	4618      	mov	r0, r3
 8019270:	f000 fc5e 	bl	8019b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	691b      	ldr	r3, [r3, #16]
 801929e:	021a      	lsls	r2, r3, #8
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	430a      	orrs	r2, r1
 80192a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80192a8:	e002      	b.n	80192b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80192aa:	2301      	movs	r3, #1
 80192ac:	75fb      	strb	r3, [r7, #23]
      break;
 80192ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	2200      	movs	r2, #0
 80192b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80192b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	3718      	adds	r7, #24
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}
 80192c2:	bf00      	nop

080192c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b084      	sub	sp, #16
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
 80192cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80192ce:	2300      	movs	r3, #0
 80192d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80192d8:	2b01      	cmp	r3, #1
 80192da:	d101      	bne.n	80192e0 <HAL_TIM_ConfigClockSource+0x1c>
 80192dc:	2302      	movs	r3, #2
 80192de:	e0b6      	b.n	801944e <HAL_TIM_ConfigClockSource+0x18a>
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	2201      	movs	r2, #1
 80192e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	2202      	movs	r2, #2
 80192ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	689b      	ldr	r3, [r3, #8]
 80192f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80192fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8019302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019304:	68bb      	ldr	r3, [r7, #8]
 8019306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801930a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	68ba      	ldr	r2, [r7, #8]
 8019312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801931c:	d03e      	beq.n	801939c <HAL_TIM_ConfigClockSource+0xd8>
 801931e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019322:	f200 8087 	bhi.w	8019434 <HAL_TIM_ConfigClockSource+0x170>
 8019326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801932a:	f000 8086 	beq.w	801943a <HAL_TIM_ConfigClockSource+0x176>
 801932e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019332:	d87f      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 8019334:	2b70      	cmp	r3, #112	; 0x70
 8019336:	d01a      	beq.n	801936e <HAL_TIM_ConfigClockSource+0xaa>
 8019338:	2b70      	cmp	r3, #112	; 0x70
 801933a:	d87b      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 801933c:	2b60      	cmp	r3, #96	; 0x60
 801933e:	d050      	beq.n	80193e2 <HAL_TIM_ConfigClockSource+0x11e>
 8019340:	2b60      	cmp	r3, #96	; 0x60
 8019342:	d877      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 8019344:	2b50      	cmp	r3, #80	; 0x50
 8019346:	d03c      	beq.n	80193c2 <HAL_TIM_ConfigClockSource+0xfe>
 8019348:	2b50      	cmp	r3, #80	; 0x50
 801934a:	d873      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 801934c:	2b40      	cmp	r3, #64	; 0x40
 801934e:	d058      	beq.n	8019402 <HAL_TIM_ConfigClockSource+0x13e>
 8019350:	2b40      	cmp	r3, #64	; 0x40
 8019352:	d86f      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 8019354:	2b30      	cmp	r3, #48	; 0x30
 8019356:	d064      	beq.n	8019422 <HAL_TIM_ConfigClockSource+0x15e>
 8019358:	2b30      	cmp	r3, #48	; 0x30
 801935a:	d86b      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 801935c:	2b20      	cmp	r3, #32
 801935e:	d060      	beq.n	8019422 <HAL_TIM_ConfigClockSource+0x15e>
 8019360:	2b20      	cmp	r3, #32
 8019362:	d867      	bhi.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
 8019364:	2b00      	cmp	r3, #0
 8019366:	d05c      	beq.n	8019422 <HAL_TIM_ConfigClockSource+0x15e>
 8019368:	2b10      	cmp	r3, #16
 801936a:	d05a      	beq.n	8019422 <HAL_TIM_ConfigClockSource+0x15e>
 801936c:	e062      	b.n	8019434 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8019376:	683b      	ldr	r3, [r7, #0]
 8019378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801937e:	f000 fddd 	bl	8019f3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	689b      	ldr	r3, [r3, #8]
 8019388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8019390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	68ba      	ldr	r2, [r7, #8]
 8019398:	609a      	str	r2, [r3, #8]
      break;
 801939a:	e04f      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80193a4:	683b      	ldr	r3, [r7, #0]
 80193a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80193a8:	683b      	ldr	r3, [r7, #0]
 80193aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80193ac:	f000 fdc6 	bl	8019f3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	689a      	ldr	r2, [r3, #8]
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80193be:	609a      	str	r2, [r3, #8]
      break;
 80193c0:	e03c      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80193ce:	461a      	mov	r2, r3
 80193d0:	f000 fc82 	bl	8019cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	2150      	movs	r1, #80	; 0x50
 80193da:	4618      	mov	r0, r3
 80193dc:	f000 fd91 	bl	8019f02 <TIM_ITRx_SetConfig>
      break;
 80193e0:	e02c      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80193e6:	683b      	ldr	r3, [r7, #0]
 80193e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80193ee:	461a      	mov	r2, r3
 80193f0:	f000 fcde 	bl	8019db0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	2160      	movs	r1, #96	; 0x60
 80193fa:	4618      	mov	r0, r3
 80193fc:	f000 fd81 	bl	8019f02 <TIM_ITRx_SetConfig>
      break;
 8019400:	e01c      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8019406:	683b      	ldr	r3, [r7, #0]
 8019408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801940a:	683b      	ldr	r3, [r7, #0]
 801940c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801940e:	461a      	mov	r2, r3
 8019410:	f000 fc62 	bl	8019cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2140      	movs	r1, #64	; 0x40
 801941a:	4618      	mov	r0, r3
 801941c:	f000 fd71 	bl	8019f02 <TIM_ITRx_SetConfig>
      break;
 8019420:	e00c      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681a      	ldr	r2, [r3, #0]
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	4619      	mov	r1, r3
 801942c:	4610      	mov	r0, r2
 801942e:	f000 fd68 	bl	8019f02 <TIM_ITRx_SetConfig>
      break;
 8019432:	e003      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8019434:	2301      	movs	r3, #1
 8019436:	73fb      	strb	r3, [r7, #15]
      break;
 8019438:	e000      	b.n	801943c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801943a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	2201      	movs	r2, #1
 8019440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2200      	movs	r2, #0
 8019448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801944c:	7bfb      	ldrb	r3, [r7, #15]
}
 801944e:	4618      	mov	r0, r3
 8019450:	3710      	adds	r7, #16
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
	...

08019458 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019458:	b480      	push	{r7}
 801945a:	b085      	sub	sp, #20
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
 8019460:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8019462:	2300      	movs	r3, #0
 8019464:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	2b0c      	cmp	r3, #12
 801946a:	d831      	bhi.n	80194d0 <HAL_TIM_ReadCapturedValue+0x78>
 801946c:	a201      	add	r2, pc, #4	; (adr r2, 8019474 <HAL_TIM_ReadCapturedValue+0x1c>)
 801946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019472:	bf00      	nop
 8019474:	080194a9 	.word	0x080194a9
 8019478:	080194d1 	.word	0x080194d1
 801947c:	080194d1 	.word	0x080194d1
 8019480:	080194d1 	.word	0x080194d1
 8019484:	080194b3 	.word	0x080194b3
 8019488:	080194d1 	.word	0x080194d1
 801948c:	080194d1 	.word	0x080194d1
 8019490:	080194d1 	.word	0x080194d1
 8019494:	080194bd 	.word	0x080194bd
 8019498:	080194d1 	.word	0x080194d1
 801949c:	080194d1 	.word	0x080194d1
 80194a0:	080194d1 	.word	0x080194d1
 80194a4:	080194c7 	.word	0x080194c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80194ae:	60fb      	str	r3, [r7, #12]

      break;
 80194b0:	e00f      	b.n	80194d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194b8:	60fb      	str	r3, [r7, #12]

      break;
 80194ba:	e00a      	b.n	80194d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80194c2:	60fb      	str	r3, [r7, #12]

      break;
 80194c4:	e005      	b.n	80194d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194cc:	60fb      	str	r3, [r7, #12]

      break;
 80194ce:	e000      	b.n	80194d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80194d0:	bf00      	nop
  }

  return tmpreg;
 80194d2:	68fb      	ldr	r3, [r7, #12]
}
 80194d4:	4618      	mov	r0, r3
 80194d6:	3714      	adds	r7, #20
 80194d8:	46bd      	mov	sp, r7
 80194da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194de:	4770      	bx	lr

080194e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80194e0:	b480      	push	{r7}
 80194e2:	b083      	sub	sp, #12
 80194e4:	af00      	add	r7, sp, #0
 80194e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80194e8:	bf00      	nop
 80194ea:	370c      	adds	r7, #12
 80194ec:	46bd      	mov	sp, r7
 80194ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f2:	4770      	bx	lr

080194f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80194f4:	b480      	push	{r7}
 80194f6:	b083      	sub	sp, #12
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80194fc:	bf00      	nop
 80194fe:	370c      	adds	r7, #12
 8019500:	46bd      	mov	sp, r7
 8019502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019506:	4770      	bx	lr

08019508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019508:	b480      	push	{r7}
 801950a:	b083      	sub	sp, #12
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019510:	bf00      	nop
 8019512:	370c      	adds	r7, #12
 8019514:	46bd      	mov	sp, r7
 8019516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951a:	4770      	bx	lr

0801951c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801951c:	b480      	push	{r7}
 801951e:	b085      	sub	sp, #20
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	4a40      	ldr	r2, [pc, #256]	; (8019630 <TIM_Base_SetConfig+0x114>)
 8019530:	4293      	cmp	r3, r2
 8019532:	d013      	beq.n	801955c <TIM_Base_SetConfig+0x40>
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801953a:	d00f      	beq.n	801955c <TIM_Base_SetConfig+0x40>
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	4a3d      	ldr	r2, [pc, #244]	; (8019634 <TIM_Base_SetConfig+0x118>)
 8019540:	4293      	cmp	r3, r2
 8019542:	d00b      	beq.n	801955c <TIM_Base_SetConfig+0x40>
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	4a3c      	ldr	r2, [pc, #240]	; (8019638 <TIM_Base_SetConfig+0x11c>)
 8019548:	4293      	cmp	r3, r2
 801954a:	d007      	beq.n	801955c <TIM_Base_SetConfig+0x40>
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	4a3b      	ldr	r2, [pc, #236]	; (801963c <TIM_Base_SetConfig+0x120>)
 8019550:	4293      	cmp	r3, r2
 8019552:	d003      	beq.n	801955c <TIM_Base_SetConfig+0x40>
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	4a3a      	ldr	r2, [pc, #232]	; (8019640 <TIM_Base_SetConfig+0x124>)
 8019558:	4293      	cmp	r3, r2
 801955a:	d108      	bne.n	801956e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	685b      	ldr	r3, [r3, #4]
 8019568:	68fa      	ldr	r2, [r7, #12]
 801956a:	4313      	orrs	r3, r2
 801956c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	4a2f      	ldr	r2, [pc, #188]	; (8019630 <TIM_Base_SetConfig+0x114>)
 8019572:	4293      	cmp	r3, r2
 8019574:	d01f      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801957c:	d01b      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	4a2c      	ldr	r2, [pc, #176]	; (8019634 <TIM_Base_SetConfig+0x118>)
 8019582:	4293      	cmp	r3, r2
 8019584:	d017      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	4a2b      	ldr	r2, [pc, #172]	; (8019638 <TIM_Base_SetConfig+0x11c>)
 801958a:	4293      	cmp	r3, r2
 801958c:	d013      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	4a2a      	ldr	r2, [pc, #168]	; (801963c <TIM_Base_SetConfig+0x120>)
 8019592:	4293      	cmp	r3, r2
 8019594:	d00f      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	4a29      	ldr	r2, [pc, #164]	; (8019640 <TIM_Base_SetConfig+0x124>)
 801959a:	4293      	cmp	r3, r2
 801959c:	d00b      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	4a28      	ldr	r2, [pc, #160]	; (8019644 <TIM_Base_SetConfig+0x128>)
 80195a2:	4293      	cmp	r3, r2
 80195a4:	d007      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	4a27      	ldr	r2, [pc, #156]	; (8019648 <TIM_Base_SetConfig+0x12c>)
 80195aa:	4293      	cmp	r3, r2
 80195ac:	d003      	beq.n	80195b6 <TIM_Base_SetConfig+0x9a>
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	4a26      	ldr	r2, [pc, #152]	; (801964c <TIM_Base_SetConfig+0x130>)
 80195b2:	4293      	cmp	r3, r2
 80195b4:	d108      	bne.n	80195c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80195bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	68db      	ldr	r3, [r3, #12]
 80195c2:	68fa      	ldr	r2, [r7, #12]
 80195c4:	4313      	orrs	r3, r2
 80195c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80195ce:	683b      	ldr	r3, [r7, #0]
 80195d0:	695b      	ldr	r3, [r3, #20]
 80195d2:	4313      	orrs	r3, r2
 80195d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	68fa      	ldr	r2, [r7, #12]
 80195da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	689a      	ldr	r2, [r3, #8]
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	681a      	ldr	r2, [r3, #0]
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	4a10      	ldr	r2, [pc, #64]	; (8019630 <TIM_Base_SetConfig+0x114>)
 80195f0:	4293      	cmp	r3, r2
 80195f2:	d00f      	beq.n	8019614 <TIM_Base_SetConfig+0xf8>
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	4a12      	ldr	r2, [pc, #72]	; (8019640 <TIM_Base_SetConfig+0x124>)
 80195f8:	4293      	cmp	r3, r2
 80195fa:	d00b      	beq.n	8019614 <TIM_Base_SetConfig+0xf8>
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	4a11      	ldr	r2, [pc, #68]	; (8019644 <TIM_Base_SetConfig+0x128>)
 8019600:	4293      	cmp	r3, r2
 8019602:	d007      	beq.n	8019614 <TIM_Base_SetConfig+0xf8>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	4a10      	ldr	r2, [pc, #64]	; (8019648 <TIM_Base_SetConfig+0x12c>)
 8019608:	4293      	cmp	r3, r2
 801960a:	d003      	beq.n	8019614 <TIM_Base_SetConfig+0xf8>
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	4a0f      	ldr	r2, [pc, #60]	; (801964c <TIM_Base_SetConfig+0x130>)
 8019610:	4293      	cmp	r3, r2
 8019612:	d103      	bne.n	801961c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019614:	683b      	ldr	r3, [r7, #0]
 8019616:	691a      	ldr	r2, [r3, #16]
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	2201      	movs	r2, #1
 8019620:	615a      	str	r2, [r3, #20]
}
 8019622:	bf00      	nop
 8019624:	3714      	adds	r7, #20
 8019626:	46bd      	mov	sp, r7
 8019628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962c:	4770      	bx	lr
 801962e:	bf00      	nop
 8019630:	40012c00 	.word	0x40012c00
 8019634:	40000400 	.word	0x40000400
 8019638:	40000800 	.word	0x40000800
 801963c:	40000c00 	.word	0x40000c00
 8019640:	40013400 	.word	0x40013400
 8019644:	40014000 	.word	0x40014000
 8019648:	40014400 	.word	0x40014400
 801964c:	40014800 	.word	0x40014800

08019650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019650:	b480      	push	{r7}
 8019652:	b087      	sub	sp, #28
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6a1b      	ldr	r3, [r3, #32]
 801965e:	f023 0201 	bic.w	r2, r3, #1
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	6a1b      	ldr	r3, [r3, #32]
 801966a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	685b      	ldr	r3, [r3, #4]
 8019670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	699b      	ldr	r3, [r3, #24]
 8019676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801967e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f023 0303 	bic.w	r3, r3, #3
 801968a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	68fa      	ldr	r2, [r7, #12]
 8019692:	4313      	orrs	r3, r2
 8019694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	f023 0302 	bic.w	r3, r3, #2
 801969c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	689b      	ldr	r3, [r3, #8]
 80196a2:	697a      	ldr	r2, [r7, #20]
 80196a4:	4313      	orrs	r3, r2
 80196a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	4a2c      	ldr	r2, [pc, #176]	; (801975c <TIM_OC1_SetConfig+0x10c>)
 80196ac:	4293      	cmp	r3, r2
 80196ae:	d00f      	beq.n	80196d0 <TIM_OC1_SetConfig+0x80>
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	4a2b      	ldr	r2, [pc, #172]	; (8019760 <TIM_OC1_SetConfig+0x110>)
 80196b4:	4293      	cmp	r3, r2
 80196b6:	d00b      	beq.n	80196d0 <TIM_OC1_SetConfig+0x80>
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	4a2a      	ldr	r2, [pc, #168]	; (8019764 <TIM_OC1_SetConfig+0x114>)
 80196bc:	4293      	cmp	r3, r2
 80196be:	d007      	beq.n	80196d0 <TIM_OC1_SetConfig+0x80>
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	4a29      	ldr	r2, [pc, #164]	; (8019768 <TIM_OC1_SetConfig+0x118>)
 80196c4:	4293      	cmp	r3, r2
 80196c6:	d003      	beq.n	80196d0 <TIM_OC1_SetConfig+0x80>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	4a28      	ldr	r2, [pc, #160]	; (801976c <TIM_OC1_SetConfig+0x11c>)
 80196cc:	4293      	cmp	r3, r2
 80196ce:	d10c      	bne.n	80196ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80196d0:	697b      	ldr	r3, [r7, #20]
 80196d2:	f023 0308 	bic.w	r3, r3, #8
 80196d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	68db      	ldr	r3, [r3, #12]
 80196dc:	697a      	ldr	r2, [r7, #20]
 80196de:	4313      	orrs	r3, r2
 80196e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80196e2:	697b      	ldr	r3, [r7, #20]
 80196e4:	f023 0304 	bic.w	r3, r3, #4
 80196e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	4a1b      	ldr	r2, [pc, #108]	; (801975c <TIM_OC1_SetConfig+0x10c>)
 80196ee:	4293      	cmp	r3, r2
 80196f0:	d00f      	beq.n	8019712 <TIM_OC1_SetConfig+0xc2>
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	4a1a      	ldr	r2, [pc, #104]	; (8019760 <TIM_OC1_SetConfig+0x110>)
 80196f6:	4293      	cmp	r3, r2
 80196f8:	d00b      	beq.n	8019712 <TIM_OC1_SetConfig+0xc2>
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	4a19      	ldr	r2, [pc, #100]	; (8019764 <TIM_OC1_SetConfig+0x114>)
 80196fe:	4293      	cmp	r3, r2
 8019700:	d007      	beq.n	8019712 <TIM_OC1_SetConfig+0xc2>
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	4a18      	ldr	r2, [pc, #96]	; (8019768 <TIM_OC1_SetConfig+0x118>)
 8019706:	4293      	cmp	r3, r2
 8019708:	d003      	beq.n	8019712 <TIM_OC1_SetConfig+0xc2>
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	4a17      	ldr	r2, [pc, #92]	; (801976c <TIM_OC1_SetConfig+0x11c>)
 801970e:	4293      	cmp	r3, r2
 8019710:	d111      	bne.n	8019736 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8019712:	693b      	ldr	r3, [r7, #16]
 8019714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801971a:	693b      	ldr	r3, [r7, #16]
 801971c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	695b      	ldr	r3, [r3, #20]
 8019726:	693a      	ldr	r2, [r7, #16]
 8019728:	4313      	orrs	r3, r2
 801972a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801972c:	683b      	ldr	r3, [r7, #0]
 801972e:	699b      	ldr	r3, [r3, #24]
 8019730:	693a      	ldr	r2, [r7, #16]
 8019732:	4313      	orrs	r3, r2
 8019734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	693a      	ldr	r2, [r7, #16]
 801973a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	68fa      	ldr	r2, [r7, #12]
 8019740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	685a      	ldr	r2, [r3, #4]
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	697a      	ldr	r2, [r7, #20]
 801974e:	621a      	str	r2, [r3, #32]
}
 8019750:	bf00      	nop
 8019752:	371c      	adds	r7, #28
 8019754:	46bd      	mov	sp, r7
 8019756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975a:	4770      	bx	lr
 801975c:	40012c00 	.word	0x40012c00
 8019760:	40013400 	.word	0x40013400
 8019764:	40014000 	.word	0x40014000
 8019768:	40014400 	.word	0x40014400
 801976c:	40014800 	.word	0x40014800

08019770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019770:	b480      	push	{r7}
 8019772:	b087      	sub	sp, #28
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
 8019778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	6a1b      	ldr	r3, [r3, #32]
 801977e:	f023 0210 	bic.w	r2, r3, #16
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	6a1b      	ldr	r3, [r3, #32]
 801978a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	699b      	ldr	r3, [r3, #24]
 8019796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801979e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80197a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80197aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80197ac:	683b      	ldr	r3, [r7, #0]
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	021b      	lsls	r3, r3, #8
 80197b2:	68fa      	ldr	r2, [r7, #12]
 80197b4:	4313      	orrs	r3, r2
 80197b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80197b8:	697b      	ldr	r3, [r7, #20]
 80197ba:	f023 0320 	bic.w	r3, r3, #32
 80197be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80197c0:	683b      	ldr	r3, [r7, #0]
 80197c2:	689b      	ldr	r3, [r3, #8]
 80197c4:	011b      	lsls	r3, r3, #4
 80197c6:	697a      	ldr	r2, [r7, #20]
 80197c8:	4313      	orrs	r3, r2
 80197ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	4a28      	ldr	r2, [pc, #160]	; (8019870 <TIM_OC2_SetConfig+0x100>)
 80197d0:	4293      	cmp	r3, r2
 80197d2:	d003      	beq.n	80197dc <TIM_OC2_SetConfig+0x6c>
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	4a27      	ldr	r2, [pc, #156]	; (8019874 <TIM_OC2_SetConfig+0x104>)
 80197d8:	4293      	cmp	r3, r2
 80197da:	d10d      	bne.n	80197f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80197dc:	697b      	ldr	r3, [r7, #20]
 80197de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80197e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80197e4:	683b      	ldr	r3, [r7, #0]
 80197e6:	68db      	ldr	r3, [r3, #12]
 80197e8:	011b      	lsls	r3, r3, #4
 80197ea:	697a      	ldr	r2, [r7, #20]
 80197ec:	4313      	orrs	r3, r2
 80197ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80197f0:	697b      	ldr	r3, [r7, #20]
 80197f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80197f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	4a1d      	ldr	r2, [pc, #116]	; (8019870 <TIM_OC2_SetConfig+0x100>)
 80197fc:	4293      	cmp	r3, r2
 80197fe:	d00f      	beq.n	8019820 <TIM_OC2_SetConfig+0xb0>
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	4a1c      	ldr	r2, [pc, #112]	; (8019874 <TIM_OC2_SetConfig+0x104>)
 8019804:	4293      	cmp	r3, r2
 8019806:	d00b      	beq.n	8019820 <TIM_OC2_SetConfig+0xb0>
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	4a1b      	ldr	r2, [pc, #108]	; (8019878 <TIM_OC2_SetConfig+0x108>)
 801980c:	4293      	cmp	r3, r2
 801980e:	d007      	beq.n	8019820 <TIM_OC2_SetConfig+0xb0>
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	4a1a      	ldr	r2, [pc, #104]	; (801987c <TIM_OC2_SetConfig+0x10c>)
 8019814:	4293      	cmp	r3, r2
 8019816:	d003      	beq.n	8019820 <TIM_OC2_SetConfig+0xb0>
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	4a19      	ldr	r2, [pc, #100]	; (8019880 <TIM_OC2_SetConfig+0x110>)
 801981c:	4293      	cmp	r3, r2
 801981e:	d113      	bne.n	8019848 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8019820:	693b      	ldr	r3, [r7, #16]
 8019822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8019828:	693b      	ldr	r3, [r7, #16]
 801982a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801982e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	695b      	ldr	r3, [r3, #20]
 8019834:	009b      	lsls	r3, r3, #2
 8019836:	693a      	ldr	r2, [r7, #16]
 8019838:	4313      	orrs	r3, r2
 801983a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801983c:	683b      	ldr	r3, [r7, #0]
 801983e:	699b      	ldr	r3, [r3, #24]
 8019840:	009b      	lsls	r3, r3, #2
 8019842:	693a      	ldr	r2, [r7, #16]
 8019844:	4313      	orrs	r3, r2
 8019846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	693a      	ldr	r2, [r7, #16]
 801984c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	68fa      	ldr	r2, [r7, #12]
 8019852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019854:	683b      	ldr	r3, [r7, #0]
 8019856:	685a      	ldr	r2, [r3, #4]
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	697a      	ldr	r2, [r7, #20]
 8019860:	621a      	str	r2, [r3, #32]
}
 8019862:	bf00      	nop
 8019864:	371c      	adds	r7, #28
 8019866:	46bd      	mov	sp, r7
 8019868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop
 8019870:	40012c00 	.word	0x40012c00
 8019874:	40013400 	.word	0x40013400
 8019878:	40014000 	.word	0x40014000
 801987c:	40014400 	.word	0x40014400
 8019880:	40014800 	.word	0x40014800

08019884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019884:	b480      	push	{r7}
 8019886:	b087      	sub	sp, #28
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6a1b      	ldr	r3, [r3, #32]
 8019892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6a1b      	ldr	r3, [r3, #32]
 801989e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	685b      	ldr	r3, [r3, #4]
 80198a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	69db      	ldr	r3, [r3, #28]
 80198aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80198b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80198b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	f023 0303 	bic.w	r3, r3, #3
 80198be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	68fa      	ldr	r2, [r7, #12]
 80198c6:	4313      	orrs	r3, r2
 80198c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80198ca:	697b      	ldr	r3, [r7, #20]
 80198cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80198d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80198d2:	683b      	ldr	r3, [r7, #0]
 80198d4:	689b      	ldr	r3, [r3, #8]
 80198d6:	021b      	lsls	r3, r3, #8
 80198d8:	697a      	ldr	r2, [r7, #20]
 80198da:	4313      	orrs	r3, r2
 80198dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	4a27      	ldr	r2, [pc, #156]	; (8019980 <TIM_OC3_SetConfig+0xfc>)
 80198e2:	4293      	cmp	r3, r2
 80198e4:	d003      	beq.n	80198ee <TIM_OC3_SetConfig+0x6a>
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	4a26      	ldr	r2, [pc, #152]	; (8019984 <TIM_OC3_SetConfig+0x100>)
 80198ea:	4293      	cmp	r3, r2
 80198ec:	d10d      	bne.n	801990a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80198ee:	697b      	ldr	r3, [r7, #20]
 80198f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80198f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	68db      	ldr	r3, [r3, #12]
 80198fa:	021b      	lsls	r3, r3, #8
 80198fc:	697a      	ldr	r2, [r7, #20]
 80198fe:	4313      	orrs	r3, r2
 8019900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8019902:	697b      	ldr	r3, [r7, #20]
 8019904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	4a1c      	ldr	r2, [pc, #112]	; (8019980 <TIM_OC3_SetConfig+0xfc>)
 801990e:	4293      	cmp	r3, r2
 8019910:	d00f      	beq.n	8019932 <TIM_OC3_SetConfig+0xae>
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	4a1b      	ldr	r2, [pc, #108]	; (8019984 <TIM_OC3_SetConfig+0x100>)
 8019916:	4293      	cmp	r3, r2
 8019918:	d00b      	beq.n	8019932 <TIM_OC3_SetConfig+0xae>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	4a1a      	ldr	r2, [pc, #104]	; (8019988 <TIM_OC3_SetConfig+0x104>)
 801991e:	4293      	cmp	r3, r2
 8019920:	d007      	beq.n	8019932 <TIM_OC3_SetConfig+0xae>
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	4a19      	ldr	r2, [pc, #100]	; (801998c <TIM_OC3_SetConfig+0x108>)
 8019926:	4293      	cmp	r3, r2
 8019928:	d003      	beq.n	8019932 <TIM_OC3_SetConfig+0xae>
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	4a18      	ldr	r2, [pc, #96]	; (8019990 <TIM_OC3_SetConfig+0x10c>)
 801992e:	4293      	cmp	r3, r2
 8019930:	d113      	bne.n	801995a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8019932:	693b      	ldr	r3, [r7, #16]
 8019934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801993a:	693b      	ldr	r3, [r7, #16]
 801993c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	695b      	ldr	r3, [r3, #20]
 8019946:	011b      	lsls	r3, r3, #4
 8019948:	693a      	ldr	r2, [r7, #16]
 801994a:	4313      	orrs	r3, r2
 801994c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	699b      	ldr	r3, [r3, #24]
 8019952:	011b      	lsls	r3, r3, #4
 8019954:	693a      	ldr	r2, [r7, #16]
 8019956:	4313      	orrs	r3, r2
 8019958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	693a      	ldr	r2, [r7, #16]
 801995e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	68fa      	ldr	r2, [r7, #12]
 8019964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	685a      	ldr	r2, [r3, #4]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	697a      	ldr	r2, [r7, #20]
 8019972:	621a      	str	r2, [r3, #32]
}
 8019974:	bf00      	nop
 8019976:	371c      	adds	r7, #28
 8019978:	46bd      	mov	sp, r7
 801997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997e:	4770      	bx	lr
 8019980:	40012c00 	.word	0x40012c00
 8019984:	40013400 	.word	0x40013400
 8019988:	40014000 	.word	0x40014000
 801998c:	40014400 	.word	0x40014400
 8019990:	40014800 	.word	0x40014800

08019994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019994:	b480      	push	{r7}
 8019996:	b087      	sub	sp, #28
 8019998:	af00      	add	r7, sp, #0
 801999a:	6078      	str	r0, [r7, #4]
 801999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6a1b      	ldr	r3, [r3, #32]
 80199a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	6a1b      	ldr	r3, [r3, #32]
 80199ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	69db      	ldr	r3, [r3, #28]
 80199ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80199c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80199c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80199ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	021b      	lsls	r3, r3, #8
 80199d6:	68fa      	ldr	r2, [r7, #12]
 80199d8:	4313      	orrs	r3, r2
 80199da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80199dc:	693b      	ldr	r3, [r7, #16]
 80199de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80199e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	689b      	ldr	r3, [r3, #8]
 80199e8:	031b      	lsls	r3, r3, #12
 80199ea:	693a      	ldr	r2, [r7, #16]
 80199ec:	4313      	orrs	r3, r2
 80199ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	4a18      	ldr	r2, [pc, #96]	; (8019a54 <TIM_OC4_SetConfig+0xc0>)
 80199f4:	4293      	cmp	r3, r2
 80199f6:	d00f      	beq.n	8019a18 <TIM_OC4_SetConfig+0x84>
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	4a17      	ldr	r2, [pc, #92]	; (8019a58 <TIM_OC4_SetConfig+0xc4>)
 80199fc:	4293      	cmp	r3, r2
 80199fe:	d00b      	beq.n	8019a18 <TIM_OC4_SetConfig+0x84>
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	4a16      	ldr	r2, [pc, #88]	; (8019a5c <TIM_OC4_SetConfig+0xc8>)
 8019a04:	4293      	cmp	r3, r2
 8019a06:	d007      	beq.n	8019a18 <TIM_OC4_SetConfig+0x84>
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	4a15      	ldr	r2, [pc, #84]	; (8019a60 <TIM_OC4_SetConfig+0xcc>)
 8019a0c:	4293      	cmp	r3, r2
 8019a0e:	d003      	beq.n	8019a18 <TIM_OC4_SetConfig+0x84>
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	4a14      	ldr	r2, [pc, #80]	; (8019a64 <TIM_OC4_SetConfig+0xd0>)
 8019a14:	4293      	cmp	r3, r2
 8019a16:	d109      	bne.n	8019a2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	695b      	ldr	r3, [r3, #20]
 8019a24:	019b      	lsls	r3, r3, #6
 8019a26:	697a      	ldr	r2, [r7, #20]
 8019a28:	4313      	orrs	r3, r2
 8019a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	697a      	ldr	r2, [r7, #20]
 8019a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	68fa      	ldr	r2, [r7, #12]
 8019a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	685a      	ldr	r2, [r3, #4]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	693a      	ldr	r2, [r7, #16]
 8019a44:	621a      	str	r2, [r3, #32]
}
 8019a46:	bf00      	nop
 8019a48:	371c      	adds	r7, #28
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a50:	4770      	bx	lr
 8019a52:	bf00      	nop
 8019a54:	40012c00 	.word	0x40012c00
 8019a58:	40013400 	.word	0x40013400
 8019a5c:	40014000 	.word	0x40014000
 8019a60:	40014400 	.word	0x40014400
 8019a64:	40014800 	.word	0x40014800

08019a68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019a68:	b480      	push	{r7}
 8019a6a:	b087      	sub	sp, #28
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
 8019a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	6a1b      	ldr	r3, [r3, #32]
 8019a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	6a1b      	ldr	r3, [r3, #32]
 8019a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	685b      	ldr	r3, [r3, #4]
 8019a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019a9c:	683b      	ldr	r3, [r7, #0]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	68fa      	ldr	r2, [r7, #12]
 8019aa2:	4313      	orrs	r3, r2
 8019aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8019aa6:	693b      	ldr	r3, [r7, #16]
 8019aa8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8019aac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	689b      	ldr	r3, [r3, #8]
 8019ab2:	041b      	lsls	r3, r3, #16
 8019ab4:	693a      	ldr	r2, [r7, #16]
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	4a17      	ldr	r2, [pc, #92]	; (8019b1c <TIM_OC5_SetConfig+0xb4>)
 8019abe:	4293      	cmp	r3, r2
 8019ac0:	d00f      	beq.n	8019ae2 <TIM_OC5_SetConfig+0x7a>
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	4a16      	ldr	r2, [pc, #88]	; (8019b20 <TIM_OC5_SetConfig+0xb8>)
 8019ac6:	4293      	cmp	r3, r2
 8019ac8:	d00b      	beq.n	8019ae2 <TIM_OC5_SetConfig+0x7a>
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	4a15      	ldr	r2, [pc, #84]	; (8019b24 <TIM_OC5_SetConfig+0xbc>)
 8019ace:	4293      	cmp	r3, r2
 8019ad0:	d007      	beq.n	8019ae2 <TIM_OC5_SetConfig+0x7a>
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	4a14      	ldr	r2, [pc, #80]	; (8019b28 <TIM_OC5_SetConfig+0xc0>)
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d003      	beq.n	8019ae2 <TIM_OC5_SetConfig+0x7a>
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	4a13      	ldr	r2, [pc, #76]	; (8019b2c <TIM_OC5_SetConfig+0xc4>)
 8019ade:	4293      	cmp	r3, r2
 8019ae0:	d109      	bne.n	8019af6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	695b      	ldr	r3, [r3, #20]
 8019aee:	021b      	lsls	r3, r3, #8
 8019af0:	697a      	ldr	r2, [r7, #20]
 8019af2:	4313      	orrs	r3, r2
 8019af4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	697a      	ldr	r2, [r7, #20]
 8019afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	68fa      	ldr	r2, [r7, #12]
 8019b00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8019b02:	683b      	ldr	r3, [r7, #0]
 8019b04:	685a      	ldr	r2, [r3, #4]
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	693a      	ldr	r2, [r7, #16]
 8019b0e:	621a      	str	r2, [r3, #32]
}
 8019b10:	bf00      	nop
 8019b12:	371c      	adds	r7, #28
 8019b14:	46bd      	mov	sp, r7
 8019b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b1a:	4770      	bx	lr
 8019b1c:	40012c00 	.word	0x40012c00
 8019b20:	40013400 	.word	0x40013400
 8019b24:	40014000 	.word	0x40014000
 8019b28:	40014400 	.word	0x40014400
 8019b2c:	40014800 	.word	0x40014800

08019b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8019b30:	b480      	push	{r7}
 8019b32:	b087      	sub	sp, #28
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
 8019b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	6a1b      	ldr	r3, [r3, #32]
 8019b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6a1b      	ldr	r3, [r3, #32]
 8019b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	685b      	ldr	r3, [r3, #4]
 8019b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019b64:	683b      	ldr	r3, [r7, #0]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	021b      	lsls	r3, r3, #8
 8019b6a:	68fa      	ldr	r2, [r7, #12]
 8019b6c:	4313      	orrs	r3, r2
 8019b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8019b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	689b      	ldr	r3, [r3, #8]
 8019b7c:	051b      	lsls	r3, r3, #20
 8019b7e:	693a      	ldr	r2, [r7, #16]
 8019b80:	4313      	orrs	r3, r2
 8019b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	4a18      	ldr	r2, [pc, #96]	; (8019be8 <TIM_OC6_SetConfig+0xb8>)
 8019b88:	4293      	cmp	r3, r2
 8019b8a:	d00f      	beq.n	8019bac <TIM_OC6_SetConfig+0x7c>
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	4a17      	ldr	r2, [pc, #92]	; (8019bec <TIM_OC6_SetConfig+0xbc>)
 8019b90:	4293      	cmp	r3, r2
 8019b92:	d00b      	beq.n	8019bac <TIM_OC6_SetConfig+0x7c>
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	4a16      	ldr	r2, [pc, #88]	; (8019bf0 <TIM_OC6_SetConfig+0xc0>)
 8019b98:	4293      	cmp	r3, r2
 8019b9a:	d007      	beq.n	8019bac <TIM_OC6_SetConfig+0x7c>
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	4a15      	ldr	r2, [pc, #84]	; (8019bf4 <TIM_OC6_SetConfig+0xc4>)
 8019ba0:	4293      	cmp	r3, r2
 8019ba2:	d003      	beq.n	8019bac <TIM_OC6_SetConfig+0x7c>
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	4a14      	ldr	r2, [pc, #80]	; (8019bf8 <TIM_OC6_SetConfig+0xc8>)
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	d109      	bne.n	8019bc0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	695b      	ldr	r3, [r3, #20]
 8019bb8:	029b      	lsls	r3, r3, #10
 8019bba:	697a      	ldr	r2, [r7, #20]
 8019bbc:	4313      	orrs	r3, r2
 8019bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	697a      	ldr	r2, [r7, #20]
 8019bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	68fa      	ldr	r2, [r7, #12]
 8019bca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8019bcc:	683b      	ldr	r3, [r7, #0]
 8019bce:	685a      	ldr	r2, [r3, #4]
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	693a      	ldr	r2, [r7, #16]
 8019bd8:	621a      	str	r2, [r3, #32]
}
 8019bda:	bf00      	nop
 8019bdc:	371c      	adds	r7, #28
 8019bde:	46bd      	mov	sp, r7
 8019be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be4:	4770      	bx	lr
 8019be6:	bf00      	nop
 8019be8:	40012c00 	.word	0x40012c00
 8019bec:	40013400 	.word	0x40013400
 8019bf0:	40014000 	.word	0x40014000
 8019bf4:	40014400 	.word	0x40014400
 8019bf8:	40014800 	.word	0x40014800

08019bfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8019bfc:	b480      	push	{r7}
 8019bfe:	b087      	sub	sp, #28
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	60f8      	str	r0, [r7, #12]
 8019c04:	60b9      	str	r1, [r7, #8]
 8019c06:	607a      	str	r2, [r7, #4]
 8019c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	6a1b      	ldr	r3, [r3, #32]
 8019c0e:	f023 0201 	bic.w	r2, r3, #1
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	699b      	ldr	r3, [r3, #24]
 8019c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	6a1b      	ldr	r3, [r3, #32]
 8019c20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	4a26      	ldr	r2, [pc, #152]	; (8019cc0 <TIM_TI1_SetConfig+0xc4>)
 8019c26:	4293      	cmp	r3, r2
 8019c28:	d017      	beq.n	8019c5a <TIM_TI1_SetConfig+0x5e>
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019c30:	d013      	beq.n	8019c5a <TIM_TI1_SetConfig+0x5e>
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	4a23      	ldr	r2, [pc, #140]	; (8019cc4 <TIM_TI1_SetConfig+0xc8>)
 8019c36:	4293      	cmp	r3, r2
 8019c38:	d00f      	beq.n	8019c5a <TIM_TI1_SetConfig+0x5e>
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	4a22      	ldr	r2, [pc, #136]	; (8019cc8 <TIM_TI1_SetConfig+0xcc>)
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	d00b      	beq.n	8019c5a <TIM_TI1_SetConfig+0x5e>
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	4a21      	ldr	r2, [pc, #132]	; (8019ccc <TIM_TI1_SetConfig+0xd0>)
 8019c46:	4293      	cmp	r3, r2
 8019c48:	d007      	beq.n	8019c5a <TIM_TI1_SetConfig+0x5e>
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	4a20      	ldr	r2, [pc, #128]	; (8019cd0 <TIM_TI1_SetConfig+0xd4>)
 8019c4e:	4293      	cmp	r3, r2
 8019c50:	d003      	beq.n	8019c5a <TIM_TI1_SetConfig+0x5e>
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	4a1f      	ldr	r2, [pc, #124]	; (8019cd4 <TIM_TI1_SetConfig+0xd8>)
 8019c56:	4293      	cmp	r3, r2
 8019c58:	d101      	bne.n	8019c5e <TIM_TI1_SetConfig+0x62>
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	e000      	b.n	8019c60 <TIM_TI1_SetConfig+0x64>
 8019c5e:	2300      	movs	r3, #0
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d008      	beq.n	8019c76 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8019c64:	697b      	ldr	r3, [r7, #20]
 8019c66:	f023 0303 	bic.w	r3, r3, #3
 8019c6a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8019c6c:	697a      	ldr	r2, [r7, #20]
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	4313      	orrs	r3, r2
 8019c72:	617b      	str	r3, [r7, #20]
 8019c74:	e003      	b.n	8019c7e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	f043 0301 	orr.w	r3, r3, #1
 8019c7c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019c7e:	697b      	ldr	r3, [r7, #20]
 8019c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019c84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	011b      	lsls	r3, r3, #4
 8019c8a:	b2db      	uxtb	r3, r3
 8019c8c:	697a      	ldr	r2, [r7, #20]
 8019c8e:	4313      	orrs	r3, r2
 8019c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019c92:	693b      	ldr	r3, [r7, #16]
 8019c94:	f023 030a 	bic.w	r3, r3, #10
 8019c98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	f003 030a 	and.w	r3, r3, #10
 8019ca0:	693a      	ldr	r2, [r7, #16]
 8019ca2:	4313      	orrs	r3, r2
 8019ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	697a      	ldr	r2, [r7, #20]
 8019caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	693a      	ldr	r2, [r7, #16]
 8019cb0:	621a      	str	r2, [r3, #32]
}
 8019cb2:	bf00      	nop
 8019cb4:	371c      	adds	r7, #28
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cbc:	4770      	bx	lr
 8019cbe:	bf00      	nop
 8019cc0:	40012c00 	.word	0x40012c00
 8019cc4:	40000400 	.word	0x40000400
 8019cc8:	40000800 	.word	0x40000800
 8019ccc:	40000c00 	.word	0x40000c00
 8019cd0:	40013400 	.word	0x40013400
 8019cd4:	40014000 	.word	0x40014000

08019cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019cd8:	b480      	push	{r7}
 8019cda:	b087      	sub	sp, #28
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	60f8      	str	r0, [r7, #12]
 8019ce0:	60b9      	str	r1, [r7, #8]
 8019ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	6a1b      	ldr	r3, [r3, #32]
 8019ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	6a1b      	ldr	r3, [r3, #32]
 8019cee:	f023 0201 	bic.w	r2, r3, #1
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	699b      	ldr	r3, [r3, #24]
 8019cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8019cfc:	693b      	ldr	r3, [r7, #16]
 8019cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	011b      	lsls	r3, r3, #4
 8019d08:	693a      	ldr	r2, [r7, #16]
 8019d0a:	4313      	orrs	r3, r2
 8019d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8019d0e:	697b      	ldr	r3, [r7, #20]
 8019d10:	f023 030a 	bic.w	r3, r3, #10
 8019d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8019d16:	697a      	ldr	r2, [r7, #20]
 8019d18:	68bb      	ldr	r3, [r7, #8]
 8019d1a:	4313      	orrs	r3, r2
 8019d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	693a      	ldr	r2, [r7, #16]
 8019d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	697a      	ldr	r2, [r7, #20]
 8019d28:	621a      	str	r2, [r3, #32]
}
 8019d2a:	bf00      	nop
 8019d2c:	371c      	adds	r7, #28
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d34:	4770      	bx	lr

08019d36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8019d36:	b480      	push	{r7}
 8019d38:	b087      	sub	sp, #28
 8019d3a:	af00      	add	r7, sp, #0
 8019d3c:	60f8      	str	r0, [r7, #12]
 8019d3e:	60b9      	str	r1, [r7, #8]
 8019d40:	607a      	str	r2, [r7, #4]
 8019d42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	6a1b      	ldr	r3, [r3, #32]
 8019d48:	f023 0210 	bic.w	r2, r3, #16
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	699b      	ldr	r3, [r3, #24]
 8019d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	6a1b      	ldr	r3, [r3, #32]
 8019d5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8019d5c:	697b      	ldr	r3, [r7, #20]
 8019d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	021b      	lsls	r3, r3, #8
 8019d68:	697a      	ldr	r2, [r7, #20]
 8019d6a:	4313      	orrs	r3, r2
 8019d6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019d74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	031b      	lsls	r3, r3, #12
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	697a      	ldr	r2, [r7, #20]
 8019d7e:	4313      	orrs	r3, r2
 8019d80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8019d88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	011b      	lsls	r3, r3, #4
 8019d8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8019d92:	693a      	ldr	r2, [r7, #16]
 8019d94:	4313      	orrs	r3, r2
 8019d96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	697a      	ldr	r2, [r7, #20]
 8019d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	693a      	ldr	r2, [r7, #16]
 8019da2:	621a      	str	r2, [r3, #32]
}
 8019da4:	bf00      	nop
 8019da6:	371c      	adds	r7, #28
 8019da8:	46bd      	mov	sp, r7
 8019daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dae:	4770      	bx	lr

08019db0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8019db0:	b480      	push	{r7}
 8019db2:	b087      	sub	sp, #28
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	60f8      	str	r0, [r7, #12]
 8019db8:	60b9      	str	r1, [r7, #8]
 8019dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	6a1b      	ldr	r3, [r3, #32]
 8019dc0:	f023 0210 	bic.w	r2, r3, #16
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8019dc8:	68fb      	ldr	r3, [r7, #12]
 8019dca:	699b      	ldr	r3, [r3, #24]
 8019dcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	6a1b      	ldr	r3, [r3, #32]
 8019dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8019dd4:	697b      	ldr	r3, [r7, #20]
 8019dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019dda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	031b      	lsls	r3, r3, #12
 8019de0:	697a      	ldr	r2, [r7, #20]
 8019de2:	4313      	orrs	r3, r2
 8019de4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8019de6:	693b      	ldr	r3, [r7, #16]
 8019de8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8019dec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	011b      	lsls	r3, r3, #4
 8019df2:	693a      	ldr	r2, [r7, #16]
 8019df4:	4313      	orrs	r3, r2
 8019df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	697a      	ldr	r2, [r7, #20]
 8019dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	693a      	ldr	r2, [r7, #16]
 8019e02:	621a      	str	r2, [r3, #32]
}
 8019e04:	bf00      	nop
 8019e06:	371c      	adds	r7, #28
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0e:	4770      	bx	lr

08019e10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8019e10:	b480      	push	{r7}
 8019e12:	b087      	sub	sp, #28
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	60f8      	str	r0, [r7, #12]
 8019e18:	60b9      	str	r1, [r7, #8]
 8019e1a:	607a      	str	r2, [r7, #4]
 8019e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	6a1b      	ldr	r3, [r3, #32]
 8019e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	69db      	ldr	r3, [r3, #28]
 8019e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	6a1b      	ldr	r3, [r3, #32]
 8019e34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8019e36:	697b      	ldr	r3, [r7, #20]
 8019e38:	f023 0303 	bic.w	r3, r3, #3
 8019e3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8019e3e:	697a      	ldr	r2, [r7, #20]
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	4313      	orrs	r3, r2
 8019e44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8019e46:	697b      	ldr	r3, [r7, #20]
 8019e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019e4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	011b      	lsls	r3, r3, #4
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	697a      	ldr	r2, [r7, #20]
 8019e56:	4313      	orrs	r3, r2
 8019e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8019e5a:	693b      	ldr	r3, [r7, #16]
 8019e5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8019e60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8019e62:	68bb      	ldr	r3, [r7, #8]
 8019e64:	021b      	lsls	r3, r3, #8
 8019e66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8019e6a:	693a      	ldr	r2, [r7, #16]
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	697a      	ldr	r2, [r7, #20]
 8019e74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	693a      	ldr	r2, [r7, #16]
 8019e7a:	621a      	str	r2, [r3, #32]
}
 8019e7c:	bf00      	nop
 8019e7e:	371c      	adds	r7, #28
 8019e80:	46bd      	mov	sp, r7
 8019e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e86:	4770      	bx	lr

08019e88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b087      	sub	sp, #28
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	60f8      	str	r0, [r7, #12]
 8019e90:	60b9      	str	r1, [r7, #8]
 8019e92:	607a      	str	r2, [r7, #4]
 8019e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	6a1b      	ldr	r3, [r3, #32]
 8019e9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	69db      	ldr	r3, [r3, #28]
 8019ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	6a1b      	ldr	r3, [r3, #32]
 8019eac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8019eae:	697b      	ldr	r3, [r7, #20]
 8019eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019eb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	021b      	lsls	r3, r3, #8
 8019eba:	697a      	ldr	r2, [r7, #20]
 8019ebc:	4313      	orrs	r3, r2
 8019ebe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019ec6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8019ec8:	683b      	ldr	r3, [r7, #0]
 8019eca:	031b      	lsls	r3, r3, #12
 8019ecc:	b29b      	uxth	r3, r3
 8019ece:	697a      	ldr	r2, [r7, #20]
 8019ed0:	4313      	orrs	r3, r2
 8019ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8019eda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8019edc:	68bb      	ldr	r3, [r7, #8]
 8019ede:	031b      	lsls	r3, r3, #12
 8019ee0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8019ee4:	693a      	ldr	r2, [r7, #16]
 8019ee6:	4313      	orrs	r3, r2
 8019ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	697a      	ldr	r2, [r7, #20]
 8019eee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	693a      	ldr	r2, [r7, #16]
 8019ef4:	621a      	str	r2, [r3, #32]
}
 8019ef6:	bf00      	nop
 8019ef8:	371c      	adds	r7, #28
 8019efa:	46bd      	mov	sp, r7
 8019efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f00:	4770      	bx	lr

08019f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8019f02:	b480      	push	{r7}
 8019f04:	b085      	sub	sp, #20
 8019f06:	af00      	add	r7, sp, #0
 8019f08:	6078      	str	r0, [r7, #4]
 8019f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	689b      	ldr	r3, [r3, #8]
 8019f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8019f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8019f1e:	683a      	ldr	r2, [r7, #0]
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	4313      	orrs	r3, r2
 8019f24:	f043 0307 	orr.w	r3, r3, #7
 8019f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	68fa      	ldr	r2, [r7, #12]
 8019f2e:	609a      	str	r2, [r3, #8]
}
 8019f30:	bf00      	nop
 8019f32:	3714      	adds	r7, #20
 8019f34:	46bd      	mov	sp, r7
 8019f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3a:	4770      	bx	lr

08019f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	b087      	sub	sp, #28
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	60f8      	str	r0, [r7, #12]
 8019f44:	60b9      	str	r1, [r7, #8]
 8019f46:	607a      	str	r2, [r7, #4]
 8019f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	689b      	ldr	r3, [r3, #8]
 8019f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	021a      	lsls	r2, r3, #8
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	431a      	orrs	r2, r3
 8019f60:	68bb      	ldr	r3, [r7, #8]
 8019f62:	4313      	orrs	r3, r2
 8019f64:	697a      	ldr	r2, [r7, #20]
 8019f66:	4313      	orrs	r3, r2
 8019f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	697a      	ldr	r2, [r7, #20]
 8019f6e:	609a      	str	r2, [r3, #8]
}
 8019f70:	bf00      	nop
 8019f72:	371c      	adds	r7, #28
 8019f74:	46bd      	mov	sp, r7
 8019f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7a:	4770      	bx	lr

08019f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019f7c:	b480      	push	{r7}
 8019f7e:	b087      	sub	sp, #28
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	60f8      	str	r0, [r7, #12]
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8019f88:	68bb      	ldr	r3, [r7, #8]
 8019f8a:	f003 031f 	and.w	r3, r3, #31
 8019f8e:	2201      	movs	r2, #1
 8019f90:	fa02 f303 	lsl.w	r3, r2, r3
 8019f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	6a1a      	ldr	r2, [r3, #32]
 8019f9a:	697b      	ldr	r3, [r7, #20]
 8019f9c:	43db      	mvns	r3, r3
 8019f9e:	401a      	ands	r2, r3
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	6a1a      	ldr	r2, [r3, #32]
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	f003 031f 	and.w	r3, r3, #31
 8019fae:	6879      	ldr	r1, [r7, #4]
 8019fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8019fb4:	431a      	orrs	r2, r3
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	621a      	str	r2, [r3, #32]
}
 8019fba:	bf00      	nop
 8019fbc:	371c      	adds	r7, #28
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc4:	4770      	bx	lr
	...

08019fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8019fc8:	b480      	push	{r7}
 8019fca:	b085      	sub	sp, #20
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	6078      	str	r0, [r7, #4]
 8019fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019fd8:	2b01      	cmp	r3, #1
 8019fda:	d101      	bne.n	8019fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8019fdc:	2302      	movs	r3, #2
 8019fde:	e068      	b.n	801a0b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	2201      	movs	r2, #1
 8019fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	2202      	movs	r2, #2
 8019fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	685b      	ldr	r3, [r3, #4]
 8019ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	689b      	ldr	r3, [r3, #8]
 8019ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	4a2e      	ldr	r2, [pc, #184]	; (801a0c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801a006:	4293      	cmp	r3, r2
 801a008:	d004      	beq.n	801a014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	4a2d      	ldr	r2, [pc, #180]	; (801a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801a010:	4293      	cmp	r3, r2
 801a012:	d108      	bne.n	801a026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801a01a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	68fa      	ldr	r2, [r7, #12]
 801a022:	4313      	orrs	r3, r2
 801a024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a02c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	68fa      	ldr	r2, [r7, #12]
 801a034:	4313      	orrs	r3, r2
 801a036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	68fa      	ldr	r2, [r7, #12]
 801a03e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	4a1e      	ldr	r2, [pc, #120]	; (801a0c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801a046:	4293      	cmp	r3, r2
 801a048:	d01d      	beq.n	801a086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a052:	d018      	beq.n	801a086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	4a1b      	ldr	r2, [pc, #108]	; (801a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801a05a:	4293      	cmp	r3, r2
 801a05c:	d013      	beq.n	801a086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	4a1a      	ldr	r2, [pc, #104]	; (801a0cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801a064:	4293      	cmp	r3, r2
 801a066:	d00e      	beq.n	801a086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	4a18      	ldr	r2, [pc, #96]	; (801a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801a06e:	4293      	cmp	r3, r2
 801a070:	d009      	beq.n	801a086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	4a13      	ldr	r2, [pc, #76]	; (801a0c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801a078:	4293      	cmp	r3, r2
 801a07a:	d004      	beq.n	801a086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	4a14      	ldr	r2, [pc, #80]	; (801a0d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801a082:	4293      	cmp	r3, r2
 801a084:	d10c      	bne.n	801a0a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a086:	68bb      	ldr	r3, [r7, #8]
 801a088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a08c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a08e:	683b      	ldr	r3, [r7, #0]
 801a090:	689b      	ldr	r3, [r3, #8]
 801a092:	68ba      	ldr	r2, [r7, #8]
 801a094:	4313      	orrs	r3, r2
 801a096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	68ba      	ldr	r2, [r7, #8]
 801a09e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2201      	movs	r2, #1
 801a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801a0b0:	2300      	movs	r3, #0
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	3714      	adds	r7, #20
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr
 801a0be:	bf00      	nop
 801a0c0:	40012c00 	.word	0x40012c00
 801a0c4:	40013400 	.word	0x40013400
 801a0c8:	40000400 	.word	0x40000400
 801a0cc:	40000800 	.word	0x40000800
 801a0d0:	40000c00 	.word	0x40000c00
 801a0d4:	40014000 	.word	0x40014000

0801a0d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801a0d8:	b480      	push	{r7}
 801a0da:	b085      	sub	sp, #20
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
 801a0e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801a0e2:	2300      	movs	r3, #0
 801a0e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a0ec:	2b01      	cmp	r3, #1
 801a0ee:	d101      	bne.n	801a0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801a0f0:	2302      	movs	r3, #2
 801a0f2:	e087      	b.n	801a204 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	68db      	ldr	r3, [r3, #12]
 801a106:	4313      	orrs	r3, r2
 801a108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	689b      	ldr	r3, [r3, #8]
 801a114:	4313      	orrs	r3, r2
 801a116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	685b      	ldr	r3, [r3, #4]
 801a122:	4313      	orrs	r3, r2
 801a124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	4313      	orrs	r3, r2
 801a132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	691b      	ldr	r3, [r3, #16]
 801a13e:	4313      	orrs	r3, r2
 801a140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	695b      	ldr	r3, [r3, #20]
 801a14c:	4313      	orrs	r3, r2
 801a14e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a15a:	4313      	orrs	r3, r2
 801a15c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801a164:	683b      	ldr	r3, [r7, #0]
 801a166:	699b      	ldr	r3, [r3, #24]
 801a168:	041b      	lsls	r3, r3, #16
 801a16a:	4313      	orrs	r3, r2
 801a16c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	4a27      	ldr	r2, [pc, #156]	; (801a210 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801a174:	4293      	cmp	r3, r2
 801a176:	d004      	beq.n	801a182 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	4a25      	ldr	r2, [pc, #148]	; (801a214 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801a17e:	4293      	cmp	r3, r2
 801a180:	d106      	bne.n	801a190 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	69db      	ldr	r3, [r3, #28]
 801a18c:	4313      	orrs	r3, r2
 801a18e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	4a1e      	ldr	r2, [pc, #120]	; (801a210 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801a196:	4293      	cmp	r3, r2
 801a198:	d004      	beq.n	801a1a4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	4a1d      	ldr	r2, [pc, #116]	; (801a214 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801a1a0:	4293      	cmp	r3, r2
 801a1a2:	d126      	bne.n	801a1f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801a1aa:	683b      	ldr	r3, [r7, #0]
 801a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1ae:	051b      	lsls	r3, r3, #20
 801a1b0:	4313      	orrs	r3, r2
 801a1b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801a1ba:	683b      	ldr	r3, [r7, #0]
 801a1bc:	6a1b      	ldr	r3, [r3, #32]
 801a1be:	4313      	orrs	r3, r2
 801a1c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1cc:	4313      	orrs	r3, r2
 801a1ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	4a0e      	ldr	r2, [pc, #56]	; (801a210 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801a1d6:	4293      	cmp	r3, r2
 801a1d8:	d004      	beq.n	801a1e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	4a0d      	ldr	r2, [pc, #52]	; (801a214 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	d106      	bne.n	801a1f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1ee:	4313      	orrs	r3, r2
 801a1f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	68fa      	ldr	r2, [r7, #12]
 801a1f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801a202:	2300      	movs	r3, #0
}
 801a204:	4618      	mov	r0, r3
 801a206:	3714      	adds	r7, #20
 801a208:	46bd      	mov	sp, r7
 801a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20e:	4770      	bx	lr
 801a210:	40012c00 	.word	0x40012c00
 801a214:	40013400 	.word	0x40013400

0801a218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801a218:	b480      	push	{r7}
 801a21a:	b083      	sub	sp, #12
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801a220:	bf00      	nop
 801a222:	370c      	adds	r7, #12
 801a224:	46bd      	mov	sp, r7
 801a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22a:	4770      	bx	lr

0801a22c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801a22c:	b480      	push	{r7}
 801a22e:	b083      	sub	sp, #12
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801a234:	bf00      	nop
 801a236:	370c      	adds	r7, #12
 801a238:	46bd      	mov	sp, r7
 801a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23e:	4770      	bx	lr

0801a240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801a240:	b480      	push	{r7}
 801a242:	b083      	sub	sp, #12
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801a248:	bf00      	nop
 801a24a:	370c      	adds	r7, #12
 801a24c:	46bd      	mov	sp, r7
 801a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a252:	4770      	bx	lr

0801a254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b082      	sub	sp, #8
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d101      	bne.n	801a266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a262:	2301      	movs	r3, #1
 801a264:	e042      	b.n	801a2ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d106      	bne.n	801a27e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	2200      	movs	r2, #0
 801a274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f7f7 fa19 	bl	80116b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	2224      	movs	r2, #36	; 0x24
 801a282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	681a      	ldr	r2, [r3, #0]
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	f022 0201 	bic.w	r2, r2, #1
 801a294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801a296:	6878      	ldr	r0, [r7, #4]
 801a298:	f000 fc4a 	bl	801ab30 <UART_SetConfig>
 801a29c:	4603      	mov	r3, r0
 801a29e:	2b01      	cmp	r3, #1
 801a2a0:	d101      	bne.n	801a2a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	e022      	b.n	801a2ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d002      	beq.n	801a2b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801a2ae:	6878      	ldr	r0, [r7, #4]
 801a2b0:	f000 ff3e 	bl	801b130 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	685a      	ldr	r2, [r3, #4]
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801a2c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	689a      	ldr	r2, [r3, #8]
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801a2d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	681a      	ldr	r2, [r3, #0]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	f042 0201 	orr.w	r2, r2, #1
 801a2e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f000 ffc5 	bl	801b274 <UART_CheckIdleState>
 801a2ea:	4603      	mov	r3, r0
}
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	3708      	adds	r7, #8
 801a2f0:	46bd      	mov	sp, r7
 801a2f2:	bd80      	pop	{r7, pc}

0801a2f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b08a      	sub	sp, #40	; 0x28
 801a2f8:	af02      	add	r7, sp, #8
 801a2fa:	60f8      	str	r0, [r7, #12]
 801a2fc:	60b9      	str	r1, [r7, #8]
 801a2fe:	603b      	str	r3, [r7, #0]
 801a300:	4613      	mov	r3, r2
 801a302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a30a:	2b20      	cmp	r3, #32
 801a30c:	d17b      	bne.n	801a406 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801a30e:	68bb      	ldr	r3, [r7, #8]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d002      	beq.n	801a31a <HAL_UART_Transmit+0x26>
 801a314:	88fb      	ldrh	r3, [r7, #6]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d101      	bne.n	801a31e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801a31a:	2301      	movs	r3, #1
 801a31c:	e074      	b.n	801a408 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	2200      	movs	r2, #0
 801a322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	2221      	movs	r2, #33	; 0x21
 801a32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801a32e:	f7f8 f82b 	bl	8012388 <HAL_GetTick>
 801a332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801a334:	68fb      	ldr	r3, [r7, #12]
 801a336:	88fa      	ldrh	r2, [r7, #6]
 801a338:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	88fa      	ldrh	r2, [r7, #6]
 801a340:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	689b      	ldr	r3, [r3, #8]
 801a348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a34c:	d108      	bne.n	801a360 <HAL_UART_Transmit+0x6c>
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	691b      	ldr	r3, [r3, #16]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d104      	bne.n	801a360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801a356:	2300      	movs	r3, #0
 801a358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801a35a:	68bb      	ldr	r3, [r7, #8]
 801a35c:	61bb      	str	r3, [r7, #24]
 801a35e:	e003      	b.n	801a368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801a360:	68bb      	ldr	r3, [r7, #8]
 801a362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801a364:	2300      	movs	r3, #0
 801a366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801a368:	e030      	b.n	801a3cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	9300      	str	r3, [sp, #0]
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	2200      	movs	r2, #0
 801a372:	2180      	movs	r1, #128	; 0x80
 801a374:	68f8      	ldr	r0, [r7, #12]
 801a376:	f001 f827 	bl	801b3c8 <UART_WaitOnFlagUntilTimeout>
 801a37a:	4603      	mov	r3, r0
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d005      	beq.n	801a38c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	2220      	movs	r2, #32
 801a384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801a388:	2303      	movs	r3, #3
 801a38a:	e03d      	b.n	801a408 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801a38c:	69fb      	ldr	r3, [r7, #28]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d10b      	bne.n	801a3aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801a392:	69bb      	ldr	r3, [r7, #24]
 801a394:	881b      	ldrh	r3, [r3, #0]
 801a396:	461a      	mov	r2, r3
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a3a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801a3a2:	69bb      	ldr	r3, [r7, #24]
 801a3a4:	3302      	adds	r3, #2
 801a3a6:	61bb      	str	r3, [r7, #24]
 801a3a8:	e007      	b.n	801a3ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801a3aa:	69fb      	ldr	r3, [r7, #28]
 801a3ac:	781a      	ldrb	r2, [r3, #0]
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801a3b4:	69fb      	ldr	r3, [r7, #28]
 801a3b6:	3301      	adds	r3, #1
 801a3b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801a3c0:	b29b      	uxth	r3, r3
 801a3c2:	3b01      	subs	r3, #1
 801a3c4:	b29a      	uxth	r2, r3
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801a3d2:	b29b      	uxth	r3, r3
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d1c8      	bne.n	801a36a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801a3d8:	683b      	ldr	r3, [r7, #0]
 801a3da:	9300      	str	r3, [sp, #0]
 801a3dc:	697b      	ldr	r3, [r7, #20]
 801a3de:	2200      	movs	r2, #0
 801a3e0:	2140      	movs	r1, #64	; 0x40
 801a3e2:	68f8      	ldr	r0, [r7, #12]
 801a3e4:	f000 fff0 	bl	801b3c8 <UART_WaitOnFlagUntilTimeout>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d005      	beq.n	801a3fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	2220      	movs	r2, #32
 801a3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801a3f6:	2303      	movs	r3, #3
 801a3f8:	e006      	b.n	801a408 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801a3fa:	68fb      	ldr	r3, [r7, #12]
 801a3fc:	2220      	movs	r2, #32
 801a3fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801a402:	2300      	movs	r3, #0
 801a404:	e000      	b.n	801a408 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801a406:	2302      	movs	r3, #2
  }
}
 801a408:	4618      	mov	r0, r3
 801a40a:	3720      	adds	r7, #32
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}

0801a410 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b08a      	sub	sp, #40	; 0x28
 801a414:	af00      	add	r7, sp, #0
 801a416:	60f8      	str	r0, [r7, #12]
 801a418:	60b9      	str	r1, [r7, #8]
 801a41a:	4613      	mov	r3, r2
 801a41c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a424:	2b20      	cmp	r3, #32
 801a426:	d137      	bne.n	801a498 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d002      	beq.n	801a434 <HAL_UART_Receive_IT+0x24>
 801a42e:	88fb      	ldrh	r3, [r7, #6]
 801a430:	2b00      	cmp	r3, #0
 801a432:	d101      	bne.n	801a438 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801a434:	2301      	movs	r3, #1
 801a436:	e030      	b.n	801a49a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	2200      	movs	r2, #0
 801a43c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	4a18      	ldr	r2, [pc, #96]	; (801a4a4 <HAL_UART_Receive_IT+0x94>)
 801a444:	4293      	cmp	r3, r2
 801a446:	d01f      	beq.n	801a488 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	685b      	ldr	r3, [r3, #4]
 801a44e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a452:	2b00      	cmp	r3, #0
 801a454:	d018      	beq.n	801a488 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	e853 3f00 	ldrex	r3, [r3]
 801a462:	613b      	str	r3, [r7, #16]
   return(result);
 801a464:	693b      	ldr	r3, [r7, #16]
 801a466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801a46a:	627b      	str	r3, [r7, #36]	; 0x24
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	461a      	mov	r2, r3
 801a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a474:	623b      	str	r3, [r7, #32]
 801a476:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a478:	69f9      	ldr	r1, [r7, #28]
 801a47a:	6a3a      	ldr	r2, [r7, #32]
 801a47c:	e841 2300 	strex	r3, r2, [r1]
 801a480:	61bb      	str	r3, [r7, #24]
   return(result);
 801a482:	69bb      	ldr	r3, [r7, #24]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d1e6      	bne.n	801a456 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801a488:	88fb      	ldrh	r3, [r7, #6]
 801a48a:	461a      	mov	r2, r3
 801a48c:	68b9      	ldr	r1, [r7, #8]
 801a48e:	68f8      	ldr	r0, [r7, #12]
 801a490:	f001 f802 	bl	801b498 <UART_Start_Receive_IT>
 801a494:	4603      	mov	r3, r0
 801a496:	e000      	b.n	801a49a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801a498:	2302      	movs	r3, #2
  }
}
 801a49a:	4618      	mov	r0, r3
 801a49c:	3728      	adds	r7, #40	; 0x28
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}
 801a4a2:	bf00      	nop
 801a4a4:	40008000 	.word	0x40008000

0801a4a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b0ba      	sub	sp, #232	; 0xe8
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	69db      	ldr	r3, [r3, #28]
 801a4b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	689b      	ldr	r3, [r3, #8]
 801a4ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801a4ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801a4d2:	f640 030f 	movw	r3, #2063	; 0x80f
 801a4d6:	4013      	ands	r3, r2
 801a4d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801a4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d11b      	bne.n	801a51c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a4e8:	f003 0320 	and.w	r3, r3, #32
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d015      	beq.n	801a51c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a4f4:	f003 0320 	and.w	r3, r3, #32
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d105      	bne.n	801a508 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a504:	2b00      	cmp	r3, #0
 801a506:	d009      	beq.n	801a51c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	f000 82e3 	beq.w	801aad8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a516:	6878      	ldr	r0, [r7, #4]
 801a518:	4798      	blx	r3
      }
      return;
 801a51a:	e2dd      	b.n	801aad8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801a51c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801a520:	2b00      	cmp	r3, #0
 801a522:	f000 8123 	beq.w	801a76c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801a526:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801a52a:	4b8d      	ldr	r3, [pc, #564]	; (801a760 <HAL_UART_IRQHandler+0x2b8>)
 801a52c:	4013      	ands	r3, r2
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d106      	bne.n	801a540 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801a532:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801a536:	4b8b      	ldr	r3, [pc, #556]	; (801a764 <HAL_UART_IRQHandler+0x2bc>)
 801a538:	4013      	ands	r3, r2
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	f000 8116 	beq.w	801a76c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a544:	f003 0301 	and.w	r3, r3, #1
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d011      	beq.n	801a570 <HAL_UART_IRQHandler+0xc8>
 801a54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a554:	2b00      	cmp	r3, #0
 801a556:	d00b      	beq.n	801a570 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	2201      	movs	r2, #1
 801a55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a566:	f043 0201 	orr.w	r2, r3, #1
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a574:	f003 0302 	and.w	r3, r3, #2
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d011      	beq.n	801a5a0 <HAL_UART_IRQHandler+0xf8>
 801a57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a580:	f003 0301 	and.w	r3, r3, #1
 801a584:	2b00      	cmp	r3, #0
 801a586:	d00b      	beq.n	801a5a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	2202      	movs	r2, #2
 801a58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a596:	f043 0204 	orr.w	r2, r3, #4
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a5a4:	f003 0304 	and.w	r3, r3, #4
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d011      	beq.n	801a5d0 <HAL_UART_IRQHandler+0x128>
 801a5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a5b0:	f003 0301 	and.w	r3, r3, #1
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d00b      	beq.n	801a5d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	2204      	movs	r2, #4
 801a5be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a5c6:	f043 0202 	orr.w	r2, r3, #2
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801a5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a5d4:	f003 0308 	and.w	r3, r3, #8
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d017      	beq.n	801a60c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a5e0:	f003 0320 	and.w	r3, r3, #32
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d105      	bne.n	801a5f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801a5e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801a5ec:	4b5c      	ldr	r3, [pc, #368]	; (801a760 <HAL_UART_IRQHandler+0x2b8>)
 801a5ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d00b      	beq.n	801a60c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	2208      	movs	r2, #8
 801a5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a602:	f043 0208 	orr.w	r2, r3, #8
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801a60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a614:	2b00      	cmp	r3, #0
 801a616:	d012      	beq.n	801a63e <HAL_UART_IRQHandler+0x196>
 801a618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a61c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801a620:	2b00      	cmp	r3, #0
 801a622:	d00c      	beq.n	801a63e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a62c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a634:	f043 0220 	orr.w	r2, r3, #32
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a644:	2b00      	cmp	r3, #0
 801a646:	f000 8249 	beq.w	801aadc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801a64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a64e:	f003 0320 	and.w	r3, r3, #32
 801a652:	2b00      	cmp	r3, #0
 801a654:	d013      	beq.n	801a67e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801a656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a65a:	f003 0320 	and.w	r3, r3, #32
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d105      	bne.n	801a66e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801a662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801a666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d007      	beq.n	801a67e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a672:	2b00      	cmp	r3, #0
 801a674:	d003      	beq.n	801a67e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a67a:	6878      	ldr	r0, [r7, #4]
 801a67c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a684:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	689b      	ldr	r3, [r3, #8]
 801a68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a692:	2b40      	cmp	r3, #64	; 0x40
 801a694:	d005      	beq.n	801a6a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801a696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801a69a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d054      	beq.n	801a74c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a6a2:	6878      	ldr	r0, [r7, #4]
 801a6a4:	f001 f81a 	bl	801b6dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	689b      	ldr	r3, [r3, #8]
 801a6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a6b2:	2b40      	cmp	r3, #64	; 0x40
 801a6b4:	d146      	bne.n	801a744 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	3308      	adds	r3, #8
 801a6bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a6c4:	e853 3f00 	ldrex	r3, [r3]
 801a6c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801a6cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a6d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	3308      	adds	r3, #8
 801a6de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801a6e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801a6e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801a6ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801a6f2:	e841 2300 	strex	r3, r2, [r1]
 801a6f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801a6fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d1d9      	bne.n	801a6b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d017      	beq.n	801a73c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a712:	4a15      	ldr	r2, [pc, #84]	; (801a768 <HAL_UART_IRQHandler+0x2c0>)
 801a714:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a71c:	4618      	mov	r0, r3
 801a71e:	f7f9 fce0 	bl	80140e2 <HAL_DMA_Abort_IT>
 801a722:	4603      	mov	r3, r0
 801a724:	2b00      	cmp	r3, #0
 801a726:	d019      	beq.n	801a75c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a730:	687a      	ldr	r2, [r7, #4]
 801a732:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801a736:	4610      	mov	r0, r2
 801a738:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a73a:	e00f      	b.n	801a75c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801a73c:	6878      	ldr	r0, [r7, #4]
 801a73e:	f000 f9e1 	bl	801ab04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a742:	e00b      	b.n	801a75c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a744:	6878      	ldr	r0, [r7, #4]
 801a746:	f000 f9dd 	bl	801ab04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a74a:	e007      	b.n	801a75c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	f000 f9d9 	bl	801ab04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	2200      	movs	r2, #0
 801a756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801a75a:	e1bf      	b.n	801aadc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a75c:	bf00      	nop
    return;
 801a75e:	e1bd      	b.n	801aadc <HAL_UART_IRQHandler+0x634>
 801a760:	10000001 	.word	0x10000001
 801a764:	04000120 	.word	0x04000120
 801a768:	0801b7a9 	.word	0x0801b7a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a770:	2b01      	cmp	r3, #1
 801a772:	f040 8153 	bne.w	801aa1c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801a776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801a77a:	f003 0310 	and.w	r3, r3, #16
 801a77e:	2b00      	cmp	r3, #0
 801a780:	f000 814c 	beq.w	801aa1c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801a784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801a788:	f003 0310 	and.w	r3, r3, #16
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	f000 8145 	beq.w	801aa1c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	2210      	movs	r2, #16
 801a798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	689b      	ldr	r3, [r3, #8]
 801a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a7a4:	2b40      	cmp	r3, #64	; 0x40
 801a7a6:	f040 80bb 	bne.w	801a920 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	685b      	ldr	r3, [r3, #4]
 801a7b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801a7b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	f000 818f 	beq.w	801aae0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a7c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801a7cc:	429a      	cmp	r2, r3
 801a7ce:	f080 8187 	bcs.w	801aae0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801a7d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f003 0320 	and.w	r3, r3, #32
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	f040 8087 	bne.w	801a8fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a7fc:	e853 3f00 	ldrex	r3, [r3]
 801a800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801a804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a80c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	461a      	mov	r2, r3
 801a816:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a81a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801a81e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801a826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801a82a:	e841 2300 	strex	r3, r2, [r1]
 801a82e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801a832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a836:	2b00      	cmp	r3, #0
 801a838:	d1da      	bne.n	801a7f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	3308      	adds	r3, #8
 801a840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a844:	e853 3f00 	ldrex	r3, [r3]
 801a848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801a84a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a84c:	f023 0301 	bic.w	r3, r3, #1
 801a850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	3308      	adds	r3, #8
 801a85a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801a85e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801a862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801a866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a86a:	e841 2300 	strex	r3, r2, [r1]
 801a86e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801a870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a872:	2b00      	cmp	r3, #0
 801a874:	d1e1      	bne.n	801a83a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	3308      	adds	r3, #8
 801a87c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a87e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a880:	e853 3f00 	ldrex	r3, [r3]
 801a884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801a886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a88c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	3308      	adds	r3, #8
 801a896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801a89a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801a89c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a89e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801a8a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801a8a2:	e841 2300 	strex	r3, r2, [r1]
 801a8a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801a8a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d1e3      	bne.n	801a876 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	2220      	movs	r2, #32
 801a8b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8c4:	e853 3f00 	ldrex	r3, [r3]
 801a8c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801a8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a8cc:	f023 0310 	bic.w	r3, r3, #16
 801a8d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	461a      	mov	r2, r3
 801a8da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8de:	65bb      	str	r3, [r7, #88]	; 0x58
 801a8e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a8e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801a8e6:	e841 2300 	strex	r3, r2, [r1]
 801a8ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801a8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d1e4      	bne.n	801a8bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f7f9 fb96 	bl	801402a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	2202      	movs	r2, #2
 801a902:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a910:	b29b      	uxth	r3, r3
 801a912:	1ad3      	subs	r3, r2, r3
 801a914:	b29b      	uxth	r3, r3
 801a916:	4619      	mov	r1, r3
 801a918:	6878      	ldr	r0, [r7, #4]
 801a91a:	f000 f8fd 	bl	801ab18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a91e:	e0df      	b.n	801aae0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a92c:	b29b      	uxth	r3, r3
 801a92e:	1ad3      	subs	r3, r2, r3
 801a930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801a93a:	b29b      	uxth	r3, r3
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	f000 80d1 	beq.w	801aae4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801a942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801a946:	2b00      	cmp	r3, #0
 801a948:	f000 80cc 	beq.w	801aae4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a954:	e853 3f00 	ldrex	r3, [r3]
 801a958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801a95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a95c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801a960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	461a      	mov	r2, r3
 801a96a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a96e:	647b      	str	r3, [r7, #68]	; 0x44
 801a970:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a976:	e841 2300 	strex	r3, r2, [r1]
 801a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801a97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d1e4      	bne.n	801a94c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	3308      	adds	r3, #8
 801a988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a98c:	e853 3f00 	ldrex	r3, [r3]
 801a990:	623b      	str	r3, [r7, #32]
   return(result);
 801a992:	6a3b      	ldr	r3, [r7, #32]
 801a994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a998:	f023 0301 	bic.w	r3, r3, #1
 801a99c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	3308      	adds	r3, #8
 801a9a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801a9aa:	633a      	str	r2, [r7, #48]	; 0x30
 801a9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9b2:	e841 2300 	strex	r3, r2, [r1]
 801a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d1e1      	bne.n	801a982 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	2220      	movs	r2, #32
 801a9c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9d8:	693b      	ldr	r3, [r7, #16]
 801a9da:	e853 3f00 	ldrex	r3, [r3]
 801a9de:	60fb      	str	r3, [r7, #12]
   return(result);
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	f023 0310 	bic.w	r3, r3, #16
 801a9e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	461a      	mov	r2, r3
 801a9f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a9f4:	61fb      	str	r3, [r7, #28]
 801a9f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9f8:	69b9      	ldr	r1, [r7, #24]
 801a9fa:	69fa      	ldr	r2, [r7, #28]
 801a9fc:	e841 2300 	strex	r3, r2, [r1]
 801aa00:	617b      	str	r3, [r7, #20]
   return(result);
 801aa02:	697b      	ldr	r3, [r7, #20]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d1e4      	bne.n	801a9d2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	2202      	movs	r2, #2
 801aa0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801aa0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801aa12:	4619      	mov	r1, r3
 801aa14:	6878      	ldr	r0, [r7, #4]
 801aa16:	f000 f87f 	bl	801ab18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801aa1a:	e063      	b.n	801aae4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801aa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aa20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d00e      	beq.n	801aa46 <HAL_UART_IRQHandler+0x59e>
 801aa28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801aa2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d008      	beq.n	801aa46 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801aa3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801aa3e:	6878      	ldr	r0, [r7, #4]
 801aa40:	f001 fc10 	bl	801c264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801aa44:	e051      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801aa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aa4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d014      	beq.n	801aa7c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801aa52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801aa56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d105      	bne.n	801aa6a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801aa5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801aa62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d008      	beq.n	801aa7c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d03a      	beq.n	801aae8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa76:	6878      	ldr	r0, [r7, #4]
 801aa78:	4798      	blx	r3
    }
    return;
 801aa7a:	e035      	b.n	801aae8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801aa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d009      	beq.n	801aa9c <HAL_UART_IRQHandler+0x5f4>
 801aa88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801aa8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d003      	beq.n	801aa9c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801aa94:	6878      	ldr	r0, [r7, #4]
 801aa96:	f000 fe9d 	bl	801b7d4 <UART_EndTransmit_IT>
    return;
 801aa9a:	e026      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801aa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aaa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d009      	beq.n	801aabc <HAL_UART_IRQHandler+0x614>
 801aaa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801aaac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d003      	beq.n	801aabc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801aab4:	6878      	ldr	r0, [r7, #4]
 801aab6:	f001 fbe9 	bl	801c28c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801aaba:	e016      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801aabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d010      	beq.n	801aaea <HAL_UART_IRQHandler+0x642>
 801aac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801aacc:	2b00      	cmp	r3, #0
 801aace:	da0c      	bge.n	801aaea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801aad0:	6878      	ldr	r0, [r7, #4]
 801aad2:	f001 fbd1 	bl	801c278 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801aad6:	e008      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
      return;
 801aad8:	bf00      	nop
 801aada:	e006      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
    return;
 801aadc:	bf00      	nop
 801aade:	e004      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
      return;
 801aae0:	bf00      	nop
 801aae2:	e002      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
      return;
 801aae4:	bf00      	nop
 801aae6:	e000      	b.n	801aaea <HAL_UART_IRQHandler+0x642>
    return;
 801aae8:	bf00      	nop
  }
}
 801aaea:	37e8      	adds	r7, #232	; 0xe8
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}

0801aaf0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801aaf0:	b480      	push	{r7}
 801aaf2:	b083      	sub	sp, #12
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801aaf8:	bf00      	nop
 801aafa:	370c      	adds	r7, #12
 801aafc:	46bd      	mov	sp, r7
 801aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab02:	4770      	bx	lr

0801ab04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801ab04:	b480      	push	{r7}
 801ab06:	b083      	sub	sp, #12
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801ab0c:	bf00      	nop
 801ab0e:	370c      	adds	r7, #12
 801ab10:	46bd      	mov	sp, r7
 801ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab16:	4770      	bx	lr

0801ab18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801ab18:	b480      	push	{r7}
 801ab1a:	b083      	sub	sp, #12
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
 801ab20:	460b      	mov	r3, r1
 801ab22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801ab24:	bf00      	nop
 801ab26:	370c      	adds	r7, #12
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2e:	4770      	bx	lr

0801ab30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ab30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ab34:	b08c      	sub	sp, #48	; 0x30
 801ab36:	af00      	add	r7, sp, #0
 801ab38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ab40:	697b      	ldr	r3, [r7, #20]
 801ab42:	689a      	ldr	r2, [r3, #8]
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	691b      	ldr	r3, [r3, #16]
 801ab48:	431a      	orrs	r2, r3
 801ab4a:	697b      	ldr	r3, [r7, #20]
 801ab4c:	695b      	ldr	r3, [r3, #20]
 801ab4e:	431a      	orrs	r2, r3
 801ab50:	697b      	ldr	r3, [r7, #20]
 801ab52:	69db      	ldr	r3, [r3, #28]
 801ab54:	4313      	orrs	r3, r2
 801ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801ab58:	697b      	ldr	r3, [r7, #20]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	681a      	ldr	r2, [r3, #0]
 801ab5e:	4baa      	ldr	r3, [pc, #680]	; (801ae08 <UART_SetConfig+0x2d8>)
 801ab60:	4013      	ands	r3, r2
 801ab62:	697a      	ldr	r2, [r7, #20]
 801ab64:	6812      	ldr	r2, [r2, #0]
 801ab66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ab68:	430b      	orrs	r3, r1
 801ab6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801ab76:	697b      	ldr	r3, [r7, #20]
 801ab78:	68da      	ldr	r2, [r3, #12]
 801ab7a:	697b      	ldr	r3, [r7, #20]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	430a      	orrs	r2, r1
 801ab80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801ab82:	697b      	ldr	r3, [r7, #20]
 801ab84:	699b      	ldr	r3, [r3, #24]
 801ab86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	4a9f      	ldr	r2, [pc, #636]	; (801ae0c <UART_SetConfig+0x2dc>)
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	d004      	beq.n	801ab9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801ab92:	697b      	ldr	r3, [r7, #20]
 801ab94:	6a1b      	ldr	r3, [r3, #32]
 801ab96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab98:	4313      	orrs	r3, r2
 801ab9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	689b      	ldr	r3, [r3, #8]
 801aba2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801aba6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801abaa:	697a      	ldr	r2, [r7, #20]
 801abac:	6812      	ldr	r2, [r2, #0]
 801abae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801abb0:	430b      	orrs	r3, r1
 801abb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801abb4:	697b      	ldr	r3, [r7, #20]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abba:	f023 010f 	bic.w	r1, r3, #15
 801abbe:	697b      	ldr	r3, [r7, #20]
 801abc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801abc2:	697b      	ldr	r3, [r7, #20]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	430a      	orrs	r2, r1
 801abc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	4a90      	ldr	r2, [pc, #576]	; (801ae10 <UART_SetConfig+0x2e0>)
 801abd0:	4293      	cmp	r3, r2
 801abd2:	d125      	bne.n	801ac20 <UART_SetConfig+0xf0>
 801abd4:	4b8f      	ldr	r3, [pc, #572]	; (801ae14 <UART_SetConfig+0x2e4>)
 801abd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801abda:	f003 0303 	and.w	r3, r3, #3
 801abde:	2b03      	cmp	r3, #3
 801abe0:	d81a      	bhi.n	801ac18 <UART_SetConfig+0xe8>
 801abe2:	a201      	add	r2, pc, #4	; (adr r2, 801abe8 <UART_SetConfig+0xb8>)
 801abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abe8:	0801abf9 	.word	0x0801abf9
 801abec:	0801ac09 	.word	0x0801ac09
 801abf0:	0801ac01 	.word	0x0801ac01
 801abf4:	0801ac11 	.word	0x0801ac11
 801abf8:	2301      	movs	r3, #1
 801abfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801abfe:	e116      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac00:	2302      	movs	r3, #2
 801ac02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac06:	e112      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac08:	2304      	movs	r3, #4
 801ac0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac0e:	e10e      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac10:	2308      	movs	r3, #8
 801ac12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac16:	e10a      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac18:	2310      	movs	r3, #16
 801ac1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac1e:	e106      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	4a7c      	ldr	r2, [pc, #496]	; (801ae18 <UART_SetConfig+0x2e8>)
 801ac26:	4293      	cmp	r3, r2
 801ac28:	d138      	bne.n	801ac9c <UART_SetConfig+0x16c>
 801ac2a:	4b7a      	ldr	r3, [pc, #488]	; (801ae14 <UART_SetConfig+0x2e4>)
 801ac2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ac30:	f003 030c 	and.w	r3, r3, #12
 801ac34:	2b0c      	cmp	r3, #12
 801ac36:	d82d      	bhi.n	801ac94 <UART_SetConfig+0x164>
 801ac38:	a201      	add	r2, pc, #4	; (adr r2, 801ac40 <UART_SetConfig+0x110>)
 801ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac3e:	bf00      	nop
 801ac40:	0801ac75 	.word	0x0801ac75
 801ac44:	0801ac95 	.word	0x0801ac95
 801ac48:	0801ac95 	.word	0x0801ac95
 801ac4c:	0801ac95 	.word	0x0801ac95
 801ac50:	0801ac85 	.word	0x0801ac85
 801ac54:	0801ac95 	.word	0x0801ac95
 801ac58:	0801ac95 	.word	0x0801ac95
 801ac5c:	0801ac95 	.word	0x0801ac95
 801ac60:	0801ac7d 	.word	0x0801ac7d
 801ac64:	0801ac95 	.word	0x0801ac95
 801ac68:	0801ac95 	.word	0x0801ac95
 801ac6c:	0801ac95 	.word	0x0801ac95
 801ac70:	0801ac8d 	.word	0x0801ac8d
 801ac74:	2300      	movs	r3, #0
 801ac76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac7a:	e0d8      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac7c:	2302      	movs	r3, #2
 801ac7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac82:	e0d4      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac84:	2304      	movs	r3, #4
 801ac86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac8a:	e0d0      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac8c:	2308      	movs	r3, #8
 801ac8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac92:	e0cc      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac94:	2310      	movs	r3, #16
 801ac96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ac9a:	e0c8      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	4a5e      	ldr	r2, [pc, #376]	; (801ae1c <UART_SetConfig+0x2ec>)
 801aca2:	4293      	cmp	r3, r2
 801aca4:	d125      	bne.n	801acf2 <UART_SetConfig+0x1c2>
 801aca6:	4b5b      	ldr	r3, [pc, #364]	; (801ae14 <UART_SetConfig+0x2e4>)
 801aca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801acac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801acb0:	2b30      	cmp	r3, #48	; 0x30
 801acb2:	d016      	beq.n	801ace2 <UART_SetConfig+0x1b2>
 801acb4:	2b30      	cmp	r3, #48	; 0x30
 801acb6:	d818      	bhi.n	801acea <UART_SetConfig+0x1ba>
 801acb8:	2b20      	cmp	r3, #32
 801acba:	d00a      	beq.n	801acd2 <UART_SetConfig+0x1a2>
 801acbc:	2b20      	cmp	r3, #32
 801acbe:	d814      	bhi.n	801acea <UART_SetConfig+0x1ba>
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d002      	beq.n	801acca <UART_SetConfig+0x19a>
 801acc4:	2b10      	cmp	r3, #16
 801acc6:	d008      	beq.n	801acda <UART_SetConfig+0x1aa>
 801acc8:	e00f      	b.n	801acea <UART_SetConfig+0x1ba>
 801acca:	2300      	movs	r3, #0
 801accc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801acd0:	e0ad      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801acd2:	2302      	movs	r3, #2
 801acd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801acd8:	e0a9      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801acda:	2304      	movs	r3, #4
 801acdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ace0:	e0a5      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ace2:	2308      	movs	r3, #8
 801ace4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ace8:	e0a1      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801acea:	2310      	movs	r3, #16
 801acec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801acf0:	e09d      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801acf2:	697b      	ldr	r3, [r7, #20]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	4a4a      	ldr	r2, [pc, #296]	; (801ae20 <UART_SetConfig+0x2f0>)
 801acf8:	4293      	cmp	r3, r2
 801acfa:	d125      	bne.n	801ad48 <UART_SetConfig+0x218>
 801acfc:	4b45      	ldr	r3, [pc, #276]	; (801ae14 <UART_SetConfig+0x2e4>)
 801acfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ad02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ad06:	2bc0      	cmp	r3, #192	; 0xc0
 801ad08:	d016      	beq.n	801ad38 <UART_SetConfig+0x208>
 801ad0a:	2bc0      	cmp	r3, #192	; 0xc0
 801ad0c:	d818      	bhi.n	801ad40 <UART_SetConfig+0x210>
 801ad0e:	2b80      	cmp	r3, #128	; 0x80
 801ad10:	d00a      	beq.n	801ad28 <UART_SetConfig+0x1f8>
 801ad12:	2b80      	cmp	r3, #128	; 0x80
 801ad14:	d814      	bhi.n	801ad40 <UART_SetConfig+0x210>
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d002      	beq.n	801ad20 <UART_SetConfig+0x1f0>
 801ad1a:	2b40      	cmp	r3, #64	; 0x40
 801ad1c:	d008      	beq.n	801ad30 <UART_SetConfig+0x200>
 801ad1e:	e00f      	b.n	801ad40 <UART_SetConfig+0x210>
 801ad20:	2300      	movs	r3, #0
 801ad22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad26:	e082      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad28:	2302      	movs	r3, #2
 801ad2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad2e:	e07e      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad30:	2304      	movs	r3, #4
 801ad32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad36:	e07a      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad38:	2308      	movs	r3, #8
 801ad3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad3e:	e076      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad40:	2310      	movs	r3, #16
 801ad42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad46:	e072      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad48:	697b      	ldr	r3, [r7, #20]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	4a35      	ldr	r2, [pc, #212]	; (801ae24 <UART_SetConfig+0x2f4>)
 801ad4e:	4293      	cmp	r3, r2
 801ad50:	d12a      	bne.n	801ada8 <UART_SetConfig+0x278>
 801ad52:	4b30      	ldr	r3, [pc, #192]	; (801ae14 <UART_SetConfig+0x2e4>)
 801ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ad58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ad5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad60:	d01a      	beq.n	801ad98 <UART_SetConfig+0x268>
 801ad62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad66:	d81b      	bhi.n	801ada0 <UART_SetConfig+0x270>
 801ad68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ad6c:	d00c      	beq.n	801ad88 <UART_SetConfig+0x258>
 801ad6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ad72:	d815      	bhi.n	801ada0 <UART_SetConfig+0x270>
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d003      	beq.n	801ad80 <UART_SetConfig+0x250>
 801ad78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ad7c:	d008      	beq.n	801ad90 <UART_SetConfig+0x260>
 801ad7e:	e00f      	b.n	801ada0 <UART_SetConfig+0x270>
 801ad80:	2300      	movs	r3, #0
 801ad82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad86:	e052      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad88:	2302      	movs	r3, #2
 801ad8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad8e:	e04e      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad90:	2304      	movs	r3, #4
 801ad92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad96:	e04a      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ad98:	2308      	movs	r3, #8
 801ad9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ad9e:	e046      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ada0:	2310      	movs	r3, #16
 801ada2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ada6:	e042      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	4a17      	ldr	r2, [pc, #92]	; (801ae0c <UART_SetConfig+0x2dc>)
 801adae:	4293      	cmp	r3, r2
 801adb0:	d13a      	bne.n	801ae28 <UART_SetConfig+0x2f8>
 801adb2:	4b18      	ldr	r3, [pc, #96]	; (801ae14 <UART_SetConfig+0x2e4>)
 801adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801adb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801adbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801adc0:	d01a      	beq.n	801adf8 <UART_SetConfig+0x2c8>
 801adc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801adc6:	d81b      	bhi.n	801ae00 <UART_SetConfig+0x2d0>
 801adc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801adcc:	d00c      	beq.n	801ade8 <UART_SetConfig+0x2b8>
 801adce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801add2:	d815      	bhi.n	801ae00 <UART_SetConfig+0x2d0>
 801add4:	2b00      	cmp	r3, #0
 801add6:	d003      	beq.n	801ade0 <UART_SetConfig+0x2b0>
 801add8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801addc:	d008      	beq.n	801adf0 <UART_SetConfig+0x2c0>
 801adde:	e00f      	b.n	801ae00 <UART_SetConfig+0x2d0>
 801ade0:	2300      	movs	r3, #0
 801ade2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ade6:	e022      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ade8:	2302      	movs	r3, #2
 801adea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801adee:	e01e      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801adf0:	2304      	movs	r3, #4
 801adf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801adf6:	e01a      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801adf8:	2308      	movs	r3, #8
 801adfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801adfe:	e016      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ae00:	2310      	movs	r3, #16
 801ae02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801ae06:	e012      	b.n	801ae2e <UART_SetConfig+0x2fe>
 801ae08:	cfff69f3 	.word	0xcfff69f3
 801ae0c:	40008000 	.word	0x40008000
 801ae10:	40013800 	.word	0x40013800
 801ae14:	40021000 	.word	0x40021000
 801ae18:	40004400 	.word	0x40004400
 801ae1c:	40004800 	.word	0x40004800
 801ae20:	40004c00 	.word	0x40004c00
 801ae24:	40005000 	.word	0x40005000
 801ae28:	2310      	movs	r3, #16
 801ae2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801ae2e:	697b      	ldr	r3, [r7, #20]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	4ab0      	ldr	r2, [pc, #704]	; (801b0f4 <UART_SetConfig+0x5c4>)
 801ae34:	4293      	cmp	r3, r2
 801ae36:	f040 809b 	bne.w	801af70 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801ae3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ae3e:	2b08      	cmp	r3, #8
 801ae40:	d827      	bhi.n	801ae92 <UART_SetConfig+0x362>
 801ae42:	a201      	add	r2, pc, #4	; (adr r2, 801ae48 <UART_SetConfig+0x318>)
 801ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae48:	0801ae6d 	.word	0x0801ae6d
 801ae4c:	0801ae75 	.word	0x0801ae75
 801ae50:	0801ae7d 	.word	0x0801ae7d
 801ae54:	0801ae93 	.word	0x0801ae93
 801ae58:	0801ae83 	.word	0x0801ae83
 801ae5c:	0801ae93 	.word	0x0801ae93
 801ae60:	0801ae93 	.word	0x0801ae93
 801ae64:	0801ae93 	.word	0x0801ae93
 801ae68:	0801ae8b 	.word	0x0801ae8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ae6c:	f7fb fb60 	bl	8016530 <HAL_RCC_GetPCLK1Freq>
 801ae70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ae72:	e014      	b.n	801ae9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ae74:	f7fb fb70 	bl	8016558 <HAL_RCC_GetPCLK2Freq>
 801ae78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ae7a:	e010      	b.n	801ae9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801ae7c:	4b9e      	ldr	r3, [pc, #632]	; (801b0f8 <UART_SetConfig+0x5c8>)
 801ae7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ae80:	e00d      	b.n	801ae9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801ae82:	f7fb faa3 	bl	80163cc <HAL_RCC_GetSysClockFreq>
 801ae86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801ae88:	e009      	b.n	801ae9e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ae8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ae8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801ae90:	e005      	b.n	801ae9e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 801ae92:	2300      	movs	r3, #0
 801ae94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801ae96:	2301      	movs	r3, #1
 801ae98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801ae9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aea0:	2b00      	cmp	r3, #0
 801aea2:	f000 8130 	beq.w	801b106 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801aea6:	697b      	ldr	r3, [r7, #20]
 801aea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeaa:	4a94      	ldr	r2, [pc, #592]	; (801b0fc <UART_SetConfig+0x5cc>)
 801aeac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801aeb0:	461a      	mov	r2, r3
 801aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeb4:	fbb3 f3f2 	udiv	r3, r3, r2
 801aeb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	685a      	ldr	r2, [r3, #4]
 801aebe:	4613      	mov	r3, r2
 801aec0:	005b      	lsls	r3, r3, #1
 801aec2:	4413      	add	r3, r2
 801aec4:	69ba      	ldr	r2, [r7, #24]
 801aec6:	429a      	cmp	r2, r3
 801aec8:	d305      	bcc.n	801aed6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	685b      	ldr	r3, [r3, #4]
 801aece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801aed0:	69ba      	ldr	r2, [r7, #24]
 801aed2:	429a      	cmp	r2, r3
 801aed4:	d903      	bls.n	801aede <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801aed6:	2301      	movs	r3, #1
 801aed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801aedc:	e113      	b.n	801b106 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aee0:	2200      	movs	r2, #0
 801aee2:	60bb      	str	r3, [r7, #8]
 801aee4:	60fa      	str	r2, [r7, #12]
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aeea:	4a84      	ldr	r2, [pc, #528]	; (801b0fc <UART_SetConfig+0x5cc>)
 801aeec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	2200      	movs	r2, #0
 801aef4:	603b      	str	r3, [r7, #0]
 801aef6:	607a      	str	r2, [r7, #4]
 801aef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aefc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801af00:	f7e5 fe8c 	bl	8000c1c <__aeabi_uldivmod>
 801af04:	4602      	mov	r2, r0
 801af06:	460b      	mov	r3, r1
 801af08:	4610      	mov	r0, r2
 801af0a:	4619      	mov	r1, r3
 801af0c:	f04f 0200 	mov.w	r2, #0
 801af10:	f04f 0300 	mov.w	r3, #0
 801af14:	020b      	lsls	r3, r1, #8
 801af16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801af1a:	0202      	lsls	r2, r0, #8
 801af1c:	6979      	ldr	r1, [r7, #20]
 801af1e:	6849      	ldr	r1, [r1, #4]
 801af20:	0849      	lsrs	r1, r1, #1
 801af22:	2000      	movs	r0, #0
 801af24:	460c      	mov	r4, r1
 801af26:	4605      	mov	r5, r0
 801af28:	eb12 0804 	adds.w	r8, r2, r4
 801af2c:	eb43 0905 	adc.w	r9, r3, r5
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	685b      	ldr	r3, [r3, #4]
 801af34:	2200      	movs	r2, #0
 801af36:	469a      	mov	sl, r3
 801af38:	4693      	mov	fp, r2
 801af3a:	4652      	mov	r2, sl
 801af3c:	465b      	mov	r3, fp
 801af3e:	4640      	mov	r0, r8
 801af40:	4649      	mov	r1, r9
 801af42:	f7e5 fe6b 	bl	8000c1c <__aeabi_uldivmod>
 801af46:	4602      	mov	r2, r0
 801af48:	460b      	mov	r3, r1
 801af4a:	4613      	mov	r3, r2
 801af4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801af4e:	6a3b      	ldr	r3, [r7, #32]
 801af50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801af54:	d308      	bcc.n	801af68 <UART_SetConfig+0x438>
 801af56:	6a3b      	ldr	r3, [r7, #32]
 801af58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801af5c:	d204      	bcs.n	801af68 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 801af5e:	697b      	ldr	r3, [r7, #20]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	6a3a      	ldr	r2, [r7, #32]
 801af64:	60da      	str	r2, [r3, #12]
 801af66:	e0ce      	b.n	801b106 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 801af68:	2301      	movs	r3, #1
 801af6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801af6e:	e0ca      	b.n	801b106 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	69db      	ldr	r3, [r3, #28]
 801af74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801af78:	d166      	bne.n	801b048 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801af7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801af7e:	2b08      	cmp	r3, #8
 801af80:	d827      	bhi.n	801afd2 <UART_SetConfig+0x4a2>
 801af82:	a201      	add	r2, pc, #4	; (adr r2, 801af88 <UART_SetConfig+0x458>)
 801af84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af88:	0801afad 	.word	0x0801afad
 801af8c:	0801afb5 	.word	0x0801afb5
 801af90:	0801afbd 	.word	0x0801afbd
 801af94:	0801afd3 	.word	0x0801afd3
 801af98:	0801afc3 	.word	0x0801afc3
 801af9c:	0801afd3 	.word	0x0801afd3
 801afa0:	0801afd3 	.word	0x0801afd3
 801afa4:	0801afd3 	.word	0x0801afd3
 801afa8:	0801afcb 	.word	0x0801afcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801afac:	f7fb fac0 	bl	8016530 <HAL_RCC_GetPCLK1Freq>
 801afb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801afb2:	e014      	b.n	801afde <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801afb4:	f7fb fad0 	bl	8016558 <HAL_RCC_GetPCLK2Freq>
 801afb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801afba:	e010      	b.n	801afde <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801afbc:	4b4e      	ldr	r3, [pc, #312]	; (801b0f8 <UART_SetConfig+0x5c8>)
 801afbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801afc0:	e00d      	b.n	801afde <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801afc2:	f7fb fa03 	bl	80163cc <HAL_RCC_GetSysClockFreq>
 801afc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801afc8:	e009      	b.n	801afde <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801afca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801afce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801afd0:	e005      	b.n	801afde <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 801afd2:	2300      	movs	r3, #0
 801afd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801afd6:	2301      	movs	r3, #1
 801afd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801afdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	f000 8090 	beq.w	801b106 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801afe6:	697b      	ldr	r3, [r7, #20]
 801afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afea:	4a44      	ldr	r2, [pc, #272]	; (801b0fc <UART_SetConfig+0x5cc>)
 801afec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801aff0:	461a      	mov	r2, r3
 801aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff4:	fbb3 f3f2 	udiv	r3, r3, r2
 801aff8:	005a      	lsls	r2, r3, #1
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	685b      	ldr	r3, [r3, #4]
 801affe:	085b      	lsrs	r3, r3, #1
 801b000:	441a      	add	r2, r3
 801b002:	697b      	ldr	r3, [r7, #20]
 801b004:	685b      	ldr	r3, [r3, #4]
 801b006:	fbb2 f3f3 	udiv	r3, r2, r3
 801b00a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b00c:	6a3b      	ldr	r3, [r7, #32]
 801b00e:	2b0f      	cmp	r3, #15
 801b010:	d916      	bls.n	801b040 <UART_SetConfig+0x510>
 801b012:	6a3b      	ldr	r3, [r7, #32]
 801b014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b018:	d212      	bcs.n	801b040 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b01a:	6a3b      	ldr	r3, [r7, #32]
 801b01c:	b29b      	uxth	r3, r3
 801b01e:	f023 030f 	bic.w	r3, r3, #15
 801b022:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b024:	6a3b      	ldr	r3, [r7, #32]
 801b026:	085b      	lsrs	r3, r3, #1
 801b028:	b29b      	uxth	r3, r3
 801b02a:	f003 0307 	and.w	r3, r3, #7
 801b02e:	b29a      	uxth	r2, r3
 801b030:	8bfb      	ldrh	r3, [r7, #30]
 801b032:	4313      	orrs	r3, r2
 801b034:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	8bfa      	ldrh	r2, [r7, #30]
 801b03c:	60da      	str	r2, [r3, #12]
 801b03e:	e062      	b.n	801b106 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 801b040:	2301      	movs	r3, #1
 801b042:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801b046:	e05e      	b.n	801b106 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 801b048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801b04c:	2b08      	cmp	r3, #8
 801b04e:	d828      	bhi.n	801b0a2 <UART_SetConfig+0x572>
 801b050:	a201      	add	r2, pc, #4	; (adr r2, 801b058 <UART_SetConfig+0x528>)
 801b052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b056:	bf00      	nop
 801b058:	0801b07d 	.word	0x0801b07d
 801b05c:	0801b085 	.word	0x0801b085
 801b060:	0801b08d 	.word	0x0801b08d
 801b064:	0801b0a3 	.word	0x0801b0a3
 801b068:	0801b093 	.word	0x0801b093
 801b06c:	0801b0a3 	.word	0x0801b0a3
 801b070:	0801b0a3 	.word	0x0801b0a3
 801b074:	0801b0a3 	.word	0x0801b0a3
 801b078:	0801b09b 	.word	0x0801b09b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b07c:	f7fb fa58 	bl	8016530 <HAL_RCC_GetPCLK1Freq>
 801b080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801b082:	e014      	b.n	801b0ae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b084:	f7fb fa68 	bl	8016558 <HAL_RCC_GetPCLK2Freq>
 801b088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801b08a:	e010      	b.n	801b0ae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b08c:	4b1a      	ldr	r3, [pc, #104]	; (801b0f8 <UART_SetConfig+0x5c8>)
 801b08e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801b090:	e00d      	b.n	801b0ae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b092:	f7fb f99b 	bl	80163cc <HAL_RCC_GetSysClockFreq>
 801b096:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801b098:	e009      	b.n	801b0ae <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b09e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801b0a0:	e005      	b.n	801b0ae <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801b0ac:	bf00      	nop
    }

    if (pclk != 0U)
 801b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d028      	beq.n	801b106 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801b0b4:	697b      	ldr	r3, [r7, #20]
 801b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0b8:	4a10      	ldr	r2, [pc, #64]	; (801b0fc <UART_SetConfig+0x5cc>)
 801b0ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801b0be:	461a      	mov	r2, r3
 801b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0c2:	fbb3 f2f2 	udiv	r2, r3, r2
 801b0c6:	697b      	ldr	r3, [r7, #20]
 801b0c8:	685b      	ldr	r3, [r3, #4]
 801b0ca:	085b      	lsrs	r3, r3, #1
 801b0cc:	441a      	add	r2, r3
 801b0ce:	697b      	ldr	r3, [r7, #20]
 801b0d0:	685b      	ldr	r3, [r3, #4]
 801b0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b0d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b0d8:	6a3b      	ldr	r3, [r7, #32]
 801b0da:	2b0f      	cmp	r3, #15
 801b0dc:	d910      	bls.n	801b100 <UART_SetConfig+0x5d0>
 801b0de:	6a3b      	ldr	r3, [r7, #32]
 801b0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b0e4:	d20c      	bcs.n	801b100 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801b0e6:	6a3b      	ldr	r3, [r7, #32]
 801b0e8:	b29a      	uxth	r2, r3
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	60da      	str	r2, [r3, #12]
 801b0f0:	e009      	b.n	801b106 <UART_SetConfig+0x5d6>
 801b0f2:	bf00      	nop
 801b0f4:	40008000 	.word	0x40008000
 801b0f8:	00f42400 	.word	0x00f42400
 801b0fc:	080231f4 	.word	0x080231f4
      }
      else
      {
        ret = HAL_ERROR;
 801b100:	2301      	movs	r3, #1
 801b102:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	2201      	movs	r2, #1
 801b10a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801b10e:	697b      	ldr	r3, [r7, #20]
 801b110:	2201      	movs	r2, #1
 801b112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801b116:	697b      	ldr	r3, [r7, #20]
 801b118:	2200      	movs	r2, #0
 801b11a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801b11c:	697b      	ldr	r3, [r7, #20]
 801b11e:	2200      	movs	r2, #0
 801b120:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801b122:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801b126:	4618      	mov	r0, r3
 801b128:	3730      	adds	r7, #48	; 0x30
 801b12a:	46bd      	mov	sp, r7
 801b12c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801b130:	b480      	push	{r7}
 801b132:	b083      	sub	sp, #12
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b13c:	f003 0301 	and.w	r3, r3, #1
 801b140:	2b00      	cmp	r3, #0
 801b142:	d00a      	beq.n	801b15a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	685b      	ldr	r3, [r3, #4]
 801b14a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	430a      	orrs	r2, r1
 801b158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b15e:	f003 0302 	and.w	r3, r3, #2
 801b162:	2b00      	cmp	r3, #0
 801b164:	d00a      	beq.n	801b17c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	430a      	orrs	r2, r1
 801b17a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b180:	f003 0304 	and.w	r3, r3, #4
 801b184:	2b00      	cmp	r3, #0
 801b186:	d00a      	beq.n	801b19e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	685b      	ldr	r3, [r3, #4]
 801b18e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	430a      	orrs	r2, r1
 801b19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1a2:	f003 0308 	and.w	r3, r3, #8
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d00a      	beq.n	801b1c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	685b      	ldr	r3, [r3, #4]
 801b1b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	430a      	orrs	r2, r1
 801b1be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1c4:	f003 0310 	and.w	r3, r3, #16
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d00a      	beq.n	801b1e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	689b      	ldr	r3, [r3, #8]
 801b1d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	430a      	orrs	r2, r1
 801b1e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1e6:	f003 0320 	and.w	r3, r3, #32
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d00a      	beq.n	801b204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	689b      	ldr	r3, [r3, #8]
 801b1f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	430a      	orrs	r2, r1
 801b202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d01a      	beq.n	801b246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	685b      	ldr	r3, [r3, #4]
 801b216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	430a      	orrs	r2, r1
 801b224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b22a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b22e:	d10a      	bne.n	801b246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	685b      	ldr	r3, [r3, #4]
 801b236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	430a      	orrs	r2, r1
 801b244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d00a      	beq.n	801b268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	685b      	ldr	r3, [r3, #4]
 801b258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	430a      	orrs	r2, r1
 801b266:	605a      	str	r2, [r3, #4]
  }
}
 801b268:	bf00      	nop
 801b26a:	370c      	adds	r7, #12
 801b26c:	46bd      	mov	sp, r7
 801b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b272:	4770      	bx	lr

0801b274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b098      	sub	sp, #96	; 0x60
 801b278:	af02      	add	r7, sp, #8
 801b27a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	2200      	movs	r2, #0
 801b280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801b284:	f7f7 f880 	bl	8012388 <HAL_GetTick>
 801b288:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	f003 0308 	and.w	r3, r3, #8
 801b294:	2b08      	cmp	r3, #8
 801b296:	d12f      	bne.n	801b2f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801b29c:	9300      	str	r3, [sp, #0]
 801b29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b2a6:	6878      	ldr	r0, [r7, #4]
 801b2a8:	f000 f88e 	bl	801b3c8 <UART_WaitOnFlagUntilTimeout>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d022      	beq.n	801b2f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b2ba:	e853 3f00 	ldrex	r3, [r3]
 801b2be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b2c6:	653b      	str	r3, [r7, #80]	; 0x50
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	461a      	mov	r2, r3
 801b2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b2d0:	647b      	str	r3, [r7, #68]	; 0x44
 801b2d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b2d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b2d8:	e841 2300 	strex	r3, r2, [r1]
 801b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d1e6      	bne.n	801b2b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2220      	movs	r2, #32
 801b2e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b2f4:	2303      	movs	r3, #3
 801b2f6:	e063      	b.n	801b3c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	f003 0304 	and.w	r3, r3, #4
 801b302:	2b04      	cmp	r3, #4
 801b304:	d149      	bne.n	801b39a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801b306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801b30a:	9300      	str	r3, [sp, #0]
 801b30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b30e:	2200      	movs	r2, #0
 801b310:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801b314:	6878      	ldr	r0, [r7, #4]
 801b316:	f000 f857 	bl	801b3c8 <UART_WaitOnFlagUntilTimeout>
 801b31a:	4603      	mov	r3, r0
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d03c      	beq.n	801b39a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b328:	e853 3f00 	ldrex	r3, [r3]
 801b32c:	623b      	str	r3, [r7, #32]
   return(result);
 801b32e:	6a3b      	ldr	r3, [r7, #32]
 801b330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b334:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	461a      	mov	r2, r3
 801b33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b33e:	633b      	str	r3, [r7, #48]	; 0x30
 801b340:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b346:	e841 2300 	strex	r3, r2, [r1]
 801b34a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d1e6      	bne.n	801b320 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	3308      	adds	r3, #8
 801b358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	e853 3f00 	ldrex	r3, [r3]
 801b360:	60fb      	str	r3, [r7, #12]
   return(result);
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	f023 0301 	bic.w	r3, r3, #1
 801b368:	64bb      	str	r3, [r7, #72]	; 0x48
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	3308      	adds	r3, #8
 801b370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b372:	61fa      	str	r2, [r7, #28]
 801b374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b376:	69b9      	ldr	r1, [r7, #24]
 801b378:	69fa      	ldr	r2, [r7, #28]
 801b37a:	e841 2300 	strex	r3, r2, [r1]
 801b37e:	617b      	str	r3, [r7, #20]
   return(result);
 801b380:	697b      	ldr	r3, [r7, #20]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d1e5      	bne.n	801b352 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	2220      	movs	r2, #32
 801b38a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	2200      	movs	r2, #0
 801b392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801b396:	2303      	movs	r3, #3
 801b398:	e012      	b.n	801b3c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2220      	movs	r2, #32
 801b39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	2220      	movs	r2, #32
 801b3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	2200      	movs	r2, #0
 801b3ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	2200      	movs	r2, #0
 801b3ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801b3be:	2300      	movs	r3, #0
}
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	3758      	adds	r7, #88	; 0x58
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	bd80      	pop	{r7, pc}

0801b3c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801b3c8:	b580      	push	{r7, lr}
 801b3ca:	b084      	sub	sp, #16
 801b3cc:	af00      	add	r7, sp, #0
 801b3ce:	60f8      	str	r0, [r7, #12]
 801b3d0:	60b9      	str	r1, [r7, #8]
 801b3d2:	603b      	str	r3, [r7, #0]
 801b3d4:	4613      	mov	r3, r2
 801b3d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b3d8:	e049      	b.n	801b46e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b3da:	69bb      	ldr	r3, [r7, #24]
 801b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b3e0:	d045      	beq.n	801b46e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801b3e2:	f7f6 ffd1 	bl	8012388 <HAL_GetTick>
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	1ad3      	subs	r3, r2, r3
 801b3ec:	69ba      	ldr	r2, [r7, #24]
 801b3ee:	429a      	cmp	r2, r3
 801b3f0:	d302      	bcc.n	801b3f8 <UART_WaitOnFlagUntilTimeout+0x30>
 801b3f2:	69bb      	ldr	r3, [r7, #24]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d101      	bne.n	801b3fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801b3f8:	2303      	movs	r3, #3
 801b3fa:	e048      	b.n	801b48e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	f003 0304 	and.w	r3, r3, #4
 801b406:	2b00      	cmp	r3, #0
 801b408:	d031      	beq.n	801b46e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	69db      	ldr	r3, [r3, #28]
 801b410:	f003 0308 	and.w	r3, r3, #8
 801b414:	2b08      	cmp	r3, #8
 801b416:	d110      	bne.n	801b43a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b418:	68fb      	ldr	r3, [r7, #12]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	2208      	movs	r2, #8
 801b41e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801b420:	68f8      	ldr	r0, [r7, #12]
 801b422:	f000 f95b 	bl	801b6dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	2208      	movs	r2, #8
 801b42a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	2200      	movs	r2, #0
 801b432:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801b436:	2301      	movs	r3, #1
 801b438:	e029      	b.n	801b48e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801b43a:	68fb      	ldr	r3, [r7, #12]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	69db      	ldr	r3, [r3, #28]
 801b440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b448:	d111      	bne.n	801b46e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801b454:	68f8      	ldr	r0, [r7, #12]
 801b456:	f000 f941 	bl	801b6dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	2220      	movs	r2, #32
 801b45e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	2200      	movs	r2, #0
 801b466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801b46a:	2303      	movs	r3, #3
 801b46c:	e00f      	b.n	801b48e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	69da      	ldr	r2, [r3, #28]
 801b474:	68bb      	ldr	r3, [r7, #8]
 801b476:	4013      	ands	r3, r2
 801b478:	68ba      	ldr	r2, [r7, #8]
 801b47a:	429a      	cmp	r2, r3
 801b47c:	bf0c      	ite	eq
 801b47e:	2301      	moveq	r3, #1
 801b480:	2300      	movne	r3, #0
 801b482:	b2db      	uxtb	r3, r3
 801b484:	461a      	mov	r2, r3
 801b486:	79fb      	ldrb	r3, [r7, #7]
 801b488:	429a      	cmp	r2, r3
 801b48a:	d0a6      	beq.n	801b3da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801b48c:	2300      	movs	r3, #0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3710      	adds	r7, #16
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
	...

0801b498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b498:	b480      	push	{r7}
 801b49a:	b0a3      	sub	sp, #140	; 0x8c
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	60f8      	str	r0, [r7, #12]
 801b4a0:	60b9      	str	r1, [r7, #8]
 801b4a2:	4613      	mov	r3, r2
 801b4a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	68ba      	ldr	r2, [r7, #8]
 801b4aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	88fa      	ldrh	r2, [r7, #6]
 801b4b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	88fa      	ldrh	r2, [r7, #6]
 801b4b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	2200      	movs	r2, #0
 801b4c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	689b      	ldr	r3, [r3, #8]
 801b4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b4ca:	d10e      	bne.n	801b4ea <UART_Start_Receive_IT+0x52>
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	691b      	ldr	r3, [r3, #16]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d105      	bne.n	801b4e0 <UART_Start_Receive_IT+0x48>
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 801b4da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801b4de:	e02d      	b.n	801b53c <UART_Start_Receive_IT+0xa4>
 801b4e0:	68fb      	ldr	r3, [r7, #12]
 801b4e2:	22ff      	movs	r2, #255	; 0xff
 801b4e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801b4e8:	e028      	b.n	801b53c <UART_Start_Receive_IT+0xa4>
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	689b      	ldr	r3, [r3, #8]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d10d      	bne.n	801b50e <UART_Start_Receive_IT+0x76>
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	691b      	ldr	r3, [r3, #16]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d104      	bne.n	801b504 <UART_Start_Receive_IT+0x6c>
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	22ff      	movs	r2, #255	; 0xff
 801b4fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801b502:	e01b      	b.n	801b53c <UART_Start_Receive_IT+0xa4>
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	227f      	movs	r2, #127	; 0x7f
 801b508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801b50c:	e016      	b.n	801b53c <UART_Start_Receive_IT+0xa4>
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	689b      	ldr	r3, [r3, #8]
 801b512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801b516:	d10d      	bne.n	801b534 <UART_Start_Receive_IT+0x9c>
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	691b      	ldr	r3, [r3, #16]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d104      	bne.n	801b52a <UART_Start_Receive_IT+0x92>
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	227f      	movs	r2, #127	; 0x7f
 801b524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801b528:	e008      	b.n	801b53c <UART_Start_Receive_IT+0xa4>
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	223f      	movs	r2, #63	; 0x3f
 801b52e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801b532:	e003      	b.n	801b53c <UART_Start_Receive_IT+0xa4>
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	2200      	movs	r2, #0
 801b538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	2200      	movs	r2, #0
 801b540:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	2222      	movs	r2, #34	; 0x22
 801b548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	3308      	adds	r3, #8
 801b552:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b556:	e853 3f00 	ldrex	r3, [r3]
 801b55a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801b55c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b55e:	f043 0301 	orr.w	r3, r3, #1
 801b562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	3308      	adds	r3, #8
 801b56c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801b570:	673a      	str	r2, [r7, #112]	; 0x70
 801b572:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b574:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801b576:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b578:	e841 2300 	strex	r3, r2, [r1]
 801b57c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801b57e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b580:	2b00      	cmp	r3, #0
 801b582:	d1e3      	bne.n	801b54c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801b58c:	d14f      	bne.n	801b62e <UART_Start_Receive_IT+0x196>
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801b594:	88fa      	ldrh	r2, [r7, #6]
 801b596:	429a      	cmp	r2, r3
 801b598:	d349      	bcc.n	801b62e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	689b      	ldr	r3, [r3, #8]
 801b59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b5a2:	d107      	bne.n	801b5b4 <UART_Start_Receive_IT+0x11c>
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	691b      	ldr	r3, [r3, #16]
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d103      	bne.n	801b5b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801b5ac:	68fb      	ldr	r3, [r7, #12]
 801b5ae:	4a47      	ldr	r2, [pc, #284]	; (801b6cc <UART_Start_Receive_IT+0x234>)
 801b5b0:	675a      	str	r2, [r3, #116]	; 0x74
 801b5b2:	e002      	b.n	801b5ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	4a46      	ldr	r2, [pc, #280]	; (801b6d0 <UART_Start_Receive_IT+0x238>)
 801b5b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	691b      	ldr	r3, [r3, #16]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d01a      	beq.n	801b5f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b5ca:	e853 3f00 	ldrex	r3, [r3]
 801b5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801b5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b5d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b5d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	461a      	mov	r2, r3
 801b5e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801b5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b5e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b5e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b5ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801b5ec:	e841 2300 	strex	r3, r2, [r1]
 801b5f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801b5f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d1e4      	bne.n	801b5c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	3308      	adds	r3, #8
 801b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b602:	e853 3f00 	ldrex	r3, [r3]
 801b606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b60a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b60e:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	3308      	adds	r3, #8
 801b616:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b618:	64ba      	str	r2, [r7, #72]	; 0x48
 801b61a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b61c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801b61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b620:	e841 2300 	strex	r3, r2, [r1]
 801b624:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801b626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d1e5      	bne.n	801b5f8 <UART_Start_Receive_IT+0x160>
 801b62c:	e046      	b.n	801b6bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	689b      	ldr	r3, [r3, #8]
 801b632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b636:	d107      	bne.n	801b648 <UART_Start_Receive_IT+0x1b0>
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	691b      	ldr	r3, [r3, #16]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d103      	bne.n	801b648 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	4a24      	ldr	r2, [pc, #144]	; (801b6d4 <UART_Start_Receive_IT+0x23c>)
 801b644:	675a      	str	r2, [r3, #116]	; 0x74
 801b646:	e002      	b.n	801b64e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	4a23      	ldr	r2, [pc, #140]	; (801b6d8 <UART_Start_Receive_IT+0x240>)
 801b64c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	691b      	ldr	r3, [r3, #16]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d019      	beq.n	801b68a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b65e:	e853 3f00 	ldrex	r3, [r3]
 801b662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b666:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801b66a:	677b      	str	r3, [r7, #116]	; 0x74
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	461a      	mov	r2, r3
 801b672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b674:	637b      	str	r3, [r7, #52]	; 0x34
 801b676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b67c:	e841 2300 	strex	r3, r2, [r1]
 801b680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b684:	2b00      	cmp	r3, #0
 801b686:	d1e6      	bne.n	801b656 <UART_Start_Receive_IT+0x1be>
 801b688:	e018      	b.n	801b6bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b690:	697b      	ldr	r3, [r7, #20]
 801b692:	e853 3f00 	ldrex	r3, [r3]
 801b696:	613b      	str	r3, [r7, #16]
   return(result);
 801b698:	693b      	ldr	r3, [r7, #16]
 801b69a:	f043 0320 	orr.w	r3, r3, #32
 801b69e:	67bb      	str	r3, [r7, #120]	; 0x78
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	461a      	mov	r2, r3
 801b6a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b6a8:	623b      	str	r3, [r7, #32]
 801b6aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6ac:	69f9      	ldr	r1, [r7, #28]
 801b6ae:	6a3a      	ldr	r2, [r7, #32]
 801b6b0:	e841 2300 	strex	r3, r2, [r1]
 801b6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 801b6b6:	69bb      	ldr	r3, [r7, #24]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d1e6      	bne.n	801b68a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801b6bc:	2300      	movs	r3, #0
}
 801b6be:	4618      	mov	r0, r3
 801b6c0:	378c      	adds	r7, #140	; 0x8c
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c8:	4770      	bx	lr
 801b6ca:	bf00      	nop
 801b6cc:	0801befd 	.word	0x0801befd
 801b6d0:	0801bb9d 	.word	0x0801bb9d
 801b6d4:	0801b9e5 	.word	0x0801b9e5
 801b6d8:	0801b82d 	.word	0x0801b82d

0801b6dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b6dc:	b480      	push	{r7}
 801b6de:	b095      	sub	sp, #84	; 0x54
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6ec:	e853 3f00 	ldrex	r3, [r3]
 801b6f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b6f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	461a      	mov	r2, r3
 801b700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b702:	643b      	str	r3, [r7, #64]	; 0x40
 801b704:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801b70a:	e841 2300 	strex	r3, r2, [r1]
 801b70e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b712:	2b00      	cmp	r3, #0
 801b714:	d1e6      	bne.n	801b6e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	3308      	adds	r3, #8
 801b71c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b71e:	6a3b      	ldr	r3, [r7, #32]
 801b720:	e853 3f00 	ldrex	r3, [r3]
 801b724:	61fb      	str	r3, [r7, #28]
   return(result);
 801b726:	69fb      	ldr	r3, [r7, #28]
 801b728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b72c:	f023 0301 	bic.w	r3, r3, #1
 801b730:	64bb      	str	r3, [r7, #72]	; 0x48
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	3308      	adds	r3, #8
 801b738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b73a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b73c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b73e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b742:	e841 2300 	strex	r3, r2, [r1]
 801b746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d1e3      	bne.n	801b716 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b752:	2b01      	cmp	r3, #1
 801b754:	d118      	bne.n	801b788 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b75c:	68fb      	ldr	r3, [r7, #12]
 801b75e:	e853 3f00 	ldrex	r3, [r3]
 801b762:	60bb      	str	r3, [r7, #8]
   return(result);
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	f023 0310 	bic.w	r3, r3, #16
 801b76a:	647b      	str	r3, [r7, #68]	; 0x44
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	461a      	mov	r2, r3
 801b772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b774:	61bb      	str	r3, [r7, #24]
 801b776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b778:	6979      	ldr	r1, [r7, #20]
 801b77a:	69ba      	ldr	r2, [r7, #24]
 801b77c:	e841 2300 	strex	r3, r2, [r1]
 801b780:	613b      	str	r3, [r7, #16]
   return(result);
 801b782:	693b      	ldr	r3, [r7, #16]
 801b784:	2b00      	cmp	r3, #0
 801b786:	d1e6      	bne.n	801b756 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	2220      	movs	r2, #32
 801b78c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	2200      	movs	r2, #0
 801b794:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	2200      	movs	r2, #0
 801b79a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801b79c:	bf00      	nop
 801b79e:	3754      	adds	r7, #84	; 0x54
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a6:	4770      	bx	lr

0801b7a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b084      	sub	sp, #16
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	2200      	movs	r2, #0
 801b7ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801b7c6:	68f8      	ldr	r0, [r7, #12]
 801b7c8:	f7ff f99c 	bl	801ab04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b7cc:	bf00      	nop
 801b7ce:	3710      	adds	r7, #16
 801b7d0:	46bd      	mov	sp, r7
 801b7d2:	bd80      	pop	{r7, pc}

0801b7d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b088      	sub	sp, #32
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	681b      	ldr	r3, [r3, #0]
 801b7e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7e2:	68fb      	ldr	r3, [r7, #12]
 801b7e4:	e853 3f00 	ldrex	r3, [r3]
 801b7e8:	60bb      	str	r3, [r7, #8]
   return(result);
 801b7ea:	68bb      	ldr	r3, [r7, #8]
 801b7ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b7f0:	61fb      	str	r3, [r7, #28]
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	461a      	mov	r2, r3
 801b7f8:	69fb      	ldr	r3, [r7, #28]
 801b7fa:	61bb      	str	r3, [r7, #24]
 801b7fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b7fe:	6979      	ldr	r1, [r7, #20]
 801b800:	69ba      	ldr	r2, [r7, #24]
 801b802:	e841 2300 	strex	r3, r2, [r1]
 801b806:	613b      	str	r3, [r7, #16]
   return(result);
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d1e6      	bne.n	801b7dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	2220      	movs	r2, #32
 801b812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	2200      	movs	r2, #0
 801b81a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801b81c:	6878      	ldr	r0, [r7, #4]
 801b81e:	f7ff f967 	bl	801aaf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b822:	bf00      	nop
 801b824:	3720      	adds	r7, #32
 801b826:	46bd      	mov	sp, r7
 801b828:	bd80      	pop	{r7, pc}
	...

0801b82c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b82c:	b580      	push	{r7, lr}
 801b82e:	b09c      	sub	sp, #112	; 0x70
 801b830:	af00      	add	r7, sp, #0
 801b832:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b83a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b844:	2b22      	cmp	r3, #34	; 0x22
 801b846:	f040 80be 	bne.w	801b9c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b850:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b854:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801b858:	b2d9      	uxtb	r1, r3
 801b85a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801b85e:	b2da      	uxtb	r2, r3
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b864:	400a      	ands	r2, r1
 801b866:	b2d2      	uxtb	r2, r2
 801b868:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b86e:	1c5a      	adds	r2, r3, #1
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801b87a:	b29b      	uxth	r3, r3
 801b87c:	3b01      	subs	r3, #1
 801b87e:	b29a      	uxth	r2, r3
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801b88c:	b29b      	uxth	r3, r3
 801b88e:	2b00      	cmp	r3, #0
 801b890:	f040 80a1 	bne.w	801b9d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b89c:	e853 3f00 	ldrex	r3, [r3]
 801b8a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b8a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b8a8:	66bb      	str	r3, [r7, #104]	; 0x68
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	461a      	mov	r2, r3
 801b8b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b8b2:	65bb      	str	r3, [r7, #88]	; 0x58
 801b8b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b8b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b8b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b8ba:	e841 2300 	strex	r3, r2, [r1]
 801b8be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d1e6      	bne.n	801b894 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	3308      	adds	r3, #8
 801b8cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8d0:	e853 3f00 	ldrex	r3, [r3]
 801b8d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8d8:	f023 0301 	bic.w	r3, r3, #1
 801b8dc:	667b      	str	r3, [r7, #100]	; 0x64
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	3308      	adds	r3, #8
 801b8e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b8e6:	647a      	str	r2, [r7, #68]	; 0x44
 801b8e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b8ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b8ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b8ee:	e841 2300 	strex	r3, r2, [r1]
 801b8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d1e5      	bne.n	801b8c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	2220      	movs	r2, #32
 801b8fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	2200      	movs	r2, #0
 801b906:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	2200      	movs	r2, #0
 801b90c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	681b      	ldr	r3, [r3, #0]
 801b912:	4a33      	ldr	r2, [pc, #204]	; (801b9e0 <UART_RxISR_8BIT+0x1b4>)
 801b914:	4293      	cmp	r3, r2
 801b916:	d01f      	beq.n	801b958 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	685b      	ldr	r3, [r3, #4]
 801b91e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b922:	2b00      	cmp	r3, #0
 801b924:	d018      	beq.n	801b958 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b92e:	e853 3f00 	ldrex	r3, [r3]
 801b932:	623b      	str	r3, [r7, #32]
   return(result);
 801b934:	6a3b      	ldr	r3, [r7, #32]
 801b936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801b93a:	663b      	str	r3, [r7, #96]	; 0x60
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	461a      	mov	r2, r3
 801b942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b944:	633b      	str	r3, [r7, #48]	; 0x30
 801b946:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b94a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b94c:	e841 2300 	strex	r3, r2, [r1]
 801b950:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b954:	2b00      	cmp	r3, #0
 801b956:	d1e6      	bne.n	801b926 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b95c:	2b01      	cmp	r3, #1
 801b95e:	d12e      	bne.n	801b9be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2200      	movs	r2, #0
 801b964:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b96c:	693b      	ldr	r3, [r7, #16]
 801b96e:	e853 3f00 	ldrex	r3, [r3]
 801b972:	60fb      	str	r3, [r7, #12]
   return(result);
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	f023 0310 	bic.w	r3, r3, #16
 801b97a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	461a      	mov	r2, r3
 801b982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b984:	61fb      	str	r3, [r7, #28]
 801b986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b988:	69b9      	ldr	r1, [r7, #24]
 801b98a:	69fa      	ldr	r2, [r7, #28]
 801b98c:	e841 2300 	strex	r3, r2, [r1]
 801b990:	617b      	str	r3, [r7, #20]
   return(result);
 801b992:	697b      	ldr	r3, [r7, #20]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d1e6      	bne.n	801b966 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	69db      	ldr	r3, [r3, #28]
 801b99e:	f003 0310 	and.w	r3, r3, #16
 801b9a2:	2b10      	cmp	r3, #16
 801b9a4:	d103      	bne.n	801b9ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	2210      	movs	r2, #16
 801b9ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801b9b4:	4619      	mov	r1, r3
 801b9b6:	6878      	ldr	r0, [r7, #4]
 801b9b8:	f7ff f8ae 	bl	801ab18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b9bc:	e00b      	b.n	801b9d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801b9be:	6878      	ldr	r0, [r7, #4]
 801b9c0:	f7e7 fa30 	bl	8002e24 <HAL_UART_RxCpltCallback>
}
 801b9c4:	e007      	b.n	801b9d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	699a      	ldr	r2, [r3, #24]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	f042 0208 	orr.w	r2, r2, #8
 801b9d4:	619a      	str	r2, [r3, #24]
}
 801b9d6:	bf00      	nop
 801b9d8:	3770      	adds	r7, #112	; 0x70
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	bd80      	pop	{r7, pc}
 801b9de:	bf00      	nop
 801b9e0:	40008000 	.word	0x40008000

0801b9e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b9e4:	b580      	push	{r7, lr}
 801b9e6:	b09c      	sub	sp, #112	; 0x70
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b9f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b9fc:	2b22      	cmp	r3, #34	; 0x22
 801b9fe:	f040 80be 	bne.w	801bb7e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba10:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801ba12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801ba16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801ba1a:	4013      	ands	r3, r2
 801ba1c:	b29a      	uxth	r2, r3
 801ba1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ba20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ba26:	1c9a      	adds	r2, r3, #2
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ba32:	b29b      	uxth	r3, r3
 801ba34:	3b01      	subs	r3, #1
 801ba36:	b29a      	uxth	r2, r3
 801ba38:	687b      	ldr	r3, [r7, #4]
 801ba3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	f040 80a1 	bne.w	801bb8e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ba54:	e853 3f00 	ldrex	r3, [r3]
 801ba58:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801ba5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ba60:	667b      	str	r3, [r7, #100]	; 0x64
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	461a      	mov	r2, r3
 801ba68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ba6a:	657b      	str	r3, [r7, #84]	; 0x54
 801ba6c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801ba70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ba72:	e841 2300 	strex	r3, r2, [r1]
 801ba76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ba78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d1e6      	bne.n	801ba4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	3308      	adds	r3, #8
 801ba84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba88:	e853 3f00 	ldrex	r3, [r3]
 801ba8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801ba8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ba90:	f023 0301 	bic.w	r3, r3, #1
 801ba94:	663b      	str	r3, [r7, #96]	; 0x60
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	3308      	adds	r3, #8
 801ba9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ba9e:	643a      	str	r2, [r7, #64]	; 0x40
 801baa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801baa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801baa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801baa6:	e841 2300 	strex	r3, r2, [r1]
 801baaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801baac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d1e5      	bne.n	801ba7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	2220      	movs	r2, #32
 801bab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2200      	movs	r2, #0
 801babe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	2200      	movs	r2, #0
 801bac4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	4a33      	ldr	r2, [pc, #204]	; (801bb98 <UART_RxISR_16BIT+0x1b4>)
 801bacc:	4293      	cmp	r3, r2
 801bace:	d01f      	beq.n	801bb10 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bada:	2b00      	cmp	r3, #0
 801badc:	d018      	beq.n	801bb10 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bae4:	6a3b      	ldr	r3, [r7, #32]
 801bae6:	e853 3f00 	ldrex	r3, [r3]
 801baea:	61fb      	str	r3, [r7, #28]
   return(result);
 801baec:	69fb      	ldr	r3, [r7, #28]
 801baee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801baf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	461a      	mov	r2, r3
 801bafa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bafc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bafe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bb02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bb04:	e841 2300 	strex	r3, r2, [r1]
 801bb08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d1e6      	bne.n	801bade <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bb14:	2b01      	cmp	r3, #1
 801bb16:	d12e      	bne.n	801bb76 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bb18:	687b      	ldr	r3, [r7, #4]
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	e853 3f00 	ldrex	r3, [r3]
 801bb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	f023 0310 	bic.w	r3, r3, #16
 801bb32:	65bb      	str	r3, [r7, #88]	; 0x58
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	461a      	mov	r2, r3
 801bb3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bb3c:	61bb      	str	r3, [r7, #24]
 801bb3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb40:	6979      	ldr	r1, [r7, #20]
 801bb42:	69ba      	ldr	r2, [r7, #24]
 801bb44:	e841 2300 	strex	r3, r2, [r1]
 801bb48:	613b      	str	r3, [r7, #16]
   return(result);
 801bb4a:	693b      	ldr	r3, [r7, #16]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d1e6      	bne.n	801bb1e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	69db      	ldr	r3, [r3, #28]
 801bb56:	f003 0310 	and.w	r3, r3, #16
 801bb5a:	2b10      	cmp	r3, #16
 801bb5c:	d103      	bne.n	801bb66 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	2210      	movs	r2, #16
 801bb64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801bb6c:	4619      	mov	r1, r3
 801bb6e:	6878      	ldr	r0, [r7, #4]
 801bb70:	f7fe ffd2 	bl	801ab18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801bb74:	e00b      	b.n	801bb8e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801bb76:	6878      	ldr	r0, [r7, #4]
 801bb78:	f7e7 f954 	bl	8002e24 <HAL_UART_RxCpltCallback>
}
 801bb7c:	e007      	b.n	801bb8e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	699a      	ldr	r2, [r3, #24]
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	f042 0208 	orr.w	r2, r2, #8
 801bb8c:	619a      	str	r2, [r3, #24]
}
 801bb8e:	bf00      	nop
 801bb90:	3770      	adds	r7, #112	; 0x70
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	bf00      	nop
 801bb98:	40008000 	.word	0x40008000

0801bb9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801bb9c:	b580      	push	{r7, lr}
 801bb9e:	b0ac      	sub	sp, #176	; 0xb0
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bbaa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	69db      	ldr	r3, [r3, #28]
 801bbb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	689b      	ldr	r3, [r3, #8]
 801bbc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bbd2:	2b22      	cmp	r3, #34	; 0x22
 801bbd4:	f040 8182 	bne.w	801bedc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801bbde:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801bbe2:	e125      	b.n	801be30 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbea:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801bbee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801bbf2:	b2d9      	uxtb	r1, r3
 801bbf4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801bbf8:	b2da      	uxtb	r2, r3
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bbfe:	400a      	ands	r2, r1
 801bc00:	b2d2      	uxtb	r2, r2
 801bc02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bc08:	1c5a      	adds	r2, r3, #1
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bc14:	b29b      	uxth	r3, r3
 801bc16:	3b01      	subs	r3, #1
 801bc18:	b29a      	uxth	r2, r3
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	69db      	ldr	r3, [r3, #28]
 801bc26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801bc2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bc2e:	f003 0307 	and.w	r3, r3, #7
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d053      	beq.n	801bcde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801bc36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bc3a:	f003 0301 	and.w	r3, r3, #1
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d011      	beq.n	801bc66 <UART_RxISR_8BIT_FIFOEN+0xca>
 801bc42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801bc46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d00b      	beq.n	801bc66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	2201      	movs	r2, #1
 801bc54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc5c:	f043 0201 	orr.w	r2, r3, #1
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801bc66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bc6a:	f003 0302 	and.w	r3, r3, #2
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d011      	beq.n	801bc96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801bc72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bc76:	f003 0301 	and.w	r3, r3, #1
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d00b      	beq.n	801bc96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	2202      	movs	r2, #2
 801bc84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc8c:	f043 0204 	orr.w	r2, r3, #4
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801bc96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bc9a:	f003 0304 	and.w	r3, r3, #4
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d011      	beq.n	801bcc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801bca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bca6:	f003 0301 	and.w	r3, r3, #1
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d00b      	beq.n	801bcc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	2204      	movs	r2, #4
 801bcb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcbc:	f043 0202 	orr.w	r2, r3, #2
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d006      	beq.n	801bcde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f7fe ff17 	bl	801ab04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	2200      	movs	r2, #0
 801bcda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bce4:	b29b      	uxth	r3, r3
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	f040 80a2 	bne.w	801be30 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bcf4:	e853 3f00 	ldrex	r3, [r3]
 801bcf8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801bcfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bcfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bd00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	461a      	mov	r2, r3
 801bd0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bd0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 801bd10:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd12:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801bd14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801bd16:	e841 2300 	strex	r3, r2, [r1]
 801bd1a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801bd1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d1e4      	bne.n	801bcec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	3308      	adds	r3, #8
 801bd28:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd2c:	e853 3f00 	ldrex	r3, [r3]
 801bd30:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801bd32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bd34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bd38:	f023 0301 	bic.w	r3, r3, #1
 801bd3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	3308      	adds	r3, #8
 801bd46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bd4a:	66ba      	str	r2, [r7, #104]	; 0x68
 801bd4c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd4e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801bd50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bd52:	e841 2300 	strex	r3, r2, [r1]
 801bd56:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801bd58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d1e1      	bne.n	801bd22 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	2220      	movs	r2, #32
 801bd62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	2200      	movs	r2, #0
 801bd6a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2200      	movs	r2, #0
 801bd70:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	4a5f      	ldr	r2, [pc, #380]	; (801bef4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801bd78:	4293      	cmp	r3, r2
 801bd7a:	d021      	beq.n	801bdc0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d01a      	beq.n	801bdc0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd92:	e853 3f00 	ldrex	r3, [r3]
 801bd96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801bd98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bd9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801bd9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	461a      	mov	r2, r3
 801bda8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bdac:	657b      	str	r3, [r7, #84]	; 0x54
 801bdae:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801bdb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bdb4:	e841 2300 	strex	r3, r2, [r1]
 801bdb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801bdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d1e4      	bne.n	801bd8a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bdc4:	2b01      	cmp	r3, #1
 801bdc6:	d130      	bne.n	801be2a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	2200      	movs	r2, #0
 801bdcc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdd6:	e853 3f00 	ldrex	r3, [r3]
 801bdda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801bddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdde:	f023 0310 	bic.w	r3, r3, #16
 801bde2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	461a      	mov	r2, r3
 801bdec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bdf0:	643b      	str	r3, [r7, #64]	; 0x40
 801bdf2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801bdf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801bdf8:	e841 2300 	strex	r3, r2, [r1]
 801bdfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be00:	2b00      	cmp	r3, #0
 801be02:	d1e4      	bne.n	801bdce <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	681b      	ldr	r3, [r3, #0]
 801be08:	69db      	ldr	r3, [r3, #28]
 801be0a:	f003 0310 	and.w	r3, r3, #16
 801be0e:	2b10      	cmp	r3, #16
 801be10:	d103      	bne.n	801be1a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	2210      	movs	r2, #16
 801be18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801be20:	4619      	mov	r1, r3
 801be22:	6878      	ldr	r0, [r7, #4]
 801be24:	f7fe fe78 	bl	801ab18 <HAL_UARTEx_RxEventCallback>
 801be28:	e002      	b.n	801be30 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801be2a:	6878      	ldr	r0, [r7, #4]
 801be2c:	f7e6 fffa 	bl	8002e24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801be30:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801be34:	2b00      	cmp	r3, #0
 801be36:	d006      	beq.n	801be46 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801be38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801be3c:	f003 0320 	and.w	r3, r3, #32
 801be40:	2b00      	cmp	r3, #0
 801be42:	f47f aecf 	bne.w	801bbe4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801be4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801be50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801be54:	2b00      	cmp	r3, #0
 801be56:	d049      	beq.n	801beec <UART_RxISR_8BIT_FIFOEN+0x350>
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801be5e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801be62:	429a      	cmp	r2, r3
 801be64:	d242      	bcs.n	801beec <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	3308      	adds	r3, #8
 801be6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be6e:	6a3b      	ldr	r3, [r7, #32]
 801be70:	e853 3f00 	ldrex	r3, [r3]
 801be74:	61fb      	str	r3, [r7, #28]
   return(result);
 801be76:	69fb      	ldr	r3, [r7, #28]
 801be78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801be7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	3308      	adds	r3, #8
 801be86:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801be8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801be8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801be90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be92:	e841 2300 	strex	r3, r2, [r1]
 801be96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d1e3      	bne.n	801be66 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	4a15      	ldr	r2, [pc, #84]	; (801bef8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801bea2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	e853 3f00 	ldrex	r3, [r3]
 801beb0:	60bb      	str	r3, [r7, #8]
   return(result);
 801beb2:	68bb      	ldr	r3, [r7, #8]
 801beb4:	f043 0320 	orr.w	r3, r3, #32
 801beb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	461a      	mov	r2, r3
 801bec2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bec6:	61bb      	str	r3, [r7, #24]
 801bec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801beca:	6979      	ldr	r1, [r7, #20]
 801becc:	69ba      	ldr	r2, [r7, #24]
 801bece:	e841 2300 	strex	r3, r2, [r1]
 801bed2:	613b      	str	r3, [r7, #16]
   return(result);
 801bed4:	693b      	ldr	r3, [r7, #16]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d1e4      	bne.n	801bea4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801beda:	e007      	b.n	801beec <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	699a      	ldr	r2, [r3, #24]
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	681b      	ldr	r3, [r3, #0]
 801bee6:	f042 0208 	orr.w	r2, r2, #8
 801beea:	619a      	str	r2, [r3, #24]
}
 801beec:	bf00      	nop
 801beee:	37b0      	adds	r7, #176	; 0xb0
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	40008000 	.word	0x40008000
 801bef8:	0801b82d 	.word	0x0801b82d

0801befc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b0ae      	sub	sp, #184	; 0xb8
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bf0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	69db      	ldr	r3, [r3, #28]
 801bf14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	689b      	ldr	r3, [r3, #8]
 801bf28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801bf32:	2b22      	cmp	r3, #34	; 0x22
 801bf34:	f040 8186 	bne.w	801c244 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801bf3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801bf42:	e129      	b.n	801c198 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801bf56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801bf5a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801bf5e:	4013      	ands	r3, r2
 801bf60:	b29a      	uxth	r2, r3
 801bf62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bf66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf6c:	1c9a      	adds	r2, r3, #2
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bf78:	b29b      	uxth	r3, r3
 801bf7a:	3b01      	subs	r3, #1
 801bf7c:	b29a      	uxth	r2, r3
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	69db      	ldr	r3, [r3, #28]
 801bf8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801bf8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bf92:	f003 0307 	and.w	r3, r3, #7
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d053      	beq.n	801c042 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801bf9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bf9e:	f003 0301 	and.w	r3, r3, #1
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d011      	beq.n	801bfca <UART_RxISR_16BIT_FIFOEN+0xce>
 801bfa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bfaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d00b      	beq.n	801bfca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	2201      	movs	r2, #1
 801bfb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801bfba:	687b      	ldr	r3, [r7, #4]
 801bfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bfc0:	f043 0201 	orr.w	r2, r3, #1
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801bfca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bfce:	f003 0302 	and.w	r3, r3, #2
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d011      	beq.n	801bffa <UART_RxISR_16BIT_FIFOEN+0xfe>
 801bfd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801bfda:	f003 0301 	and.w	r3, r3, #1
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d00b      	beq.n	801bffa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	2202      	movs	r2, #2
 801bfe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bff0:	f043 0204 	orr.w	r2, r3, #4
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801bffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801bffe:	f003 0304 	and.w	r3, r3, #4
 801c002:	2b00      	cmp	r3, #0
 801c004:	d011      	beq.n	801c02a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801c006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801c00a:	f003 0301 	and.w	r3, r3, #1
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d00b      	beq.n	801c02a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	2204      	movs	r2, #4
 801c018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c020:	f043 0202 	orr.w	r2, r3, #2
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c030:	2b00      	cmp	r3, #0
 801c032:	d006      	beq.n	801c042 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c034:	6878      	ldr	r0, [r7, #4]
 801c036:	f7fe fd65 	bl	801ab04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	2200      	movs	r2, #0
 801c03e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c048:	b29b      	uxth	r3, r3
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	f040 80a4 	bne.w	801c198 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c058:	e853 3f00 	ldrex	r3, [r3]
 801c05c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c05e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	461a      	mov	r2, r3
 801c06e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c076:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c078:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c07a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c07e:	e841 2300 	strex	r3, r2, [r1]
 801c082:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c086:	2b00      	cmp	r3, #0
 801c088:	d1e2      	bne.n	801c050 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	3308      	adds	r3, #8
 801c090:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c094:	e853 3f00 	ldrex	r3, [r3]
 801c098:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c09a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c09c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c0a0:	f023 0301 	bic.w	r3, r3, #1
 801c0a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	3308      	adds	r3, #8
 801c0ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801c0b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c0b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c0b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c0ba:	e841 2300 	strex	r3, r2, [r1]
 801c0be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c0c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d1e1      	bne.n	801c08a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	2220      	movs	r2, #32
 801c0ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c0da:	687b      	ldr	r3, [r7, #4]
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	4a5f      	ldr	r2, [pc, #380]	; (801c25c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d021      	beq.n	801c128 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	685b      	ldr	r3, [r3, #4]
 801c0ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d01a      	beq.n	801c128 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c0fa:	e853 3f00 	ldrex	r3, [r3]
 801c0fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801c106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	461a      	mov	r2, r3
 801c110:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801c114:	65bb      	str	r3, [r7, #88]	; 0x58
 801c116:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c11a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c11c:	e841 2300 	strex	r3, r2, [r1]
 801c120:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c124:	2b00      	cmp	r3, #0
 801c126:	d1e4      	bne.n	801c0f2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c12c:	2b01      	cmp	r3, #1
 801c12e:	d130      	bne.n	801c192 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	2200      	movs	r2, #0
 801c134:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13e:	e853 3f00 	ldrex	r3, [r3]
 801c142:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c146:	f023 0310 	bic.w	r3, r3, #16
 801c14a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	461a      	mov	r2, r3
 801c154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801c158:	647b      	str	r3, [r7, #68]	; 0x44
 801c15a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c15c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c15e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c160:	e841 2300 	strex	r3, r2, [r1]
 801c164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d1e4      	bne.n	801c136 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	69db      	ldr	r3, [r3, #28]
 801c172:	f003 0310 	and.w	r3, r3, #16
 801c176:	2b10      	cmp	r3, #16
 801c178:	d103      	bne.n	801c182 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	2210      	movs	r2, #16
 801c180:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c188:	4619      	mov	r1, r3
 801c18a:	6878      	ldr	r0, [r7, #4]
 801c18c:	f7fe fcc4 	bl	801ab18 <HAL_UARTEx_RxEventCallback>
 801c190:	e002      	b.n	801c198 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801c192:	6878      	ldr	r0, [r7, #4]
 801c194:	f7e6 fe46 	bl	8002e24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801c198:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d006      	beq.n	801c1ae <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801c1a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801c1a4:	f003 0320 	and.w	r3, r3, #32
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	f47f aecb 	bne.w	801bf44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801c1b4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801c1b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d049      	beq.n	801c254 <UART_RxISR_16BIT_FIFOEN+0x358>
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c1c6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d242      	bcs.n	801c254 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	3308      	adds	r3, #8
 801c1d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1d8:	e853 3f00 	ldrex	r3, [r3]
 801c1dc:	623b      	str	r3, [r7, #32]
   return(result);
 801c1de:	6a3b      	ldr	r3, [r7, #32]
 801c1e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c1e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	3308      	adds	r3, #8
 801c1ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801c1f2:	633a      	str	r2, [r7, #48]	; 0x30
 801c1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c1f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1fa:	e841 2300 	strex	r3, r2, [r1]
 801c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c202:	2b00      	cmp	r3, #0
 801c204:	d1e3      	bne.n	801c1ce <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	4a15      	ldr	r2, [pc, #84]	; (801c260 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801c20a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c212:	693b      	ldr	r3, [r7, #16]
 801c214:	e853 3f00 	ldrex	r3, [r3]
 801c218:	60fb      	str	r3, [r7, #12]
   return(result);
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	f043 0320 	orr.w	r3, r3, #32
 801c220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	461a      	mov	r2, r3
 801c22a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c22e:	61fb      	str	r3, [r7, #28]
 801c230:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c232:	69b9      	ldr	r1, [r7, #24]
 801c234:	69fa      	ldr	r2, [r7, #28]
 801c236:	e841 2300 	strex	r3, r2, [r1]
 801c23a:	617b      	str	r3, [r7, #20]
   return(result);
 801c23c:	697b      	ldr	r3, [r7, #20]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d1e4      	bne.n	801c20c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c242:	e007      	b.n	801c254 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	699a      	ldr	r2, [r3, #24]
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	f042 0208 	orr.w	r2, r2, #8
 801c252:	619a      	str	r2, [r3, #24]
}
 801c254:	bf00      	nop
 801c256:	37b8      	adds	r7, #184	; 0xb8
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd80      	pop	{r7, pc}
 801c25c:	40008000 	.word	0x40008000
 801c260:	0801b9e5 	.word	0x0801b9e5

0801c264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c264:	b480      	push	{r7}
 801c266:	b083      	sub	sp, #12
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c26c:	bf00      	nop
 801c26e:	370c      	adds	r7, #12
 801c270:	46bd      	mov	sp, r7
 801c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c276:	4770      	bx	lr

0801c278 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801c278:	b480      	push	{r7}
 801c27a:	b083      	sub	sp, #12
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801c280:	bf00      	nop
 801c282:	370c      	adds	r7, #12
 801c284:	46bd      	mov	sp, r7
 801c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28a:	4770      	bx	lr

0801c28c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801c28c:	b480      	push	{r7}
 801c28e:	b083      	sub	sp, #12
 801c290:	af00      	add	r7, sp, #0
 801c292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801c294:	bf00      	nop
 801c296:	370c      	adds	r7, #12
 801c298:	46bd      	mov	sp, r7
 801c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c29e:	4770      	bx	lr

0801c2a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801c2a0:	b480      	push	{r7}
 801c2a2:	b085      	sub	sp, #20
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801c2ae:	2b01      	cmp	r3, #1
 801c2b0:	d101      	bne.n	801c2b6 <HAL_UARTEx_DisableFifoMode+0x16>
 801c2b2:	2302      	movs	r3, #2
 801c2b4:	e027      	b.n	801c306 <HAL_UARTEx_DisableFifoMode+0x66>
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	2201      	movs	r2, #1
 801c2ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	2224      	movs	r2, #36	; 0x24
 801c2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	681a      	ldr	r2, [r3, #0]
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	f022 0201 	bic.w	r2, r2, #1
 801c2dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801c2e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	68fa      	ldr	r2, [r7, #12]
 801c2f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	2220      	movs	r2, #32
 801c2f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	2200      	movs	r2, #0
 801c300:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801c304:	2300      	movs	r3, #0
}
 801c306:	4618      	mov	r0, r3
 801c308:	3714      	adds	r7, #20
 801c30a:	46bd      	mov	sp, r7
 801c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c310:	4770      	bx	lr

0801c312 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801c312:	b580      	push	{r7, lr}
 801c314:	b084      	sub	sp, #16
 801c316:	af00      	add	r7, sp, #0
 801c318:	6078      	str	r0, [r7, #4]
 801c31a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801c322:	2b01      	cmp	r3, #1
 801c324:	d101      	bne.n	801c32a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801c326:	2302      	movs	r3, #2
 801c328:	e02d      	b.n	801c386 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	2201      	movs	r2, #1
 801c32e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	2224      	movs	r2, #36	; 0x24
 801c336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	681a      	ldr	r2, [r3, #0]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	f022 0201 	bic.w	r2, r2, #1
 801c350:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	689b      	ldr	r3, [r3, #8]
 801c358:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	683a      	ldr	r2, [r7, #0]
 801c362:	430a      	orrs	r2, r1
 801c364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801c366:	6878      	ldr	r0, [r7, #4]
 801c368:	f000 f850 	bl	801c40c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	68fa      	ldr	r2, [r7, #12]
 801c372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	2220      	movs	r2, #32
 801c378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	2200      	movs	r2, #0
 801c380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801c384:	2300      	movs	r3, #0
}
 801c386:	4618      	mov	r0, r3
 801c388:	3710      	adds	r7, #16
 801c38a:	46bd      	mov	sp, r7
 801c38c:	bd80      	pop	{r7, pc}

0801c38e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801c38e:	b580      	push	{r7, lr}
 801c390:	b084      	sub	sp, #16
 801c392:	af00      	add	r7, sp, #0
 801c394:	6078      	str	r0, [r7, #4]
 801c396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801c39e:	2b01      	cmp	r3, #1
 801c3a0:	d101      	bne.n	801c3a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801c3a2:	2302      	movs	r3, #2
 801c3a4:	e02d      	b.n	801c402 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	2201      	movs	r2, #1
 801c3aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	2224      	movs	r2, #36	; 0x24
 801c3b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	681a      	ldr	r2, [r3, #0]
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f022 0201 	bic.w	r2, r2, #1
 801c3cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	689b      	ldr	r3, [r3, #8]
 801c3d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	683a      	ldr	r2, [r7, #0]
 801c3de:	430a      	orrs	r2, r1
 801c3e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801c3e2:	6878      	ldr	r0, [r7, #4]
 801c3e4:	f000 f812 	bl	801c40c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	68fa      	ldr	r2, [r7, #12]
 801c3ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	2220      	movs	r2, #32
 801c3f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801c400:	2300      	movs	r3, #0
}
 801c402:	4618      	mov	r0, r3
 801c404:	3710      	adds	r7, #16
 801c406:	46bd      	mov	sp, r7
 801c408:	bd80      	pop	{r7, pc}
	...

0801c40c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801c40c:	b480      	push	{r7}
 801c40e:	b085      	sub	sp, #20
 801c410:	af00      	add	r7, sp, #0
 801c412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d108      	bne.n	801c42e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	2201      	movs	r2, #1
 801c420:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	2201      	movs	r2, #1
 801c428:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801c42c:	e031      	b.n	801c492 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801c42e:	2308      	movs	r3, #8
 801c430:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801c432:	2308      	movs	r3, #8
 801c434:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	689b      	ldr	r3, [r3, #8]
 801c43c:	0e5b      	lsrs	r3, r3, #25
 801c43e:	b2db      	uxtb	r3, r3
 801c440:	f003 0307 	and.w	r3, r3, #7
 801c444:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	689b      	ldr	r3, [r3, #8]
 801c44c:	0f5b      	lsrs	r3, r3, #29
 801c44e:	b2db      	uxtb	r3, r3
 801c450:	f003 0307 	and.w	r3, r3, #7
 801c454:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801c456:	7bbb      	ldrb	r3, [r7, #14]
 801c458:	7b3a      	ldrb	r2, [r7, #12]
 801c45a:	4911      	ldr	r1, [pc, #68]	; (801c4a0 <UARTEx_SetNbDataToProcess+0x94>)
 801c45c:	5c8a      	ldrb	r2, [r1, r2]
 801c45e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801c462:	7b3a      	ldrb	r2, [r7, #12]
 801c464:	490f      	ldr	r1, [pc, #60]	; (801c4a4 <UARTEx_SetNbDataToProcess+0x98>)
 801c466:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801c468:	fb93 f3f2 	sdiv	r3, r3, r2
 801c46c:	b29a      	uxth	r2, r3
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801c474:	7bfb      	ldrb	r3, [r7, #15]
 801c476:	7b7a      	ldrb	r2, [r7, #13]
 801c478:	4909      	ldr	r1, [pc, #36]	; (801c4a0 <UARTEx_SetNbDataToProcess+0x94>)
 801c47a:	5c8a      	ldrb	r2, [r1, r2]
 801c47c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801c480:	7b7a      	ldrb	r2, [r7, #13]
 801c482:	4908      	ldr	r1, [pc, #32]	; (801c4a4 <UARTEx_SetNbDataToProcess+0x98>)
 801c484:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801c486:	fb93 f3f2 	sdiv	r3, r3, r2
 801c48a:	b29a      	uxth	r2, r3
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801c492:	bf00      	nop
 801c494:	3714      	adds	r7, #20
 801c496:	46bd      	mov	sp, r7
 801c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c49c:	4770      	bx	lr
 801c49e:	bf00      	nop
 801c4a0:	0802320c 	.word	0x0802320c
 801c4a4:	08023214 	.word	0x08023214

0801c4a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801c4a8:	b480      	push	{r7}
 801c4aa:	b08b      	sub	sp, #44	; 0x2c
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	60f8      	str	r0, [r7, #12]
 801c4b0:	60b9      	str	r1, [r7, #8]
 801c4b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	681a      	ldr	r2, [r3, #0]
 801c4b8:	68bb      	ldr	r3, [r7, #8]
 801c4ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c4bc:	697b      	ldr	r3, [r7, #20]
 801c4be:	fa93 f3a3 	rbit	r3, r3
 801c4c2:	613b      	str	r3, [r7, #16]
  return result;
 801c4c4:	693b      	ldr	r3, [r7, #16]
 801c4c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801c4c8:	69bb      	ldr	r3, [r7, #24]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d101      	bne.n	801c4d2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801c4ce:	2320      	movs	r3, #32
 801c4d0:	e003      	b.n	801c4da <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801c4d2:	69bb      	ldr	r3, [r7, #24]
 801c4d4:	fab3 f383 	clz	r3, r3
 801c4d8:	b2db      	uxtb	r3, r3
 801c4da:	005b      	lsls	r3, r3, #1
 801c4dc:	2103      	movs	r1, #3
 801c4de:	fa01 f303 	lsl.w	r3, r1, r3
 801c4e2:	43db      	mvns	r3, r3
 801c4e4:	401a      	ands	r2, r3
 801c4e6:	68bb      	ldr	r3, [r7, #8]
 801c4e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c4ea:	6a3b      	ldr	r3, [r7, #32]
 801c4ec:	fa93 f3a3 	rbit	r3, r3
 801c4f0:	61fb      	str	r3, [r7, #28]
  return result;
 801c4f2:	69fb      	ldr	r3, [r7, #28]
 801c4f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d101      	bne.n	801c500 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801c4fc:	2320      	movs	r3, #32
 801c4fe:	e003      	b.n	801c508 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c502:	fab3 f383 	clz	r3, r3
 801c506:	b2db      	uxtb	r3, r3
 801c508:	005b      	lsls	r3, r3, #1
 801c50a:	6879      	ldr	r1, [r7, #4]
 801c50c:	fa01 f303 	lsl.w	r3, r1, r3
 801c510:	431a      	orrs	r2, r3
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	601a      	str	r2, [r3, #0]
}
 801c516:	bf00      	nop
 801c518:	372c      	adds	r7, #44	; 0x2c
 801c51a:	46bd      	mov	sp, r7
 801c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c520:	4770      	bx	lr

0801c522 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801c522:	b480      	push	{r7}
 801c524:	b085      	sub	sp, #20
 801c526:	af00      	add	r7, sp, #0
 801c528:	60f8      	str	r0, [r7, #12]
 801c52a:	60b9      	str	r1, [r7, #8]
 801c52c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	685a      	ldr	r2, [r3, #4]
 801c532:	68bb      	ldr	r3, [r7, #8]
 801c534:	43db      	mvns	r3, r3
 801c536:	401a      	ands	r2, r3
 801c538:	68bb      	ldr	r3, [r7, #8]
 801c53a:	6879      	ldr	r1, [r7, #4]
 801c53c:	fb01 f303 	mul.w	r3, r1, r3
 801c540:	431a      	orrs	r2, r3
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	605a      	str	r2, [r3, #4]
}
 801c546:	bf00      	nop
 801c548:	3714      	adds	r7, #20
 801c54a:	46bd      	mov	sp, r7
 801c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c550:	4770      	bx	lr

0801c552 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801c552:	b480      	push	{r7}
 801c554:	b08b      	sub	sp, #44	; 0x2c
 801c556:	af00      	add	r7, sp, #0
 801c558:	60f8      	str	r0, [r7, #12]
 801c55a:	60b9      	str	r1, [r7, #8]
 801c55c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	689a      	ldr	r2, [r3, #8]
 801c562:	68bb      	ldr	r3, [r7, #8]
 801c564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	fa93 f3a3 	rbit	r3, r3
 801c56c:	613b      	str	r3, [r7, #16]
  return result;
 801c56e:	693b      	ldr	r3, [r7, #16]
 801c570:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801c572:	69bb      	ldr	r3, [r7, #24]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d101      	bne.n	801c57c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801c578:	2320      	movs	r3, #32
 801c57a:	e003      	b.n	801c584 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801c57c:	69bb      	ldr	r3, [r7, #24]
 801c57e:	fab3 f383 	clz	r3, r3
 801c582:	b2db      	uxtb	r3, r3
 801c584:	005b      	lsls	r3, r3, #1
 801c586:	2103      	movs	r1, #3
 801c588:	fa01 f303 	lsl.w	r3, r1, r3
 801c58c:	43db      	mvns	r3, r3
 801c58e:	401a      	ands	r2, r3
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c594:	6a3b      	ldr	r3, [r7, #32]
 801c596:	fa93 f3a3 	rbit	r3, r3
 801c59a:	61fb      	str	r3, [r7, #28]
  return result;
 801c59c:	69fb      	ldr	r3, [r7, #28]
 801c59e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d101      	bne.n	801c5aa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801c5a6:	2320      	movs	r3, #32
 801c5a8:	e003      	b.n	801c5b2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801c5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5ac:	fab3 f383 	clz	r3, r3
 801c5b0:	b2db      	uxtb	r3, r3
 801c5b2:	005b      	lsls	r3, r3, #1
 801c5b4:	6879      	ldr	r1, [r7, #4]
 801c5b6:	fa01 f303 	lsl.w	r3, r1, r3
 801c5ba:	431a      	orrs	r2, r3
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801c5c0:	bf00      	nop
 801c5c2:	372c      	adds	r7, #44	; 0x2c
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ca:	4770      	bx	lr

0801c5cc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801c5cc:	b480      	push	{r7}
 801c5ce:	b08b      	sub	sp, #44	; 0x2c
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	60f8      	str	r0, [r7, #12]
 801c5d4:	60b9      	str	r1, [r7, #8]
 801c5d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	68da      	ldr	r2, [r3, #12]
 801c5dc:	68bb      	ldr	r3, [r7, #8]
 801c5de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c5e0:	697b      	ldr	r3, [r7, #20]
 801c5e2:	fa93 f3a3 	rbit	r3, r3
 801c5e6:	613b      	str	r3, [r7, #16]
  return result;
 801c5e8:	693b      	ldr	r3, [r7, #16]
 801c5ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801c5ec:	69bb      	ldr	r3, [r7, #24]
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d101      	bne.n	801c5f6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801c5f2:	2320      	movs	r3, #32
 801c5f4:	e003      	b.n	801c5fe <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801c5f6:	69bb      	ldr	r3, [r7, #24]
 801c5f8:	fab3 f383 	clz	r3, r3
 801c5fc:	b2db      	uxtb	r3, r3
 801c5fe:	005b      	lsls	r3, r3, #1
 801c600:	2103      	movs	r1, #3
 801c602:	fa01 f303 	lsl.w	r3, r1, r3
 801c606:	43db      	mvns	r3, r3
 801c608:	401a      	ands	r2, r3
 801c60a:	68bb      	ldr	r3, [r7, #8]
 801c60c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c60e:	6a3b      	ldr	r3, [r7, #32]
 801c610:	fa93 f3a3 	rbit	r3, r3
 801c614:	61fb      	str	r3, [r7, #28]
  return result;
 801c616:	69fb      	ldr	r3, [r7, #28]
 801c618:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d101      	bne.n	801c624 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801c620:	2320      	movs	r3, #32
 801c622:	e003      	b.n	801c62c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c626:	fab3 f383 	clz	r3, r3
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	005b      	lsls	r3, r3, #1
 801c62e:	6879      	ldr	r1, [r7, #4]
 801c630:	fa01 f303 	lsl.w	r3, r1, r3
 801c634:	431a      	orrs	r2, r3
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	60da      	str	r2, [r3, #12]
}
 801c63a:	bf00      	nop
 801c63c:	372c      	adds	r7, #44	; 0x2c
 801c63e:	46bd      	mov	sp, r7
 801c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c644:	4770      	bx	lr

0801c646 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801c646:	b480      	push	{r7}
 801c648:	b08b      	sub	sp, #44	; 0x2c
 801c64a:	af00      	add	r7, sp, #0
 801c64c:	60f8      	str	r0, [r7, #12]
 801c64e:	60b9      	str	r1, [r7, #8]
 801c650:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	6a1a      	ldr	r2, [r3, #32]
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c65a:	697b      	ldr	r3, [r7, #20]
 801c65c:	fa93 f3a3 	rbit	r3, r3
 801c660:	613b      	str	r3, [r7, #16]
  return result;
 801c662:	693b      	ldr	r3, [r7, #16]
 801c664:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801c666:	69bb      	ldr	r3, [r7, #24]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d101      	bne.n	801c670 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801c66c:	2320      	movs	r3, #32
 801c66e:	e003      	b.n	801c678 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801c670:	69bb      	ldr	r3, [r7, #24]
 801c672:	fab3 f383 	clz	r3, r3
 801c676:	b2db      	uxtb	r3, r3
 801c678:	009b      	lsls	r3, r3, #2
 801c67a:	210f      	movs	r1, #15
 801c67c:	fa01 f303 	lsl.w	r3, r1, r3
 801c680:	43db      	mvns	r3, r3
 801c682:	401a      	ands	r2, r3
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c688:	6a3b      	ldr	r3, [r7, #32]
 801c68a:	fa93 f3a3 	rbit	r3, r3
 801c68e:	61fb      	str	r3, [r7, #28]
  return result;
 801c690:	69fb      	ldr	r3, [r7, #28]
 801c692:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c696:	2b00      	cmp	r3, #0
 801c698:	d101      	bne.n	801c69e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801c69a:	2320      	movs	r3, #32
 801c69c:	e003      	b.n	801c6a6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6a0:	fab3 f383 	clz	r3, r3
 801c6a4:	b2db      	uxtb	r3, r3
 801c6a6:	009b      	lsls	r3, r3, #2
 801c6a8:	6879      	ldr	r1, [r7, #4]
 801c6aa:	fa01 f303 	lsl.w	r3, r1, r3
 801c6ae:	431a      	orrs	r2, r3
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801c6b4:	bf00      	nop
 801c6b6:	372c      	adds	r7, #44	; 0x2c
 801c6b8:	46bd      	mov	sp, r7
 801c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6be:	4770      	bx	lr

0801c6c0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801c6c0:	b480      	push	{r7}
 801c6c2:	b08b      	sub	sp, #44	; 0x2c
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	60f8      	str	r0, [r7, #12]
 801c6c8:	60b9      	str	r1, [r7, #8]
 801c6ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c6d0:	68bb      	ldr	r3, [r7, #8]
 801c6d2:	0a1b      	lsrs	r3, r3, #8
 801c6d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	fa93 f3a3 	rbit	r3, r3
 801c6dc:	613b      	str	r3, [r7, #16]
  return result;
 801c6de:	693b      	ldr	r3, [r7, #16]
 801c6e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801c6e2:	69bb      	ldr	r3, [r7, #24]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d101      	bne.n	801c6ec <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801c6e8:	2320      	movs	r3, #32
 801c6ea:	e003      	b.n	801c6f4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801c6ec:	69bb      	ldr	r3, [r7, #24]
 801c6ee:	fab3 f383 	clz	r3, r3
 801c6f2:	b2db      	uxtb	r3, r3
 801c6f4:	009b      	lsls	r3, r3, #2
 801c6f6:	210f      	movs	r1, #15
 801c6f8:	fa01 f303 	lsl.w	r3, r1, r3
 801c6fc:	43db      	mvns	r3, r3
 801c6fe:	401a      	ands	r2, r3
 801c700:	68bb      	ldr	r3, [r7, #8]
 801c702:	0a1b      	lsrs	r3, r3, #8
 801c704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c706:	6a3b      	ldr	r3, [r7, #32]
 801c708:	fa93 f3a3 	rbit	r3, r3
 801c70c:	61fb      	str	r3, [r7, #28]
  return result;
 801c70e:	69fb      	ldr	r3, [r7, #28]
 801c710:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c714:	2b00      	cmp	r3, #0
 801c716:	d101      	bne.n	801c71c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801c718:	2320      	movs	r3, #32
 801c71a:	e003      	b.n	801c724 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c71e:	fab3 f383 	clz	r3, r3
 801c722:	b2db      	uxtb	r3, r3
 801c724:	009b      	lsls	r3, r3, #2
 801c726:	6879      	ldr	r1, [r7, #4]
 801c728:	fa01 f303 	lsl.w	r3, r1, r3
 801c72c:	431a      	orrs	r2, r3
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801c732:	bf00      	nop
 801c734:	372c      	adds	r7, #44	; 0x2c
 801c736:	46bd      	mov	sp, r7
 801c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c73c:	4770      	bx	lr

0801c73e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801c73e:	b580      	push	{r7, lr}
 801c740:	b088      	sub	sp, #32
 801c742:	af00      	add	r7, sp, #0
 801c744:	6078      	str	r0, [r7, #4]
 801c746:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801c748:	683b      	ldr	r3, [r7, #0]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801c74e:	693b      	ldr	r3, [r7, #16]
 801c750:	fa93 f3a3 	rbit	r3, r3
 801c754:	60fb      	str	r3, [r7, #12]
  return result;
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801c75a:	697b      	ldr	r3, [r7, #20]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d101      	bne.n	801c764 <LL_GPIO_Init+0x26>
    return 32U;
 801c760:	2320      	movs	r3, #32
 801c762:	e003      	b.n	801c76c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801c764:	697b      	ldr	r3, [r7, #20]
 801c766:	fab3 f383 	clz	r3, r3
 801c76a:	b2db      	uxtb	r3, r3
 801c76c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801c76e:	e047      	b.n	801c800 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	2101      	movs	r1, #1
 801c776:	69fb      	ldr	r3, [r7, #28]
 801c778:	fa01 f303 	lsl.w	r3, r1, r3
 801c77c:	4013      	ands	r3, r2
 801c77e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 801c780:	69bb      	ldr	r3, [r7, #24]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d039      	beq.n	801c7fa <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801c786:	683b      	ldr	r3, [r7, #0]
 801c788:	685b      	ldr	r3, [r3, #4]
 801c78a:	2b01      	cmp	r3, #1
 801c78c:	d003      	beq.n	801c796 <LL_GPIO_Init+0x58>
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	685b      	ldr	r3, [r3, #4]
 801c792:	2b02      	cmp	r3, #2
 801c794:	d10d      	bne.n	801c7b2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801c796:	683b      	ldr	r3, [r7, #0]
 801c798:	689b      	ldr	r3, [r3, #8]
 801c79a:	461a      	mov	r2, r3
 801c79c:	69b9      	ldr	r1, [r7, #24]
 801c79e:	6878      	ldr	r0, [r7, #4]
 801c7a0:	f7ff fed7 	bl	801c552 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801c7a4:	683b      	ldr	r3, [r7, #0]
 801c7a6:	68db      	ldr	r3, [r3, #12]
 801c7a8:	461a      	mov	r2, r3
 801c7aa:	69b9      	ldr	r1, [r7, #24]
 801c7ac:	6878      	ldr	r0, [r7, #4]
 801c7ae:	f7ff feb8 	bl	801c522 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	691b      	ldr	r3, [r3, #16]
 801c7b6:	461a      	mov	r2, r3
 801c7b8:	69b9      	ldr	r1, [r7, #24]
 801c7ba:	6878      	ldr	r0, [r7, #4]
 801c7bc:	f7ff ff06 	bl	801c5cc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801c7c0:	683b      	ldr	r3, [r7, #0]
 801c7c2:	685b      	ldr	r3, [r3, #4]
 801c7c4:	2b02      	cmp	r3, #2
 801c7c6:	d111      	bne.n	801c7ec <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801c7c8:	69bb      	ldr	r3, [r7, #24]
 801c7ca:	2bff      	cmp	r3, #255	; 0xff
 801c7cc:	d807      	bhi.n	801c7de <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801c7ce:	683b      	ldr	r3, [r7, #0]
 801c7d0:	695b      	ldr	r3, [r3, #20]
 801c7d2:	461a      	mov	r2, r3
 801c7d4:	69b9      	ldr	r1, [r7, #24]
 801c7d6:	6878      	ldr	r0, [r7, #4]
 801c7d8:	f7ff ff35 	bl	801c646 <LL_GPIO_SetAFPin_0_7>
 801c7dc:	e006      	b.n	801c7ec <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	695b      	ldr	r3, [r3, #20]
 801c7e2:	461a      	mov	r2, r3
 801c7e4:	69b9      	ldr	r1, [r7, #24]
 801c7e6:	6878      	ldr	r0, [r7, #4]
 801c7e8:	f7ff ff6a 	bl	801c6c0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801c7ec:	683b      	ldr	r3, [r7, #0]
 801c7ee:	685b      	ldr	r3, [r3, #4]
 801c7f0:	461a      	mov	r2, r3
 801c7f2:	69b9      	ldr	r1, [r7, #24]
 801c7f4:	6878      	ldr	r0, [r7, #4]
 801c7f6:	f7ff fe57 	bl	801c4a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801c7fa:	69fb      	ldr	r3, [r7, #28]
 801c7fc:	3301      	adds	r3, #1
 801c7fe:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801c800:	683b      	ldr	r3, [r7, #0]
 801c802:	681a      	ldr	r2, [r3, #0]
 801c804:	69fb      	ldr	r3, [r7, #28]
 801c806:	fa22 f303 	lsr.w	r3, r2, r3
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d1b0      	bne.n	801c770 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801c80e:	2300      	movs	r3, #0
}
 801c810:	4618      	mov	r0, r3
 801c812:	3720      	adds	r7, #32
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}

0801c818 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801c818:	b480      	push	{r7}
 801c81a:	b085      	sub	sp, #20
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c820:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801c824:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801c82c:	b29a      	uxth	r2, r3
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	b29b      	uxth	r3, r3
 801c832:	43db      	mvns	r3, r3
 801c834:	b29b      	uxth	r3, r3
 801c836:	4013      	ands	r3, r2
 801c838:	b29a      	uxth	r2, r3
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801c840:	2300      	movs	r3, #0
}
 801c842:	4618      	mov	r0, r3
 801c844:	3714      	adds	r7, #20
 801c846:	46bd      	mov	sp, r7
 801c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c84c:	4770      	bx	lr

0801c84e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801c84e:	b084      	sub	sp, #16
 801c850:	b480      	push	{r7}
 801c852:	b083      	sub	sp, #12
 801c854:	af00      	add	r7, sp, #0
 801c856:	6078      	str	r0, [r7, #4]
 801c858:	f107 0014 	add.w	r0, r7, #20
 801c85c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	2201      	movs	r2, #1
 801c864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	2200      	movs	r2, #0
 801c86c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	2200      	movs	r2, #0
 801c874:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	2200      	movs	r2, #0
 801c87c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801c880:	2300      	movs	r3, #0
}
 801c882:	4618      	mov	r0, r3
 801c884:	370c      	adds	r7, #12
 801c886:	46bd      	mov	sp, r7
 801c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c88c:	b004      	add	sp, #16
 801c88e:	4770      	bx	lr

0801c890 <__NVIC_SetPriority>:
{
 801c890:	b480      	push	{r7}
 801c892:	b083      	sub	sp, #12
 801c894:	af00      	add	r7, sp, #0
 801c896:	4603      	mov	r3, r0
 801c898:	6039      	str	r1, [r7, #0]
 801c89a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801c89c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	db0a      	blt.n	801c8ba <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c8a4:	683b      	ldr	r3, [r7, #0]
 801c8a6:	b2da      	uxtb	r2, r3
 801c8a8:	490c      	ldr	r1, [pc, #48]	; (801c8dc <__NVIC_SetPriority+0x4c>)
 801c8aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8ae:	0152      	lsls	r2, r2, #5
 801c8b0:	b2d2      	uxtb	r2, r2
 801c8b2:	440b      	add	r3, r1
 801c8b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801c8b8:	e00a      	b.n	801c8d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801c8ba:	683b      	ldr	r3, [r7, #0]
 801c8bc:	b2da      	uxtb	r2, r3
 801c8be:	4908      	ldr	r1, [pc, #32]	; (801c8e0 <__NVIC_SetPriority+0x50>)
 801c8c0:	79fb      	ldrb	r3, [r7, #7]
 801c8c2:	f003 030f 	and.w	r3, r3, #15
 801c8c6:	3b04      	subs	r3, #4
 801c8c8:	0152      	lsls	r2, r2, #5
 801c8ca:	b2d2      	uxtb	r2, r2
 801c8cc:	440b      	add	r3, r1
 801c8ce:	761a      	strb	r2, [r3, #24]
}
 801c8d0:	bf00      	nop
 801c8d2:	370c      	adds	r7, #12
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8da:	4770      	bx	lr
 801c8dc:	e000e100 	.word	0xe000e100
 801c8e0:	e000ed00 	.word	0xe000ed00

0801c8e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801c8e8:	4b05      	ldr	r3, [pc, #20]	; (801c900 <SysTick_Handler+0x1c>)
 801c8ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801c8ec:	f001 fcbc 	bl	801e268 <xTaskGetSchedulerState>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	2b01      	cmp	r3, #1
 801c8f4:	d001      	beq.n	801c8fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801c8f6:	f002 f911 	bl	801eb1c <xPortSysTickHandler>
  }
}
 801c8fa:	bf00      	nop
 801c8fc:	bd80      	pop	{r7, pc}
 801c8fe:	bf00      	nop
 801c900:	e000e010 	.word	0xe000e010

0801c904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801c904:	b580      	push	{r7, lr}
 801c906:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801c908:	2100      	movs	r1, #0
 801c90a:	f06f 0004 	mvn.w	r0, #4
 801c90e:	f7ff ffbf 	bl	801c890 <__NVIC_SetPriority>
#endif
}
 801c912:	bf00      	nop
 801c914:	bd80      	pop	{r7, pc}
	...

0801c918 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801c918:	b480      	push	{r7}
 801c91a:	b083      	sub	sp, #12
 801c91c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c91e:	f3ef 8305 	mrs	r3, IPSR
 801c922:	603b      	str	r3, [r7, #0]
  return(result);
 801c924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c926:	2b00      	cmp	r3, #0
 801c928:	d003      	beq.n	801c932 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801c92a:	f06f 0305 	mvn.w	r3, #5
 801c92e:	607b      	str	r3, [r7, #4]
 801c930:	e00c      	b.n	801c94c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801c932:	4b0a      	ldr	r3, [pc, #40]	; (801c95c <osKernelInitialize+0x44>)
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	2b00      	cmp	r3, #0
 801c938:	d105      	bne.n	801c946 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801c93a:	4b08      	ldr	r3, [pc, #32]	; (801c95c <osKernelInitialize+0x44>)
 801c93c:	2201      	movs	r2, #1
 801c93e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801c940:	2300      	movs	r3, #0
 801c942:	607b      	str	r3, [r7, #4]
 801c944:	e002      	b.n	801c94c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801c946:	f04f 33ff 	mov.w	r3, #4294967295
 801c94a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801c94c:	687b      	ldr	r3, [r7, #4]
}
 801c94e:	4618      	mov	r0, r3
 801c950:	370c      	adds	r7, #12
 801c952:	46bd      	mov	sp, r7
 801c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c958:	4770      	bx	lr
 801c95a:	bf00      	nop
 801c95c:	20000be0 	.word	0x20000be0

0801c960 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801c960:	b580      	push	{r7, lr}
 801c962:	b082      	sub	sp, #8
 801c964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c966:	f3ef 8305 	mrs	r3, IPSR
 801c96a:	603b      	str	r3, [r7, #0]
  return(result);
 801c96c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d003      	beq.n	801c97a <osKernelStart+0x1a>
    stat = osErrorISR;
 801c972:	f06f 0305 	mvn.w	r3, #5
 801c976:	607b      	str	r3, [r7, #4]
 801c978:	e010      	b.n	801c99c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801c97a:	4b0b      	ldr	r3, [pc, #44]	; (801c9a8 <osKernelStart+0x48>)
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	2b01      	cmp	r3, #1
 801c980:	d109      	bne.n	801c996 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801c982:	f7ff ffbf 	bl	801c904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801c986:	4b08      	ldr	r3, [pc, #32]	; (801c9a8 <osKernelStart+0x48>)
 801c988:	2202      	movs	r2, #2
 801c98a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801c98c:	f001 f88e 	bl	801daac <vTaskStartScheduler>
      stat = osOK;
 801c990:	2300      	movs	r3, #0
 801c992:	607b      	str	r3, [r7, #4]
 801c994:	e002      	b.n	801c99c <osKernelStart+0x3c>
    } else {
      stat = osError;
 801c996:	f04f 33ff 	mov.w	r3, #4294967295
 801c99a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801c99c:	687b      	ldr	r3, [r7, #4]
}
 801c99e:	4618      	mov	r0, r3
 801c9a0:	3708      	adds	r7, #8
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bd80      	pop	{r7, pc}
 801c9a6:	bf00      	nop
 801c9a8:	20000be0 	.word	0x20000be0

0801c9ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b08e      	sub	sp, #56	; 0x38
 801c9b0:	af04      	add	r7, sp, #16
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801c9bc:	f3ef 8305 	mrs	r3, IPSR
 801c9c0:	617b      	str	r3, [r7, #20]
  return(result);
 801c9c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d17e      	bne.n	801cac6 <osThreadNew+0x11a>
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d07b      	beq.n	801cac6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801c9ce:	2380      	movs	r3, #128	; 0x80
 801c9d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801c9d2:	2318      	movs	r3, #24
 801c9d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801c9da:	f04f 33ff 	mov.w	r3, #4294967295
 801c9de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d045      	beq.n	801ca72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d002      	beq.n	801c9f4 <osThreadNew+0x48>
        name = attr->name;
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	699b      	ldr	r3, [r3, #24]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d002      	beq.n	801ca02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	699b      	ldr	r3, [r3, #24]
 801ca00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801ca02:	69fb      	ldr	r3, [r7, #28]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d008      	beq.n	801ca1a <osThreadNew+0x6e>
 801ca08:	69fb      	ldr	r3, [r7, #28]
 801ca0a:	2b38      	cmp	r3, #56	; 0x38
 801ca0c:	d805      	bhi.n	801ca1a <osThreadNew+0x6e>
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	685b      	ldr	r3, [r3, #4]
 801ca12:	f003 0301 	and.w	r3, r3, #1
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d001      	beq.n	801ca1e <osThreadNew+0x72>
        return (NULL);
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	e054      	b.n	801cac8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	695b      	ldr	r3, [r3, #20]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d003      	beq.n	801ca2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	695b      	ldr	r3, [r3, #20]
 801ca2a:	089b      	lsrs	r3, r3, #2
 801ca2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	689b      	ldr	r3, [r3, #8]
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d00e      	beq.n	801ca54 <osThreadNew+0xa8>
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	68db      	ldr	r3, [r3, #12]
 801ca3a:	2b5b      	cmp	r3, #91	; 0x5b
 801ca3c:	d90a      	bls.n	801ca54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d006      	beq.n	801ca54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	695b      	ldr	r3, [r3, #20]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d002      	beq.n	801ca54 <osThreadNew+0xa8>
        mem = 1;
 801ca4e:	2301      	movs	r3, #1
 801ca50:	61bb      	str	r3, [r7, #24]
 801ca52:	e010      	b.n	801ca76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	689b      	ldr	r3, [r3, #8]
 801ca58:	2b00      	cmp	r3, #0
 801ca5a:	d10c      	bne.n	801ca76 <osThreadNew+0xca>
 801ca5c:	687b      	ldr	r3, [r7, #4]
 801ca5e:	68db      	ldr	r3, [r3, #12]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d108      	bne.n	801ca76 <osThreadNew+0xca>
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	691b      	ldr	r3, [r3, #16]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d104      	bne.n	801ca76 <osThreadNew+0xca>
          mem = 0;
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	61bb      	str	r3, [r7, #24]
 801ca70:	e001      	b.n	801ca76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801ca72:	2300      	movs	r3, #0
 801ca74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801ca76:	69bb      	ldr	r3, [r7, #24]
 801ca78:	2b01      	cmp	r3, #1
 801ca7a:	d110      	bne.n	801ca9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801ca80:	687a      	ldr	r2, [r7, #4]
 801ca82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801ca84:	9202      	str	r2, [sp, #8]
 801ca86:	9301      	str	r3, [sp, #4]
 801ca88:	69fb      	ldr	r3, [r7, #28]
 801ca8a:	9300      	str	r3, [sp, #0]
 801ca8c:	68bb      	ldr	r3, [r7, #8]
 801ca8e:	6a3a      	ldr	r2, [r7, #32]
 801ca90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ca92:	68f8      	ldr	r0, [r7, #12]
 801ca94:	f000 fd30 	bl	801d4f8 <xTaskCreateStatic>
 801ca98:	4603      	mov	r3, r0
 801ca9a:	613b      	str	r3, [r7, #16]
 801ca9c:	e013      	b.n	801cac6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801ca9e:	69bb      	ldr	r3, [r7, #24]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d110      	bne.n	801cac6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801caa4:	6a3b      	ldr	r3, [r7, #32]
 801caa6:	b29a      	uxth	r2, r3
 801caa8:	f107 0310 	add.w	r3, r7, #16
 801caac:	9301      	str	r3, [sp, #4]
 801caae:	69fb      	ldr	r3, [r7, #28]
 801cab0:	9300      	str	r3, [sp, #0]
 801cab2:	68bb      	ldr	r3, [r7, #8]
 801cab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cab6:	68f8      	ldr	r0, [r7, #12]
 801cab8:	f000 fd63 	bl	801d582 <xTaskCreate>
 801cabc:	4603      	mov	r3, r0
 801cabe:	2b01      	cmp	r3, #1
 801cac0:	d001      	beq.n	801cac6 <osThreadNew+0x11a>
            hTask = NULL;
 801cac2:	2300      	movs	r3, #0
 801cac4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801cac6:	693b      	ldr	r3, [r7, #16]
}
 801cac8:	4618      	mov	r0, r3
 801caca:	3728      	adds	r7, #40	; 0x28
 801cacc:	46bd      	mov	sp, r7
 801cace:	bd80      	pop	{r7, pc}

0801cad0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801cad0:	b480      	push	{r7}
 801cad2:	b085      	sub	sp, #20
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	60f8      	str	r0, [r7, #12]
 801cad8:	60b9      	str	r1, [r7, #8]
 801cada:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	4a07      	ldr	r2, [pc, #28]	; (801cafc <vApplicationGetIdleTaskMemory+0x2c>)
 801cae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801cae2:	68bb      	ldr	r3, [r7, #8]
 801cae4:	4a06      	ldr	r2, [pc, #24]	; (801cb00 <vApplicationGetIdleTaskMemory+0x30>)
 801cae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	2280      	movs	r2, #128	; 0x80
 801caec:	601a      	str	r2, [r3, #0]
}
 801caee:	bf00      	nop
 801caf0:	3714      	adds	r7, #20
 801caf2:	46bd      	mov	sp, r7
 801caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caf8:	4770      	bx	lr
 801cafa:	bf00      	nop
 801cafc:	20000be4 	.word	0x20000be4
 801cb00:	20000c40 	.word	0x20000c40

0801cb04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801cb04:	b480      	push	{r7}
 801cb06:	b085      	sub	sp, #20
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	60f8      	str	r0, [r7, #12]
 801cb0c:	60b9      	str	r1, [r7, #8]
 801cb0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	4a07      	ldr	r2, [pc, #28]	; (801cb30 <vApplicationGetTimerTaskMemory+0x2c>)
 801cb14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801cb16:	68bb      	ldr	r3, [r7, #8]
 801cb18:	4a06      	ldr	r2, [pc, #24]	; (801cb34 <vApplicationGetTimerTaskMemory+0x30>)
 801cb1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801cb1c:	687b      	ldr	r3, [r7, #4]
 801cb1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801cb22:	601a      	str	r2, [r3, #0]
}
 801cb24:	bf00      	nop
 801cb26:	3714      	adds	r7, #20
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2e:	4770      	bx	lr
 801cb30:	20000e40 	.word	0x20000e40
 801cb34:	20000e9c 	.word	0x20000e9c

0801cb38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801cb38:	b480      	push	{r7}
 801cb3a:	b083      	sub	sp, #12
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	f103 0208 	add.w	r2, r3, #8
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	f04f 32ff 	mov.w	r2, #4294967295
 801cb50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	f103 0208 	add.w	r2, r3, #8
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	f103 0208 	add.w	r2, r3, #8
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	2200      	movs	r2, #0
 801cb6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801cb6c:	bf00      	nop
 801cb6e:	370c      	adds	r7, #12
 801cb70:	46bd      	mov	sp, r7
 801cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb76:	4770      	bx	lr

0801cb78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801cb78:	b480      	push	{r7}
 801cb7a:	b083      	sub	sp, #12
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2200      	movs	r2, #0
 801cb84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801cb86:	bf00      	nop
 801cb88:	370c      	adds	r7, #12
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb90:	4770      	bx	lr

0801cb92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801cb92:	b480      	push	{r7}
 801cb94:	b085      	sub	sp, #20
 801cb96:	af00      	add	r7, sp, #0
 801cb98:	6078      	str	r0, [r7, #4]
 801cb9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	685b      	ldr	r3, [r3, #4]
 801cba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	68fa      	ldr	r2, [r7, #12]
 801cba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	689a      	ldr	r2, [r3, #8]
 801cbac:	683b      	ldr	r3, [r7, #0]
 801cbae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	689b      	ldr	r3, [r3, #8]
 801cbb4:	683a      	ldr	r2, [r7, #0]
 801cbb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	683a      	ldr	r2, [r7, #0]
 801cbbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	687a      	ldr	r2, [r7, #4]
 801cbc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	1c5a      	adds	r2, r3, #1
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	601a      	str	r2, [r3, #0]
}
 801cbce:	bf00      	nop
 801cbd0:	3714      	adds	r7, #20
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbd8:	4770      	bx	lr

0801cbda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801cbda:	b480      	push	{r7}
 801cbdc:	b085      	sub	sp, #20
 801cbde:	af00      	add	r7, sp, #0
 801cbe0:	6078      	str	r0, [r7, #4]
 801cbe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801cbe4:	683b      	ldr	r3, [r7, #0]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801cbea:	68bb      	ldr	r3, [r7, #8]
 801cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cbf0:	d103      	bne.n	801cbfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	691b      	ldr	r3, [r3, #16]
 801cbf6:	60fb      	str	r3, [r7, #12]
 801cbf8:	e00c      	b.n	801cc14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	3308      	adds	r3, #8
 801cbfe:	60fb      	str	r3, [r7, #12]
 801cc00:	e002      	b.n	801cc08 <vListInsert+0x2e>
 801cc02:	68fb      	ldr	r3, [r7, #12]
 801cc04:	685b      	ldr	r3, [r3, #4]
 801cc06:	60fb      	str	r3, [r7, #12]
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	685b      	ldr	r3, [r3, #4]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	68ba      	ldr	r2, [r7, #8]
 801cc10:	429a      	cmp	r2, r3
 801cc12:	d2f6      	bcs.n	801cc02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	685a      	ldr	r2, [r3, #4]
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801cc1c:	683b      	ldr	r3, [r7, #0]
 801cc1e:	685b      	ldr	r3, [r3, #4]
 801cc20:	683a      	ldr	r2, [r7, #0]
 801cc22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	68fa      	ldr	r2, [r7, #12]
 801cc28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801cc2a:	68fb      	ldr	r3, [r7, #12]
 801cc2c:	683a      	ldr	r2, [r7, #0]
 801cc2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801cc30:	683b      	ldr	r3, [r7, #0]
 801cc32:	687a      	ldr	r2, [r7, #4]
 801cc34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	1c5a      	adds	r2, r3, #1
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	601a      	str	r2, [r3, #0]
}
 801cc40:	bf00      	nop
 801cc42:	3714      	adds	r7, #20
 801cc44:	46bd      	mov	sp, r7
 801cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4a:	4770      	bx	lr

0801cc4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801cc4c:	b480      	push	{r7}
 801cc4e:	b085      	sub	sp, #20
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	691b      	ldr	r3, [r3, #16]
 801cc58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	685b      	ldr	r3, [r3, #4]
 801cc5e:	687a      	ldr	r2, [r7, #4]
 801cc60:	6892      	ldr	r2, [r2, #8]
 801cc62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	689b      	ldr	r3, [r3, #8]
 801cc68:	687a      	ldr	r2, [r7, #4]
 801cc6a:	6852      	ldr	r2, [r2, #4]
 801cc6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	685b      	ldr	r3, [r3, #4]
 801cc72:	687a      	ldr	r2, [r7, #4]
 801cc74:	429a      	cmp	r2, r3
 801cc76:	d103      	bne.n	801cc80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	689a      	ldr	r2, [r3, #8]
 801cc7c:	68fb      	ldr	r3, [r7, #12]
 801cc7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	2200      	movs	r2, #0
 801cc84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801cc86:	68fb      	ldr	r3, [r7, #12]
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	1e5a      	subs	r2, r3, #1
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801cc90:	68fb      	ldr	r3, [r7, #12]
 801cc92:	681b      	ldr	r3, [r3, #0]
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3714      	adds	r7, #20
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc9e:	4770      	bx	lr

0801cca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801cca0:	b580      	push	{r7, lr}
 801cca2:	b084      	sub	sp, #16
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	6078      	str	r0, [r7, #4]
 801cca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d102      	bne.n	801ccba <xQueueGenericReset+0x1a>
 801ccb4:	f002 f838 	bl	801ed28 <ulSetInterruptMask>
 801ccb8:	e7fe      	b.n	801ccb8 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801ccba:	f001 ff03 	bl	801eac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	681a      	ldr	r2, [r3, #0]
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ccc6:	68f9      	ldr	r1, [r7, #12]
 801ccc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ccca:	fb01 f303 	mul.w	r3, r1, r3
 801ccce:	441a      	add	r2, r3
 801ccd0:	68fb      	ldr	r3, [r7, #12]
 801ccd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	681a      	ldr	r2, [r3, #0]
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	681a      	ldr	r2, [r3, #0]
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ccea:	3b01      	subs	r3, #1
 801ccec:	68f9      	ldr	r1, [r7, #12]
 801ccee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ccf0:	fb01 f303 	mul.w	r3, r1, r3
 801ccf4:	441a      	add	r2, r3
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801ccfa:	68fb      	ldr	r3, [r7, #12]
 801ccfc:	22ff      	movs	r2, #255	; 0xff
 801ccfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	22ff      	movs	r2, #255	; 0xff
 801cd06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801cd0a:	683b      	ldr	r3, [r7, #0]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d10e      	bne.n	801cd2e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	691b      	ldr	r3, [r3, #16]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d014      	beq.n	801cd42 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801cd18:	68fb      	ldr	r3, [r7, #12]
 801cd1a:	3310      	adds	r3, #16
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	f001 f90d 	bl	801df3c <xTaskRemoveFromEventList>
 801cd22:	4603      	mov	r3, r0
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d00c      	beq.n	801cd42 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801cd28:	f001 feba 	bl	801eaa0 <vPortYield>
 801cd2c:	e009      	b.n	801cd42 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801cd2e:	68fb      	ldr	r3, [r7, #12]
 801cd30:	3310      	adds	r3, #16
 801cd32:	4618      	mov	r0, r3
 801cd34:	f7ff ff00 	bl	801cb38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801cd38:	68fb      	ldr	r3, [r7, #12]
 801cd3a:	3324      	adds	r3, #36	; 0x24
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	f7ff fefb 	bl	801cb38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801cd42:	f001 fed1 	bl	801eae8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801cd46:	2301      	movs	r3, #1
}
 801cd48:	4618      	mov	r0, r3
 801cd4a:	3710      	adds	r7, #16
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bd80      	pop	{r7, pc}

0801cd50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b088      	sub	sp, #32
 801cd54:	af02      	add	r7, sp, #8
 801cd56:	60f8      	str	r0, [r7, #12]
 801cd58:	60b9      	str	r1, [r7, #8]
 801cd5a:	607a      	str	r2, [r7, #4]
 801cd5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d102      	bne.n	801cd6a <xQueueGenericCreateStatic+0x1a>
 801cd64:	f001 ffe0 	bl	801ed28 <ulSetInterruptMask>
 801cd68:	e7fe      	b.n	801cd68 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d102      	bne.n	801cd76 <xQueueGenericCreateStatic+0x26>
 801cd70:	f001 ffda 	bl	801ed28 <ulSetInterruptMask>
 801cd74:	e7fe      	b.n	801cd74 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801cd76:	687b      	ldr	r3, [r7, #4]
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d002      	beq.n	801cd82 <xQueueGenericCreateStatic+0x32>
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	d001      	beq.n	801cd86 <xQueueGenericCreateStatic+0x36>
 801cd82:	2301      	movs	r3, #1
 801cd84:	e000      	b.n	801cd88 <xQueueGenericCreateStatic+0x38>
 801cd86:	2300      	movs	r3, #0
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	d102      	bne.n	801cd92 <xQueueGenericCreateStatic+0x42>
 801cd8c:	f001 ffcc 	bl	801ed28 <ulSetInterruptMask>
 801cd90:	e7fe      	b.n	801cd90 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d102      	bne.n	801cd9e <xQueueGenericCreateStatic+0x4e>
 801cd98:	68bb      	ldr	r3, [r7, #8]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d101      	bne.n	801cda2 <xQueueGenericCreateStatic+0x52>
 801cd9e:	2301      	movs	r3, #1
 801cda0:	e000      	b.n	801cda4 <xQueueGenericCreateStatic+0x54>
 801cda2:	2300      	movs	r3, #0
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d102      	bne.n	801cdae <xQueueGenericCreateStatic+0x5e>
 801cda8:	f001 ffbe 	bl	801ed28 <ulSetInterruptMask>
 801cdac:	e7fe      	b.n	801cdac <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801cdae:	2350      	movs	r3, #80	; 0x50
 801cdb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801cdb2:	693b      	ldr	r3, [r7, #16]
 801cdb4:	2b50      	cmp	r3, #80	; 0x50
 801cdb6:	d002      	beq.n	801cdbe <xQueueGenericCreateStatic+0x6e>
 801cdb8:	f001 ffb6 	bl	801ed28 <ulSetInterruptMask>
 801cdbc:	e7fe      	b.n	801cdbc <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801cdbe:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801cdc4:	697b      	ldr	r3, [r7, #20]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d00d      	beq.n	801cde6 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801cdca:	697b      	ldr	r3, [r7, #20]
 801cdcc:	2201      	movs	r2, #1
 801cdce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801cdd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	9300      	str	r3, [sp, #0]
 801cdda:	4613      	mov	r3, r2
 801cddc:	687a      	ldr	r2, [r7, #4]
 801cdde:	68b9      	ldr	r1, [r7, #8]
 801cde0:	68f8      	ldr	r0, [r7, #12]
 801cde2:	f000 f805 	bl	801cdf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801cde6:	697b      	ldr	r3, [r7, #20]
	}
 801cde8:	4618      	mov	r0, r3
 801cdea:	3718      	adds	r7, #24
 801cdec:	46bd      	mov	sp, r7
 801cdee:	bd80      	pop	{r7, pc}

0801cdf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b084      	sub	sp, #16
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	60f8      	str	r0, [r7, #12]
 801cdf8:	60b9      	str	r1, [r7, #8]
 801cdfa:	607a      	str	r2, [r7, #4]
 801cdfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801cdfe:	68bb      	ldr	r3, [r7, #8]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d103      	bne.n	801ce0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ce04:	69bb      	ldr	r3, [r7, #24]
 801ce06:	69ba      	ldr	r2, [r7, #24]
 801ce08:	601a      	str	r2, [r3, #0]
 801ce0a:	e002      	b.n	801ce12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ce0c:	69bb      	ldr	r3, [r7, #24]
 801ce0e:	687a      	ldr	r2, [r7, #4]
 801ce10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	68fa      	ldr	r2, [r7, #12]
 801ce16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801ce18:	69bb      	ldr	r3, [r7, #24]
 801ce1a:	68ba      	ldr	r2, [r7, #8]
 801ce1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801ce1e:	2101      	movs	r1, #1
 801ce20:	69b8      	ldr	r0, [r7, #24]
 801ce22:	f7ff ff3d 	bl	801cca0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801ce26:	69bb      	ldr	r3, [r7, #24]
 801ce28:	78fa      	ldrb	r2, [r7, #3]
 801ce2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ce2e:	bf00      	nop
 801ce30:	3710      	adds	r7, #16
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bd80      	pop	{r7, pc}

0801ce36 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ce36:	b580      	push	{r7, lr}
 801ce38:	b08a      	sub	sp, #40	; 0x28
 801ce3a:	af00      	add	r7, sp, #0
 801ce3c:	60f8      	str	r0, [r7, #12]
 801ce3e:	60b9      	str	r1, [r7, #8]
 801ce40:	607a      	str	r2, [r7, #4]
 801ce42:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801ce44:	2300      	movs	r3, #0
 801ce46:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801ce4c:	6a3b      	ldr	r3, [r7, #32]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d102      	bne.n	801ce58 <xQueueGenericSend+0x22>
 801ce52:	f001 ff69 	bl	801ed28 <ulSetInterruptMask>
 801ce56:	e7fe      	b.n	801ce56 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801ce58:	68bb      	ldr	r3, [r7, #8]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d103      	bne.n	801ce66 <xQueueGenericSend+0x30>
 801ce5e:	6a3b      	ldr	r3, [r7, #32]
 801ce60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d101      	bne.n	801ce6a <xQueueGenericSend+0x34>
 801ce66:	2301      	movs	r3, #1
 801ce68:	e000      	b.n	801ce6c <xQueueGenericSend+0x36>
 801ce6a:	2300      	movs	r3, #0
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d102      	bne.n	801ce76 <xQueueGenericSend+0x40>
 801ce70:	f001 ff5a 	bl	801ed28 <ulSetInterruptMask>
 801ce74:	e7fe      	b.n	801ce74 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801ce76:	683b      	ldr	r3, [r7, #0]
 801ce78:	2b02      	cmp	r3, #2
 801ce7a:	d103      	bne.n	801ce84 <xQueueGenericSend+0x4e>
 801ce7c:	6a3b      	ldr	r3, [r7, #32]
 801ce7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce80:	2b01      	cmp	r3, #1
 801ce82:	d101      	bne.n	801ce88 <xQueueGenericSend+0x52>
 801ce84:	2301      	movs	r3, #1
 801ce86:	e000      	b.n	801ce8a <xQueueGenericSend+0x54>
 801ce88:	2300      	movs	r3, #0
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d102      	bne.n	801ce94 <xQueueGenericSend+0x5e>
 801ce8e:	f001 ff4b 	bl	801ed28 <ulSetInterruptMask>
 801ce92:	e7fe      	b.n	801ce92 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801ce94:	f001 f9e8 	bl	801e268 <xTaskGetSchedulerState>
 801ce98:	4603      	mov	r3, r0
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d102      	bne.n	801cea4 <xQueueGenericSend+0x6e>
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d101      	bne.n	801cea8 <xQueueGenericSend+0x72>
 801cea4:	2301      	movs	r3, #1
 801cea6:	e000      	b.n	801ceaa <xQueueGenericSend+0x74>
 801cea8:	2300      	movs	r3, #0
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d102      	bne.n	801ceb4 <xQueueGenericSend+0x7e>
 801ceae:	f001 ff3b 	bl	801ed28 <ulSetInterruptMask>
 801ceb2:	e7fe      	b.n	801ceb2 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801ceb4:	f001 fe06 	bl	801eac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801ceb8:	6a3b      	ldr	r3, [r7, #32]
 801ceba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cebc:	6a3b      	ldr	r3, [r7, #32]
 801cebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cec0:	429a      	cmp	r2, r3
 801cec2:	d302      	bcc.n	801ceca <xQueueGenericSend+0x94>
 801cec4:	683b      	ldr	r3, [r7, #0]
 801cec6:	2b02      	cmp	r3, #2
 801cec8:	d11d      	bne.n	801cf06 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801ceca:	683a      	ldr	r2, [r7, #0]
 801cecc:	68b9      	ldr	r1, [r7, #8]
 801cece:	6a38      	ldr	r0, [r7, #32]
 801ced0:	f000 f9a4 	bl	801d21c <prvCopyDataToQueue>
 801ced4:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ced6:	6a3b      	ldr	r3, [r7, #32]
 801ced8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d00a      	beq.n	801cef4 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801cede:	6a3b      	ldr	r3, [r7, #32]
 801cee0:	3324      	adds	r3, #36	; 0x24
 801cee2:	4618      	mov	r0, r3
 801cee4:	f001 f82a 	bl	801df3c <xTaskRemoveFromEventList>
 801cee8:	4603      	mov	r3, r0
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d007      	beq.n	801cefe <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801ceee:	f001 fdd7 	bl	801eaa0 <vPortYield>
 801cef2:	e004      	b.n	801cefe <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d001      	beq.n	801cefe <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801cefa:	f001 fdd1 	bl	801eaa0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801cefe:	f001 fdf3 	bl	801eae8 <vPortExitCritical>
				return pdPASS;
 801cf02:	2301      	movs	r3, #1
 801cf04:	e05c      	b.n	801cfc0 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d103      	bne.n	801cf14 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801cf0c:	f001 fdec 	bl	801eae8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801cf10:	2300      	movs	r3, #0
 801cf12:	e055      	b.n	801cfc0 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d106      	bne.n	801cf28 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801cf1a:	f107 0314 	add.w	r3, r7, #20
 801cf1e:	4618      	mov	r0, r3
 801cf20:	f001 f868 	bl	801dff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801cf24:	2301      	movs	r3, #1
 801cf26:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801cf28:	f001 fdde 	bl	801eae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801cf2c:	f000 fe14 	bl	801db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801cf30:	f001 fdc8 	bl	801eac4 <vPortEnterCritical>
 801cf34:	6a3b      	ldr	r3, [r7, #32]
 801cf36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801cf3a:	b25b      	sxtb	r3, r3
 801cf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf40:	d103      	bne.n	801cf4a <xQueueGenericSend+0x114>
 801cf42:	6a3b      	ldr	r3, [r7, #32]
 801cf44:	2200      	movs	r2, #0
 801cf46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cf4a:	6a3b      	ldr	r3, [r7, #32]
 801cf4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801cf50:	b25b      	sxtb	r3, r3
 801cf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf56:	d103      	bne.n	801cf60 <xQueueGenericSend+0x12a>
 801cf58:	6a3b      	ldr	r3, [r7, #32]
 801cf5a:	2200      	movs	r2, #0
 801cf5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cf60:	f001 fdc2 	bl	801eae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801cf64:	1d3a      	adds	r2, r7, #4
 801cf66:	f107 0314 	add.w	r3, r7, #20
 801cf6a:	4611      	mov	r1, r2
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	f001 f857 	bl	801e020 <xTaskCheckForTimeOut>
 801cf72:	4603      	mov	r3, r0
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d11d      	bne.n	801cfb4 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801cf78:	6a38      	ldr	r0, [r7, #32]
 801cf7a:	f000 fa47 	bl	801d40c <prvIsQueueFull>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d011      	beq.n	801cfa8 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801cf84:	6a3b      	ldr	r3, [r7, #32]
 801cf86:	3310      	adds	r3, #16
 801cf88:	687a      	ldr	r2, [r7, #4]
 801cf8a:	4611      	mov	r1, r2
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	f000 ff95 	bl	801debc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801cf92:	6a38      	ldr	r0, [r7, #32]
 801cf94:	f000 f9d2 	bl	801d33c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801cf98:	f000 fdec 	bl	801db74 <xTaskResumeAll>
 801cf9c:	4603      	mov	r3, r0
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d188      	bne.n	801ceb4 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801cfa2:	f001 fd7d 	bl	801eaa0 <vPortYield>
 801cfa6:	e785      	b.n	801ceb4 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801cfa8:	6a38      	ldr	r0, [r7, #32]
 801cfaa:	f000 f9c7 	bl	801d33c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801cfae:	f000 fde1 	bl	801db74 <xTaskResumeAll>
 801cfb2:	e77f      	b.n	801ceb4 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801cfb4:	6a38      	ldr	r0, [r7, #32]
 801cfb6:	f000 f9c1 	bl	801d33c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801cfba:	f000 fddb 	bl	801db74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801cfbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	3728      	adds	r7, #40	; 0x28
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	bd80      	pop	{r7, pc}

0801cfc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b08a      	sub	sp, #40	; 0x28
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	60f8      	str	r0, [r7, #12]
 801cfd0:	60b9      	str	r1, [r7, #8]
 801cfd2:	607a      	str	r2, [r7, #4]
 801cfd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801cfda:	6a3b      	ldr	r3, [r7, #32]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d102      	bne.n	801cfe6 <xQueueGenericSendFromISR+0x1e>
 801cfe0:	f001 fea2 	bl	801ed28 <ulSetInterruptMask>
 801cfe4:	e7fe      	b.n	801cfe4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801cfe6:	68bb      	ldr	r3, [r7, #8]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d103      	bne.n	801cff4 <xQueueGenericSendFromISR+0x2c>
 801cfec:	6a3b      	ldr	r3, [r7, #32]
 801cfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d101      	bne.n	801cff8 <xQueueGenericSendFromISR+0x30>
 801cff4:	2301      	movs	r3, #1
 801cff6:	e000      	b.n	801cffa <xQueueGenericSendFromISR+0x32>
 801cff8:	2300      	movs	r3, #0
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d102      	bne.n	801d004 <xQueueGenericSendFromISR+0x3c>
 801cffe:	f001 fe93 	bl	801ed28 <ulSetInterruptMask>
 801d002:	e7fe      	b.n	801d002 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801d004:	683b      	ldr	r3, [r7, #0]
 801d006:	2b02      	cmp	r3, #2
 801d008:	d103      	bne.n	801d012 <xQueueGenericSendFromISR+0x4a>
 801d00a:	6a3b      	ldr	r3, [r7, #32]
 801d00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d00e:	2b01      	cmp	r3, #1
 801d010:	d101      	bne.n	801d016 <xQueueGenericSendFromISR+0x4e>
 801d012:	2301      	movs	r3, #1
 801d014:	e000      	b.n	801d018 <xQueueGenericSendFromISR+0x50>
 801d016:	2300      	movs	r3, #0
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d102      	bne.n	801d022 <xQueueGenericSendFromISR+0x5a>
 801d01c:	f001 fe84 	bl	801ed28 <ulSetInterruptMask>
 801d020:	e7fe      	b.n	801d020 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801d022:	f001 fe81 	bl	801ed28 <ulSetInterruptMask>
 801d026:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801d028:	6a3b      	ldr	r3, [r7, #32]
 801d02a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d02c:	6a3b      	ldr	r3, [r7, #32]
 801d02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d030:	429a      	cmp	r2, r3
 801d032:	d302      	bcc.n	801d03a <xQueueGenericSendFromISR+0x72>
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	2b02      	cmp	r3, #2
 801d038:	d12d      	bne.n	801d096 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801d03a:	6a3b      	ldr	r3, [r7, #32]
 801d03c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d040:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d042:	6a3b      	ldr	r3, [r7, #32]
 801d044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d046:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801d048:	683a      	ldr	r2, [r7, #0]
 801d04a:	68b9      	ldr	r1, [r7, #8]
 801d04c:	6a38      	ldr	r0, [r7, #32]
 801d04e:	f000 f8e5 	bl	801d21c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801d052:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d056:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d05a:	d112      	bne.n	801d082 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d05c:	6a3b      	ldr	r3, [r7, #32]
 801d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d060:	2b00      	cmp	r3, #0
 801d062:	d015      	beq.n	801d090 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d064:	6a3b      	ldr	r3, [r7, #32]
 801d066:	3324      	adds	r3, #36	; 0x24
 801d068:	4618      	mov	r0, r3
 801d06a:	f000 ff67 	bl	801df3c <xTaskRemoveFromEventList>
 801d06e:	4603      	mov	r3, r0
 801d070:	2b00      	cmp	r3, #0
 801d072:	d00d      	beq.n	801d090 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	2b00      	cmp	r3, #0
 801d078:	d00a      	beq.n	801d090 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	2201      	movs	r2, #1
 801d07e:	601a      	str	r2, [r3, #0]
 801d080:	e006      	b.n	801d090 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801d082:	7efb      	ldrb	r3, [r7, #27]
 801d084:	3301      	adds	r3, #1
 801d086:	b2db      	uxtb	r3, r3
 801d088:	b25a      	sxtb	r2, r3
 801d08a:	6a3b      	ldr	r3, [r7, #32]
 801d08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801d090:	2301      	movs	r3, #1
 801d092:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801d094:	e001      	b.n	801d09a <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801d096:	2300      	movs	r3, #0
 801d098:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801d09a:	69f8      	ldr	r0, [r7, #28]
 801d09c:	f001 fe51 	bl	801ed42 <vClearInterruptMask>

	return xReturn;
 801d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	3728      	adds	r7, #40	; 0x28
 801d0a6:	46bd      	mov	sp, r7
 801d0a8:	bd80      	pop	{r7, pc}

0801d0aa <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801d0aa:	b580      	push	{r7, lr}
 801d0ac:	b08a      	sub	sp, #40	; 0x28
 801d0ae:	af00      	add	r7, sp, #0
 801d0b0:	60f8      	str	r0, [r7, #12]
 801d0b2:	60b9      	str	r1, [r7, #8]
 801d0b4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801d0be:	6a3b      	ldr	r3, [r7, #32]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d102      	bne.n	801d0ca <xQueueReceive+0x20>
 801d0c4:	f001 fe30 	bl	801ed28 <ulSetInterruptMask>
 801d0c8:	e7fe      	b.n	801d0c8 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801d0ca:	68bb      	ldr	r3, [r7, #8]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d103      	bne.n	801d0d8 <xQueueReceive+0x2e>
 801d0d0:	6a3b      	ldr	r3, [r7, #32]
 801d0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d101      	bne.n	801d0dc <xQueueReceive+0x32>
 801d0d8:	2301      	movs	r3, #1
 801d0da:	e000      	b.n	801d0de <xQueueReceive+0x34>
 801d0dc:	2300      	movs	r3, #0
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d102      	bne.n	801d0e8 <xQueueReceive+0x3e>
 801d0e2:	f001 fe21 	bl	801ed28 <ulSetInterruptMask>
 801d0e6:	e7fe      	b.n	801d0e6 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801d0e8:	f001 f8be 	bl	801e268 <xTaskGetSchedulerState>
 801d0ec:	4603      	mov	r3, r0
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d102      	bne.n	801d0f8 <xQueueReceive+0x4e>
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d101      	bne.n	801d0fc <xQueueReceive+0x52>
 801d0f8:	2301      	movs	r3, #1
 801d0fa:	e000      	b.n	801d0fe <xQueueReceive+0x54>
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d102      	bne.n	801d108 <xQueueReceive+0x5e>
 801d102:	f001 fe11 	bl	801ed28 <ulSetInterruptMask>
 801d106:	e7fe      	b.n	801d106 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801d108:	f001 fcdc 	bl	801eac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d10c:	6a3b      	ldr	r3, [r7, #32]
 801d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d110:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d112:	69fb      	ldr	r3, [r7, #28]
 801d114:	2b00      	cmp	r3, #0
 801d116:	d019      	beq.n	801d14c <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801d118:	68b9      	ldr	r1, [r7, #8]
 801d11a:	6a38      	ldr	r0, [r7, #32]
 801d11c:	f000 f8e8 	bl	801d2f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801d120:	69fb      	ldr	r3, [r7, #28]
 801d122:	1e5a      	subs	r2, r3, #1
 801d124:	6a3b      	ldr	r3, [r7, #32]
 801d126:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d128:	6a3b      	ldr	r3, [r7, #32]
 801d12a:	691b      	ldr	r3, [r3, #16]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d009      	beq.n	801d144 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d130:	6a3b      	ldr	r3, [r7, #32]
 801d132:	3310      	adds	r3, #16
 801d134:	4618      	mov	r0, r3
 801d136:	f000 ff01 	bl	801df3c <xTaskRemoveFromEventList>
 801d13a:	4603      	mov	r3, r0
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d001      	beq.n	801d144 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801d140:	f001 fcae 	bl	801eaa0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801d144:	f001 fcd0 	bl	801eae8 <vPortExitCritical>
				return pdPASS;
 801d148:	2301      	movs	r3, #1
 801d14a:	e063      	b.n	801d214 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d103      	bne.n	801d15a <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801d152:	f001 fcc9 	bl	801eae8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801d156:	2300      	movs	r3, #0
 801d158:	e05c      	b.n	801d214 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d106      	bne.n	801d16e <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801d160:	f107 0314 	add.w	r3, r7, #20
 801d164:	4618      	mov	r0, r3
 801d166:	f000 ff45 	bl	801dff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801d16a:	2301      	movs	r3, #1
 801d16c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801d16e:	f001 fcbb 	bl	801eae8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801d172:	f000 fcf1 	bl	801db58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801d176:	f001 fca5 	bl	801eac4 <vPortEnterCritical>
 801d17a:	6a3b      	ldr	r3, [r7, #32]
 801d17c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d180:	b25b      	sxtb	r3, r3
 801d182:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d186:	d103      	bne.n	801d190 <xQueueReceive+0xe6>
 801d188:	6a3b      	ldr	r3, [r7, #32]
 801d18a:	2200      	movs	r2, #0
 801d18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d190:	6a3b      	ldr	r3, [r7, #32]
 801d192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d196:	b25b      	sxtb	r3, r3
 801d198:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d19c:	d103      	bne.n	801d1a6 <xQueueReceive+0xfc>
 801d19e:	6a3b      	ldr	r3, [r7, #32]
 801d1a0:	2200      	movs	r2, #0
 801d1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d1a6:	f001 fc9f 	bl	801eae8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801d1aa:	1d3a      	adds	r2, r7, #4
 801d1ac:	f107 0314 	add.w	r3, r7, #20
 801d1b0:	4611      	mov	r1, r2
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f000 ff34 	bl	801e020 <xTaskCheckForTimeOut>
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d11d      	bne.n	801d1fa <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801d1be:	6a38      	ldr	r0, [r7, #32]
 801d1c0:	f000 f90e 	bl	801d3e0 <prvIsQueueEmpty>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d011      	beq.n	801d1ee <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801d1ca:	6a3b      	ldr	r3, [r7, #32]
 801d1cc:	3324      	adds	r3, #36	; 0x24
 801d1ce:	687a      	ldr	r2, [r7, #4]
 801d1d0:	4611      	mov	r1, r2
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	f000 fe72 	bl	801debc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801d1d8:	6a38      	ldr	r0, [r7, #32]
 801d1da:	f000 f8af 	bl	801d33c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801d1de:	f000 fcc9 	bl	801db74 <xTaskResumeAll>
 801d1e2:	4603      	mov	r3, r0
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d18f      	bne.n	801d108 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801d1e8:	f001 fc5a 	bl	801eaa0 <vPortYield>
 801d1ec:	e78c      	b.n	801d108 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801d1ee:	6a38      	ldr	r0, [r7, #32]
 801d1f0:	f000 f8a4 	bl	801d33c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801d1f4:	f000 fcbe 	bl	801db74 <xTaskResumeAll>
 801d1f8:	e786      	b.n	801d108 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801d1fa:	6a38      	ldr	r0, [r7, #32]
 801d1fc:	f000 f89e 	bl	801d33c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801d200:	f000 fcb8 	bl	801db74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801d204:	6a38      	ldr	r0, [r7, #32]
 801d206:	f000 f8eb 	bl	801d3e0 <prvIsQueueEmpty>
 801d20a:	4603      	mov	r3, r0
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	f43f af7b 	beq.w	801d108 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801d212:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801d214:	4618      	mov	r0, r3
 801d216:	3728      	adds	r7, #40	; 0x28
 801d218:	46bd      	mov	sp, r7
 801d21a:	bd80      	pop	{r7, pc}

0801d21c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b086      	sub	sp, #24
 801d220:	af00      	add	r7, sp, #0
 801d222:	60f8      	str	r0, [r7, #12]
 801d224:	60b9      	str	r1, [r7, #8]
 801d226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801d228:	2300      	movs	r3, #0
 801d22a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d230:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d236:	2b00      	cmp	r3, #0
 801d238:	d10d      	bne.n	801d256 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d14d      	bne.n	801d2de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	689b      	ldr	r3, [r3, #8]
 801d246:	4618      	mov	r0, r3
 801d248:	f001 f82c 	bl	801e2a4 <xTaskPriorityDisinherit>
 801d24c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	2200      	movs	r2, #0
 801d252:	609a      	str	r2, [r3, #8]
 801d254:	e043      	b.n	801d2de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	2b00      	cmp	r3, #0
 801d25a:	d119      	bne.n	801d290 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	6858      	ldr	r0, [r3, #4]
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d264:	461a      	mov	r2, r3
 801d266:	68b9      	ldr	r1, [r7, #8]
 801d268:	f004 fc8d 	bl	8021b86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	685a      	ldr	r2, [r3, #4]
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d274:	441a      	add	r2, r3
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	685a      	ldr	r2, [r3, #4]
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	689b      	ldr	r3, [r3, #8]
 801d282:	429a      	cmp	r2, r3
 801d284:	d32b      	bcc.n	801d2de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	681a      	ldr	r2, [r3, #0]
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	605a      	str	r2, [r3, #4]
 801d28e:	e026      	b.n	801d2de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	68d8      	ldr	r0, [r3, #12]
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d298:	461a      	mov	r2, r3
 801d29a:	68b9      	ldr	r1, [r7, #8]
 801d29c:	f004 fc73 	bl	8021b86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801d2a0:	68fb      	ldr	r3, [r7, #12]
 801d2a2:	68da      	ldr	r2, [r3, #12]
 801d2a4:	68fb      	ldr	r3, [r7, #12]
 801d2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2a8:	425b      	negs	r3, r3
 801d2aa:	441a      	add	r2, r3
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	68da      	ldr	r2, [r3, #12]
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	429a      	cmp	r2, r3
 801d2ba:	d207      	bcs.n	801d2cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	689a      	ldr	r2, [r3, #8]
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2c4:	425b      	negs	r3, r3
 801d2c6:	441a      	add	r2, r3
 801d2c8:	68fb      	ldr	r3, [r7, #12]
 801d2ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	2b02      	cmp	r3, #2
 801d2d0:	d105      	bne.n	801d2de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801d2d2:	693b      	ldr	r3, [r7, #16]
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d002      	beq.n	801d2de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801d2d8:	693b      	ldr	r3, [r7, #16]
 801d2da:	3b01      	subs	r3, #1
 801d2dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801d2de:	693b      	ldr	r3, [r7, #16]
 801d2e0:	1c5a      	adds	r2, r3, #1
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801d2e6:	697b      	ldr	r3, [r7, #20]
}
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	3718      	adds	r7, #24
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	bd80      	pop	{r7, pc}

0801d2f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801d2f0:	b580      	push	{r7, lr}
 801d2f2:	b082      	sub	sp, #8
 801d2f4:	af00      	add	r7, sp, #0
 801d2f6:	6078      	str	r0, [r7, #4]
 801d2f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2fe:	2b00      	cmp	r3, #0
 801d300:	d018      	beq.n	801d334 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	68da      	ldr	r2, [r3, #12]
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d30a:	441a      	add	r2, r3
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	68da      	ldr	r2, [r3, #12]
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	689b      	ldr	r3, [r3, #8]
 801d318:	429a      	cmp	r2, r3
 801d31a:	d303      	bcc.n	801d324 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	681a      	ldr	r2, [r3, #0]
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	68d9      	ldr	r1, [r3, #12]
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d32c:	461a      	mov	r2, r3
 801d32e:	6838      	ldr	r0, [r7, #0]
 801d330:	f004 fc29 	bl	8021b86 <memcpy>
	}
}
 801d334:	bf00      	nop
 801d336:	3708      	adds	r7, #8
 801d338:	46bd      	mov	sp, r7
 801d33a:	bd80      	pop	{r7, pc}

0801d33c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b084      	sub	sp, #16
 801d340:	af00      	add	r7, sp, #0
 801d342:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801d344:	f001 fbbe 	bl	801eac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d34e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d350:	e011      	b.n	801d376 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d356:	2b00      	cmp	r3, #0
 801d358:	d012      	beq.n	801d380 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	3324      	adds	r3, #36	; 0x24
 801d35e:	4618      	mov	r0, r3
 801d360:	f000 fdec 	bl	801df3c <xTaskRemoveFromEventList>
 801d364:	4603      	mov	r3, r0
 801d366:	2b00      	cmp	r3, #0
 801d368:	d001      	beq.n	801d36e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801d36a:	f000 feab 	bl	801e0c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801d36e:	7bfb      	ldrb	r3, [r7, #15]
 801d370:	3b01      	subs	r3, #1
 801d372:	b2db      	uxtb	r3, r3
 801d374:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801d376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	dce9      	bgt.n	801d352 <prvUnlockQueue+0x16>
 801d37e:	e000      	b.n	801d382 <prvUnlockQueue+0x46>
					break;
 801d380:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	22ff      	movs	r2, #255	; 0xff
 801d386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801d38a:	f001 fbad 	bl	801eae8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801d38e:	f001 fb99 	bl	801eac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d398:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d39a:	e011      	b.n	801d3c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	691b      	ldr	r3, [r3, #16]
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d012      	beq.n	801d3ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	3310      	adds	r3, #16
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f000 fdc7 	bl	801df3c <xTaskRemoveFromEventList>
 801d3ae:	4603      	mov	r3, r0
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d001      	beq.n	801d3b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801d3b4:	f000 fe86 	bl	801e0c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801d3b8:	7bbb      	ldrb	r3, [r7, #14]
 801d3ba:	3b01      	subs	r3, #1
 801d3bc:	b2db      	uxtb	r3, r3
 801d3be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801d3c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	dce9      	bgt.n	801d39c <prvUnlockQueue+0x60>
 801d3c8:	e000      	b.n	801d3cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801d3ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	22ff      	movs	r2, #255	; 0xff
 801d3d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801d3d4:	f001 fb88 	bl	801eae8 <vPortExitCritical>
}
 801d3d8:	bf00      	nop
 801d3da:	3710      	adds	r7, #16
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bd80      	pop	{r7, pc}

0801d3e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801d3e0:	b580      	push	{r7, lr}
 801d3e2:	b084      	sub	sp, #16
 801d3e4:	af00      	add	r7, sp, #0
 801d3e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d3e8:	f001 fb6c 	bl	801eac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d102      	bne.n	801d3fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801d3f4:	2301      	movs	r3, #1
 801d3f6:	60fb      	str	r3, [r7, #12]
 801d3f8:	e001      	b.n	801d3fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d3fe:	f001 fb73 	bl	801eae8 <vPortExitCritical>

	return xReturn;
 801d402:	68fb      	ldr	r3, [r7, #12]
}
 801d404:	4618      	mov	r0, r3
 801d406:	3710      	adds	r7, #16
 801d408:	46bd      	mov	sp, r7
 801d40a:	bd80      	pop	{r7, pc}

0801d40c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801d40c:	b580      	push	{r7, lr}
 801d40e:	b084      	sub	sp, #16
 801d410:	af00      	add	r7, sp, #0
 801d412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801d414:	f001 fb56 	bl	801eac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d420:	429a      	cmp	r2, r3
 801d422:	d102      	bne.n	801d42a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801d424:	2301      	movs	r3, #1
 801d426:	60fb      	str	r3, [r7, #12]
 801d428:	e001      	b.n	801d42e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801d42a:	2300      	movs	r3, #0
 801d42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801d42e:	f001 fb5b 	bl	801eae8 <vPortExitCritical>

	return xReturn;
 801d432:	68fb      	ldr	r3, [r7, #12]
}
 801d434:	4618      	mov	r0, r3
 801d436:	3710      	adds	r7, #16
 801d438:	46bd      	mov	sp, r7
 801d43a:	bd80      	pop	{r7, pc}

0801d43c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801d43c:	b480      	push	{r7}
 801d43e:	b085      	sub	sp, #20
 801d440:	af00      	add	r7, sp, #0
 801d442:	6078      	str	r0, [r7, #4]
 801d444:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d446:	2300      	movs	r3, #0
 801d448:	60fb      	str	r3, [r7, #12]
 801d44a:	e014      	b.n	801d476 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801d44c:	4a0f      	ldr	r2, [pc, #60]	; (801d48c <vQueueAddToRegistry+0x50>)
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d454:	2b00      	cmp	r3, #0
 801d456:	d10b      	bne.n	801d470 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801d458:	490c      	ldr	r1, [pc, #48]	; (801d48c <vQueueAddToRegistry+0x50>)
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	683a      	ldr	r2, [r7, #0]
 801d45e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801d462:	4a0a      	ldr	r2, [pc, #40]	; (801d48c <vQueueAddToRegistry+0x50>)
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	00db      	lsls	r3, r3, #3
 801d468:	4413      	add	r3, r2
 801d46a:	687a      	ldr	r2, [r7, #4]
 801d46c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801d46e:	e006      	b.n	801d47e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	3301      	adds	r3, #1
 801d474:	60fb      	str	r3, [r7, #12]
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	2b07      	cmp	r3, #7
 801d47a:	d9e7      	bls.n	801d44c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801d47c:	bf00      	nop
 801d47e:	bf00      	nop
 801d480:	3714      	adds	r7, #20
 801d482:	46bd      	mov	sp, r7
 801d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d488:	4770      	bx	lr
 801d48a:	bf00      	nop
 801d48c:	2000129c 	.word	0x2000129c

0801d490 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801d490:	b580      	push	{r7, lr}
 801d492:	b086      	sub	sp, #24
 801d494:	af00      	add	r7, sp, #0
 801d496:	60f8      	str	r0, [r7, #12]
 801d498:	60b9      	str	r1, [r7, #8]
 801d49a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801d4a0:	f001 fb10 	bl	801eac4 <vPortEnterCritical>
 801d4a4:	697b      	ldr	r3, [r7, #20]
 801d4a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801d4aa:	b25b      	sxtb	r3, r3
 801d4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4b0:	d103      	bne.n	801d4ba <vQueueWaitForMessageRestricted+0x2a>
 801d4b2:	697b      	ldr	r3, [r7, #20]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d4ba:	697b      	ldr	r3, [r7, #20]
 801d4bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801d4c0:	b25b      	sxtb	r3, r3
 801d4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d4c6:	d103      	bne.n	801d4d0 <vQueueWaitForMessageRestricted+0x40>
 801d4c8:	697b      	ldr	r3, [r7, #20]
 801d4ca:	2200      	movs	r2, #0
 801d4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801d4d0:	f001 fb0a 	bl	801eae8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801d4d4:	697b      	ldr	r3, [r7, #20]
 801d4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d106      	bne.n	801d4ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801d4dc:	697b      	ldr	r3, [r7, #20]
 801d4de:	3324      	adds	r3, #36	; 0x24
 801d4e0:	687a      	ldr	r2, [r7, #4]
 801d4e2:	68b9      	ldr	r1, [r7, #8]
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	f000 fd05 	bl	801def4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801d4ea:	6978      	ldr	r0, [r7, #20]
 801d4ec:	f7ff ff26 	bl	801d33c <prvUnlockQueue>
	}
 801d4f0:	bf00      	nop
 801d4f2:	3718      	adds	r7, #24
 801d4f4:	46bd      	mov	sp, r7
 801d4f6:	bd80      	pop	{r7, pc}

0801d4f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b08c      	sub	sp, #48	; 0x30
 801d4fc:	af04      	add	r7, sp, #16
 801d4fe:	60f8      	str	r0, [r7, #12]
 801d500:	60b9      	str	r1, [r7, #8]
 801d502:	607a      	str	r2, [r7, #4]
 801d504:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d102      	bne.n	801d512 <xTaskCreateStatic+0x1a>
 801d50c:	f001 fc0c 	bl	801ed28 <ulSetInterruptMask>
 801d510:	e7fe      	b.n	801d510 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801d512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d514:	2b00      	cmp	r3, #0
 801d516:	d102      	bne.n	801d51e <xTaskCreateStatic+0x26>
 801d518:	f001 fc06 	bl	801ed28 <ulSetInterruptMask>
 801d51c:	e7fe      	b.n	801d51c <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801d51e:	235c      	movs	r3, #92	; 0x5c
 801d520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801d522:	697b      	ldr	r3, [r7, #20]
 801d524:	2b5c      	cmp	r3, #92	; 0x5c
 801d526:	d002      	beq.n	801d52e <xTaskCreateStatic+0x36>
 801d528:	f001 fbfe 	bl	801ed28 <ulSetInterruptMask>
 801d52c:	e7fe      	b.n	801d52c <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801d52e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801d530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d532:	2b00      	cmp	r3, #0
 801d534:	d01e      	beq.n	801d574 <xTaskCreateStatic+0x7c>
 801d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d01b      	beq.n	801d574 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801d53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d53e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801d540:	69fb      	ldr	r3, [r7, #28]
 801d542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d544:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801d546:	69fb      	ldr	r3, [r7, #28]
 801d548:	2202      	movs	r2, #2
 801d54a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801d54e:	2300      	movs	r3, #0
 801d550:	9303      	str	r3, [sp, #12]
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	9302      	str	r3, [sp, #8]
 801d556:	f107 0318 	add.w	r3, r7, #24
 801d55a:	9301      	str	r3, [sp, #4]
 801d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d55e:	9300      	str	r3, [sp, #0]
 801d560:	683b      	ldr	r3, [r7, #0]
 801d562:	687a      	ldr	r2, [r7, #4]
 801d564:	68b9      	ldr	r1, [r7, #8]
 801d566:	68f8      	ldr	r0, [r7, #12]
 801d568:	f000 f850 	bl	801d60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d56c:	69f8      	ldr	r0, [r7, #28]
 801d56e:	f000 f8d7 	bl	801d720 <prvAddNewTaskToReadyList>
 801d572:	e001      	b.n	801d578 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 801d574:	2300      	movs	r3, #0
 801d576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801d578:	69bb      	ldr	r3, [r7, #24]
	}
 801d57a:	4618      	mov	r0, r3
 801d57c:	3720      	adds	r7, #32
 801d57e:	46bd      	mov	sp, r7
 801d580:	bd80      	pop	{r7, pc}

0801d582 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801d582:	b580      	push	{r7, lr}
 801d584:	b08c      	sub	sp, #48	; 0x30
 801d586:	af04      	add	r7, sp, #16
 801d588:	60f8      	str	r0, [r7, #12]
 801d58a:	60b9      	str	r1, [r7, #8]
 801d58c:	603b      	str	r3, [r7, #0]
 801d58e:	4613      	mov	r3, r2
 801d590:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801d592:	88fb      	ldrh	r3, [r7, #6]
 801d594:	009b      	lsls	r3, r3, #2
 801d596:	4618      	mov	r0, r3
 801d598:	f001 fc26 	bl	801ede8 <pvPortMalloc>
 801d59c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801d59e:	697b      	ldr	r3, [r7, #20]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d00e      	beq.n	801d5c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801d5a4:	205c      	movs	r0, #92	; 0x5c
 801d5a6:	f001 fc1f 	bl	801ede8 <pvPortMalloc>
 801d5aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801d5ac:	69fb      	ldr	r3, [r7, #28]
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d003      	beq.n	801d5ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	697a      	ldr	r2, [r7, #20]
 801d5b6:	631a      	str	r2, [r3, #48]	; 0x30
 801d5b8:	e005      	b.n	801d5c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801d5ba:	6978      	ldr	r0, [r7, #20]
 801d5bc:	f001 fcc8 	bl	801ef50 <vPortFree>
 801d5c0:	e001      	b.n	801d5c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801d5c6:	69fb      	ldr	r3, [r7, #28]
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d017      	beq.n	801d5fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801d5cc:	69fb      	ldr	r3, [r7, #28]
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801d5d4:	88fa      	ldrh	r2, [r7, #6]
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	9303      	str	r3, [sp, #12]
 801d5da:	69fb      	ldr	r3, [r7, #28]
 801d5dc:	9302      	str	r3, [sp, #8]
 801d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5e0:	9301      	str	r3, [sp, #4]
 801d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5e4:	9300      	str	r3, [sp, #0]
 801d5e6:	683b      	ldr	r3, [r7, #0]
 801d5e8:	68b9      	ldr	r1, [r7, #8]
 801d5ea:	68f8      	ldr	r0, [r7, #12]
 801d5ec:	f000 f80e 	bl	801d60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801d5f0:	69f8      	ldr	r0, [r7, #28]
 801d5f2:	f000 f895 	bl	801d720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801d5f6:	2301      	movs	r3, #1
 801d5f8:	61bb      	str	r3, [r7, #24]
 801d5fa:	e002      	b.n	801d602 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801d5fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d600:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801d602:	69bb      	ldr	r3, [r7, #24]
	}
 801d604:	4618      	mov	r0, r3
 801d606:	3720      	adds	r7, #32
 801d608:	46bd      	mov	sp, r7
 801d60a:	bd80      	pop	{r7, pc}

0801d60c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801d60c:	b580      	push	{r7, lr}
 801d60e:	b086      	sub	sp, #24
 801d610:	af00      	add	r7, sp, #0
 801d612:	60f8      	str	r0, [r7, #12]
 801d614:	60b9      	str	r1, [r7, #8]
 801d616:	607a      	str	r2, [r7, #4]
 801d618:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d61c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	009b      	lsls	r3, r3, #2
 801d622:	461a      	mov	r2, r3
 801d624:	21a5      	movs	r1, #165	; 0xa5
 801d626:	f004 f9de 	bl	80219e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d62c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d634:	3b01      	subs	r3, #1
 801d636:	009b      	lsls	r3, r3, #2
 801d638:	4413      	add	r3, r2
 801d63a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801d63c:	693b      	ldr	r3, [r7, #16]
 801d63e:	f023 0307 	bic.w	r3, r3, #7
 801d642:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801d644:	693b      	ldr	r3, [r7, #16]
 801d646:	f003 0307 	and.w	r3, r3, #7
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d002      	beq.n	801d654 <prvInitialiseNewTask+0x48>
 801d64e:	f001 fb6b 	bl	801ed28 <ulSetInterruptMask>
 801d652:	e7fe      	b.n	801d652 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801d654:	68bb      	ldr	r3, [r7, #8]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d01f      	beq.n	801d69a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d65a:	2300      	movs	r3, #0
 801d65c:	617b      	str	r3, [r7, #20]
 801d65e:	e012      	b.n	801d686 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801d660:	68ba      	ldr	r2, [r7, #8]
 801d662:	697b      	ldr	r3, [r7, #20]
 801d664:	4413      	add	r3, r2
 801d666:	7819      	ldrb	r1, [r3, #0]
 801d668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d66a:	697b      	ldr	r3, [r7, #20]
 801d66c:	4413      	add	r3, r2
 801d66e:	3334      	adds	r3, #52	; 0x34
 801d670:	460a      	mov	r2, r1
 801d672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801d674:	68ba      	ldr	r2, [r7, #8]
 801d676:	697b      	ldr	r3, [r7, #20]
 801d678:	4413      	add	r3, r2
 801d67a:	781b      	ldrb	r3, [r3, #0]
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d006      	beq.n	801d68e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	3301      	adds	r3, #1
 801d684:	617b      	str	r3, [r7, #20]
 801d686:	697b      	ldr	r3, [r7, #20]
 801d688:	2b0f      	cmp	r3, #15
 801d68a:	d9e9      	bls.n	801d660 <prvInitialiseNewTask+0x54>
 801d68c:	e000      	b.n	801d690 <prvInitialiseNewTask+0x84>
			{
				break;
 801d68e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d692:	2200      	movs	r2, #0
 801d694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801d698:	e003      	b.n	801d6a2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801d69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d69c:	2200      	movs	r2, #0
 801d69e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801d6a2:	6a3b      	ldr	r3, [r7, #32]
 801d6a4:	2b37      	cmp	r3, #55	; 0x37
 801d6a6:	d901      	bls.n	801d6ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801d6a8:	2337      	movs	r3, #55	; 0x37
 801d6aa:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ae:	6a3a      	ldr	r2, [r7, #32]
 801d6b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801d6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6b4:	6a3a      	ldr	r2, [r7, #32]
 801d6b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ba:	2200      	movs	r2, #0
 801d6bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801d6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6c0:	3304      	adds	r3, #4
 801d6c2:	4618      	mov	r0, r3
 801d6c4:	f7ff fa58 	bl	801cb78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ca:	3318      	adds	r3, #24
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f7ff fa53 	bl	801cb78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d6d8:	6a3b      	ldr	r3, [r7, #32]
 801d6da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801d6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6f0:	2200      	movs	r2, #0
 801d6f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801d6fa:	683b      	ldr	r3, [r7, #0]
 801d6fc:	68fa      	ldr	r2, [r7, #12]
 801d6fe:	6938      	ldr	r0, [r7, #16]
 801d700:	f001 fa3c 	bl	801eb7c <pxPortInitialiseStack>
 801d704:	4602      	mov	r2, r0
 801d706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d708:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d002      	beq.n	801d716 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d716:	bf00      	nop
 801d718:	3718      	adds	r7, #24
 801d71a:	46bd      	mov	sp, r7
 801d71c:	bd80      	pop	{r7, pc}
	...

0801d720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801d720:	b580      	push	{r7, lr}
 801d722:	b082      	sub	sp, #8
 801d724:	af00      	add	r7, sp, #0
 801d726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801d728:	f001 f9cc 	bl	801eac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801d72c:	4b2a      	ldr	r3, [pc, #168]	; (801d7d8 <prvAddNewTaskToReadyList+0xb8>)
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	3301      	adds	r3, #1
 801d732:	4a29      	ldr	r2, [pc, #164]	; (801d7d8 <prvAddNewTaskToReadyList+0xb8>)
 801d734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801d736:	4b29      	ldr	r3, [pc, #164]	; (801d7dc <prvAddNewTaskToReadyList+0xbc>)
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d109      	bne.n	801d752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801d73e:	4a27      	ldr	r2, [pc, #156]	; (801d7dc <prvAddNewTaskToReadyList+0xbc>)
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801d744:	4b24      	ldr	r3, [pc, #144]	; (801d7d8 <prvAddNewTaskToReadyList+0xb8>)
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	2b01      	cmp	r3, #1
 801d74a:	d110      	bne.n	801d76e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801d74c:	f000 fcd6 	bl	801e0fc <prvInitialiseTaskLists>
 801d750:	e00d      	b.n	801d76e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801d752:	4b23      	ldr	r3, [pc, #140]	; (801d7e0 <prvAddNewTaskToReadyList+0xc0>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	2b00      	cmp	r3, #0
 801d758:	d109      	bne.n	801d76e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801d75a:	4b20      	ldr	r3, [pc, #128]	; (801d7dc <prvAddNewTaskToReadyList+0xbc>)
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d764:	429a      	cmp	r2, r3
 801d766:	d802      	bhi.n	801d76e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801d768:	4a1c      	ldr	r2, [pc, #112]	; (801d7dc <prvAddNewTaskToReadyList+0xbc>)
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801d76e:	4b1d      	ldr	r3, [pc, #116]	; (801d7e4 <prvAddNewTaskToReadyList+0xc4>)
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	3301      	adds	r3, #1
 801d774:	4a1b      	ldr	r2, [pc, #108]	; (801d7e4 <prvAddNewTaskToReadyList+0xc4>)
 801d776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801d778:	4b1a      	ldr	r3, [pc, #104]	; (801d7e4 <prvAddNewTaskToReadyList+0xc4>)
 801d77a:	681a      	ldr	r2, [r3, #0]
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801d780:	687b      	ldr	r3, [r7, #4]
 801d782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d784:	4b18      	ldr	r3, [pc, #96]	; (801d7e8 <prvAddNewTaskToReadyList+0xc8>)
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	429a      	cmp	r2, r3
 801d78a:	d903      	bls.n	801d794 <prvAddNewTaskToReadyList+0x74>
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d790:	4a15      	ldr	r2, [pc, #84]	; (801d7e8 <prvAddNewTaskToReadyList+0xc8>)
 801d792:	6013      	str	r3, [r2, #0]
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d798:	4613      	mov	r3, r2
 801d79a:	009b      	lsls	r3, r3, #2
 801d79c:	4413      	add	r3, r2
 801d79e:	009b      	lsls	r3, r3, #2
 801d7a0:	4a12      	ldr	r2, [pc, #72]	; (801d7ec <prvAddNewTaskToReadyList+0xcc>)
 801d7a2:	441a      	add	r2, r3
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	3304      	adds	r3, #4
 801d7a8:	4619      	mov	r1, r3
 801d7aa:	4610      	mov	r0, r2
 801d7ac:	f7ff f9f1 	bl	801cb92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801d7b0:	f001 f99a 	bl	801eae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801d7b4:	4b0a      	ldr	r3, [pc, #40]	; (801d7e0 <prvAddNewTaskToReadyList+0xc0>)
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d008      	beq.n	801d7ce <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801d7bc:	4b07      	ldr	r3, [pc, #28]	; (801d7dc <prvAddNewTaskToReadyList+0xbc>)
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7c6:	429a      	cmp	r2, r3
 801d7c8:	d201      	bcs.n	801d7ce <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801d7ca:	f001 f969 	bl	801eaa0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801d7ce:	bf00      	nop
 801d7d0:	3708      	adds	r7, #8
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	bd80      	pop	{r7, pc}
 801d7d6:	bf00      	nop
 801d7d8:	200017b0 	.word	0x200017b0
 801d7dc:	200012dc 	.word	0x200012dc
 801d7e0:	200017bc 	.word	0x200017bc
 801d7e4:	200017cc 	.word	0x200017cc
 801d7e8:	200017b8 	.word	0x200017b8
 801d7ec:	200012e0 	.word	0x200012e0

0801d7f0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801d7f0:	b580      	push	{r7, lr}
 801d7f2:	b086      	sub	sp, #24
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
 801d7f8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	2b00      	cmp	r3, #0
 801d802:	d102      	bne.n	801d80a <vTaskDelayUntil+0x1a>
 801d804:	f001 fa90 	bl	801ed28 <ulSetInterruptMask>
 801d808:	e7fe      	b.n	801d808 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 801d80a:	683b      	ldr	r3, [r7, #0]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d102      	bne.n	801d816 <vTaskDelayUntil+0x26>
 801d810:	f001 fa8a 	bl	801ed28 <ulSetInterruptMask>
 801d814:	e7fe      	b.n	801d814 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801d816:	4b23      	ldr	r3, [pc, #140]	; (801d8a4 <vTaskDelayUntil+0xb4>)
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d002      	beq.n	801d824 <vTaskDelayUntil+0x34>
 801d81e:	f001 fa83 	bl	801ed28 <ulSetInterruptMask>
 801d822:	e7fe      	b.n	801d822 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801d824:	f000 f998 	bl	801db58 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801d828:	4b1f      	ldr	r3, [pc, #124]	; (801d8a8 <vTaskDelayUntil+0xb8>)
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	683a      	ldr	r2, [r7, #0]
 801d834:	4413      	add	r3, r2
 801d836:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	693a      	ldr	r2, [r7, #16]
 801d83e:	429a      	cmp	r2, r3
 801d840:	d20b      	bcs.n	801d85a <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	68fa      	ldr	r2, [r7, #12]
 801d848:	429a      	cmp	r2, r3
 801d84a:	d211      	bcs.n	801d870 <vTaskDelayUntil+0x80>
 801d84c:	68fa      	ldr	r2, [r7, #12]
 801d84e:	693b      	ldr	r3, [r7, #16]
 801d850:	429a      	cmp	r2, r3
 801d852:	d90d      	bls.n	801d870 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801d854:	2301      	movs	r3, #1
 801d856:	617b      	str	r3, [r7, #20]
 801d858:	e00a      	b.n	801d870 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	68fa      	ldr	r2, [r7, #12]
 801d860:	429a      	cmp	r2, r3
 801d862:	d303      	bcc.n	801d86c <vTaskDelayUntil+0x7c>
 801d864:	68fa      	ldr	r2, [r7, #12]
 801d866:	693b      	ldr	r3, [r7, #16]
 801d868:	429a      	cmp	r2, r3
 801d86a:	d901      	bls.n	801d870 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801d86c:	2301      	movs	r3, #1
 801d86e:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	68fa      	ldr	r2, [r7, #12]
 801d874:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801d876:	697b      	ldr	r3, [r7, #20]
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d006      	beq.n	801d88a <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801d87c:	68fa      	ldr	r2, [r7, #12]
 801d87e:	693b      	ldr	r3, [r7, #16]
 801d880:	1ad3      	subs	r3, r2, r3
 801d882:	2100      	movs	r1, #0
 801d884:	4618      	mov	r0, r3
 801d886:	f000 fd6b 	bl	801e360 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801d88a:	f000 f973 	bl	801db74 <xTaskResumeAll>
 801d88e:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801d890:	68bb      	ldr	r3, [r7, #8]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d101      	bne.n	801d89a <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 801d896:	f001 f903 	bl	801eaa0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801d89a:	bf00      	nop
 801d89c:	3718      	adds	r7, #24
 801d89e:	46bd      	mov	sp, r7
 801d8a0:	bd80      	pop	{r7, pc}
 801d8a2:	bf00      	nop
 801d8a4:	200017d8 	.word	0x200017d8
 801d8a8:	200017b4 	.word	0x200017b4

0801d8ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b084      	sub	sp, #16
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d00f      	beq.n	801d8de <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801d8be:	4b0c      	ldr	r3, [pc, #48]	; (801d8f0 <vTaskDelay+0x44>)
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d002      	beq.n	801d8cc <vTaskDelay+0x20>
 801d8c6:	f001 fa2f 	bl	801ed28 <ulSetInterruptMask>
 801d8ca:	e7fe      	b.n	801d8ca <vTaskDelay+0x1e>
			vTaskSuspendAll();
 801d8cc:	f000 f944 	bl	801db58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801d8d0:	2100      	movs	r1, #0
 801d8d2:	6878      	ldr	r0, [r7, #4]
 801d8d4:	f000 fd44 	bl	801e360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801d8d8:	f000 f94c 	bl	801db74 <xTaskResumeAll>
 801d8dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	2b00      	cmp	r3, #0
 801d8e2:	d101      	bne.n	801d8e8 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801d8e4:	f001 f8dc 	bl	801eaa0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801d8e8:	bf00      	nop
 801d8ea:	3710      	adds	r7, #16
 801d8ec:	46bd      	mov	sp, r7
 801d8ee:	bd80      	pop	{r7, pc}
 801d8f0:	200017d8 	.word	0x200017d8

0801d8f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801d8f4:	b580      	push	{r7, lr}
 801d8f6:	b084      	sub	sp, #16
 801d8f8:	af00      	add	r7, sp, #0
 801d8fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801d8fc:	f001 f8e2 	bl	801eac4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	2b00      	cmp	r3, #0
 801d904:	d102      	bne.n	801d90c <vTaskSuspend+0x18>
 801d906:	4b29      	ldr	r3, [pc, #164]	; (801d9ac <vTaskSuspend+0xb8>)
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	e000      	b.n	801d90e <vTaskSuspend+0x1a>
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	3304      	adds	r3, #4
 801d914:	4618      	mov	r0, r3
 801d916:	f7ff f999 	bl	801cc4c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d004      	beq.n	801d92c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	3318      	adds	r3, #24
 801d926:	4618      	mov	r0, r3
 801d928:	f7ff f990 	bl	801cc4c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	3304      	adds	r3, #4
 801d930:	4619      	mov	r1, r3
 801d932:	481f      	ldr	r0, [pc, #124]	; (801d9b0 <vTaskSuspend+0xbc>)
 801d934:	f7ff f92d 	bl	801cb92 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801d93e:	b2db      	uxtb	r3, r3
 801d940:	2b01      	cmp	r3, #1
 801d942:	d103      	bne.n	801d94c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	2200      	movs	r2, #0
 801d948:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801d94c:	f001 f8cc 	bl	801eae8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801d950:	4b18      	ldr	r3, [pc, #96]	; (801d9b4 <vTaskSuspend+0xc0>)
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d005      	beq.n	801d964 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801d958:	f001 f8b4 	bl	801eac4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801d95c:	f000 fc64 	bl	801e228 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801d960:	f001 f8c2 	bl	801eae8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801d964:	4b11      	ldr	r3, [pc, #68]	; (801d9ac <vTaskSuspend+0xb8>)
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	68fa      	ldr	r2, [r7, #12]
 801d96a:	429a      	cmp	r2, r3
 801d96c:	d119      	bne.n	801d9a2 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 801d96e:	4b11      	ldr	r3, [pc, #68]	; (801d9b4 <vTaskSuspend+0xc0>)
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d009      	beq.n	801d98a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801d976:	4b10      	ldr	r3, [pc, #64]	; (801d9b8 <vTaskSuspend+0xc4>)
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d002      	beq.n	801d984 <vTaskSuspend+0x90>
 801d97e:	f001 f9d3 	bl	801ed28 <ulSetInterruptMask>
 801d982:	e7fe      	b.n	801d982 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801d984:	f001 f88c 	bl	801eaa0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801d988:	e00b      	b.n	801d9a2 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801d98a:	4b09      	ldr	r3, [pc, #36]	; (801d9b0 <vTaskSuspend+0xbc>)
 801d98c:	681a      	ldr	r2, [r3, #0]
 801d98e:	4b0b      	ldr	r3, [pc, #44]	; (801d9bc <vTaskSuspend+0xc8>)
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	429a      	cmp	r2, r3
 801d994:	d103      	bne.n	801d99e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801d996:	4b05      	ldr	r3, [pc, #20]	; (801d9ac <vTaskSuspend+0xb8>)
 801d998:	2200      	movs	r2, #0
 801d99a:	601a      	str	r2, [r3, #0]
	}
 801d99c:	e001      	b.n	801d9a2 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 801d99e:	f000 fa39 	bl	801de14 <vTaskSwitchContext>
	}
 801d9a2:	bf00      	nop
 801d9a4:	3710      	adds	r7, #16
 801d9a6:	46bd      	mov	sp, r7
 801d9a8:	bd80      	pop	{r7, pc}
 801d9aa:	bf00      	nop
 801d9ac:	200012dc 	.word	0x200012dc
 801d9b0:	2000179c 	.word	0x2000179c
 801d9b4:	200017bc 	.word	0x200017bc
 801d9b8:	200017d8 	.word	0x200017d8
 801d9bc:	200017b0 	.word	0x200017b0

0801d9c0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b084      	sub	sp, #16
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d102      	bne.n	801d9dc <prvTaskIsTaskSuspended+0x1c>
 801d9d6:	f001 f9a7 	bl	801ed28 <ulSetInterruptMask>
 801d9da:	e7fe      	b.n	801d9da <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801d9dc:	68bb      	ldr	r3, [r7, #8]
 801d9de:	695b      	ldr	r3, [r3, #20]
 801d9e0:	4a09      	ldr	r2, [pc, #36]	; (801da08 <prvTaskIsTaskSuspended+0x48>)
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d10a      	bne.n	801d9fc <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801d9e6:	68bb      	ldr	r3, [r7, #8]
 801d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9ea:	4a08      	ldr	r2, [pc, #32]	; (801da0c <prvTaskIsTaskSuspended+0x4c>)
 801d9ec:	4293      	cmp	r3, r2
 801d9ee:	d005      	beq.n	801d9fc <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801d9f0:	68bb      	ldr	r3, [r7, #8]
 801d9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d101      	bne.n	801d9fc <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 801d9f8:	2301      	movs	r3, #1
 801d9fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801d9fc:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801d9fe:	4618      	mov	r0, r3
 801da00:	3710      	adds	r7, #16
 801da02:	46bd      	mov	sp, r7
 801da04:	bd80      	pop	{r7, pc}
 801da06:	bf00      	nop
 801da08:	2000179c 	.word	0x2000179c
 801da0c:	20001770 	.word	0x20001770

0801da10 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801da10:	b580      	push	{r7, lr}
 801da12:	b084      	sub	sp, #16
 801da14:	af00      	add	r7, sp, #0
 801da16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d102      	bne.n	801da28 <vTaskResume+0x18>
 801da22:	f001 f981 	bl	801ed28 <ulSetInterruptMask>
 801da26:	e7fe      	b.n	801da26 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801da28:	4b1d      	ldr	r3, [pc, #116]	; (801daa0 <vTaskResume+0x90>)
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	68fa      	ldr	r2, [r7, #12]
 801da2e:	429a      	cmp	r2, r3
 801da30:	d032      	beq.n	801da98 <vTaskResume+0x88>
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d02f      	beq.n	801da98 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 801da38:	f001 f844 	bl	801eac4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801da3c:	68f8      	ldr	r0, [r7, #12]
 801da3e:	f7ff ffbf 	bl	801d9c0 <prvTaskIsTaskSuspended>
 801da42:	4603      	mov	r3, r0
 801da44:	2b00      	cmp	r3, #0
 801da46:	d025      	beq.n	801da94 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801da48:	68fb      	ldr	r3, [r7, #12]
 801da4a:	3304      	adds	r3, #4
 801da4c:	4618      	mov	r0, r3
 801da4e:	f7ff f8fd 	bl	801cc4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801da52:	68fb      	ldr	r3, [r7, #12]
 801da54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da56:	4b13      	ldr	r3, [pc, #76]	; (801daa4 <vTaskResume+0x94>)
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	429a      	cmp	r2, r3
 801da5c:	d903      	bls.n	801da66 <vTaskResume+0x56>
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da62:	4a10      	ldr	r2, [pc, #64]	; (801daa4 <vTaskResume+0x94>)
 801da64:	6013      	str	r3, [r2, #0]
 801da66:	68fb      	ldr	r3, [r7, #12]
 801da68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da6a:	4613      	mov	r3, r2
 801da6c:	009b      	lsls	r3, r3, #2
 801da6e:	4413      	add	r3, r2
 801da70:	009b      	lsls	r3, r3, #2
 801da72:	4a0d      	ldr	r2, [pc, #52]	; (801daa8 <vTaskResume+0x98>)
 801da74:	441a      	add	r2, r3
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	3304      	adds	r3, #4
 801da7a:	4619      	mov	r1, r3
 801da7c:	4610      	mov	r0, r2
 801da7e:	f7ff f888 	bl	801cb92 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da86:	4b06      	ldr	r3, [pc, #24]	; (801daa0 <vTaskResume+0x90>)
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da8c:	429a      	cmp	r2, r3
 801da8e:	d301      	bcc.n	801da94 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801da90:	f001 f806 	bl	801eaa0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801da94:	f001 f828 	bl	801eae8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801da98:	bf00      	nop
 801da9a:	3710      	adds	r7, #16
 801da9c:	46bd      	mov	sp, r7
 801da9e:	bd80      	pop	{r7, pc}
 801daa0:	200012dc 	.word	0x200012dc
 801daa4:	200017b8 	.word	0x200017b8
 801daa8:	200012e0 	.word	0x200012e0

0801daac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801daac:	b580      	push	{r7, lr}
 801daae:	b088      	sub	sp, #32
 801dab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801dab2:	2300      	movs	r3, #0
 801dab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801dab6:	2300      	movs	r3, #0
 801dab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801daba:	463a      	mov	r2, r7
 801dabc:	1d39      	adds	r1, r7, #4
 801dabe:	f107 0308 	add.w	r3, r7, #8
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7ff f804 	bl	801cad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801dac8:	6839      	ldr	r1, [r7, #0]
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	68ba      	ldr	r2, [r7, #8]
 801dace:	9202      	str	r2, [sp, #8]
 801dad0:	9301      	str	r3, [sp, #4]
 801dad2:	2300      	movs	r3, #0
 801dad4:	9300      	str	r3, [sp, #0]
 801dad6:	2300      	movs	r3, #0
 801dad8:	460a      	mov	r2, r1
 801dada:	4919      	ldr	r1, [pc, #100]	; (801db40 <vTaskStartScheduler+0x94>)
 801dadc:	4819      	ldr	r0, [pc, #100]	; (801db44 <vTaskStartScheduler+0x98>)
 801dade:	f7ff fd0b 	bl	801d4f8 <xTaskCreateStatic>
 801dae2:	4603      	mov	r3, r0
 801dae4:	4a18      	ldr	r2, [pc, #96]	; (801db48 <vTaskStartScheduler+0x9c>)
 801dae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801dae8:	4b17      	ldr	r3, [pc, #92]	; (801db48 <vTaskStartScheduler+0x9c>)
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	2b00      	cmp	r3, #0
 801daee:	d002      	beq.n	801daf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801daf0:	2301      	movs	r3, #1
 801daf2:	60fb      	str	r3, [r7, #12]
 801daf4:	e001      	b.n	801dafa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801daf6:	2300      	movs	r3, #0
 801daf8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	2b01      	cmp	r3, #1
 801dafe:	d102      	bne.n	801db06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801db00:	f000 fc82 	bl	801e408 <xTimerCreateTimerTask>
 801db04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	2b01      	cmp	r3, #1
 801db0a:	d10e      	bne.n	801db2a <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801db0c:	f001 f90c 	bl	801ed28 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801db10:	4b0e      	ldr	r3, [pc, #56]	; (801db4c <vTaskStartScheduler+0xa0>)
 801db12:	f04f 32ff 	mov.w	r2, #4294967295
 801db16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801db18:	4b0d      	ldr	r3, [pc, #52]	; (801db50 <vTaskStartScheduler+0xa4>)
 801db1a:	2201      	movs	r2, #1
 801db1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801db1e:	4b0d      	ldr	r3, [pc, #52]	; (801db54 <vTaskStartScheduler+0xa8>)
 801db20:	2200      	movs	r2, #0
 801db22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801db24:	f001 f8b4 	bl	801ec90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801db28:	e006      	b.n	801db38 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db30:	d102      	bne.n	801db38 <vTaskStartScheduler+0x8c>
 801db32:	f001 f8f9 	bl	801ed28 <ulSetInterruptMask>
 801db36:	e7fe      	b.n	801db36 <vTaskStartScheduler+0x8a>
}
 801db38:	bf00      	nop
 801db3a:	3710      	adds	r7, #16
 801db3c:	46bd      	mov	sp, r7
 801db3e:	bd80      	pop	{r7, pc}
 801db40:	080230e4 	.word	0x080230e4
 801db44:	0801e0dd 	.word	0x0801e0dd
 801db48:	200017d4 	.word	0x200017d4
 801db4c:	200017d0 	.word	0x200017d0
 801db50:	200017bc 	.word	0x200017bc
 801db54:	200017b4 	.word	0x200017b4

0801db58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801db58:	b480      	push	{r7}
 801db5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801db5c:	4b04      	ldr	r3, [pc, #16]	; (801db70 <vTaskSuspendAll+0x18>)
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	3301      	adds	r3, #1
 801db62:	4a03      	ldr	r2, [pc, #12]	; (801db70 <vTaskSuspendAll+0x18>)
 801db64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801db66:	bf00      	nop
 801db68:	46bd      	mov	sp, r7
 801db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db6e:	4770      	bx	lr
 801db70:	200017d8 	.word	0x200017d8

0801db74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801db74:	b580      	push	{r7, lr}
 801db76:	b084      	sub	sp, #16
 801db78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801db7a:	2300      	movs	r3, #0
 801db7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801db7e:	2300      	movs	r3, #0
 801db80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801db82:	4b3b      	ldr	r3, [pc, #236]	; (801dc70 <xTaskResumeAll+0xfc>)
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	2b00      	cmp	r3, #0
 801db88:	d102      	bne.n	801db90 <xTaskResumeAll+0x1c>
 801db8a:	f001 f8cd 	bl	801ed28 <ulSetInterruptMask>
 801db8e:	e7fe      	b.n	801db8e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801db90:	f000 ff98 	bl	801eac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801db94:	4b36      	ldr	r3, [pc, #216]	; (801dc70 <xTaskResumeAll+0xfc>)
 801db96:	681b      	ldr	r3, [r3, #0]
 801db98:	3b01      	subs	r3, #1
 801db9a:	4a35      	ldr	r2, [pc, #212]	; (801dc70 <xTaskResumeAll+0xfc>)
 801db9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801db9e:	4b34      	ldr	r3, [pc, #208]	; (801dc70 <xTaskResumeAll+0xfc>)
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d15c      	bne.n	801dc60 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801dba6:	4b33      	ldr	r3, [pc, #204]	; (801dc74 <xTaskResumeAll+0x100>)
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d058      	beq.n	801dc60 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801dbae:	e02f      	b.n	801dc10 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801dbb0:	4b31      	ldr	r3, [pc, #196]	; (801dc78 <xTaskResumeAll+0x104>)
 801dbb2:	68db      	ldr	r3, [r3, #12]
 801dbb4:	68db      	ldr	r3, [r3, #12]
 801dbb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	3318      	adds	r3, #24
 801dbbc:	4618      	mov	r0, r3
 801dbbe:	f7ff f845 	bl	801cc4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	3304      	adds	r3, #4
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	f7ff f840 	bl	801cc4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbd0:	4b2a      	ldr	r3, [pc, #168]	; (801dc7c <xTaskResumeAll+0x108>)
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d903      	bls.n	801dbe0 <xTaskResumeAll+0x6c>
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dbdc:	4a27      	ldr	r2, [pc, #156]	; (801dc7c <xTaskResumeAll+0x108>)
 801dbde:	6013      	str	r3, [r2, #0]
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbe4:	4613      	mov	r3, r2
 801dbe6:	009b      	lsls	r3, r3, #2
 801dbe8:	4413      	add	r3, r2
 801dbea:	009b      	lsls	r3, r3, #2
 801dbec:	4a24      	ldr	r2, [pc, #144]	; (801dc80 <xTaskResumeAll+0x10c>)
 801dbee:	441a      	add	r2, r3
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	3304      	adds	r3, #4
 801dbf4:	4619      	mov	r1, r3
 801dbf6:	4610      	mov	r0, r2
 801dbf8:	f7fe ffcb 	bl	801cb92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc00:	4b20      	ldr	r3, [pc, #128]	; (801dc84 <xTaskResumeAll+0x110>)
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc06:	429a      	cmp	r2, r3
 801dc08:	d302      	bcc.n	801dc10 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801dc0a:	4b1f      	ldr	r3, [pc, #124]	; (801dc88 <xTaskResumeAll+0x114>)
 801dc0c:	2201      	movs	r2, #1
 801dc0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801dc10:	4b19      	ldr	r3, [pc, #100]	; (801dc78 <xTaskResumeAll+0x104>)
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d1cb      	bne.n	801dbb0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d001      	beq.n	801dc22 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801dc1e:	f000 fb03 	bl	801e228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801dc22:	4b1a      	ldr	r3, [pc, #104]	; (801dc8c <xTaskResumeAll+0x118>)
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d010      	beq.n	801dc50 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801dc2e:	f000 f83f 	bl	801dcb0 <xTaskIncrementTick>
 801dc32:	4603      	mov	r3, r0
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d002      	beq.n	801dc3e <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801dc38:	4b13      	ldr	r3, [pc, #76]	; (801dc88 <xTaskResumeAll+0x114>)
 801dc3a:	2201      	movs	r2, #1
 801dc3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	3b01      	subs	r3, #1
 801dc42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d1f1      	bne.n	801dc2e <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801dc4a:	4b10      	ldr	r3, [pc, #64]	; (801dc8c <xTaskResumeAll+0x118>)
 801dc4c:	2200      	movs	r2, #0
 801dc4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801dc50:	4b0d      	ldr	r3, [pc, #52]	; (801dc88 <xTaskResumeAll+0x114>)
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d003      	beq.n	801dc60 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801dc58:	2301      	movs	r3, #1
 801dc5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801dc5c:	f000 ff20 	bl	801eaa0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801dc60:	f000 ff42 	bl	801eae8 <vPortExitCritical>

	return xAlreadyYielded;
 801dc64:	68bb      	ldr	r3, [r7, #8]
}
 801dc66:	4618      	mov	r0, r3
 801dc68:	3710      	adds	r7, #16
 801dc6a:	46bd      	mov	sp, r7
 801dc6c:	bd80      	pop	{r7, pc}
 801dc6e:	bf00      	nop
 801dc70:	200017d8 	.word	0x200017d8
 801dc74:	200017b0 	.word	0x200017b0
 801dc78:	20001770 	.word	0x20001770
 801dc7c:	200017b8 	.word	0x200017b8
 801dc80:	200012e0 	.word	0x200012e0
 801dc84:	200012dc 	.word	0x200012dc
 801dc88:	200017c4 	.word	0x200017c4
 801dc8c:	200017c0 	.word	0x200017c0

0801dc90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801dc90:	b480      	push	{r7}
 801dc92:	b083      	sub	sp, #12
 801dc94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801dc96:	4b05      	ldr	r3, [pc, #20]	; (801dcac <xTaskGetTickCount+0x1c>)
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801dc9c:	687b      	ldr	r3, [r7, #4]
}
 801dc9e:	4618      	mov	r0, r3
 801dca0:	370c      	adds	r7, #12
 801dca2:	46bd      	mov	sp, r7
 801dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dca8:	4770      	bx	lr
 801dcaa:	bf00      	nop
 801dcac:	200017b4 	.word	0x200017b4

0801dcb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801dcb0:	b580      	push	{r7, lr}
 801dcb2:	b086      	sub	sp, #24
 801dcb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801dcb6:	2300      	movs	r3, #0
 801dcb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801dcba:	4b4b      	ldr	r3, [pc, #300]	; (801dde8 <xTaskIncrementTick+0x138>)
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	f040 8087 	bne.w	801ddd2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801dcc4:	4b49      	ldr	r3, [pc, #292]	; (801ddec <xTaskIncrementTick+0x13c>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	3301      	adds	r3, #1
 801dcca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801dccc:	4a47      	ldr	r2, [pc, #284]	; (801ddec <xTaskIncrementTick+0x13c>)
 801dcce:	693b      	ldr	r3, [r7, #16]
 801dcd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801dcd2:	693b      	ldr	r3, [r7, #16]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d118      	bne.n	801dd0a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801dcd8:	4b45      	ldr	r3, [pc, #276]	; (801ddf0 <xTaskIncrementTick+0x140>)
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d002      	beq.n	801dce8 <xTaskIncrementTick+0x38>
 801dce2:	f001 f821 	bl	801ed28 <ulSetInterruptMask>
 801dce6:	e7fe      	b.n	801dce6 <xTaskIncrementTick+0x36>
 801dce8:	4b41      	ldr	r3, [pc, #260]	; (801ddf0 <xTaskIncrementTick+0x140>)
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	60fb      	str	r3, [r7, #12]
 801dcee:	4b41      	ldr	r3, [pc, #260]	; (801ddf4 <xTaskIncrementTick+0x144>)
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	4a3f      	ldr	r2, [pc, #252]	; (801ddf0 <xTaskIncrementTick+0x140>)
 801dcf4:	6013      	str	r3, [r2, #0]
 801dcf6:	4a3f      	ldr	r2, [pc, #252]	; (801ddf4 <xTaskIncrementTick+0x144>)
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	6013      	str	r3, [r2, #0]
 801dcfc:	4b3e      	ldr	r3, [pc, #248]	; (801ddf8 <xTaskIncrementTick+0x148>)
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	3301      	adds	r3, #1
 801dd02:	4a3d      	ldr	r2, [pc, #244]	; (801ddf8 <xTaskIncrementTick+0x148>)
 801dd04:	6013      	str	r3, [r2, #0]
 801dd06:	f000 fa8f 	bl	801e228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801dd0a:	4b3c      	ldr	r3, [pc, #240]	; (801ddfc <xTaskIncrementTick+0x14c>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	693a      	ldr	r2, [r7, #16]
 801dd10:	429a      	cmp	r2, r3
 801dd12:	d349      	bcc.n	801dda8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801dd14:	4b36      	ldr	r3, [pc, #216]	; (801ddf0 <xTaskIncrementTick+0x140>)
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d104      	bne.n	801dd28 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801dd1e:	4b37      	ldr	r3, [pc, #220]	; (801ddfc <xTaskIncrementTick+0x14c>)
 801dd20:	f04f 32ff 	mov.w	r2, #4294967295
 801dd24:	601a      	str	r2, [r3, #0]
					break;
 801dd26:	e03f      	b.n	801dda8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801dd28:	4b31      	ldr	r3, [pc, #196]	; (801ddf0 <xTaskIncrementTick+0x140>)
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	68db      	ldr	r3, [r3, #12]
 801dd2e:	68db      	ldr	r3, [r3, #12]
 801dd30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801dd32:	68bb      	ldr	r3, [r7, #8]
 801dd34:	685b      	ldr	r3, [r3, #4]
 801dd36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801dd38:	693a      	ldr	r2, [r7, #16]
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	429a      	cmp	r2, r3
 801dd3e:	d203      	bcs.n	801dd48 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801dd40:	4a2e      	ldr	r2, [pc, #184]	; (801ddfc <xTaskIncrementTick+0x14c>)
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801dd46:	e02f      	b.n	801dda8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801dd48:	68bb      	ldr	r3, [r7, #8]
 801dd4a:	3304      	adds	r3, #4
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f7fe ff7d 	bl	801cc4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801dd52:	68bb      	ldr	r3, [r7, #8]
 801dd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d004      	beq.n	801dd64 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801dd5a:	68bb      	ldr	r3, [r7, #8]
 801dd5c:	3318      	adds	r3, #24
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7fe ff74 	bl	801cc4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801dd64:	68bb      	ldr	r3, [r7, #8]
 801dd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dd68:	4b25      	ldr	r3, [pc, #148]	; (801de00 <xTaskIncrementTick+0x150>)
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	429a      	cmp	r2, r3
 801dd6e:	d903      	bls.n	801dd78 <xTaskIncrementTick+0xc8>
 801dd70:	68bb      	ldr	r3, [r7, #8]
 801dd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd74:	4a22      	ldr	r2, [pc, #136]	; (801de00 <xTaskIncrementTick+0x150>)
 801dd76:	6013      	str	r3, [r2, #0]
 801dd78:	68bb      	ldr	r3, [r7, #8]
 801dd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dd7c:	4613      	mov	r3, r2
 801dd7e:	009b      	lsls	r3, r3, #2
 801dd80:	4413      	add	r3, r2
 801dd82:	009b      	lsls	r3, r3, #2
 801dd84:	4a1f      	ldr	r2, [pc, #124]	; (801de04 <xTaskIncrementTick+0x154>)
 801dd86:	441a      	add	r2, r3
 801dd88:	68bb      	ldr	r3, [r7, #8]
 801dd8a:	3304      	adds	r3, #4
 801dd8c:	4619      	mov	r1, r3
 801dd8e:	4610      	mov	r0, r2
 801dd90:	f7fe feff 	bl	801cb92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801dd94:	68bb      	ldr	r3, [r7, #8]
 801dd96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dd98:	4b1b      	ldr	r3, [pc, #108]	; (801de08 <xTaskIncrementTick+0x158>)
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd9e:	429a      	cmp	r2, r3
 801dda0:	d3b8      	bcc.n	801dd14 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801dda2:	2301      	movs	r3, #1
 801dda4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801dda6:	e7b5      	b.n	801dd14 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801dda8:	4b17      	ldr	r3, [pc, #92]	; (801de08 <xTaskIncrementTick+0x158>)
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ddae:	4915      	ldr	r1, [pc, #84]	; (801de04 <xTaskIncrementTick+0x154>)
 801ddb0:	4613      	mov	r3, r2
 801ddb2:	009b      	lsls	r3, r3, #2
 801ddb4:	4413      	add	r3, r2
 801ddb6:	009b      	lsls	r3, r3, #2
 801ddb8:	440b      	add	r3, r1
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	2b01      	cmp	r3, #1
 801ddbe:	d901      	bls.n	801ddc4 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801ddc0:	2301      	movs	r3, #1
 801ddc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801ddc4:	4b11      	ldr	r3, [pc, #68]	; (801de0c <xTaskIncrementTick+0x15c>)
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d007      	beq.n	801dddc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801ddcc:	2301      	movs	r3, #1
 801ddce:	617b      	str	r3, [r7, #20]
 801ddd0:	e004      	b.n	801dddc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801ddd2:	4b0f      	ldr	r3, [pc, #60]	; (801de10 <xTaskIncrementTick+0x160>)
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	3301      	adds	r3, #1
 801ddd8:	4a0d      	ldr	r2, [pc, #52]	; (801de10 <xTaskIncrementTick+0x160>)
 801ddda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801dddc:	697b      	ldr	r3, [r7, #20]
}
 801ddde:	4618      	mov	r0, r3
 801dde0:	3718      	adds	r7, #24
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bd80      	pop	{r7, pc}
 801dde6:	bf00      	nop
 801dde8:	200017d8 	.word	0x200017d8
 801ddec:	200017b4 	.word	0x200017b4
 801ddf0:	20001768 	.word	0x20001768
 801ddf4:	2000176c 	.word	0x2000176c
 801ddf8:	200017c8 	.word	0x200017c8
 801ddfc:	200017d0 	.word	0x200017d0
 801de00:	200017b8 	.word	0x200017b8
 801de04:	200012e0 	.word	0x200012e0
 801de08:	200012dc 	.word	0x200012dc
 801de0c:	200017c4 	.word	0x200017c4
 801de10:	200017c0 	.word	0x200017c0

0801de14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801de14:	b580      	push	{r7, lr}
 801de16:	b082      	sub	sp, #8
 801de18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801de1a:	4b23      	ldr	r3, [pc, #140]	; (801dea8 <vTaskSwitchContext+0x94>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d003      	beq.n	801de2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801de22:	4b22      	ldr	r3, [pc, #136]	; (801deac <vTaskSwitchContext+0x98>)
 801de24:	2201      	movs	r2, #1
 801de26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801de28:	e039      	b.n	801de9e <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801de2a:	4b20      	ldr	r3, [pc, #128]	; (801deac <vTaskSwitchContext+0x98>)
 801de2c:	2200      	movs	r2, #0
 801de2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801de30:	4b1f      	ldr	r3, [pc, #124]	; (801deb0 <vTaskSwitchContext+0x9c>)
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	607b      	str	r3, [r7, #4]
 801de36:	e008      	b.n	801de4a <vTaskSwitchContext+0x36>
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d102      	bne.n	801de44 <vTaskSwitchContext+0x30>
 801de3e:	f000 ff73 	bl	801ed28 <ulSetInterruptMask>
 801de42:	e7fe      	b.n	801de42 <vTaskSwitchContext+0x2e>
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	3b01      	subs	r3, #1
 801de48:	607b      	str	r3, [r7, #4]
 801de4a:	491a      	ldr	r1, [pc, #104]	; (801deb4 <vTaskSwitchContext+0xa0>)
 801de4c:	687a      	ldr	r2, [r7, #4]
 801de4e:	4613      	mov	r3, r2
 801de50:	009b      	lsls	r3, r3, #2
 801de52:	4413      	add	r3, r2
 801de54:	009b      	lsls	r3, r3, #2
 801de56:	440b      	add	r3, r1
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d0ec      	beq.n	801de38 <vTaskSwitchContext+0x24>
 801de5e:	687a      	ldr	r2, [r7, #4]
 801de60:	4613      	mov	r3, r2
 801de62:	009b      	lsls	r3, r3, #2
 801de64:	4413      	add	r3, r2
 801de66:	009b      	lsls	r3, r3, #2
 801de68:	4a12      	ldr	r2, [pc, #72]	; (801deb4 <vTaskSwitchContext+0xa0>)
 801de6a:	4413      	add	r3, r2
 801de6c:	603b      	str	r3, [r7, #0]
 801de6e:	683b      	ldr	r3, [r7, #0]
 801de70:	685b      	ldr	r3, [r3, #4]
 801de72:	685a      	ldr	r2, [r3, #4]
 801de74:	683b      	ldr	r3, [r7, #0]
 801de76:	605a      	str	r2, [r3, #4]
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	685a      	ldr	r2, [r3, #4]
 801de7c:	683b      	ldr	r3, [r7, #0]
 801de7e:	3308      	adds	r3, #8
 801de80:	429a      	cmp	r2, r3
 801de82:	d104      	bne.n	801de8e <vTaskSwitchContext+0x7a>
 801de84:	683b      	ldr	r3, [r7, #0]
 801de86:	685b      	ldr	r3, [r3, #4]
 801de88:	685a      	ldr	r2, [r3, #4]
 801de8a:	683b      	ldr	r3, [r7, #0]
 801de8c:	605a      	str	r2, [r3, #4]
 801de8e:	683b      	ldr	r3, [r7, #0]
 801de90:	685b      	ldr	r3, [r3, #4]
 801de92:	68db      	ldr	r3, [r3, #12]
 801de94:	4a08      	ldr	r2, [pc, #32]	; (801deb8 <vTaskSwitchContext+0xa4>)
 801de96:	6013      	str	r3, [r2, #0]
 801de98:	4a05      	ldr	r2, [pc, #20]	; (801deb0 <vTaskSwitchContext+0x9c>)
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	6013      	str	r3, [r2, #0]
}
 801de9e:	bf00      	nop
 801dea0:	3708      	adds	r7, #8
 801dea2:	46bd      	mov	sp, r7
 801dea4:	bd80      	pop	{r7, pc}
 801dea6:	bf00      	nop
 801dea8:	200017d8 	.word	0x200017d8
 801deac:	200017c4 	.word	0x200017c4
 801deb0:	200017b8 	.word	0x200017b8
 801deb4:	200012e0 	.word	0x200012e0
 801deb8:	200012dc 	.word	0x200012dc

0801debc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801debc:	b580      	push	{r7, lr}
 801debe:	b082      	sub	sp, #8
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	6078      	str	r0, [r7, #4]
 801dec4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d102      	bne.n	801ded2 <vTaskPlaceOnEventList+0x16>
 801decc:	f000 ff2c 	bl	801ed28 <ulSetInterruptMask>
 801ded0:	e7fe      	b.n	801ded0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ded2:	4b07      	ldr	r3, [pc, #28]	; (801def0 <vTaskPlaceOnEventList+0x34>)
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	3318      	adds	r3, #24
 801ded8:	4619      	mov	r1, r3
 801deda:	6878      	ldr	r0, [r7, #4]
 801dedc:	f7fe fe7d 	bl	801cbda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801dee0:	2101      	movs	r1, #1
 801dee2:	6838      	ldr	r0, [r7, #0]
 801dee4:	f000 fa3c 	bl	801e360 <prvAddCurrentTaskToDelayedList>
}
 801dee8:	bf00      	nop
 801deea:	3708      	adds	r7, #8
 801deec:	46bd      	mov	sp, r7
 801deee:	bd80      	pop	{r7, pc}
 801def0:	200012dc 	.word	0x200012dc

0801def4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801def4:	b580      	push	{r7, lr}
 801def6:	b084      	sub	sp, #16
 801def8:	af00      	add	r7, sp, #0
 801defa:	60f8      	str	r0, [r7, #12]
 801defc:	60b9      	str	r1, [r7, #8]
 801defe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	2b00      	cmp	r3, #0
 801df04:	d102      	bne.n	801df0c <vTaskPlaceOnEventListRestricted+0x18>
 801df06:	f000 ff0f 	bl	801ed28 <ulSetInterruptMask>
 801df0a:	e7fe      	b.n	801df0a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801df0c:	4b0a      	ldr	r3, [pc, #40]	; (801df38 <vTaskPlaceOnEventListRestricted+0x44>)
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	3318      	adds	r3, #24
 801df12:	4619      	mov	r1, r3
 801df14:	68f8      	ldr	r0, [r7, #12]
 801df16:	f7fe fe3c 	bl	801cb92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d002      	beq.n	801df26 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801df20:	f04f 33ff 	mov.w	r3, #4294967295
 801df24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801df26:	6879      	ldr	r1, [r7, #4]
 801df28:	68b8      	ldr	r0, [r7, #8]
 801df2a:	f000 fa19 	bl	801e360 <prvAddCurrentTaskToDelayedList>
	}
 801df2e:	bf00      	nop
 801df30:	3710      	adds	r7, #16
 801df32:	46bd      	mov	sp, r7
 801df34:	bd80      	pop	{r7, pc}
 801df36:	bf00      	nop
 801df38:	200012dc 	.word	0x200012dc

0801df3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801df3c:	b580      	push	{r7, lr}
 801df3e:	b084      	sub	sp, #16
 801df40:	af00      	add	r7, sp, #0
 801df42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	68db      	ldr	r3, [r3, #12]
 801df48:	68db      	ldr	r3, [r3, #12]
 801df4a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801df4c:	68bb      	ldr	r3, [r7, #8]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d102      	bne.n	801df58 <xTaskRemoveFromEventList+0x1c>
 801df52:	f000 fee9 	bl	801ed28 <ulSetInterruptMask>
 801df56:	e7fe      	b.n	801df56 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	3318      	adds	r3, #24
 801df5c:	4618      	mov	r0, r3
 801df5e:	f7fe fe75 	bl	801cc4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801df62:	4b1e      	ldr	r3, [pc, #120]	; (801dfdc <xTaskRemoveFromEventList+0xa0>)
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d11d      	bne.n	801dfa6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801df6a:	68bb      	ldr	r3, [r7, #8]
 801df6c:	3304      	adds	r3, #4
 801df6e:	4618      	mov	r0, r3
 801df70:	f7fe fe6c 	bl	801cc4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801df74:	68bb      	ldr	r3, [r7, #8]
 801df76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801df78:	4b19      	ldr	r3, [pc, #100]	; (801dfe0 <xTaskRemoveFromEventList+0xa4>)
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	429a      	cmp	r2, r3
 801df7e:	d903      	bls.n	801df88 <xTaskRemoveFromEventList+0x4c>
 801df80:	68bb      	ldr	r3, [r7, #8]
 801df82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df84:	4a16      	ldr	r2, [pc, #88]	; (801dfe0 <xTaskRemoveFromEventList+0xa4>)
 801df86:	6013      	str	r3, [r2, #0]
 801df88:	68bb      	ldr	r3, [r7, #8]
 801df8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801df8c:	4613      	mov	r3, r2
 801df8e:	009b      	lsls	r3, r3, #2
 801df90:	4413      	add	r3, r2
 801df92:	009b      	lsls	r3, r3, #2
 801df94:	4a13      	ldr	r2, [pc, #76]	; (801dfe4 <xTaskRemoveFromEventList+0xa8>)
 801df96:	441a      	add	r2, r3
 801df98:	68bb      	ldr	r3, [r7, #8]
 801df9a:	3304      	adds	r3, #4
 801df9c:	4619      	mov	r1, r3
 801df9e:	4610      	mov	r0, r2
 801dfa0:	f7fe fdf7 	bl	801cb92 <vListInsertEnd>
 801dfa4:	e005      	b.n	801dfb2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801dfa6:	68bb      	ldr	r3, [r7, #8]
 801dfa8:	3318      	adds	r3, #24
 801dfaa:	4619      	mov	r1, r3
 801dfac:	480e      	ldr	r0, [pc, #56]	; (801dfe8 <xTaskRemoveFromEventList+0xac>)
 801dfae:	f7fe fdf0 	bl	801cb92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801dfb2:	68bb      	ldr	r3, [r7, #8]
 801dfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dfb6:	4b0d      	ldr	r3, [pc, #52]	; (801dfec <xTaskRemoveFromEventList+0xb0>)
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfbc:	429a      	cmp	r2, r3
 801dfbe:	d905      	bls.n	801dfcc <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801dfc0:	2301      	movs	r3, #1
 801dfc2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801dfc4:	4b0a      	ldr	r3, [pc, #40]	; (801dff0 <xTaskRemoveFromEventList+0xb4>)
 801dfc6:	2201      	movs	r2, #1
 801dfc8:	601a      	str	r2, [r3, #0]
 801dfca:	e001      	b.n	801dfd0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801dfcc:	2300      	movs	r3, #0
 801dfce:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801dfd0:	68fb      	ldr	r3, [r7, #12]
}
 801dfd2:	4618      	mov	r0, r3
 801dfd4:	3710      	adds	r7, #16
 801dfd6:	46bd      	mov	sp, r7
 801dfd8:	bd80      	pop	{r7, pc}
 801dfda:	bf00      	nop
 801dfdc:	200017d8 	.word	0x200017d8
 801dfe0:	200017b8 	.word	0x200017b8
 801dfe4:	200012e0 	.word	0x200012e0
 801dfe8:	20001770 	.word	0x20001770
 801dfec:	200012dc 	.word	0x200012dc
 801dff0:	200017c4 	.word	0x200017c4

0801dff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801dff4:	b480      	push	{r7}
 801dff6:	b083      	sub	sp, #12
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801dffc:	4b06      	ldr	r3, [pc, #24]	; (801e018 <vTaskInternalSetTimeOutState+0x24>)
 801dffe:	681a      	ldr	r2, [r3, #0]
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801e004:	4b05      	ldr	r3, [pc, #20]	; (801e01c <vTaskInternalSetTimeOutState+0x28>)
 801e006:	681a      	ldr	r2, [r3, #0]
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	605a      	str	r2, [r3, #4]
}
 801e00c:	bf00      	nop
 801e00e:	370c      	adds	r7, #12
 801e010:	46bd      	mov	sp, r7
 801e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e016:	4770      	bx	lr
 801e018:	200017c8 	.word	0x200017c8
 801e01c:	200017b4 	.word	0x200017b4

0801e020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801e020:	b580      	push	{r7, lr}
 801e022:	b086      	sub	sp, #24
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
 801e028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d102      	bne.n	801e036 <xTaskCheckForTimeOut+0x16>
 801e030:	f000 fe7a 	bl	801ed28 <ulSetInterruptMask>
 801e034:	e7fe      	b.n	801e034 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801e036:	683b      	ldr	r3, [r7, #0]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d102      	bne.n	801e042 <xTaskCheckForTimeOut+0x22>
 801e03c:	f000 fe74 	bl	801ed28 <ulSetInterruptMask>
 801e040:	e7fe      	b.n	801e040 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801e042:	f000 fd3f 	bl	801eac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801e046:	4b1d      	ldr	r3, [pc, #116]	; (801e0bc <xTaskCheckForTimeOut+0x9c>)
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	685b      	ldr	r3, [r3, #4]
 801e050:	693a      	ldr	r2, [r7, #16]
 801e052:	1ad3      	subs	r3, r2, r3
 801e054:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801e056:	683b      	ldr	r3, [r7, #0]
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e05e:	d102      	bne.n	801e066 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801e060:	2300      	movs	r3, #0
 801e062:	617b      	str	r3, [r7, #20]
 801e064:	e023      	b.n	801e0ae <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	681a      	ldr	r2, [r3, #0]
 801e06a:	4b15      	ldr	r3, [pc, #84]	; (801e0c0 <xTaskCheckForTimeOut+0xa0>)
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	429a      	cmp	r2, r3
 801e070:	d007      	beq.n	801e082 <xTaskCheckForTimeOut+0x62>
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	685b      	ldr	r3, [r3, #4]
 801e076:	693a      	ldr	r2, [r7, #16]
 801e078:	429a      	cmp	r2, r3
 801e07a:	d302      	bcc.n	801e082 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801e07c:	2301      	movs	r3, #1
 801e07e:	617b      	str	r3, [r7, #20]
 801e080:	e015      	b.n	801e0ae <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	68fa      	ldr	r2, [r7, #12]
 801e088:	429a      	cmp	r2, r3
 801e08a:	d20b      	bcs.n	801e0a4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801e08c:	683b      	ldr	r3, [r7, #0]
 801e08e:	681a      	ldr	r2, [r3, #0]
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	1ad2      	subs	r2, r2, r3
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f7ff ffab 	bl	801dff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801e09e:	2300      	movs	r3, #0
 801e0a0:	617b      	str	r3, [r7, #20]
 801e0a2:	e004      	b.n	801e0ae <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801e0a4:	683b      	ldr	r3, [r7, #0]
 801e0a6:	2200      	movs	r2, #0
 801e0a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801e0aa:	2301      	movs	r3, #1
 801e0ac:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801e0ae:	f000 fd1b 	bl	801eae8 <vPortExitCritical>

	return xReturn;
 801e0b2:	697b      	ldr	r3, [r7, #20]
}
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	3718      	adds	r7, #24
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	bd80      	pop	{r7, pc}
 801e0bc:	200017b4 	.word	0x200017b4
 801e0c0:	200017c8 	.word	0x200017c8

0801e0c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801e0c4:	b480      	push	{r7}
 801e0c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801e0c8:	4b03      	ldr	r3, [pc, #12]	; (801e0d8 <vTaskMissedYield+0x14>)
 801e0ca:	2201      	movs	r2, #1
 801e0cc:	601a      	str	r2, [r3, #0]
}
 801e0ce:	bf00      	nop
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0d6:	4770      	bx	lr
 801e0d8:	200017c4 	.word	0x200017c4

0801e0dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b082      	sub	sp, #8
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801e0e4:	f000 f84a 	bl	801e17c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801e0e8:	4b03      	ldr	r3, [pc, #12]	; (801e0f8 <prvIdleTask+0x1c>)
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	2b01      	cmp	r3, #1
 801e0ee:	d9f9      	bls.n	801e0e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801e0f0:	f000 fcd6 	bl	801eaa0 <vPortYield>
		prvCheckTasksWaitingTermination();
 801e0f4:	e7f6      	b.n	801e0e4 <prvIdleTask+0x8>
 801e0f6:	bf00      	nop
 801e0f8:	200012e0 	.word	0x200012e0

0801e0fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801e0fc:	b580      	push	{r7, lr}
 801e0fe:	b082      	sub	sp, #8
 801e100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801e102:	2300      	movs	r3, #0
 801e104:	607b      	str	r3, [r7, #4]
 801e106:	e00c      	b.n	801e122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801e108:	687a      	ldr	r2, [r7, #4]
 801e10a:	4613      	mov	r3, r2
 801e10c:	009b      	lsls	r3, r3, #2
 801e10e:	4413      	add	r3, r2
 801e110:	009b      	lsls	r3, r3, #2
 801e112:	4a12      	ldr	r2, [pc, #72]	; (801e15c <prvInitialiseTaskLists+0x60>)
 801e114:	4413      	add	r3, r2
 801e116:	4618      	mov	r0, r3
 801e118:	f7fe fd0e 	bl	801cb38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	3301      	adds	r3, #1
 801e120:	607b      	str	r3, [r7, #4]
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	2b37      	cmp	r3, #55	; 0x37
 801e126:	d9ef      	bls.n	801e108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801e128:	480d      	ldr	r0, [pc, #52]	; (801e160 <prvInitialiseTaskLists+0x64>)
 801e12a:	f7fe fd05 	bl	801cb38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801e12e:	480d      	ldr	r0, [pc, #52]	; (801e164 <prvInitialiseTaskLists+0x68>)
 801e130:	f7fe fd02 	bl	801cb38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801e134:	480c      	ldr	r0, [pc, #48]	; (801e168 <prvInitialiseTaskLists+0x6c>)
 801e136:	f7fe fcff 	bl	801cb38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801e13a:	480c      	ldr	r0, [pc, #48]	; (801e16c <prvInitialiseTaskLists+0x70>)
 801e13c:	f7fe fcfc 	bl	801cb38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801e140:	480b      	ldr	r0, [pc, #44]	; (801e170 <prvInitialiseTaskLists+0x74>)
 801e142:	f7fe fcf9 	bl	801cb38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801e146:	4b0b      	ldr	r3, [pc, #44]	; (801e174 <prvInitialiseTaskLists+0x78>)
 801e148:	4a05      	ldr	r2, [pc, #20]	; (801e160 <prvInitialiseTaskLists+0x64>)
 801e14a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801e14c:	4b0a      	ldr	r3, [pc, #40]	; (801e178 <prvInitialiseTaskLists+0x7c>)
 801e14e:	4a05      	ldr	r2, [pc, #20]	; (801e164 <prvInitialiseTaskLists+0x68>)
 801e150:	601a      	str	r2, [r3, #0]
}
 801e152:	bf00      	nop
 801e154:	3708      	adds	r7, #8
 801e156:	46bd      	mov	sp, r7
 801e158:	bd80      	pop	{r7, pc}
 801e15a:	bf00      	nop
 801e15c:	200012e0 	.word	0x200012e0
 801e160:	20001740 	.word	0x20001740
 801e164:	20001754 	.word	0x20001754
 801e168:	20001770 	.word	0x20001770
 801e16c:	20001784 	.word	0x20001784
 801e170:	2000179c 	.word	0x2000179c
 801e174:	20001768 	.word	0x20001768
 801e178:	2000176c 	.word	0x2000176c

0801e17c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801e17c:	b580      	push	{r7, lr}
 801e17e:	b082      	sub	sp, #8
 801e180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e182:	e019      	b.n	801e1b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801e184:	f000 fc9e 	bl	801eac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e188:	4b10      	ldr	r3, [pc, #64]	; (801e1cc <prvCheckTasksWaitingTermination+0x50>)
 801e18a:	68db      	ldr	r3, [r3, #12]
 801e18c:	68db      	ldr	r3, [r3, #12]
 801e18e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	3304      	adds	r3, #4
 801e194:	4618      	mov	r0, r3
 801e196:	f7fe fd59 	bl	801cc4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801e19a:	4b0d      	ldr	r3, [pc, #52]	; (801e1d0 <prvCheckTasksWaitingTermination+0x54>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	3b01      	subs	r3, #1
 801e1a0:	4a0b      	ldr	r2, [pc, #44]	; (801e1d0 <prvCheckTasksWaitingTermination+0x54>)
 801e1a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801e1a4:	4b0b      	ldr	r3, [pc, #44]	; (801e1d4 <prvCheckTasksWaitingTermination+0x58>)
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	3b01      	subs	r3, #1
 801e1aa:	4a0a      	ldr	r2, [pc, #40]	; (801e1d4 <prvCheckTasksWaitingTermination+0x58>)
 801e1ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801e1ae:	f000 fc9b 	bl	801eae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801e1b2:	6878      	ldr	r0, [r7, #4]
 801e1b4:	f000 f810 	bl	801e1d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801e1b8:	4b06      	ldr	r3, [pc, #24]	; (801e1d4 <prvCheckTasksWaitingTermination+0x58>)
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d1e1      	bne.n	801e184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801e1c0:	bf00      	nop
 801e1c2:	bf00      	nop
 801e1c4:	3708      	adds	r7, #8
 801e1c6:	46bd      	mov	sp, r7
 801e1c8:	bd80      	pop	{r7, pc}
 801e1ca:	bf00      	nop
 801e1cc:	20001784 	.word	0x20001784
 801e1d0:	200017b0 	.word	0x200017b0
 801e1d4:	20001798 	.word	0x20001798

0801e1d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b082      	sub	sp, #8
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d108      	bne.n	801e1fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	f000 feae 	bl	801ef50 <vPortFree>
				vPortFree( pxTCB );
 801e1f4:	6878      	ldr	r0, [r7, #4]
 801e1f6:	f000 feab 	bl	801ef50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801e1fa:	e010      	b.n	801e21e <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801e202:	2b01      	cmp	r3, #1
 801e204:	d103      	bne.n	801e20e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801e206:	6878      	ldr	r0, [r7, #4]
 801e208:	f000 fea2 	bl	801ef50 <vPortFree>
	}
 801e20c:	e007      	b.n	801e21e <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801e214:	2b02      	cmp	r3, #2
 801e216:	d002      	beq.n	801e21e <prvDeleteTCB+0x46>
 801e218:	f000 fd86 	bl	801ed28 <ulSetInterruptMask>
 801e21c:	e7fe      	b.n	801e21c <prvDeleteTCB+0x44>
	}
 801e21e:	bf00      	nop
 801e220:	3708      	adds	r7, #8
 801e222:	46bd      	mov	sp, r7
 801e224:	bd80      	pop	{r7, pc}
	...

0801e228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801e228:	b480      	push	{r7}
 801e22a:	b083      	sub	sp, #12
 801e22c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801e22e:	4b0c      	ldr	r3, [pc, #48]	; (801e260 <prvResetNextTaskUnblockTime+0x38>)
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	2b00      	cmp	r3, #0
 801e236:	d104      	bne.n	801e242 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801e238:	4b0a      	ldr	r3, [pc, #40]	; (801e264 <prvResetNextTaskUnblockTime+0x3c>)
 801e23a:	f04f 32ff 	mov.w	r2, #4294967295
 801e23e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801e240:	e008      	b.n	801e254 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e242:	4b07      	ldr	r3, [pc, #28]	; (801e260 <prvResetNextTaskUnblockTime+0x38>)
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	68db      	ldr	r3, [r3, #12]
 801e248:	68db      	ldr	r3, [r3, #12]
 801e24a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	685b      	ldr	r3, [r3, #4]
 801e250:	4a04      	ldr	r2, [pc, #16]	; (801e264 <prvResetNextTaskUnblockTime+0x3c>)
 801e252:	6013      	str	r3, [r2, #0]
}
 801e254:	bf00      	nop
 801e256:	370c      	adds	r7, #12
 801e258:	46bd      	mov	sp, r7
 801e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e25e:	4770      	bx	lr
 801e260:	20001768 	.word	0x20001768
 801e264:	200017d0 	.word	0x200017d0

0801e268 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801e268:	b480      	push	{r7}
 801e26a:	b083      	sub	sp, #12
 801e26c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801e26e:	4b0b      	ldr	r3, [pc, #44]	; (801e29c <xTaskGetSchedulerState+0x34>)
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	2b00      	cmp	r3, #0
 801e274:	d102      	bne.n	801e27c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801e276:	2301      	movs	r3, #1
 801e278:	607b      	str	r3, [r7, #4]
 801e27a:	e008      	b.n	801e28e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801e27c:	4b08      	ldr	r3, [pc, #32]	; (801e2a0 <xTaskGetSchedulerState+0x38>)
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	2b00      	cmp	r3, #0
 801e282:	d102      	bne.n	801e28a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801e284:	2302      	movs	r3, #2
 801e286:	607b      	str	r3, [r7, #4]
 801e288:	e001      	b.n	801e28e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801e28a:	2300      	movs	r3, #0
 801e28c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801e28e:	687b      	ldr	r3, [r7, #4]
	}
 801e290:	4618      	mov	r0, r3
 801e292:	370c      	adds	r7, #12
 801e294:	46bd      	mov	sp, r7
 801e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e29a:	4770      	bx	lr
 801e29c:	200017bc 	.word	0x200017bc
 801e2a0:	200017d8 	.word	0x200017d8

0801e2a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801e2a4:	b580      	push	{r7, lr}
 801e2a6:	b084      	sub	sp, #16
 801e2a8:	af00      	add	r7, sp, #0
 801e2aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d046      	beq.n	801e348 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801e2ba:	4b26      	ldr	r3, [pc, #152]	; (801e354 <xTaskPriorityDisinherit+0xb0>)
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	68ba      	ldr	r2, [r7, #8]
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	d002      	beq.n	801e2ca <xTaskPriorityDisinherit+0x26>
 801e2c4:	f000 fd30 	bl	801ed28 <ulSetInterruptMask>
 801e2c8:	e7fe      	b.n	801e2c8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801e2ca:	68bb      	ldr	r3, [r7, #8]
 801e2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d102      	bne.n	801e2d8 <xTaskPriorityDisinherit+0x34>
 801e2d2:	f000 fd29 	bl	801ed28 <ulSetInterruptMask>
 801e2d6:	e7fe      	b.n	801e2d6 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801e2d8:	68bb      	ldr	r3, [r7, #8]
 801e2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2dc:	1e5a      	subs	r2, r3, #1
 801e2de:	68bb      	ldr	r3, [r7, #8]
 801e2e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801e2e2:	68bb      	ldr	r3, [r7, #8]
 801e2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e2e6:	68bb      	ldr	r3, [r7, #8]
 801e2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e2ea:	429a      	cmp	r2, r3
 801e2ec:	d02c      	beq.n	801e348 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801e2ee:	68bb      	ldr	r3, [r7, #8]
 801e2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d128      	bne.n	801e348 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e2f6:	68bb      	ldr	r3, [r7, #8]
 801e2f8:	3304      	adds	r3, #4
 801e2fa:	4618      	mov	r0, r3
 801e2fc:	f7fe fca6 	bl	801cc4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801e300:	68bb      	ldr	r3, [r7, #8]
 801e302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e304:	68bb      	ldr	r3, [r7, #8]
 801e306:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e308:	68bb      	ldr	r3, [r7, #8]
 801e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e30c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801e310:	68bb      	ldr	r3, [r7, #8]
 801e312:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801e314:	68bb      	ldr	r3, [r7, #8]
 801e316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e318:	4b0f      	ldr	r3, [pc, #60]	; (801e358 <xTaskPriorityDisinherit+0xb4>)
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	429a      	cmp	r2, r3
 801e31e:	d903      	bls.n	801e328 <xTaskPriorityDisinherit+0x84>
 801e320:	68bb      	ldr	r3, [r7, #8]
 801e322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e324:	4a0c      	ldr	r2, [pc, #48]	; (801e358 <xTaskPriorityDisinherit+0xb4>)
 801e326:	6013      	str	r3, [r2, #0]
 801e328:	68bb      	ldr	r3, [r7, #8]
 801e32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e32c:	4613      	mov	r3, r2
 801e32e:	009b      	lsls	r3, r3, #2
 801e330:	4413      	add	r3, r2
 801e332:	009b      	lsls	r3, r3, #2
 801e334:	4a09      	ldr	r2, [pc, #36]	; (801e35c <xTaskPriorityDisinherit+0xb8>)
 801e336:	441a      	add	r2, r3
 801e338:	68bb      	ldr	r3, [r7, #8]
 801e33a:	3304      	adds	r3, #4
 801e33c:	4619      	mov	r1, r3
 801e33e:	4610      	mov	r0, r2
 801e340:	f7fe fc27 	bl	801cb92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801e344:	2301      	movs	r3, #1
 801e346:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801e348:	68fb      	ldr	r3, [r7, #12]
	}
 801e34a:	4618      	mov	r0, r3
 801e34c:	3710      	adds	r7, #16
 801e34e:	46bd      	mov	sp, r7
 801e350:	bd80      	pop	{r7, pc}
 801e352:	bf00      	nop
 801e354:	200012dc 	.word	0x200012dc
 801e358:	200017b8 	.word	0x200017b8
 801e35c:	200012e0 	.word	0x200012e0

0801e360 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801e360:	b580      	push	{r7, lr}
 801e362:	b084      	sub	sp, #16
 801e364:	af00      	add	r7, sp, #0
 801e366:	6078      	str	r0, [r7, #4]
 801e368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801e36a:	4b21      	ldr	r3, [pc, #132]	; (801e3f0 <prvAddCurrentTaskToDelayedList+0x90>)
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801e370:	4b20      	ldr	r3, [pc, #128]	; (801e3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	3304      	adds	r3, #4
 801e376:	4618      	mov	r0, r3
 801e378:	f7fe fc68 	bl	801cc4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e382:	d10a      	bne.n	801e39a <prvAddCurrentTaskToDelayedList+0x3a>
 801e384:	683b      	ldr	r3, [r7, #0]
 801e386:	2b00      	cmp	r3, #0
 801e388:	d007      	beq.n	801e39a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e38a:	4b1a      	ldr	r3, [pc, #104]	; (801e3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	3304      	adds	r3, #4
 801e390:	4619      	mov	r1, r3
 801e392:	4819      	ldr	r0, [pc, #100]	; (801e3f8 <prvAddCurrentTaskToDelayedList+0x98>)
 801e394:	f7fe fbfd 	bl	801cb92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801e398:	e026      	b.n	801e3e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801e39a:	68fa      	ldr	r2, [r7, #12]
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	4413      	add	r3, r2
 801e3a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801e3a2:	4b14      	ldr	r3, [pc, #80]	; (801e3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	68ba      	ldr	r2, [r7, #8]
 801e3a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801e3aa:	68ba      	ldr	r2, [r7, #8]
 801e3ac:	68fb      	ldr	r3, [r7, #12]
 801e3ae:	429a      	cmp	r2, r3
 801e3b0:	d209      	bcs.n	801e3c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e3b2:	4b12      	ldr	r3, [pc, #72]	; (801e3fc <prvAddCurrentTaskToDelayedList+0x9c>)
 801e3b4:	681a      	ldr	r2, [r3, #0]
 801e3b6:	4b0f      	ldr	r3, [pc, #60]	; (801e3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	3304      	adds	r3, #4
 801e3bc:	4619      	mov	r1, r3
 801e3be:	4610      	mov	r0, r2
 801e3c0:	f7fe fc0b 	bl	801cbda <vListInsert>
}
 801e3c4:	e010      	b.n	801e3e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801e3c6:	4b0e      	ldr	r3, [pc, #56]	; (801e400 <prvAddCurrentTaskToDelayedList+0xa0>)
 801e3c8:	681a      	ldr	r2, [r3, #0]
 801e3ca:	4b0a      	ldr	r3, [pc, #40]	; (801e3f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	3304      	adds	r3, #4
 801e3d0:	4619      	mov	r1, r3
 801e3d2:	4610      	mov	r0, r2
 801e3d4:	f7fe fc01 	bl	801cbda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801e3d8:	4b0a      	ldr	r3, [pc, #40]	; (801e404 <prvAddCurrentTaskToDelayedList+0xa4>)
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	68ba      	ldr	r2, [r7, #8]
 801e3de:	429a      	cmp	r2, r3
 801e3e0:	d202      	bcs.n	801e3e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801e3e2:	4a08      	ldr	r2, [pc, #32]	; (801e404 <prvAddCurrentTaskToDelayedList+0xa4>)
 801e3e4:	68bb      	ldr	r3, [r7, #8]
 801e3e6:	6013      	str	r3, [r2, #0]
}
 801e3e8:	bf00      	nop
 801e3ea:	3710      	adds	r7, #16
 801e3ec:	46bd      	mov	sp, r7
 801e3ee:	bd80      	pop	{r7, pc}
 801e3f0:	200017b4 	.word	0x200017b4
 801e3f4:	200012dc 	.word	0x200012dc
 801e3f8:	2000179c 	.word	0x2000179c
 801e3fc:	2000176c 	.word	0x2000176c
 801e400:	20001768 	.word	0x20001768
 801e404:	200017d0 	.word	0x200017d0

0801e408 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801e408:	b580      	push	{r7, lr}
 801e40a:	b088      	sub	sp, #32
 801e40c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801e40e:	2300      	movs	r3, #0
 801e410:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801e412:	f000 fac7 	bl	801e9a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801e416:	4b18      	ldr	r3, [pc, #96]	; (801e478 <xTimerCreateTimerTask+0x70>)
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d020      	beq.n	801e460 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801e41e:	2300      	movs	r3, #0
 801e420:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801e422:	2300      	movs	r3, #0
 801e424:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801e426:	463a      	mov	r2, r7
 801e428:	1d39      	adds	r1, r7, #4
 801e42a:	f107 0308 	add.w	r3, r7, #8
 801e42e:	4618      	mov	r0, r3
 801e430:	f7fe fb68 	bl	801cb04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801e434:	6839      	ldr	r1, [r7, #0]
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	68ba      	ldr	r2, [r7, #8]
 801e43a:	9202      	str	r2, [sp, #8]
 801e43c:	9301      	str	r3, [sp, #4]
 801e43e:	2302      	movs	r3, #2
 801e440:	9300      	str	r3, [sp, #0]
 801e442:	2300      	movs	r3, #0
 801e444:	460a      	mov	r2, r1
 801e446:	490d      	ldr	r1, [pc, #52]	; (801e47c <xTimerCreateTimerTask+0x74>)
 801e448:	480d      	ldr	r0, [pc, #52]	; (801e480 <xTimerCreateTimerTask+0x78>)
 801e44a:	f7ff f855 	bl	801d4f8 <xTaskCreateStatic>
 801e44e:	4603      	mov	r3, r0
 801e450:	4a0c      	ldr	r2, [pc, #48]	; (801e484 <xTimerCreateTimerTask+0x7c>)
 801e452:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801e454:	4b0b      	ldr	r3, [pc, #44]	; (801e484 <xTimerCreateTimerTask+0x7c>)
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d001      	beq.n	801e460 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801e45c:	2301      	movs	r3, #1
 801e45e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	2b00      	cmp	r3, #0
 801e464:	d102      	bne.n	801e46c <xTimerCreateTimerTask+0x64>
 801e466:	f000 fc5f 	bl	801ed28 <ulSetInterruptMask>
 801e46a:	e7fe      	b.n	801e46a <xTimerCreateTimerTask+0x62>
	return xReturn;
 801e46c:	68fb      	ldr	r3, [r7, #12]
}
 801e46e:	4618      	mov	r0, r3
 801e470:	3710      	adds	r7, #16
 801e472:	46bd      	mov	sp, r7
 801e474:	bd80      	pop	{r7, pc}
 801e476:	bf00      	nop
 801e478:	2000180c 	.word	0x2000180c
 801e47c:	080230ec 	.word	0x080230ec
 801e480:	0801e59d 	.word	0x0801e59d
 801e484:	20001810 	.word	0x20001810

0801e488 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801e488:	b580      	push	{r7, lr}
 801e48a:	b08a      	sub	sp, #40	; 0x28
 801e48c:	af00      	add	r7, sp, #0
 801e48e:	60f8      	str	r0, [r7, #12]
 801e490:	60b9      	str	r1, [r7, #8]
 801e492:	607a      	str	r2, [r7, #4]
 801e494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801e496:	2300      	movs	r3, #0
 801e498:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d102      	bne.n	801e4a6 <xTimerGenericCommand+0x1e>
 801e4a0:	f000 fc42 	bl	801ed28 <ulSetInterruptMask>
 801e4a4:	e7fe      	b.n	801e4a4 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801e4a6:	4b1a      	ldr	r3, [pc, #104]	; (801e510 <xTimerGenericCommand+0x88>)
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d02a      	beq.n	801e504 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801e4ae:	68bb      	ldr	r3, [r7, #8]
 801e4b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801e4ba:	68bb      	ldr	r3, [r7, #8]
 801e4bc:	2b05      	cmp	r3, #5
 801e4be:	dc18      	bgt.n	801e4f2 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801e4c0:	f7ff fed2 	bl	801e268 <xTaskGetSchedulerState>
 801e4c4:	4603      	mov	r3, r0
 801e4c6:	2b02      	cmp	r3, #2
 801e4c8:	d109      	bne.n	801e4de <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801e4ca:	4b11      	ldr	r3, [pc, #68]	; (801e510 <xTimerGenericCommand+0x88>)
 801e4cc:	6818      	ldr	r0, [r3, #0]
 801e4ce:	f107 0114 	add.w	r1, r7, #20
 801e4d2:	2300      	movs	r3, #0
 801e4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4d6:	f7fe fcae 	bl	801ce36 <xQueueGenericSend>
 801e4da:	6278      	str	r0, [r7, #36]	; 0x24
 801e4dc:	e012      	b.n	801e504 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801e4de:	4b0c      	ldr	r3, [pc, #48]	; (801e510 <xTimerGenericCommand+0x88>)
 801e4e0:	6818      	ldr	r0, [r3, #0]
 801e4e2:	f107 0114 	add.w	r1, r7, #20
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	2200      	movs	r2, #0
 801e4ea:	f7fe fca4 	bl	801ce36 <xQueueGenericSend>
 801e4ee:	6278      	str	r0, [r7, #36]	; 0x24
 801e4f0:	e008      	b.n	801e504 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801e4f2:	4b07      	ldr	r3, [pc, #28]	; (801e510 <xTimerGenericCommand+0x88>)
 801e4f4:	6818      	ldr	r0, [r3, #0]
 801e4f6:	f107 0114 	add.w	r1, r7, #20
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	683a      	ldr	r2, [r7, #0]
 801e4fe:	f7fe fd63 	bl	801cfc8 <xQueueGenericSendFromISR>
 801e502:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e506:	4618      	mov	r0, r3
 801e508:	3728      	adds	r7, #40	; 0x28
 801e50a:	46bd      	mov	sp, r7
 801e50c:	bd80      	pop	{r7, pc}
 801e50e:	bf00      	nop
 801e510:	2000180c 	.word	0x2000180c

0801e514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801e514:	b580      	push	{r7, lr}
 801e516:	b086      	sub	sp, #24
 801e518:	af02      	add	r7, sp, #8
 801e51a:	6078      	str	r0, [r7, #4]
 801e51c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e51e:	4b1e      	ldr	r3, [pc, #120]	; (801e598 <prvProcessExpiredTimer+0x84>)
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	68db      	ldr	r3, [r3, #12]
 801e524:	68db      	ldr	r3, [r3, #12]
 801e526:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	3304      	adds	r3, #4
 801e52c:	4618      	mov	r0, r3
 801e52e:	f7fe fb8d 	bl	801cc4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e538:	f003 0304 	and.w	r3, r3, #4
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d01a      	beq.n	801e576 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801e540:	68fb      	ldr	r3, [r7, #12]
 801e542:	699a      	ldr	r2, [r3, #24]
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	18d1      	adds	r1, r2, r3
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	683a      	ldr	r2, [r7, #0]
 801e54c:	68f8      	ldr	r0, [r7, #12]
 801e54e:	f000 f8c1 	bl	801e6d4 <prvInsertTimerInActiveList>
 801e552:	4603      	mov	r3, r0
 801e554:	2b00      	cmp	r3, #0
 801e556:	d017      	beq.n	801e588 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e558:	2300      	movs	r3, #0
 801e55a:	9300      	str	r3, [sp, #0]
 801e55c:	2300      	movs	r3, #0
 801e55e:	687a      	ldr	r2, [r7, #4]
 801e560:	2100      	movs	r1, #0
 801e562:	68f8      	ldr	r0, [r7, #12]
 801e564:	f7ff ff90 	bl	801e488 <xTimerGenericCommand>
 801e568:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801e56a:	68bb      	ldr	r3, [r7, #8]
 801e56c:	2b00      	cmp	r3, #0
 801e56e:	d10b      	bne.n	801e588 <prvProcessExpiredTimer+0x74>
 801e570:	f000 fbda 	bl	801ed28 <ulSetInterruptMask>
 801e574:	e7fe      	b.n	801e574 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e57c:	f023 0301 	bic.w	r3, r3, #1
 801e580:	b2da      	uxtb	r2, r3
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	6a1b      	ldr	r3, [r3, #32]
 801e58c:	68f8      	ldr	r0, [r7, #12]
 801e58e:	4798      	blx	r3
}
 801e590:	bf00      	nop
 801e592:	3710      	adds	r7, #16
 801e594:	46bd      	mov	sp, r7
 801e596:	bd80      	pop	{r7, pc}
 801e598:	20001804 	.word	0x20001804

0801e59c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801e59c:	b580      	push	{r7, lr}
 801e59e:	b084      	sub	sp, #16
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e5a4:	f107 0308 	add.w	r3, r7, #8
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f000 f84f 	bl	801e64c <prvGetNextExpireTime>
 801e5ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801e5b0:	68bb      	ldr	r3, [r7, #8]
 801e5b2:	4619      	mov	r1, r3
 801e5b4:	68f8      	ldr	r0, [r7, #12]
 801e5b6:	f000 f803 	bl	801e5c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801e5ba:	f000 f8cd 	bl	801e758 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801e5be:	e7f1      	b.n	801e5a4 <prvTimerTask+0x8>

0801e5c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b084      	sub	sp, #16
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	6078      	str	r0, [r7, #4]
 801e5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801e5ca:	f7ff fac5 	bl	801db58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e5ce:	f107 0308 	add.w	r3, r7, #8
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f000 f85e 	bl	801e694 <prvSampleTimeNow>
 801e5d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801e5da:	68bb      	ldr	r3, [r7, #8]
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d12a      	bne.n	801e636 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801e5e0:	683b      	ldr	r3, [r7, #0]
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d10a      	bne.n	801e5fc <prvProcessTimerOrBlockTask+0x3c>
 801e5e6:	687a      	ldr	r2, [r7, #4]
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	429a      	cmp	r2, r3
 801e5ec:	d806      	bhi.n	801e5fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801e5ee:	f7ff fac1 	bl	801db74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801e5f2:	68f9      	ldr	r1, [r7, #12]
 801e5f4:	6878      	ldr	r0, [r7, #4]
 801e5f6:	f7ff ff8d 	bl	801e514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801e5fa:	e01e      	b.n	801e63a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801e5fc:	683b      	ldr	r3, [r7, #0]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d008      	beq.n	801e614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801e602:	4b10      	ldr	r3, [pc, #64]	; (801e644 <prvProcessTimerOrBlockTask+0x84>)
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d101      	bne.n	801e610 <prvProcessTimerOrBlockTask+0x50>
 801e60c:	2301      	movs	r3, #1
 801e60e:	e000      	b.n	801e612 <prvProcessTimerOrBlockTask+0x52>
 801e610:	2300      	movs	r3, #0
 801e612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801e614:	4b0c      	ldr	r3, [pc, #48]	; (801e648 <prvProcessTimerOrBlockTask+0x88>)
 801e616:	6818      	ldr	r0, [r3, #0]
 801e618:	687a      	ldr	r2, [r7, #4]
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	1ad3      	subs	r3, r2, r3
 801e61e:	683a      	ldr	r2, [r7, #0]
 801e620:	4619      	mov	r1, r3
 801e622:	f7fe ff35 	bl	801d490 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801e626:	f7ff faa5 	bl	801db74 <xTaskResumeAll>
 801e62a:	4603      	mov	r3, r0
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d104      	bne.n	801e63a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 801e630:	f000 fa36 	bl	801eaa0 <vPortYield>
}
 801e634:	e001      	b.n	801e63a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 801e636:	f7ff fa9d 	bl	801db74 <xTaskResumeAll>
}
 801e63a:	bf00      	nop
 801e63c:	3710      	adds	r7, #16
 801e63e:	46bd      	mov	sp, r7
 801e640:	bd80      	pop	{r7, pc}
 801e642:	bf00      	nop
 801e644:	20001808 	.word	0x20001808
 801e648:	2000180c 	.word	0x2000180c

0801e64c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801e64c:	b480      	push	{r7}
 801e64e:	b085      	sub	sp, #20
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801e654:	4b0e      	ldr	r3, [pc, #56]	; (801e690 <prvGetNextExpireTime+0x44>)
 801e656:	681b      	ldr	r3, [r3, #0]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d101      	bne.n	801e662 <prvGetNextExpireTime+0x16>
 801e65e:	2201      	movs	r2, #1
 801e660:	e000      	b.n	801e664 <prvGetNextExpireTime+0x18>
 801e662:	2200      	movs	r2, #0
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d105      	bne.n	801e67c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e670:	4b07      	ldr	r3, [pc, #28]	; (801e690 <prvGetNextExpireTime+0x44>)
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	68db      	ldr	r3, [r3, #12]
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	60fb      	str	r3, [r7, #12]
 801e67a:	e001      	b.n	801e680 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801e67c:	2300      	movs	r3, #0
 801e67e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801e680:	68fb      	ldr	r3, [r7, #12]
}
 801e682:	4618      	mov	r0, r3
 801e684:	3714      	adds	r7, #20
 801e686:	46bd      	mov	sp, r7
 801e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e68c:	4770      	bx	lr
 801e68e:	bf00      	nop
 801e690:	20001804 	.word	0x20001804

0801e694 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801e694:	b580      	push	{r7, lr}
 801e696:	b084      	sub	sp, #16
 801e698:	af00      	add	r7, sp, #0
 801e69a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801e69c:	f7ff faf8 	bl	801dc90 <xTaskGetTickCount>
 801e6a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801e6a2:	4b0b      	ldr	r3, [pc, #44]	; (801e6d0 <prvSampleTimeNow+0x3c>)
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	68fa      	ldr	r2, [r7, #12]
 801e6a8:	429a      	cmp	r2, r3
 801e6aa:	d205      	bcs.n	801e6b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801e6ac:	f000 f91e 	bl	801e8ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	2201      	movs	r2, #1
 801e6b4:	601a      	str	r2, [r3, #0]
 801e6b6:	e002      	b.n	801e6be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	2200      	movs	r2, #0
 801e6bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801e6be:	4a04      	ldr	r2, [pc, #16]	; (801e6d0 <prvSampleTimeNow+0x3c>)
 801e6c0:	68fb      	ldr	r3, [r7, #12]
 801e6c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801e6c4:	68fb      	ldr	r3, [r7, #12]
}
 801e6c6:	4618      	mov	r0, r3
 801e6c8:	3710      	adds	r7, #16
 801e6ca:	46bd      	mov	sp, r7
 801e6cc:	bd80      	pop	{r7, pc}
 801e6ce:	bf00      	nop
 801e6d0:	20001814 	.word	0x20001814

0801e6d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801e6d4:	b580      	push	{r7, lr}
 801e6d6:	b086      	sub	sp, #24
 801e6d8:	af00      	add	r7, sp, #0
 801e6da:	60f8      	str	r0, [r7, #12]
 801e6dc:	60b9      	str	r1, [r7, #8]
 801e6de:	607a      	str	r2, [r7, #4]
 801e6e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801e6e6:	68fb      	ldr	r3, [r7, #12]
 801e6e8:	68ba      	ldr	r2, [r7, #8]
 801e6ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	68fa      	ldr	r2, [r7, #12]
 801e6f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801e6f2:	68ba      	ldr	r2, [r7, #8]
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	429a      	cmp	r2, r3
 801e6f8:	d812      	bhi.n	801e720 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e6fa:	687a      	ldr	r2, [r7, #4]
 801e6fc:	683b      	ldr	r3, [r7, #0]
 801e6fe:	1ad2      	subs	r2, r2, r3
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	699b      	ldr	r3, [r3, #24]
 801e704:	429a      	cmp	r2, r3
 801e706:	d302      	bcc.n	801e70e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801e708:	2301      	movs	r3, #1
 801e70a:	617b      	str	r3, [r7, #20]
 801e70c:	e01b      	b.n	801e746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801e70e:	4b10      	ldr	r3, [pc, #64]	; (801e750 <prvInsertTimerInActiveList+0x7c>)
 801e710:	681a      	ldr	r2, [r3, #0]
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	3304      	adds	r3, #4
 801e716:	4619      	mov	r1, r3
 801e718:	4610      	mov	r0, r2
 801e71a:	f7fe fa5e 	bl	801cbda <vListInsert>
 801e71e:	e012      	b.n	801e746 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801e720:	687a      	ldr	r2, [r7, #4]
 801e722:	683b      	ldr	r3, [r7, #0]
 801e724:	429a      	cmp	r2, r3
 801e726:	d206      	bcs.n	801e736 <prvInsertTimerInActiveList+0x62>
 801e728:	68ba      	ldr	r2, [r7, #8]
 801e72a:	683b      	ldr	r3, [r7, #0]
 801e72c:	429a      	cmp	r2, r3
 801e72e:	d302      	bcc.n	801e736 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801e730:	2301      	movs	r3, #1
 801e732:	617b      	str	r3, [r7, #20]
 801e734:	e007      	b.n	801e746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e736:	4b07      	ldr	r3, [pc, #28]	; (801e754 <prvInsertTimerInActiveList+0x80>)
 801e738:	681a      	ldr	r2, [r3, #0]
 801e73a:	68fb      	ldr	r3, [r7, #12]
 801e73c:	3304      	adds	r3, #4
 801e73e:	4619      	mov	r1, r3
 801e740:	4610      	mov	r0, r2
 801e742:	f7fe fa4a 	bl	801cbda <vListInsert>
		}
	}

	return xProcessTimerNow;
 801e746:	697b      	ldr	r3, [r7, #20]
}
 801e748:	4618      	mov	r0, r3
 801e74a:	3718      	adds	r7, #24
 801e74c:	46bd      	mov	sp, r7
 801e74e:	bd80      	pop	{r7, pc}
 801e750:	20001808 	.word	0x20001808
 801e754:	20001804 	.word	0x20001804

0801e758 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801e758:	b580      	push	{r7, lr}
 801e75a:	b08c      	sub	sp, #48	; 0x30
 801e75c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e75e:	e0b2      	b.n	801e8c6 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801e760:	68bb      	ldr	r3, [r7, #8]
 801e762:	2b00      	cmp	r3, #0
 801e764:	da11      	bge.n	801e78a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801e766:	f107 0308 	add.w	r3, r7, #8
 801e76a:	3304      	adds	r3, #4
 801e76c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e770:	2b00      	cmp	r3, #0
 801e772:	d102      	bne.n	801e77a <prvProcessReceivedCommands+0x22>
 801e774:	f000 fad8 	bl	801ed28 <ulSetInterruptMask>
 801e778:	e7fe      	b.n	801e778 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e780:	6850      	ldr	r0, [r2, #4]
 801e782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e784:	6892      	ldr	r2, [r2, #8]
 801e786:	4611      	mov	r1, r2
 801e788:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801e78a:	68bb      	ldr	r3, [r7, #8]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	f2c0 809a 	blt.w	801e8c6 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801e792:	693b      	ldr	r3, [r7, #16]
 801e794:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801e796:	6a3b      	ldr	r3, [r7, #32]
 801e798:	695b      	ldr	r3, [r3, #20]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d004      	beq.n	801e7a8 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e79e:	6a3b      	ldr	r3, [r7, #32]
 801e7a0:	3304      	adds	r3, #4
 801e7a2:	4618      	mov	r0, r3
 801e7a4:	f7fe fa52 	bl	801cc4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e7a8:	1d3b      	adds	r3, r7, #4
 801e7aa:	4618      	mov	r0, r3
 801e7ac:	f7ff ff72 	bl	801e694 <prvSampleTimeNow>
 801e7b0:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801e7b2:	68bb      	ldr	r3, [r7, #8]
 801e7b4:	2b09      	cmp	r3, #9
 801e7b6:	f200 8085 	bhi.w	801e8c4 <prvProcessReceivedCommands+0x16c>
 801e7ba:	a201      	add	r2, pc, #4	; (adr r2, 801e7c0 <prvProcessReceivedCommands+0x68>)
 801e7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7c0:	0801e7e9 	.word	0x0801e7e9
 801e7c4:	0801e7e9 	.word	0x0801e7e9
 801e7c8:	0801e7e9 	.word	0x0801e7e9
 801e7cc:	0801e84d 	.word	0x0801e84d
 801e7d0:	0801e861 	.word	0x0801e861
 801e7d4:	0801e89b 	.word	0x0801e89b
 801e7d8:	0801e7e9 	.word	0x0801e7e9
 801e7dc:	0801e7e9 	.word	0x0801e7e9
 801e7e0:	0801e84d 	.word	0x0801e84d
 801e7e4:	0801e861 	.word	0x0801e861
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e7e8:	6a3b      	ldr	r3, [r7, #32]
 801e7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e7ee:	f043 0301 	orr.w	r3, r3, #1
 801e7f2:	b2da      	uxtb	r2, r3
 801e7f4:	6a3b      	ldr	r3, [r7, #32]
 801e7f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801e7fa:	68fa      	ldr	r2, [r7, #12]
 801e7fc:	6a3b      	ldr	r3, [r7, #32]
 801e7fe:	699b      	ldr	r3, [r3, #24]
 801e800:	18d1      	adds	r1, r2, r3
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	69fa      	ldr	r2, [r7, #28]
 801e806:	6a38      	ldr	r0, [r7, #32]
 801e808:	f7ff ff64 	bl	801e6d4 <prvInsertTimerInActiveList>
 801e80c:	4603      	mov	r3, r0
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d059      	beq.n	801e8c6 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e812:	6a3b      	ldr	r3, [r7, #32]
 801e814:	6a1b      	ldr	r3, [r3, #32]
 801e816:	6a38      	ldr	r0, [r7, #32]
 801e818:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e81a:	6a3b      	ldr	r3, [r7, #32]
 801e81c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e820:	f003 0304 	and.w	r3, r3, #4
 801e824:	2b00      	cmp	r3, #0
 801e826:	d04e      	beq.n	801e8c6 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801e828:	68fa      	ldr	r2, [r7, #12]
 801e82a:	6a3b      	ldr	r3, [r7, #32]
 801e82c:	699b      	ldr	r3, [r3, #24]
 801e82e:	441a      	add	r2, r3
 801e830:	2300      	movs	r3, #0
 801e832:	9300      	str	r3, [sp, #0]
 801e834:	2300      	movs	r3, #0
 801e836:	2100      	movs	r1, #0
 801e838:	6a38      	ldr	r0, [r7, #32]
 801e83a:	f7ff fe25 	bl	801e488 <xTimerGenericCommand>
 801e83e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801e840:	69bb      	ldr	r3, [r7, #24]
 801e842:	2b00      	cmp	r3, #0
 801e844:	d13f      	bne.n	801e8c6 <prvProcessReceivedCommands+0x16e>
 801e846:	f000 fa6f 	bl	801ed28 <ulSetInterruptMask>
 801e84a:	e7fe      	b.n	801e84a <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e84c:	6a3b      	ldr	r3, [r7, #32]
 801e84e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e852:	f023 0301 	bic.w	r3, r3, #1
 801e856:	b2da      	uxtb	r2, r3
 801e858:	6a3b      	ldr	r3, [r7, #32]
 801e85a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801e85e:	e032      	b.n	801e8c6 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e860:	6a3b      	ldr	r3, [r7, #32]
 801e862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e866:	f043 0301 	orr.w	r3, r3, #1
 801e86a:	b2da      	uxtb	r2, r3
 801e86c:	6a3b      	ldr	r3, [r7, #32]
 801e86e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801e872:	68fa      	ldr	r2, [r7, #12]
 801e874:	6a3b      	ldr	r3, [r7, #32]
 801e876:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801e878:	6a3b      	ldr	r3, [r7, #32]
 801e87a:	699b      	ldr	r3, [r3, #24]
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d102      	bne.n	801e886 <prvProcessReceivedCommands+0x12e>
 801e880:	f000 fa52 	bl	801ed28 <ulSetInterruptMask>
 801e884:	e7fe      	b.n	801e884 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801e886:	6a3b      	ldr	r3, [r7, #32]
 801e888:	699a      	ldr	r2, [r3, #24]
 801e88a:	69fb      	ldr	r3, [r7, #28]
 801e88c:	18d1      	adds	r1, r2, r3
 801e88e:	69fb      	ldr	r3, [r7, #28]
 801e890:	69fa      	ldr	r2, [r7, #28]
 801e892:	6a38      	ldr	r0, [r7, #32]
 801e894:	f7ff ff1e 	bl	801e6d4 <prvInsertTimerInActiveList>
					break;
 801e898:	e015      	b.n	801e8c6 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801e89a:	6a3b      	ldr	r3, [r7, #32]
 801e89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e8a0:	f003 0302 	and.w	r3, r3, #2
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d103      	bne.n	801e8b0 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801e8a8:	6a38      	ldr	r0, [r7, #32]
 801e8aa:	f000 fb51 	bl	801ef50 <vPortFree>
 801e8ae:	e00a      	b.n	801e8c6 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e8b0:	6a3b      	ldr	r3, [r7, #32]
 801e8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e8b6:	f023 0301 	bic.w	r3, r3, #1
 801e8ba:	b2da      	uxtb	r2, r3
 801e8bc:	6a3b      	ldr	r3, [r7, #32]
 801e8be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801e8c2:	e000      	b.n	801e8c6 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 801e8c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e8c6:	4b08      	ldr	r3, [pc, #32]	; (801e8e8 <prvProcessReceivedCommands+0x190>)
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	f107 0108 	add.w	r1, r7, #8
 801e8ce:	2200      	movs	r2, #0
 801e8d0:	4618      	mov	r0, r3
 801e8d2:	f7fe fbea 	bl	801d0aa <xQueueReceive>
 801e8d6:	4603      	mov	r3, r0
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	f47f af41 	bne.w	801e760 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801e8de:	bf00      	nop
 801e8e0:	bf00      	nop
 801e8e2:	3728      	adds	r7, #40	; 0x28
 801e8e4:	46bd      	mov	sp, r7
 801e8e6:	bd80      	pop	{r7, pc}
 801e8e8:	2000180c 	.word	0x2000180c

0801e8ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801e8ec:	b580      	push	{r7, lr}
 801e8ee:	b088      	sub	sp, #32
 801e8f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801e8f2:	e040      	b.n	801e976 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e8f4:	4b29      	ldr	r3, [pc, #164]	; (801e99c <prvSwitchTimerLists+0xb0>)
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	68db      	ldr	r3, [r3, #12]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e8fe:	4b27      	ldr	r3, [pc, #156]	; (801e99c <prvSwitchTimerLists+0xb0>)
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	68db      	ldr	r3, [r3, #12]
 801e904:	68db      	ldr	r3, [r3, #12]
 801e906:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	3304      	adds	r3, #4
 801e90c:	4618      	mov	r0, r3
 801e90e:	f7fe f99d 	bl	801cc4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	6a1b      	ldr	r3, [r3, #32]
 801e916:	68f8      	ldr	r0, [r7, #12]
 801e918:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e920:	f003 0304 	and.w	r3, r3, #4
 801e924:	2b00      	cmp	r3, #0
 801e926:	d026      	beq.n	801e976 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	699b      	ldr	r3, [r3, #24]
 801e92c:	693a      	ldr	r2, [r7, #16]
 801e92e:	4413      	add	r3, r2
 801e930:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801e932:	68ba      	ldr	r2, [r7, #8]
 801e934:	693b      	ldr	r3, [r7, #16]
 801e936:	429a      	cmp	r2, r3
 801e938:	d90e      	bls.n	801e958 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	68ba      	ldr	r2, [r7, #8]
 801e93e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	68fa      	ldr	r2, [r7, #12]
 801e944:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e946:	4b15      	ldr	r3, [pc, #84]	; (801e99c <prvSwitchTimerLists+0xb0>)
 801e948:	681a      	ldr	r2, [r3, #0]
 801e94a:	68fb      	ldr	r3, [r7, #12]
 801e94c:	3304      	adds	r3, #4
 801e94e:	4619      	mov	r1, r3
 801e950:	4610      	mov	r0, r2
 801e952:	f7fe f942 	bl	801cbda <vListInsert>
 801e956:	e00e      	b.n	801e976 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e958:	2300      	movs	r3, #0
 801e95a:	9300      	str	r3, [sp, #0]
 801e95c:	2300      	movs	r3, #0
 801e95e:	693a      	ldr	r2, [r7, #16]
 801e960:	2100      	movs	r1, #0
 801e962:	68f8      	ldr	r0, [r7, #12]
 801e964:	f7ff fd90 	bl	801e488 <xTimerGenericCommand>
 801e968:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d102      	bne.n	801e976 <prvSwitchTimerLists+0x8a>
 801e970:	f000 f9da 	bl	801ed28 <ulSetInterruptMask>
 801e974:	e7fe      	b.n	801e974 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801e976:	4b09      	ldr	r3, [pc, #36]	; (801e99c <prvSwitchTimerLists+0xb0>)
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d1b9      	bne.n	801e8f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801e980:	4b06      	ldr	r3, [pc, #24]	; (801e99c <prvSwitchTimerLists+0xb0>)
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801e986:	4b06      	ldr	r3, [pc, #24]	; (801e9a0 <prvSwitchTimerLists+0xb4>)
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	4a04      	ldr	r2, [pc, #16]	; (801e99c <prvSwitchTimerLists+0xb0>)
 801e98c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801e98e:	4a04      	ldr	r2, [pc, #16]	; (801e9a0 <prvSwitchTimerLists+0xb4>)
 801e990:	697b      	ldr	r3, [r7, #20]
 801e992:	6013      	str	r3, [r2, #0]
}
 801e994:	bf00      	nop
 801e996:	3718      	adds	r7, #24
 801e998:	46bd      	mov	sp, r7
 801e99a:	bd80      	pop	{r7, pc}
 801e99c:	20001804 	.word	0x20001804
 801e9a0:	20001808 	.word	0x20001808

0801e9a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801e9a4:	b580      	push	{r7, lr}
 801e9a6:	b082      	sub	sp, #8
 801e9a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801e9aa:	f000 f88b 	bl	801eac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801e9ae:	4b15      	ldr	r3, [pc, #84]	; (801ea04 <prvCheckForValidListAndQueue+0x60>)
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	2b00      	cmp	r3, #0
 801e9b4:	d120      	bne.n	801e9f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801e9b6:	4814      	ldr	r0, [pc, #80]	; (801ea08 <prvCheckForValidListAndQueue+0x64>)
 801e9b8:	f7fe f8be 	bl	801cb38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801e9bc:	4813      	ldr	r0, [pc, #76]	; (801ea0c <prvCheckForValidListAndQueue+0x68>)
 801e9be:	f7fe f8bb 	bl	801cb38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801e9c2:	4b13      	ldr	r3, [pc, #76]	; (801ea10 <prvCheckForValidListAndQueue+0x6c>)
 801e9c4:	4a10      	ldr	r2, [pc, #64]	; (801ea08 <prvCheckForValidListAndQueue+0x64>)
 801e9c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801e9c8:	4b12      	ldr	r3, [pc, #72]	; (801ea14 <prvCheckForValidListAndQueue+0x70>)
 801e9ca:	4a10      	ldr	r2, [pc, #64]	; (801ea0c <prvCheckForValidListAndQueue+0x68>)
 801e9cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	9300      	str	r3, [sp, #0]
 801e9d2:	4b11      	ldr	r3, [pc, #68]	; (801ea18 <prvCheckForValidListAndQueue+0x74>)
 801e9d4:	4a11      	ldr	r2, [pc, #68]	; (801ea1c <prvCheckForValidListAndQueue+0x78>)
 801e9d6:	2110      	movs	r1, #16
 801e9d8:	200a      	movs	r0, #10
 801e9da:	f7fe f9b9 	bl	801cd50 <xQueueGenericCreateStatic>
 801e9de:	4603      	mov	r3, r0
 801e9e0:	4a08      	ldr	r2, [pc, #32]	; (801ea04 <prvCheckForValidListAndQueue+0x60>)
 801e9e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801e9e4:	4b07      	ldr	r3, [pc, #28]	; (801ea04 <prvCheckForValidListAndQueue+0x60>)
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d005      	beq.n	801e9f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801e9ec:	4b05      	ldr	r3, [pc, #20]	; (801ea04 <prvCheckForValidListAndQueue+0x60>)
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	490b      	ldr	r1, [pc, #44]	; (801ea20 <prvCheckForValidListAndQueue+0x7c>)
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	f7fe fd22 	bl	801d43c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801e9f8:	f000 f876 	bl	801eae8 <vPortExitCritical>
}
 801e9fc:	bf00      	nop
 801e9fe:	46bd      	mov	sp, r7
 801ea00:	bd80      	pop	{r7, pc}
 801ea02:	bf00      	nop
 801ea04:	2000180c 	.word	0x2000180c
 801ea08:	200017dc 	.word	0x200017dc
 801ea0c:	200017f0 	.word	0x200017f0
 801ea10:	20001804 	.word	0x20001804
 801ea14:	20001808 	.word	0x20001808
 801ea18:	200018b8 	.word	0x200018b8
 801ea1c:	20001818 	.word	0x20001818
 801ea20:	080230f4 	.word	0x080230f4

0801ea24 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801ea24:	b480      	push	{r7}
 801ea26:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801ea28:	4b0b      	ldr	r3, [pc, #44]	; (801ea58 <vPortSetupTimerInterrupt+0x34>)
 801ea2a:	2200      	movs	r2, #0
 801ea2c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801ea2e:	4b0b      	ldr	r3, [pc, #44]	; (801ea5c <vPortSetupTimerInterrupt+0x38>)
 801ea30:	2200      	movs	r2, #0
 801ea32:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801ea34:	4b0a      	ldr	r3, [pc, #40]	; (801ea60 <vPortSetupTimerInterrupt+0x3c>)
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	4a0a      	ldr	r2, [pc, #40]	; (801ea64 <vPortSetupTimerInterrupt+0x40>)
 801ea3a:	fba2 2303 	umull	r2, r3, r2, r3
 801ea3e:	099b      	lsrs	r3, r3, #6
 801ea40:	4a09      	ldr	r2, [pc, #36]	; (801ea68 <vPortSetupTimerInterrupt+0x44>)
 801ea42:	3b01      	subs	r3, #1
 801ea44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801ea46:	4b04      	ldr	r3, [pc, #16]	; (801ea58 <vPortSetupTimerInterrupt+0x34>)
 801ea48:	2207      	movs	r2, #7
 801ea4a:	601a      	str	r2, [r3, #0]
}
 801ea4c:	bf00      	nop
 801ea4e:	46bd      	mov	sp, r7
 801ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea54:	4770      	bx	lr
 801ea56:	bf00      	nop
 801ea58:	e000e010 	.word	0xe000e010
 801ea5c:	e000e018 	.word	0xe000e018
 801ea60:	20000090 	.word	0x20000090
 801ea64:	10624dd3 	.word	0x10624dd3
 801ea68:	e000e014 	.word	0xe000e014

0801ea6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b082      	sub	sp, #8
 801ea70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801ea72:	2300      	movs	r3, #0
 801ea74:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801ea76:	4b09      	ldr	r3, [pc, #36]	; (801ea9c <prvTaskExitError+0x30>)
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea7e:	d002      	beq.n	801ea86 <prvTaskExitError+0x1a>
 801ea80:	f000 f952 	bl	801ed28 <ulSetInterruptMask>
 801ea84:	e7fe      	b.n	801ea84 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801ea86:	f000 f94f 	bl	801ed28 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801ea8a:	bf00      	nop
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d0fc      	beq.n	801ea8c <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801ea92:	bf00      	nop
 801ea94:	bf00      	nop
 801ea96:	3708      	adds	r7, #8
 801ea98:	46bd      	mov	sp, r7
 801ea9a:	bd80      	pop	{r7, pc}
 801ea9c:	2000009c 	.word	0x2000009c

0801eaa0 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801eaa0:	b480      	push	{r7}
 801eaa2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801eaa4:	4b06      	ldr	r3, [pc, #24]	; (801eac0 <vPortYield+0x20>)
 801eaa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801eaaa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801eaac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801eab0:	f3bf 8f6f 	isb	sy
}
 801eab4:	bf00      	nop
 801eab6:	46bd      	mov	sp, r7
 801eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eabc:	4770      	bx	lr
 801eabe:	bf00      	nop
 801eac0:	e000ed04 	.word	0xe000ed04

0801eac4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801eac4:	b580      	push	{r7, lr}
 801eac6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801eac8:	f000 f92e 	bl	801ed28 <ulSetInterruptMask>
	ulCriticalNesting++;
 801eacc:	4b05      	ldr	r3, [pc, #20]	; (801eae4 <vPortEnterCritical+0x20>)
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	3301      	adds	r3, #1
 801ead2:	4a04      	ldr	r2, [pc, #16]	; (801eae4 <vPortEnterCritical+0x20>)
 801ead4:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801ead6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801eada:	f3bf 8f6f 	isb	sy
}
 801eade:	bf00      	nop
 801eae0:	bd80      	pop	{r7, pc}
 801eae2:	bf00      	nop
 801eae4:	2000009c 	.word	0x2000009c

0801eae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801eae8:	b580      	push	{r7, lr}
 801eaea:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801eaec:	4b0a      	ldr	r3, [pc, #40]	; (801eb18 <vPortExitCritical+0x30>)
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d102      	bne.n	801eafa <vPortExitCritical+0x12>
 801eaf4:	f000 f918 	bl	801ed28 <ulSetInterruptMask>
 801eaf8:	e7fe      	b.n	801eaf8 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801eafa:	4b07      	ldr	r3, [pc, #28]	; (801eb18 <vPortExitCritical+0x30>)
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	3b01      	subs	r3, #1
 801eb00:	4a05      	ldr	r2, [pc, #20]	; (801eb18 <vPortExitCritical+0x30>)
 801eb02:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801eb04:	4b04      	ldr	r3, [pc, #16]	; (801eb18 <vPortExitCritical+0x30>)
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d102      	bne.n	801eb12 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801eb0c:	2000      	movs	r0, #0
 801eb0e:	f000 f918 	bl	801ed42 <vClearInterruptMask>
	}
}
 801eb12:	bf00      	nop
 801eb14:	bd80      	pop	{r7, pc}
 801eb16:	bf00      	nop
 801eb18:	2000009c 	.word	0x2000009c

0801eb1c <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 801eb1c:	b580      	push	{r7, lr}
 801eb1e:	b082      	sub	sp, #8
 801eb20:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801eb22:	f000 f901 	bl	801ed28 <ulSetInterruptMask>
 801eb26:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801eb28:	f7ff f8c2 	bl	801dcb0 <xTaskIncrementTick>
 801eb2c:	4603      	mov	r3, r0
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d003      	beq.n	801eb3a <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801eb32:	4b05      	ldr	r3, [pc, #20]	; (801eb48 <xPortSysTickHandler+0x2c>)
 801eb34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801eb38:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801eb3a:	6878      	ldr	r0, [r7, #4]
 801eb3c:	f000 f901 	bl	801ed42 <vClearInterruptMask>
}
 801eb40:	bf00      	nop
 801eb42:	3708      	adds	r7, #8
 801eb44:	46bd      	mov	sp, r7
 801eb46:	bd80      	pop	{r7, pc}
 801eb48:	e000ed04 	.word	0xe000ed04

0801eb4c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	b084      	sub	sp, #16
 801eb50:	af00      	add	r7, sp, #0
 801eb52:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	699b      	ldr	r3, [r3, #24]
 801eb58:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	3b02      	subs	r3, #2
 801eb5e:	781b      	ldrb	r3, [r3, #0]
 801eb60:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801eb62:	7afb      	ldrb	r3, [r7, #11]
 801eb64:	2b02      	cmp	r3, #2
 801eb66:	d102      	bne.n	801eb6e <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 801eb68:	f000 f8b2 	bl	801ecd0 <vRestoreContextOfFirstTask>
		}
		break;
 801eb6c:	e002      	b.n	801eb74 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 801eb6e:	f000 f8db 	bl	801ed28 <ulSetInterruptMask>
 801eb72:	e7fe      	b.n	801eb72 <vPortSVCHandler_C+0x26>
		}
	}
}
 801eb74:	bf00      	nop
 801eb76:	3710      	adds	r7, #16
 801eb78:	46bd      	mov	sp, r7
 801eb7a:	bd80      	pop	{r7, pc}

0801eb7c <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801eb7c:	b480      	push	{r7}
 801eb7e:	b085      	sub	sp, #20
 801eb80:	af00      	add	r7, sp, #0
 801eb82:	60f8      	str	r0, [r7, #12]
 801eb84:	60b9      	str	r1, [r7, #8]
 801eb86:	607a      	str	r2, [r7, #4]
 801eb88:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801eb8a:	68fb      	ldr	r3, [r7, #12]
 801eb8c:	3b04      	subs	r3, #4
 801eb8e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801eb96:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	3b04      	subs	r3, #4
 801eb9c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801eb9e:	687a      	ldr	r2, [r7, #4]
 801eba0:	68fb      	ldr	r3, [r7, #12]
 801eba2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801eba4:	68fb      	ldr	r3, [r7, #12]
 801eba6:	3b04      	subs	r3, #4
 801eba8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801ebaa:	4a38      	ldr	r2, [pc, #224]	; (801ec8c <pxPortInitialiseStack+0x110>)
 801ebac:	68fb      	ldr	r3, [r7, #12]
 801ebae:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	3b04      	subs	r3, #4
 801ebb4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801ebbc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ebbe:	68fb      	ldr	r3, [r7, #12]
 801ebc0:	3b04      	subs	r3, #4
 801ebc2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 801ebc4:	68fb      	ldr	r3, [r7, #12]
 801ebc6:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801ebca:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	3b04      	subs	r3, #4
 801ebd0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 801ebd2:	68fb      	ldr	r3, [r7, #12]
 801ebd4:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 801ebd8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ebda:	68fb      	ldr	r3, [r7, #12]
 801ebdc:	3b04      	subs	r3, #4
 801ebde:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 801ebe0:	68fb      	ldr	r3, [r7, #12]
 801ebe2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 801ebe6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ebe8:	68fb      	ldr	r3, [r7, #12]
 801ebea:	3b04      	subs	r3, #4
 801ebec:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801ebee:	683a      	ldr	r2, [r7, #0]
 801ebf0:	68fb      	ldr	r3, [r7, #12]
 801ebf2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ebf4:	68fb      	ldr	r3, [r7, #12]
 801ebf6:	3b04      	subs	r3, #4
 801ebf8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801ebfa:	68fb      	ldr	r3, [r7, #12]
 801ebfc:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801ec00:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	3b04      	subs	r3, #4
 801ec06:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801ec0e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	3b04      	subs	r3, #4
 801ec14:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 801ec1c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	3b04      	subs	r3, #4
 801ec22:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801ec2a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	3b04      	subs	r3, #4
 801ec30:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801ec38:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec3a:	68fb      	ldr	r3, [r7, #12]
 801ec3c:	3b04      	subs	r3, #4
 801ec3e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801ec46:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec48:	68fb      	ldr	r3, [r7, #12]
 801ec4a:	3b04      	subs	r3, #4
 801ec4c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801ec54:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec56:	68fb      	ldr	r3, [r7, #12]
 801ec58:	3b04      	subs	r3, #4
 801ec5a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 801ec5c:	68fb      	ldr	r3, [r7, #12]
 801ec5e:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801ec62:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	3b04      	subs	r3, #4
 801ec68:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	f06f 0243 	mvn.w	r2, #67	; 0x43
 801ec70:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801ec72:	68fb      	ldr	r3, [r7, #12]
 801ec74:	3b04      	subs	r3, #4
 801ec76:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 801ec78:	68ba      	ldr	r2, [r7, #8]
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801ec7e:	68fb      	ldr	r3, [r7, #12]
}
 801ec80:	4618      	mov	r0, r3
 801ec82:	3714      	adds	r7, #20
 801ec84:	46bd      	mov	sp, r7
 801ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec8a:	4770      	bx	lr
 801ec8c:	0801ea6d 	.word	0x0801ea6d

0801ec90 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 801ec90:	b580      	push	{r7, lr}
 801ec92:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801ec94:	4b0c      	ldr	r3, [pc, #48]	; (801ecc8 <xPortStartScheduler+0x38>)
 801ec96:	681b      	ldr	r3, [r3, #0]
 801ec98:	4a0b      	ldr	r2, [pc, #44]	; (801ecc8 <xPortStartScheduler+0x38>)
 801ec9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801ec9e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801eca0:	4b09      	ldr	r3, [pc, #36]	; (801ecc8 <xPortStartScheduler+0x38>)
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	4a08      	ldr	r2, [pc, #32]	; (801ecc8 <xPortStartScheduler+0x38>)
 801eca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801ecaa:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801ecac:	f7ff feba 	bl	801ea24 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 801ecb0:	4b06      	ldr	r3, [pc, #24]	; (801eccc <xPortStartScheduler+0x3c>)
 801ecb2:	2200      	movs	r2, #0
 801ecb4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801ecb6:	f000 f823 	bl	801ed00 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801ecba:	f7ff f8ab 	bl	801de14 <vTaskSwitchContext>
	prvTaskExitError();
 801ecbe:	f7ff fed5 	bl	801ea6c <prvTaskExitError>

	/* Should not get here. */
	return 0;
 801ecc2:	2300      	movs	r3, #0
}
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	bd80      	pop	{r7, pc}
 801ecc8:	e000ed20 	.word	0xe000ed20
 801eccc:	2000009c 	.word	0x2000009c

0801ecd0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ecd0:	4a07      	ldr	r2, [pc, #28]	; (801ecf0 <pxCurrentTCBConst2>)
 801ecd2:	6811      	ldr	r1, [r2, #0]
 801ecd4:	6808      	ldr	r0, [r1, #0]
 801ecd6:	c806      	ldmia	r0!, {r1, r2}
 801ecd8:	f381 880b 	msr	PSPLIM, r1
 801ecdc:	2102      	movs	r1, #2
 801ecde:	f381 8814 	msr	CONTROL, r1
 801ece2:	3020      	adds	r0, #32
 801ece4:	f380 8809 	msr	PSP, r0
 801ece8:	f3bf 8f6f 	isb	sy
 801ecec:	4710      	bx	r2
 801ecee:	bf00      	nop

0801ecf0 <pxCurrentTCBConst2>:
 801ecf0:	200012dc 	.word	0x200012dc
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 801ecf4:	bf00      	nop
 801ecf6:	bf00      	nop
	...

0801ed00 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ed00:	4807      	ldr	r0, [pc, #28]	; (801ed20 <xVTORConst>)
 801ed02:	6800      	ldr	r0, [r0, #0]
 801ed04:	6800      	ldr	r0, [r0, #0]
 801ed06:	f380 8808 	msr	MSP, r0
 801ed0a:	b662      	cpsie	i
 801ed0c:	b661      	cpsie	f
 801ed0e:	f3bf 8f4f 	dsb	sy
 801ed12:	f3bf 8f6f 	isb	sy
 801ed16:	df02      	svc	2
 801ed18:	bf00      	nop
 801ed1a:	bf00      	nop
 801ed1c:	f3af 8000 	nop.w

0801ed20 <xVTORConst>:
 801ed20:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 801ed24:	bf00      	nop
 801ed26:	bf00      	nop

0801ed28 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ed28:	f3ef 8011 	mrs	r0, BASEPRI
 801ed2c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 801ed30:	f381 8811 	msr	BASEPRI, r1
 801ed34:	f3bf 8f4f 	dsb	sy
 801ed38:	f3bf 8f6f 	isb	sy
 801ed3c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801ed3e:	bf00      	nop
 801ed40:	4618      	mov	r0, r3

0801ed42 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ed42:	f380 8811 	msr	BASEPRI, r0
 801ed46:	f3bf 8f4f 	dsb	sy
 801ed4a:	f3bf 8f6f 	isb	sy
 801ed4e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 801ed50:	bf00      	nop
	...

0801ed60 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ed60:	f3ef 8009 	mrs	r0, PSP
 801ed64:	f3ef 820b 	mrs	r2, PSPLIM
 801ed68:	4673      	mov	r3, lr
 801ed6a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801ed6e:	4a10      	ldr	r2, [pc, #64]	; (801edb0 <pxCurrentTCBConst>)
 801ed70:	6811      	ldr	r1, [r2, #0]
 801ed72:	6008      	str	r0, [r1, #0]
 801ed74:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 801ed78:	f380 8811 	msr	BASEPRI, r0
 801ed7c:	f3bf 8f4f 	dsb	sy
 801ed80:	f3bf 8f6f 	isb	sy
 801ed84:	f7ff f846 	bl	801de14 <vTaskSwitchContext>
 801ed88:	f04f 0000 	mov.w	r0, #0
 801ed8c:	f380 8811 	msr	BASEPRI, r0
 801ed90:	4a07      	ldr	r2, [pc, #28]	; (801edb0 <pxCurrentTCBConst>)
 801ed92:	6811      	ldr	r1, [r2, #0]
 801ed94:	6808      	ldr	r0, [r1, #0]
 801ed96:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801ed9a:	f382 880b 	msr	PSPLIM, r2
 801ed9e:	f380 8809 	msr	PSP, r0
 801eda2:	4718      	bx	r3
 801eda4:	f3af 8000 	nop.w
 801eda8:	f3af 8000 	nop.w
 801edac:	f3af 8000 	nop.w

0801edb0 <pxCurrentTCBConst>:
 801edb0:	200012dc 	.word	0x200012dc
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801edb4:	bf00      	nop
 801edb6:	bf00      	nop
	...

0801edc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801edc0:	f01e 0f04 	tst.w	lr, #4
 801edc4:	bf0c      	ite	eq
 801edc6:	f3ef 8008 	mrseq	r0, MSP
 801edca:	f3ef 8009 	mrsne	r0, PSP
 801edce:	4904      	ldr	r1, [pc, #16]	; (801ede0 <svchandler_address_const>)
 801edd0:	4708      	bx	r1
 801edd2:	bf00      	nop
 801edd4:	f3af 8000 	nop.w
 801edd8:	f3af 8000 	nop.w
 801eddc:	f3af 8000 	nop.w

0801ede0 <svchandler_address_const>:
 801ede0:	0801eb4d 	.word	0x0801eb4d
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 801ede4:	bf00      	nop
 801ede6:	bf00      	nop

0801ede8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801ede8:	b580      	push	{r7, lr}
 801edea:	b086      	sub	sp, #24
 801edec:	af00      	add	r7, sp, #0
 801edee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801edf0:	2300      	movs	r3, #0
 801edf2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801edf4:	f7fe feb0 	bl	801db58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801edf8:	4b4f      	ldr	r3, [pc, #316]	; (801ef38 <pvPortMalloc+0x150>)
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d101      	bne.n	801ee04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801ee00:	f000 f8f8 	bl	801eff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801ee04:	4b4d      	ldr	r3, [pc, #308]	; (801ef3c <pvPortMalloc+0x154>)
 801ee06:	681a      	ldr	r2, [r3, #0]
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	4013      	ands	r3, r2
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	f040 8083 	bne.w	801ef18 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d015      	beq.n	801ee44 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 801ee18:	2208      	movs	r2, #8
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	4413      	add	r3, r2
 801ee1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	f003 0307 	and.w	r3, r3, #7
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d00c      	beq.n	801ee44 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	f023 0307 	bic.w	r3, r3, #7
 801ee30:	3308      	adds	r3, #8
 801ee32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	f003 0307 	and.w	r3, r3, #7
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d002      	beq.n	801ee44 <pvPortMalloc+0x5c>
 801ee3e:	f7ff ff73 	bl	801ed28 <ulSetInterruptMask>
 801ee42:	e7fe      	b.n	801ee42 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d066      	beq.n	801ef18 <pvPortMalloc+0x130>
 801ee4a:	4b3d      	ldr	r3, [pc, #244]	; (801ef40 <pvPortMalloc+0x158>)
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	687a      	ldr	r2, [r7, #4]
 801ee50:	429a      	cmp	r2, r3
 801ee52:	d861      	bhi.n	801ef18 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801ee54:	4b3b      	ldr	r3, [pc, #236]	; (801ef44 <pvPortMalloc+0x15c>)
 801ee56:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801ee58:	4b3a      	ldr	r3, [pc, #232]	; (801ef44 <pvPortMalloc+0x15c>)
 801ee5a:	681b      	ldr	r3, [r3, #0]
 801ee5c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ee5e:	e004      	b.n	801ee6a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 801ee60:	697b      	ldr	r3, [r7, #20]
 801ee62:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801ee64:	697b      	ldr	r3, [r7, #20]
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ee6a:	697b      	ldr	r3, [r7, #20]
 801ee6c:	685b      	ldr	r3, [r3, #4]
 801ee6e:	687a      	ldr	r2, [r7, #4]
 801ee70:	429a      	cmp	r2, r3
 801ee72:	d903      	bls.n	801ee7c <pvPortMalloc+0x94>
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	d1f1      	bne.n	801ee60 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801ee7c:	4b2e      	ldr	r3, [pc, #184]	; (801ef38 <pvPortMalloc+0x150>)
 801ee7e:	681b      	ldr	r3, [r3, #0]
 801ee80:	697a      	ldr	r2, [r7, #20]
 801ee82:	429a      	cmp	r2, r3
 801ee84:	d048      	beq.n	801ef18 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801ee86:	693b      	ldr	r3, [r7, #16]
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	2208      	movs	r2, #8
 801ee8c:	4413      	add	r3, r2
 801ee8e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801ee90:	697b      	ldr	r3, [r7, #20]
 801ee92:	681a      	ldr	r2, [r3, #0]
 801ee94:	693b      	ldr	r3, [r7, #16]
 801ee96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801ee98:	697b      	ldr	r3, [r7, #20]
 801ee9a:	685a      	ldr	r2, [r3, #4]
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	1ad2      	subs	r2, r2, r3
 801eea0:	2308      	movs	r3, #8
 801eea2:	005b      	lsls	r3, r3, #1
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d917      	bls.n	801eed8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801eea8:	697a      	ldr	r2, [r7, #20]
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	4413      	add	r3, r2
 801eeae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801eeb0:	68bb      	ldr	r3, [r7, #8]
 801eeb2:	f003 0307 	and.w	r3, r3, #7
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	d002      	beq.n	801eec0 <pvPortMalloc+0xd8>
 801eeba:	f7ff ff35 	bl	801ed28 <ulSetInterruptMask>
 801eebe:	e7fe      	b.n	801eebe <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801eec0:	697b      	ldr	r3, [r7, #20]
 801eec2:	685a      	ldr	r2, [r3, #4]
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	1ad2      	subs	r2, r2, r3
 801eec8:	68bb      	ldr	r3, [r7, #8]
 801eeca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801eecc:	697b      	ldr	r3, [r7, #20]
 801eece:	687a      	ldr	r2, [r7, #4]
 801eed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801eed2:	68b8      	ldr	r0, [r7, #8]
 801eed4:	f000 f8f0 	bl	801f0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801eed8:	4b19      	ldr	r3, [pc, #100]	; (801ef40 <pvPortMalloc+0x158>)
 801eeda:	681a      	ldr	r2, [r3, #0]
 801eedc:	697b      	ldr	r3, [r7, #20]
 801eede:	685b      	ldr	r3, [r3, #4]
 801eee0:	1ad3      	subs	r3, r2, r3
 801eee2:	4a17      	ldr	r2, [pc, #92]	; (801ef40 <pvPortMalloc+0x158>)
 801eee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801eee6:	4b16      	ldr	r3, [pc, #88]	; (801ef40 <pvPortMalloc+0x158>)
 801eee8:	681a      	ldr	r2, [r3, #0]
 801eeea:	4b17      	ldr	r3, [pc, #92]	; (801ef48 <pvPortMalloc+0x160>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	429a      	cmp	r2, r3
 801eef0:	d203      	bcs.n	801eefa <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801eef2:	4b13      	ldr	r3, [pc, #76]	; (801ef40 <pvPortMalloc+0x158>)
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	4a14      	ldr	r2, [pc, #80]	; (801ef48 <pvPortMalloc+0x160>)
 801eef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801eefa:	697b      	ldr	r3, [r7, #20]
 801eefc:	685a      	ldr	r2, [r3, #4]
 801eefe:	4b0f      	ldr	r3, [pc, #60]	; (801ef3c <pvPortMalloc+0x154>)
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	431a      	orrs	r2, r3
 801ef04:	697b      	ldr	r3, [r7, #20]
 801ef06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ef08:	697b      	ldr	r3, [r7, #20]
 801ef0a:	2200      	movs	r2, #0
 801ef0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801ef0e:	4b0f      	ldr	r3, [pc, #60]	; (801ef4c <pvPortMalloc+0x164>)
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	3301      	adds	r3, #1
 801ef14:	4a0d      	ldr	r2, [pc, #52]	; (801ef4c <pvPortMalloc+0x164>)
 801ef16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ef18:	f7fe fe2c 	bl	801db74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	f003 0307 	and.w	r3, r3, #7
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	d002      	beq.n	801ef2c <pvPortMalloc+0x144>
 801ef26:	f7ff feff 	bl	801ed28 <ulSetInterruptMask>
 801ef2a:	e7fe      	b.n	801ef2a <pvPortMalloc+0x142>
	return pvReturn;
 801ef2c:	68fb      	ldr	r3, [r7, #12]
}
 801ef2e:	4618      	mov	r0, r3
 801ef30:	3718      	adds	r7, #24
 801ef32:	46bd      	mov	sp, r7
 801ef34:	bd80      	pop	{r7, pc}
 801ef36:	bf00      	nop
 801ef38:	20003910 	.word	0x20003910
 801ef3c:	20003924 	.word	0x20003924
 801ef40:	20003914 	.word	0x20003914
 801ef44:	20003908 	.word	0x20003908
 801ef48:	20003918 	.word	0x20003918
 801ef4c:	2000391c 	.word	0x2000391c

0801ef50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ef50:	b580      	push	{r7, lr}
 801ef52:	b084      	sub	sp, #16
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d03d      	beq.n	801efde <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ef62:	2308      	movs	r3, #8
 801ef64:	425b      	negs	r3, r3
 801ef66:	68fa      	ldr	r2, [r7, #12]
 801ef68:	4413      	add	r3, r2
 801ef6a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ef70:	68bb      	ldr	r3, [r7, #8]
 801ef72:	685a      	ldr	r2, [r3, #4]
 801ef74:	4b1c      	ldr	r3, [pc, #112]	; (801efe8 <vPortFree+0x98>)
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	4013      	ands	r3, r2
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d102      	bne.n	801ef84 <vPortFree+0x34>
 801ef7e:	f7ff fed3 	bl	801ed28 <ulSetInterruptMask>
 801ef82:	e7fe      	b.n	801ef82 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801ef84:	68bb      	ldr	r3, [r7, #8]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d002      	beq.n	801ef92 <vPortFree+0x42>
 801ef8c:	f7ff fecc 	bl	801ed28 <ulSetInterruptMask>
 801ef90:	e7fe      	b.n	801ef90 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ef92:	68bb      	ldr	r3, [r7, #8]
 801ef94:	685a      	ldr	r2, [r3, #4]
 801ef96:	4b14      	ldr	r3, [pc, #80]	; (801efe8 <vPortFree+0x98>)
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	4013      	ands	r3, r2
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d01e      	beq.n	801efde <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801efa0:	68bb      	ldr	r3, [r7, #8]
 801efa2:	681b      	ldr	r3, [r3, #0]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d11a      	bne.n	801efde <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801efa8:	68bb      	ldr	r3, [r7, #8]
 801efaa:	685a      	ldr	r2, [r3, #4]
 801efac:	4b0e      	ldr	r3, [pc, #56]	; (801efe8 <vPortFree+0x98>)
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	43db      	mvns	r3, r3
 801efb2:	401a      	ands	r2, r3
 801efb4:	68bb      	ldr	r3, [r7, #8]
 801efb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801efb8:	f7fe fdce 	bl	801db58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801efbc:	68bb      	ldr	r3, [r7, #8]
 801efbe:	685a      	ldr	r2, [r3, #4]
 801efc0:	4b0a      	ldr	r3, [pc, #40]	; (801efec <vPortFree+0x9c>)
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	4413      	add	r3, r2
 801efc6:	4a09      	ldr	r2, [pc, #36]	; (801efec <vPortFree+0x9c>)
 801efc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801efca:	68b8      	ldr	r0, [r7, #8]
 801efcc:	f000 f874 	bl	801f0b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801efd0:	4b07      	ldr	r3, [pc, #28]	; (801eff0 <vPortFree+0xa0>)
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	3301      	adds	r3, #1
 801efd6:	4a06      	ldr	r2, [pc, #24]	; (801eff0 <vPortFree+0xa0>)
 801efd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801efda:	f7fe fdcb 	bl	801db74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801efde:	bf00      	nop
 801efe0:	3710      	adds	r7, #16
 801efe2:	46bd      	mov	sp, r7
 801efe4:	bd80      	pop	{r7, pc}
 801efe6:	bf00      	nop
 801efe8:	20003924 	.word	0x20003924
 801efec:	20003914 	.word	0x20003914
 801eff0:	20003920 	.word	0x20003920

0801eff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801eff4:	b480      	push	{r7}
 801eff6:	b085      	sub	sp, #20
 801eff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801effa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801effe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801f000:	4b27      	ldr	r3, [pc, #156]	; (801f0a0 <prvHeapInit+0xac>)
 801f002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801f004:	68fb      	ldr	r3, [r7, #12]
 801f006:	f003 0307 	and.w	r3, r3, #7
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	d00c      	beq.n	801f028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801f00e:	68fb      	ldr	r3, [r7, #12]
 801f010:	3307      	adds	r3, #7
 801f012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f014:	68fb      	ldr	r3, [r7, #12]
 801f016:	f023 0307 	bic.w	r3, r3, #7
 801f01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801f01c:	68ba      	ldr	r2, [r7, #8]
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	1ad3      	subs	r3, r2, r3
 801f022:	4a1f      	ldr	r2, [pc, #124]	; (801f0a0 <prvHeapInit+0xac>)
 801f024:	4413      	add	r3, r2
 801f026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801f02c:	4a1d      	ldr	r2, [pc, #116]	; (801f0a4 <prvHeapInit+0xb0>)
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801f032:	4b1c      	ldr	r3, [pc, #112]	; (801f0a4 <prvHeapInit+0xb0>)
 801f034:	2200      	movs	r2, #0
 801f036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	68ba      	ldr	r2, [r7, #8]
 801f03c:	4413      	add	r3, r2
 801f03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801f040:	2208      	movs	r2, #8
 801f042:	68fb      	ldr	r3, [r7, #12]
 801f044:	1a9b      	subs	r3, r3, r2
 801f046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801f048:	68fb      	ldr	r3, [r7, #12]
 801f04a:	f023 0307 	bic.w	r3, r3, #7
 801f04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	4a15      	ldr	r2, [pc, #84]	; (801f0a8 <prvHeapInit+0xb4>)
 801f054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801f056:	4b14      	ldr	r3, [pc, #80]	; (801f0a8 <prvHeapInit+0xb4>)
 801f058:	681b      	ldr	r3, [r3, #0]
 801f05a:	2200      	movs	r2, #0
 801f05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801f05e:	4b12      	ldr	r3, [pc, #72]	; (801f0a8 <prvHeapInit+0xb4>)
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	2200      	movs	r2, #0
 801f064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801f06a:	683b      	ldr	r3, [r7, #0]
 801f06c:	68fa      	ldr	r2, [r7, #12]
 801f06e:	1ad2      	subs	r2, r2, r3
 801f070:	683b      	ldr	r3, [r7, #0]
 801f072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801f074:	4b0c      	ldr	r3, [pc, #48]	; (801f0a8 <prvHeapInit+0xb4>)
 801f076:	681a      	ldr	r2, [r3, #0]
 801f078:	683b      	ldr	r3, [r7, #0]
 801f07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f07c:	683b      	ldr	r3, [r7, #0]
 801f07e:	685b      	ldr	r3, [r3, #4]
 801f080:	4a0a      	ldr	r2, [pc, #40]	; (801f0ac <prvHeapInit+0xb8>)
 801f082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801f084:	683b      	ldr	r3, [r7, #0]
 801f086:	685b      	ldr	r3, [r3, #4]
 801f088:	4a09      	ldr	r2, [pc, #36]	; (801f0b0 <prvHeapInit+0xbc>)
 801f08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801f08c:	4b09      	ldr	r3, [pc, #36]	; (801f0b4 <prvHeapInit+0xc0>)
 801f08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801f092:	601a      	str	r2, [r3, #0]
}
 801f094:	bf00      	nop
 801f096:	3714      	adds	r7, #20
 801f098:	46bd      	mov	sp, r7
 801f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f09e:	4770      	bx	lr
 801f0a0:	20001908 	.word	0x20001908
 801f0a4:	20003908 	.word	0x20003908
 801f0a8:	20003910 	.word	0x20003910
 801f0ac:	20003918 	.word	0x20003918
 801f0b0:	20003914 	.word	0x20003914
 801f0b4:	20003924 	.word	0x20003924

0801f0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801f0b8:	b480      	push	{r7}
 801f0ba:	b085      	sub	sp, #20
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801f0c0:	4b28      	ldr	r3, [pc, #160]	; (801f164 <prvInsertBlockIntoFreeList+0xac>)
 801f0c2:	60fb      	str	r3, [r7, #12]
 801f0c4:	e002      	b.n	801f0cc <prvInsertBlockIntoFreeList+0x14>
 801f0c6:	68fb      	ldr	r3, [r7, #12]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	60fb      	str	r3, [r7, #12]
 801f0cc:	68fb      	ldr	r3, [r7, #12]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	687a      	ldr	r2, [r7, #4]
 801f0d2:	429a      	cmp	r2, r3
 801f0d4:	d8f7      	bhi.n	801f0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	685b      	ldr	r3, [r3, #4]
 801f0de:	68ba      	ldr	r2, [r7, #8]
 801f0e0:	4413      	add	r3, r2
 801f0e2:	687a      	ldr	r2, [r7, #4]
 801f0e4:	429a      	cmp	r2, r3
 801f0e6:	d108      	bne.n	801f0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	685a      	ldr	r2, [r3, #4]
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	685b      	ldr	r3, [r3, #4]
 801f0f0:	441a      	add	r2, r3
 801f0f2:	68fb      	ldr	r3, [r7, #12]
 801f0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	685b      	ldr	r3, [r3, #4]
 801f102:	68ba      	ldr	r2, [r7, #8]
 801f104:	441a      	add	r2, r3
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	681b      	ldr	r3, [r3, #0]
 801f10a:	429a      	cmp	r2, r3
 801f10c:	d118      	bne.n	801f140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	681a      	ldr	r2, [r3, #0]
 801f112:	4b15      	ldr	r3, [pc, #84]	; (801f168 <prvInsertBlockIntoFreeList+0xb0>)
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	429a      	cmp	r2, r3
 801f118:	d00d      	beq.n	801f136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	685a      	ldr	r2, [r3, #4]
 801f11e:	68fb      	ldr	r3, [r7, #12]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	685b      	ldr	r3, [r3, #4]
 801f124:	441a      	add	r2, r3
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801f12a:	68fb      	ldr	r3, [r7, #12]
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	681a      	ldr	r2, [r3, #0]
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	601a      	str	r2, [r3, #0]
 801f134:	e008      	b.n	801f148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801f136:	4b0c      	ldr	r3, [pc, #48]	; (801f168 <prvInsertBlockIntoFreeList+0xb0>)
 801f138:	681a      	ldr	r2, [r3, #0]
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	601a      	str	r2, [r3, #0]
 801f13e:	e003      	b.n	801f148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801f140:	68fb      	ldr	r3, [r7, #12]
 801f142:	681a      	ldr	r2, [r3, #0]
 801f144:	687b      	ldr	r3, [r7, #4]
 801f146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801f148:	68fa      	ldr	r2, [r7, #12]
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	429a      	cmp	r2, r3
 801f14e:	d002      	beq.n	801f156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801f150:	68fb      	ldr	r3, [r7, #12]
 801f152:	687a      	ldr	r2, [r7, #4]
 801f154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801f156:	bf00      	nop
 801f158:	3714      	adds	r7, #20
 801f15a:	46bd      	mov	sp, r7
 801f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f160:	4770      	bx	lr
 801f162:	bf00      	nop
 801f164:	20003908 	.word	0x20003908
 801f168:	20003910 	.word	0x20003910

0801f16c <_ZdlPv>:
 801f16c:	f002 b9fc 	b.w	8021568 <free>

0801f170 <_ZdlPvj>:
 801f170:	f7ff bffc 	b.w	801f16c <_ZdlPv>

0801f174 <_Znwj>:
 801f174:	2801      	cmp	r0, #1
 801f176:	bf38      	it	cc
 801f178:	2001      	movcc	r0, #1
 801f17a:	b510      	push	{r4, lr}
 801f17c:	4604      	mov	r4, r0
 801f17e:	4620      	mov	r0, r4
 801f180:	f002 f9ea 	bl	8021558 <malloc>
 801f184:	b100      	cbz	r0, 801f188 <_Znwj+0x14>
 801f186:	bd10      	pop	{r4, pc}
 801f188:	f000 f812 	bl	801f1b0 <_ZSt15get_new_handlerv>
 801f18c:	b908      	cbnz	r0, 801f192 <_Znwj+0x1e>
 801f18e:	f002 f9dc 	bl	802154a <abort>
 801f192:	4780      	blx	r0
 801f194:	e7f3      	b.n	801f17e <_Znwj+0xa>

0801f196 <_ZNSaIcEC1Ev>:
 801f196:	4770      	bx	lr

0801f198 <_ZNSaIcEC1ERKS_>:
 801f198:	4770      	bx	lr

0801f19a <_ZNSaIcED1Ev>:
 801f19a:	4770      	bx	lr

0801f19c <_ZSt17__throw_bad_allocv>:
 801f19c:	b508      	push	{r3, lr}
 801f19e:	f002 f9d4 	bl	802154a <abort>

0801f1a2 <_ZSt28__throw_bad_array_new_lengthv>:
 801f1a2:	b508      	push	{r3, lr}
 801f1a4:	f002 f9d1 	bl	802154a <abort>

0801f1a8 <_ZSt20__throw_length_errorPKc>:
 801f1a8:	b508      	push	{r3, lr}
 801f1aa:	f002 f9ce 	bl	802154a <abort>
	...

0801f1b0 <_ZSt15get_new_handlerv>:
 801f1b0:	4b01      	ldr	r3, [pc, #4]	; (801f1b8 <_ZSt15get_new_handlerv+0x8>)
 801f1b2:	e8d3 0faf 	lda	r0, [r3]
 801f1b6:	4770      	bx	lr
 801f1b8:	20003928 	.word	0x20003928

0801f1bc <atan2>:
 801f1bc:	f000 ba44 	b.w	801f648 <__ieee754_atan2>

0801f1c0 <fmod>:
 801f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1c2:	ec57 6b10 	vmov	r6, r7, d0
 801f1c6:	ec55 4b11 	vmov	r4, r5, d1
 801f1ca:	ed2d 8b02 	vpush	{d8}
 801f1ce:	f000 fb01 	bl	801f7d4 <__ieee754_fmod>
 801f1d2:	4622      	mov	r2, r4
 801f1d4:	462b      	mov	r3, r5
 801f1d6:	4630      	mov	r0, r6
 801f1d8:	4639      	mov	r1, r7
 801f1da:	eeb0 8a40 	vmov.f32	s16, s0
 801f1de:	eef0 8a60 	vmov.f32	s17, s1
 801f1e2:	f7e1 fc95 	bl	8000b10 <__aeabi_dcmpun>
 801f1e6:	b990      	cbnz	r0, 801f20e <fmod+0x4e>
 801f1e8:	2200      	movs	r2, #0
 801f1ea:	2300      	movs	r3, #0
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	4629      	mov	r1, r5
 801f1f0:	f7e1 fc5c 	bl	8000aac <__aeabi_dcmpeq>
 801f1f4:	b158      	cbz	r0, 801f20e <fmod+0x4e>
 801f1f6:	f002 fc99 	bl	8021b2c <__errno>
 801f1fa:	2321      	movs	r3, #33	; 0x21
 801f1fc:	2200      	movs	r2, #0
 801f1fe:	6003      	str	r3, [r0, #0]
 801f200:	2300      	movs	r3, #0
 801f202:	4610      	mov	r0, r2
 801f204:	4619      	mov	r1, r3
 801f206:	f7e1 fb13 	bl	8000830 <__aeabi_ddiv>
 801f20a:	ec41 0b18 	vmov	d8, r0, r1
 801f20e:	eeb0 0a48 	vmov.f32	s0, s16
 801f212:	eef0 0a68 	vmov.f32	s1, s17
 801f216:	ecbd 8b02 	vpop	{d8}
 801f21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f21c <pow>:
 801f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f21e:	ec55 4b11 	vmov	r4, r5, d1
 801f222:	ed2d 8b02 	vpush	{d8}
 801f226:	eeb0 8a40 	vmov.f32	s16, s0
 801f22a:	eef0 8a60 	vmov.f32	s17, s1
 801f22e:	f000 fbdf 	bl	801f9f0 <__ieee754_pow>
 801f232:	4622      	mov	r2, r4
 801f234:	462b      	mov	r3, r5
 801f236:	4620      	mov	r0, r4
 801f238:	4629      	mov	r1, r5
 801f23a:	ec57 6b10 	vmov	r6, r7, d0
 801f23e:	f7e1 fc67 	bl	8000b10 <__aeabi_dcmpun>
 801f242:	2800      	cmp	r0, #0
 801f244:	d13b      	bne.n	801f2be <pow+0xa2>
 801f246:	2200      	movs	r2, #0
 801f248:	2300      	movs	r3, #0
 801f24a:	ec51 0b18 	vmov	r0, r1, d8
 801f24e:	f7e1 fc2d 	bl	8000aac <__aeabi_dcmpeq>
 801f252:	b1b8      	cbz	r0, 801f284 <pow+0x68>
 801f254:	2200      	movs	r2, #0
 801f256:	2300      	movs	r3, #0
 801f258:	4620      	mov	r0, r4
 801f25a:	4629      	mov	r1, r5
 801f25c:	f7e1 fc26 	bl	8000aac <__aeabi_dcmpeq>
 801f260:	2800      	cmp	r0, #0
 801f262:	d146      	bne.n	801f2f2 <pow+0xd6>
 801f264:	ec45 4b10 	vmov	d0, r4, r5
 801f268:	f000 f900 	bl	801f46c <finite>
 801f26c:	b338      	cbz	r0, 801f2be <pow+0xa2>
 801f26e:	2200      	movs	r2, #0
 801f270:	2300      	movs	r3, #0
 801f272:	4620      	mov	r0, r4
 801f274:	4629      	mov	r1, r5
 801f276:	f7e1 fc23 	bl	8000ac0 <__aeabi_dcmplt>
 801f27a:	b300      	cbz	r0, 801f2be <pow+0xa2>
 801f27c:	f002 fc56 	bl	8021b2c <__errno>
 801f280:	2322      	movs	r3, #34	; 0x22
 801f282:	e01b      	b.n	801f2bc <pow+0xa0>
 801f284:	ec47 6b10 	vmov	d0, r6, r7
 801f288:	f000 f8f0 	bl	801f46c <finite>
 801f28c:	b9e0      	cbnz	r0, 801f2c8 <pow+0xac>
 801f28e:	eeb0 0a48 	vmov.f32	s0, s16
 801f292:	eef0 0a68 	vmov.f32	s1, s17
 801f296:	f000 f8e9 	bl	801f46c <finite>
 801f29a:	b1a8      	cbz	r0, 801f2c8 <pow+0xac>
 801f29c:	ec45 4b10 	vmov	d0, r4, r5
 801f2a0:	f000 f8e4 	bl	801f46c <finite>
 801f2a4:	b180      	cbz	r0, 801f2c8 <pow+0xac>
 801f2a6:	4632      	mov	r2, r6
 801f2a8:	463b      	mov	r3, r7
 801f2aa:	4630      	mov	r0, r6
 801f2ac:	4639      	mov	r1, r7
 801f2ae:	f7e1 fc2f 	bl	8000b10 <__aeabi_dcmpun>
 801f2b2:	2800      	cmp	r0, #0
 801f2b4:	d0e2      	beq.n	801f27c <pow+0x60>
 801f2b6:	f002 fc39 	bl	8021b2c <__errno>
 801f2ba:	2321      	movs	r3, #33	; 0x21
 801f2bc:	6003      	str	r3, [r0, #0]
 801f2be:	ecbd 8b02 	vpop	{d8}
 801f2c2:	ec47 6b10 	vmov	d0, r6, r7
 801f2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2c8:	2200      	movs	r2, #0
 801f2ca:	2300      	movs	r3, #0
 801f2cc:	4630      	mov	r0, r6
 801f2ce:	4639      	mov	r1, r7
 801f2d0:	f7e1 fbec 	bl	8000aac <__aeabi_dcmpeq>
 801f2d4:	2800      	cmp	r0, #0
 801f2d6:	d0f2      	beq.n	801f2be <pow+0xa2>
 801f2d8:	eeb0 0a48 	vmov.f32	s0, s16
 801f2dc:	eef0 0a68 	vmov.f32	s1, s17
 801f2e0:	f000 f8c4 	bl	801f46c <finite>
 801f2e4:	2800      	cmp	r0, #0
 801f2e6:	d0ea      	beq.n	801f2be <pow+0xa2>
 801f2e8:	ec45 4b10 	vmov	d0, r4, r5
 801f2ec:	f000 f8be 	bl	801f46c <finite>
 801f2f0:	e7c3      	b.n	801f27a <pow+0x5e>
 801f2f2:	2600      	movs	r6, #0
 801f2f4:	4f00      	ldr	r7, [pc, #0]	; (801f2f8 <pow+0xdc>)
 801f2f6:	e7e2      	b.n	801f2be <pow+0xa2>
 801f2f8:	3ff00000 	.word	0x3ff00000

0801f2fc <sqrt>:
 801f2fc:	b538      	push	{r3, r4, r5, lr}
 801f2fe:	ec55 4b10 	vmov	r4, r5, d0
 801f302:	ed2d 8b02 	vpush	{d8}
 801f306:	f000 f8bd 	bl	801f484 <__ieee754_sqrt>
 801f30a:	4622      	mov	r2, r4
 801f30c:	462b      	mov	r3, r5
 801f30e:	4620      	mov	r0, r4
 801f310:	4629      	mov	r1, r5
 801f312:	eeb0 8a40 	vmov.f32	s16, s0
 801f316:	eef0 8a60 	vmov.f32	s17, s1
 801f31a:	f7e1 fbf9 	bl	8000b10 <__aeabi_dcmpun>
 801f31e:	b990      	cbnz	r0, 801f346 <sqrt+0x4a>
 801f320:	2200      	movs	r2, #0
 801f322:	2300      	movs	r3, #0
 801f324:	4620      	mov	r0, r4
 801f326:	4629      	mov	r1, r5
 801f328:	f7e1 fbca 	bl	8000ac0 <__aeabi_dcmplt>
 801f32c:	b158      	cbz	r0, 801f346 <sqrt+0x4a>
 801f32e:	f002 fbfd 	bl	8021b2c <__errno>
 801f332:	2321      	movs	r3, #33	; 0x21
 801f334:	2200      	movs	r2, #0
 801f336:	6003      	str	r3, [r0, #0]
 801f338:	2300      	movs	r3, #0
 801f33a:	4610      	mov	r0, r2
 801f33c:	4619      	mov	r1, r3
 801f33e:	f7e1 fa77 	bl	8000830 <__aeabi_ddiv>
 801f342:	ec41 0b18 	vmov	d8, r0, r1
 801f346:	eeb0 0a48 	vmov.f32	s0, s16
 801f34a:	eef0 0a68 	vmov.f32	s1, s17
 801f34e:	ecbd 8b02 	vpop	{d8}
 801f352:	bd38      	pop	{r3, r4, r5, pc}

0801f354 <atan2f>:
 801f354:	f001 bacc 	b.w	80208f0 <__ieee754_atan2f>

0801f358 <cosf>:
 801f358:	ee10 3a10 	vmov	r3, s0
 801f35c:	b507      	push	{r0, r1, r2, lr}
 801f35e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f362:	4a1d      	ldr	r2, [pc, #116]	; (801f3d8 <cosf+0x80>)
 801f364:	4293      	cmp	r3, r2
 801f366:	dc06      	bgt.n	801f376 <cosf+0x1e>
 801f368:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801f3dc <cosf+0x84>
 801f36c:	b003      	add	sp, #12
 801f36e:	f85d eb04 	ldr.w	lr, [sp], #4
 801f372:	f001 ba17 	b.w	80207a4 <__kernel_cosf>
 801f376:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f37a:	db04      	blt.n	801f386 <cosf+0x2e>
 801f37c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f380:	b003      	add	sp, #12
 801f382:	f85d fb04 	ldr.w	pc, [sp], #4
 801f386:	4668      	mov	r0, sp
 801f388:	f001 fb50 	bl	8020a2c <__ieee754_rem_pio2f>
 801f38c:	f000 0003 	and.w	r0, r0, #3
 801f390:	2801      	cmp	r0, #1
 801f392:	d009      	beq.n	801f3a8 <cosf+0x50>
 801f394:	2802      	cmp	r0, #2
 801f396:	d010      	beq.n	801f3ba <cosf+0x62>
 801f398:	b9b0      	cbnz	r0, 801f3c8 <cosf+0x70>
 801f39a:	eddd 0a01 	vldr	s1, [sp, #4]
 801f39e:	ed9d 0a00 	vldr	s0, [sp]
 801f3a2:	f001 f9ff 	bl	80207a4 <__kernel_cosf>
 801f3a6:	e7eb      	b.n	801f380 <cosf+0x28>
 801f3a8:	eddd 0a01 	vldr	s1, [sp, #4]
 801f3ac:	ed9d 0a00 	vldr	s0, [sp]
 801f3b0:	f001 fa56 	bl	8020860 <__kernel_sinf>
 801f3b4:	eeb1 0a40 	vneg.f32	s0, s0
 801f3b8:	e7e2      	b.n	801f380 <cosf+0x28>
 801f3ba:	eddd 0a01 	vldr	s1, [sp, #4]
 801f3be:	ed9d 0a00 	vldr	s0, [sp]
 801f3c2:	f001 f9ef 	bl	80207a4 <__kernel_cosf>
 801f3c6:	e7f5      	b.n	801f3b4 <cosf+0x5c>
 801f3c8:	2001      	movs	r0, #1
 801f3ca:	eddd 0a01 	vldr	s1, [sp, #4]
 801f3ce:	ed9d 0a00 	vldr	s0, [sp]
 801f3d2:	f001 fa45 	bl	8020860 <__kernel_sinf>
 801f3d6:	e7d3      	b.n	801f380 <cosf+0x28>
 801f3d8:	3f490fd8 	.word	0x3f490fd8
 801f3dc:	00000000 	.word	0x00000000

0801f3e0 <sinf>:
 801f3e0:	ee10 3a10 	vmov	r3, s0
 801f3e4:	b507      	push	{r0, r1, r2, lr}
 801f3e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f3ea:	4a1e      	ldr	r2, [pc, #120]	; (801f464 <sinf+0x84>)
 801f3ec:	4293      	cmp	r3, r2
 801f3ee:	dc07      	bgt.n	801f400 <sinf+0x20>
 801f3f0:	2000      	movs	r0, #0
 801f3f2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801f468 <sinf+0x88>
 801f3f6:	b003      	add	sp, #12
 801f3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801f3fc:	f001 ba30 	b.w	8020860 <__kernel_sinf>
 801f400:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f404:	db04      	blt.n	801f410 <sinf+0x30>
 801f406:	ee30 0a40 	vsub.f32	s0, s0, s0
 801f40a:	b003      	add	sp, #12
 801f40c:	f85d fb04 	ldr.w	pc, [sp], #4
 801f410:	4668      	mov	r0, sp
 801f412:	f001 fb0b 	bl	8020a2c <__ieee754_rem_pio2f>
 801f416:	f000 0003 	and.w	r0, r0, #3
 801f41a:	2801      	cmp	r0, #1
 801f41c:	d00a      	beq.n	801f434 <sinf+0x54>
 801f41e:	2802      	cmp	r0, #2
 801f420:	d00f      	beq.n	801f442 <sinf+0x62>
 801f422:	b9c0      	cbnz	r0, 801f456 <sinf+0x76>
 801f424:	2001      	movs	r0, #1
 801f426:	eddd 0a01 	vldr	s1, [sp, #4]
 801f42a:	ed9d 0a00 	vldr	s0, [sp]
 801f42e:	f001 fa17 	bl	8020860 <__kernel_sinf>
 801f432:	e7ea      	b.n	801f40a <sinf+0x2a>
 801f434:	eddd 0a01 	vldr	s1, [sp, #4]
 801f438:	ed9d 0a00 	vldr	s0, [sp]
 801f43c:	f001 f9b2 	bl	80207a4 <__kernel_cosf>
 801f440:	e7e3      	b.n	801f40a <sinf+0x2a>
 801f442:	2001      	movs	r0, #1
 801f444:	eddd 0a01 	vldr	s1, [sp, #4]
 801f448:	ed9d 0a00 	vldr	s0, [sp]
 801f44c:	f001 fa08 	bl	8020860 <__kernel_sinf>
 801f450:	eeb1 0a40 	vneg.f32	s0, s0
 801f454:	e7d9      	b.n	801f40a <sinf+0x2a>
 801f456:	eddd 0a01 	vldr	s1, [sp, #4]
 801f45a:	ed9d 0a00 	vldr	s0, [sp]
 801f45e:	f001 f9a1 	bl	80207a4 <__kernel_cosf>
 801f462:	e7f5      	b.n	801f450 <sinf+0x70>
 801f464:	3f490fd8 	.word	0x3f490fd8
 801f468:	00000000 	.word	0x00000000

0801f46c <finite>:
 801f46c:	b082      	sub	sp, #8
 801f46e:	ed8d 0b00 	vstr	d0, [sp]
 801f472:	9801      	ldr	r0, [sp, #4]
 801f474:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f478:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f47c:	0fc0      	lsrs	r0, r0, #31
 801f47e:	b002      	add	sp, #8
 801f480:	4770      	bx	lr
	...

0801f484 <__ieee754_sqrt>:
 801f484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f488:	4e6b      	ldr	r6, [pc, #428]	; (801f638 <__ieee754_sqrt+0x1b4>)
 801f48a:	ee10 0a10 	vmov	r0, s0
 801f48e:	ee10 2a10 	vmov	r2, s0
 801f492:	ec55 4b10 	vmov	r4, r5, d0
 801f496:	43ae      	bics	r6, r5
 801f498:	4629      	mov	r1, r5
 801f49a:	462b      	mov	r3, r5
 801f49c:	d10d      	bne.n	801f4ba <__ieee754_sqrt+0x36>
 801f49e:	f7e1 f89d 	bl	80005dc <__aeabi_dmul>
 801f4a2:	4602      	mov	r2, r0
 801f4a4:	460b      	mov	r3, r1
 801f4a6:	4620      	mov	r0, r4
 801f4a8:	4629      	mov	r1, r5
 801f4aa:	f7e0 fee1 	bl	8000270 <__adddf3>
 801f4ae:	4604      	mov	r4, r0
 801f4b0:	460d      	mov	r5, r1
 801f4b2:	ec45 4b10 	vmov	d0, r4, r5
 801f4b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ba:	2d00      	cmp	r5, #0
 801f4bc:	dc0b      	bgt.n	801f4d6 <__ieee754_sqrt+0x52>
 801f4be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f4c2:	4326      	orrs	r6, r4
 801f4c4:	d0f5      	beq.n	801f4b2 <__ieee754_sqrt+0x2e>
 801f4c6:	b135      	cbz	r5, 801f4d6 <__ieee754_sqrt+0x52>
 801f4c8:	f7e0 fed0 	bl	800026c <__aeabi_dsub>
 801f4cc:	4602      	mov	r2, r0
 801f4ce:	460b      	mov	r3, r1
 801f4d0:	f7e1 f9ae 	bl	8000830 <__aeabi_ddiv>
 801f4d4:	e7eb      	b.n	801f4ae <__ieee754_sqrt+0x2a>
 801f4d6:	1509      	asrs	r1, r1, #20
 801f4d8:	f000 8091 	beq.w	801f5fe <__ieee754_sqrt+0x17a>
 801f4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f4e0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801f4e4:	07c9      	lsls	r1, r1, #31
 801f4e6:	f04f 0500 	mov.w	r5, #0
 801f4ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f4ee:	ea4f 0666 	mov.w	r6, r6, asr #1
 801f4f2:	f04f 0e16 	mov.w	lr, #22
 801f4f6:	46ac      	mov	ip, r5
 801f4f8:	bf58      	it	pl
 801f4fa:	005b      	lslpl	r3, r3, #1
 801f4fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f500:	bf5c      	itt	pl
 801f502:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801f506:	0052      	lslpl	r2, r2, #1
 801f508:	005b      	lsls	r3, r3, #1
 801f50a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f50e:	0052      	lsls	r2, r2, #1
 801f510:	eb0c 0001 	add.w	r0, ip, r1
 801f514:	4298      	cmp	r0, r3
 801f516:	bfde      	ittt	le
 801f518:	1a1b      	suble	r3, r3, r0
 801f51a:	eb00 0c01 	addle.w	ip, r0, r1
 801f51e:	186d      	addle	r5, r5, r1
 801f520:	f1be 0e01 	subs.w	lr, lr, #1
 801f524:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f528:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801f52c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f530:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f534:	d1ec      	bne.n	801f510 <__ieee754_sqrt+0x8c>
 801f536:	4674      	mov	r4, lr
 801f538:	2720      	movs	r7, #32
 801f53a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801f53e:	4563      	cmp	r3, ip
 801f540:	eb01 000e 	add.w	r0, r1, lr
 801f544:	dc02      	bgt.n	801f54c <__ieee754_sqrt+0xc8>
 801f546:	d114      	bne.n	801f572 <__ieee754_sqrt+0xee>
 801f548:	4290      	cmp	r0, r2
 801f54a:	d812      	bhi.n	801f572 <__ieee754_sqrt+0xee>
 801f54c:	2800      	cmp	r0, #0
 801f54e:	eb00 0e01 	add.w	lr, r0, r1
 801f552:	da59      	bge.n	801f608 <__ieee754_sqrt+0x184>
 801f554:	f1be 0f00 	cmp.w	lr, #0
 801f558:	db56      	blt.n	801f608 <__ieee754_sqrt+0x184>
 801f55a:	f10c 0801 	add.w	r8, ip, #1
 801f55e:	eba3 030c 	sub.w	r3, r3, ip
 801f562:	4290      	cmp	r0, r2
 801f564:	440c      	add	r4, r1
 801f566:	eba2 0200 	sub.w	r2, r2, r0
 801f56a:	bf88      	it	hi
 801f56c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f570:	46c4      	mov	ip, r8
 801f572:	005b      	lsls	r3, r3, #1
 801f574:	3f01      	subs	r7, #1
 801f576:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801f57a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f57e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f582:	d1dc      	bne.n	801f53e <__ieee754_sqrt+0xba>
 801f584:	4313      	orrs	r3, r2
 801f586:	d01b      	beq.n	801f5c0 <__ieee754_sqrt+0x13c>
 801f588:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 801f63c <__ieee754_sqrt+0x1b8>
 801f58c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 801f640 <__ieee754_sqrt+0x1bc>
 801f590:	e9da 0100 	ldrd	r0, r1, [sl]
 801f594:	e9db 2300 	ldrd	r2, r3, [fp]
 801f598:	e9da 8900 	ldrd	r8, r9, [sl]
 801f59c:	f7e0 fe66 	bl	800026c <__aeabi_dsub>
 801f5a0:	4602      	mov	r2, r0
 801f5a2:	460b      	mov	r3, r1
 801f5a4:	4640      	mov	r0, r8
 801f5a6:	4649      	mov	r1, r9
 801f5a8:	f7e1 fa94 	bl	8000ad4 <__aeabi_dcmple>
 801f5ac:	b140      	cbz	r0, 801f5c0 <__ieee754_sqrt+0x13c>
 801f5ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f5b2:	e9da 0100 	ldrd	r0, r1, [sl]
 801f5b6:	e9db 2300 	ldrd	r2, r3, [fp]
 801f5ba:	d127      	bne.n	801f60c <__ieee754_sqrt+0x188>
 801f5bc:	3501      	adds	r5, #1
 801f5be:	463c      	mov	r4, r7
 801f5c0:	106a      	asrs	r2, r5, #1
 801f5c2:	07e9      	lsls	r1, r5, #31
 801f5c4:	ea4f 0354 	mov.w	r3, r4, lsr #1
 801f5c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801f5cc:	bf48      	it	mi
 801f5ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801f5d2:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801f5d6:	461c      	mov	r4, r3
 801f5d8:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801f5dc:	e769      	b.n	801f4b2 <__ieee754_sqrt+0x2e>
 801f5de:	0ad3      	lsrs	r3, r2, #11
 801f5e0:	3815      	subs	r0, #21
 801f5e2:	0552      	lsls	r2, r2, #21
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d0fa      	beq.n	801f5de <__ieee754_sqrt+0x15a>
 801f5e8:	02dc      	lsls	r4, r3, #11
 801f5ea:	d50a      	bpl.n	801f602 <__ieee754_sqrt+0x17e>
 801f5ec:	f1c1 0420 	rsb	r4, r1, #32
 801f5f0:	1e4d      	subs	r5, r1, #1
 801f5f2:	fa22 f404 	lsr.w	r4, r2, r4
 801f5f6:	408a      	lsls	r2, r1
 801f5f8:	1b41      	subs	r1, r0, r5
 801f5fa:	4323      	orrs	r3, r4
 801f5fc:	e76e      	b.n	801f4dc <__ieee754_sqrt+0x58>
 801f5fe:	4608      	mov	r0, r1
 801f600:	e7f0      	b.n	801f5e4 <__ieee754_sqrt+0x160>
 801f602:	005b      	lsls	r3, r3, #1
 801f604:	3101      	adds	r1, #1
 801f606:	e7ef      	b.n	801f5e8 <__ieee754_sqrt+0x164>
 801f608:	46e0      	mov	r8, ip
 801f60a:	e7a8      	b.n	801f55e <__ieee754_sqrt+0xda>
 801f60c:	e9da 8900 	ldrd	r8, r9, [sl]
 801f610:	f7e0 fe2e 	bl	8000270 <__adddf3>
 801f614:	4602      	mov	r2, r0
 801f616:	460b      	mov	r3, r1
 801f618:	4640      	mov	r0, r8
 801f61a:	4649      	mov	r1, r9
 801f61c:	f7e1 fa50 	bl	8000ac0 <__aeabi_dcmplt>
 801f620:	b128      	cbz	r0, 801f62e <__ieee754_sqrt+0x1aa>
 801f622:	1ca0      	adds	r0, r4, #2
 801f624:	f104 0402 	add.w	r4, r4, #2
 801f628:	bf08      	it	eq
 801f62a:	3501      	addeq	r5, #1
 801f62c:	e7c8      	b.n	801f5c0 <__ieee754_sqrt+0x13c>
 801f62e:	3401      	adds	r4, #1
 801f630:	f024 0401 	bic.w	r4, r4, #1
 801f634:	e7c4      	b.n	801f5c0 <__ieee754_sqrt+0x13c>
 801f636:	bf00      	nop
 801f638:	7ff00000 	.word	0x7ff00000
 801f63c:	200000a0 	.word	0x200000a0
 801f640:	200000a8 	.word	0x200000a8
 801f644:	00000000 	.word	0x00000000

0801f648 <__ieee754_atan2>:
 801f648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f64c:	ec57 6b11 	vmov	r6, r7, d1
 801f650:	4273      	negs	r3, r6
 801f652:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801f656:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801f7d0 <__ieee754_atan2+0x188>
 801f65a:	ee11 5a10 	vmov	r5, s2
 801f65e:	4333      	orrs	r3, r6
 801f660:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801f664:	4543      	cmp	r3, r8
 801f666:	ec51 0b10 	vmov	r0, r1, d0
 801f66a:	d80a      	bhi.n	801f682 <__ieee754_atan2+0x3a>
 801f66c:	4244      	negs	r4, r0
 801f66e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f672:	468e      	mov	lr, r1
 801f674:	ee10 9a10 	vmov	r9, s0
 801f678:	4304      	orrs	r4, r0
 801f67a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801f67e:	4544      	cmp	r4, r8
 801f680:	d907      	bls.n	801f692 <__ieee754_atan2+0x4a>
 801f682:	4632      	mov	r2, r6
 801f684:	463b      	mov	r3, r7
 801f686:	f7e0 fdf3 	bl	8000270 <__adddf3>
 801f68a:	ec41 0b10 	vmov	d0, r0, r1
 801f68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f692:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801f696:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801f69a:	4334      	orrs	r4, r6
 801f69c:	d103      	bne.n	801f6a6 <__ieee754_atan2+0x5e>
 801f69e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f6a2:	f000 bed5 	b.w	8020450 <atan>
 801f6a6:	17bc      	asrs	r4, r7, #30
 801f6a8:	ea53 0909 	orrs.w	r9, r3, r9
 801f6ac:	f004 0402 	and.w	r4, r4, #2
 801f6b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801f6b4:	d107      	bne.n	801f6c6 <__ieee754_atan2+0x7e>
 801f6b6:	2c02      	cmp	r4, #2
 801f6b8:	d05f      	beq.n	801f77a <__ieee754_atan2+0x132>
 801f6ba:	2c03      	cmp	r4, #3
 801f6bc:	d1e5      	bne.n	801f68a <__ieee754_atan2+0x42>
 801f6be:	a140      	add	r1, pc, #256	; (adr r1, 801f7c0 <__ieee754_atan2+0x178>)
 801f6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6c4:	e7e1      	b.n	801f68a <__ieee754_atan2+0x42>
 801f6c6:	4315      	orrs	r5, r2
 801f6c8:	d106      	bne.n	801f6d8 <__ieee754_atan2+0x90>
 801f6ca:	f1be 0f00 	cmp.w	lr, #0
 801f6ce:	da5f      	bge.n	801f790 <__ieee754_atan2+0x148>
 801f6d0:	a13d      	add	r1, pc, #244	; (adr r1, 801f7c8 <__ieee754_atan2+0x180>)
 801f6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6d6:	e7d8      	b.n	801f68a <__ieee754_atan2+0x42>
 801f6d8:	4542      	cmp	r2, r8
 801f6da:	d10f      	bne.n	801f6fc <__ieee754_atan2+0xb4>
 801f6dc:	4293      	cmp	r3, r2
 801f6de:	f104 34ff 	add.w	r4, r4, #4294967295
 801f6e2:	d107      	bne.n	801f6f4 <__ieee754_atan2+0xac>
 801f6e4:	2c02      	cmp	r4, #2
 801f6e6:	d84c      	bhi.n	801f782 <__ieee754_atan2+0x13a>
 801f6e8:	4b33      	ldr	r3, [pc, #204]	; (801f7b8 <__ieee754_atan2+0x170>)
 801f6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f6f2:	e7ca      	b.n	801f68a <__ieee754_atan2+0x42>
 801f6f4:	2c02      	cmp	r4, #2
 801f6f6:	d848      	bhi.n	801f78a <__ieee754_atan2+0x142>
 801f6f8:	4b30      	ldr	r3, [pc, #192]	; (801f7bc <__ieee754_atan2+0x174>)
 801f6fa:	e7f6      	b.n	801f6ea <__ieee754_atan2+0xa2>
 801f6fc:	4543      	cmp	r3, r8
 801f6fe:	d0e4      	beq.n	801f6ca <__ieee754_atan2+0x82>
 801f700:	1a9b      	subs	r3, r3, r2
 801f702:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801f706:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f70a:	da1e      	bge.n	801f74a <__ieee754_atan2+0x102>
 801f70c:	2f00      	cmp	r7, #0
 801f70e:	da01      	bge.n	801f714 <__ieee754_atan2+0xcc>
 801f710:	323c      	adds	r2, #60	; 0x3c
 801f712:	db1e      	blt.n	801f752 <__ieee754_atan2+0x10a>
 801f714:	4632      	mov	r2, r6
 801f716:	463b      	mov	r3, r7
 801f718:	f7e1 f88a 	bl	8000830 <__aeabi_ddiv>
 801f71c:	ec41 0b10 	vmov	d0, r0, r1
 801f720:	f001 f836 	bl	8020790 <fabs>
 801f724:	f000 fe94 	bl	8020450 <atan>
 801f728:	ec51 0b10 	vmov	r0, r1, d0
 801f72c:	2c01      	cmp	r4, #1
 801f72e:	d013      	beq.n	801f758 <__ieee754_atan2+0x110>
 801f730:	2c02      	cmp	r4, #2
 801f732:	d015      	beq.n	801f760 <__ieee754_atan2+0x118>
 801f734:	2c00      	cmp	r4, #0
 801f736:	d0a8      	beq.n	801f68a <__ieee754_atan2+0x42>
 801f738:	a317      	add	r3, pc, #92	; (adr r3, 801f798 <__ieee754_atan2+0x150>)
 801f73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f73e:	f7e0 fd95 	bl	800026c <__aeabi_dsub>
 801f742:	a317      	add	r3, pc, #92	; (adr r3, 801f7a0 <__ieee754_atan2+0x158>)
 801f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f748:	e014      	b.n	801f774 <__ieee754_atan2+0x12c>
 801f74a:	a117      	add	r1, pc, #92	; (adr r1, 801f7a8 <__ieee754_atan2+0x160>)
 801f74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f750:	e7ec      	b.n	801f72c <__ieee754_atan2+0xe4>
 801f752:	2000      	movs	r0, #0
 801f754:	2100      	movs	r1, #0
 801f756:	e7e9      	b.n	801f72c <__ieee754_atan2+0xe4>
 801f758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801f75c:	4619      	mov	r1, r3
 801f75e:	e794      	b.n	801f68a <__ieee754_atan2+0x42>
 801f760:	a30d      	add	r3, pc, #52	; (adr r3, 801f798 <__ieee754_atan2+0x150>)
 801f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f766:	f7e0 fd81 	bl	800026c <__aeabi_dsub>
 801f76a:	4602      	mov	r2, r0
 801f76c:	460b      	mov	r3, r1
 801f76e:	a10c      	add	r1, pc, #48	; (adr r1, 801f7a0 <__ieee754_atan2+0x158>)
 801f770:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f774:	f7e0 fd7a 	bl	800026c <__aeabi_dsub>
 801f778:	e787      	b.n	801f68a <__ieee754_atan2+0x42>
 801f77a:	a109      	add	r1, pc, #36	; (adr r1, 801f7a0 <__ieee754_atan2+0x158>)
 801f77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f780:	e783      	b.n	801f68a <__ieee754_atan2+0x42>
 801f782:	a10b      	add	r1, pc, #44	; (adr r1, 801f7b0 <__ieee754_atan2+0x168>)
 801f784:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f788:	e77f      	b.n	801f68a <__ieee754_atan2+0x42>
 801f78a:	2000      	movs	r0, #0
 801f78c:	2100      	movs	r1, #0
 801f78e:	e77c      	b.n	801f68a <__ieee754_atan2+0x42>
 801f790:	a105      	add	r1, pc, #20	; (adr r1, 801f7a8 <__ieee754_atan2+0x160>)
 801f792:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f796:	e778      	b.n	801f68a <__ieee754_atan2+0x42>
 801f798:	33145c07 	.word	0x33145c07
 801f79c:	3ca1a626 	.word	0x3ca1a626
 801f7a0:	54442d18 	.word	0x54442d18
 801f7a4:	400921fb 	.word	0x400921fb
 801f7a8:	54442d18 	.word	0x54442d18
 801f7ac:	3ff921fb 	.word	0x3ff921fb
 801f7b0:	54442d18 	.word	0x54442d18
 801f7b4:	3fe921fb 	.word	0x3fe921fb
 801f7b8:	08023220 	.word	0x08023220
 801f7bc:	08023238 	.word	0x08023238
 801f7c0:	54442d18 	.word	0x54442d18
 801f7c4:	c00921fb 	.word	0xc00921fb
 801f7c8:	54442d18 	.word	0x54442d18
 801f7cc:	bff921fb 	.word	0xbff921fb
 801f7d0:	7ff00000 	.word	0x7ff00000

0801f7d4 <__ieee754_fmod>:
 801f7d4:	ec53 2b11 	vmov	r2, r3, d1
 801f7d8:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 801f7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f7e0:	ea5c 0402 	orrs.w	r4, ip, r2
 801f7e4:	461e      	mov	r6, r3
 801f7e6:	ee11 7a10 	vmov	r7, s2
 801f7ea:	ee11 ea10 	vmov	lr, s2
 801f7ee:	ec51 0b10 	vmov	r0, r1, d0
 801f7f2:	d00c      	beq.n	801f80e <__ieee754_fmod+0x3a>
 801f7f4:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801f7f8:	4c77      	ldr	r4, [pc, #476]	; (801f9d8 <__ieee754_fmod+0x204>)
 801f7fa:	4689      	mov	r9, r1
 801f7fc:	45a0      	cmp	r8, r4
 801f7fe:	dc06      	bgt.n	801f80e <__ieee754_fmod+0x3a>
 801f800:	4254      	negs	r4, r2
 801f802:	4d76      	ldr	r5, [pc, #472]	; (801f9dc <__ieee754_fmod+0x208>)
 801f804:	4314      	orrs	r4, r2
 801f806:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 801f80a:	42ac      	cmp	r4, r5
 801f80c:	d909      	bls.n	801f822 <__ieee754_fmod+0x4e>
 801f80e:	f7e0 fee5 	bl	80005dc <__aeabi_dmul>
 801f812:	4602      	mov	r2, r0
 801f814:	460b      	mov	r3, r1
 801f816:	f7e1 f80b 	bl	8000830 <__aeabi_ddiv>
 801f81a:	ec41 0b10 	vmov	d0, r0, r1
 801f81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f822:	45e0      	cmp	r8, ip
 801f824:	ee10 aa10 	vmov	sl, s0
 801f828:	ee10 4a10 	vmov	r4, s0
 801f82c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801f830:	dc09      	bgt.n	801f846 <__ieee754_fmod+0x72>
 801f832:	dbf2      	blt.n	801f81a <__ieee754_fmod+0x46>
 801f834:	4290      	cmp	r0, r2
 801f836:	d3f0      	bcc.n	801f81a <__ieee754_fmod+0x46>
 801f838:	d105      	bne.n	801f846 <__ieee754_fmod+0x72>
 801f83a:	4b69      	ldr	r3, [pc, #420]	; (801f9e0 <__ieee754_fmod+0x20c>)
 801f83c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 801f840:	e9d3 0100 	ldrd	r0, r1, [r3]
 801f844:	e7e9      	b.n	801f81a <__ieee754_fmod+0x46>
 801f846:	4a65      	ldr	r2, [pc, #404]	; (801f9dc <__ieee754_fmod+0x208>)
 801f848:	ea19 0f02 	tst.w	r9, r2
 801f84c:	d148      	bne.n	801f8e0 <__ieee754_fmod+0x10c>
 801f84e:	f1b8 0f00 	cmp.w	r8, #0
 801f852:	d13d      	bne.n	801f8d0 <__ieee754_fmod+0xfc>
 801f854:	4653      	mov	r3, sl
 801f856:	4963      	ldr	r1, [pc, #396]	; (801f9e4 <__ieee754_fmod+0x210>)
 801f858:	2b00      	cmp	r3, #0
 801f85a:	dc36      	bgt.n	801f8ca <__ieee754_fmod+0xf6>
 801f85c:	4216      	tst	r6, r2
 801f85e:	d14f      	bne.n	801f900 <__ieee754_fmod+0x12c>
 801f860:	f1bc 0f00 	cmp.w	ip, #0
 801f864:	d144      	bne.n	801f8f0 <__ieee754_fmod+0x11c>
 801f866:	463b      	mov	r3, r7
 801f868:	4a5e      	ldr	r2, [pc, #376]	; (801f9e4 <__ieee754_fmod+0x210>)
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	dc3d      	bgt.n	801f8ea <__ieee754_fmod+0x116>
 801f86e:	485e      	ldr	r0, [pc, #376]	; (801f9e8 <__ieee754_fmod+0x214>)
 801f870:	4281      	cmp	r1, r0
 801f872:	db4a      	blt.n	801f90a <__ieee754_fmod+0x136>
 801f874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f87c:	485a      	ldr	r0, [pc, #360]	; (801f9e8 <__ieee754_fmod+0x214>)
 801f87e:	4282      	cmp	r2, r0
 801f880:	db57      	blt.n	801f932 <__ieee754_fmod+0x15e>
 801f882:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801f886:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801f88a:	1a89      	subs	r1, r1, r2
 801f88c:	1b98      	subs	r0, r3, r6
 801f88e:	eba4 070e 	sub.w	r7, r4, lr
 801f892:	2900      	cmp	r1, #0
 801f894:	d162      	bne.n	801f95c <__ieee754_fmod+0x188>
 801f896:	4574      	cmp	r4, lr
 801f898:	bf38      	it	cc
 801f89a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801f89e:	2800      	cmp	r0, #0
 801f8a0:	bfa4      	itt	ge
 801f8a2:	463c      	movge	r4, r7
 801f8a4:	4603      	movge	r3, r0
 801f8a6:	ea53 0104 	orrs.w	r1, r3, r4
 801f8aa:	d0c6      	beq.n	801f83a <__ieee754_fmod+0x66>
 801f8ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f8b0:	db69      	blt.n	801f986 <__ieee754_fmod+0x1b2>
 801f8b2:	494d      	ldr	r1, [pc, #308]	; (801f9e8 <__ieee754_fmod+0x214>)
 801f8b4:	428a      	cmp	r2, r1
 801f8b6:	db6c      	blt.n	801f992 <__ieee754_fmod+0x1be>
 801f8b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801f8bc:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	432b      	orrs	r3, r5
 801f8c4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f8c8:	e7a7      	b.n	801f81a <__ieee754_fmod+0x46>
 801f8ca:	3901      	subs	r1, #1
 801f8cc:	005b      	lsls	r3, r3, #1
 801f8ce:	e7c3      	b.n	801f858 <__ieee754_fmod+0x84>
 801f8d0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801f8d4:	4944      	ldr	r1, [pc, #272]	; (801f9e8 <__ieee754_fmod+0x214>)
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	ddc0      	ble.n	801f85c <__ieee754_fmod+0x88>
 801f8da:	3901      	subs	r1, #1
 801f8dc:	005b      	lsls	r3, r3, #1
 801f8de:	e7fa      	b.n	801f8d6 <__ieee754_fmod+0x102>
 801f8e0:	ea4f 5128 	mov.w	r1, r8, asr #20
 801f8e4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801f8e8:	e7b8      	b.n	801f85c <__ieee754_fmod+0x88>
 801f8ea:	3a01      	subs	r2, #1
 801f8ec:	005b      	lsls	r3, r3, #1
 801f8ee:	e7bc      	b.n	801f86a <__ieee754_fmod+0x96>
 801f8f0:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 801f8f4:	4a3c      	ldr	r2, [pc, #240]	; (801f9e8 <__ieee754_fmod+0x214>)
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	ddb9      	ble.n	801f86e <__ieee754_fmod+0x9a>
 801f8fa:	3a01      	subs	r2, #1
 801f8fc:	005b      	lsls	r3, r3, #1
 801f8fe:	e7fa      	b.n	801f8f6 <__ieee754_fmod+0x122>
 801f900:	ea4f 522c 	mov.w	r2, ip, asr #20
 801f904:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f908:	e7b1      	b.n	801f86e <__ieee754_fmod+0x9a>
 801f90a:	1a40      	subs	r0, r0, r1
 801f90c:	281f      	cmp	r0, #31
 801f90e:	dc0a      	bgt.n	801f926 <__ieee754_fmod+0x152>
 801f910:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 801f914:	fa08 f800 	lsl.w	r8, r8, r0
 801f918:	fa0a f400 	lsl.w	r4, sl, r0
 801f91c:	fa2a f303 	lsr.w	r3, sl, r3
 801f920:	ea43 0308 	orr.w	r3, r3, r8
 801f924:	e7aa      	b.n	801f87c <__ieee754_fmod+0xa8>
 801f926:	4b31      	ldr	r3, [pc, #196]	; (801f9ec <__ieee754_fmod+0x218>)
 801f928:	2400      	movs	r4, #0
 801f92a:	1a5b      	subs	r3, r3, r1
 801f92c:	fa0a f303 	lsl.w	r3, sl, r3
 801f930:	e7a4      	b.n	801f87c <__ieee754_fmod+0xa8>
 801f932:	1a80      	subs	r0, r0, r2
 801f934:	281f      	cmp	r0, #31
 801f936:	dc0a      	bgt.n	801f94e <__ieee754_fmod+0x17a>
 801f938:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801f93c:	fa0c fc00 	lsl.w	ip, ip, r0
 801f940:	fa07 fe00 	lsl.w	lr, r7, r0
 801f944:	fa27 f606 	lsr.w	r6, r7, r6
 801f948:	ea46 060c 	orr.w	r6, r6, ip
 801f94c:	e79d      	b.n	801f88a <__ieee754_fmod+0xb6>
 801f94e:	4e27      	ldr	r6, [pc, #156]	; (801f9ec <__ieee754_fmod+0x218>)
 801f950:	f04f 0e00 	mov.w	lr, #0
 801f954:	1ab6      	subs	r6, r6, r2
 801f956:	fa07 f606 	lsl.w	r6, r7, r6
 801f95a:	e796      	b.n	801f88a <__ieee754_fmod+0xb6>
 801f95c:	4574      	cmp	r4, lr
 801f95e:	bf38      	it	cc
 801f960:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801f964:	2800      	cmp	r0, #0
 801f966:	da05      	bge.n	801f974 <__ieee754_fmod+0x1a0>
 801f968:	0fe0      	lsrs	r0, r4, #31
 801f96a:	0064      	lsls	r4, r4, #1
 801f96c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801f970:	3901      	subs	r1, #1
 801f972:	e78b      	b.n	801f88c <__ieee754_fmod+0xb8>
 801f974:	ea50 0307 	orrs.w	r3, r0, r7
 801f978:	f43f af5f 	beq.w	801f83a <__ieee754_fmod+0x66>
 801f97c:	0ffb      	lsrs	r3, r7, #31
 801f97e:	007c      	lsls	r4, r7, #1
 801f980:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801f984:	e7f4      	b.n	801f970 <__ieee754_fmod+0x19c>
 801f986:	0fe1      	lsrs	r1, r4, #31
 801f988:	3a01      	subs	r2, #1
 801f98a:	0064      	lsls	r4, r4, #1
 801f98c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801f990:	e78c      	b.n	801f8ac <__ieee754_fmod+0xd8>
 801f992:	1a89      	subs	r1, r1, r2
 801f994:	2914      	cmp	r1, #20
 801f996:	dc0a      	bgt.n	801f9ae <__ieee754_fmod+0x1da>
 801f998:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801f99c:	40cc      	lsrs	r4, r1
 801f99e:	fa03 f202 	lsl.w	r2, r3, r2
 801f9a2:	410b      	asrs	r3, r1
 801f9a4:	4322      	orrs	r2, r4
 801f9a6:	ea43 0105 	orr.w	r1, r3, r5
 801f9aa:	4610      	mov	r0, r2
 801f9ac:	e735      	b.n	801f81a <__ieee754_fmod+0x46>
 801f9ae:	291f      	cmp	r1, #31
 801f9b0:	dc07      	bgt.n	801f9c2 <__ieee754_fmod+0x1ee>
 801f9b2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801f9b6:	40cc      	lsrs	r4, r1
 801f9b8:	fa03 f202 	lsl.w	r2, r3, r2
 801f9bc:	4322      	orrs	r2, r4
 801f9be:	462b      	mov	r3, r5
 801f9c0:	e7f1      	b.n	801f9a6 <__ieee754_fmod+0x1d2>
 801f9c2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801f9c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f9ca:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 801f9ce:	32e2      	adds	r2, #226	; 0xe2
 801f9d0:	fa43 f202 	asr.w	r2, r3, r2
 801f9d4:	e7f3      	b.n	801f9be <__ieee754_fmod+0x1ea>
 801f9d6:	bf00      	nop
 801f9d8:	7fefffff 	.word	0x7fefffff
 801f9dc:	7ff00000 	.word	0x7ff00000
 801f9e0:	08023250 	.word	0x08023250
 801f9e4:	fffffbed 	.word	0xfffffbed
 801f9e8:	fffffc02 	.word	0xfffffc02
 801f9ec:	fffffbe2 	.word	0xfffffbe2

0801f9f0 <__ieee754_pow>:
 801f9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9f4:	ed2d 8b06 	vpush	{d8-d10}
 801f9f8:	b089      	sub	sp, #36	; 0x24
 801f9fa:	ed8d 1b00 	vstr	d1, [sp]
 801f9fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 801fa02:	ec57 6b10 	vmov	r6, r7, d0
 801fa06:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801fa0a:	ea58 0102 	orrs.w	r1, r8, r2
 801fa0e:	d115      	bne.n	801fa3c <__ieee754_pow+0x4c>
 801fa10:	19b3      	adds	r3, r6, r6
 801fa12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801fa16:	4152      	adcs	r2, r2
 801fa18:	4299      	cmp	r1, r3
 801fa1a:	4b89      	ldr	r3, [pc, #548]	; (801fc40 <__ieee754_pow+0x250>)
 801fa1c:	4193      	sbcs	r3, r2
 801fa1e:	f080 84d2 	bcs.w	80203c6 <__ieee754_pow+0x9d6>
 801fa22:	4630      	mov	r0, r6
 801fa24:	4639      	mov	r1, r7
 801fa26:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fa2a:	f7e0 fc21 	bl	8000270 <__adddf3>
 801fa2e:	ec41 0b10 	vmov	d0, r0, r1
 801fa32:	b009      	add	sp, #36	; 0x24
 801fa34:	ecbd 8b06 	vpop	{d8-d10}
 801fa38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa3c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801fa40:	4b80      	ldr	r3, [pc, #512]	; (801fc44 <__ieee754_pow+0x254>)
 801fa42:	463d      	mov	r5, r7
 801fa44:	ee10 aa10 	vmov	sl, s0
 801fa48:	429c      	cmp	r4, r3
 801fa4a:	dc06      	bgt.n	801fa5a <__ieee754_pow+0x6a>
 801fa4c:	d101      	bne.n	801fa52 <__ieee754_pow+0x62>
 801fa4e:	2e00      	cmp	r6, #0
 801fa50:	d1e7      	bne.n	801fa22 <__ieee754_pow+0x32>
 801fa52:	4598      	cmp	r8, r3
 801fa54:	dc01      	bgt.n	801fa5a <__ieee754_pow+0x6a>
 801fa56:	d10f      	bne.n	801fa78 <__ieee754_pow+0x88>
 801fa58:	b172      	cbz	r2, 801fa78 <__ieee754_pow+0x88>
 801fa5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801fa5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801fa62:	ea55 050a 	orrs.w	r5, r5, sl
 801fa66:	d1dc      	bne.n	801fa22 <__ieee754_pow+0x32>
 801fa68:	e9dd 3200 	ldrd	r3, r2, [sp]
 801fa6c:	18db      	adds	r3, r3, r3
 801fa6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801fa72:	4152      	adcs	r2, r2
 801fa74:	429d      	cmp	r5, r3
 801fa76:	e7d0      	b.n	801fa1a <__ieee754_pow+0x2a>
 801fa78:	2d00      	cmp	r5, #0
 801fa7a:	da3b      	bge.n	801faf4 <__ieee754_pow+0x104>
 801fa7c:	4b72      	ldr	r3, [pc, #456]	; (801fc48 <__ieee754_pow+0x258>)
 801fa7e:	4598      	cmp	r8, r3
 801fa80:	dc51      	bgt.n	801fb26 <__ieee754_pow+0x136>
 801fa82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801fa86:	4598      	cmp	r8, r3
 801fa88:	f340 84ac 	ble.w	80203e4 <__ieee754_pow+0x9f4>
 801fa8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801fa90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fa94:	2b14      	cmp	r3, #20
 801fa96:	dd0f      	ble.n	801fab8 <__ieee754_pow+0xc8>
 801fa98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801fa9c:	fa22 f103 	lsr.w	r1, r2, r3
 801faa0:	fa01 f303 	lsl.w	r3, r1, r3
 801faa4:	4293      	cmp	r3, r2
 801faa6:	f040 849d 	bne.w	80203e4 <__ieee754_pow+0x9f4>
 801faaa:	f001 0101 	and.w	r1, r1, #1
 801faae:	f1c1 0302 	rsb	r3, r1, #2
 801fab2:	9304      	str	r3, [sp, #16]
 801fab4:	b182      	cbz	r2, 801fad8 <__ieee754_pow+0xe8>
 801fab6:	e05f      	b.n	801fb78 <__ieee754_pow+0x188>
 801fab8:	2a00      	cmp	r2, #0
 801faba:	d15b      	bne.n	801fb74 <__ieee754_pow+0x184>
 801fabc:	f1c3 0314 	rsb	r3, r3, #20
 801fac0:	fa48 f103 	asr.w	r1, r8, r3
 801fac4:	fa01 f303 	lsl.w	r3, r1, r3
 801fac8:	4543      	cmp	r3, r8
 801faca:	f040 8488 	bne.w	80203de <__ieee754_pow+0x9ee>
 801face:	f001 0101 	and.w	r1, r1, #1
 801fad2:	f1c1 0302 	rsb	r3, r1, #2
 801fad6:	9304      	str	r3, [sp, #16]
 801fad8:	4b5c      	ldr	r3, [pc, #368]	; (801fc4c <__ieee754_pow+0x25c>)
 801fada:	4598      	cmp	r8, r3
 801fadc:	d132      	bne.n	801fb44 <__ieee754_pow+0x154>
 801fade:	f1b9 0f00 	cmp.w	r9, #0
 801fae2:	f280 8478 	bge.w	80203d6 <__ieee754_pow+0x9e6>
 801fae6:	4632      	mov	r2, r6
 801fae8:	463b      	mov	r3, r7
 801faea:	2000      	movs	r0, #0
 801faec:	4957      	ldr	r1, [pc, #348]	; (801fc4c <__ieee754_pow+0x25c>)
 801faee:	f7e0 fe9f 	bl	8000830 <__aeabi_ddiv>
 801faf2:	e79c      	b.n	801fa2e <__ieee754_pow+0x3e>
 801faf4:	2300      	movs	r3, #0
 801faf6:	9304      	str	r3, [sp, #16]
 801faf8:	2a00      	cmp	r2, #0
 801fafa:	d13d      	bne.n	801fb78 <__ieee754_pow+0x188>
 801fafc:	4b51      	ldr	r3, [pc, #324]	; (801fc44 <__ieee754_pow+0x254>)
 801fafe:	4598      	cmp	r8, r3
 801fb00:	d1ea      	bne.n	801fad8 <__ieee754_pow+0xe8>
 801fb02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801fb06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801fb0a:	ea53 030a 	orrs.w	r3, r3, sl
 801fb0e:	f000 845a 	beq.w	80203c6 <__ieee754_pow+0x9d6>
 801fb12:	4b4f      	ldr	r3, [pc, #316]	; (801fc50 <__ieee754_pow+0x260>)
 801fb14:	429c      	cmp	r4, r3
 801fb16:	dd08      	ble.n	801fb2a <__ieee754_pow+0x13a>
 801fb18:	f1b9 0f00 	cmp.w	r9, #0
 801fb1c:	f2c0 8457 	blt.w	80203ce <__ieee754_pow+0x9de>
 801fb20:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fb24:	e783      	b.n	801fa2e <__ieee754_pow+0x3e>
 801fb26:	2302      	movs	r3, #2
 801fb28:	e7e5      	b.n	801faf6 <__ieee754_pow+0x106>
 801fb2a:	f1b9 0f00 	cmp.w	r9, #0
 801fb2e:	f04f 0000 	mov.w	r0, #0
 801fb32:	f04f 0100 	mov.w	r1, #0
 801fb36:	f6bf af7a 	bge.w	801fa2e <__ieee754_pow+0x3e>
 801fb3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801fb3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801fb42:	e774      	b.n	801fa2e <__ieee754_pow+0x3e>
 801fb44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801fb48:	d106      	bne.n	801fb58 <__ieee754_pow+0x168>
 801fb4a:	4632      	mov	r2, r6
 801fb4c:	463b      	mov	r3, r7
 801fb4e:	4630      	mov	r0, r6
 801fb50:	4639      	mov	r1, r7
 801fb52:	f7e0 fd43 	bl	80005dc <__aeabi_dmul>
 801fb56:	e76a      	b.n	801fa2e <__ieee754_pow+0x3e>
 801fb58:	4b3e      	ldr	r3, [pc, #248]	; (801fc54 <__ieee754_pow+0x264>)
 801fb5a:	4599      	cmp	r9, r3
 801fb5c:	d10c      	bne.n	801fb78 <__ieee754_pow+0x188>
 801fb5e:	2d00      	cmp	r5, #0
 801fb60:	db0a      	blt.n	801fb78 <__ieee754_pow+0x188>
 801fb62:	ec47 6b10 	vmov	d0, r6, r7
 801fb66:	b009      	add	sp, #36	; 0x24
 801fb68:	ecbd 8b06 	vpop	{d8-d10}
 801fb6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb70:	f7ff bc88 	b.w	801f484 <__ieee754_sqrt>
 801fb74:	2300      	movs	r3, #0
 801fb76:	9304      	str	r3, [sp, #16]
 801fb78:	ec47 6b10 	vmov	d0, r6, r7
 801fb7c:	f000 fe08 	bl	8020790 <fabs>
 801fb80:	ec51 0b10 	vmov	r0, r1, d0
 801fb84:	f1ba 0f00 	cmp.w	sl, #0
 801fb88:	d129      	bne.n	801fbde <__ieee754_pow+0x1ee>
 801fb8a:	b124      	cbz	r4, 801fb96 <__ieee754_pow+0x1a6>
 801fb8c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801fb90:	4b2e      	ldr	r3, [pc, #184]	; (801fc4c <__ieee754_pow+0x25c>)
 801fb92:	429a      	cmp	r2, r3
 801fb94:	d123      	bne.n	801fbde <__ieee754_pow+0x1ee>
 801fb96:	f1b9 0f00 	cmp.w	r9, #0
 801fb9a:	da05      	bge.n	801fba8 <__ieee754_pow+0x1b8>
 801fb9c:	4602      	mov	r2, r0
 801fb9e:	460b      	mov	r3, r1
 801fba0:	2000      	movs	r0, #0
 801fba2:	492a      	ldr	r1, [pc, #168]	; (801fc4c <__ieee754_pow+0x25c>)
 801fba4:	f7e0 fe44 	bl	8000830 <__aeabi_ddiv>
 801fba8:	2d00      	cmp	r5, #0
 801fbaa:	f6bf af40 	bge.w	801fa2e <__ieee754_pow+0x3e>
 801fbae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801fbb2:	9b04      	ldr	r3, [sp, #16]
 801fbb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801fbb8:	431c      	orrs	r4, r3
 801fbba:	d108      	bne.n	801fbce <__ieee754_pow+0x1de>
 801fbbc:	4602      	mov	r2, r0
 801fbbe:	460b      	mov	r3, r1
 801fbc0:	4610      	mov	r0, r2
 801fbc2:	4619      	mov	r1, r3
 801fbc4:	f7e0 fb52 	bl	800026c <__aeabi_dsub>
 801fbc8:	4602      	mov	r2, r0
 801fbca:	460b      	mov	r3, r1
 801fbcc:	e78f      	b.n	801faee <__ieee754_pow+0xfe>
 801fbce:	9b04      	ldr	r3, [sp, #16]
 801fbd0:	2b01      	cmp	r3, #1
 801fbd2:	f47f af2c 	bne.w	801fa2e <__ieee754_pow+0x3e>
 801fbd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801fbda:	4619      	mov	r1, r3
 801fbdc:	e727      	b.n	801fa2e <__ieee754_pow+0x3e>
 801fbde:	0feb      	lsrs	r3, r5, #31
 801fbe0:	3b01      	subs	r3, #1
 801fbe2:	9306      	str	r3, [sp, #24]
 801fbe4:	9a06      	ldr	r2, [sp, #24]
 801fbe6:	9b04      	ldr	r3, [sp, #16]
 801fbe8:	4313      	orrs	r3, r2
 801fbea:	d102      	bne.n	801fbf2 <__ieee754_pow+0x202>
 801fbec:	4632      	mov	r2, r6
 801fbee:	463b      	mov	r3, r7
 801fbf0:	e7e6      	b.n	801fbc0 <__ieee754_pow+0x1d0>
 801fbf2:	4b19      	ldr	r3, [pc, #100]	; (801fc58 <__ieee754_pow+0x268>)
 801fbf4:	4598      	cmp	r8, r3
 801fbf6:	f340 80fb 	ble.w	801fdf0 <__ieee754_pow+0x400>
 801fbfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801fbfe:	4598      	cmp	r8, r3
 801fc00:	4b13      	ldr	r3, [pc, #76]	; (801fc50 <__ieee754_pow+0x260>)
 801fc02:	dd0c      	ble.n	801fc1e <__ieee754_pow+0x22e>
 801fc04:	429c      	cmp	r4, r3
 801fc06:	dc0f      	bgt.n	801fc28 <__ieee754_pow+0x238>
 801fc08:	f1b9 0f00 	cmp.w	r9, #0
 801fc0c:	da0f      	bge.n	801fc2e <__ieee754_pow+0x23e>
 801fc0e:	2000      	movs	r0, #0
 801fc10:	b009      	add	sp, #36	; 0x24
 801fc12:	ecbd 8b06 	vpop	{d8-d10}
 801fc16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc1a:	f001 b9b2 	b.w	8020f82 <__math_oflow>
 801fc1e:	429c      	cmp	r4, r3
 801fc20:	dbf2      	blt.n	801fc08 <__ieee754_pow+0x218>
 801fc22:	4b0a      	ldr	r3, [pc, #40]	; (801fc4c <__ieee754_pow+0x25c>)
 801fc24:	429c      	cmp	r4, r3
 801fc26:	dd19      	ble.n	801fc5c <__ieee754_pow+0x26c>
 801fc28:	f1b9 0f00 	cmp.w	r9, #0
 801fc2c:	dcef      	bgt.n	801fc0e <__ieee754_pow+0x21e>
 801fc2e:	2000      	movs	r0, #0
 801fc30:	b009      	add	sp, #36	; 0x24
 801fc32:	ecbd 8b06 	vpop	{d8-d10}
 801fc36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc3a:	f001 b999 	b.w	8020f70 <__math_uflow>
 801fc3e:	bf00      	nop
 801fc40:	fff00000 	.word	0xfff00000
 801fc44:	7ff00000 	.word	0x7ff00000
 801fc48:	433fffff 	.word	0x433fffff
 801fc4c:	3ff00000 	.word	0x3ff00000
 801fc50:	3fefffff 	.word	0x3fefffff
 801fc54:	3fe00000 	.word	0x3fe00000
 801fc58:	41e00000 	.word	0x41e00000
 801fc5c:	2200      	movs	r2, #0
 801fc5e:	4b60      	ldr	r3, [pc, #384]	; (801fde0 <__ieee754_pow+0x3f0>)
 801fc60:	f7e0 fb04 	bl	800026c <__aeabi_dsub>
 801fc64:	4604      	mov	r4, r0
 801fc66:	460d      	mov	r5, r1
 801fc68:	a353      	add	r3, pc, #332	; (adr r3, 801fdb8 <__ieee754_pow+0x3c8>)
 801fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc6e:	f7e0 fcb5 	bl	80005dc <__aeabi_dmul>
 801fc72:	4606      	mov	r6, r0
 801fc74:	460f      	mov	r7, r1
 801fc76:	4620      	mov	r0, r4
 801fc78:	4629      	mov	r1, r5
 801fc7a:	a351      	add	r3, pc, #324	; (adr r3, 801fdc0 <__ieee754_pow+0x3d0>)
 801fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc80:	f7e0 fcac 	bl	80005dc <__aeabi_dmul>
 801fc84:	2200      	movs	r2, #0
 801fc86:	4682      	mov	sl, r0
 801fc88:	468b      	mov	fp, r1
 801fc8a:	4b56      	ldr	r3, [pc, #344]	; (801fde4 <__ieee754_pow+0x3f4>)
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	4629      	mov	r1, r5
 801fc90:	f7e0 fca4 	bl	80005dc <__aeabi_dmul>
 801fc94:	4602      	mov	r2, r0
 801fc96:	460b      	mov	r3, r1
 801fc98:	a14b      	add	r1, pc, #300	; (adr r1, 801fdc8 <__ieee754_pow+0x3d8>)
 801fc9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fc9e:	f7e0 fae5 	bl	800026c <__aeabi_dsub>
 801fca2:	4622      	mov	r2, r4
 801fca4:	462b      	mov	r3, r5
 801fca6:	f7e0 fc99 	bl	80005dc <__aeabi_dmul>
 801fcaa:	4602      	mov	r2, r0
 801fcac:	460b      	mov	r3, r1
 801fcae:	2000      	movs	r0, #0
 801fcb0:	494d      	ldr	r1, [pc, #308]	; (801fde8 <__ieee754_pow+0x3f8>)
 801fcb2:	f7e0 fadb 	bl	800026c <__aeabi_dsub>
 801fcb6:	4680      	mov	r8, r0
 801fcb8:	4689      	mov	r9, r1
 801fcba:	4622      	mov	r2, r4
 801fcbc:	462b      	mov	r3, r5
 801fcbe:	4620      	mov	r0, r4
 801fcc0:	4629      	mov	r1, r5
 801fcc2:	f7e0 fc8b 	bl	80005dc <__aeabi_dmul>
 801fcc6:	4602      	mov	r2, r0
 801fcc8:	460b      	mov	r3, r1
 801fcca:	4640      	mov	r0, r8
 801fccc:	4649      	mov	r1, r9
 801fcce:	f7e0 fc85 	bl	80005dc <__aeabi_dmul>
 801fcd2:	a33f      	add	r3, pc, #252	; (adr r3, 801fdd0 <__ieee754_pow+0x3e0>)
 801fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcd8:	f7e0 fc80 	bl	80005dc <__aeabi_dmul>
 801fcdc:	4602      	mov	r2, r0
 801fcde:	460b      	mov	r3, r1
 801fce0:	4650      	mov	r0, sl
 801fce2:	4659      	mov	r1, fp
 801fce4:	f7e0 fac2 	bl	800026c <__aeabi_dsub>
 801fce8:	4602      	mov	r2, r0
 801fcea:	460b      	mov	r3, r1
 801fcec:	4680      	mov	r8, r0
 801fcee:	4689      	mov	r9, r1
 801fcf0:	4630      	mov	r0, r6
 801fcf2:	4639      	mov	r1, r7
 801fcf4:	f7e0 fabc 	bl	8000270 <__adddf3>
 801fcf8:	2000      	movs	r0, #0
 801fcfa:	4632      	mov	r2, r6
 801fcfc:	463b      	mov	r3, r7
 801fcfe:	4604      	mov	r4, r0
 801fd00:	460d      	mov	r5, r1
 801fd02:	f7e0 fab3 	bl	800026c <__aeabi_dsub>
 801fd06:	4602      	mov	r2, r0
 801fd08:	460b      	mov	r3, r1
 801fd0a:	4640      	mov	r0, r8
 801fd0c:	4649      	mov	r1, r9
 801fd0e:	f7e0 faad 	bl	800026c <__aeabi_dsub>
 801fd12:	9b04      	ldr	r3, [sp, #16]
 801fd14:	9a06      	ldr	r2, [sp, #24]
 801fd16:	4682      	mov	sl, r0
 801fd18:	3b01      	subs	r3, #1
 801fd1a:	468b      	mov	fp, r1
 801fd1c:	4313      	orrs	r3, r2
 801fd1e:	f040 81e7 	bne.w	80200f0 <__ieee754_pow+0x700>
 801fd22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801fdd8 <__ieee754_pow+0x3e8>
 801fd26:	e9dd 6700 	ldrd	r6, r7, [sp]
 801fd2a:	2600      	movs	r6, #0
 801fd2c:	eeb0 8a47 	vmov.f32	s16, s14
 801fd30:	eef0 8a67 	vmov.f32	s17, s15
 801fd34:	463b      	mov	r3, r7
 801fd36:	4632      	mov	r2, r6
 801fd38:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fd3c:	f7e0 fa96 	bl	800026c <__aeabi_dsub>
 801fd40:	4622      	mov	r2, r4
 801fd42:	462b      	mov	r3, r5
 801fd44:	f7e0 fc4a 	bl	80005dc <__aeabi_dmul>
 801fd48:	4680      	mov	r8, r0
 801fd4a:	4689      	mov	r9, r1
 801fd4c:	4650      	mov	r0, sl
 801fd4e:	4659      	mov	r1, fp
 801fd50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fd54:	f7e0 fc42 	bl	80005dc <__aeabi_dmul>
 801fd58:	4602      	mov	r2, r0
 801fd5a:	460b      	mov	r3, r1
 801fd5c:	4640      	mov	r0, r8
 801fd5e:	4649      	mov	r1, r9
 801fd60:	f7e0 fa86 	bl	8000270 <__adddf3>
 801fd64:	4680      	mov	r8, r0
 801fd66:	4689      	mov	r9, r1
 801fd68:	4632      	mov	r2, r6
 801fd6a:	463b      	mov	r3, r7
 801fd6c:	4620      	mov	r0, r4
 801fd6e:	4629      	mov	r1, r5
 801fd70:	f7e0 fc34 	bl	80005dc <__aeabi_dmul>
 801fd74:	460b      	mov	r3, r1
 801fd76:	4604      	mov	r4, r0
 801fd78:	460d      	mov	r5, r1
 801fd7a:	4602      	mov	r2, r0
 801fd7c:	4649      	mov	r1, r9
 801fd7e:	4640      	mov	r0, r8
 801fd80:	f7e0 fa76 	bl	8000270 <__adddf3>
 801fd84:	4b19      	ldr	r3, [pc, #100]	; (801fdec <__ieee754_pow+0x3fc>)
 801fd86:	4606      	mov	r6, r0
 801fd88:	460f      	mov	r7, r1
 801fd8a:	4299      	cmp	r1, r3
 801fd8c:	468b      	mov	fp, r1
 801fd8e:	ec45 4b19 	vmov	d9, r4, r5
 801fd92:	f340 82f1 	ble.w	8020378 <__ieee754_pow+0x988>
 801fd96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801fd9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801fd9e:	4303      	orrs	r3, r0
 801fda0:	f000 81e4 	beq.w	802016c <__ieee754_pow+0x77c>
 801fda4:	2200      	movs	r2, #0
 801fda6:	2300      	movs	r3, #0
 801fda8:	ec51 0b18 	vmov	r0, r1, d8
 801fdac:	f7e0 fe88 	bl	8000ac0 <__aeabi_dcmplt>
 801fdb0:	3800      	subs	r0, #0
 801fdb2:	bf18      	it	ne
 801fdb4:	2001      	movne	r0, #1
 801fdb6:	e72b      	b.n	801fc10 <__ieee754_pow+0x220>
 801fdb8:	60000000 	.word	0x60000000
 801fdbc:	3ff71547 	.word	0x3ff71547
 801fdc0:	f85ddf44 	.word	0xf85ddf44
 801fdc4:	3e54ae0b 	.word	0x3e54ae0b
 801fdc8:	55555555 	.word	0x55555555
 801fdcc:	3fd55555 	.word	0x3fd55555
 801fdd0:	652b82fe 	.word	0x652b82fe
 801fdd4:	3ff71547 	.word	0x3ff71547
 801fdd8:	00000000 	.word	0x00000000
 801fddc:	bff00000 	.word	0xbff00000
 801fde0:	3ff00000 	.word	0x3ff00000
 801fde4:	3fd00000 	.word	0x3fd00000
 801fde8:	3fe00000 	.word	0x3fe00000
 801fdec:	408fffff 	.word	0x408fffff
 801fdf0:	4bd5      	ldr	r3, [pc, #852]	; (8020148 <__ieee754_pow+0x758>)
 801fdf2:	2200      	movs	r2, #0
 801fdf4:	402b      	ands	r3, r5
 801fdf6:	b92b      	cbnz	r3, 801fe04 <__ieee754_pow+0x414>
 801fdf8:	4bd4      	ldr	r3, [pc, #848]	; (802014c <__ieee754_pow+0x75c>)
 801fdfa:	f7e0 fbef 	bl	80005dc <__aeabi_dmul>
 801fdfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801fe02:	460c      	mov	r4, r1
 801fe04:	1523      	asrs	r3, r4, #20
 801fe06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801fe0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fe0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801fe12:	4413      	add	r3, r2
 801fe14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801fe18:	9305      	str	r3, [sp, #20]
 801fe1a:	4bcd      	ldr	r3, [pc, #820]	; (8020150 <__ieee754_pow+0x760>)
 801fe1c:	429c      	cmp	r4, r3
 801fe1e:	dd08      	ble.n	801fe32 <__ieee754_pow+0x442>
 801fe20:	4bcc      	ldr	r3, [pc, #816]	; (8020154 <__ieee754_pow+0x764>)
 801fe22:	429c      	cmp	r4, r3
 801fe24:	f340 8162 	ble.w	80200ec <__ieee754_pow+0x6fc>
 801fe28:	9b05      	ldr	r3, [sp, #20]
 801fe2a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801fe2e:	3301      	adds	r3, #1
 801fe30:	9305      	str	r3, [sp, #20]
 801fe32:	2400      	movs	r4, #0
 801fe34:	00e3      	lsls	r3, r4, #3
 801fe36:	4682      	mov	sl, r0
 801fe38:	4629      	mov	r1, r5
 801fe3a:	46ab      	mov	fp, r5
 801fe3c:	9307      	str	r3, [sp, #28]
 801fe3e:	4bc6      	ldr	r3, [pc, #792]	; (8020158 <__ieee754_pow+0x768>)
 801fe40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fe44:	ed93 7b00 	vldr	d7, [r3]
 801fe48:	eeb0 9a47 	vmov.f32	s18, s14
 801fe4c:	eef0 9a67 	vmov.f32	s19, s15
 801fe50:	ec53 2b17 	vmov	r2, r3, d7
 801fe54:	f7e0 fa0a 	bl	800026c <__aeabi_dsub>
 801fe58:	4652      	mov	r2, sl
 801fe5a:	4606      	mov	r6, r0
 801fe5c:	460f      	mov	r7, r1
 801fe5e:	462b      	mov	r3, r5
 801fe60:	106d      	asrs	r5, r5, #1
 801fe62:	ec51 0b19 	vmov	r0, r1, d9
 801fe66:	f7e0 fa03 	bl	8000270 <__adddf3>
 801fe6a:	4602      	mov	r2, r0
 801fe6c:	460b      	mov	r3, r1
 801fe6e:	2000      	movs	r0, #0
 801fe70:	49ba      	ldr	r1, [pc, #744]	; (802015c <__ieee754_pow+0x76c>)
 801fe72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801fe76:	f7e0 fcdb 	bl	8000830 <__aeabi_ddiv>
 801fe7a:	4602      	mov	r2, r0
 801fe7c:	460b      	mov	r3, r1
 801fe7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801fe82:	ec41 0b1a 	vmov	d10, r0, r1
 801fe86:	4630      	mov	r0, r6
 801fe88:	4639      	mov	r1, r7
 801fe8a:	f7e0 fba7 	bl	80005dc <__aeabi_dmul>
 801fe8e:	2300      	movs	r3, #0
 801fe90:	2200      	movs	r2, #0
 801fe92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fe96:	9302      	str	r3, [sp, #8]
 801fe98:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801fe9c:	4614      	mov	r4, r2
 801fe9e:	461d      	mov	r5, r3
 801fea0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801fea4:	ec41 0b18 	vmov	d8, r0, r1
 801fea8:	4640      	mov	r0, r8
 801feaa:	4649      	mov	r1, r9
 801feac:	f7e0 fb96 	bl	80005dc <__aeabi_dmul>
 801feb0:	4602      	mov	r2, r0
 801feb2:	460b      	mov	r3, r1
 801feb4:	4630      	mov	r0, r6
 801feb6:	4639      	mov	r1, r7
 801feb8:	f7e0 f9d8 	bl	800026c <__aeabi_dsub>
 801febc:	4606      	mov	r6, r0
 801febe:	460f      	mov	r7, r1
 801fec0:	4620      	mov	r0, r4
 801fec2:	4629      	mov	r1, r5
 801fec4:	ec53 2b19 	vmov	r2, r3, d9
 801fec8:	f7e0 f9d0 	bl	800026c <__aeabi_dsub>
 801fecc:	4602      	mov	r2, r0
 801fece:	460b      	mov	r3, r1
 801fed0:	4650      	mov	r0, sl
 801fed2:	4659      	mov	r1, fp
 801fed4:	f7e0 f9ca 	bl	800026c <__aeabi_dsub>
 801fed8:	4642      	mov	r2, r8
 801feda:	464b      	mov	r3, r9
 801fedc:	f7e0 fb7e 	bl	80005dc <__aeabi_dmul>
 801fee0:	4602      	mov	r2, r0
 801fee2:	460b      	mov	r3, r1
 801fee4:	4630      	mov	r0, r6
 801fee6:	4639      	mov	r1, r7
 801fee8:	f7e0 f9c0 	bl	800026c <__aeabi_dsub>
 801feec:	ec53 2b1a 	vmov	r2, r3, d10
 801fef0:	f7e0 fb74 	bl	80005dc <__aeabi_dmul>
 801fef4:	ec53 2b18 	vmov	r2, r3, d8
 801fef8:	ec41 0b19 	vmov	d9, r0, r1
 801fefc:	ec51 0b18 	vmov	r0, r1, d8
 801ff00:	f7e0 fb6c 	bl	80005dc <__aeabi_dmul>
 801ff04:	4604      	mov	r4, r0
 801ff06:	460d      	mov	r5, r1
 801ff08:	a37b      	add	r3, pc, #492	; (adr r3, 80200f8 <__ieee754_pow+0x708>)
 801ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff0e:	f7e0 fb65 	bl	80005dc <__aeabi_dmul>
 801ff12:	a37b      	add	r3, pc, #492	; (adr r3, 8020100 <__ieee754_pow+0x710>)
 801ff14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff18:	f7e0 f9aa 	bl	8000270 <__adddf3>
 801ff1c:	4622      	mov	r2, r4
 801ff1e:	462b      	mov	r3, r5
 801ff20:	f7e0 fb5c 	bl	80005dc <__aeabi_dmul>
 801ff24:	a378      	add	r3, pc, #480	; (adr r3, 8020108 <__ieee754_pow+0x718>)
 801ff26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff2a:	f7e0 f9a1 	bl	8000270 <__adddf3>
 801ff2e:	4622      	mov	r2, r4
 801ff30:	462b      	mov	r3, r5
 801ff32:	f7e0 fb53 	bl	80005dc <__aeabi_dmul>
 801ff36:	a376      	add	r3, pc, #472	; (adr r3, 8020110 <__ieee754_pow+0x720>)
 801ff38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff3c:	f7e0 f998 	bl	8000270 <__adddf3>
 801ff40:	4622      	mov	r2, r4
 801ff42:	462b      	mov	r3, r5
 801ff44:	f7e0 fb4a 	bl	80005dc <__aeabi_dmul>
 801ff48:	a373      	add	r3, pc, #460	; (adr r3, 8020118 <__ieee754_pow+0x728>)
 801ff4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff4e:	f7e0 f98f 	bl	8000270 <__adddf3>
 801ff52:	4622      	mov	r2, r4
 801ff54:	462b      	mov	r3, r5
 801ff56:	f7e0 fb41 	bl	80005dc <__aeabi_dmul>
 801ff5a:	a371      	add	r3, pc, #452	; (adr r3, 8020120 <__ieee754_pow+0x730>)
 801ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff60:	f7e0 f986 	bl	8000270 <__adddf3>
 801ff64:	4606      	mov	r6, r0
 801ff66:	460f      	mov	r7, r1
 801ff68:	4622      	mov	r2, r4
 801ff6a:	462b      	mov	r3, r5
 801ff6c:	4620      	mov	r0, r4
 801ff6e:	4629      	mov	r1, r5
 801ff70:	f7e0 fb34 	bl	80005dc <__aeabi_dmul>
 801ff74:	4602      	mov	r2, r0
 801ff76:	460b      	mov	r3, r1
 801ff78:	4630      	mov	r0, r6
 801ff7a:	4639      	mov	r1, r7
 801ff7c:	f7e0 fb2e 	bl	80005dc <__aeabi_dmul>
 801ff80:	4642      	mov	r2, r8
 801ff82:	4604      	mov	r4, r0
 801ff84:	460d      	mov	r5, r1
 801ff86:	464b      	mov	r3, r9
 801ff88:	ec51 0b18 	vmov	r0, r1, d8
 801ff8c:	f7e0 f970 	bl	8000270 <__adddf3>
 801ff90:	ec53 2b19 	vmov	r2, r3, d9
 801ff94:	f7e0 fb22 	bl	80005dc <__aeabi_dmul>
 801ff98:	4622      	mov	r2, r4
 801ff9a:	462b      	mov	r3, r5
 801ff9c:	f7e0 f968 	bl	8000270 <__adddf3>
 801ffa0:	4642      	mov	r2, r8
 801ffa2:	4682      	mov	sl, r0
 801ffa4:	468b      	mov	fp, r1
 801ffa6:	464b      	mov	r3, r9
 801ffa8:	4640      	mov	r0, r8
 801ffaa:	4649      	mov	r1, r9
 801ffac:	f7e0 fb16 	bl	80005dc <__aeabi_dmul>
 801ffb0:	2200      	movs	r2, #0
 801ffb2:	4b6b      	ldr	r3, [pc, #428]	; (8020160 <__ieee754_pow+0x770>)
 801ffb4:	4606      	mov	r6, r0
 801ffb6:	460f      	mov	r7, r1
 801ffb8:	f7e0 f95a 	bl	8000270 <__adddf3>
 801ffbc:	4652      	mov	r2, sl
 801ffbe:	465b      	mov	r3, fp
 801ffc0:	f7e0 f956 	bl	8000270 <__adddf3>
 801ffc4:	2000      	movs	r0, #0
 801ffc6:	460d      	mov	r5, r1
 801ffc8:	460b      	mov	r3, r1
 801ffca:	4604      	mov	r4, r0
 801ffcc:	4602      	mov	r2, r0
 801ffce:	4649      	mov	r1, r9
 801ffd0:	4640      	mov	r0, r8
 801ffd2:	f7e0 fb03 	bl	80005dc <__aeabi_dmul>
 801ffd6:	2200      	movs	r2, #0
 801ffd8:	4680      	mov	r8, r0
 801ffda:	4689      	mov	r9, r1
 801ffdc:	4b60      	ldr	r3, [pc, #384]	; (8020160 <__ieee754_pow+0x770>)
 801ffde:	4620      	mov	r0, r4
 801ffe0:	4629      	mov	r1, r5
 801ffe2:	f7e0 f943 	bl	800026c <__aeabi_dsub>
 801ffe6:	4632      	mov	r2, r6
 801ffe8:	463b      	mov	r3, r7
 801ffea:	f7e0 f93f 	bl	800026c <__aeabi_dsub>
 801ffee:	4602      	mov	r2, r0
 801fff0:	460b      	mov	r3, r1
 801fff2:	4650      	mov	r0, sl
 801fff4:	4659      	mov	r1, fp
 801fff6:	f7e0 f939 	bl	800026c <__aeabi_dsub>
 801fffa:	ec53 2b18 	vmov	r2, r3, d8
 801fffe:	f7e0 faed 	bl	80005dc <__aeabi_dmul>
 8020002:	4606      	mov	r6, r0
 8020004:	460f      	mov	r7, r1
 8020006:	4622      	mov	r2, r4
 8020008:	462b      	mov	r3, r5
 802000a:	ec51 0b19 	vmov	r0, r1, d9
 802000e:	f7e0 fae5 	bl	80005dc <__aeabi_dmul>
 8020012:	4602      	mov	r2, r0
 8020014:	460b      	mov	r3, r1
 8020016:	4630      	mov	r0, r6
 8020018:	4639      	mov	r1, r7
 802001a:	f7e0 f929 	bl	8000270 <__adddf3>
 802001e:	4606      	mov	r6, r0
 8020020:	460f      	mov	r7, r1
 8020022:	4602      	mov	r2, r0
 8020024:	460b      	mov	r3, r1
 8020026:	4640      	mov	r0, r8
 8020028:	4649      	mov	r1, r9
 802002a:	f7e0 f921 	bl	8000270 <__adddf3>
 802002e:	2000      	movs	r0, #0
 8020030:	460d      	mov	r5, r1
 8020032:	4604      	mov	r4, r0
 8020034:	a33c      	add	r3, pc, #240	; (adr r3, 8020128 <__ieee754_pow+0x738>)
 8020036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802003a:	f7e0 facf 	bl	80005dc <__aeabi_dmul>
 802003e:	4642      	mov	r2, r8
 8020040:	464b      	mov	r3, r9
 8020042:	ec41 0b18 	vmov	d8, r0, r1
 8020046:	4620      	mov	r0, r4
 8020048:	4629      	mov	r1, r5
 802004a:	f7e0 f90f 	bl	800026c <__aeabi_dsub>
 802004e:	4602      	mov	r2, r0
 8020050:	460b      	mov	r3, r1
 8020052:	4630      	mov	r0, r6
 8020054:	4639      	mov	r1, r7
 8020056:	f7e0 f909 	bl	800026c <__aeabi_dsub>
 802005a:	a335      	add	r3, pc, #212	; (adr r3, 8020130 <__ieee754_pow+0x740>)
 802005c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020060:	f7e0 fabc 	bl	80005dc <__aeabi_dmul>
 8020064:	4606      	mov	r6, r0
 8020066:	460f      	mov	r7, r1
 8020068:	4620      	mov	r0, r4
 802006a:	4629      	mov	r1, r5
 802006c:	a332      	add	r3, pc, #200	; (adr r3, 8020138 <__ieee754_pow+0x748>)
 802006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020072:	f7e0 fab3 	bl	80005dc <__aeabi_dmul>
 8020076:	4602      	mov	r2, r0
 8020078:	460b      	mov	r3, r1
 802007a:	4630      	mov	r0, r6
 802007c:	4639      	mov	r1, r7
 802007e:	f7e0 f8f7 	bl	8000270 <__adddf3>
 8020082:	9a07      	ldr	r2, [sp, #28]
 8020084:	4b37      	ldr	r3, [pc, #220]	; (8020164 <__ieee754_pow+0x774>)
 8020086:	4413      	add	r3, r2
 8020088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802008c:	f7e0 f8f0 	bl	8000270 <__adddf3>
 8020090:	4682      	mov	sl, r0
 8020092:	9805      	ldr	r0, [sp, #20]
 8020094:	468b      	mov	fp, r1
 8020096:	f7e0 fa37 	bl	8000508 <__aeabi_i2d>
 802009a:	9a07      	ldr	r2, [sp, #28]
 802009c:	4b32      	ldr	r3, [pc, #200]	; (8020168 <__ieee754_pow+0x778>)
 802009e:	4606      	mov	r6, r0
 80200a0:	460f      	mov	r7, r1
 80200a2:	4413      	add	r3, r2
 80200a4:	4652      	mov	r2, sl
 80200a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80200aa:	ec51 0b18 	vmov	r0, r1, d8
 80200ae:	465b      	mov	r3, fp
 80200b0:	f7e0 f8de 	bl	8000270 <__adddf3>
 80200b4:	4642      	mov	r2, r8
 80200b6:	464b      	mov	r3, r9
 80200b8:	f7e0 f8da 	bl	8000270 <__adddf3>
 80200bc:	4632      	mov	r2, r6
 80200be:	463b      	mov	r3, r7
 80200c0:	f7e0 f8d6 	bl	8000270 <__adddf3>
 80200c4:	2000      	movs	r0, #0
 80200c6:	4632      	mov	r2, r6
 80200c8:	463b      	mov	r3, r7
 80200ca:	4604      	mov	r4, r0
 80200cc:	460d      	mov	r5, r1
 80200ce:	f7e0 f8cd 	bl	800026c <__aeabi_dsub>
 80200d2:	4642      	mov	r2, r8
 80200d4:	464b      	mov	r3, r9
 80200d6:	f7e0 f8c9 	bl	800026c <__aeabi_dsub>
 80200da:	ec53 2b18 	vmov	r2, r3, d8
 80200de:	f7e0 f8c5 	bl	800026c <__aeabi_dsub>
 80200e2:	4602      	mov	r2, r0
 80200e4:	460b      	mov	r3, r1
 80200e6:	4650      	mov	r0, sl
 80200e8:	4659      	mov	r1, fp
 80200ea:	e610      	b.n	801fd0e <__ieee754_pow+0x31e>
 80200ec:	2401      	movs	r4, #1
 80200ee:	e6a1      	b.n	801fe34 <__ieee754_pow+0x444>
 80200f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8020140 <__ieee754_pow+0x750>
 80200f4:	e617      	b.n	801fd26 <__ieee754_pow+0x336>
 80200f6:	bf00      	nop
 80200f8:	4a454eef 	.word	0x4a454eef
 80200fc:	3fca7e28 	.word	0x3fca7e28
 8020100:	93c9db65 	.word	0x93c9db65
 8020104:	3fcd864a 	.word	0x3fcd864a
 8020108:	a91d4101 	.word	0xa91d4101
 802010c:	3fd17460 	.word	0x3fd17460
 8020110:	518f264d 	.word	0x518f264d
 8020114:	3fd55555 	.word	0x3fd55555
 8020118:	db6fabff 	.word	0xdb6fabff
 802011c:	3fdb6db6 	.word	0x3fdb6db6
 8020120:	33333303 	.word	0x33333303
 8020124:	3fe33333 	.word	0x3fe33333
 8020128:	e0000000 	.word	0xe0000000
 802012c:	3feec709 	.word	0x3feec709
 8020130:	dc3a03fd 	.word	0xdc3a03fd
 8020134:	3feec709 	.word	0x3feec709
 8020138:	145b01f5 	.word	0x145b01f5
 802013c:	be3e2fe0 	.word	0xbe3e2fe0
 8020140:	00000000 	.word	0x00000000
 8020144:	3ff00000 	.word	0x3ff00000
 8020148:	7ff00000 	.word	0x7ff00000
 802014c:	43400000 	.word	0x43400000
 8020150:	0003988e 	.word	0x0003988e
 8020154:	000bb679 	.word	0x000bb679
 8020158:	08023260 	.word	0x08023260
 802015c:	3ff00000 	.word	0x3ff00000
 8020160:	40080000 	.word	0x40080000
 8020164:	08023280 	.word	0x08023280
 8020168:	08023270 	.word	0x08023270
 802016c:	a3b5      	add	r3, pc, #724	; (adr r3, 8020444 <__ieee754_pow+0xa54>)
 802016e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020172:	4640      	mov	r0, r8
 8020174:	4649      	mov	r1, r9
 8020176:	f7e0 f87b 	bl	8000270 <__adddf3>
 802017a:	4622      	mov	r2, r4
 802017c:	462b      	mov	r3, r5
 802017e:	ec41 0b1a 	vmov	d10, r0, r1
 8020182:	4630      	mov	r0, r6
 8020184:	4639      	mov	r1, r7
 8020186:	f7e0 f871 	bl	800026c <__aeabi_dsub>
 802018a:	4602      	mov	r2, r0
 802018c:	460b      	mov	r3, r1
 802018e:	ec51 0b1a 	vmov	r0, r1, d10
 8020192:	f7e0 fcb3 	bl	8000afc <__aeabi_dcmpgt>
 8020196:	2800      	cmp	r0, #0
 8020198:	f47f ae04 	bne.w	801fda4 <__ieee754_pow+0x3b4>
 802019c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80201a0:	4aa3      	ldr	r2, [pc, #652]	; (8020430 <__ieee754_pow+0xa40>)
 80201a2:	4293      	cmp	r3, r2
 80201a4:	f340 8108 	ble.w	80203b8 <__ieee754_pow+0x9c8>
 80201a8:	151b      	asrs	r3, r3, #20
 80201aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80201ae:	48a1      	ldr	r0, [pc, #644]	; (8020434 <__ieee754_pow+0xa44>)
 80201b0:	f1bb 0f00 	cmp.w	fp, #0
 80201b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80201b8:	f04f 0200 	mov.w	r2, #0
 80201bc:	fa4a fa03 	asr.w	sl, sl, r3
 80201c0:	44da      	add	sl, fp
 80201c2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80201c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80201ca:	fa40 f001 	asr.w	r0, r0, r1
 80201ce:	f1c1 0114 	rsb	r1, r1, #20
 80201d2:	ea00 030a 	and.w	r3, r0, sl
 80201d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80201da:	4620      	mov	r0, r4
 80201dc:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80201e0:	fa4a fa01 	asr.w	sl, sl, r1
 80201e4:	4629      	mov	r1, r5
 80201e6:	bfb8      	it	lt
 80201e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80201ec:	f7e0 f83e 	bl	800026c <__aeabi_dsub>
 80201f0:	ec41 0b19 	vmov	d9, r0, r1
 80201f4:	4642      	mov	r2, r8
 80201f6:	464b      	mov	r3, r9
 80201f8:	ec51 0b19 	vmov	r0, r1, d9
 80201fc:	f7e0 f838 	bl	8000270 <__adddf3>
 8020200:	2000      	movs	r0, #0
 8020202:	460d      	mov	r5, r1
 8020204:	4604      	mov	r4, r0
 8020206:	a37a      	add	r3, pc, #488	; (adr r3, 80203f0 <__ieee754_pow+0xa00>)
 8020208:	e9d3 2300 	ldrd	r2, r3, [r3]
 802020c:	f7e0 f9e6 	bl	80005dc <__aeabi_dmul>
 8020210:	4606      	mov	r6, r0
 8020212:	460f      	mov	r7, r1
 8020214:	4620      	mov	r0, r4
 8020216:	4629      	mov	r1, r5
 8020218:	ec53 2b19 	vmov	r2, r3, d9
 802021c:	f7e0 f826 	bl	800026c <__aeabi_dsub>
 8020220:	4602      	mov	r2, r0
 8020222:	460b      	mov	r3, r1
 8020224:	4640      	mov	r0, r8
 8020226:	4649      	mov	r1, r9
 8020228:	f7e0 f820 	bl	800026c <__aeabi_dsub>
 802022c:	a372      	add	r3, pc, #456	; (adr r3, 80203f8 <__ieee754_pow+0xa08>)
 802022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020232:	f7e0 f9d3 	bl	80005dc <__aeabi_dmul>
 8020236:	4680      	mov	r8, r0
 8020238:	4689      	mov	r9, r1
 802023a:	4620      	mov	r0, r4
 802023c:	4629      	mov	r1, r5
 802023e:	a370      	add	r3, pc, #448	; (adr r3, 8020400 <__ieee754_pow+0xa10>)
 8020240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020244:	f7e0 f9ca 	bl	80005dc <__aeabi_dmul>
 8020248:	4602      	mov	r2, r0
 802024a:	460b      	mov	r3, r1
 802024c:	4640      	mov	r0, r8
 802024e:	4649      	mov	r1, r9
 8020250:	f7e0 f80e 	bl	8000270 <__adddf3>
 8020254:	4604      	mov	r4, r0
 8020256:	460d      	mov	r5, r1
 8020258:	4602      	mov	r2, r0
 802025a:	460b      	mov	r3, r1
 802025c:	4630      	mov	r0, r6
 802025e:	4639      	mov	r1, r7
 8020260:	f7e0 f806 	bl	8000270 <__adddf3>
 8020264:	4632      	mov	r2, r6
 8020266:	4680      	mov	r8, r0
 8020268:	4689      	mov	r9, r1
 802026a:	463b      	mov	r3, r7
 802026c:	f7df fffe 	bl	800026c <__aeabi_dsub>
 8020270:	4602      	mov	r2, r0
 8020272:	460b      	mov	r3, r1
 8020274:	4620      	mov	r0, r4
 8020276:	4629      	mov	r1, r5
 8020278:	f7df fff8 	bl	800026c <__aeabi_dsub>
 802027c:	4642      	mov	r2, r8
 802027e:	4606      	mov	r6, r0
 8020280:	460f      	mov	r7, r1
 8020282:	464b      	mov	r3, r9
 8020284:	4640      	mov	r0, r8
 8020286:	4649      	mov	r1, r9
 8020288:	f7e0 f9a8 	bl	80005dc <__aeabi_dmul>
 802028c:	4604      	mov	r4, r0
 802028e:	460d      	mov	r5, r1
 8020290:	a35d      	add	r3, pc, #372	; (adr r3, 8020408 <__ieee754_pow+0xa18>)
 8020292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020296:	f7e0 f9a1 	bl	80005dc <__aeabi_dmul>
 802029a:	a35d      	add	r3, pc, #372	; (adr r3, 8020410 <__ieee754_pow+0xa20>)
 802029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202a0:	f7df ffe4 	bl	800026c <__aeabi_dsub>
 80202a4:	4622      	mov	r2, r4
 80202a6:	462b      	mov	r3, r5
 80202a8:	f7e0 f998 	bl	80005dc <__aeabi_dmul>
 80202ac:	a35a      	add	r3, pc, #360	; (adr r3, 8020418 <__ieee754_pow+0xa28>)
 80202ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202b2:	f7df ffdd 	bl	8000270 <__adddf3>
 80202b6:	4622      	mov	r2, r4
 80202b8:	462b      	mov	r3, r5
 80202ba:	f7e0 f98f 	bl	80005dc <__aeabi_dmul>
 80202be:	a358      	add	r3, pc, #352	; (adr r3, 8020420 <__ieee754_pow+0xa30>)
 80202c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202c4:	f7df ffd2 	bl	800026c <__aeabi_dsub>
 80202c8:	4622      	mov	r2, r4
 80202ca:	462b      	mov	r3, r5
 80202cc:	f7e0 f986 	bl	80005dc <__aeabi_dmul>
 80202d0:	a355      	add	r3, pc, #340	; (adr r3, 8020428 <__ieee754_pow+0xa38>)
 80202d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202d6:	f7df ffcb 	bl	8000270 <__adddf3>
 80202da:	4622      	mov	r2, r4
 80202dc:	462b      	mov	r3, r5
 80202de:	f7e0 f97d 	bl	80005dc <__aeabi_dmul>
 80202e2:	4602      	mov	r2, r0
 80202e4:	460b      	mov	r3, r1
 80202e6:	4640      	mov	r0, r8
 80202e8:	4649      	mov	r1, r9
 80202ea:	f7df ffbf 	bl	800026c <__aeabi_dsub>
 80202ee:	4604      	mov	r4, r0
 80202f0:	460d      	mov	r5, r1
 80202f2:	4602      	mov	r2, r0
 80202f4:	460b      	mov	r3, r1
 80202f6:	4640      	mov	r0, r8
 80202f8:	4649      	mov	r1, r9
 80202fa:	f7e0 f96f 	bl	80005dc <__aeabi_dmul>
 80202fe:	2200      	movs	r2, #0
 8020300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020304:	ec41 0b19 	vmov	d9, r0, r1
 8020308:	4620      	mov	r0, r4
 802030a:	4629      	mov	r1, r5
 802030c:	f7df ffae 	bl	800026c <__aeabi_dsub>
 8020310:	4602      	mov	r2, r0
 8020312:	460b      	mov	r3, r1
 8020314:	ec51 0b19 	vmov	r0, r1, d9
 8020318:	f7e0 fa8a 	bl	8000830 <__aeabi_ddiv>
 802031c:	4632      	mov	r2, r6
 802031e:	4604      	mov	r4, r0
 8020320:	460d      	mov	r5, r1
 8020322:	463b      	mov	r3, r7
 8020324:	4640      	mov	r0, r8
 8020326:	4649      	mov	r1, r9
 8020328:	f7e0 f958 	bl	80005dc <__aeabi_dmul>
 802032c:	4632      	mov	r2, r6
 802032e:	463b      	mov	r3, r7
 8020330:	f7df ff9e 	bl	8000270 <__adddf3>
 8020334:	4602      	mov	r2, r0
 8020336:	460b      	mov	r3, r1
 8020338:	4620      	mov	r0, r4
 802033a:	4629      	mov	r1, r5
 802033c:	f7df ff96 	bl	800026c <__aeabi_dsub>
 8020340:	4642      	mov	r2, r8
 8020342:	464b      	mov	r3, r9
 8020344:	f7df ff92 	bl	800026c <__aeabi_dsub>
 8020348:	460b      	mov	r3, r1
 802034a:	4602      	mov	r2, r0
 802034c:	493a      	ldr	r1, [pc, #232]	; (8020438 <__ieee754_pow+0xa48>)
 802034e:	2000      	movs	r0, #0
 8020350:	f7df ff8c 	bl	800026c <__aeabi_dsub>
 8020354:	ec41 0b10 	vmov	d0, r0, r1
 8020358:	ee10 3a90 	vmov	r3, s1
 802035c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8020360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020364:	da2b      	bge.n	80203be <__ieee754_pow+0x9ce>
 8020366:	4650      	mov	r0, sl
 8020368:	f000 fd66 	bl	8020e38 <scalbn>
 802036c:	ec51 0b10 	vmov	r0, r1, d0
 8020370:	ec53 2b18 	vmov	r2, r3, d8
 8020374:	f7ff bbed 	b.w	801fb52 <__ieee754_pow+0x162>
 8020378:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802037c:	4b2f      	ldr	r3, [pc, #188]	; (802043c <__ieee754_pow+0xa4c>)
 802037e:	429e      	cmp	r6, r3
 8020380:	f77f af0c 	ble.w	802019c <__ieee754_pow+0x7ac>
 8020384:	4b2e      	ldr	r3, [pc, #184]	; (8020440 <__ieee754_pow+0xa50>)
 8020386:	440b      	add	r3, r1
 8020388:	4303      	orrs	r3, r0
 802038a:	d009      	beq.n	80203a0 <__ieee754_pow+0x9b0>
 802038c:	2200      	movs	r2, #0
 802038e:	2300      	movs	r3, #0
 8020390:	ec51 0b18 	vmov	r0, r1, d8
 8020394:	f7e0 fb94 	bl	8000ac0 <__aeabi_dcmplt>
 8020398:	3800      	subs	r0, #0
 802039a:	bf18      	it	ne
 802039c:	2001      	movne	r0, #1
 802039e:	e447      	b.n	801fc30 <__ieee754_pow+0x240>
 80203a0:	4622      	mov	r2, r4
 80203a2:	462b      	mov	r3, r5
 80203a4:	f7df ff62 	bl	800026c <__aeabi_dsub>
 80203a8:	4642      	mov	r2, r8
 80203aa:	464b      	mov	r3, r9
 80203ac:	f7e0 fb9c 	bl	8000ae8 <__aeabi_dcmpge>
 80203b0:	2800      	cmp	r0, #0
 80203b2:	f43f aef3 	beq.w	802019c <__ieee754_pow+0x7ac>
 80203b6:	e7e9      	b.n	802038c <__ieee754_pow+0x99c>
 80203b8:	f04f 0a00 	mov.w	sl, #0
 80203bc:	e71a      	b.n	80201f4 <__ieee754_pow+0x804>
 80203be:	ec51 0b10 	vmov	r0, r1, d0
 80203c2:	4619      	mov	r1, r3
 80203c4:	e7d4      	b.n	8020370 <__ieee754_pow+0x980>
 80203c6:	2000      	movs	r0, #0
 80203c8:	491b      	ldr	r1, [pc, #108]	; (8020438 <__ieee754_pow+0xa48>)
 80203ca:	f7ff bb30 	b.w	801fa2e <__ieee754_pow+0x3e>
 80203ce:	2000      	movs	r0, #0
 80203d0:	2100      	movs	r1, #0
 80203d2:	f7ff bb2c 	b.w	801fa2e <__ieee754_pow+0x3e>
 80203d6:	4630      	mov	r0, r6
 80203d8:	4639      	mov	r1, r7
 80203da:	f7ff bb28 	b.w	801fa2e <__ieee754_pow+0x3e>
 80203de:	9204      	str	r2, [sp, #16]
 80203e0:	f7ff bb7a 	b.w	801fad8 <__ieee754_pow+0xe8>
 80203e4:	2300      	movs	r3, #0
 80203e6:	f7ff bb64 	b.w	801fab2 <__ieee754_pow+0xc2>
 80203ea:	bf00      	nop
 80203ec:	f3af 8000 	nop.w
 80203f0:	00000000 	.word	0x00000000
 80203f4:	3fe62e43 	.word	0x3fe62e43
 80203f8:	fefa39ef 	.word	0xfefa39ef
 80203fc:	3fe62e42 	.word	0x3fe62e42
 8020400:	0ca86c39 	.word	0x0ca86c39
 8020404:	be205c61 	.word	0xbe205c61
 8020408:	72bea4d0 	.word	0x72bea4d0
 802040c:	3e663769 	.word	0x3e663769
 8020410:	c5d26bf1 	.word	0xc5d26bf1
 8020414:	3ebbbd41 	.word	0x3ebbbd41
 8020418:	af25de2c 	.word	0xaf25de2c
 802041c:	3f11566a 	.word	0x3f11566a
 8020420:	16bebd93 	.word	0x16bebd93
 8020424:	3f66c16c 	.word	0x3f66c16c
 8020428:	5555553e 	.word	0x5555553e
 802042c:	3fc55555 	.word	0x3fc55555
 8020430:	3fe00000 	.word	0x3fe00000
 8020434:	fff00000 	.word	0xfff00000
 8020438:	3ff00000 	.word	0x3ff00000
 802043c:	4090cbff 	.word	0x4090cbff
 8020440:	3f6f3400 	.word	0x3f6f3400
 8020444:	652b82fe 	.word	0x652b82fe
 8020448:	3c971547 	.word	0x3c971547
 802044c:	00000000 	.word	0x00000000

08020450 <atan>:
 8020450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020454:	ec55 4b10 	vmov	r4, r5, d0
 8020458:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802045c:	4bc2      	ldr	r3, [pc, #776]	; (8020768 <atan+0x318>)
 802045e:	46ab      	mov	fp, r5
 8020460:	429e      	cmp	r6, r3
 8020462:	dd18      	ble.n	8020496 <atan+0x46>
 8020464:	4bc1      	ldr	r3, [pc, #772]	; (802076c <atan+0x31c>)
 8020466:	429e      	cmp	r6, r3
 8020468:	dc01      	bgt.n	802046e <atan+0x1e>
 802046a:	d109      	bne.n	8020480 <atan+0x30>
 802046c:	b144      	cbz	r4, 8020480 <atan+0x30>
 802046e:	4622      	mov	r2, r4
 8020470:	462b      	mov	r3, r5
 8020472:	4620      	mov	r0, r4
 8020474:	4629      	mov	r1, r5
 8020476:	f7df fefb 	bl	8000270 <__adddf3>
 802047a:	4604      	mov	r4, r0
 802047c:	460d      	mov	r5, r1
 802047e:	e006      	b.n	802048e <atan+0x3e>
 8020480:	f1bb 0f00 	cmp.w	fp, #0
 8020484:	f300 8131 	bgt.w	80206ea <atan+0x29a>
 8020488:	a59b      	add	r5, pc, #620	; (adr r5, 80206f8 <atan+0x2a8>)
 802048a:	e9d5 4500 	ldrd	r4, r5, [r5]
 802048e:	ec45 4b10 	vmov	d0, r4, r5
 8020492:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020496:	4bb6      	ldr	r3, [pc, #728]	; (8020770 <atan+0x320>)
 8020498:	429e      	cmp	r6, r3
 802049a:	dc14      	bgt.n	80204c6 <atan+0x76>
 802049c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80204a0:	429e      	cmp	r6, r3
 80204a2:	dc0d      	bgt.n	80204c0 <atan+0x70>
 80204a4:	ee10 0a10 	vmov	r0, s0
 80204a8:	4629      	mov	r1, r5
 80204aa:	a395      	add	r3, pc, #596	; (adr r3, 8020700 <atan+0x2b0>)
 80204ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204b0:	f7df fede 	bl	8000270 <__adddf3>
 80204b4:	2200      	movs	r2, #0
 80204b6:	4baf      	ldr	r3, [pc, #700]	; (8020774 <atan+0x324>)
 80204b8:	f7e0 fb20 	bl	8000afc <__aeabi_dcmpgt>
 80204bc:	2800      	cmp	r0, #0
 80204be:	d1e6      	bne.n	802048e <atan+0x3e>
 80204c0:	f04f 3aff 	mov.w	sl, #4294967295
 80204c4:	e02b      	b.n	802051e <atan+0xce>
 80204c6:	f000 f963 	bl	8020790 <fabs>
 80204ca:	4bab      	ldr	r3, [pc, #684]	; (8020778 <atan+0x328>)
 80204cc:	429e      	cmp	r6, r3
 80204ce:	ec55 4b10 	vmov	r4, r5, d0
 80204d2:	f300 80bf 	bgt.w	8020654 <atan+0x204>
 80204d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80204da:	429e      	cmp	r6, r3
 80204dc:	f300 80a0 	bgt.w	8020620 <atan+0x1d0>
 80204e0:	ee10 2a10 	vmov	r2, s0
 80204e4:	ee10 0a10 	vmov	r0, s0
 80204e8:	462b      	mov	r3, r5
 80204ea:	4629      	mov	r1, r5
 80204ec:	f7df fec0 	bl	8000270 <__adddf3>
 80204f0:	2200      	movs	r2, #0
 80204f2:	4ba0      	ldr	r3, [pc, #640]	; (8020774 <atan+0x324>)
 80204f4:	f04f 0a00 	mov.w	sl, #0
 80204f8:	f7df feb8 	bl	800026c <__aeabi_dsub>
 80204fc:	4606      	mov	r6, r0
 80204fe:	460f      	mov	r7, r1
 8020500:	2200      	movs	r2, #0
 8020502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020506:	4620      	mov	r0, r4
 8020508:	4629      	mov	r1, r5
 802050a:	f7df feb1 	bl	8000270 <__adddf3>
 802050e:	4602      	mov	r2, r0
 8020510:	460b      	mov	r3, r1
 8020512:	4630      	mov	r0, r6
 8020514:	4639      	mov	r1, r7
 8020516:	f7e0 f98b 	bl	8000830 <__aeabi_ddiv>
 802051a:	4604      	mov	r4, r0
 802051c:	460d      	mov	r5, r1
 802051e:	4622      	mov	r2, r4
 8020520:	462b      	mov	r3, r5
 8020522:	4620      	mov	r0, r4
 8020524:	4629      	mov	r1, r5
 8020526:	f7e0 f859 	bl	80005dc <__aeabi_dmul>
 802052a:	4602      	mov	r2, r0
 802052c:	460b      	mov	r3, r1
 802052e:	4680      	mov	r8, r0
 8020530:	4689      	mov	r9, r1
 8020532:	f7e0 f853 	bl	80005dc <__aeabi_dmul>
 8020536:	4606      	mov	r6, r0
 8020538:	460f      	mov	r7, r1
 802053a:	a373      	add	r3, pc, #460	; (adr r3, 8020708 <atan+0x2b8>)
 802053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020540:	f7e0 f84c 	bl	80005dc <__aeabi_dmul>
 8020544:	a372      	add	r3, pc, #456	; (adr r3, 8020710 <atan+0x2c0>)
 8020546:	e9d3 2300 	ldrd	r2, r3, [r3]
 802054a:	f7df fe91 	bl	8000270 <__adddf3>
 802054e:	4632      	mov	r2, r6
 8020550:	463b      	mov	r3, r7
 8020552:	f7e0 f843 	bl	80005dc <__aeabi_dmul>
 8020556:	a370      	add	r3, pc, #448	; (adr r3, 8020718 <atan+0x2c8>)
 8020558:	e9d3 2300 	ldrd	r2, r3, [r3]
 802055c:	f7df fe88 	bl	8000270 <__adddf3>
 8020560:	4632      	mov	r2, r6
 8020562:	463b      	mov	r3, r7
 8020564:	f7e0 f83a 	bl	80005dc <__aeabi_dmul>
 8020568:	a36d      	add	r3, pc, #436	; (adr r3, 8020720 <atan+0x2d0>)
 802056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802056e:	f7df fe7f 	bl	8000270 <__adddf3>
 8020572:	4632      	mov	r2, r6
 8020574:	463b      	mov	r3, r7
 8020576:	f7e0 f831 	bl	80005dc <__aeabi_dmul>
 802057a:	a36b      	add	r3, pc, #428	; (adr r3, 8020728 <atan+0x2d8>)
 802057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020580:	f7df fe76 	bl	8000270 <__adddf3>
 8020584:	4632      	mov	r2, r6
 8020586:	463b      	mov	r3, r7
 8020588:	f7e0 f828 	bl	80005dc <__aeabi_dmul>
 802058c:	a368      	add	r3, pc, #416	; (adr r3, 8020730 <atan+0x2e0>)
 802058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020592:	f7df fe6d 	bl	8000270 <__adddf3>
 8020596:	4642      	mov	r2, r8
 8020598:	464b      	mov	r3, r9
 802059a:	f7e0 f81f 	bl	80005dc <__aeabi_dmul>
 802059e:	4680      	mov	r8, r0
 80205a0:	4689      	mov	r9, r1
 80205a2:	4630      	mov	r0, r6
 80205a4:	4639      	mov	r1, r7
 80205a6:	a364      	add	r3, pc, #400	; (adr r3, 8020738 <atan+0x2e8>)
 80205a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ac:	f7e0 f816 	bl	80005dc <__aeabi_dmul>
 80205b0:	a363      	add	r3, pc, #396	; (adr r3, 8020740 <atan+0x2f0>)
 80205b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205b6:	f7df fe59 	bl	800026c <__aeabi_dsub>
 80205ba:	4632      	mov	r2, r6
 80205bc:	463b      	mov	r3, r7
 80205be:	f7e0 f80d 	bl	80005dc <__aeabi_dmul>
 80205c2:	a361      	add	r3, pc, #388	; (adr r3, 8020748 <atan+0x2f8>)
 80205c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205c8:	f7df fe50 	bl	800026c <__aeabi_dsub>
 80205cc:	4632      	mov	r2, r6
 80205ce:	463b      	mov	r3, r7
 80205d0:	f7e0 f804 	bl	80005dc <__aeabi_dmul>
 80205d4:	a35e      	add	r3, pc, #376	; (adr r3, 8020750 <atan+0x300>)
 80205d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205da:	f7df fe47 	bl	800026c <__aeabi_dsub>
 80205de:	4632      	mov	r2, r6
 80205e0:	463b      	mov	r3, r7
 80205e2:	f7df fffb 	bl	80005dc <__aeabi_dmul>
 80205e6:	a35c      	add	r3, pc, #368	; (adr r3, 8020758 <atan+0x308>)
 80205e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ec:	f7df fe3e 	bl	800026c <__aeabi_dsub>
 80205f0:	4632      	mov	r2, r6
 80205f2:	463b      	mov	r3, r7
 80205f4:	f7df fff2 	bl	80005dc <__aeabi_dmul>
 80205f8:	4602      	mov	r2, r0
 80205fa:	460b      	mov	r3, r1
 80205fc:	4640      	mov	r0, r8
 80205fe:	4649      	mov	r1, r9
 8020600:	f7df fe36 	bl	8000270 <__adddf3>
 8020604:	4622      	mov	r2, r4
 8020606:	462b      	mov	r3, r5
 8020608:	f7df ffe8 	bl	80005dc <__aeabi_dmul>
 802060c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8020610:	4602      	mov	r2, r0
 8020612:	460b      	mov	r3, r1
 8020614:	d14b      	bne.n	80206ae <atan+0x25e>
 8020616:	4620      	mov	r0, r4
 8020618:	4629      	mov	r1, r5
 802061a:	f7df fe27 	bl	800026c <__aeabi_dsub>
 802061e:	e72c      	b.n	802047a <atan+0x2a>
 8020620:	ee10 0a10 	vmov	r0, s0
 8020624:	2200      	movs	r2, #0
 8020626:	4b53      	ldr	r3, [pc, #332]	; (8020774 <atan+0x324>)
 8020628:	4629      	mov	r1, r5
 802062a:	f7df fe1f 	bl	800026c <__aeabi_dsub>
 802062e:	4606      	mov	r6, r0
 8020630:	460f      	mov	r7, r1
 8020632:	2200      	movs	r2, #0
 8020634:	4b4f      	ldr	r3, [pc, #316]	; (8020774 <atan+0x324>)
 8020636:	4620      	mov	r0, r4
 8020638:	4629      	mov	r1, r5
 802063a:	f04f 0a01 	mov.w	sl, #1
 802063e:	f7df fe17 	bl	8000270 <__adddf3>
 8020642:	4602      	mov	r2, r0
 8020644:	460b      	mov	r3, r1
 8020646:	4630      	mov	r0, r6
 8020648:	4639      	mov	r1, r7
 802064a:	f7e0 f8f1 	bl	8000830 <__aeabi_ddiv>
 802064e:	4604      	mov	r4, r0
 8020650:	460d      	mov	r5, r1
 8020652:	e764      	b.n	802051e <atan+0xce>
 8020654:	4b49      	ldr	r3, [pc, #292]	; (802077c <atan+0x32c>)
 8020656:	429e      	cmp	r6, r3
 8020658:	da1d      	bge.n	8020696 <atan+0x246>
 802065a:	ee10 0a10 	vmov	r0, s0
 802065e:	2200      	movs	r2, #0
 8020660:	4b47      	ldr	r3, [pc, #284]	; (8020780 <atan+0x330>)
 8020662:	4629      	mov	r1, r5
 8020664:	f7df fe02 	bl	800026c <__aeabi_dsub>
 8020668:	2200      	movs	r2, #0
 802066a:	4606      	mov	r6, r0
 802066c:	460f      	mov	r7, r1
 802066e:	4b44      	ldr	r3, [pc, #272]	; (8020780 <atan+0x330>)
 8020670:	4620      	mov	r0, r4
 8020672:	4629      	mov	r1, r5
 8020674:	f04f 0a02 	mov.w	sl, #2
 8020678:	f7df ffb0 	bl	80005dc <__aeabi_dmul>
 802067c:	2200      	movs	r2, #0
 802067e:	4b3d      	ldr	r3, [pc, #244]	; (8020774 <atan+0x324>)
 8020680:	f7df fdf6 	bl	8000270 <__adddf3>
 8020684:	4602      	mov	r2, r0
 8020686:	460b      	mov	r3, r1
 8020688:	4630      	mov	r0, r6
 802068a:	4639      	mov	r1, r7
 802068c:	f7e0 f8d0 	bl	8000830 <__aeabi_ddiv>
 8020690:	4604      	mov	r4, r0
 8020692:	460d      	mov	r5, r1
 8020694:	e743      	b.n	802051e <atan+0xce>
 8020696:	462b      	mov	r3, r5
 8020698:	ee10 2a10 	vmov	r2, s0
 802069c:	2000      	movs	r0, #0
 802069e:	4939      	ldr	r1, [pc, #228]	; (8020784 <atan+0x334>)
 80206a0:	f7e0 f8c6 	bl	8000830 <__aeabi_ddiv>
 80206a4:	f04f 0a03 	mov.w	sl, #3
 80206a8:	4604      	mov	r4, r0
 80206aa:	460d      	mov	r5, r1
 80206ac:	e737      	b.n	802051e <atan+0xce>
 80206ae:	4b36      	ldr	r3, [pc, #216]	; (8020788 <atan+0x338>)
 80206b0:	4e36      	ldr	r6, [pc, #216]	; (802078c <atan+0x33c>)
 80206b2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80206b6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80206ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206be:	f7df fdd5 	bl	800026c <__aeabi_dsub>
 80206c2:	4622      	mov	r2, r4
 80206c4:	462b      	mov	r3, r5
 80206c6:	f7df fdd1 	bl	800026c <__aeabi_dsub>
 80206ca:	4602      	mov	r2, r0
 80206cc:	460b      	mov	r3, r1
 80206ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 80206d2:	f7df fdcb 	bl	800026c <__aeabi_dsub>
 80206d6:	f1bb 0f00 	cmp.w	fp, #0
 80206da:	4604      	mov	r4, r0
 80206dc:	460d      	mov	r5, r1
 80206de:	f6bf aed6 	bge.w	802048e <atan+0x3e>
 80206e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80206e6:	461d      	mov	r5, r3
 80206e8:	e6d1      	b.n	802048e <atan+0x3e>
 80206ea:	a51d      	add	r5, pc, #116	; (adr r5, 8020760 <atan+0x310>)
 80206ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80206f0:	e6cd      	b.n	802048e <atan+0x3e>
 80206f2:	bf00      	nop
 80206f4:	f3af 8000 	nop.w
 80206f8:	54442d18 	.word	0x54442d18
 80206fc:	bff921fb 	.word	0xbff921fb
 8020700:	8800759c 	.word	0x8800759c
 8020704:	7e37e43c 	.word	0x7e37e43c
 8020708:	e322da11 	.word	0xe322da11
 802070c:	3f90ad3a 	.word	0x3f90ad3a
 8020710:	24760deb 	.word	0x24760deb
 8020714:	3fa97b4b 	.word	0x3fa97b4b
 8020718:	a0d03d51 	.word	0xa0d03d51
 802071c:	3fb10d66 	.word	0x3fb10d66
 8020720:	c54c206e 	.word	0xc54c206e
 8020724:	3fb745cd 	.word	0x3fb745cd
 8020728:	920083ff 	.word	0x920083ff
 802072c:	3fc24924 	.word	0x3fc24924
 8020730:	5555550d 	.word	0x5555550d
 8020734:	3fd55555 	.word	0x3fd55555
 8020738:	2c6a6c2f 	.word	0x2c6a6c2f
 802073c:	bfa2b444 	.word	0xbfa2b444
 8020740:	52defd9a 	.word	0x52defd9a
 8020744:	3fadde2d 	.word	0x3fadde2d
 8020748:	af749a6d 	.word	0xaf749a6d
 802074c:	3fb3b0f2 	.word	0x3fb3b0f2
 8020750:	fe231671 	.word	0xfe231671
 8020754:	3fbc71c6 	.word	0x3fbc71c6
 8020758:	9998ebc4 	.word	0x9998ebc4
 802075c:	3fc99999 	.word	0x3fc99999
 8020760:	54442d18 	.word	0x54442d18
 8020764:	3ff921fb 	.word	0x3ff921fb
 8020768:	440fffff 	.word	0x440fffff
 802076c:	7ff00000 	.word	0x7ff00000
 8020770:	3fdbffff 	.word	0x3fdbffff
 8020774:	3ff00000 	.word	0x3ff00000
 8020778:	3ff2ffff 	.word	0x3ff2ffff
 802077c:	40038000 	.word	0x40038000
 8020780:	3ff80000 	.word	0x3ff80000
 8020784:	bff00000 	.word	0xbff00000
 8020788:	080232b0 	.word	0x080232b0
 802078c:	08023290 	.word	0x08023290

08020790 <fabs>:
 8020790:	ec51 0b10 	vmov	r0, r1, d0
 8020794:	ee10 2a10 	vmov	r2, s0
 8020798:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802079c:	ec43 2b10 	vmov	d0, r2, r3
 80207a0:	4770      	bx	lr
	...

080207a4 <__kernel_cosf>:
 80207a4:	ee10 3a10 	vmov	r3, s0
 80207a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80207ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80207b0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80207b4:	da05      	bge.n	80207c2 <__kernel_cosf+0x1e>
 80207b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80207ba:	ee17 2a90 	vmov	r2, s15
 80207be:	2a00      	cmp	r2, #0
 80207c0:	d03b      	beq.n	802083a <__kernel_cosf+0x96>
 80207c2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80207c6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8020840 <__kernel_cosf+0x9c>
 80207ca:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8020844 <__kernel_cosf+0xa0>
 80207ce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80207d2:	4a1d      	ldr	r2, [pc, #116]	; (8020848 <__kernel_cosf+0xa4>)
 80207d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80207d8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 802084c <__kernel_cosf+0xa8>
 80207dc:	4293      	cmp	r3, r2
 80207de:	eee6 7a07 	vfma.f32	s15, s12, s14
 80207e2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8020850 <__kernel_cosf+0xac>
 80207e6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80207ea:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8020854 <__kernel_cosf+0xb0>
 80207ee:	eee6 7a07 	vfma.f32	s15, s12, s14
 80207f2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8020858 <__kernel_cosf+0xb4>
 80207f6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80207fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80207fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020802:	ee26 6a07 	vmul.f32	s12, s12, s14
 8020806:	eee7 0a06 	vfma.f32	s1, s14, s12
 802080a:	dc04      	bgt.n	8020816 <__kernel_cosf+0x72>
 802080c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020810:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8020814:	4770      	bx	lr
 8020816:	4a11      	ldr	r2, [pc, #68]	; (802085c <__kernel_cosf+0xb8>)
 8020818:	4293      	cmp	r3, r2
 802081a:	bfd6      	itet	le
 802081c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8020820:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8020824:	ee07 3a10 	vmovle	s14, r3
 8020828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802082c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8020830:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8020834:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020838:	4770      	bx	lr
 802083a:	eeb0 0a66 	vmov.f32	s0, s13
 802083e:	4770      	bx	lr
 8020840:	ad47d74e 	.word	0xad47d74e
 8020844:	310f74f6 	.word	0x310f74f6
 8020848:	3e999999 	.word	0x3e999999
 802084c:	b493f27c 	.word	0xb493f27c
 8020850:	37d00d01 	.word	0x37d00d01
 8020854:	bab60b61 	.word	0xbab60b61
 8020858:	3d2aaaab 	.word	0x3d2aaaab
 802085c:	3f480000 	.word	0x3f480000

08020860 <__kernel_sinf>:
 8020860:	ee10 3a10 	vmov	r3, s0
 8020864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020868:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802086c:	da04      	bge.n	8020878 <__kernel_sinf+0x18>
 802086e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8020872:	ee17 3a90 	vmov	r3, s15
 8020876:	b35b      	cbz	r3, 80208d0 <__kernel_sinf+0x70>
 8020878:	ee20 7a00 	vmul.f32	s14, s0, s0
 802087c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80208d4 <__kernel_sinf+0x74>
 8020880:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80208d8 <__kernel_sinf+0x78>
 8020884:	eea7 6a27 	vfma.f32	s12, s14, s15
 8020888:	eddf 7a14 	vldr	s15, [pc, #80]	; 80208dc <__kernel_sinf+0x7c>
 802088c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8020890:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020894:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80208e0 <__kernel_sinf+0x80>
 8020898:	eea7 6a87 	vfma.f32	s12, s15, s14
 802089c:	eddf 7a11 	vldr	s15, [pc, #68]	; 80208e4 <__kernel_sinf+0x84>
 80208a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80208a4:	b930      	cbnz	r0, 80208b4 <__kernel_sinf+0x54>
 80208a6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80208e8 <__kernel_sinf+0x88>
 80208aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80208ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80208b2:	4770      	bx	lr
 80208b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80208b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80208bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80208c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80208c4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80208ec <__kernel_sinf+0x8c>
 80208c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80208cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80208d0:	4770      	bx	lr
 80208d2:	bf00      	nop
 80208d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80208d8:	b2d72f34 	.word	0xb2d72f34
 80208dc:	3638ef1b 	.word	0x3638ef1b
 80208e0:	b9500d01 	.word	0xb9500d01
 80208e4:	3c088889 	.word	0x3c088889
 80208e8:	be2aaaab 	.word	0xbe2aaaab
 80208ec:	3e2aaaab 	.word	0x3e2aaaab

080208f0 <__ieee754_atan2f>:
 80208f0:	ee10 2a90 	vmov	r2, s1
 80208f4:	eef0 7a40 	vmov.f32	s15, s0
 80208f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80208fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8020900:	b510      	push	{r4, lr}
 8020902:	dc06      	bgt.n	8020912 <__ieee754_atan2f+0x22>
 8020904:	ee10 0a10 	vmov	r0, s0
 8020908:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 802090c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020910:	dd04      	ble.n	802091c <__ieee754_atan2f+0x2c>
 8020912:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8020916:	eeb0 0a67 	vmov.f32	s0, s15
 802091a:	bd10      	pop	{r4, pc}
 802091c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8020920:	d103      	bne.n	802092a <__ieee754_atan2f+0x3a>
 8020922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020926:	f000 b9ab 	b.w	8020c80 <atanf>
 802092a:	1794      	asrs	r4, r2, #30
 802092c:	f004 0402 	and.w	r4, r4, #2
 8020930:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8020934:	b93b      	cbnz	r3, 8020946 <__ieee754_atan2f+0x56>
 8020936:	2c02      	cmp	r4, #2
 8020938:	d05c      	beq.n	80209f4 <__ieee754_atan2f+0x104>
 802093a:	2c03      	cmp	r4, #3
 802093c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8020a08 <__ieee754_atan2f+0x118>
 8020940:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8020944:	e7e7      	b.n	8020916 <__ieee754_atan2f+0x26>
 8020946:	b939      	cbnz	r1, 8020958 <__ieee754_atan2f+0x68>
 8020948:	2800      	cmp	r0, #0
 802094a:	eddf 7a30 	vldr	s15, [pc, #192]	; 8020a0c <__ieee754_atan2f+0x11c>
 802094e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8020a10 <__ieee754_atan2f+0x120>
 8020952:	fe67 7a87 	vselge.f32	s15, s15, s14
 8020956:	e7de      	b.n	8020916 <__ieee754_atan2f+0x26>
 8020958:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802095c:	d110      	bne.n	8020980 <__ieee754_atan2f+0x90>
 802095e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020962:	f104 34ff 	add.w	r4, r4, #4294967295
 8020966:	d107      	bne.n	8020978 <__ieee754_atan2f+0x88>
 8020968:	2c02      	cmp	r4, #2
 802096a:	d846      	bhi.n	80209fa <__ieee754_atan2f+0x10a>
 802096c:	4b29      	ldr	r3, [pc, #164]	; (8020a14 <__ieee754_atan2f+0x124>)
 802096e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8020972:	edd3 7a00 	vldr	s15, [r3]
 8020976:	e7ce      	b.n	8020916 <__ieee754_atan2f+0x26>
 8020978:	2c02      	cmp	r4, #2
 802097a:	d841      	bhi.n	8020a00 <__ieee754_atan2f+0x110>
 802097c:	4b26      	ldr	r3, [pc, #152]	; (8020a18 <__ieee754_atan2f+0x128>)
 802097e:	e7f6      	b.n	802096e <__ieee754_atan2f+0x7e>
 8020980:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020984:	d0e0      	beq.n	8020948 <__ieee754_atan2f+0x58>
 8020986:	1a5b      	subs	r3, r3, r1
 8020988:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 802098c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8020990:	da1a      	bge.n	80209c8 <__ieee754_atan2f+0xd8>
 8020992:	2a00      	cmp	r2, #0
 8020994:	da01      	bge.n	802099a <__ieee754_atan2f+0xaa>
 8020996:	313c      	adds	r1, #60	; 0x3c
 8020998:	db19      	blt.n	80209ce <__ieee754_atan2f+0xde>
 802099a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802099e:	f000 fa43 	bl	8020e28 <fabsf>
 80209a2:	f000 f96d 	bl	8020c80 <atanf>
 80209a6:	eef0 7a40 	vmov.f32	s15, s0
 80209aa:	2c01      	cmp	r4, #1
 80209ac:	d012      	beq.n	80209d4 <__ieee754_atan2f+0xe4>
 80209ae:	2c02      	cmp	r4, #2
 80209b0:	d017      	beq.n	80209e2 <__ieee754_atan2f+0xf2>
 80209b2:	2c00      	cmp	r4, #0
 80209b4:	d0af      	beq.n	8020916 <__ieee754_atan2f+0x26>
 80209b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8020a1c <__ieee754_atan2f+0x12c>
 80209ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80209be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8020a20 <__ieee754_atan2f+0x130>
 80209c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80209c6:	e7a6      	b.n	8020916 <__ieee754_atan2f+0x26>
 80209c8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8020a0c <__ieee754_atan2f+0x11c>
 80209cc:	e7ed      	b.n	80209aa <__ieee754_atan2f+0xba>
 80209ce:	eddf 7a15 	vldr	s15, [pc, #84]	; 8020a24 <__ieee754_atan2f+0x134>
 80209d2:	e7ea      	b.n	80209aa <__ieee754_atan2f+0xba>
 80209d4:	ee17 3a90 	vmov	r3, s15
 80209d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80209dc:	ee07 3a90 	vmov	s15, r3
 80209e0:	e799      	b.n	8020916 <__ieee754_atan2f+0x26>
 80209e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8020a1c <__ieee754_atan2f+0x12c>
 80209e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80209ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8020a20 <__ieee754_atan2f+0x130>
 80209ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80209f2:	e790      	b.n	8020916 <__ieee754_atan2f+0x26>
 80209f4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8020a20 <__ieee754_atan2f+0x130>
 80209f8:	e78d      	b.n	8020916 <__ieee754_atan2f+0x26>
 80209fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8020a28 <__ieee754_atan2f+0x138>
 80209fe:	e78a      	b.n	8020916 <__ieee754_atan2f+0x26>
 8020a00:	eddf 7a08 	vldr	s15, [pc, #32]	; 8020a24 <__ieee754_atan2f+0x134>
 8020a04:	e787      	b.n	8020916 <__ieee754_atan2f+0x26>
 8020a06:	bf00      	nop
 8020a08:	c0490fdb 	.word	0xc0490fdb
 8020a0c:	3fc90fdb 	.word	0x3fc90fdb
 8020a10:	bfc90fdb 	.word	0xbfc90fdb
 8020a14:	080232d0 	.word	0x080232d0
 8020a18:	080232dc 	.word	0x080232dc
 8020a1c:	33bbbd2e 	.word	0x33bbbd2e
 8020a20:	40490fdb 	.word	0x40490fdb
 8020a24:	00000000 	.word	0x00000000
 8020a28:	3f490fdb 	.word	0x3f490fdb

08020a2c <__ieee754_rem_pio2f>:
 8020a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a2e:	ee10 6a10 	vmov	r6, s0
 8020a32:	4b85      	ldr	r3, [pc, #532]	; (8020c48 <__ieee754_rem_pio2f+0x21c>)
 8020a34:	b087      	sub	sp, #28
 8020a36:	4604      	mov	r4, r0
 8020a38:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8020a3c:	429d      	cmp	r5, r3
 8020a3e:	dc05      	bgt.n	8020a4c <__ieee754_rem_pio2f+0x20>
 8020a40:	2300      	movs	r3, #0
 8020a42:	ed80 0a00 	vstr	s0, [r0]
 8020a46:	6043      	str	r3, [r0, #4]
 8020a48:	2000      	movs	r0, #0
 8020a4a:	e020      	b.n	8020a8e <__ieee754_rem_pio2f+0x62>
 8020a4c:	4b7f      	ldr	r3, [pc, #508]	; (8020c4c <__ieee754_rem_pio2f+0x220>)
 8020a4e:	429d      	cmp	r5, r3
 8020a50:	dc38      	bgt.n	8020ac4 <__ieee754_rem_pio2f+0x98>
 8020a52:	2e00      	cmp	r6, #0
 8020a54:	f025 050f 	bic.w	r5, r5, #15
 8020a58:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8020c50 <__ieee754_rem_pio2f+0x224>
 8020a5c:	4b7d      	ldr	r3, [pc, #500]	; (8020c54 <__ieee754_rem_pio2f+0x228>)
 8020a5e:	dd18      	ble.n	8020a92 <__ieee754_rem_pio2f+0x66>
 8020a60:	429d      	cmp	r5, r3
 8020a62:	ee70 7a47 	vsub.f32	s15, s0, s14
 8020a66:	bf09      	itett	eq
 8020a68:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8020c58 <__ieee754_rem_pio2f+0x22c>
 8020a6c:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8020c5c <__ieee754_rem_pio2f+0x230>
 8020a70:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8020a74:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 8020c60 <__ieee754_rem_pio2f+0x234>
 8020a78:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8020a7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020a80:	edc0 6a00 	vstr	s13, [r0]
 8020a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020a88:	edc0 7a01 	vstr	s15, [r0, #4]
 8020a8c:	2001      	movs	r0, #1
 8020a8e:	b007      	add	sp, #28
 8020a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a92:	429d      	cmp	r5, r3
 8020a94:	ee70 7a07 	vadd.f32	s15, s0, s14
 8020a98:	bf09      	itett	eq
 8020a9a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8020c58 <__ieee754_rem_pio2f+0x22c>
 8020a9e:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8020c5c <__ieee754_rem_pio2f+0x230>
 8020aa2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8020aa6:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 8020c60 <__ieee754_rem_pio2f+0x234>
 8020aaa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8020aae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020ab2:	edc0 6a00 	vstr	s13, [r0]
 8020ab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020aba:	edc0 7a01 	vstr	s15, [r0, #4]
 8020abe:	f04f 30ff 	mov.w	r0, #4294967295
 8020ac2:	e7e4      	b.n	8020a8e <__ieee754_rem_pio2f+0x62>
 8020ac4:	4b67      	ldr	r3, [pc, #412]	; (8020c64 <__ieee754_rem_pio2f+0x238>)
 8020ac6:	429d      	cmp	r5, r3
 8020ac8:	dc70      	bgt.n	8020bac <__ieee754_rem_pio2f+0x180>
 8020aca:	f000 f9ad 	bl	8020e28 <fabsf>
 8020ace:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8020ad2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8020c68 <__ieee754_rem_pio2f+0x23c>
 8020ad6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8020ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020ae2:	ee17 0a90 	vmov	r0, s15
 8020ae6:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8020c50 <__ieee754_rem_pio2f+0x224>
 8020aea:	281f      	cmp	r0, #31
 8020aec:	eea7 0a67 	vfms.f32	s0, s14, s15
 8020af0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8020c5c <__ieee754_rem_pio2f+0x230>
 8020af4:	eeb1 6a47 	vneg.f32	s12, s14
 8020af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8020afc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020b00:	ee16 2a90 	vmov	r2, s13
 8020b04:	dc1c      	bgt.n	8020b40 <__ieee754_rem_pio2f+0x114>
 8020b06:	1e47      	subs	r7, r0, #1
 8020b08:	4958      	ldr	r1, [pc, #352]	; (8020c6c <__ieee754_rem_pio2f+0x240>)
 8020b0a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8020b0e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8020b12:	428b      	cmp	r3, r1
 8020b14:	d014      	beq.n	8020b40 <__ieee754_rem_pio2f+0x114>
 8020b16:	6022      	str	r2, [r4, #0]
 8020b18:	ed94 7a00 	vldr	s14, [r4]
 8020b1c:	2e00      	cmp	r6, #0
 8020b1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8020b22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020b26:	ed84 0a01 	vstr	s0, [r4, #4]
 8020b2a:	dab0      	bge.n	8020a8e <__ieee754_rem_pio2f+0x62>
 8020b2c:	eeb1 7a47 	vneg.f32	s14, s14
 8020b30:	eeb1 0a40 	vneg.f32	s0, s0
 8020b34:	ed84 7a00 	vstr	s14, [r4]
 8020b38:	ed84 0a01 	vstr	s0, [r4, #4]
 8020b3c:	4240      	negs	r0, r0
 8020b3e:	e7a6      	b.n	8020a8e <__ieee754_rem_pio2f+0x62>
 8020b40:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8020b44:	15eb      	asrs	r3, r5, #23
 8020b46:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8020b4a:	2908      	cmp	r1, #8
 8020b4c:	dde3      	ble.n	8020b16 <__ieee754_rem_pio2f+0xea>
 8020b4e:	eef0 6a40 	vmov.f32	s13, s0
 8020b52:	eddf 5a41 	vldr	s11, [pc, #260]	; 8020c58 <__ieee754_rem_pio2f+0x22c>
 8020b56:	eee6 6a25 	vfma.f32	s13, s12, s11
 8020b5a:	ee70 7a66 	vsub.f32	s15, s0, s13
 8020b5e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8020b62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8020c60 <__ieee754_rem_pio2f+0x234>
 8020b66:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8020b6a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8020b6e:	ee15 2a90 	vmov	r2, s11
 8020b72:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8020b76:	1a5b      	subs	r3, r3, r1
 8020b78:	2b19      	cmp	r3, #25
 8020b7a:	dc04      	bgt.n	8020b86 <__ieee754_rem_pio2f+0x15a>
 8020b7c:	eeb0 0a66 	vmov.f32	s0, s13
 8020b80:	edc4 5a00 	vstr	s11, [r4]
 8020b84:	e7c8      	b.n	8020b18 <__ieee754_rem_pio2f+0xec>
 8020b86:	eeb0 0a66 	vmov.f32	s0, s13
 8020b8a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8020c70 <__ieee754_rem_pio2f+0x244>
 8020b8e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8020b92:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8020b96:	eddf 6a37 	vldr	s13, [pc, #220]	; 8020c74 <__ieee754_rem_pio2f+0x248>
 8020b9a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8020b9e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8020ba2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020ba6:	ed84 7a00 	vstr	s14, [r4]
 8020baa:	e7b5      	b.n	8020b18 <__ieee754_rem_pio2f+0xec>
 8020bac:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8020bb0:	db06      	blt.n	8020bc0 <__ieee754_rem_pio2f+0x194>
 8020bb2:	ee70 7a40 	vsub.f32	s15, s0, s0
 8020bb6:	edc0 7a01 	vstr	s15, [r0, #4]
 8020bba:	edc0 7a00 	vstr	s15, [r0]
 8020bbe:	e743      	b.n	8020a48 <__ieee754_rem_pio2f+0x1c>
 8020bc0:	15ea      	asrs	r2, r5, #23
 8020bc2:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8020c78 <__ieee754_rem_pio2f+0x24c>
 8020bc6:	3a86      	subs	r2, #134	; 0x86
 8020bc8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8020bcc:	ee07 3a90 	vmov	s15, r3
 8020bd0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8020bd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020bdc:	ed8d 7a03 	vstr	s14, [sp, #12]
 8020be0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020be4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8020be8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020bf0:	ed8d 7a04 	vstr	s14, [sp, #16]
 8020bf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020bf8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020bfc:	edcd 7a05 	vstr	s15, [sp, #20]
 8020c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c04:	d11e      	bne.n	8020c44 <__ieee754_rem_pio2f+0x218>
 8020c06:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8020c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c0e:	bf14      	ite	ne
 8020c10:	2302      	movne	r3, #2
 8020c12:	2301      	moveq	r3, #1
 8020c14:	4919      	ldr	r1, [pc, #100]	; (8020c7c <__ieee754_rem_pio2f+0x250>)
 8020c16:	a803      	add	r0, sp, #12
 8020c18:	9101      	str	r1, [sp, #4]
 8020c1a:	2102      	movs	r1, #2
 8020c1c:	9100      	str	r1, [sp, #0]
 8020c1e:	4621      	mov	r1, r4
 8020c20:	f000 f9b8 	bl	8020f94 <__kernel_rem_pio2f>
 8020c24:	2e00      	cmp	r6, #0
 8020c26:	f6bf af32 	bge.w	8020a8e <__ieee754_rem_pio2f+0x62>
 8020c2a:	edd4 7a00 	vldr	s15, [r4]
 8020c2e:	eef1 7a67 	vneg.f32	s15, s15
 8020c32:	edc4 7a00 	vstr	s15, [r4]
 8020c36:	edd4 7a01 	vldr	s15, [r4, #4]
 8020c3a:	eef1 7a67 	vneg.f32	s15, s15
 8020c3e:	edc4 7a01 	vstr	s15, [r4, #4]
 8020c42:	e77b      	b.n	8020b3c <__ieee754_rem_pio2f+0x110>
 8020c44:	2303      	movs	r3, #3
 8020c46:	e7e5      	b.n	8020c14 <__ieee754_rem_pio2f+0x1e8>
 8020c48:	3f490fd8 	.word	0x3f490fd8
 8020c4c:	4016cbe3 	.word	0x4016cbe3
 8020c50:	3fc90f80 	.word	0x3fc90f80
 8020c54:	3fc90fd0 	.word	0x3fc90fd0
 8020c58:	37354400 	.word	0x37354400
 8020c5c:	37354443 	.word	0x37354443
 8020c60:	2e85a308 	.word	0x2e85a308
 8020c64:	43490f80 	.word	0x43490f80
 8020c68:	3f22f984 	.word	0x3f22f984
 8020c6c:	080232e8 	.word	0x080232e8
 8020c70:	2e85a300 	.word	0x2e85a300
 8020c74:	248d3132 	.word	0x248d3132
 8020c78:	43800000 	.word	0x43800000
 8020c7c:	08023368 	.word	0x08023368

08020c80 <atanf>:
 8020c80:	b538      	push	{r3, r4, r5, lr}
 8020c82:	ee10 5a10 	vmov	r5, s0
 8020c86:	eef0 7a40 	vmov.f32	s15, s0
 8020c8a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8020c8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8020c92:	db0f      	blt.n	8020cb4 <atanf+0x34>
 8020c94:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8020c98:	dd04      	ble.n	8020ca4 <atanf+0x24>
 8020c9a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8020c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8020ca2:	bd38      	pop	{r3, r4, r5, pc}
 8020ca4:	2d00      	cmp	r5, #0
 8020ca6:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8020ddc <atanf+0x15c>
 8020caa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8020de0 <atanf+0x160>
 8020cae:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8020cb2:	e7f4      	b.n	8020c9e <atanf+0x1e>
 8020cb4:	4b4b      	ldr	r3, [pc, #300]	; (8020de4 <atanf+0x164>)
 8020cb6:	429c      	cmp	r4, r3
 8020cb8:	dc10      	bgt.n	8020cdc <atanf+0x5c>
 8020cba:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8020cbe:	da0a      	bge.n	8020cd6 <atanf+0x56>
 8020cc0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8020de8 <atanf+0x168>
 8020cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020cc8:	ee30 7a07 	vadd.f32	s14, s0, s14
 8020ccc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cd4:	dce3      	bgt.n	8020c9e <atanf+0x1e>
 8020cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8020cda:	e013      	b.n	8020d04 <atanf+0x84>
 8020cdc:	f000 f8a4 	bl	8020e28 <fabsf>
 8020ce0:	4b42      	ldr	r3, [pc, #264]	; (8020dec <atanf+0x16c>)
 8020ce2:	429c      	cmp	r4, r3
 8020ce4:	dc4f      	bgt.n	8020d86 <atanf+0x106>
 8020ce6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8020cea:	429c      	cmp	r4, r3
 8020cec:	dc41      	bgt.n	8020d72 <atanf+0xf2>
 8020cee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8020cf8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8020cfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020d00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020d04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8020df0 <atanf+0x170>
 8020d08:	1c5a      	adds	r2, r3, #1
 8020d0a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8020df4 <atanf+0x174>
 8020d0e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8020df8 <atanf+0x178>
 8020d12:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8020d16:	ee66 6a06 	vmul.f32	s13, s12, s12
 8020d1a:	eee6 5a87 	vfma.f32	s11, s13, s14
 8020d1e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8020dfc <atanf+0x17c>
 8020d22:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020d26:	eddf 5a36 	vldr	s11, [pc, #216]	; 8020e00 <atanf+0x180>
 8020d2a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020d2e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8020e04 <atanf+0x184>
 8020d32:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8020e08 <atanf+0x188>
 8020d3a:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020d3e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8020e0c <atanf+0x18c>
 8020d42:	eea6 5a87 	vfma.f32	s10, s13, s14
 8020d46:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8020e10 <atanf+0x190>
 8020d4a:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020d4e:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8020e14 <atanf+0x194>
 8020d52:	eea7 5a26 	vfma.f32	s10, s14, s13
 8020d56:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8020e18 <atanf+0x198>
 8020d5a:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020d5e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020d62:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020d66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020d6a:	d121      	bne.n	8020db0 <atanf+0x130>
 8020d6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020d70:	e795      	b.n	8020c9e <atanf+0x1e>
 8020d72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8020d76:	2301      	movs	r3, #1
 8020d78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020d7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020d80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020d84:	e7be      	b.n	8020d04 <atanf+0x84>
 8020d86:	4b25      	ldr	r3, [pc, #148]	; (8020e1c <atanf+0x19c>)
 8020d88:	429c      	cmp	r4, r3
 8020d8a:	dc0b      	bgt.n	8020da4 <atanf+0x124>
 8020d8c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8020d90:	2302      	movs	r3, #2
 8020d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d96:	ee70 6a67 	vsub.f32	s13, s0, s15
 8020d9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8020d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020da2:	e7af      	b.n	8020d04 <atanf+0x84>
 8020da4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8020da8:	2303      	movs	r3, #3
 8020daa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020dae:	e7a9      	b.n	8020d04 <atanf+0x84>
 8020db0:	4a1b      	ldr	r2, [pc, #108]	; (8020e20 <atanf+0x1a0>)
 8020db2:	2d00      	cmp	r5, #0
 8020db4:	491b      	ldr	r1, [pc, #108]	; (8020e24 <atanf+0x1a4>)
 8020db6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020dba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020dbe:	edd3 6a00 	vldr	s13, [r3]
 8020dc2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8020dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020dca:	edd2 7a00 	vldr	s15, [r2]
 8020dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020dd2:	bfb8      	it	lt
 8020dd4:	eef1 7a67 	vneglt.f32	s15, s15
 8020dd8:	e761      	b.n	8020c9e <atanf+0x1e>
 8020dda:	bf00      	nop
 8020ddc:	3fc90fdb 	.word	0x3fc90fdb
 8020de0:	bfc90fdb 	.word	0xbfc90fdb
 8020de4:	3edfffff 	.word	0x3edfffff
 8020de8:	7149f2ca 	.word	0x7149f2ca
 8020dec:	3f97ffff 	.word	0x3f97ffff
 8020df0:	3c8569d7 	.word	0x3c8569d7
 8020df4:	3d4bda59 	.word	0x3d4bda59
 8020df8:	bd6ef16b 	.word	0xbd6ef16b
 8020dfc:	3d886b35 	.word	0x3d886b35
 8020e00:	3dba2e6e 	.word	0x3dba2e6e
 8020e04:	3e124925 	.word	0x3e124925
 8020e08:	3eaaaaab 	.word	0x3eaaaaab
 8020e0c:	bd15a221 	.word	0xbd15a221
 8020e10:	bd9d8795 	.word	0xbd9d8795
 8020e14:	bde38e38 	.word	0xbde38e38
 8020e18:	be4ccccd 	.word	0xbe4ccccd
 8020e1c:	401bffff 	.word	0x401bffff
 8020e20:	08023680 	.word	0x08023680
 8020e24:	08023690 	.word	0x08023690

08020e28 <fabsf>:
 8020e28:	ee10 3a10 	vmov	r3, s0
 8020e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020e30:	ee00 3a10 	vmov	s0, r3
 8020e34:	4770      	bx	lr
	...

08020e38 <scalbn>:
 8020e38:	b570      	push	{r4, r5, r6, lr}
 8020e3a:	ec55 4b10 	vmov	r4, r5, d0
 8020e3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8020e42:	4606      	mov	r6, r0
 8020e44:	462b      	mov	r3, r5
 8020e46:	b999      	cbnz	r1, 8020e70 <scalbn+0x38>
 8020e48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8020e4c:	4323      	orrs	r3, r4
 8020e4e:	d03f      	beq.n	8020ed0 <scalbn+0x98>
 8020e50:	4b35      	ldr	r3, [pc, #212]	; (8020f28 <scalbn+0xf0>)
 8020e52:	4629      	mov	r1, r5
 8020e54:	2200      	movs	r2, #0
 8020e56:	ee10 0a10 	vmov	r0, s0
 8020e5a:	f7df fbbf 	bl	80005dc <__aeabi_dmul>
 8020e5e:	4b33      	ldr	r3, [pc, #204]	; (8020f2c <scalbn+0xf4>)
 8020e60:	4604      	mov	r4, r0
 8020e62:	460d      	mov	r5, r1
 8020e64:	429e      	cmp	r6, r3
 8020e66:	da10      	bge.n	8020e8a <scalbn+0x52>
 8020e68:	a327      	add	r3, pc, #156	; (adr r3, 8020f08 <scalbn+0xd0>)
 8020e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e6e:	e01f      	b.n	8020eb0 <scalbn+0x78>
 8020e70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8020e74:	4291      	cmp	r1, r2
 8020e76:	d10c      	bne.n	8020e92 <scalbn+0x5a>
 8020e78:	ee10 2a10 	vmov	r2, s0
 8020e7c:	4620      	mov	r0, r4
 8020e7e:	4629      	mov	r1, r5
 8020e80:	f7df f9f6 	bl	8000270 <__adddf3>
 8020e84:	4604      	mov	r4, r0
 8020e86:	460d      	mov	r5, r1
 8020e88:	e022      	b.n	8020ed0 <scalbn+0x98>
 8020e8a:	460b      	mov	r3, r1
 8020e8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8020e90:	3936      	subs	r1, #54	; 0x36
 8020e92:	f24c 3250 	movw	r2, #50000	; 0xc350
 8020e96:	4296      	cmp	r6, r2
 8020e98:	dd0d      	ble.n	8020eb6 <scalbn+0x7e>
 8020e9a:	2d00      	cmp	r5, #0
 8020e9c:	a11c      	add	r1, pc, #112	; (adr r1, 8020f10 <scalbn+0xd8>)
 8020e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ea2:	da02      	bge.n	8020eaa <scalbn+0x72>
 8020ea4:	a11c      	add	r1, pc, #112	; (adr r1, 8020f18 <scalbn+0xe0>)
 8020ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020eaa:	a319      	add	r3, pc, #100	; (adr r3, 8020f10 <scalbn+0xd8>)
 8020eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eb0:	f7df fb94 	bl	80005dc <__aeabi_dmul>
 8020eb4:	e7e6      	b.n	8020e84 <scalbn+0x4c>
 8020eb6:	1872      	adds	r2, r6, r1
 8020eb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8020ebc:	428a      	cmp	r2, r1
 8020ebe:	dcec      	bgt.n	8020e9a <scalbn+0x62>
 8020ec0:	2a00      	cmp	r2, #0
 8020ec2:	dd08      	ble.n	8020ed6 <scalbn+0x9e>
 8020ec4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020ec8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020ecc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8020ed0:	ec45 4b10 	vmov	d0, r4, r5
 8020ed4:	bd70      	pop	{r4, r5, r6, pc}
 8020ed6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8020eda:	da08      	bge.n	8020eee <scalbn+0xb6>
 8020edc:	2d00      	cmp	r5, #0
 8020ede:	a10a      	add	r1, pc, #40	; (adr r1, 8020f08 <scalbn+0xd0>)
 8020ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020ee4:	dac0      	bge.n	8020e68 <scalbn+0x30>
 8020ee6:	a10e      	add	r1, pc, #56	; (adr r1, 8020f20 <scalbn+0xe8>)
 8020ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020eec:	e7bc      	b.n	8020e68 <scalbn+0x30>
 8020eee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020ef2:	3236      	adds	r2, #54	; 0x36
 8020ef4:	4620      	mov	r0, r4
 8020ef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020efa:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8020efe:	2200      	movs	r2, #0
 8020f00:	4b0b      	ldr	r3, [pc, #44]	; (8020f30 <scalbn+0xf8>)
 8020f02:	e7d5      	b.n	8020eb0 <scalbn+0x78>
 8020f04:	f3af 8000 	nop.w
 8020f08:	c2f8f359 	.word	0xc2f8f359
 8020f0c:	01a56e1f 	.word	0x01a56e1f
 8020f10:	8800759c 	.word	0x8800759c
 8020f14:	7e37e43c 	.word	0x7e37e43c
 8020f18:	8800759c 	.word	0x8800759c
 8020f1c:	fe37e43c 	.word	0xfe37e43c
 8020f20:	c2f8f359 	.word	0xc2f8f359
 8020f24:	81a56e1f 	.word	0x81a56e1f
 8020f28:	43500000 	.word	0x43500000
 8020f2c:	ffff3cb0 	.word	0xffff3cb0
 8020f30:	3c900000 	.word	0x3c900000

08020f34 <with_errno>:
 8020f34:	b570      	push	{r4, r5, r6, lr}
 8020f36:	4604      	mov	r4, r0
 8020f38:	460d      	mov	r5, r1
 8020f3a:	4616      	mov	r6, r2
 8020f3c:	f000 fdf6 	bl	8021b2c <__errno>
 8020f40:	4629      	mov	r1, r5
 8020f42:	6006      	str	r6, [r0, #0]
 8020f44:	4620      	mov	r0, r4
 8020f46:	bd70      	pop	{r4, r5, r6, pc}

08020f48 <xflow>:
 8020f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020f4a:	4614      	mov	r4, r2
 8020f4c:	461d      	mov	r5, r3
 8020f4e:	b108      	cbz	r0, 8020f54 <xflow+0xc>
 8020f50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020f54:	4620      	mov	r0, r4
 8020f56:	4629      	mov	r1, r5
 8020f58:	e9cd 2300 	strd	r2, r3, [sp]
 8020f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020f60:	f7df fb3c 	bl	80005dc <__aeabi_dmul>
 8020f64:	2222      	movs	r2, #34	; 0x22
 8020f66:	b003      	add	sp, #12
 8020f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020f6c:	f7ff bfe2 	b.w	8020f34 <with_errno>

08020f70 <__math_uflow>:
 8020f70:	b508      	push	{r3, lr}
 8020f72:	2200      	movs	r2, #0
 8020f74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8020f78:	f7ff ffe6 	bl	8020f48 <xflow>
 8020f7c:	ec41 0b10 	vmov	d0, r0, r1
 8020f80:	bd08      	pop	{r3, pc}

08020f82 <__math_oflow>:
 8020f82:	b508      	push	{r3, lr}
 8020f84:	2200      	movs	r2, #0
 8020f86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8020f8a:	f7ff ffdd 	bl	8020f48 <xflow>
 8020f8e:	ec41 0b10 	vmov	d0, r0, r1
 8020f92:	bd08      	pop	{r3, pc}

08020f94 <__kernel_rem_pio2f>:
 8020f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f98:	ed2d 8b04 	vpush	{d8-d9}
 8020f9c:	b0d9      	sub	sp, #356	; 0x164
 8020f9e:	4688      	mov	r8, r1
 8020fa0:	49b9      	ldr	r1, [pc, #740]	; (8021288 <__kernel_rem_pio2f+0x2f4>)
 8020fa2:	9002      	str	r0, [sp, #8]
 8020fa4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8020fa6:	9301      	str	r3, [sp, #4]
 8020fa8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8020fac:	9901      	ldr	r1, [sp, #4]
 8020fae:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8020fb0:	f101 3bff 	add.w	fp, r1, #4294967295
 8020fb4:	1d11      	adds	r1, r2, #4
 8020fb6:	db25      	blt.n	8021004 <__kernel_rem_pio2f+0x70>
 8020fb8:	1ed0      	subs	r0, r2, #3
 8020fba:	bf48      	it	mi
 8020fbc:	1d10      	addmi	r0, r2, #4
 8020fbe:	10c0      	asrs	r0, r0, #3
 8020fc0:	1c45      	adds	r5, r0, #1
 8020fc2:	eba0 070b 	sub.w	r7, r0, fp
 8020fc6:	eb0a 0c0b 	add.w	ip, sl, fp
 8020fca:	ae1c      	add	r6, sp, #112	; 0x70
 8020fcc:	00e9      	lsls	r1, r5, #3
 8020fce:	2400      	movs	r4, #0
 8020fd0:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8020fd4:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8021298 <__kernel_rem_pio2f+0x304>
 8020fd8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8020fdc:	9103      	str	r1, [sp, #12]
 8020fde:	4564      	cmp	r4, ip
 8020fe0:	dd12      	ble.n	8021008 <__kernel_rem_pio2f+0x74>
 8020fe2:	ac1c      	add	r4, sp, #112	; 0x70
 8020fe4:	9901      	ldr	r1, [sp, #4]
 8020fe6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8020fea:	f04f 0c00 	mov.w	ip, #0
 8020fee:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020ff2:	45d4      	cmp	ip, sl
 8020ff4:	dc29      	bgt.n	802104a <__kernel_rem_pio2f+0xb6>
 8020ff6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8020ffa:	4627      	mov	r7, r4
 8020ffc:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8021298 <__kernel_rem_pio2f+0x304>
 8021000:	2600      	movs	r6, #0
 8021002:	e018      	b.n	8021036 <__kernel_rem_pio2f+0xa2>
 8021004:	2000      	movs	r0, #0
 8021006:	e7db      	b.n	8020fc0 <__kernel_rem_pio2f+0x2c>
 8021008:	42e7      	cmn	r7, r4
 802100a:	bf54      	ite	pl
 802100c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8021010:	eef0 7a47 	vmovmi.f32	s15, s14
 8021014:	f104 0401 	add.w	r4, r4, #1
 8021018:	bf5c      	itt	pl
 802101a:	ee07 1a90 	vmovpl	s15, r1
 802101e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8021022:	ece6 7a01 	vstmia	r6!, {s15}
 8021026:	e7da      	b.n	8020fde <__kernel_rem_pio2f+0x4a>
 8021028:	ecfe 6a01 	vldmia	lr!, {s13}
 802102c:	3601      	adds	r6, #1
 802102e:	ed97 7a00 	vldr	s14, [r7]
 8021032:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021036:	455e      	cmp	r6, fp
 8021038:	f1a7 0704 	sub.w	r7, r7, #4
 802103c:	ddf4      	ble.n	8021028 <__kernel_rem_pio2f+0x94>
 802103e:	f10c 0c01 	add.w	ip, ip, #1
 8021042:	3404      	adds	r4, #4
 8021044:	ece9 7a01 	vstmia	r9!, {s15}
 8021048:	e7d3      	b.n	8020ff2 <__kernel_rem_pio2f+0x5e>
 802104a:	a908      	add	r1, sp, #32
 802104c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8021050:	4656      	mov	r6, sl
 8021052:	eddf 8a90 	vldr	s17, [pc, #576]	; 8021294 <__kernel_rem_pio2f+0x300>
 8021056:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802105a:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8021290 <__kernel_rem_pio2f+0x2fc>
 802105e:	9304      	str	r3, [sp, #16]
 8021060:	9105      	str	r1, [sp, #20]
 8021062:	00b3      	lsls	r3, r6, #2
 8021064:	ac08      	add	r4, sp, #32
 8021066:	4637      	mov	r7, r6
 8021068:	9306      	str	r3, [sp, #24]
 802106a:	ab58      	add	r3, sp, #352	; 0x160
 802106c:	46a4      	mov	ip, r4
 802106e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8021072:	ab44      	add	r3, sp, #272	; 0x110
 8021074:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8021078:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 802107c:	2f00      	cmp	r7, #0
 802107e:	f1a0 0004 	sub.w	r0, r0, #4
 8021082:	dc4a      	bgt.n	802111a <__kernel_rem_pio2f+0x186>
 8021084:	4628      	mov	r0, r5
 8021086:	9207      	str	r2, [sp, #28]
 8021088:	f000 f9f8 	bl	802147c <scalbnf>
 802108c:	eeb0 8a40 	vmov.f32	s16, s0
 8021090:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8021094:	ee28 0a00 	vmul.f32	s0, s16, s0
 8021098:	f000 fa54 	bl	8021544 <floorf>
 802109c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80210a0:	2d00      	cmp	r5, #0
 80210a2:	9a07      	ldr	r2, [sp, #28]
 80210a4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80210a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80210ac:	ee17 9a90 	vmov	r9, s15
 80210b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80210b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80210b8:	dd41      	ble.n	802113e <__kernel_rem_pio2f+0x1aa>
 80210ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80210be:	ab08      	add	r3, sp, #32
 80210c0:	f1c5 0e08 	rsb	lr, r5, #8
 80210c4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80210c8:	fa47 f00e 	asr.w	r0, r7, lr
 80210cc:	4481      	add	r9, r0
 80210ce:	fa00 f00e 	lsl.w	r0, r0, lr
 80210d2:	1a3f      	subs	r7, r7, r0
 80210d4:	f1c5 0007 	rsb	r0, r5, #7
 80210d8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80210dc:	4107      	asrs	r7, r0
 80210de:	2f00      	cmp	r7, #0
 80210e0:	dd3c      	ble.n	802115c <__kernel_rem_pio2f+0x1c8>
 80210e2:	f04f 0e00 	mov.w	lr, #0
 80210e6:	f109 0901 	add.w	r9, r9, #1
 80210ea:	4671      	mov	r1, lr
 80210ec:	4576      	cmp	r6, lr
 80210ee:	dc67      	bgt.n	80211c0 <__kernel_rem_pio2f+0x22c>
 80210f0:	2d00      	cmp	r5, #0
 80210f2:	dd03      	ble.n	80210fc <__kernel_rem_pio2f+0x168>
 80210f4:	2d01      	cmp	r5, #1
 80210f6:	d074      	beq.n	80211e2 <__kernel_rem_pio2f+0x24e>
 80210f8:	2d02      	cmp	r5, #2
 80210fa:	d07b      	beq.n	80211f4 <__kernel_rem_pio2f+0x260>
 80210fc:	2f02      	cmp	r7, #2
 80210fe:	d12d      	bne.n	802115c <__kernel_rem_pio2f+0x1c8>
 8021100:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021104:	ee30 8a48 	vsub.f32	s16, s0, s16
 8021108:	b341      	cbz	r1, 802115c <__kernel_rem_pio2f+0x1c8>
 802110a:	4628      	mov	r0, r5
 802110c:	9207      	str	r2, [sp, #28]
 802110e:	f000 f9b5 	bl	802147c <scalbnf>
 8021112:	9a07      	ldr	r2, [sp, #28]
 8021114:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021118:	e020      	b.n	802115c <__kernel_rem_pio2f+0x1c8>
 802111a:	ee60 7a28 	vmul.f32	s15, s0, s17
 802111e:	3f01      	subs	r7, #1
 8021120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021128:	eea7 0ac9 	vfms.f32	s0, s15, s18
 802112c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021130:	ecac 0a01 	vstmia	ip!, {s0}
 8021134:	ed90 0a00 	vldr	s0, [r0]
 8021138:	ee37 0a80 	vadd.f32	s0, s15, s0
 802113c:	e79e      	b.n	802107c <__kernel_rem_pio2f+0xe8>
 802113e:	d105      	bne.n	802114c <__kernel_rem_pio2f+0x1b8>
 8021140:	1e70      	subs	r0, r6, #1
 8021142:	ab08      	add	r3, sp, #32
 8021144:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8021148:	11ff      	asrs	r7, r7, #7
 802114a:	e7c8      	b.n	80210de <__kernel_rem_pio2f+0x14a>
 802114c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021150:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021158:	da30      	bge.n	80211bc <__kernel_rem_pio2f+0x228>
 802115a:	2700      	movs	r7, #0
 802115c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021164:	f040 809a 	bne.w	802129c <__kernel_rem_pio2f+0x308>
 8021168:	1e74      	subs	r4, r6, #1
 802116a:	2100      	movs	r1, #0
 802116c:	46a4      	mov	ip, r4
 802116e:	45d4      	cmp	ip, sl
 8021170:	da47      	bge.n	8021202 <__kernel_rem_pio2f+0x26e>
 8021172:	2900      	cmp	r1, #0
 8021174:	d063      	beq.n	802123e <__kernel_rem_pio2f+0x2aa>
 8021176:	ab08      	add	r3, sp, #32
 8021178:	3d08      	subs	r5, #8
 802117a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 802117e:	2b00      	cmp	r3, #0
 8021180:	d07f      	beq.n	8021282 <__kernel_rem_pio2f+0x2ee>
 8021182:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021186:	4628      	mov	r0, r5
 8021188:	f000 f978 	bl	802147c <scalbnf>
 802118c:	1c63      	adds	r3, r4, #1
 802118e:	aa44      	add	r2, sp, #272	; 0x110
 8021190:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8021294 <__kernel_rem_pio2f+0x300>
 8021194:	0099      	lsls	r1, r3, #2
 8021196:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802119a:	4623      	mov	r3, r4
 802119c:	2b00      	cmp	r3, #0
 802119e:	f280 80ad 	bge.w	80212fc <__kernel_rem_pio2f+0x368>
 80211a2:	4623      	mov	r3, r4
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	f2c0 80cb 	blt.w	8021340 <__kernel_rem_pio2f+0x3ac>
 80211aa:	aa44      	add	r2, sp, #272	; 0x110
 80211ac:	4e37      	ldr	r6, [pc, #220]	; (802128c <__kernel_rem_pio2f+0x2f8>)
 80211ae:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8021298 <__kernel_rem_pio2f+0x304>
 80211b2:	2000      	movs	r0, #0
 80211b4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80211b8:	1ae2      	subs	r2, r4, r3
 80211ba:	e0b6      	b.n	802132a <__kernel_rem_pio2f+0x396>
 80211bc:	2702      	movs	r7, #2
 80211be:	e790      	b.n	80210e2 <__kernel_rem_pio2f+0x14e>
 80211c0:	6820      	ldr	r0, [r4, #0]
 80211c2:	b949      	cbnz	r1, 80211d8 <__kernel_rem_pio2f+0x244>
 80211c4:	b118      	cbz	r0, 80211ce <__kernel_rem_pio2f+0x23a>
 80211c6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80211ca:	6020      	str	r0, [r4, #0]
 80211cc:	2001      	movs	r0, #1
 80211ce:	f10e 0e01 	add.w	lr, lr, #1
 80211d2:	3404      	adds	r4, #4
 80211d4:	4601      	mov	r1, r0
 80211d6:	e789      	b.n	80210ec <__kernel_rem_pio2f+0x158>
 80211d8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80211dc:	6020      	str	r0, [r4, #0]
 80211de:	4608      	mov	r0, r1
 80211e0:	e7f5      	b.n	80211ce <__kernel_rem_pio2f+0x23a>
 80211e2:	1e74      	subs	r4, r6, #1
 80211e4:	ab08      	add	r3, sp, #32
 80211e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80211ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80211ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80211f2:	e783      	b.n	80210fc <__kernel_rem_pio2f+0x168>
 80211f4:	1e74      	subs	r4, r6, #1
 80211f6:	ab08      	add	r3, sp, #32
 80211f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80211fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8021200:	e7f5      	b.n	80211ee <__kernel_rem_pio2f+0x25a>
 8021202:	ab08      	add	r3, sp, #32
 8021204:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8021208:	f10c 3cff 	add.w	ip, ip, #4294967295
 802120c:	4301      	orrs	r1, r0
 802120e:	e7ae      	b.n	802116e <__kernel_rem_pio2f+0x1da>
 8021210:	3001      	adds	r0, #1
 8021212:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8021216:	2f00      	cmp	r7, #0
 8021218:	d0fa      	beq.n	8021210 <__kernel_rem_pio2f+0x27c>
 802121a:	9b06      	ldr	r3, [sp, #24]
 802121c:	f106 0c01 	add.w	ip, r6, #1
 8021220:	4430      	add	r0, r6
 8021222:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8021226:	eb0d 0403 	add.w	r4, sp, r3
 802122a:	9b01      	ldr	r3, [sp, #4]
 802122c:	18f7      	adds	r7, r6, r3
 802122e:	ab1c      	add	r3, sp, #112	; 0x70
 8021230:	3c4c      	subs	r4, #76	; 0x4c
 8021232:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021236:	4560      	cmp	r0, ip
 8021238:	da04      	bge.n	8021244 <__kernel_rem_pio2f+0x2b0>
 802123a:	4606      	mov	r6, r0
 802123c:	e711      	b.n	8021062 <__kernel_rem_pio2f+0xce>
 802123e:	9c05      	ldr	r4, [sp, #20]
 8021240:	2001      	movs	r0, #1
 8021242:	e7e6      	b.n	8021212 <__kernel_rem_pio2f+0x27e>
 8021244:	9b04      	ldr	r3, [sp, #16]
 8021246:	2600      	movs	r6, #0
 8021248:	f8dd e008 	ldr.w	lr, [sp, #8]
 802124c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021250:	ee07 3a90 	vmov	s15, r3
 8021254:	9306      	str	r3, [sp, #24]
 8021256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802125a:	ece7 7a01 	vstmia	r7!, {s15}
 802125e:	46b9      	mov	r9, r7
 8021260:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8021298 <__kernel_rem_pio2f+0x304>
 8021264:	455e      	cmp	r6, fp
 8021266:	dd04      	ble.n	8021272 <__kernel_rem_pio2f+0x2de>
 8021268:	f10c 0c01 	add.w	ip, ip, #1
 802126c:	ece4 7a01 	vstmia	r4!, {s15}
 8021270:	e7e1      	b.n	8021236 <__kernel_rem_pio2f+0x2a2>
 8021272:	ecfe 6a01 	vldmia	lr!, {s13}
 8021276:	3601      	adds	r6, #1
 8021278:	ed39 7a01 	vldmdb	r9!, {s14}
 802127c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021280:	e7f0      	b.n	8021264 <__kernel_rem_pio2f+0x2d0>
 8021282:	3c01      	subs	r4, #1
 8021284:	e777      	b.n	8021176 <__kernel_rem_pio2f+0x1e2>
 8021286:	bf00      	nop
 8021288:	080236cc 	.word	0x080236cc
 802128c:	080236a0 	.word	0x080236a0
 8021290:	43800000 	.word	0x43800000
 8021294:	3b800000 	.word	0x3b800000
 8021298:	00000000 	.word	0x00000000
 802129c:	9b03      	ldr	r3, [sp, #12]
 802129e:	eeb0 0a48 	vmov.f32	s0, s16
 80212a2:	1a98      	subs	r0, r3, r2
 80212a4:	f000 f8ea 	bl	802147c <scalbnf>
 80212a8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8021290 <__kernel_rem_pio2f+0x2fc>
 80212ac:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80212b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212b4:	db19      	blt.n	80212ea <__kernel_rem_pio2f+0x356>
 80212b6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021294 <__kernel_rem_pio2f+0x300>
 80212ba:	aa08      	add	r2, sp, #32
 80212bc:	1c74      	adds	r4, r6, #1
 80212be:	3508      	adds	r5, #8
 80212c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80212c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80212c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80212cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80212d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80212d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80212d8:	ee10 3a10 	vmov	r3, s0
 80212dc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80212e0:	ee17 3a90 	vmov	r3, s15
 80212e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80212e8:	e74b      	b.n	8021182 <__kernel_rem_pio2f+0x1ee>
 80212ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80212ee:	aa08      	add	r2, sp, #32
 80212f0:	4634      	mov	r4, r6
 80212f2:	ee10 3a10 	vmov	r3, s0
 80212f6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80212fa:	e742      	b.n	8021182 <__kernel_rem_pio2f+0x1ee>
 80212fc:	a808      	add	r0, sp, #32
 80212fe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8021302:	3b01      	subs	r3, #1
 8021304:	ee07 0a90 	vmov	s15, r0
 8021308:	9001      	str	r0, [sp, #4]
 802130a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802130e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021312:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021316:	ed62 7a01 	vstmdb	r2!, {s15}
 802131a:	e73f      	b.n	802119c <__kernel_rem_pio2f+0x208>
 802131c:	ecf6 6a01 	vldmia	r6!, {s13}
 8021320:	3001      	adds	r0, #1
 8021322:	ecb5 7a01 	vldmia	r5!, {s14}
 8021326:	eee6 7a87 	vfma.f32	s15, s13, s14
 802132a:	4550      	cmp	r0, sl
 802132c:	dc01      	bgt.n	8021332 <__kernel_rem_pio2f+0x39e>
 802132e:	4290      	cmp	r0, r2
 8021330:	ddf4      	ble.n	802131c <__kernel_rem_pio2f+0x388>
 8021332:	a858      	add	r0, sp, #352	; 0x160
 8021334:	3b01      	subs	r3, #1
 8021336:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802133a:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 802133e:	e731      	b.n	80211a4 <__kernel_rem_pio2f+0x210>
 8021340:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8021342:	2b02      	cmp	r3, #2
 8021344:	dc09      	bgt.n	802135a <__kernel_rem_pio2f+0x3c6>
 8021346:	2b00      	cmp	r3, #0
 8021348:	dc2b      	bgt.n	80213a2 <__kernel_rem_pio2f+0x40e>
 802134a:	d044      	beq.n	80213d6 <__kernel_rem_pio2f+0x442>
 802134c:	f009 0007 	and.w	r0, r9, #7
 8021350:	b059      	add	sp, #356	; 0x164
 8021352:	ecbd 8b04 	vpop	{d8-d9}
 8021356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802135a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802135c:	2b03      	cmp	r3, #3
 802135e:	d1f5      	bne.n	802134c <__kernel_rem_pio2f+0x3b8>
 8021360:	aa30      	add	r2, sp, #192	; 0xc0
 8021362:	1f0b      	subs	r3, r1, #4
 8021364:	4620      	mov	r0, r4
 8021366:	4413      	add	r3, r2
 8021368:	461a      	mov	r2, r3
 802136a:	2800      	cmp	r0, #0
 802136c:	f1a2 0204 	sub.w	r2, r2, #4
 8021370:	dc52      	bgt.n	8021418 <__kernel_rem_pio2f+0x484>
 8021372:	4622      	mov	r2, r4
 8021374:	2a01      	cmp	r2, #1
 8021376:	f1a3 0304 	sub.w	r3, r3, #4
 802137a:	dc5d      	bgt.n	8021438 <__kernel_rem_pio2f+0x4a4>
 802137c:	ab30      	add	r3, sp, #192	; 0xc0
 802137e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8021298 <__kernel_rem_pio2f+0x304>
 8021382:	440b      	add	r3, r1
 8021384:	2c01      	cmp	r4, #1
 8021386:	dc67      	bgt.n	8021458 <__kernel_rem_pio2f+0x4c4>
 8021388:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802138c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8021390:	2f00      	cmp	r7, #0
 8021392:	d167      	bne.n	8021464 <__kernel_rem_pio2f+0x4d0>
 8021394:	edc8 6a00 	vstr	s13, [r8]
 8021398:	ed88 7a01 	vstr	s14, [r8, #4]
 802139c:	edc8 7a02 	vstr	s15, [r8, #8]
 80213a0:	e7d4      	b.n	802134c <__kernel_rem_pio2f+0x3b8>
 80213a2:	ab30      	add	r3, sp, #192	; 0xc0
 80213a4:	4622      	mov	r2, r4
 80213a6:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8021298 <__kernel_rem_pio2f+0x304>
 80213aa:	440b      	add	r3, r1
 80213ac:	2a00      	cmp	r2, #0
 80213ae:	da24      	bge.n	80213fa <__kernel_rem_pio2f+0x466>
 80213b0:	b34f      	cbz	r7, 8021406 <__kernel_rem_pio2f+0x472>
 80213b2:	eef1 7a47 	vneg.f32	s15, s14
 80213b6:	edc8 7a00 	vstr	s15, [r8]
 80213ba:	aa31      	add	r2, sp, #196	; 0xc4
 80213bc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80213c0:	2301      	movs	r3, #1
 80213c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80213c6:	429c      	cmp	r4, r3
 80213c8:	da20      	bge.n	802140c <__kernel_rem_pio2f+0x478>
 80213ca:	b10f      	cbz	r7, 80213d0 <__kernel_rem_pio2f+0x43c>
 80213cc:	eef1 7a67 	vneg.f32	s15, s15
 80213d0:	edc8 7a01 	vstr	s15, [r8, #4]
 80213d4:	e7ba      	b.n	802134c <__kernel_rem_pio2f+0x3b8>
 80213d6:	ab30      	add	r3, sp, #192	; 0xc0
 80213d8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8021298 <__kernel_rem_pio2f+0x304>
 80213dc:	440b      	add	r3, r1
 80213de:	2c00      	cmp	r4, #0
 80213e0:	da05      	bge.n	80213ee <__kernel_rem_pio2f+0x45a>
 80213e2:	b10f      	cbz	r7, 80213e8 <__kernel_rem_pio2f+0x454>
 80213e4:	eef1 7a67 	vneg.f32	s15, s15
 80213e8:	edc8 7a00 	vstr	s15, [r8]
 80213ec:	e7ae      	b.n	802134c <__kernel_rem_pio2f+0x3b8>
 80213ee:	ed33 7a01 	vldmdb	r3!, {s14}
 80213f2:	3c01      	subs	r4, #1
 80213f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80213f8:	e7f1      	b.n	80213de <__kernel_rem_pio2f+0x44a>
 80213fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80213fe:	3a01      	subs	r2, #1
 8021400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021404:	e7d2      	b.n	80213ac <__kernel_rem_pio2f+0x418>
 8021406:	eef0 7a47 	vmov.f32	s15, s14
 802140a:	e7d4      	b.n	80213b6 <__kernel_rem_pio2f+0x422>
 802140c:	ecb2 7a01 	vldmia	r2!, {s14}
 8021410:	3301      	adds	r3, #1
 8021412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021416:	e7d6      	b.n	80213c6 <__kernel_rem_pio2f+0x432>
 8021418:	edd2 7a00 	vldr	s15, [r2]
 802141c:	3801      	subs	r0, #1
 802141e:	edd2 6a01 	vldr	s13, [r2, #4]
 8021422:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802142a:	ed82 7a00 	vstr	s14, [r2]
 802142e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021432:	edc2 7a01 	vstr	s15, [r2, #4]
 8021436:	e798      	b.n	802136a <__kernel_rem_pio2f+0x3d6>
 8021438:	edd3 7a00 	vldr	s15, [r3]
 802143c:	3a01      	subs	r2, #1
 802143e:	edd3 6a01 	vldr	s13, [r3, #4]
 8021442:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802144a:	ed83 7a00 	vstr	s14, [r3]
 802144e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021452:	edc3 7a01 	vstr	s15, [r3, #4]
 8021456:	e78d      	b.n	8021374 <__kernel_rem_pio2f+0x3e0>
 8021458:	ed33 7a01 	vldmdb	r3!, {s14}
 802145c:	3c01      	subs	r4, #1
 802145e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021462:	e78f      	b.n	8021384 <__kernel_rem_pio2f+0x3f0>
 8021464:	eef1 6a66 	vneg.f32	s13, s13
 8021468:	eeb1 7a47 	vneg.f32	s14, s14
 802146c:	eef1 7a67 	vneg.f32	s15, s15
 8021470:	edc8 6a00 	vstr	s13, [r8]
 8021474:	ed88 7a01 	vstr	s14, [r8, #4]
 8021478:	e790      	b.n	802139c <__kernel_rem_pio2f+0x408>
 802147a:	bf00      	nop

0802147c <scalbnf>:
 802147c:	ee10 3a10 	vmov	r3, s0
 8021480:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8021484:	d02a      	beq.n	80214dc <scalbnf+0x60>
 8021486:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802148a:	d302      	bcc.n	8021492 <scalbnf+0x16>
 802148c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021490:	4770      	bx	lr
 8021492:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8021496:	d122      	bne.n	80214de <scalbnf+0x62>
 8021498:	4b23      	ldr	r3, [pc, #140]	; (8021528 <scalbnf+0xac>)
 802149a:	eddf 7a24 	vldr	s15, [pc, #144]	; 802152c <scalbnf+0xb0>
 802149e:	4298      	cmp	r0, r3
 80214a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80214a4:	db16      	blt.n	80214d4 <scalbnf+0x58>
 80214a6:	ee10 3a10 	vmov	r3, s0
 80214aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80214ae:	3a19      	subs	r2, #25
 80214b0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80214b4:	4288      	cmp	r0, r1
 80214b6:	dd14      	ble.n	80214e2 <scalbnf+0x66>
 80214b8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8021530 <scalbnf+0xb4>
 80214bc:	ee10 3a10 	vmov	r3, s0
 80214c0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8021534 <scalbnf+0xb8>
 80214c4:	eeb0 7a67 	vmov.f32	s14, s15
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	fe67 7aa6 	vselge.f32	s15, s15, s13
 80214ce:	ee27 0a87 	vmul.f32	s0, s15, s14
 80214d2:	4770      	bx	lr
 80214d4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8021538 <scalbnf+0xbc>
 80214d8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80214dc:	4770      	bx	lr
 80214de:	0dd2      	lsrs	r2, r2, #23
 80214e0:	e7e6      	b.n	80214b0 <scalbnf+0x34>
 80214e2:	4410      	add	r0, r2
 80214e4:	28fe      	cmp	r0, #254	; 0xfe
 80214e6:	dce7      	bgt.n	80214b8 <scalbnf+0x3c>
 80214e8:	2800      	cmp	r0, #0
 80214ea:	dd06      	ble.n	80214fa <scalbnf+0x7e>
 80214ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80214f0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80214f4:	ee00 3a10 	vmov	s0, r3
 80214f8:	4770      	bx	lr
 80214fa:	f110 0f16 	cmn.w	r0, #22
 80214fe:	da09      	bge.n	8021514 <scalbnf+0x98>
 8021500:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8021538 <scalbnf+0xbc>
 8021504:	ee10 3a10 	vmov	r3, s0
 8021508:	eddf 6a0c 	vldr	s13, [pc, #48]	; 802153c <scalbnf+0xc0>
 802150c:	eeb0 7a67 	vmov.f32	s14, s15
 8021510:	2b00      	cmp	r3, #0
 8021512:	e7da      	b.n	80214ca <scalbnf+0x4e>
 8021514:	3019      	adds	r0, #25
 8021516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802151a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8021540 <scalbnf+0xc4>
 802151e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8021522:	ee07 3a90 	vmov	s15, r3
 8021526:	e7d7      	b.n	80214d8 <scalbnf+0x5c>
 8021528:	ffff3cb0 	.word	0xffff3cb0
 802152c:	4c000000 	.word	0x4c000000
 8021530:	7149f2ca 	.word	0x7149f2ca
 8021534:	f149f2ca 	.word	0xf149f2ca
 8021538:	0da24260 	.word	0x0da24260
 802153c:	8da24260 	.word	0x8da24260
 8021540:	33000000 	.word	0x33000000

08021544 <floorf>:
 8021544:	febb 0a40 	vrintm.f32	s0, s0
 8021548:	4770      	bx	lr

0802154a <abort>:
 802154a:	2006      	movs	r0, #6
 802154c:	b508      	push	{r3, lr}
 802154e:	f000 fa7b 	bl	8021a48 <raise>
 8021552:	2001      	movs	r0, #1
 8021554:	f7f0 fd52 	bl	8011ffc <_exit>

08021558 <malloc>:
 8021558:	4b02      	ldr	r3, [pc, #8]	; (8021564 <malloc+0xc>)
 802155a:	4601      	mov	r1, r0
 802155c:	6818      	ldr	r0, [r3, #0]
 802155e:	f000 b82b 	b.w	80215b8 <_malloc_r>
 8021562:	bf00      	nop
 8021564:	20000108 	.word	0x20000108

08021568 <free>:
 8021568:	4b02      	ldr	r3, [pc, #8]	; (8021574 <free+0xc>)
 802156a:	4601      	mov	r1, r0
 802156c:	6818      	ldr	r0, [r3, #0]
 802156e:	f000 bb35 	b.w	8021bdc <_free_r>
 8021572:	bf00      	nop
 8021574:	20000108 	.word	0x20000108

08021578 <sbrk_aligned>:
 8021578:	b570      	push	{r4, r5, r6, lr}
 802157a:	4e0e      	ldr	r6, [pc, #56]	; (80215b4 <sbrk_aligned+0x3c>)
 802157c:	460c      	mov	r4, r1
 802157e:	4605      	mov	r5, r0
 8021580:	6831      	ldr	r1, [r6, #0]
 8021582:	b911      	cbnz	r1, 802158a <sbrk_aligned+0x12>
 8021584:	f000 fab0 	bl	8021ae8 <_sbrk_r>
 8021588:	6030      	str	r0, [r6, #0]
 802158a:	4621      	mov	r1, r4
 802158c:	4628      	mov	r0, r5
 802158e:	f000 faab 	bl	8021ae8 <_sbrk_r>
 8021592:	1c43      	adds	r3, r0, #1
 8021594:	d00a      	beq.n	80215ac <sbrk_aligned+0x34>
 8021596:	1cc4      	adds	r4, r0, #3
 8021598:	f024 0403 	bic.w	r4, r4, #3
 802159c:	42a0      	cmp	r0, r4
 802159e:	d007      	beq.n	80215b0 <sbrk_aligned+0x38>
 80215a0:	1a21      	subs	r1, r4, r0
 80215a2:	4628      	mov	r0, r5
 80215a4:	f000 faa0 	bl	8021ae8 <_sbrk_r>
 80215a8:	3001      	adds	r0, #1
 80215aa:	d101      	bne.n	80215b0 <sbrk_aligned+0x38>
 80215ac:	f04f 34ff 	mov.w	r4, #4294967295
 80215b0:	4620      	mov	r0, r4
 80215b2:	bd70      	pop	{r4, r5, r6, pc}
 80215b4:	20003930 	.word	0x20003930

080215b8 <_malloc_r>:
 80215b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80215bc:	1ccd      	adds	r5, r1, #3
 80215be:	4607      	mov	r7, r0
 80215c0:	f025 0503 	bic.w	r5, r5, #3
 80215c4:	3508      	adds	r5, #8
 80215c6:	2d0c      	cmp	r5, #12
 80215c8:	bf38      	it	cc
 80215ca:	250c      	movcc	r5, #12
 80215cc:	2d00      	cmp	r5, #0
 80215ce:	db01      	blt.n	80215d4 <_malloc_r+0x1c>
 80215d0:	42a9      	cmp	r1, r5
 80215d2:	d905      	bls.n	80215e0 <_malloc_r+0x28>
 80215d4:	230c      	movs	r3, #12
 80215d6:	2600      	movs	r6, #0
 80215d8:	603b      	str	r3, [r7, #0]
 80215da:	4630      	mov	r0, r6
 80215dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80216b4 <_malloc_r+0xfc>
 80215e4:	f000 f868 	bl	80216b8 <__malloc_lock>
 80215e8:	f8d8 3000 	ldr.w	r3, [r8]
 80215ec:	461c      	mov	r4, r3
 80215ee:	bb5c      	cbnz	r4, 8021648 <_malloc_r+0x90>
 80215f0:	4629      	mov	r1, r5
 80215f2:	4638      	mov	r0, r7
 80215f4:	f7ff ffc0 	bl	8021578 <sbrk_aligned>
 80215f8:	1c43      	adds	r3, r0, #1
 80215fa:	4604      	mov	r4, r0
 80215fc:	d155      	bne.n	80216aa <_malloc_r+0xf2>
 80215fe:	f8d8 4000 	ldr.w	r4, [r8]
 8021602:	4626      	mov	r6, r4
 8021604:	2e00      	cmp	r6, #0
 8021606:	d145      	bne.n	8021694 <_malloc_r+0xdc>
 8021608:	2c00      	cmp	r4, #0
 802160a:	d048      	beq.n	802169e <_malloc_r+0xe6>
 802160c:	6823      	ldr	r3, [r4, #0]
 802160e:	4631      	mov	r1, r6
 8021610:	4638      	mov	r0, r7
 8021612:	eb04 0903 	add.w	r9, r4, r3
 8021616:	f000 fa67 	bl	8021ae8 <_sbrk_r>
 802161a:	4581      	cmp	r9, r0
 802161c:	d13f      	bne.n	802169e <_malloc_r+0xe6>
 802161e:	6821      	ldr	r1, [r4, #0]
 8021620:	4638      	mov	r0, r7
 8021622:	1a6d      	subs	r5, r5, r1
 8021624:	4629      	mov	r1, r5
 8021626:	f7ff ffa7 	bl	8021578 <sbrk_aligned>
 802162a:	3001      	adds	r0, #1
 802162c:	d037      	beq.n	802169e <_malloc_r+0xe6>
 802162e:	6823      	ldr	r3, [r4, #0]
 8021630:	442b      	add	r3, r5
 8021632:	6023      	str	r3, [r4, #0]
 8021634:	f8d8 3000 	ldr.w	r3, [r8]
 8021638:	2b00      	cmp	r3, #0
 802163a:	d038      	beq.n	80216ae <_malloc_r+0xf6>
 802163c:	685a      	ldr	r2, [r3, #4]
 802163e:	42a2      	cmp	r2, r4
 8021640:	d12b      	bne.n	802169a <_malloc_r+0xe2>
 8021642:	2200      	movs	r2, #0
 8021644:	605a      	str	r2, [r3, #4]
 8021646:	e00f      	b.n	8021668 <_malloc_r+0xb0>
 8021648:	6822      	ldr	r2, [r4, #0]
 802164a:	1b52      	subs	r2, r2, r5
 802164c:	d41f      	bmi.n	802168e <_malloc_r+0xd6>
 802164e:	2a0b      	cmp	r2, #11
 8021650:	d917      	bls.n	8021682 <_malloc_r+0xca>
 8021652:	1961      	adds	r1, r4, r5
 8021654:	42a3      	cmp	r3, r4
 8021656:	6025      	str	r5, [r4, #0]
 8021658:	bf18      	it	ne
 802165a:	6059      	strne	r1, [r3, #4]
 802165c:	6863      	ldr	r3, [r4, #4]
 802165e:	bf08      	it	eq
 8021660:	f8c8 1000 	streq.w	r1, [r8]
 8021664:	5162      	str	r2, [r4, r5]
 8021666:	604b      	str	r3, [r1, #4]
 8021668:	f104 060b 	add.w	r6, r4, #11
 802166c:	4638      	mov	r0, r7
 802166e:	f000 f829 	bl	80216c4 <__malloc_unlock>
 8021672:	1d23      	adds	r3, r4, #4
 8021674:	f026 0607 	bic.w	r6, r6, #7
 8021678:	1af2      	subs	r2, r6, r3
 802167a:	d0ae      	beq.n	80215da <_malloc_r+0x22>
 802167c:	1b9b      	subs	r3, r3, r6
 802167e:	50a3      	str	r3, [r4, r2]
 8021680:	e7ab      	b.n	80215da <_malloc_r+0x22>
 8021682:	42a3      	cmp	r3, r4
 8021684:	6862      	ldr	r2, [r4, #4]
 8021686:	d1dd      	bne.n	8021644 <_malloc_r+0x8c>
 8021688:	f8c8 2000 	str.w	r2, [r8]
 802168c:	e7ec      	b.n	8021668 <_malloc_r+0xb0>
 802168e:	4623      	mov	r3, r4
 8021690:	6864      	ldr	r4, [r4, #4]
 8021692:	e7ac      	b.n	80215ee <_malloc_r+0x36>
 8021694:	4634      	mov	r4, r6
 8021696:	6876      	ldr	r6, [r6, #4]
 8021698:	e7b4      	b.n	8021604 <_malloc_r+0x4c>
 802169a:	4613      	mov	r3, r2
 802169c:	e7cc      	b.n	8021638 <_malloc_r+0x80>
 802169e:	230c      	movs	r3, #12
 80216a0:	4638      	mov	r0, r7
 80216a2:	603b      	str	r3, [r7, #0]
 80216a4:	f000 f80e 	bl	80216c4 <__malloc_unlock>
 80216a8:	e797      	b.n	80215da <_malloc_r+0x22>
 80216aa:	6025      	str	r5, [r4, #0]
 80216ac:	e7dc      	b.n	8021668 <_malloc_r+0xb0>
 80216ae:	605b      	str	r3, [r3, #4]
 80216b0:	deff      	udf	#255	; 0xff
 80216b2:	bf00      	nop
 80216b4:	2000392c 	.word	0x2000392c

080216b8 <__malloc_lock>:
 80216b8:	4801      	ldr	r0, [pc, #4]	; (80216c0 <__malloc_lock+0x8>)
 80216ba:	f000 ba62 	b.w	8021b82 <__retarget_lock_acquire_recursive>
 80216be:	bf00      	nop
 80216c0:	20003a74 	.word	0x20003a74

080216c4 <__malloc_unlock>:
 80216c4:	4801      	ldr	r0, [pc, #4]	; (80216cc <__malloc_unlock+0x8>)
 80216c6:	f000 ba5d 	b.w	8021b84 <__retarget_lock_release_recursive>
 80216ca:	bf00      	nop
 80216cc:	20003a74 	.word	0x20003a74

080216d0 <rand>:
 80216d0:	4b16      	ldr	r3, [pc, #88]	; (802172c <rand+0x5c>)
 80216d2:	b510      	push	{r4, lr}
 80216d4:	681c      	ldr	r4, [r3, #0]
 80216d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80216d8:	b9b3      	cbnz	r3, 8021708 <rand+0x38>
 80216da:	2018      	movs	r0, #24
 80216dc:	f7ff ff3c 	bl	8021558 <malloc>
 80216e0:	4602      	mov	r2, r0
 80216e2:	6320      	str	r0, [r4, #48]	; 0x30
 80216e4:	b920      	cbnz	r0, 80216f0 <rand+0x20>
 80216e6:	4b12      	ldr	r3, [pc, #72]	; (8021730 <rand+0x60>)
 80216e8:	2152      	movs	r1, #82	; 0x52
 80216ea:	4812      	ldr	r0, [pc, #72]	; (8021734 <rand+0x64>)
 80216ec:	f000 fa58 	bl	8021ba0 <__assert_func>
 80216f0:	4911      	ldr	r1, [pc, #68]	; (8021738 <rand+0x68>)
 80216f2:	4b12      	ldr	r3, [pc, #72]	; (802173c <rand+0x6c>)
 80216f4:	e9c0 1300 	strd	r1, r3, [r0]
 80216f8:	4b11      	ldr	r3, [pc, #68]	; (8021740 <rand+0x70>)
 80216fa:	2100      	movs	r1, #0
 80216fc:	6083      	str	r3, [r0, #8]
 80216fe:	230b      	movs	r3, #11
 8021700:	8183      	strh	r3, [r0, #12]
 8021702:	2001      	movs	r0, #1
 8021704:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021708:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802170a:	480e      	ldr	r0, [pc, #56]	; (8021744 <rand+0x74>)
 802170c:	690b      	ldr	r3, [r1, #16]
 802170e:	694c      	ldr	r4, [r1, #20]
 8021710:	4a0d      	ldr	r2, [pc, #52]	; (8021748 <rand+0x78>)
 8021712:	4358      	muls	r0, r3
 8021714:	fb02 0004 	mla	r0, r2, r4, r0
 8021718:	fba3 3202 	umull	r3, r2, r3, r2
 802171c:	3301      	adds	r3, #1
 802171e:	eb40 0002 	adc.w	r0, r0, r2
 8021722:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021726:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802172a:	bd10      	pop	{r4, pc}
 802172c:	20000108 	.word	0x20000108
 8021730:	080236d8 	.word	0x080236d8
 8021734:	080236ef 	.word	0x080236ef
 8021738:	abcd330e 	.word	0xabcd330e
 802173c:	e66d1234 	.word	0xe66d1234
 8021740:	0005deec 	.word	0x0005deec
 8021744:	5851f42d 	.word	0x5851f42d
 8021748:	4c957f2d 	.word	0x4c957f2d

0802174c <std>:
 802174c:	2300      	movs	r3, #0
 802174e:	b510      	push	{r4, lr}
 8021750:	4604      	mov	r4, r0
 8021752:	6083      	str	r3, [r0, #8]
 8021754:	8181      	strh	r1, [r0, #12]
 8021756:	4619      	mov	r1, r3
 8021758:	6643      	str	r3, [r0, #100]	; 0x64
 802175a:	81c2      	strh	r2, [r0, #14]
 802175c:	2208      	movs	r2, #8
 802175e:	6183      	str	r3, [r0, #24]
 8021760:	e9c0 3300 	strd	r3, r3, [r0]
 8021764:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021768:	305c      	adds	r0, #92	; 0x5c
 802176a:	f000 f93c 	bl	80219e6 <memset>
 802176e:	4b0d      	ldr	r3, [pc, #52]	; (80217a4 <std+0x58>)
 8021770:	6224      	str	r4, [r4, #32]
 8021772:	6263      	str	r3, [r4, #36]	; 0x24
 8021774:	4b0c      	ldr	r3, [pc, #48]	; (80217a8 <std+0x5c>)
 8021776:	62a3      	str	r3, [r4, #40]	; 0x28
 8021778:	4b0c      	ldr	r3, [pc, #48]	; (80217ac <std+0x60>)
 802177a:	62e3      	str	r3, [r4, #44]	; 0x2c
 802177c:	4b0c      	ldr	r3, [pc, #48]	; (80217b0 <std+0x64>)
 802177e:	6323      	str	r3, [r4, #48]	; 0x30
 8021780:	4b0c      	ldr	r3, [pc, #48]	; (80217b4 <std+0x68>)
 8021782:	429c      	cmp	r4, r3
 8021784:	d006      	beq.n	8021794 <std+0x48>
 8021786:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802178a:	4294      	cmp	r4, r2
 802178c:	d002      	beq.n	8021794 <std+0x48>
 802178e:	33d0      	adds	r3, #208	; 0xd0
 8021790:	429c      	cmp	r4, r3
 8021792:	d105      	bne.n	80217a0 <std+0x54>
 8021794:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802179c:	f000 b9f0 	b.w	8021b80 <__retarget_lock_init_recursive>
 80217a0:	bd10      	pop	{r4, pc}
 80217a2:	bf00      	nop
 80217a4:	08021929 	.word	0x08021929
 80217a8:	0802194f 	.word	0x0802194f
 80217ac:	08021987 	.word	0x08021987
 80217b0:	080219ab 	.word	0x080219ab
 80217b4:	20003934 	.word	0x20003934

080217b8 <stdio_exit_handler>:
 80217b8:	4a02      	ldr	r2, [pc, #8]	; (80217c4 <stdio_exit_handler+0xc>)
 80217ba:	4903      	ldr	r1, [pc, #12]	; (80217c8 <stdio_exit_handler+0x10>)
 80217bc:	4803      	ldr	r0, [pc, #12]	; (80217cc <stdio_exit_handler+0x14>)
 80217be:	f000 b869 	b.w	8021894 <_fwalk_sglue>
 80217c2:	bf00      	nop
 80217c4:	200000b0 	.word	0x200000b0
 80217c8:	080223b9 	.word	0x080223b9
 80217cc:	200000bc 	.word	0x200000bc

080217d0 <cleanup_stdio>:
 80217d0:	6841      	ldr	r1, [r0, #4]
 80217d2:	4b0c      	ldr	r3, [pc, #48]	; (8021804 <cleanup_stdio+0x34>)
 80217d4:	4299      	cmp	r1, r3
 80217d6:	b510      	push	{r4, lr}
 80217d8:	4604      	mov	r4, r0
 80217da:	d001      	beq.n	80217e0 <cleanup_stdio+0x10>
 80217dc:	f000 fdec 	bl	80223b8 <_fflush_r>
 80217e0:	68a1      	ldr	r1, [r4, #8]
 80217e2:	4b09      	ldr	r3, [pc, #36]	; (8021808 <cleanup_stdio+0x38>)
 80217e4:	4299      	cmp	r1, r3
 80217e6:	d002      	beq.n	80217ee <cleanup_stdio+0x1e>
 80217e8:	4620      	mov	r0, r4
 80217ea:	f000 fde5 	bl	80223b8 <_fflush_r>
 80217ee:	68e1      	ldr	r1, [r4, #12]
 80217f0:	4b06      	ldr	r3, [pc, #24]	; (802180c <cleanup_stdio+0x3c>)
 80217f2:	4299      	cmp	r1, r3
 80217f4:	d004      	beq.n	8021800 <cleanup_stdio+0x30>
 80217f6:	4620      	mov	r0, r4
 80217f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217fc:	f000 bddc 	b.w	80223b8 <_fflush_r>
 8021800:	bd10      	pop	{r4, pc}
 8021802:	bf00      	nop
 8021804:	20003934 	.word	0x20003934
 8021808:	2000399c 	.word	0x2000399c
 802180c:	20003a04 	.word	0x20003a04

08021810 <global_stdio_init.part.0>:
 8021810:	b510      	push	{r4, lr}
 8021812:	4b0b      	ldr	r3, [pc, #44]	; (8021840 <global_stdio_init.part.0+0x30>)
 8021814:	2104      	movs	r1, #4
 8021816:	4c0b      	ldr	r4, [pc, #44]	; (8021844 <global_stdio_init.part.0+0x34>)
 8021818:	4a0b      	ldr	r2, [pc, #44]	; (8021848 <global_stdio_init.part.0+0x38>)
 802181a:	4620      	mov	r0, r4
 802181c:	601a      	str	r2, [r3, #0]
 802181e:	2200      	movs	r2, #0
 8021820:	f7ff ff94 	bl	802174c <std>
 8021824:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8021828:	2201      	movs	r2, #1
 802182a:	2109      	movs	r1, #9
 802182c:	f7ff ff8e 	bl	802174c <std>
 8021830:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8021834:	2202      	movs	r2, #2
 8021836:	2112      	movs	r1, #18
 8021838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802183c:	f7ff bf86 	b.w	802174c <std>
 8021840:	20003a6c 	.word	0x20003a6c
 8021844:	20003934 	.word	0x20003934
 8021848:	080217b9 	.word	0x080217b9

0802184c <__sfp_lock_acquire>:
 802184c:	4801      	ldr	r0, [pc, #4]	; (8021854 <__sfp_lock_acquire+0x8>)
 802184e:	f000 b998 	b.w	8021b82 <__retarget_lock_acquire_recursive>
 8021852:	bf00      	nop
 8021854:	20003a75 	.word	0x20003a75

08021858 <__sfp_lock_release>:
 8021858:	4801      	ldr	r0, [pc, #4]	; (8021860 <__sfp_lock_release+0x8>)
 802185a:	f000 b993 	b.w	8021b84 <__retarget_lock_release_recursive>
 802185e:	bf00      	nop
 8021860:	20003a75 	.word	0x20003a75

08021864 <__sinit>:
 8021864:	b510      	push	{r4, lr}
 8021866:	4604      	mov	r4, r0
 8021868:	f7ff fff0 	bl	802184c <__sfp_lock_acquire>
 802186c:	6a23      	ldr	r3, [r4, #32]
 802186e:	b11b      	cbz	r3, 8021878 <__sinit+0x14>
 8021870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021874:	f7ff bff0 	b.w	8021858 <__sfp_lock_release>
 8021878:	4b04      	ldr	r3, [pc, #16]	; (802188c <__sinit+0x28>)
 802187a:	6223      	str	r3, [r4, #32]
 802187c:	4b04      	ldr	r3, [pc, #16]	; (8021890 <__sinit+0x2c>)
 802187e:	681b      	ldr	r3, [r3, #0]
 8021880:	2b00      	cmp	r3, #0
 8021882:	d1f5      	bne.n	8021870 <__sinit+0xc>
 8021884:	f7ff ffc4 	bl	8021810 <global_stdio_init.part.0>
 8021888:	e7f2      	b.n	8021870 <__sinit+0xc>
 802188a:	bf00      	nop
 802188c:	080217d1 	.word	0x080217d1
 8021890:	20003a6c 	.word	0x20003a6c

08021894 <_fwalk_sglue>:
 8021894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021898:	4607      	mov	r7, r0
 802189a:	4688      	mov	r8, r1
 802189c:	4614      	mov	r4, r2
 802189e:	2600      	movs	r6, #0
 80218a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80218a4:	f1b9 0901 	subs.w	r9, r9, #1
 80218a8:	d505      	bpl.n	80218b6 <_fwalk_sglue+0x22>
 80218aa:	6824      	ldr	r4, [r4, #0]
 80218ac:	2c00      	cmp	r4, #0
 80218ae:	d1f7      	bne.n	80218a0 <_fwalk_sglue+0xc>
 80218b0:	4630      	mov	r0, r6
 80218b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80218b6:	89ab      	ldrh	r3, [r5, #12]
 80218b8:	2b01      	cmp	r3, #1
 80218ba:	d907      	bls.n	80218cc <_fwalk_sglue+0x38>
 80218bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80218c0:	3301      	adds	r3, #1
 80218c2:	d003      	beq.n	80218cc <_fwalk_sglue+0x38>
 80218c4:	4629      	mov	r1, r5
 80218c6:	4638      	mov	r0, r7
 80218c8:	47c0      	blx	r8
 80218ca:	4306      	orrs	r6, r0
 80218cc:	3568      	adds	r5, #104	; 0x68
 80218ce:	e7e9      	b.n	80218a4 <_fwalk_sglue+0x10>

080218d0 <siscanf>:
 80218d0:	b40e      	push	{r1, r2, r3}
 80218d2:	b510      	push	{r4, lr}
 80218d4:	b09f      	sub	sp, #124	; 0x7c
 80218d6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80218da:	ac21      	add	r4, sp, #132	; 0x84
 80218dc:	f8ad 101c 	strh.w	r1, [sp, #28]
 80218e0:	9004      	str	r0, [sp, #16]
 80218e2:	f854 2b04 	ldr.w	r2, [r4], #4
 80218e6:	9008      	str	r0, [sp, #32]
 80218e8:	9201      	str	r2, [sp, #4]
 80218ea:	f7de fcb3 	bl	8000254 <strlen>
 80218ee:	4b0c      	ldr	r3, [pc, #48]	; (8021920 <siscanf+0x50>)
 80218f0:	a904      	add	r1, sp, #16
 80218f2:	9005      	str	r0, [sp, #20]
 80218f4:	930d      	str	r3, [sp, #52]	; 0x34
 80218f6:	2300      	movs	r3, #0
 80218f8:	9009      	str	r0, [sp, #36]	; 0x24
 80218fa:	9311      	str	r3, [sp, #68]	; 0x44
 80218fc:	9316      	str	r3, [sp, #88]	; 0x58
 80218fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021902:	4808      	ldr	r0, [pc, #32]	; (8021924 <siscanf+0x54>)
 8021904:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021908:	4623      	mov	r3, r4
 802190a:	9a01      	ldr	r2, [sp, #4]
 802190c:	6800      	ldr	r0, [r0, #0]
 802190e:	9403      	str	r4, [sp, #12]
 8021910:	f000 fa0a 	bl	8021d28 <__ssvfiscanf_r>
 8021914:	b01f      	add	sp, #124	; 0x7c
 8021916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802191a:	b003      	add	sp, #12
 802191c:	4770      	bx	lr
 802191e:	bf00      	nop
 8021920:	0802194b 	.word	0x0802194b
 8021924:	20000108 	.word	0x20000108

08021928 <__sread>:
 8021928:	b510      	push	{r4, lr}
 802192a:	460c      	mov	r4, r1
 802192c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021930:	f000 f8b4 	bl	8021a9c <_read_r>
 8021934:	2800      	cmp	r0, #0
 8021936:	bfab      	itete	ge
 8021938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802193a:	89a3      	ldrhlt	r3, [r4, #12]
 802193c:	181b      	addge	r3, r3, r0
 802193e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021942:	bfac      	ite	ge
 8021944:	6563      	strge	r3, [r4, #84]	; 0x54
 8021946:	81a3      	strhlt	r3, [r4, #12]
 8021948:	bd10      	pop	{r4, pc}

0802194a <__seofread>:
 802194a:	2000      	movs	r0, #0
 802194c:	4770      	bx	lr

0802194e <__swrite>:
 802194e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021952:	461f      	mov	r7, r3
 8021954:	898b      	ldrh	r3, [r1, #12]
 8021956:	4605      	mov	r5, r0
 8021958:	460c      	mov	r4, r1
 802195a:	05db      	lsls	r3, r3, #23
 802195c:	4616      	mov	r6, r2
 802195e:	d505      	bpl.n	802196c <__swrite+0x1e>
 8021960:	2302      	movs	r3, #2
 8021962:	2200      	movs	r2, #0
 8021964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021968:	f000 f886 	bl	8021a78 <_lseek_r>
 802196c:	89a3      	ldrh	r3, [r4, #12]
 802196e:	4632      	mov	r2, r6
 8021970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021974:	4628      	mov	r0, r5
 8021976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802197a:	81a3      	strh	r3, [r4, #12]
 802197c:	463b      	mov	r3, r7
 802197e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021982:	f000 b8c1 	b.w	8021b08 <_write_r>

08021986 <__sseek>:
 8021986:	b510      	push	{r4, lr}
 8021988:	460c      	mov	r4, r1
 802198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802198e:	f000 f873 	bl	8021a78 <_lseek_r>
 8021992:	1c43      	adds	r3, r0, #1
 8021994:	89a3      	ldrh	r3, [r4, #12]
 8021996:	bf15      	itete	ne
 8021998:	6560      	strne	r0, [r4, #84]	; 0x54
 802199a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802199e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80219a2:	81a3      	strheq	r3, [r4, #12]
 80219a4:	bf18      	it	ne
 80219a6:	81a3      	strhne	r3, [r4, #12]
 80219a8:	bd10      	pop	{r4, pc}

080219aa <__sclose>:
 80219aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80219ae:	f000 b853 	b.w	8021a58 <_close_r>

080219b2 <memmove>:
 80219b2:	4288      	cmp	r0, r1
 80219b4:	b510      	push	{r4, lr}
 80219b6:	eb01 0402 	add.w	r4, r1, r2
 80219ba:	d902      	bls.n	80219c2 <memmove+0x10>
 80219bc:	4284      	cmp	r4, r0
 80219be:	4623      	mov	r3, r4
 80219c0:	d807      	bhi.n	80219d2 <memmove+0x20>
 80219c2:	1e43      	subs	r3, r0, #1
 80219c4:	42a1      	cmp	r1, r4
 80219c6:	d008      	beq.n	80219da <memmove+0x28>
 80219c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80219cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80219d0:	e7f8      	b.n	80219c4 <memmove+0x12>
 80219d2:	4402      	add	r2, r0
 80219d4:	4601      	mov	r1, r0
 80219d6:	428a      	cmp	r2, r1
 80219d8:	d100      	bne.n	80219dc <memmove+0x2a>
 80219da:	bd10      	pop	{r4, pc}
 80219dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80219e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80219e4:	e7f7      	b.n	80219d6 <memmove+0x24>

080219e6 <memset>:
 80219e6:	4402      	add	r2, r0
 80219e8:	4603      	mov	r3, r0
 80219ea:	4293      	cmp	r3, r2
 80219ec:	d100      	bne.n	80219f0 <memset+0xa>
 80219ee:	4770      	bx	lr
 80219f0:	f803 1b01 	strb.w	r1, [r3], #1
 80219f4:	e7f9      	b.n	80219ea <memset+0x4>

080219f6 <_raise_r>:
 80219f6:	291f      	cmp	r1, #31
 80219f8:	b538      	push	{r3, r4, r5, lr}
 80219fa:	4604      	mov	r4, r0
 80219fc:	460d      	mov	r5, r1
 80219fe:	d904      	bls.n	8021a0a <_raise_r+0x14>
 8021a00:	2316      	movs	r3, #22
 8021a02:	6003      	str	r3, [r0, #0]
 8021a04:	f04f 30ff 	mov.w	r0, #4294967295
 8021a08:	bd38      	pop	{r3, r4, r5, pc}
 8021a0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8021a0c:	b112      	cbz	r2, 8021a14 <_raise_r+0x1e>
 8021a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021a12:	b94b      	cbnz	r3, 8021a28 <_raise_r+0x32>
 8021a14:	4620      	mov	r0, r4
 8021a16:	f000 f865 	bl	8021ae4 <_getpid_r>
 8021a1a:	462a      	mov	r2, r5
 8021a1c:	4601      	mov	r1, r0
 8021a1e:	4620      	mov	r0, r4
 8021a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a24:	f000 b84c 	b.w	8021ac0 <_kill_r>
 8021a28:	2b01      	cmp	r3, #1
 8021a2a:	d00a      	beq.n	8021a42 <_raise_r+0x4c>
 8021a2c:	1c59      	adds	r1, r3, #1
 8021a2e:	d103      	bne.n	8021a38 <_raise_r+0x42>
 8021a30:	2316      	movs	r3, #22
 8021a32:	6003      	str	r3, [r0, #0]
 8021a34:	2001      	movs	r0, #1
 8021a36:	e7e7      	b.n	8021a08 <_raise_r+0x12>
 8021a38:	2400      	movs	r4, #0
 8021a3a:	4628      	mov	r0, r5
 8021a3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021a40:	4798      	blx	r3
 8021a42:	2000      	movs	r0, #0
 8021a44:	e7e0      	b.n	8021a08 <_raise_r+0x12>
	...

08021a48 <raise>:
 8021a48:	4b02      	ldr	r3, [pc, #8]	; (8021a54 <raise+0xc>)
 8021a4a:	4601      	mov	r1, r0
 8021a4c:	6818      	ldr	r0, [r3, #0]
 8021a4e:	f7ff bfd2 	b.w	80219f6 <_raise_r>
 8021a52:	bf00      	nop
 8021a54:	20000108 	.word	0x20000108

08021a58 <_close_r>:
 8021a58:	b538      	push	{r3, r4, r5, lr}
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	4d05      	ldr	r5, [pc, #20]	; (8021a74 <_close_r+0x1c>)
 8021a5e:	4604      	mov	r4, r0
 8021a60:	4608      	mov	r0, r1
 8021a62:	602b      	str	r3, [r5, #0]
 8021a64:	f7f0 fb0d 	bl	8012082 <_close>
 8021a68:	1c43      	adds	r3, r0, #1
 8021a6a:	d102      	bne.n	8021a72 <_close_r+0x1a>
 8021a6c:	682b      	ldr	r3, [r5, #0]
 8021a6e:	b103      	cbz	r3, 8021a72 <_close_r+0x1a>
 8021a70:	6023      	str	r3, [r4, #0]
 8021a72:	bd38      	pop	{r3, r4, r5, pc}
 8021a74:	20003a70 	.word	0x20003a70

08021a78 <_lseek_r>:
 8021a78:	b538      	push	{r3, r4, r5, lr}
 8021a7a:	4604      	mov	r4, r0
 8021a7c:	4d06      	ldr	r5, [pc, #24]	; (8021a98 <_lseek_r+0x20>)
 8021a7e:	4608      	mov	r0, r1
 8021a80:	4611      	mov	r1, r2
 8021a82:	2200      	movs	r2, #0
 8021a84:	602a      	str	r2, [r5, #0]
 8021a86:	461a      	mov	r2, r3
 8021a88:	f7f0 fb22 	bl	80120d0 <_lseek>
 8021a8c:	1c43      	adds	r3, r0, #1
 8021a8e:	d102      	bne.n	8021a96 <_lseek_r+0x1e>
 8021a90:	682b      	ldr	r3, [r5, #0]
 8021a92:	b103      	cbz	r3, 8021a96 <_lseek_r+0x1e>
 8021a94:	6023      	str	r3, [r4, #0]
 8021a96:	bd38      	pop	{r3, r4, r5, pc}
 8021a98:	20003a70 	.word	0x20003a70

08021a9c <_read_r>:
 8021a9c:	b538      	push	{r3, r4, r5, lr}
 8021a9e:	4604      	mov	r4, r0
 8021aa0:	4d06      	ldr	r5, [pc, #24]	; (8021abc <_read_r+0x20>)
 8021aa2:	4608      	mov	r0, r1
 8021aa4:	4611      	mov	r1, r2
 8021aa6:	2200      	movs	r2, #0
 8021aa8:	602a      	str	r2, [r5, #0]
 8021aaa:	461a      	mov	r2, r3
 8021aac:	f7f0 fab0 	bl	8012010 <_read>
 8021ab0:	1c43      	adds	r3, r0, #1
 8021ab2:	d102      	bne.n	8021aba <_read_r+0x1e>
 8021ab4:	682b      	ldr	r3, [r5, #0]
 8021ab6:	b103      	cbz	r3, 8021aba <_read_r+0x1e>
 8021ab8:	6023      	str	r3, [r4, #0]
 8021aba:	bd38      	pop	{r3, r4, r5, pc}
 8021abc:	20003a70 	.word	0x20003a70

08021ac0 <_kill_r>:
 8021ac0:	b538      	push	{r3, r4, r5, lr}
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	4d06      	ldr	r5, [pc, #24]	; (8021ae0 <_kill_r+0x20>)
 8021ac6:	4604      	mov	r4, r0
 8021ac8:	4608      	mov	r0, r1
 8021aca:	4611      	mov	r1, r2
 8021acc:	602b      	str	r3, [r5, #0]
 8021ace:	f7f0 fa85 	bl	8011fdc <_kill>
 8021ad2:	1c43      	adds	r3, r0, #1
 8021ad4:	d102      	bne.n	8021adc <_kill_r+0x1c>
 8021ad6:	682b      	ldr	r3, [r5, #0]
 8021ad8:	b103      	cbz	r3, 8021adc <_kill_r+0x1c>
 8021ada:	6023      	str	r3, [r4, #0]
 8021adc:	bd38      	pop	{r3, r4, r5, pc}
 8021ade:	bf00      	nop
 8021ae0:	20003a70 	.word	0x20003a70

08021ae4 <_getpid_r>:
 8021ae4:	f7f0 ba72 	b.w	8011fcc <_getpid>

08021ae8 <_sbrk_r>:
 8021ae8:	b538      	push	{r3, r4, r5, lr}
 8021aea:	2300      	movs	r3, #0
 8021aec:	4d05      	ldr	r5, [pc, #20]	; (8021b04 <_sbrk_r+0x1c>)
 8021aee:	4604      	mov	r4, r0
 8021af0:	4608      	mov	r0, r1
 8021af2:	602b      	str	r3, [r5, #0]
 8021af4:	f7f0 fafa 	bl	80120ec <_sbrk>
 8021af8:	1c43      	adds	r3, r0, #1
 8021afa:	d102      	bne.n	8021b02 <_sbrk_r+0x1a>
 8021afc:	682b      	ldr	r3, [r5, #0]
 8021afe:	b103      	cbz	r3, 8021b02 <_sbrk_r+0x1a>
 8021b00:	6023      	str	r3, [r4, #0]
 8021b02:	bd38      	pop	{r3, r4, r5, pc}
 8021b04:	20003a70 	.word	0x20003a70

08021b08 <_write_r>:
 8021b08:	b538      	push	{r3, r4, r5, lr}
 8021b0a:	4604      	mov	r4, r0
 8021b0c:	4d06      	ldr	r5, [pc, #24]	; (8021b28 <_write_r+0x20>)
 8021b0e:	4608      	mov	r0, r1
 8021b10:	4611      	mov	r1, r2
 8021b12:	2200      	movs	r2, #0
 8021b14:	602a      	str	r2, [r5, #0]
 8021b16:	461a      	mov	r2, r3
 8021b18:	f7f0 fa97 	bl	801204a <_write>
 8021b1c:	1c43      	adds	r3, r0, #1
 8021b1e:	d102      	bne.n	8021b26 <_write_r+0x1e>
 8021b20:	682b      	ldr	r3, [r5, #0]
 8021b22:	b103      	cbz	r3, 8021b26 <_write_r+0x1e>
 8021b24:	6023      	str	r3, [r4, #0]
 8021b26:	bd38      	pop	{r3, r4, r5, pc}
 8021b28:	20003a70 	.word	0x20003a70

08021b2c <__errno>:
 8021b2c:	4b01      	ldr	r3, [pc, #4]	; (8021b34 <__errno+0x8>)
 8021b2e:	6818      	ldr	r0, [r3, #0]
 8021b30:	4770      	bx	lr
 8021b32:	bf00      	nop
 8021b34:	20000108 	.word	0x20000108

08021b38 <__libc_init_array>:
 8021b38:	b570      	push	{r4, r5, r6, lr}
 8021b3a:	4d0d      	ldr	r5, [pc, #52]	; (8021b70 <__libc_init_array+0x38>)
 8021b3c:	2600      	movs	r6, #0
 8021b3e:	4c0d      	ldr	r4, [pc, #52]	; (8021b74 <__libc_init_array+0x3c>)
 8021b40:	1b64      	subs	r4, r4, r5
 8021b42:	10a4      	asrs	r4, r4, #2
 8021b44:	42a6      	cmp	r6, r4
 8021b46:	d109      	bne.n	8021b5c <__libc_init_array+0x24>
 8021b48:	4d0b      	ldr	r5, [pc, #44]	; (8021b78 <__libc_init_array+0x40>)
 8021b4a:	2600      	movs	r6, #0
 8021b4c:	4c0b      	ldr	r4, [pc, #44]	; (8021b7c <__libc_init_array+0x44>)
 8021b4e:	f001 fa0b 	bl	8022f68 <_init>
 8021b52:	1b64      	subs	r4, r4, r5
 8021b54:	10a4      	asrs	r4, r4, #2
 8021b56:	42a6      	cmp	r6, r4
 8021b58:	d105      	bne.n	8021b66 <__libc_init_array+0x2e>
 8021b5a:	bd70      	pop	{r4, r5, r6, pc}
 8021b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021b60:	3601      	adds	r6, #1
 8021b62:	4798      	blx	r3
 8021b64:	e7ee      	b.n	8021b44 <__libc_init_array+0xc>
 8021b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8021b6a:	3601      	adds	r6, #1
 8021b6c:	4798      	blx	r3
 8021b6e:	e7f2      	b.n	8021b56 <__libc_init_array+0x1e>
 8021b70:	080238dc 	.word	0x080238dc
 8021b74:	080238dc 	.word	0x080238dc
 8021b78:	080238dc 	.word	0x080238dc
 8021b7c:	080238e0 	.word	0x080238e0

08021b80 <__retarget_lock_init_recursive>:
 8021b80:	4770      	bx	lr

08021b82 <__retarget_lock_acquire_recursive>:
 8021b82:	4770      	bx	lr

08021b84 <__retarget_lock_release_recursive>:
 8021b84:	4770      	bx	lr

08021b86 <memcpy>:
 8021b86:	440a      	add	r2, r1
 8021b88:	1e43      	subs	r3, r0, #1
 8021b8a:	4291      	cmp	r1, r2
 8021b8c:	d100      	bne.n	8021b90 <memcpy+0xa>
 8021b8e:	4770      	bx	lr
 8021b90:	b510      	push	{r4, lr}
 8021b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021b96:	4291      	cmp	r1, r2
 8021b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021b9c:	d1f9      	bne.n	8021b92 <memcpy+0xc>
 8021b9e:	bd10      	pop	{r4, pc}

08021ba0 <__assert_func>:
 8021ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021ba2:	4614      	mov	r4, r2
 8021ba4:	461a      	mov	r2, r3
 8021ba6:	4b09      	ldr	r3, [pc, #36]	; (8021bcc <__assert_func+0x2c>)
 8021ba8:	4605      	mov	r5, r0
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	68d8      	ldr	r0, [r3, #12]
 8021bae:	b14c      	cbz	r4, 8021bc4 <__assert_func+0x24>
 8021bb0:	4b07      	ldr	r3, [pc, #28]	; (8021bd0 <__assert_func+0x30>)
 8021bb2:	9100      	str	r1, [sp, #0]
 8021bb4:	4907      	ldr	r1, [pc, #28]	; (8021bd4 <__assert_func+0x34>)
 8021bb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021bba:	462b      	mov	r3, r5
 8021bbc:	f000 fc24 	bl	8022408 <fiprintf>
 8021bc0:	f7ff fcc3 	bl	802154a <abort>
 8021bc4:	4b04      	ldr	r3, [pc, #16]	; (8021bd8 <__assert_func+0x38>)
 8021bc6:	461c      	mov	r4, r3
 8021bc8:	e7f3      	b.n	8021bb2 <__assert_func+0x12>
 8021bca:	bf00      	nop
 8021bcc:	20000108 	.word	0x20000108
 8021bd0:	08023747 	.word	0x08023747
 8021bd4:	08023754 	.word	0x08023754
 8021bd8:	08023782 	.word	0x08023782

08021bdc <_free_r>:
 8021bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021bde:	2900      	cmp	r1, #0
 8021be0:	d043      	beq.n	8021c6a <_free_r+0x8e>
 8021be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021be6:	1f0c      	subs	r4, r1, #4
 8021be8:	9001      	str	r0, [sp, #4]
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	bfb8      	it	lt
 8021bee:	18e4      	addlt	r4, r4, r3
 8021bf0:	f7ff fd62 	bl	80216b8 <__malloc_lock>
 8021bf4:	4a1e      	ldr	r2, [pc, #120]	; (8021c70 <_free_r+0x94>)
 8021bf6:	9801      	ldr	r0, [sp, #4]
 8021bf8:	6813      	ldr	r3, [r2, #0]
 8021bfa:	b933      	cbnz	r3, 8021c0a <_free_r+0x2e>
 8021bfc:	6063      	str	r3, [r4, #4]
 8021bfe:	6014      	str	r4, [r2, #0]
 8021c00:	b003      	add	sp, #12
 8021c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021c06:	f7ff bd5d 	b.w	80216c4 <__malloc_unlock>
 8021c0a:	42a3      	cmp	r3, r4
 8021c0c:	d908      	bls.n	8021c20 <_free_r+0x44>
 8021c0e:	6825      	ldr	r5, [r4, #0]
 8021c10:	1961      	adds	r1, r4, r5
 8021c12:	428b      	cmp	r3, r1
 8021c14:	bf01      	itttt	eq
 8021c16:	6819      	ldreq	r1, [r3, #0]
 8021c18:	685b      	ldreq	r3, [r3, #4]
 8021c1a:	1949      	addeq	r1, r1, r5
 8021c1c:	6021      	streq	r1, [r4, #0]
 8021c1e:	e7ed      	b.n	8021bfc <_free_r+0x20>
 8021c20:	461a      	mov	r2, r3
 8021c22:	685b      	ldr	r3, [r3, #4]
 8021c24:	b10b      	cbz	r3, 8021c2a <_free_r+0x4e>
 8021c26:	42a3      	cmp	r3, r4
 8021c28:	d9fa      	bls.n	8021c20 <_free_r+0x44>
 8021c2a:	6811      	ldr	r1, [r2, #0]
 8021c2c:	1855      	adds	r5, r2, r1
 8021c2e:	42a5      	cmp	r5, r4
 8021c30:	d10b      	bne.n	8021c4a <_free_r+0x6e>
 8021c32:	6824      	ldr	r4, [r4, #0]
 8021c34:	4421      	add	r1, r4
 8021c36:	1854      	adds	r4, r2, r1
 8021c38:	6011      	str	r1, [r2, #0]
 8021c3a:	42a3      	cmp	r3, r4
 8021c3c:	d1e0      	bne.n	8021c00 <_free_r+0x24>
 8021c3e:	681c      	ldr	r4, [r3, #0]
 8021c40:	685b      	ldr	r3, [r3, #4]
 8021c42:	440c      	add	r4, r1
 8021c44:	6053      	str	r3, [r2, #4]
 8021c46:	6014      	str	r4, [r2, #0]
 8021c48:	e7da      	b.n	8021c00 <_free_r+0x24>
 8021c4a:	d902      	bls.n	8021c52 <_free_r+0x76>
 8021c4c:	230c      	movs	r3, #12
 8021c4e:	6003      	str	r3, [r0, #0]
 8021c50:	e7d6      	b.n	8021c00 <_free_r+0x24>
 8021c52:	6825      	ldr	r5, [r4, #0]
 8021c54:	1961      	adds	r1, r4, r5
 8021c56:	428b      	cmp	r3, r1
 8021c58:	bf02      	ittt	eq
 8021c5a:	6819      	ldreq	r1, [r3, #0]
 8021c5c:	685b      	ldreq	r3, [r3, #4]
 8021c5e:	1949      	addeq	r1, r1, r5
 8021c60:	6063      	str	r3, [r4, #4]
 8021c62:	bf08      	it	eq
 8021c64:	6021      	streq	r1, [r4, #0]
 8021c66:	6054      	str	r4, [r2, #4]
 8021c68:	e7ca      	b.n	8021c00 <_free_r+0x24>
 8021c6a:	b003      	add	sp, #12
 8021c6c:	bd30      	pop	{r4, r5, pc}
 8021c6e:	bf00      	nop
 8021c70:	2000392c 	.word	0x2000392c

08021c74 <_sungetc_r>:
 8021c74:	b538      	push	{r3, r4, r5, lr}
 8021c76:	1c4b      	adds	r3, r1, #1
 8021c78:	4614      	mov	r4, r2
 8021c7a:	d103      	bne.n	8021c84 <_sungetc_r+0x10>
 8021c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8021c80:	4628      	mov	r0, r5
 8021c82:	bd38      	pop	{r3, r4, r5, pc}
 8021c84:	8993      	ldrh	r3, [r2, #12]
 8021c86:	b2cd      	uxtb	r5, r1
 8021c88:	f023 0320 	bic.w	r3, r3, #32
 8021c8c:	8193      	strh	r3, [r2, #12]
 8021c8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021c90:	6852      	ldr	r2, [r2, #4]
 8021c92:	b18b      	cbz	r3, 8021cb8 <_sungetc_r+0x44>
 8021c94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021c96:	4293      	cmp	r3, r2
 8021c98:	dd08      	ble.n	8021cac <_sungetc_r+0x38>
 8021c9a:	6823      	ldr	r3, [r4, #0]
 8021c9c:	1e5a      	subs	r2, r3, #1
 8021c9e:	6022      	str	r2, [r4, #0]
 8021ca0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8021ca4:	6863      	ldr	r3, [r4, #4]
 8021ca6:	3301      	adds	r3, #1
 8021ca8:	6063      	str	r3, [r4, #4]
 8021caa:	e7e9      	b.n	8021c80 <_sungetc_r+0xc>
 8021cac:	4621      	mov	r1, r4
 8021cae:	f000 fbf6 	bl	802249e <__submore>
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	d0f1      	beq.n	8021c9a <_sungetc_r+0x26>
 8021cb6:	e7e1      	b.n	8021c7c <_sungetc_r+0x8>
 8021cb8:	6921      	ldr	r1, [r4, #16]
 8021cba:	6823      	ldr	r3, [r4, #0]
 8021cbc:	b151      	cbz	r1, 8021cd4 <_sungetc_r+0x60>
 8021cbe:	4299      	cmp	r1, r3
 8021cc0:	d208      	bcs.n	8021cd4 <_sungetc_r+0x60>
 8021cc2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8021cc6:	42a9      	cmp	r1, r5
 8021cc8:	d104      	bne.n	8021cd4 <_sungetc_r+0x60>
 8021cca:	3b01      	subs	r3, #1
 8021ccc:	3201      	adds	r2, #1
 8021cce:	6023      	str	r3, [r4, #0]
 8021cd0:	6062      	str	r2, [r4, #4]
 8021cd2:	e7d5      	b.n	8021c80 <_sungetc_r+0xc>
 8021cd4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8021cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8021cde:	2303      	movs	r3, #3
 8021ce0:	63a3      	str	r3, [r4, #56]	; 0x38
 8021ce2:	4623      	mov	r3, r4
 8021ce4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8021ce8:	6023      	str	r3, [r4, #0]
 8021cea:	2301      	movs	r3, #1
 8021cec:	e7dc      	b.n	8021ca8 <_sungetc_r+0x34>

08021cee <__ssrefill_r>:
 8021cee:	b510      	push	{r4, lr}
 8021cf0:	460c      	mov	r4, r1
 8021cf2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021cf4:	b169      	cbz	r1, 8021d12 <__ssrefill_r+0x24>
 8021cf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021cfa:	4299      	cmp	r1, r3
 8021cfc:	d001      	beq.n	8021d02 <__ssrefill_r+0x14>
 8021cfe:	f7ff ff6d 	bl	8021bdc <_free_r>
 8021d02:	2000      	movs	r0, #0
 8021d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021d06:	6360      	str	r0, [r4, #52]	; 0x34
 8021d08:	6063      	str	r3, [r4, #4]
 8021d0a:	b113      	cbz	r3, 8021d12 <__ssrefill_r+0x24>
 8021d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021d0e:	6023      	str	r3, [r4, #0]
 8021d10:	bd10      	pop	{r4, pc}
 8021d12:	6923      	ldr	r3, [r4, #16]
 8021d14:	f04f 30ff 	mov.w	r0, #4294967295
 8021d18:	6023      	str	r3, [r4, #0]
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	6063      	str	r3, [r4, #4]
 8021d1e:	89a3      	ldrh	r3, [r4, #12]
 8021d20:	f043 0320 	orr.w	r3, r3, #32
 8021d24:	81a3      	strh	r3, [r4, #12]
 8021d26:	e7f3      	b.n	8021d10 <__ssrefill_r+0x22>

08021d28 <__ssvfiscanf_r>:
 8021d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d2c:	460c      	mov	r4, r1
 8021d2e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8021d32:	2100      	movs	r1, #0
 8021d34:	4606      	mov	r6, r0
 8021d36:	f10d 0804 	add.w	r8, sp, #4
 8021d3a:	4fa6      	ldr	r7, [pc, #664]	; (8021fd4 <__ssvfiscanf_r+0x2ac>)
 8021d3c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8021fe0 <__ssvfiscanf_r+0x2b8>
 8021d40:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8021d44:	9300      	str	r3, [sp, #0]
 8021d46:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8021d4a:	49a3      	ldr	r1, [pc, #652]	; (8021fd8 <__ssvfiscanf_r+0x2b0>)
 8021d4c:	91a0      	str	r1, [sp, #640]	; 0x280
 8021d4e:	49a3      	ldr	r1, [pc, #652]	; (8021fdc <__ssvfiscanf_r+0x2b4>)
 8021d50:	91a1      	str	r1, [sp, #644]	; 0x284
 8021d52:	7813      	ldrb	r3, [r2, #0]
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	f000 815a 	beq.w	802200e <__ssvfiscanf_r+0x2e6>
 8021d5a:	5cf9      	ldrb	r1, [r7, r3]
 8021d5c:	1c55      	adds	r5, r2, #1
 8021d5e:	f011 0108 	ands.w	r1, r1, #8
 8021d62:	d019      	beq.n	8021d98 <__ssvfiscanf_r+0x70>
 8021d64:	6863      	ldr	r3, [r4, #4]
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	dd0f      	ble.n	8021d8a <__ssvfiscanf_r+0x62>
 8021d6a:	6823      	ldr	r3, [r4, #0]
 8021d6c:	781a      	ldrb	r2, [r3, #0]
 8021d6e:	5cba      	ldrb	r2, [r7, r2]
 8021d70:	0712      	lsls	r2, r2, #28
 8021d72:	d401      	bmi.n	8021d78 <__ssvfiscanf_r+0x50>
 8021d74:	462a      	mov	r2, r5
 8021d76:	e7ec      	b.n	8021d52 <__ssvfiscanf_r+0x2a>
 8021d78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021d7a:	3301      	adds	r3, #1
 8021d7c:	3201      	adds	r2, #1
 8021d7e:	6023      	str	r3, [r4, #0]
 8021d80:	9245      	str	r2, [sp, #276]	; 0x114
 8021d82:	6862      	ldr	r2, [r4, #4]
 8021d84:	3a01      	subs	r2, #1
 8021d86:	6062      	str	r2, [r4, #4]
 8021d88:	e7ec      	b.n	8021d64 <__ssvfiscanf_r+0x3c>
 8021d8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021d8c:	4621      	mov	r1, r4
 8021d8e:	4630      	mov	r0, r6
 8021d90:	4798      	blx	r3
 8021d92:	2800      	cmp	r0, #0
 8021d94:	d0e9      	beq.n	8021d6a <__ssvfiscanf_r+0x42>
 8021d96:	e7ed      	b.n	8021d74 <__ssvfiscanf_r+0x4c>
 8021d98:	2b25      	cmp	r3, #37	; 0x25
 8021d9a:	d012      	beq.n	8021dc2 <__ssvfiscanf_r+0x9a>
 8021d9c:	469a      	mov	sl, r3
 8021d9e:	6863      	ldr	r3, [r4, #4]
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	f340 8092 	ble.w	8021eca <__ssvfiscanf_r+0x1a2>
 8021da6:	6822      	ldr	r2, [r4, #0]
 8021da8:	7813      	ldrb	r3, [r2, #0]
 8021daa:	4553      	cmp	r3, sl
 8021dac:	f040 812f 	bne.w	802200e <__ssvfiscanf_r+0x2e6>
 8021db0:	6863      	ldr	r3, [r4, #4]
 8021db2:	3201      	adds	r2, #1
 8021db4:	3b01      	subs	r3, #1
 8021db6:	6022      	str	r2, [r4, #0]
 8021db8:	6063      	str	r3, [r4, #4]
 8021dba:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8021dbc:	3301      	adds	r3, #1
 8021dbe:	9345      	str	r3, [sp, #276]	; 0x114
 8021dc0:	e7d8      	b.n	8021d74 <__ssvfiscanf_r+0x4c>
 8021dc2:	9141      	str	r1, [sp, #260]	; 0x104
 8021dc4:	9143      	str	r1, [sp, #268]	; 0x10c
 8021dc6:	7853      	ldrb	r3, [r2, #1]
 8021dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8021dca:	bf04      	itt	eq
 8021dcc:	2310      	moveq	r3, #16
 8021dce:	1c95      	addeq	r5, r2, #2
 8021dd0:	f04f 020a 	mov.w	r2, #10
 8021dd4:	bf08      	it	eq
 8021dd6:	9341      	streq	r3, [sp, #260]	; 0x104
 8021dd8:	46aa      	mov	sl, r5
 8021dda:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8021dde:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8021de2:	2b09      	cmp	r3, #9
 8021de4:	d91c      	bls.n	8021e20 <__ssvfiscanf_r+0xf8>
 8021de6:	2203      	movs	r2, #3
 8021de8:	487d      	ldr	r0, [pc, #500]	; (8021fe0 <__ssvfiscanf_r+0x2b8>)
 8021dea:	f000 fb8f 	bl	802250c <memchr>
 8021dee:	b138      	cbz	r0, 8021e00 <__ssvfiscanf_r+0xd8>
 8021df0:	eba0 0009 	sub.w	r0, r0, r9
 8021df4:	2301      	movs	r3, #1
 8021df6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021df8:	4655      	mov	r5, sl
 8021dfa:	4083      	lsls	r3, r0
 8021dfc:	4313      	orrs	r3, r2
 8021dfe:	9341      	str	r3, [sp, #260]	; 0x104
 8021e00:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021e04:	2b78      	cmp	r3, #120	; 0x78
 8021e06:	d806      	bhi.n	8021e16 <__ssvfiscanf_r+0xee>
 8021e08:	2b57      	cmp	r3, #87	; 0x57
 8021e0a:	d810      	bhi.n	8021e2e <__ssvfiscanf_r+0x106>
 8021e0c:	2b25      	cmp	r3, #37	; 0x25
 8021e0e:	d0c5      	beq.n	8021d9c <__ssvfiscanf_r+0x74>
 8021e10:	d856      	bhi.n	8021ec0 <__ssvfiscanf_r+0x198>
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	d064      	beq.n	8021ee0 <__ssvfiscanf_r+0x1b8>
 8021e16:	2303      	movs	r3, #3
 8021e18:	9347      	str	r3, [sp, #284]	; 0x11c
 8021e1a:	230a      	movs	r3, #10
 8021e1c:	9342      	str	r3, [sp, #264]	; 0x108
 8021e1e:	e075      	b.n	8021f0c <__ssvfiscanf_r+0x1e4>
 8021e20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8021e22:	4655      	mov	r5, sl
 8021e24:	fb02 1103 	mla	r1, r2, r3, r1
 8021e28:	3930      	subs	r1, #48	; 0x30
 8021e2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8021e2c:	e7d4      	b.n	8021dd8 <__ssvfiscanf_r+0xb0>
 8021e2e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8021e32:	2a20      	cmp	r2, #32
 8021e34:	d8ef      	bhi.n	8021e16 <__ssvfiscanf_r+0xee>
 8021e36:	a101      	add	r1, pc, #4	; (adr r1, 8021e3c <__ssvfiscanf_r+0x114>)
 8021e38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021e3c:	08021eef 	.word	0x08021eef
 8021e40:	08021e17 	.word	0x08021e17
 8021e44:	08021e17 	.word	0x08021e17
 8021e48:	08021f4d 	.word	0x08021f4d
 8021e4c:	08021e17 	.word	0x08021e17
 8021e50:	08021e17 	.word	0x08021e17
 8021e54:	08021e17 	.word	0x08021e17
 8021e58:	08021e17 	.word	0x08021e17
 8021e5c:	08021e17 	.word	0x08021e17
 8021e60:	08021e17 	.word	0x08021e17
 8021e64:	08021e17 	.word	0x08021e17
 8021e68:	08021f63 	.word	0x08021f63
 8021e6c:	08021f49 	.word	0x08021f49
 8021e70:	08021ec7 	.word	0x08021ec7
 8021e74:	08021ec7 	.word	0x08021ec7
 8021e78:	08021ec7 	.word	0x08021ec7
 8021e7c:	08021e17 	.word	0x08021e17
 8021e80:	08021f05 	.word	0x08021f05
 8021e84:	08021e17 	.word	0x08021e17
 8021e88:	08021e17 	.word	0x08021e17
 8021e8c:	08021e17 	.word	0x08021e17
 8021e90:	08021e17 	.word	0x08021e17
 8021e94:	08021f73 	.word	0x08021f73
 8021e98:	08021f41 	.word	0x08021f41
 8021e9c:	08021ee7 	.word	0x08021ee7
 8021ea0:	08021e17 	.word	0x08021e17
 8021ea4:	08021e17 	.word	0x08021e17
 8021ea8:	08021f6f 	.word	0x08021f6f
 8021eac:	08021e17 	.word	0x08021e17
 8021eb0:	08021f49 	.word	0x08021f49
 8021eb4:	08021e17 	.word	0x08021e17
 8021eb8:	08021e17 	.word	0x08021e17
 8021ebc:	08021eef 	.word	0x08021eef
 8021ec0:	3b45      	subs	r3, #69	; 0x45
 8021ec2:	2b02      	cmp	r3, #2
 8021ec4:	d8a7      	bhi.n	8021e16 <__ssvfiscanf_r+0xee>
 8021ec6:	2305      	movs	r3, #5
 8021ec8:	e01f      	b.n	8021f0a <__ssvfiscanf_r+0x1e2>
 8021eca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021ecc:	4621      	mov	r1, r4
 8021ece:	4630      	mov	r0, r6
 8021ed0:	4798      	blx	r3
 8021ed2:	2800      	cmp	r0, #0
 8021ed4:	f43f af67 	beq.w	8021da6 <__ssvfiscanf_r+0x7e>
 8021ed8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021eda:	2800      	cmp	r0, #0
 8021edc:	f040 808d 	bne.w	8021ffa <__ssvfiscanf_r+0x2d2>
 8021ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8021ee4:	e08f      	b.n	8022006 <__ssvfiscanf_r+0x2de>
 8021ee6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021ee8:	f042 0220 	orr.w	r2, r2, #32
 8021eec:	9241      	str	r2, [sp, #260]	; 0x104
 8021eee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021ef4:	9241      	str	r2, [sp, #260]	; 0x104
 8021ef6:	2210      	movs	r2, #16
 8021ef8:	2b6f      	cmp	r3, #111	; 0x6f
 8021efa:	9242      	str	r2, [sp, #264]	; 0x108
 8021efc:	bf34      	ite	cc
 8021efe:	2303      	movcc	r3, #3
 8021f00:	2304      	movcs	r3, #4
 8021f02:	e002      	b.n	8021f0a <__ssvfiscanf_r+0x1e2>
 8021f04:	2300      	movs	r3, #0
 8021f06:	9342      	str	r3, [sp, #264]	; 0x108
 8021f08:	2303      	movs	r3, #3
 8021f0a:	9347      	str	r3, [sp, #284]	; 0x11c
 8021f0c:	6863      	ldr	r3, [r4, #4]
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	dd3e      	ble.n	8021f90 <__ssvfiscanf_r+0x268>
 8021f12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021f14:	0659      	lsls	r1, r3, #25
 8021f16:	d404      	bmi.n	8021f22 <__ssvfiscanf_r+0x1fa>
 8021f18:	6823      	ldr	r3, [r4, #0]
 8021f1a:	781a      	ldrb	r2, [r3, #0]
 8021f1c:	5cba      	ldrb	r2, [r7, r2]
 8021f1e:	0712      	lsls	r2, r2, #28
 8021f20:	d43d      	bmi.n	8021f9e <__ssvfiscanf_r+0x276>
 8021f22:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021f24:	2b02      	cmp	r3, #2
 8021f26:	dc4c      	bgt.n	8021fc2 <__ssvfiscanf_r+0x29a>
 8021f28:	466b      	mov	r3, sp
 8021f2a:	4622      	mov	r2, r4
 8021f2c:	a941      	add	r1, sp, #260	; 0x104
 8021f2e:	4630      	mov	r0, r6
 8021f30:	f000 f872 	bl	8022018 <_scanf_chars>
 8021f34:	2801      	cmp	r0, #1
 8021f36:	d06a      	beq.n	802200e <__ssvfiscanf_r+0x2e6>
 8021f38:	2802      	cmp	r0, #2
 8021f3a:	f47f af1b 	bne.w	8021d74 <__ssvfiscanf_r+0x4c>
 8021f3e:	e7cb      	b.n	8021ed8 <__ssvfiscanf_r+0x1b0>
 8021f40:	2308      	movs	r3, #8
 8021f42:	9342      	str	r3, [sp, #264]	; 0x108
 8021f44:	2304      	movs	r3, #4
 8021f46:	e7e0      	b.n	8021f0a <__ssvfiscanf_r+0x1e2>
 8021f48:	220a      	movs	r2, #10
 8021f4a:	e7d5      	b.n	8021ef8 <__ssvfiscanf_r+0x1d0>
 8021f4c:	4629      	mov	r1, r5
 8021f4e:	4640      	mov	r0, r8
 8021f50:	f000 fa6c 	bl	802242c <__sccl>
 8021f54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021f56:	4605      	mov	r5, r0
 8021f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021f5c:	9341      	str	r3, [sp, #260]	; 0x104
 8021f5e:	2301      	movs	r3, #1
 8021f60:	e7d3      	b.n	8021f0a <__ssvfiscanf_r+0x1e2>
 8021f62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021f68:	9341      	str	r3, [sp, #260]	; 0x104
 8021f6a:	2300      	movs	r3, #0
 8021f6c:	e7cd      	b.n	8021f0a <__ssvfiscanf_r+0x1e2>
 8021f6e:	2302      	movs	r3, #2
 8021f70:	e7cb      	b.n	8021f0a <__ssvfiscanf_r+0x1e2>
 8021f72:	9841      	ldr	r0, [sp, #260]	; 0x104
 8021f74:	06c3      	lsls	r3, r0, #27
 8021f76:	f53f aefd 	bmi.w	8021d74 <__ssvfiscanf_r+0x4c>
 8021f7a:	9b00      	ldr	r3, [sp, #0]
 8021f7c:	07c0      	lsls	r0, r0, #31
 8021f7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021f80:	f103 0104 	add.w	r1, r3, #4
 8021f84:	9100      	str	r1, [sp, #0]
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	bf4c      	ite	mi
 8021f8a:	801a      	strhmi	r2, [r3, #0]
 8021f8c:	601a      	strpl	r2, [r3, #0]
 8021f8e:	e6f1      	b.n	8021d74 <__ssvfiscanf_r+0x4c>
 8021f90:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021f92:	4621      	mov	r1, r4
 8021f94:	4630      	mov	r0, r6
 8021f96:	4798      	blx	r3
 8021f98:	2800      	cmp	r0, #0
 8021f9a:	d0ba      	beq.n	8021f12 <__ssvfiscanf_r+0x1ea>
 8021f9c:	e79c      	b.n	8021ed8 <__ssvfiscanf_r+0x1b0>
 8021f9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021fa0:	3201      	adds	r2, #1
 8021fa2:	9245      	str	r2, [sp, #276]	; 0x114
 8021fa4:	6862      	ldr	r2, [r4, #4]
 8021fa6:	3a01      	subs	r2, #1
 8021fa8:	2a00      	cmp	r2, #0
 8021faa:	6062      	str	r2, [r4, #4]
 8021fac:	dd02      	ble.n	8021fb4 <__ssvfiscanf_r+0x28c>
 8021fae:	3301      	adds	r3, #1
 8021fb0:	6023      	str	r3, [r4, #0]
 8021fb2:	e7b1      	b.n	8021f18 <__ssvfiscanf_r+0x1f0>
 8021fb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021fb6:	4621      	mov	r1, r4
 8021fb8:	4630      	mov	r0, r6
 8021fba:	4798      	blx	r3
 8021fbc:	2800      	cmp	r0, #0
 8021fbe:	d0ab      	beq.n	8021f18 <__ssvfiscanf_r+0x1f0>
 8021fc0:	e78a      	b.n	8021ed8 <__ssvfiscanf_r+0x1b0>
 8021fc2:	2b04      	cmp	r3, #4
 8021fc4:	dc0e      	bgt.n	8021fe4 <__ssvfiscanf_r+0x2bc>
 8021fc6:	466b      	mov	r3, sp
 8021fc8:	4622      	mov	r2, r4
 8021fca:	a941      	add	r1, sp, #260	; 0x104
 8021fcc:	4630      	mov	r0, r6
 8021fce:	f000 f87d 	bl	80220cc <_scanf_i>
 8021fd2:	e7af      	b.n	8021f34 <__ssvfiscanf_r+0x20c>
 8021fd4:	080237a3 	.word	0x080237a3
 8021fd8:	08021c75 	.word	0x08021c75
 8021fdc:	08021cef 	.word	0x08021cef
 8021fe0:	08023783 	.word	0x08023783
 8021fe4:	4b0b      	ldr	r3, [pc, #44]	; (8022014 <__ssvfiscanf_r+0x2ec>)
 8021fe6:	2b00      	cmp	r3, #0
 8021fe8:	f43f aec4 	beq.w	8021d74 <__ssvfiscanf_r+0x4c>
 8021fec:	466b      	mov	r3, sp
 8021fee:	4622      	mov	r2, r4
 8021ff0:	a941      	add	r1, sp, #260	; 0x104
 8021ff2:	4630      	mov	r0, r6
 8021ff4:	f3af 8000 	nop.w
 8021ff8:	e79c      	b.n	8021f34 <__ssvfiscanf_r+0x20c>
 8021ffa:	89a3      	ldrh	r3, [r4, #12]
 8021ffc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022000:	bf18      	it	ne
 8022002:	f04f 30ff 	movne.w	r0, #4294967295
 8022006:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802200e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022010:	e7f9      	b.n	8022006 <__ssvfiscanf_r+0x2de>
 8022012:	bf00      	nop
 8022014:	00000000 	.word	0x00000000

08022018 <_scanf_chars>:
 8022018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802201c:	4615      	mov	r5, r2
 802201e:	688a      	ldr	r2, [r1, #8]
 8022020:	4680      	mov	r8, r0
 8022022:	460c      	mov	r4, r1
 8022024:	b932      	cbnz	r2, 8022034 <_scanf_chars+0x1c>
 8022026:	698a      	ldr	r2, [r1, #24]
 8022028:	2a00      	cmp	r2, #0
 802202a:	bf0c      	ite	eq
 802202c:	2201      	moveq	r2, #1
 802202e:	f04f 32ff 	movne.w	r2, #4294967295
 8022032:	608a      	str	r2, [r1, #8]
 8022034:	6822      	ldr	r2, [r4, #0]
 8022036:	2700      	movs	r7, #0
 8022038:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80220c8 <_scanf_chars+0xb0>
 802203c:	06d1      	lsls	r1, r2, #27
 802203e:	bf5f      	itttt	pl
 8022040:	681a      	ldrpl	r2, [r3, #0]
 8022042:	1d11      	addpl	r1, r2, #4
 8022044:	6019      	strpl	r1, [r3, #0]
 8022046:	6816      	ldrpl	r6, [r2, #0]
 8022048:	69a0      	ldr	r0, [r4, #24]
 802204a:	b188      	cbz	r0, 8022070 <_scanf_chars+0x58>
 802204c:	2801      	cmp	r0, #1
 802204e:	d107      	bne.n	8022060 <_scanf_chars+0x48>
 8022050:	682a      	ldr	r2, [r5, #0]
 8022052:	7811      	ldrb	r1, [r2, #0]
 8022054:	6962      	ldr	r2, [r4, #20]
 8022056:	5c52      	ldrb	r2, [r2, r1]
 8022058:	b952      	cbnz	r2, 8022070 <_scanf_chars+0x58>
 802205a:	2f00      	cmp	r7, #0
 802205c:	d031      	beq.n	80220c2 <_scanf_chars+0xaa>
 802205e:	e022      	b.n	80220a6 <_scanf_chars+0x8e>
 8022060:	2802      	cmp	r0, #2
 8022062:	d120      	bne.n	80220a6 <_scanf_chars+0x8e>
 8022064:	682b      	ldr	r3, [r5, #0]
 8022066:	781b      	ldrb	r3, [r3, #0]
 8022068:	f819 3003 	ldrb.w	r3, [r9, r3]
 802206c:	071b      	lsls	r3, r3, #28
 802206e:	d41a      	bmi.n	80220a6 <_scanf_chars+0x8e>
 8022070:	6823      	ldr	r3, [r4, #0]
 8022072:	3701      	adds	r7, #1
 8022074:	06da      	lsls	r2, r3, #27
 8022076:	bf5e      	ittt	pl
 8022078:	682b      	ldrpl	r3, [r5, #0]
 802207a:	781b      	ldrbpl	r3, [r3, #0]
 802207c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022080:	682a      	ldr	r2, [r5, #0]
 8022082:	686b      	ldr	r3, [r5, #4]
 8022084:	3201      	adds	r2, #1
 8022086:	3b01      	subs	r3, #1
 8022088:	602a      	str	r2, [r5, #0]
 802208a:	68a2      	ldr	r2, [r4, #8]
 802208c:	606b      	str	r3, [r5, #4]
 802208e:	3a01      	subs	r2, #1
 8022090:	60a2      	str	r2, [r4, #8]
 8022092:	b142      	cbz	r2, 80220a6 <_scanf_chars+0x8e>
 8022094:	2b00      	cmp	r3, #0
 8022096:	dcd7      	bgt.n	8022048 <_scanf_chars+0x30>
 8022098:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802209c:	4629      	mov	r1, r5
 802209e:	4640      	mov	r0, r8
 80220a0:	4798      	blx	r3
 80220a2:	2800      	cmp	r0, #0
 80220a4:	d0d0      	beq.n	8022048 <_scanf_chars+0x30>
 80220a6:	6823      	ldr	r3, [r4, #0]
 80220a8:	f013 0310 	ands.w	r3, r3, #16
 80220ac:	d105      	bne.n	80220ba <_scanf_chars+0xa2>
 80220ae:	68e2      	ldr	r2, [r4, #12]
 80220b0:	3201      	adds	r2, #1
 80220b2:	60e2      	str	r2, [r4, #12]
 80220b4:	69a2      	ldr	r2, [r4, #24]
 80220b6:	b102      	cbz	r2, 80220ba <_scanf_chars+0xa2>
 80220b8:	7033      	strb	r3, [r6, #0]
 80220ba:	6923      	ldr	r3, [r4, #16]
 80220bc:	2000      	movs	r0, #0
 80220be:	443b      	add	r3, r7
 80220c0:	6123      	str	r3, [r4, #16]
 80220c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80220c6:	bf00      	nop
 80220c8:	080237a3 	.word	0x080237a3

080220cc <_scanf_i>:
 80220cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220d0:	4698      	mov	r8, r3
 80220d2:	b087      	sub	sp, #28
 80220d4:	4b72      	ldr	r3, [pc, #456]	; (80222a0 <_scanf_i+0x1d4>)
 80220d6:	460c      	mov	r4, r1
 80220d8:	4682      	mov	sl, r0
 80220da:	4616      	mov	r6, r2
 80220dc:	4627      	mov	r7, r4
 80220de:	f04f 0b00 	mov.w	fp, #0
 80220e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80220e6:	ab03      	add	r3, sp, #12
 80220e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80220ec:	4b6d      	ldr	r3, [pc, #436]	; (80222a4 <_scanf_i+0x1d8>)
 80220ee:	69a1      	ldr	r1, [r4, #24]
 80220f0:	4a6d      	ldr	r2, [pc, #436]	; (80222a8 <_scanf_i+0x1dc>)
 80220f2:	2903      	cmp	r1, #3
 80220f4:	bf18      	it	ne
 80220f6:	461a      	movne	r2, r3
 80220f8:	68a3      	ldr	r3, [r4, #8]
 80220fa:	9201      	str	r2, [sp, #4]
 80220fc:	1e5a      	subs	r2, r3, #1
 80220fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022102:	bf89      	itett	hi
 8022104:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022108:	f04f 0900 	movls.w	r9, #0
 802210c:	eb03 0905 	addhi.w	r9, r3, r5
 8022110:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022114:	bf88      	it	hi
 8022116:	60a3      	strhi	r3, [r4, #8]
 8022118:	f857 3b1c 	ldr.w	r3, [r7], #28
 802211c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022120:	463d      	mov	r5, r7
 8022122:	6023      	str	r3, [r4, #0]
 8022124:	6831      	ldr	r1, [r6, #0]
 8022126:	ab03      	add	r3, sp, #12
 8022128:	2202      	movs	r2, #2
 802212a:	7809      	ldrb	r1, [r1, #0]
 802212c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022130:	f000 f9ec 	bl	802250c <memchr>
 8022134:	b328      	cbz	r0, 8022182 <_scanf_i+0xb6>
 8022136:	f1bb 0f01 	cmp.w	fp, #1
 802213a:	d159      	bne.n	80221f0 <_scanf_i+0x124>
 802213c:	6862      	ldr	r2, [r4, #4]
 802213e:	b92a      	cbnz	r2, 802214c <_scanf_i+0x80>
 8022140:	6822      	ldr	r2, [r4, #0]
 8022142:	2308      	movs	r3, #8
 8022144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022148:	6063      	str	r3, [r4, #4]
 802214a:	6022      	str	r2, [r4, #0]
 802214c:	6822      	ldr	r2, [r4, #0]
 802214e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022152:	6022      	str	r2, [r4, #0]
 8022154:	68a2      	ldr	r2, [r4, #8]
 8022156:	1e51      	subs	r1, r2, #1
 8022158:	60a1      	str	r1, [r4, #8]
 802215a:	b192      	cbz	r2, 8022182 <_scanf_i+0xb6>
 802215c:	6832      	ldr	r2, [r6, #0]
 802215e:	1c51      	adds	r1, r2, #1
 8022160:	6031      	str	r1, [r6, #0]
 8022162:	7812      	ldrb	r2, [r2, #0]
 8022164:	f805 2b01 	strb.w	r2, [r5], #1
 8022168:	6872      	ldr	r2, [r6, #4]
 802216a:	3a01      	subs	r2, #1
 802216c:	2a00      	cmp	r2, #0
 802216e:	6072      	str	r2, [r6, #4]
 8022170:	dc07      	bgt.n	8022182 <_scanf_i+0xb6>
 8022172:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022176:	4631      	mov	r1, r6
 8022178:	4650      	mov	r0, sl
 802217a:	4790      	blx	r2
 802217c:	2800      	cmp	r0, #0
 802217e:	f040 8085 	bne.w	802228c <_scanf_i+0x1c0>
 8022182:	f10b 0b01 	add.w	fp, fp, #1
 8022186:	f1bb 0f03 	cmp.w	fp, #3
 802218a:	d1cb      	bne.n	8022124 <_scanf_i+0x58>
 802218c:	6863      	ldr	r3, [r4, #4]
 802218e:	b90b      	cbnz	r3, 8022194 <_scanf_i+0xc8>
 8022190:	230a      	movs	r3, #10
 8022192:	6063      	str	r3, [r4, #4]
 8022194:	6863      	ldr	r3, [r4, #4]
 8022196:	f04f 0b00 	mov.w	fp, #0
 802219a:	4944      	ldr	r1, [pc, #272]	; (80222ac <_scanf_i+0x1e0>)
 802219c:	6960      	ldr	r0, [r4, #20]
 802219e:	1ac9      	subs	r1, r1, r3
 80221a0:	f000 f944 	bl	802242c <__sccl>
 80221a4:	68a3      	ldr	r3, [r4, #8]
 80221a6:	6822      	ldr	r2, [r4, #0]
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	d03d      	beq.n	8022228 <_scanf_i+0x15c>
 80221ac:	6831      	ldr	r1, [r6, #0]
 80221ae:	6960      	ldr	r0, [r4, #20]
 80221b0:	f891 c000 	ldrb.w	ip, [r1]
 80221b4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80221b8:	2800      	cmp	r0, #0
 80221ba:	d035      	beq.n	8022228 <_scanf_i+0x15c>
 80221bc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80221c0:	d124      	bne.n	802220c <_scanf_i+0x140>
 80221c2:	0510      	lsls	r0, r2, #20
 80221c4:	d522      	bpl.n	802220c <_scanf_i+0x140>
 80221c6:	f10b 0b01 	add.w	fp, fp, #1
 80221ca:	f1b9 0f00 	cmp.w	r9, #0
 80221ce:	d003      	beq.n	80221d8 <_scanf_i+0x10c>
 80221d0:	3301      	adds	r3, #1
 80221d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80221d6:	60a3      	str	r3, [r4, #8]
 80221d8:	6873      	ldr	r3, [r6, #4]
 80221da:	3b01      	subs	r3, #1
 80221dc:	2b00      	cmp	r3, #0
 80221de:	6073      	str	r3, [r6, #4]
 80221e0:	dd1b      	ble.n	802221a <_scanf_i+0x14e>
 80221e2:	6833      	ldr	r3, [r6, #0]
 80221e4:	3301      	adds	r3, #1
 80221e6:	6033      	str	r3, [r6, #0]
 80221e8:	68a3      	ldr	r3, [r4, #8]
 80221ea:	3b01      	subs	r3, #1
 80221ec:	60a3      	str	r3, [r4, #8]
 80221ee:	e7d9      	b.n	80221a4 <_scanf_i+0xd8>
 80221f0:	f1bb 0f02 	cmp.w	fp, #2
 80221f4:	d1ae      	bne.n	8022154 <_scanf_i+0x88>
 80221f6:	6822      	ldr	r2, [r4, #0]
 80221f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80221fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022200:	d1bf      	bne.n	8022182 <_scanf_i+0xb6>
 8022202:	2310      	movs	r3, #16
 8022204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022208:	6063      	str	r3, [r4, #4]
 802220a:	e7a2      	b.n	8022152 <_scanf_i+0x86>
 802220c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022210:	6022      	str	r2, [r4, #0]
 8022212:	780b      	ldrb	r3, [r1, #0]
 8022214:	f805 3b01 	strb.w	r3, [r5], #1
 8022218:	e7de      	b.n	80221d8 <_scanf_i+0x10c>
 802221a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802221e:	4631      	mov	r1, r6
 8022220:	4650      	mov	r0, sl
 8022222:	4798      	blx	r3
 8022224:	2800      	cmp	r0, #0
 8022226:	d0df      	beq.n	80221e8 <_scanf_i+0x11c>
 8022228:	6823      	ldr	r3, [r4, #0]
 802222a:	05d9      	lsls	r1, r3, #23
 802222c:	d50d      	bpl.n	802224a <_scanf_i+0x17e>
 802222e:	42bd      	cmp	r5, r7
 8022230:	d909      	bls.n	8022246 <_scanf_i+0x17a>
 8022232:	f105 39ff 	add.w	r9, r5, #4294967295
 8022236:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802223a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802223e:	4632      	mov	r2, r6
 8022240:	464d      	mov	r5, r9
 8022242:	4650      	mov	r0, sl
 8022244:	4798      	blx	r3
 8022246:	42bd      	cmp	r5, r7
 8022248:	d028      	beq.n	802229c <_scanf_i+0x1d0>
 802224a:	6822      	ldr	r2, [r4, #0]
 802224c:	f012 0210 	ands.w	r2, r2, #16
 8022250:	d113      	bne.n	802227a <_scanf_i+0x1ae>
 8022252:	702a      	strb	r2, [r5, #0]
 8022254:	4639      	mov	r1, r7
 8022256:	6863      	ldr	r3, [r4, #4]
 8022258:	4650      	mov	r0, sl
 802225a:	9e01      	ldr	r6, [sp, #4]
 802225c:	47b0      	blx	r6
 802225e:	f8d8 3000 	ldr.w	r3, [r8]
 8022262:	6821      	ldr	r1, [r4, #0]
 8022264:	1d1a      	adds	r2, r3, #4
 8022266:	f011 0f20 	tst.w	r1, #32
 802226a:	f8c8 2000 	str.w	r2, [r8]
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	d00f      	beq.n	8022292 <_scanf_i+0x1c6>
 8022272:	6018      	str	r0, [r3, #0]
 8022274:	68e3      	ldr	r3, [r4, #12]
 8022276:	3301      	adds	r3, #1
 8022278:	60e3      	str	r3, [r4, #12]
 802227a:	1bed      	subs	r5, r5, r7
 802227c:	6923      	ldr	r3, [r4, #16]
 802227e:	2000      	movs	r0, #0
 8022280:	445d      	add	r5, fp
 8022282:	442b      	add	r3, r5
 8022284:	6123      	str	r3, [r4, #16]
 8022286:	b007      	add	sp, #28
 8022288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802228c:	f04f 0b00 	mov.w	fp, #0
 8022290:	e7ca      	b.n	8022228 <_scanf_i+0x15c>
 8022292:	07ca      	lsls	r2, r1, #31
 8022294:	bf4c      	ite	mi
 8022296:	8018      	strhmi	r0, [r3, #0]
 8022298:	6018      	strpl	r0, [r3, #0]
 802229a:	e7eb      	b.n	8022274 <_scanf_i+0x1a8>
 802229c:	2001      	movs	r0, #1
 802229e:	e7f2      	b.n	8022286 <_scanf_i+0x1ba>
 80222a0:	080230fc 	.word	0x080230fc
 80222a4:	08022775 	.word	0x08022775
 80222a8:	0802268d 	.word	0x0802268d
 80222ac:	08023797 	.word	0x08023797

080222b0 <__sflush_r>:
 80222b0:	898a      	ldrh	r2, [r1, #12]
 80222b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222b6:	4605      	mov	r5, r0
 80222b8:	0710      	lsls	r0, r2, #28
 80222ba:	460c      	mov	r4, r1
 80222bc:	d458      	bmi.n	8022370 <__sflush_r+0xc0>
 80222be:	684b      	ldr	r3, [r1, #4]
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	dc05      	bgt.n	80222d0 <__sflush_r+0x20>
 80222c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	dc02      	bgt.n	80222d0 <__sflush_r+0x20>
 80222ca:	2000      	movs	r0, #0
 80222cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222d2:	2e00      	cmp	r6, #0
 80222d4:	d0f9      	beq.n	80222ca <__sflush_r+0x1a>
 80222d6:	2300      	movs	r3, #0
 80222d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80222dc:	682f      	ldr	r7, [r5, #0]
 80222de:	6a21      	ldr	r1, [r4, #32]
 80222e0:	602b      	str	r3, [r5, #0]
 80222e2:	d032      	beq.n	802234a <__sflush_r+0x9a>
 80222e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80222e6:	89a3      	ldrh	r3, [r4, #12]
 80222e8:	075a      	lsls	r2, r3, #29
 80222ea:	d505      	bpl.n	80222f8 <__sflush_r+0x48>
 80222ec:	6863      	ldr	r3, [r4, #4]
 80222ee:	1ac0      	subs	r0, r0, r3
 80222f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80222f2:	b10b      	cbz	r3, 80222f8 <__sflush_r+0x48>
 80222f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80222f6:	1ac0      	subs	r0, r0, r3
 80222f8:	2300      	movs	r3, #0
 80222fa:	4602      	mov	r2, r0
 80222fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80222fe:	4628      	mov	r0, r5
 8022300:	6a21      	ldr	r1, [r4, #32]
 8022302:	47b0      	blx	r6
 8022304:	1c43      	adds	r3, r0, #1
 8022306:	89a3      	ldrh	r3, [r4, #12]
 8022308:	d106      	bne.n	8022318 <__sflush_r+0x68>
 802230a:	6829      	ldr	r1, [r5, #0]
 802230c:	291d      	cmp	r1, #29
 802230e:	d82b      	bhi.n	8022368 <__sflush_r+0xb8>
 8022310:	4a28      	ldr	r2, [pc, #160]	; (80223b4 <__sflush_r+0x104>)
 8022312:	410a      	asrs	r2, r1
 8022314:	07d6      	lsls	r6, r2, #31
 8022316:	d427      	bmi.n	8022368 <__sflush_r+0xb8>
 8022318:	2200      	movs	r2, #0
 802231a:	04d9      	lsls	r1, r3, #19
 802231c:	6062      	str	r2, [r4, #4]
 802231e:	6922      	ldr	r2, [r4, #16]
 8022320:	6022      	str	r2, [r4, #0]
 8022322:	d504      	bpl.n	802232e <__sflush_r+0x7e>
 8022324:	1c42      	adds	r2, r0, #1
 8022326:	d101      	bne.n	802232c <__sflush_r+0x7c>
 8022328:	682b      	ldr	r3, [r5, #0]
 802232a:	b903      	cbnz	r3, 802232e <__sflush_r+0x7e>
 802232c:	6560      	str	r0, [r4, #84]	; 0x54
 802232e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022330:	602f      	str	r7, [r5, #0]
 8022332:	2900      	cmp	r1, #0
 8022334:	d0c9      	beq.n	80222ca <__sflush_r+0x1a>
 8022336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802233a:	4299      	cmp	r1, r3
 802233c:	d002      	beq.n	8022344 <__sflush_r+0x94>
 802233e:	4628      	mov	r0, r5
 8022340:	f7ff fc4c 	bl	8021bdc <_free_r>
 8022344:	2000      	movs	r0, #0
 8022346:	6360      	str	r0, [r4, #52]	; 0x34
 8022348:	e7c0      	b.n	80222cc <__sflush_r+0x1c>
 802234a:	2301      	movs	r3, #1
 802234c:	4628      	mov	r0, r5
 802234e:	47b0      	blx	r6
 8022350:	1c41      	adds	r1, r0, #1
 8022352:	d1c8      	bne.n	80222e6 <__sflush_r+0x36>
 8022354:	682b      	ldr	r3, [r5, #0]
 8022356:	2b00      	cmp	r3, #0
 8022358:	d0c5      	beq.n	80222e6 <__sflush_r+0x36>
 802235a:	2b1d      	cmp	r3, #29
 802235c:	d001      	beq.n	8022362 <__sflush_r+0xb2>
 802235e:	2b16      	cmp	r3, #22
 8022360:	d101      	bne.n	8022366 <__sflush_r+0xb6>
 8022362:	602f      	str	r7, [r5, #0]
 8022364:	e7b1      	b.n	80222ca <__sflush_r+0x1a>
 8022366:	89a3      	ldrh	r3, [r4, #12]
 8022368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802236c:	81a3      	strh	r3, [r4, #12]
 802236e:	e7ad      	b.n	80222cc <__sflush_r+0x1c>
 8022370:	690f      	ldr	r7, [r1, #16]
 8022372:	2f00      	cmp	r7, #0
 8022374:	d0a9      	beq.n	80222ca <__sflush_r+0x1a>
 8022376:	0793      	lsls	r3, r2, #30
 8022378:	680e      	ldr	r6, [r1, #0]
 802237a:	600f      	str	r7, [r1, #0]
 802237c:	bf0c      	ite	eq
 802237e:	694b      	ldreq	r3, [r1, #20]
 8022380:	2300      	movne	r3, #0
 8022382:	eba6 0807 	sub.w	r8, r6, r7
 8022386:	608b      	str	r3, [r1, #8]
 8022388:	f1b8 0f00 	cmp.w	r8, #0
 802238c:	dd9d      	ble.n	80222ca <__sflush_r+0x1a>
 802238e:	4643      	mov	r3, r8
 8022390:	463a      	mov	r2, r7
 8022392:	6a21      	ldr	r1, [r4, #32]
 8022394:	4628      	mov	r0, r5
 8022396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022398:	47b0      	blx	r6
 802239a:	2800      	cmp	r0, #0
 802239c:	dc06      	bgt.n	80223ac <__sflush_r+0xfc>
 802239e:	89a3      	ldrh	r3, [r4, #12]
 80223a0:	f04f 30ff 	mov.w	r0, #4294967295
 80223a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80223a8:	81a3      	strh	r3, [r4, #12]
 80223aa:	e78f      	b.n	80222cc <__sflush_r+0x1c>
 80223ac:	4407      	add	r7, r0
 80223ae:	eba8 0800 	sub.w	r8, r8, r0
 80223b2:	e7e9      	b.n	8022388 <__sflush_r+0xd8>
 80223b4:	dfbffffe 	.word	0xdfbffffe

080223b8 <_fflush_r>:
 80223b8:	b538      	push	{r3, r4, r5, lr}
 80223ba:	690b      	ldr	r3, [r1, #16]
 80223bc:	4605      	mov	r5, r0
 80223be:	460c      	mov	r4, r1
 80223c0:	b913      	cbnz	r3, 80223c8 <_fflush_r+0x10>
 80223c2:	2500      	movs	r5, #0
 80223c4:	4628      	mov	r0, r5
 80223c6:	bd38      	pop	{r3, r4, r5, pc}
 80223c8:	b118      	cbz	r0, 80223d2 <_fflush_r+0x1a>
 80223ca:	6a03      	ldr	r3, [r0, #32]
 80223cc:	b90b      	cbnz	r3, 80223d2 <_fflush_r+0x1a>
 80223ce:	f7ff fa49 	bl	8021864 <__sinit>
 80223d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d0f3      	beq.n	80223c2 <_fflush_r+0xa>
 80223da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80223dc:	07d0      	lsls	r0, r2, #31
 80223de:	d404      	bmi.n	80223ea <_fflush_r+0x32>
 80223e0:	0599      	lsls	r1, r3, #22
 80223e2:	d402      	bmi.n	80223ea <_fflush_r+0x32>
 80223e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223e6:	f7ff fbcc 	bl	8021b82 <__retarget_lock_acquire_recursive>
 80223ea:	4628      	mov	r0, r5
 80223ec:	4621      	mov	r1, r4
 80223ee:	f7ff ff5f 	bl	80222b0 <__sflush_r>
 80223f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223f4:	4605      	mov	r5, r0
 80223f6:	07da      	lsls	r2, r3, #31
 80223f8:	d4e4      	bmi.n	80223c4 <_fflush_r+0xc>
 80223fa:	89a3      	ldrh	r3, [r4, #12]
 80223fc:	059b      	lsls	r3, r3, #22
 80223fe:	d4e1      	bmi.n	80223c4 <_fflush_r+0xc>
 8022400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022402:	f7ff fbbf 	bl	8021b84 <__retarget_lock_release_recursive>
 8022406:	e7dd      	b.n	80223c4 <_fflush_r+0xc>

08022408 <fiprintf>:
 8022408:	b40e      	push	{r1, r2, r3}
 802240a:	b503      	push	{r0, r1, lr}
 802240c:	ab03      	add	r3, sp, #12
 802240e:	4601      	mov	r1, r0
 8022410:	4805      	ldr	r0, [pc, #20]	; (8022428 <fiprintf+0x20>)
 8022412:	f853 2b04 	ldr.w	r2, [r3], #4
 8022416:	6800      	ldr	r0, [r0, #0]
 8022418:	9301      	str	r3, [sp, #4]
 802241a:	f000 f9d7 	bl	80227cc <_vfiprintf_r>
 802241e:	b002      	add	sp, #8
 8022420:	f85d eb04 	ldr.w	lr, [sp], #4
 8022424:	b003      	add	sp, #12
 8022426:	4770      	bx	lr
 8022428:	20000108 	.word	0x20000108

0802242c <__sccl>:
 802242c:	b570      	push	{r4, r5, r6, lr}
 802242e:	780b      	ldrb	r3, [r1, #0]
 8022430:	4604      	mov	r4, r0
 8022432:	3801      	subs	r0, #1
 8022434:	2b5e      	cmp	r3, #94	; 0x5e
 8022436:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802243a:	bf13      	iteet	ne
 802243c:	1c4a      	addne	r2, r1, #1
 802243e:	1c8a      	addeq	r2, r1, #2
 8022440:	784b      	ldrbeq	r3, [r1, #1]
 8022442:	2100      	movne	r1, #0
 8022444:	bf08      	it	eq
 8022446:	2101      	moveq	r1, #1
 8022448:	f800 1f01 	strb.w	r1, [r0, #1]!
 802244c:	42a8      	cmp	r0, r5
 802244e:	d1fb      	bne.n	8022448 <__sccl+0x1c>
 8022450:	b90b      	cbnz	r3, 8022456 <__sccl+0x2a>
 8022452:	1e50      	subs	r0, r2, #1
 8022454:	bd70      	pop	{r4, r5, r6, pc}
 8022456:	f081 0101 	eor.w	r1, r1, #1
 802245a:	4610      	mov	r0, r2
 802245c:	54e1      	strb	r1, [r4, r3]
 802245e:	4602      	mov	r2, r0
 8022460:	f812 5b01 	ldrb.w	r5, [r2], #1
 8022464:	2d2d      	cmp	r5, #45	; 0x2d
 8022466:	d005      	beq.n	8022474 <__sccl+0x48>
 8022468:	2d5d      	cmp	r5, #93	; 0x5d
 802246a:	d016      	beq.n	802249a <__sccl+0x6e>
 802246c:	2d00      	cmp	r5, #0
 802246e:	d0f1      	beq.n	8022454 <__sccl+0x28>
 8022470:	462b      	mov	r3, r5
 8022472:	e7f2      	b.n	802245a <__sccl+0x2e>
 8022474:	7846      	ldrb	r6, [r0, #1]
 8022476:	2e5d      	cmp	r6, #93	; 0x5d
 8022478:	d0fa      	beq.n	8022470 <__sccl+0x44>
 802247a:	42b3      	cmp	r3, r6
 802247c:	dcf8      	bgt.n	8022470 <__sccl+0x44>
 802247e:	3002      	adds	r0, #2
 8022480:	461a      	mov	r2, r3
 8022482:	3201      	adds	r2, #1
 8022484:	4296      	cmp	r6, r2
 8022486:	54a1      	strb	r1, [r4, r2]
 8022488:	dcfb      	bgt.n	8022482 <__sccl+0x56>
 802248a:	1af2      	subs	r2, r6, r3
 802248c:	1c5d      	adds	r5, r3, #1
 802248e:	3a01      	subs	r2, #1
 8022490:	42b3      	cmp	r3, r6
 8022492:	bfa8      	it	ge
 8022494:	2200      	movge	r2, #0
 8022496:	18ab      	adds	r3, r5, r2
 8022498:	e7e1      	b.n	802245e <__sccl+0x32>
 802249a:	4610      	mov	r0, r2
 802249c:	e7da      	b.n	8022454 <__sccl+0x28>

0802249e <__submore>:
 802249e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224a2:	460c      	mov	r4, r1
 80224a4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80224a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80224aa:	4299      	cmp	r1, r3
 80224ac:	d11a      	bne.n	80224e4 <__submore+0x46>
 80224ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80224b2:	f7ff f881 	bl	80215b8 <_malloc_r>
 80224b6:	b918      	cbnz	r0, 80224c0 <__submore+0x22>
 80224b8:	f04f 30ff 	mov.w	r0, #4294967295
 80224bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80224c4:	6360      	str	r0, [r4, #52]	; 0x34
 80224c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80224ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80224cc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80224d0:	7083      	strb	r3, [r0, #2]
 80224d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80224d6:	7043      	strb	r3, [r0, #1]
 80224d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80224dc:	7003      	strb	r3, [r0, #0]
 80224de:	6020      	str	r0, [r4, #0]
 80224e0:	2000      	movs	r0, #0
 80224e2:	e7eb      	b.n	80224bc <__submore+0x1e>
 80224e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80224e6:	0077      	lsls	r7, r6, #1
 80224e8:	463a      	mov	r2, r7
 80224ea:	f000 f81d 	bl	8022528 <_realloc_r>
 80224ee:	4605      	mov	r5, r0
 80224f0:	2800      	cmp	r0, #0
 80224f2:	d0e1      	beq.n	80224b8 <__submore+0x1a>
 80224f4:	eb00 0806 	add.w	r8, r0, r6
 80224f8:	4601      	mov	r1, r0
 80224fa:	4632      	mov	r2, r6
 80224fc:	4640      	mov	r0, r8
 80224fe:	f7ff fb42 	bl	8021b86 <memcpy>
 8022502:	f8c4 8000 	str.w	r8, [r4]
 8022506:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802250a:	e7e9      	b.n	80224e0 <__submore+0x42>

0802250c <memchr>:
 802250c:	b2c9      	uxtb	r1, r1
 802250e:	4402      	add	r2, r0
 8022510:	b510      	push	{r4, lr}
 8022512:	4290      	cmp	r0, r2
 8022514:	4603      	mov	r3, r0
 8022516:	d101      	bne.n	802251c <memchr+0x10>
 8022518:	2300      	movs	r3, #0
 802251a:	e003      	b.n	8022524 <memchr+0x18>
 802251c:	781c      	ldrb	r4, [r3, #0]
 802251e:	3001      	adds	r0, #1
 8022520:	428c      	cmp	r4, r1
 8022522:	d1f6      	bne.n	8022512 <memchr+0x6>
 8022524:	4618      	mov	r0, r3
 8022526:	bd10      	pop	{r4, pc}

08022528 <_realloc_r>:
 8022528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802252c:	4680      	mov	r8, r0
 802252e:	4614      	mov	r4, r2
 8022530:	460e      	mov	r6, r1
 8022532:	b921      	cbnz	r1, 802253e <_realloc_r+0x16>
 8022534:	4611      	mov	r1, r2
 8022536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802253a:	f7ff b83d 	b.w	80215b8 <_malloc_r>
 802253e:	b92a      	cbnz	r2, 802254c <_realloc_r+0x24>
 8022540:	4625      	mov	r5, r4
 8022542:	f7ff fb4b 	bl	8021bdc <_free_r>
 8022546:	4628      	mov	r0, r5
 8022548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802254c:	f000 fc80 	bl	8022e50 <_malloc_usable_size_r>
 8022550:	4284      	cmp	r4, r0
 8022552:	4607      	mov	r7, r0
 8022554:	d802      	bhi.n	802255c <_realloc_r+0x34>
 8022556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802255a:	d812      	bhi.n	8022582 <_realloc_r+0x5a>
 802255c:	4621      	mov	r1, r4
 802255e:	4640      	mov	r0, r8
 8022560:	f7ff f82a 	bl	80215b8 <_malloc_r>
 8022564:	4605      	mov	r5, r0
 8022566:	2800      	cmp	r0, #0
 8022568:	d0ed      	beq.n	8022546 <_realloc_r+0x1e>
 802256a:	42bc      	cmp	r4, r7
 802256c:	4622      	mov	r2, r4
 802256e:	4631      	mov	r1, r6
 8022570:	bf28      	it	cs
 8022572:	463a      	movcs	r2, r7
 8022574:	f7ff fb07 	bl	8021b86 <memcpy>
 8022578:	4631      	mov	r1, r6
 802257a:	4640      	mov	r0, r8
 802257c:	f7ff fb2e 	bl	8021bdc <_free_r>
 8022580:	e7e1      	b.n	8022546 <_realloc_r+0x1e>
 8022582:	4635      	mov	r5, r6
 8022584:	e7df      	b.n	8022546 <_realloc_r+0x1e>
	...

08022588 <_strtol_l.constprop.0>:
 8022588:	2b01      	cmp	r3, #1
 802258a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802258e:	d001      	beq.n	8022594 <_strtol_l.constprop.0+0xc>
 8022590:	2b24      	cmp	r3, #36	; 0x24
 8022592:	d906      	bls.n	80225a2 <_strtol_l.constprop.0+0x1a>
 8022594:	f7ff faca 	bl	8021b2c <__errno>
 8022598:	2316      	movs	r3, #22
 802259a:	6003      	str	r3, [r0, #0]
 802259c:	2000      	movs	r0, #0
 802259e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225a2:	460d      	mov	r5, r1
 80225a4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8022688 <_strtol_l.constprop.0+0x100>
 80225a8:	462e      	mov	r6, r5
 80225aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80225ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80225b2:	f017 0708 	ands.w	r7, r7, #8
 80225b6:	d1f7      	bne.n	80225a8 <_strtol_l.constprop.0+0x20>
 80225b8:	2c2d      	cmp	r4, #45	; 0x2d
 80225ba:	d132      	bne.n	8022622 <_strtol_l.constprop.0+0x9a>
 80225bc:	782c      	ldrb	r4, [r5, #0]
 80225be:	2701      	movs	r7, #1
 80225c0:	1cb5      	adds	r5, r6, #2
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d05b      	beq.n	802267e <_strtol_l.constprop.0+0xf6>
 80225c6:	2b10      	cmp	r3, #16
 80225c8:	d109      	bne.n	80225de <_strtol_l.constprop.0+0x56>
 80225ca:	2c30      	cmp	r4, #48	; 0x30
 80225cc:	d107      	bne.n	80225de <_strtol_l.constprop.0+0x56>
 80225ce:	782c      	ldrb	r4, [r5, #0]
 80225d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80225d4:	2c58      	cmp	r4, #88	; 0x58
 80225d6:	d14d      	bne.n	8022674 <_strtol_l.constprop.0+0xec>
 80225d8:	786c      	ldrb	r4, [r5, #1]
 80225da:	2310      	movs	r3, #16
 80225dc:	3502      	adds	r5, #2
 80225de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80225e2:	f04f 0e00 	mov.w	lr, #0
 80225e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80225ea:	4676      	mov	r6, lr
 80225ec:	fbb8 f9f3 	udiv	r9, r8, r3
 80225f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80225f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80225f8:	f1bc 0f09 	cmp.w	ip, #9
 80225fc:	d816      	bhi.n	802262c <_strtol_l.constprop.0+0xa4>
 80225fe:	4664      	mov	r4, ip
 8022600:	42a3      	cmp	r3, r4
 8022602:	dd24      	ble.n	802264e <_strtol_l.constprop.0+0xc6>
 8022604:	f1be 3fff 	cmp.w	lr, #4294967295
 8022608:	d008      	beq.n	802261c <_strtol_l.constprop.0+0x94>
 802260a:	45b1      	cmp	r9, r6
 802260c:	d31c      	bcc.n	8022648 <_strtol_l.constprop.0+0xc0>
 802260e:	d101      	bne.n	8022614 <_strtol_l.constprop.0+0x8c>
 8022610:	45a2      	cmp	sl, r4
 8022612:	db19      	blt.n	8022648 <_strtol_l.constprop.0+0xc0>
 8022614:	fb06 4603 	mla	r6, r6, r3, r4
 8022618:	f04f 0e01 	mov.w	lr, #1
 802261c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022620:	e7e8      	b.n	80225f4 <_strtol_l.constprop.0+0x6c>
 8022622:	2c2b      	cmp	r4, #43	; 0x2b
 8022624:	bf04      	itt	eq
 8022626:	782c      	ldrbeq	r4, [r5, #0]
 8022628:	1cb5      	addeq	r5, r6, #2
 802262a:	e7ca      	b.n	80225c2 <_strtol_l.constprop.0+0x3a>
 802262c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8022630:	f1bc 0f19 	cmp.w	ip, #25
 8022634:	d801      	bhi.n	802263a <_strtol_l.constprop.0+0xb2>
 8022636:	3c37      	subs	r4, #55	; 0x37
 8022638:	e7e2      	b.n	8022600 <_strtol_l.constprop.0+0x78>
 802263a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802263e:	f1bc 0f19 	cmp.w	ip, #25
 8022642:	d804      	bhi.n	802264e <_strtol_l.constprop.0+0xc6>
 8022644:	3c57      	subs	r4, #87	; 0x57
 8022646:	e7db      	b.n	8022600 <_strtol_l.constprop.0+0x78>
 8022648:	f04f 3eff 	mov.w	lr, #4294967295
 802264c:	e7e6      	b.n	802261c <_strtol_l.constprop.0+0x94>
 802264e:	f1be 3fff 	cmp.w	lr, #4294967295
 8022652:	d105      	bne.n	8022660 <_strtol_l.constprop.0+0xd8>
 8022654:	2322      	movs	r3, #34	; 0x22
 8022656:	4646      	mov	r6, r8
 8022658:	6003      	str	r3, [r0, #0]
 802265a:	b942      	cbnz	r2, 802266e <_strtol_l.constprop.0+0xe6>
 802265c:	4630      	mov	r0, r6
 802265e:	e79e      	b.n	802259e <_strtol_l.constprop.0+0x16>
 8022660:	b107      	cbz	r7, 8022664 <_strtol_l.constprop.0+0xdc>
 8022662:	4276      	negs	r6, r6
 8022664:	2a00      	cmp	r2, #0
 8022666:	d0f9      	beq.n	802265c <_strtol_l.constprop.0+0xd4>
 8022668:	f1be 0f00 	cmp.w	lr, #0
 802266c:	d000      	beq.n	8022670 <_strtol_l.constprop.0+0xe8>
 802266e:	1e69      	subs	r1, r5, #1
 8022670:	6011      	str	r1, [r2, #0]
 8022672:	e7f3      	b.n	802265c <_strtol_l.constprop.0+0xd4>
 8022674:	2430      	movs	r4, #48	; 0x30
 8022676:	2b00      	cmp	r3, #0
 8022678:	d1b1      	bne.n	80225de <_strtol_l.constprop.0+0x56>
 802267a:	2308      	movs	r3, #8
 802267c:	e7af      	b.n	80225de <_strtol_l.constprop.0+0x56>
 802267e:	2c30      	cmp	r4, #48	; 0x30
 8022680:	d0a5      	beq.n	80225ce <_strtol_l.constprop.0+0x46>
 8022682:	230a      	movs	r3, #10
 8022684:	e7ab      	b.n	80225de <_strtol_l.constprop.0+0x56>
 8022686:	bf00      	nop
 8022688:	080237a3 	.word	0x080237a3

0802268c <_strtol_r>:
 802268c:	f7ff bf7c 	b.w	8022588 <_strtol_l.constprop.0>

08022690 <_strtoul_l.constprop.0>:
 8022690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022694:	4686      	mov	lr, r0
 8022696:	460d      	mov	r5, r1
 8022698:	4f35      	ldr	r7, [pc, #212]	; (8022770 <_strtoul_l.constprop.0+0xe0>)
 802269a:	4628      	mov	r0, r5
 802269c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80226a0:	5d3e      	ldrb	r6, [r7, r4]
 80226a2:	f016 0608 	ands.w	r6, r6, #8
 80226a6:	d1f8      	bne.n	802269a <_strtoul_l.constprop.0+0xa>
 80226a8:	2c2d      	cmp	r4, #45	; 0x2d
 80226aa:	d130      	bne.n	802270e <_strtoul_l.constprop.0+0x7e>
 80226ac:	782c      	ldrb	r4, [r5, #0]
 80226ae:	2601      	movs	r6, #1
 80226b0:	1c85      	adds	r5, r0, #2
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d057      	beq.n	8022766 <_strtoul_l.constprop.0+0xd6>
 80226b6:	2b10      	cmp	r3, #16
 80226b8:	d109      	bne.n	80226ce <_strtoul_l.constprop.0+0x3e>
 80226ba:	2c30      	cmp	r4, #48	; 0x30
 80226bc:	d107      	bne.n	80226ce <_strtoul_l.constprop.0+0x3e>
 80226be:	7828      	ldrb	r0, [r5, #0]
 80226c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80226c4:	2858      	cmp	r0, #88	; 0x58
 80226c6:	d149      	bne.n	802275c <_strtoul_l.constprop.0+0xcc>
 80226c8:	786c      	ldrb	r4, [r5, #1]
 80226ca:	2310      	movs	r3, #16
 80226cc:	3502      	adds	r5, #2
 80226ce:	f04f 38ff 	mov.w	r8, #4294967295
 80226d2:	2700      	movs	r7, #0
 80226d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80226d8:	fb03 f908 	mul.w	r9, r3, r8
 80226dc:	4638      	mov	r0, r7
 80226de:	ea6f 0909 	mvn.w	r9, r9
 80226e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80226e6:	f1bc 0f09 	cmp.w	ip, #9
 80226ea:	d815      	bhi.n	8022718 <_strtoul_l.constprop.0+0x88>
 80226ec:	4664      	mov	r4, ip
 80226ee:	42a3      	cmp	r3, r4
 80226f0:	dd23      	ble.n	802273a <_strtoul_l.constprop.0+0xaa>
 80226f2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80226f6:	d007      	beq.n	8022708 <_strtoul_l.constprop.0+0x78>
 80226f8:	4580      	cmp	r8, r0
 80226fa:	d31b      	bcc.n	8022734 <_strtoul_l.constprop.0+0xa4>
 80226fc:	d101      	bne.n	8022702 <_strtoul_l.constprop.0+0x72>
 80226fe:	45a1      	cmp	r9, r4
 8022700:	db18      	blt.n	8022734 <_strtoul_l.constprop.0+0xa4>
 8022702:	fb00 4003 	mla	r0, r0, r3, r4
 8022706:	2701      	movs	r7, #1
 8022708:	f815 4b01 	ldrb.w	r4, [r5], #1
 802270c:	e7e9      	b.n	80226e2 <_strtoul_l.constprop.0+0x52>
 802270e:	2c2b      	cmp	r4, #43	; 0x2b
 8022710:	bf04      	itt	eq
 8022712:	782c      	ldrbeq	r4, [r5, #0]
 8022714:	1c85      	addeq	r5, r0, #2
 8022716:	e7cc      	b.n	80226b2 <_strtoul_l.constprop.0+0x22>
 8022718:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802271c:	f1bc 0f19 	cmp.w	ip, #25
 8022720:	d801      	bhi.n	8022726 <_strtoul_l.constprop.0+0x96>
 8022722:	3c37      	subs	r4, #55	; 0x37
 8022724:	e7e3      	b.n	80226ee <_strtoul_l.constprop.0+0x5e>
 8022726:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802272a:	f1bc 0f19 	cmp.w	ip, #25
 802272e:	d804      	bhi.n	802273a <_strtoul_l.constprop.0+0xaa>
 8022730:	3c57      	subs	r4, #87	; 0x57
 8022732:	e7dc      	b.n	80226ee <_strtoul_l.constprop.0+0x5e>
 8022734:	f04f 37ff 	mov.w	r7, #4294967295
 8022738:	e7e6      	b.n	8022708 <_strtoul_l.constprop.0+0x78>
 802273a:	1c7b      	adds	r3, r7, #1
 802273c:	d106      	bne.n	802274c <_strtoul_l.constprop.0+0xbc>
 802273e:	2322      	movs	r3, #34	; 0x22
 8022740:	4638      	mov	r0, r7
 8022742:	f8ce 3000 	str.w	r3, [lr]
 8022746:	b932      	cbnz	r2, 8022756 <_strtoul_l.constprop.0+0xc6>
 8022748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802274c:	b106      	cbz	r6, 8022750 <_strtoul_l.constprop.0+0xc0>
 802274e:	4240      	negs	r0, r0
 8022750:	2a00      	cmp	r2, #0
 8022752:	d0f9      	beq.n	8022748 <_strtoul_l.constprop.0+0xb8>
 8022754:	b107      	cbz	r7, 8022758 <_strtoul_l.constprop.0+0xc8>
 8022756:	1e69      	subs	r1, r5, #1
 8022758:	6011      	str	r1, [r2, #0]
 802275a:	e7f5      	b.n	8022748 <_strtoul_l.constprop.0+0xb8>
 802275c:	2430      	movs	r4, #48	; 0x30
 802275e:	2b00      	cmp	r3, #0
 8022760:	d1b5      	bne.n	80226ce <_strtoul_l.constprop.0+0x3e>
 8022762:	2308      	movs	r3, #8
 8022764:	e7b3      	b.n	80226ce <_strtoul_l.constprop.0+0x3e>
 8022766:	2c30      	cmp	r4, #48	; 0x30
 8022768:	d0a9      	beq.n	80226be <_strtoul_l.constprop.0+0x2e>
 802276a:	230a      	movs	r3, #10
 802276c:	e7af      	b.n	80226ce <_strtoul_l.constprop.0+0x3e>
 802276e:	bf00      	nop
 8022770:	080237a3 	.word	0x080237a3

08022774 <_strtoul_r>:
 8022774:	f7ff bf8c 	b.w	8022690 <_strtoul_l.constprop.0>

08022778 <__sfputc_r>:
 8022778:	6893      	ldr	r3, [r2, #8]
 802277a:	3b01      	subs	r3, #1
 802277c:	2b00      	cmp	r3, #0
 802277e:	6093      	str	r3, [r2, #8]
 8022780:	b410      	push	{r4}
 8022782:	da08      	bge.n	8022796 <__sfputc_r+0x1e>
 8022784:	6994      	ldr	r4, [r2, #24]
 8022786:	42a3      	cmp	r3, r4
 8022788:	db01      	blt.n	802278e <__sfputc_r+0x16>
 802278a:	290a      	cmp	r1, #10
 802278c:	d103      	bne.n	8022796 <__sfputc_r+0x1e>
 802278e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022792:	f000 bac7 	b.w	8022d24 <__swbuf_r>
 8022796:	6813      	ldr	r3, [r2, #0]
 8022798:	1c58      	adds	r0, r3, #1
 802279a:	6010      	str	r0, [r2, #0]
 802279c:	4608      	mov	r0, r1
 802279e:	7019      	strb	r1, [r3, #0]
 80227a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80227a4:	4770      	bx	lr

080227a6 <__sfputs_r>:
 80227a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227a8:	4606      	mov	r6, r0
 80227aa:	460f      	mov	r7, r1
 80227ac:	4614      	mov	r4, r2
 80227ae:	18d5      	adds	r5, r2, r3
 80227b0:	42ac      	cmp	r4, r5
 80227b2:	d101      	bne.n	80227b8 <__sfputs_r+0x12>
 80227b4:	2000      	movs	r0, #0
 80227b6:	e007      	b.n	80227c8 <__sfputs_r+0x22>
 80227b8:	463a      	mov	r2, r7
 80227ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227be:	4630      	mov	r0, r6
 80227c0:	f7ff ffda 	bl	8022778 <__sfputc_r>
 80227c4:	1c43      	adds	r3, r0, #1
 80227c6:	d1f3      	bne.n	80227b0 <__sfputs_r+0xa>
 80227c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227cc <_vfiprintf_r>:
 80227cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227d0:	460d      	mov	r5, r1
 80227d2:	b09d      	sub	sp, #116	; 0x74
 80227d4:	4614      	mov	r4, r2
 80227d6:	4698      	mov	r8, r3
 80227d8:	4606      	mov	r6, r0
 80227da:	b118      	cbz	r0, 80227e4 <_vfiprintf_r+0x18>
 80227dc:	6a03      	ldr	r3, [r0, #32]
 80227de:	b90b      	cbnz	r3, 80227e4 <_vfiprintf_r+0x18>
 80227e0:	f7ff f840 	bl	8021864 <__sinit>
 80227e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227e6:	07d9      	lsls	r1, r3, #31
 80227e8:	d405      	bmi.n	80227f6 <_vfiprintf_r+0x2a>
 80227ea:	89ab      	ldrh	r3, [r5, #12]
 80227ec:	059a      	lsls	r2, r3, #22
 80227ee:	d402      	bmi.n	80227f6 <_vfiprintf_r+0x2a>
 80227f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227f2:	f7ff f9c6 	bl	8021b82 <__retarget_lock_acquire_recursive>
 80227f6:	89ab      	ldrh	r3, [r5, #12]
 80227f8:	071b      	lsls	r3, r3, #28
 80227fa:	d501      	bpl.n	8022800 <_vfiprintf_r+0x34>
 80227fc:	692b      	ldr	r3, [r5, #16]
 80227fe:	b99b      	cbnz	r3, 8022828 <_vfiprintf_r+0x5c>
 8022800:	4629      	mov	r1, r5
 8022802:	4630      	mov	r0, r6
 8022804:	f000 facc 	bl	8022da0 <__swsetup_r>
 8022808:	b170      	cbz	r0, 8022828 <_vfiprintf_r+0x5c>
 802280a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802280c:	07dc      	lsls	r4, r3, #31
 802280e:	d504      	bpl.n	802281a <_vfiprintf_r+0x4e>
 8022810:	f04f 30ff 	mov.w	r0, #4294967295
 8022814:	b01d      	add	sp, #116	; 0x74
 8022816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802281a:	89ab      	ldrh	r3, [r5, #12]
 802281c:	0598      	lsls	r0, r3, #22
 802281e:	d4f7      	bmi.n	8022810 <_vfiprintf_r+0x44>
 8022820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022822:	f7ff f9af 	bl	8021b84 <__retarget_lock_release_recursive>
 8022826:	e7f3      	b.n	8022810 <_vfiprintf_r+0x44>
 8022828:	2300      	movs	r3, #0
 802282a:	f8cd 800c 	str.w	r8, [sp, #12]
 802282e:	f04f 0901 	mov.w	r9, #1
 8022832:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80229ec <_vfiprintf_r+0x220>
 8022836:	9309      	str	r3, [sp, #36]	; 0x24
 8022838:	2320      	movs	r3, #32
 802283a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802283e:	2330      	movs	r3, #48	; 0x30
 8022840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022844:	4623      	mov	r3, r4
 8022846:	469a      	mov	sl, r3
 8022848:	f813 2b01 	ldrb.w	r2, [r3], #1
 802284c:	b10a      	cbz	r2, 8022852 <_vfiprintf_r+0x86>
 802284e:	2a25      	cmp	r2, #37	; 0x25
 8022850:	d1f9      	bne.n	8022846 <_vfiprintf_r+0x7a>
 8022852:	ebba 0b04 	subs.w	fp, sl, r4
 8022856:	d00b      	beq.n	8022870 <_vfiprintf_r+0xa4>
 8022858:	465b      	mov	r3, fp
 802285a:	4622      	mov	r2, r4
 802285c:	4629      	mov	r1, r5
 802285e:	4630      	mov	r0, r6
 8022860:	f7ff ffa1 	bl	80227a6 <__sfputs_r>
 8022864:	3001      	adds	r0, #1
 8022866:	f000 80a9 	beq.w	80229bc <_vfiprintf_r+0x1f0>
 802286a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802286c:	445a      	add	r2, fp
 802286e:	9209      	str	r2, [sp, #36]	; 0x24
 8022870:	f89a 3000 	ldrb.w	r3, [sl]
 8022874:	2b00      	cmp	r3, #0
 8022876:	f000 80a1 	beq.w	80229bc <_vfiprintf_r+0x1f0>
 802287a:	2300      	movs	r3, #0
 802287c:	f04f 32ff 	mov.w	r2, #4294967295
 8022880:	f10a 0a01 	add.w	sl, sl, #1
 8022884:	9304      	str	r3, [sp, #16]
 8022886:	9307      	str	r3, [sp, #28]
 8022888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802288c:	931a      	str	r3, [sp, #104]	; 0x68
 802288e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022892:	4654      	mov	r4, sl
 8022894:	2205      	movs	r2, #5
 8022896:	4855      	ldr	r0, [pc, #340]	; (80229ec <_vfiprintf_r+0x220>)
 8022898:	f814 1b01 	ldrb.w	r1, [r4], #1
 802289c:	f7ff fe36 	bl	802250c <memchr>
 80228a0:	9a04      	ldr	r2, [sp, #16]
 80228a2:	b9d8      	cbnz	r0, 80228dc <_vfiprintf_r+0x110>
 80228a4:	06d1      	lsls	r1, r2, #27
 80228a6:	bf44      	itt	mi
 80228a8:	2320      	movmi	r3, #32
 80228aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228ae:	0713      	lsls	r3, r2, #28
 80228b0:	bf44      	itt	mi
 80228b2:	232b      	movmi	r3, #43	; 0x2b
 80228b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228b8:	f89a 3000 	ldrb.w	r3, [sl]
 80228bc:	2b2a      	cmp	r3, #42	; 0x2a
 80228be:	d015      	beq.n	80228ec <_vfiprintf_r+0x120>
 80228c0:	9a07      	ldr	r2, [sp, #28]
 80228c2:	4654      	mov	r4, sl
 80228c4:	2000      	movs	r0, #0
 80228c6:	f04f 0c0a 	mov.w	ip, #10
 80228ca:	4621      	mov	r1, r4
 80228cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80228d0:	3b30      	subs	r3, #48	; 0x30
 80228d2:	2b09      	cmp	r3, #9
 80228d4:	d94d      	bls.n	8022972 <_vfiprintf_r+0x1a6>
 80228d6:	b1b0      	cbz	r0, 8022906 <_vfiprintf_r+0x13a>
 80228d8:	9207      	str	r2, [sp, #28]
 80228da:	e014      	b.n	8022906 <_vfiprintf_r+0x13a>
 80228dc:	eba0 0308 	sub.w	r3, r0, r8
 80228e0:	46a2      	mov	sl, r4
 80228e2:	fa09 f303 	lsl.w	r3, r9, r3
 80228e6:	4313      	orrs	r3, r2
 80228e8:	9304      	str	r3, [sp, #16]
 80228ea:	e7d2      	b.n	8022892 <_vfiprintf_r+0xc6>
 80228ec:	9b03      	ldr	r3, [sp, #12]
 80228ee:	1d19      	adds	r1, r3, #4
 80228f0:	681b      	ldr	r3, [r3, #0]
 80228f2:	2b00      	cmp	r3, #0
 80228f4:	9103      	str	r1, [sp, #12]
 80228f6:	bfbb      	ittet	lt
 80228f8:	425b      	neglt	r3, r3
 80228fa:	f042 0202 	orrlt.w	r2, r2, #2
 80228fe:	9307      	strge	r3, [sp, #28]
 8022900:	9307      	strlt	r3, [sp, #28]
 8022902:	bfb8      	it	lt
 8022904:	9204      	strlt	r2, [sp, #16]
 8022906:	7823      	ldrb	r3, [r4, #0]
 8022908:	2b2e      	cmp	r3, #46	; 0x2e
 802290a:	d10c      	bne.n	8022926 <_vfiprintf_r+0x15a>
 802290c:	7863      	ldrb	r3, [r4, #1]
 802290e:	2b2a      	cmp	r3, #42	; 0x2a
 8022910:	d134      	bne.n	802297c <_vfiprintf_r+0x1b0>
 8022912:	9b03      	ldr	r3, [sp, #12]
 8022914:	3402      	adds	r4, #2
 8022916:	1d1a      	adds	r2, r3, #4
 8022918:	681b      	ldr	r3, [r3, #0]
 802291a:	2b00      	cmp	r3, #0
 802291c:	9203      	str	r2, [sp, #12]
 802291e:	bfb8      	it	lt
 8022920:	f04f 33ff 	movlt.w	r3, #4294967295
 8022924:	9305      	str	r3, [sp, #20]
 8022926:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80229fc <_vfiprintf_r+0x230>
 802292a:	2203      	movs	r2, #3
 802292c:	7821      	ldrb	r1, [r4, #0]
 802292e:	4650      	mov	r0, sl
 8022930:	f7ff fdec 	bl	802250c <memchr>
 8022934:	b138      	cbz	r0, 8022946 <_vfiprintf_r+0x17a>
 8022936:	eba0 000a 	sub.w	r0, r0, sl
 802293a:	2240      	movs	r2, #64	; 0x40
 802293c:	9b04      	ldr	r3, [sp, #16]
 802293e:	3401      	adds	r4, #1
 8022940:	4082      	lsls	r2, r0
 8022942:	4313      	orrs	r3, r2
 8022944:	9304      	str	r3, [sp, #16]
 8022946:	f814 1b01 	ldrb.w	r1, [r4], #1
 802294a:	2206      	movs	r2, #6
 802294c:	4828      	ldr	r0, [pc, #160]	; (80229f0 <_vfiprintf_r+0x224>)
 802294e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022952:	f7ff fddb 	bl	802250c <memchr>
 8022956:	2800      	cmp	r0, #0
 8022958:	d03f      	beq.n	80229da <_vfiprintf_r+0x20e>
 802295a:	4b26      	ldr	r3, [pc, #152]	; (80229f4 <_vfiprintf_r+0x228>)
 802295c:	bb1b      	cbnz	r3, 80229a6 <_vfiprintf_r+0x1da>
 802295e:	9b03      	ldr	r3, [sp, #12]
 8022960:	3307      	adds	r3, #7
 8022962:	f023 0307 	bic.w	r3, r3, #7
 8022966:	3308      	adds	r3, #8
 8022968:	9303      	str	r3, [sp, #12]
 802296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802296c:	443b      	add	r3, r7
 802296e:	9309      	str	r3, [sp, #36]	; 0x24
 8022970:	e768      	b.n	8022844 <_vfiprintf_r+0x78>
 8022972:	fb0c 3202 	mla	r2, ip, r2, r3
 8022976:	460c      	mov	r4, r1
 8022978:	2001      	movs	r0, #1
 802297a:	e7a6      	b.n	80228ca <_vfiprintf_r+0xfe>
 802297c:	2300      	movs	r3, #0
 802297e:	3401      	adds	r4, #1
 8022980:	f04f 0c0a 	mov.w	ip, #10
 8022984:	4619      	mov	r1, r3
 8022986:	9305      	str	r3, [sp, #20]
 8022988:	4620      	mov	r0, r4
 802298a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802298e:	3a30      	subs	r2, #48	; 0x30
 8022990:	2a09      	cmp	r2, #9
 8022992:	d903      	bls.n	802299c <_vfiprintf_r+0x1d0>
 8022994:	2b00      	cmp	r3, #0
 8022996:	d0c6      	beq.n	8022926 <_vfiprintf_r+0x15a>
 8022998:	9105      	str	r1, [sp, #20]
 802299a:	e7c4      	b.n	8022926 <_vfiprintf_r+0x15a>
 802299c:	fb0c 2101 	mla	r1, ip, r1, r2
 80229a0:	4604      	mov	r4, r0
 80229a2:	2301      	movs	r3, #1
 80229a4:	e7f0      	b.n	8022988 <_vfiprintf_r+0x1bc>
 80229a6:	ab03      	add	r3, sp, #12
 80229a8:	462a      	mov	r2, r5
 80229aa:	a904      	add	r1, sp, #16
 80229ac:	4630      	mov	r0, r6
 80229ae:	9300      	str	r3, [sp, #0]
 80229b0:	4b11      	ldr	r3, [pc, #68]	; (80229f8 <_vfiprintf_r+0x22c>)
 80229b2:	f3af 8000 	nop.w
 80229b6:	4607      	mov	r7, r0
 80229b8:	1c78      	adds	r0, r7, #1
 80229ba:	d1d6      	bne.n	802296a <_vfiprintf_r+0x19e>
 80229bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229be:	07d9      	lsls	r1, r3, #31
 80229c0:	d405      	bmi.n	80229ce <_vfiprintf_r+0x202>
 80229c2:	89ab      	ldrh	r3, [r5, #12]
 80229c4:	059a      	lsls	r2, r3, #22
 80229c6:	d402      	bmi.n	80229ce <_vfiprintf_r+0x202>
 80229c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229ca:	f7ff f8db 	bl	8021b84 <__retarget_lock_release_recursive>
 80229ce:	89ab      	ldrh	r3, [r5, #12]
 80229d0:	065b      	lsls	r3, r3, #25
 80229d2:	f53f af1d 	bmi.w	8022810 <_vfiprintf_r+0x44>
 80229d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80229d8:	e71c      	b.n	8022814 <_vfiprintf_r+0x48>
 80229da:	ab03      	add	r3, sp, #12
 80229dc:	462a      	mov	r2, r5
 80229de:	a904      	add	r1, sp, #16
 80229e0:	4630      	mov	r0, r6
 80229e2:	9300      	str	r3, [sp, #0]
 80229e4:	4b04      	ldr	r3, [pc, #16]	; (80229f8 <_vfiprintf_r+0x22c>)
 80229e6:	f000 f87d 	bl	8022ae4 <_printf_i>
 80229ea:	e7e4      	b.n	80229b6 <_vfiprintf_r+0x1ea>
 80229ec:	080238a3 	.word	0x080238a3
 80229f0:	080238a9 	.word	0x080238a9
 80229f4:	00000000 	.word	0x00000000
 80229f8:	080227a7 	.word	0x080227a7
 80229fc:	08023783 	.word	0x08023783

08022a00 <_printf_common>:
 8022a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a04:	4616      	mov	r6, r2
 8022a06:	4699      	mov	r9, r3
 8022a08:	688a      	ldr	r2, [r1, #8]
 8022a0a:	4607      	mov	r7, r0
 8022a0c:	690b      	ldr	r3, [r1, #16]
 8022a0e:	460c      	mov	r4, r1
 8022a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022a14:	4293      	cmp	r3, r2
 8022a16:	bfb8      	it	lt
 8022a18:	4613      	movlt	r3, r2
 8022a1a:	6033      	str	r3, [r6, #0]
 8022a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022a20:	b10a      	cbz	r2, 8022a26 <_printf_common+0x26>
 8022a22:	3301      	adds	r3, #1
 8022a24:	6033      	str	r3, [r6, #0]
 8022a26:	6823      	ldr	r3, [r4, #0]
 8022a28:	0699      	lsls	r1, r3, #26
 8022a2a:	bf42      	ittt	mi
 8022a2c:	6833      	ldrmi	r3, [r6, #0]
 8022a2e:	3302      	addmi	r3, #2
 8022a30:	6033      	strmi	r3, [r6, #0]
 8022a32:	6825      	ldr	r5, [r4, #0]
 8022a34:	f015 0506 	ands.w	r5, r5, #6
 8022a38:	d106      	bne.n	8022a48 <_printf_common+0x48>
 8022a3a:	f104 0a19 	add.w	sl, r4, #25
 8022a3e:	68e3      	ldr	r3, [r4, #12]
 8022a40:	6832      	ldr	r2, [r6, #0]
 8022a42:	1a9b      	subs	r3, r3, r2
 8022a44:	42ab      	cmp	r3, r5
 8022a46:	dc2b      	bgt.n	8022aa0 <_printf_common+0xa0>
 8022a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022a4c:	1e13      	subs	r3, r2, #0
 8022a4e:	6822      	ldr	r2, [r4, #0]
 8022a50:	bf18      	it	ne
 8022a52:	2301      	movne	r3, #1
 8022a54:	0692      	lsls	r2, r2, #26
 8022a56:	d430      	bmi.n	8022aba <_printf_common+0xba>
 8022a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022a5c:	4649      	mov	r1, r9
 8022a5e:	4638      	mov	r0, r7
 8022a60:	47c0      	blx	r8
 8022a62:	3001      	adds	r0, #1
 8022a64:	d023      	beq.n	8022aae <_printf_common+0xae>
 8022a66:	6823      	ldr	r3, [r4, #0]
 8022a68:	341a      	adds	r4, #26
 8022a6a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8022a6e:	f003 0306 	and.w	r3, r3, #6
 8022a72:	2b04      	cmp	r3, #4
 8022a74:	bf0a      	itet	eq
 8022a76:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8022a7a:	2500      	movne	r5, #0
 8022a7c:	6833      	ldreq	r3, [r6, #0]
 8022a7e:	f04f 0600 	mov.w	r6, #0
 8022a82:	bf08      	it	eq
 8022a84:	1aed      	subeq	r5, r5, r3
 8022a86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8022a8a:	bf08      	it	eq
 8022a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022a90:	4293      	cmp	r3, r2
 8022a92:	bfc4      	itt	gt
 8022a94:	1a9b      	subgt	r3, r3, r2
 8022a96:	18ed      	addgt	r5, r5, r3
 8022a98:	42b5      	cmp	r5, r6
 8022a9a:	d11a      	bne.n	8022ad2 <_printf_common+0xd2>
 8022a9c:	2000      	movs	r0, #0
 8022a9e:	e008      	b.n	8022ab2 <_printf_common+0xb2>
 8022aa0:	2301      	movs	r3, #1
 8022aa2:	4652      	mov	r2, sl
 8022aa4:	4649      	mov	r1, r9
 8022aa6:	4638      	mov	r0, r7
 8022aa8:	47c0      	blx	r8
 8022aaa:	3001      	adds	r0, #1
 8022aac:	d103      	bne.n	8022ab6 <_printf_common+0xb6>
 8022aae:	f04f 30ff 	mov.w	r0, #4294967295
 8022ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ab6:	3501      	adds	r5, #1
 8022ab8:	e7c1      	b.n	8022a3e <_printf_common+0x3e>
 8022aba:	18e1      	adds	r1, r4, r3
 8022abc:	1c5a      	adds	r2, r3, #1
 8022abe:	2030      	movs	r0, #48	; 0x30
 8022ac0:	3302      	adds	r3, #2
 8022ac2:	4422      	add	r2, r4
 8022ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022ad0:	e7c2      	b.n	8022a58 <_printf_common+0x58>
 8022ad2:	2301      	movs	r3, #1
 8022ad4:	4622      	mov	r2, r4
 8022ad6:	4649      	mov	r1, r9
 8022ad8:	4638      	mov	r0, r7
 8022ada:	47c0      	blx	r8
 8022adc:	3001      	adds	r0, #1
 8022ade:	d0e6      	beq.n	8022aae <_printf_common+0xae>
 8022ae0:	3601      	adds	r6, #1
 8022ae2:	e7d9      	b.n	8022a98 <_printf_common+0x98>

08022ae4 <_printf_i>:
 8022ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022ae8:	7e0f      	ldrb	r7, [r1, #24]
 8022aea:	4691      	mov	r9, r2
 8022aec:	4680      	mov	r8, r0
 8022aee:	460c      	mov	r4, r1
 8022af0:	2f78      	cmp	r7, #120	; 0x78
 8022af2:	469a      	mov	sl, r3
 8022af4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022af6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022afa:	d807      	bhi.n	8022b0c <_printf_i+0x28>
 8022afc:	2f62      	cmp	r7, #98	; 0x62
 8022afe:	d80a      	bhi.n	8022b16 <_printf_i+0x32>
 8022b00:	2f00      	cmp	r7, #0
 8022b02:	f000 80d3 	beq.w	8022cac <_printf_i+0x1c8>
 8022b06:	2f58      	cmp	r7, #88	; 0x58
 8022b08:	f000 80bf 	beq.w	8022c8a <_printf_i+0x1a6>
 8022b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022b14:	e03a      	b.n	8022b8c <_printf_i+0xa8>
 8022b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022b1a:	2b15      	cmp	r3, #21
 8022b1c:	d8f6      	bhi.n	8022b0c <_printf_i+0x28>
 8022b1e:	a101      	add	r1, pc, #4	; (adr r1, 8022b24 <_printf_i+0x40>)
 8022b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022b24:	08022b7d 	.word	0x08022b7d
 8022b28:	08022b91 	.word	0x08022b91
 8022b2c:	08022b0d 	.word	0x08022b0d
 8022b30:	08022b0d 	.word	0x08022b0d
 8022b34:	08022b0d 	.word	0x08022b0d
 8022b38:	08022b0d 	.word	0x08022b0d
 8022b3c:	08022b91 	.word	0x08022b91
 8022b40:	08022b0d 	.word	0x08022b0d
 8022b44:	08022b0d 	.word	0x08022b0d
 8022b48:	08022b0d 	.word	0x08022b0d
 8022b4c:	08022b0d 	.word	0x08022b0d
 8022b50:	08022c93 	.word	0x08022c93
 8022b54:	08022bbd 	.word	0x08022bbd
 8022b58:	08022c4f 	.word	0x08022c4f
 8022b5c:	08022b0d 	.word	0x08022b0d
 8022b60:	08022b0d 	.word	0x08022b0d
 8022b64:	08022cb5 	.word	0x08022cb5
 8022b68:	08022b0d 	.word	0x08022b0d
 8022b6c:	08022bbd 	.word	0x08022bbd
 8022b70:	08022b0d 	.word	0x08022b0d
 8022b74:	08022b0d 	.word	0x08022b0d
 8022b78:	08022c57 	.word	0x08022c57
 8022b7c:	682b      	ldr	r3, [r5, #0]
 8022b7e:	1d1a      	adds	r2, r3, #4
 8022b80:	681b      	ldr	r3, [r3, #0]
 8022b82:	602a      	str	r2, [r5, #0]
 8022b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022b8c:	2301      	movs	r3, #1
 8022b8e:	e09e      	b.n	8022cce <_printf_i+0x1ea>
 8022b90:	6820      	ldr	r0, [r4, #0]
 8022b92:	682b      	ldr	r3, [r5, #0]
 8022b94:	0607      	lsls	r7, r0, #24
 8022b96:	f103 0104 	add.w	r1, r3, #4
 8022b9a:	6029      	str	r1, [r5, #0]
 8022b9c:	d501      	bpl.n	8022ba2 <_printf_i+0xbe>
 8022b9e:	681e      	ldr	r6, [r3, #0]
 8022ba0:	e003      	b.n	8022baa <_printf_i+0xc6>
 8022ba2:	0646      	lsls	r6, r0, #25
 8022ba4:	d5fb      	bpl.n	8022b9e <_printf_i+0xba>
 8022ba6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022baa:	2e00      	cmp	r6, #0
 8022bac:	da03      	bge.n	8022bb6 <_printf_i+0xd2>
 8022bae:	232d      	movs	r3, #45	; 0x2d
 8022bb0:	4276      	negs	r6, r6
 8022bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022bb6:	4859      	ldr	r0, [pc, #356]	; (8022d1c <_printf_i+0x238>)
 8022bb8:	230a      	movs	r3, #10
 8022bba:	e012      	b.n	8022be2 <_printf_i+0xfe>
 8022bbc:	682b      	ldr	r3, [r5, #0]
 8022bbe:	6820      	ldr	r0, [r4, #0]
 8022bc0:	1d19      	adds	r1, r3, #4
 8022bc2:	6029      	str	r1, [r5, #0]
 8022bc4:	0605      	lsls	r5, r0, #24
 8022bc6:	d501      	bpl.n	8022bcc <_printf_i+0xe8>
 8022bc8:	681e      	ldr	r6, [r3, #0]
 8022bca:	e002      	b.n	8022bd2 <_printf_i+0xee>
 8022bcc:	0641      	lsls	r1, r0, #25
 8022bce:	d5fb      	bpl.n	8022bc8 <_printf_i+0xe4>
 8022bd0:	881e      	ldrh	r6, [r3, #0]
 8022bd2:	2f6f      	cmp	r7, #111	; 0x6f
 8022bd4:	4851      	ldr	r0, [pc, #324]	; (8022d1c <_printf_i+0x238>)
 8022bd6:	bf0c      	ite	eq
 8022bd8:	2308      	moveq	r3, #8
 8022bda:	230a      	movne	r3, #10
 8022bdc:	2100      	movs	r1, #0
 8022bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022be2:	6865      	ldr	r5, [r4, #4]
 8022be4:	2d00      	cmp	r5, #0
 8022be6:	60a5      	str	r5, [r4, #8]
 8022be8:	bfa2      	ittt	ge
 8022bea:	6821      	ldrge	r1, [r4, #0]
 8022bec:	f021 0104 	bicge.w	r1, r1, #4
 8022bf0:	6021      	strge	r1, [r4, #0]
 8022bf2:	b90e      	cbnz	r6, 8022bf8 <_printf_i+0x114>
 8022bf4:	2d00      	cmp	r5, #0
 8022bf6:	d04a      	beq.n	8022c8e <_printf_i+0x1aa>
 8022bf8:	4615      	mov	r5, r2
 8022bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8022bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8022c02:	5dc7      	ldrb	r7, [r0, r7]
 8022c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022c08:	4637      	mov	r7, r6
 8022c0a:	460e      	mov	r6, r1
 8022c0c:	42bb      	cmp	r3, r7
 8022c0e:	d9f4      	bls.n	8022bfa <_printf_i+0x116>
 8022c10:	2b08      	cmp	r3, #8
 8022c12:	d10b      	bne.n	8022c2c <_printf_i+0x148>
 8022c14:	6823      	ldr	r3, [r4, #0]
 8022c16:	07de      	lsls	r6, r3, #31
 8022c18:	d508      	bpl.n	8022c2c <_printf_i+0x148>
 8022c1a:	6923      	ldr	r3, [r4, #16]
 8022c1c:	6861      	ldr	r1, [r4, #4]
 8022c1e:	4299      	cmp	r1, r3
 8022c20:	bfde      	ittt	le
 8022c22:	2330      	movle	r3, #48	; 0x30
 8022c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022c2c:	1b52      	subs	r2, r2, r5
 8022c2e:	6122      	str	r2, [r4, #16]
 8022c30:	464b      	mov	r3, r9
 8022c32:	aa03      	add	r2, sp, #12
 8022c34:	4621      	mov	r1, r4
 8022c36:	4640      	mov	r0, r8
 8022c38:	f8cd a000 	str.w	sl, [sp]
 8022c3c:	f7ff fee0 	bl	8022a00 <_printf_common>
 8022c40:	3001      	adds	r0, #1
 8022c42:	d149      	bne.n	8022cd8 <_printf_i+0x1f4>
 8022c44:	f04f 30ff 	mov.w	r0, #4294967295
 8022c48:	b004      	add	sp, #16
 8022c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c4e:	6823      	ldr	r3, [r4, #0]
 8022c50:	f043 0320 	orr.w	r3, r3, #32
 8022c54:	6023      	str	r3, [r4, #0]
 8022c56:	2778      	movs	r7, #120	; 0x78
 8022c58:	4831      	ldr	r0, [pc, #196]	; (8022d20 <_printf_i+0x23c>)
 8022c5a:	6823      	ldr	r3, [r4, #0]
 8022c5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022c60:	061f      	lsls	r7, r3, #24
 8022c62:	6829      	ldr	r1, [r5, #0]
 8022c64:	f851 6b04 	ldr.w	r6, [r1], #4
 8022c68:	d402      	bmi.n	8022c70 <_printf_i+0x18c>
 8022c6a:	065f      	lsls	r7, r3, #25
 8022c6c:	bf48      	it	mi
 8022c6e:	b2b6      	uxthmi	r6, r6
 8022c70:	07df      	lsls	r7, r3, #31
 8022c72:	6029      	str	r1, [r5, #0]
 8022c74:	bf44      	itt	mi
 8022c76:	f043 0320 	orrmi.w	r3, r3, #32
 8022c7a:	6023      	strmi	r3, [r4, #0]
 8022c7c:	b91e      	cbnz	r6, 8022c86 <_printf_i+0x1a2>
 8022c7e:	6823      	ldr	r3, [r4, #0]
 8022c80:	f023 0320 	bic.w	r3, r3, #32
 8022c84:	6023      	str	r3, [r4, #0]
 8022c86:	2310      	movs	r3, #16
 8022c88:	e7a8      	b.n	8022bdc <_printf_i+0xf8>
 8022c8a:	4824      	ldr	r0, [pc, #144]	; (8022d1c <_printf_i+0x238>)
 8022c8c:	e7e5      	b.n	8022c5a <_printf_i+0x176>
 8022c8e:	4615      	mov	r5, r2
 8022c90:	e7be      	b.n	8022c10 <_printf_i+0x12c>
 8022c92:	682b      	ldr	r3, [r5, #0]
 8022c94:	6826      	ldr	r6, [r4, #0]
 8022c96:	1d18      	adds	r0, r3, #4
 8022c98:	6961      	ldr	r1, [r4, #20]
 8022c9a:	6028      	str	r0, [r5, #0]
 8022c9c:	0635      	lsls	r5, r6, #24
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	d501      	bpl.n	8022ca6 <_printf_i+0x1c2>
 8022ca2:	6019      	str	r1, [r3, #0]
 8022ca4:	e002      	b.n	8022cac <_printf_i+0x1c8>
 8022ca6:	0670      	lsls	r0, r6, #25
 8022ca8:	d5fb      	bpl.n	8022ca2 <_printf_i+0x1be>
 8022caa:	8019      	strh	r1, [r3, #0]
 8022cac:	2300      	movs	r3, #0
 8022cae:	4615      	mov	r5, r2
 8022cb0:	6123      	str	r3, [r4, #16]
 8022cb2:	e7bd      	b.n	8022c30 <_printf_i+0x14c>
 8022cb4:	682b      	ldr	r3, [r5, #0]
 8022cb6:	2100      	movs	r1, #0
 8022cb8:	1d1a      	adds	r2, r3, #4
 8022cba:	602a      	str	r2, [r5, #0]
 8022cbc:	681d      	ldr	r5, [r3, #0]
 8022cbe:	6862      	ldr	r2, [r4, #4]
 8022cc0:	4628      	mov	r0, r5
 8022cc2:	f7ff fc23 	bl	802250c <memchr>
 8022cc6:	b108      	cbz	r0, 8022ccc <_printf_i+0x1e8>
 8022cc8:	1b40      	subs	r0, r0, r5
 8022cca:	6060      	str	r0, [r4, #4]
 8022ccc:	6863      	ldr	r3, [r4, #4]
 8022cce:	6123      	str	r3, [r4, #16]
 8022cd0:	2300      	movs	r3, #0
 8022cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022cd6:	e7ab      	b.n	8022c30 <_printf_i+0x14c>
 8022cd8:	6923      	ldr	r3, [r4, #16]
 8022cda:	462a      	mov	r2, r5
 8022cdc:	4649      	mov	r1, r9
 8022cde:	4640      	mov	r0, r8
 8022ce0:	47d0      	blx	sl
 8022ce2:	3001      	adds	r0, #1
 8022ce4:	d0ae      	beq.n	8022c44 <_printf_i+0x160>
 8022ce6:	6823      	ldr	r3, [r4, #0]
 8022ce8:	079b      	lsls	r3, r3, #30
 8022cea:	d413      	bmi.n	8022d14 <_printf_i+0x230>
 8022cec:	68e0      	ldr	r0, [r4, #12]
 8022cee:	9b03      	ldr	r3, [sp, #12]
 8022cf0:	4298      	cmp	r0, r3
 8022cf2:	bfb8      	it	lt
 8022cf4:	4618      	movlt	r0, r3
 8022cf6:	e7a7      	b.n	8022c48 <_printf_i+0x164>
 8022cf8:	2301      	movs	r3, #1
 8022cfa:	4632      	mov	r2, r6
 8022cfc:	4649      	mov	r1, r9
 8022cfe:	4640      	mov	r0, r8
 8022d00:	47d0      	blx	sl
 8022d02:	3001      	adds	r0, #1
 8022d04:	d09e      	beq.n	8022c44 <_printf_i+0x160>
 8022d06:	3501      	adds	r5, #1
 8022d08:	68e3      	ldr	r3, [r4, #12]
 8022d0a:	9903      	ldr	r1, [sp, #12]
 8022d0c:	1a5b      	subs	r3, r3, r1
 8022d0e:	42ab      	cmp	r3, r5
 8022d10:	dcf2      	bgt.n	8022cf8 <_printf_i+0x214>
 8022d12:	e7eb      	b.n	8022cec <_printf_i+0x208>
 8022d14:	2500      	movs	r5, #0
 8022d16:	f104 0619 	add.w	r6, r4, #25
 8022d1a:	e7f5      	b.n	8022d08 <_printf_i+0x224>
 8022d1c:	080238b0 	.word	0x080238b0
 8022d20:	080238c1 	.word	0x080238c1

08022d24 <__swbuf_r>:
 8022d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d26:	460e      	mov	r6, r1
 8022d28:	4614      	mov	r4, r2
 8022d2a:	4605      	mov	r5, r0
 8022d2c:	b118      	cbz	r0, 8022d36 <__swbuf_r+0x12>
 8022d2e:	6a03      	ldr	r3, [r0, #32]
 8022d30:	b90b      	cbnz	r3, 8022d36 <__swbuf_r+0x12>
 8022d32:	f7fe fd97 	bl	8021864 <__sinit>
 8022d36:	69a3      	ldr	r3, [r4, #24]
 8022d38:	60a3      	str	r3, [r4, #8]
 8022d3a:	89a3      	ldrh	r3, [r4, #12]
 8022d3c:	071a      	lsls	r2, r3, #28
 8022d3e:	d525      	bpl.n	8022d8c <__swbuf_r+0x68>
 8022d40:	6923      	ldr	r3, [r4, #16]
 8022d42:	b31b      	cbz	r3, 8022d8c <__swbuf_r+0x68>
 8022d44:	6823      	ldr	r3, [r4, #0]
 8022d46:	b2f6      	uxtb	r6, r6
 8022d48:	6922      	ldr	r2, [r4, #16]
 8022d4a:	4637      	mov	r7, r6
 8022d4c:	1a98      	subs	r0, r3, r2
 8022d4e:	6963      	ldr	r3, [r4, #20]
 8022d50:	4283      	cmp	r3, r0
 8022d52:	dc04      	bgt.n	8022d5e <__swbuf_r+0x3a>
 8022d54:	4621      	mov	r1, r4
 8022d56:	4628      	mov	r0, r5
 8022d58:	f7ff fb2e 	bl	80223b8 <_fflush_r>
 8022d5c:	b9e0      	cbnz	r0, 8022d98 <__swbuf_r+0x74>
 8022d5e:	68a3      	ldr	r3, [r4, #8]
 8022d60:	3b01      	subs	r3, #1
 8022d62:	60a3      	str	r3, [r4, #8]
 8022d64:	6823      	ldr	r3, [r4, #0]
 8022d66:	1c5a      	adds	r2, r3, #1
 8022d68:	6022      	str	r2, [r4, #0]
 8022d6a:	701e      	strb	r6, [r3, #0]
 8022d6c:	1c43      	adds	r3, r0, #1
 8022d6e:	6962      	ldr	r2, [r4, #20]
 8022d70:	429a      	cmp	r2, r3
 8022d72:	d004      	beq.n	8022d7e <__swbuf_r+0x5a>
 8022d74:	89a3      	ldrh	r3, [r4, #12]
 8022d76:	07db      	lsls	r3, r3, #31
 8022d78:	d506      	bpl.n	8022d88 <__swbuf_r+0x64>
 8022d7a:	2e0a      	cmp	r6, #10
 8022d7c:	d104      	bne.n	8022d88 <__swbuf_r+0x64>
 8022d7e:	4621      	mov	r1, r4
 8022d80:	4628      	mov	r0, r5
 8022d82:	f7ff fb19 	bl	80223b8 <_fflush_r>
 8022d86:	b938      	cbnz	r0, 8022d98 <__swbuf_r+0x74>
 8022d88:	4638      	mov	r0, r7
 8022d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d8c:	4621      	mov	r1, r4
 8022d8e:	4628      	mov	r0, r5
 8022d90:	f000 f806 	bl	8022da0 <__swsetup_r>
 8022d94:	2800      	cmp	r0, #0
 8022d96:	d0d5      	beq.n	8022d44 <__swbuf_r+0x20>
 8022d98:	f04f 37ff 	mov.w	r7, #4294967295
 8022d9c:	e7f4      	b.n	8022d88 <__swbuf_r+0x64>
	...

08022da0 <__swsetup_r>:
 8022da0:	b538      	push	{r3, r4, r5, lr}
 8022da2:	4b2a      	ldr	r3, [pc, #168]	; (8022e4c <__swsetup_r+0xac>)
 8022da4:	4605      	mov	r5, r0
 8022da6:	460c      	mov	r4, r1
 8022da8:	6818      	ldr	r0, [r3, #0]
 8022daa:	b118      	cbz	r0, 8022db4 <__swsetup_r+0x14>
 8022dac:	6a03      	ldr	r3, [r0, #32]
 8022dae:	b90b      	cbnz	r3, 8022db4 <__swsetup_r+0x14>
 8022db0:	f7fe fd58 	bl	8021864 <__sinit>
 8022db4:	89a3      	ldrh	r3, [r4, #12]
 8022db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022dba:	0718      	lsls	r0, r3, #28
 8022dbc:	d422      	bmi.n	8022e04 <__swsetup_r+0x64>
 8022dbe:	06d9      	lsls	r1, r3, #27
 8022dc0:	d407      	bmi.n	8022dd2 <__swsetup_r+0x32>
 8022dc2:	2309      	movs	r3, #9
 8022dc4:	602b      	str	r3, [r5, #0]
 8022dc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022dca:	f04f 30ff 	mov.w	r0, #4294967295
 8022dce:	81a3      	strh	r3, [r4, #12]
 8022dd0:	e034      	b.n	8022e3c <__swsetup_r+0x9c>
 8022dd2:	0758      	lsls	r0, r3, #29
 8022dd4:	d512      	bpl.n	8022dfc <__swsetup_r+0x5c>
 8022dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022dd8:	b141      	cbz	r1, 8022dec <__swsetup_r+0x4c>
 8022dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022dde:	4299      	cmp	r1, r3
 8022de0:	d002      	beq.n	8022de8 <__swsetup_r+0x48>
 8022de2:	4628      	mov	r0, r5
 8022de4:	f7fe fefa 	bl	8021bdc <_free_r>
 8022de8:	2300      	movs	r3, #0
 8022dea:	6363      	str	r3, [r4, #52]	; 0x34
 8022dec:	89a3      	ldrh	r3, [r4, #12]
 8022dee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022df2:	81a3      	strh	r3, [r4, #12]
 8022df4:	2300      	movs	r3, #0
 8022df6:	6063      	str	r3, [r4, #4]
 8022df8:	6923      	ldr	r3, [r4, #16]
 8022dfa:	6023      	str	r3, [r4, #0]
 8022dfc:	89a3      	ldrh	r3, [r4, #12]
 8022dfe:	f043 0308 	orr.w	r3, r3, #8
 8022e02:	81a3      	strh	r3, [r4, #12]
 8022e04:	6923      	ldr	r3, [r4, #16]
 8022e06:	b94b      	cbnz	r3, 8022e1c <__swsetup_r+0x7c>
 8022e08:	89a3      	ldrh	r3, [r4, #12]
 8022e0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e12:	d003      	beq.n	8022e1c <__swsetup_r+0x7c>
 8022e14:	4621      	mov	r1, r4
 8022e16:	4628      	mov	r0, r5
 8022e18:	f000 f847 	bl	8022eaa <__smakebuf_r>
 8022e1c:	89a0      	ldrh	r0, [r4, #12]
 8022e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022e22:	f010 0301 	ands.w	r3, r0, #1
 8022e26:	d00a      	beq.n	8022e3e <__swsetup_r+0x9e>
 8022e28:	2300      	movs	r3, #0
 8022e2a:	60a3      	str	r3, [r4, #8]
 8022e2c:	6963      	ldr	r3, [r4, #20]
 8022e2e:	425b      	negs	r3, r3
 8022e30:	61a3      	str	r3, [r4, #24]
 8022e32:	6923      	ldr	r3, [r4, #16]
 8022e34:	b943      	cbnz	r3, 8022e48 <__swsetup_r+0xa8>
 8022e36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022e3a:	d1c4      	bne.n	8022dc6 <__swsetup_r+0x26>
 8022e3c:	bd38      	pop	{r3, r4, r5, pc}
 8022e3e:	0781      	lsls	r1, r0, #30
 8022e40:	bf58      	it	pl
 8022e42:	6963      	ldrpl	r3, [r4, #20]
 8022e44:	60a3      	str	r3, [r4, #8]
 8022e46:	e7f4      	b.n	8022e32 <__swsetup_r+0x92>
 8022e48:	2000      	movs	r0, #0
 8022e4a:	e7f7      	b.n	8022e3c <__swsetup_r+0x9c>
 8022e4c:	20000108 	.word	0x20000108

08022e50 <_malloc_usable_size_r>:
 8022e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022e54:	1f18      	subs	r0, r3, #4
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	bfbc      	itt	lt
 8022e5a:	580b      	ldrlt	r3, [r1, r0]
 8022e5c:	18c0      	addlt	r0, r0, r3
 8022e5e:	4770      	bx	lr

08022e60 <__swhatbuf_r>:
 8022e60:	b570      	push	{r4, r5, r6, lr}
 8022e62:	460c      	mov	r4, r1
 8022e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e68:	b096      	sub	sp, #88	; 0x58
 8022e6a:	4615      	mov	r5, r2
 8022e6c:	2900      	cmp	r1, #0
 8022e6e:	461e      	mov	r6, r3
 8022e70:	da0c      	bge.n	8022e8c <__swhatbuf_r+0x2c>
 8022e72:	89a3      	ldrh	r3, [r4, #12]
 8022e74:	2100      	movs	r1, #0
 8022e76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8022e7a:	bf0c      	ite	eq
 8022e7c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8022e80:	2340      	movne	r3, #64	; 0x40
 8022e82:	2000      	movs	r0, #0
 8022e84:	6031      	str	r1, [r6, #0]
 8022e86:	602b      	str	r3, [r5, #0]
 8022e88:	b016      	add	sp, #88	; 0x58
 8022e8a:	bd70      	pop	{r4, r5, r6, pc}
 8022e8c:	466a      	mov	r2, sp
 8022e8e:	f000 f849 	bl	8022f24 <_fstat_r>
 8022e92:	2800      	cmp	r0, #0
 8022e94:	dbed      	blt.n	8022e72 <__swhatbuf_r+0x12>
 8022e96:	9901      	ldr	r1, [sp, #4]
 8022e98:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8022e9c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8022ea0:	4259      	negs	r1, r3
 8022ea2:	4159      	adcs	r1, r3
 8022ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022ea8:	e7eb      	b.n	8022e82 <__swhatbuf_r+0x22>

08022eaa <__smakebuf_r>:
 8022eaa:	898b      	ldrh	r3, [r1, #12]
 8022eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022eae:	079d      	lsls	r5, r3, #30
 8022eb0:	4606      	mov	r6, r0
 8022eb2:	460c      	mov	r4, r1
 8022eb4:	d507      	bpl.n	8022ec6 <__smakebuf_r+0x1c>
 8022eb6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022eba:	6023      	str	r3, [r4, #0]
 8022ebc:	6123      	str	r3, [r4, #16]
 8022ebe:	2301      	movs	r3, #1
 8022ec0:	6163      	str	r3, [r4, #20]
 8022ec2:	b002      	add	sp, #8
 8022ec4:	bd70      	pop	{r4, r5, r6, pc}
 8022ec6:	ab01      	add	r3, sp, #4
 8022ec8:	466a      	mov	r2, sp
 8022eca:	f7ff ffc9 	bl	8022e60 <__swhatbuf_r>
 8022ece:	9900      	ldr	r1, [sp, #0]
 8022ed0:	4605      	mov	r5, r0
 8022ed2:	4630      	mov	r0, r6
 8022ed4:	f7fe fb70 	bl	80215b8 <_malloc_r>
 8022ed8:	b948      	cbnz	r0, 8022eee <__smakebuf_r+0x44>
 8022eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ede:	059a      	lsls	r2, r3, #22
 8022ee0:	d4ef      	bmi.n	8022ec2 <__smakebuf_r+0x18>
 8022ee2:	f023 0303 	bic.w	r3, r3, #3
 8022ee6:	f043 0302 	orr.w	r3, r3, #2
 8022eea:	81a3      	strh	r3, [r4, #12]
 8022eec:	e7e3      	b.n	8022eb6 <__smakebuf_r+0xc>
 8022eee:	89a3      	ldrh	r3, [r4, #12]
 8022ef0:	6020      	str	r0, [r4, #0]
 8022ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022ef6:	6120      	str	r0, [r4, #16]
 8022ef8:	81a3      	strh	r3, [r4, #12]
 8022efa:	9b00      	ldr	r3, [sp, #0]
 8022efc:	6163      	str	r3, [r4, #20]
 8022efe:	9b01      	ldr	r3, [sp, #4]
 8022f00:	b15b      	cbz	r3, 8022f1a <__smakebuf_r+0x70>
 8022f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f06:	4630      	mov	r0, r6
 8022f08:	f000 f81e 	bl	8022f48 <_isatty_r>
 8022f0c:	b128      	cbz	r0, 8022f1a <__smakebuf_r+0x70>
 8022f0e:	89a3      	ldrh	r3, [r4, #12]
 8022f10:	f023 0303 	bic.w	r3, r3, #3
 8022f14:	f043 0301 	orr.w	r3, r3, #1
 8022f18:	81a3      	strh	r3, [r4, #12]
 8022f1a:	89a3      	ldrh	r3, [r4, #12]
 8022f1c:	431d      	orrs	r5, r3
 8022f1e:	81a5      	strh	r5, [r4, #12]
 8022f20:	e7cf      	b.n	8022ec2 <__smakebuf_r+0x18>
	...

08022f24 <_fstat_r>:
 8022f24:	b538      	push	{r3, r4, r5, lr}
 8022f26:	2300      	movs	r3, #0
 8022f28:	4d06      	ldr	r5, [pc, #24]	; (8022f44 <_fstat_r+0x20>)
 8022f2a:	4604      	mov	r4, r0
 8022f2c:	4608      	mov	r0, r1
 8022f2e:	4611      	mov	r1, r2
 8022f30:	602b      	str	r3, [r5, #0]
 8022f32:	f7ef f8b2 	bl	801209a <_fstat>
 8022f36:	1c43      	adds	r3, r0, #1
 8022f38:	d102      	bne.n	8022f40 <_fstat_r+0x1c>
 8022f3a:	682b      	ldr	r3, [r5, #0]
 8022f3c:	b103      	cbz	r3, 8022f40 <_fstat_r+0x1c>
 8022f3e:	6023      	str	r3, [r4, #0]
 8022f40:	bd38      	pop	{r3, r4, r5, pc}
 8022f42:	bf00      	nop
 8022f44:	20003a70 	.word	0x20003a70

08022f48 <_isatty_r>:
 8022f48:	b538      	push	{r3, r4, r5, lr}
 8022f4a:	2300      	movs	r3, #0
 8022f4c:	4d05      	ldr	r5, [pc, #20]	; (8022f64 <_isatty_r+0x1c>)
 8022f4e:	4604      	mov	r4, r0
 8022f50:	4608      	mov	r0, r1
 8022f52:	602b      	str	r3, [r5, #0]
 8022f54:	f7ef f8b1 	bl	80120ba <_isatty>
 8022f58:	1c43      	adds	r3, r0, #1
 8022f5a:	d102      	bne.n	8022f62 <_isatty_r+0x1a>
 8022f5c:	682b      	ldr	r3, [r5, #0]
 8022f5e:	b103      	cbz	r3, 8022f62 <_isatty_r+0x1a>
 8022f60:	6023      	str	r3, [r4, #0]
 8022f62:	bd38      	pop	{r3, r4, r5, pc}
 8022f64:	20003a70 	.word	0x20003a70

08022f68 <_init>:
 8022f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f6a:	bf00      	nop
 8022f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f6e:	bc08      	pop	{r3}
 8022f70:	469e      	mov	lr, r3
 8022f72:	4770      	bx	lr

08022f74 <_fini>:
 8022f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f76:	bf00      	nop
 8022f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f7a:	bc08      	pop	{r3}
 8022f7c:	469e      	mov	lr, r3
 8022f7e:	4770      	bx	lr
