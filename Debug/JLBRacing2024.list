
JLBRacing2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023a40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  08023c40  08023c40  00033c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802456c  0802456c  0004010c  2**0
                  CONTENTS
  4 .ARM          00000008  0802456c  0802456c  0003456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024574  08024574  0004010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08024574  08024574  00034574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08024584  08024584  00034584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08024594  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cbc  20000110  080246a0  00040110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003dcc  080246a0  00043dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0004010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040142  2**0
                  CONTENTS, READONLY
 13 .debug_info   000584ac  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008658  00000000  00000000  00098631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004110  00000000  00000000  000a0c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003266  00000000  00000000  000a4da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00038ea2  00000000  00000000  000a8006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000446f2  00000000  00000000  000e0ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00168985  00000000  00000000  0012559a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00013570  00000000  00000000  0028df20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  002a1490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000110 	.word	0x20000110
 800021c:	00000000 	.word	0x00000000
 8000220:	08023c28 	.word	0x08023c28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000114 	.word	0x20000114
 800023c:	08023c28 	.word	0x08023c28

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr

08000264 <__aeabi_drsub>:
 8000264:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000268:	e002      	b.n	8000270 <__adddf3>
 800026a:	bf00      	nop

0800026c <__aeabi_dsub>:
 800026c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000270 <__adddf3>:
 8000270:	b530      	push	{r4, r5, lr}
 8000272:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000276:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800027a:	ea94 0f05 	teq	r4, r5
 800027e:	bf08      	it	eq
 8000280:	ea90 0f02 	teqeq	r0, r2
 8000284:	bf1f      	itttt	ne
 8000286:	ea54 0c00 	orrsne.w	ip, r4, r0
 800028a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800028e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000292:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000296:	f000 80e2 	beq.w	800045e <__adddf3+0x1ee>
 800029a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800029e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002a2:	bfb8      	it	lt
 80002a4:	426d      	neglt	r5, r5
 80002a6:	dd0c      	ble.n	80002c2 <__adddf3+0x52>
 80002a8:	442c      	add	r4, r5
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	ea82 0000 	eor.w	r0, r2, r0
 80002b6:	ea83 0101 	eor.w	r1, r3, r1
 80002ba:	ea80 0202 	eor.w	r2, r0, r2
 80002be:	ea81 0303 	eor.w	r3, r1, r3
 80002c2:	2d36      	cmp	r5, #54	; 0x36
 80002c4:	bf88      	it	hi
 80002c6:	bd30      	pophi	{r4, r5, pc}
 80002c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x70>
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x84>
 80002ee:	4252      	negs	r2, r2
 80002f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f4:	ea94 0f05 	teq	r4, r5
 80002f8:	f000 80a7 	beq.w	800044a <__adddf3+0x1da>
 80002fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000300:	f1d5 0e20 	rsbs	lr, r5, #32
 8000304:	db0d      	blt.n	8000322 <__adddf3+0xb2>
 8000306:	fa02 fc0e 	lsl.w	ip, r2, lr
 800030a:	fa22 f205 	lsr.w	r2, r2, r5
 800030e:	1880      	adds	r0, r0, r2
 8000310:	f141 0100 	adc.w	r1, r1, #0
 8000314:	fa03 f20e 	lsl.w	r2, r3, lr
 8000318:	1880      	adds	r0, r0, r2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	4159      	adcs	r1, r3
 8000320:	e00e      	b.n	8000340 <__adddf3+0xd0>
 8000322:	f1a5 0520 	sub.w	r5, r5, #32
 8000326:	f10e 0e20 	add.w	lr, lr, #32
 800032a:	2a01      	cmp	r2, #1
 800032c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000330:	bf28      	it	cs
 8000332:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	18c0      	adds	r0, r0, r3
 800033c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000344:	d507      	bpl.n	8000356 <__adddf3+0xe6>
 8000346:	f04f 0e00 	mov.w	lr, #0
 800034a:	f1dc 0c00 	rsbs	ip, ip, #0
 800034e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000352:	eb6e 0101 	sbc.w	r1, lr, r1
 8000356:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800035a:	d31b      	bcc.n	8000394 <__adddf3+0x124>
 800035c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000360:	d30c      	bcc.n	800037c <__adddf3+0x10c>
 8000362:	0849      	lsrs	r1, r1, #1
 8000364:	ea5f 0030 	movs.w	r0, r0, rrx
 8000368:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800036c:	f104 0401 	add.w	r4, r4, #1
 8000370:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000374:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000378:	f080 809a 	bcs.w	80004b0 <__adddf3+0x240>
 800037c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000380:	bf08      	it	eq
 8000382:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000386:	f150 0000 	adcs.w	r0, r0, #0
 800038a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800038e:	ea41 0105 	orr.w	r1, r1, r5
 8000392:	bd30      	pop	{r4, r5, pc}
 8000394:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000398:	4140      	adcs	r0, r0
 800039a:	eb41 0101 	adc.w	r1, r1, r1
 800039e:	3c01      	subs	r4, #1
 80003a0:	bf28      	it	cs
 80003a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003a6:	d2e9      	bcs.n	800037c <__adddf3+0x10c>
 80003a8:	f091 0f00 	teq	r1, #0
 80003ac:	bf04      	itt	eq
 80003ae:	4601      	moveq	r1, r0
 80003b0:	2000      	moveq	r0, #0
 80003b2:	fab1 f381 	clz	r3, r1
 80003b6:	bf08      	it	eq
 80003b8:	3320      	addeq	r3, #32
 80003ba:	f1a3 030b 	sub.w	r3, r3, #11
 80003be:	f1b3 0220 	subs.w	r2, r3, #32
 80003c2:	da0c      	bge.n	80003de <__adddf3+0x16e>
 80003c4:	320c      	adds	r2, #12
 80003c6:	dd08      	ble.n	80003da <__adddf3+0x16a>
 80003c8:	f102 0c14 	add.w	ip, r2, #20
 80003cc:	f1c2 020c 	rsb	r2, r2, #12
 80003d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003d4:	fa21 f102 	lsr.w	r1, r1, r2
 80003d8:	e00c      	b.n	80003f4 <__adddf3+0x184>
 80003da:	f102 0214 	add.w	r2, r2, #20
 80003de:	bfd8      	it	le
 80003e0:	f1c2 0c20 	rsble	ip, r2, #32
 80003e4:	fa01 f102 	lsl.w	r1, r1, r2
 80003e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ec:	bfdc      	itt	le
 80003ee:	ea41 010c 	orrle.w	r1, r1, ip
 80003f2:	4090      	lslle	r0, r2
 80003f4:	1ae4      	subs	r4, r4, r3
 80003f6:	bfa2      	ittt	ge
 80003f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003fc:	4329      	orrge	r1, r5
 80003fe:	bd30      	popge	{r4, r5, pc}
 8000400:	ea6f 0404 	mvn.w	r4, r4
 8000404:	3c1f      	subs	r4, #31
 8000406:	da1c      	bge.n	8000442 <__adddf3+0x1d2>
 8000408:	340c      	adds	r4, #12
 800040a:	dc0e      	bgt.n	800042a <__adddf3+0x1ba>
 800040c:	f104 0414 	add.w	r4, r4, #20
 8000410:	f1c4 0220 	rsb	r2, r4, #32
 8000414:	fa20 f004 	lsr.w	r0, r0, r4
 8000418:	fa01 f302 	lsl.w	r3, r1, r2
 800041c:	ea40 0003 	orr.w	r0, r0, r3
 8000420:	fa21 f304 	lsr.w	r3, r1, r4
 8000424:	ea45 0103 	orr.w	r1, r5, r3
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f1c4 040c 	rsb	r4, r4, #12
 800042e:	f1c4 0220 	rsb	r2, r4, #32
 8000432:	fa20 f002 	lsr.w	r0, r0, r2
 8000436:	fa01 f304 	lsl.w	r3, r1, r4
 800043a:	ea40 0003 	orr.w	r0, r0, r3
 800043e:	4629      	mov	r1, r5
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	fa21 f004 	lsr.w	r0, r1, r4
 8000446:	4629      	mov	r1, r5
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f094 0f00 	teq	r4, #0
 800044e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000452:	bf06      	itte	eq
 8000454:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000458:	3401      	addeq	r4, #1
 800045a:	3d01      	subne	r5, #1
 800045c:	e74e      	b.n	80002fc <__adddf3+0x8c>
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf18      	it	ne
 8000464:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000468:	d029      	beq.n	80004be <__adddf3+0x24e>
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	d005      	beq.n	8000482 <__adddf3+0x212>
 8000476:	ea54 0c00 	orrs.w	ip, r4, r0
 800047a:	bf04      	itt	eq
 800047c:	4619      	moveq	r1, r3
 800047e:	4610      	moveq	r0, r2
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea91 0f03 	teq	r1, r3
 8000486:	bf1e      	ittt	ne
 8000488:	2100      	movne	r1, #0
 800048a:	2000      	movne	r0, #0
 800048c:	bd30      	popne	{r4, r5, pc}
 800048e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000492:	d105      	bne.n	80004a0 <__adddf3+0x230>
 8000494:	0040      	lsls	r0, r0, #1
 8000496:	4149      	adcs	r1, r1
 8000498:	bf28      	it	cs
 800049a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004a4:	bf3c      	itt	cc
 80004a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004aa:	bd30      	popcc	{r4, r5, pc}
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b8:	f04f 0000 	mov.w	r0, #0
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf1a      	itte	ne
 80004c4:	4619      	movne	r1, r3
 80004c6:	4610      	movne	r0, r2
 80004c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004cc:	bf1c      	itt	ne
 80004ce:	460b      	movne	r3, r1
 80004d0:	4602      	movne	r2, r0
 80004d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004d6:	bf06      	itte	eq
 80004d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004dc:	ea91 0f03 	teqeq	r1, r3
 80004e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	bf00      	nop

080004e8 <__aeabi_ui2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f04f 0500 	mov.w	r5, #0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e750      	b.n	80003a8 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_i2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000520:	bf48      	it	mi
 8000522:	4240      	negmi	r0, r0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e73e      	b.n	80003a8 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_f2d>:
 800052c:	0042      	lsls	r2, r0, #1
 800052e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000532:	ea4f 0131 	mov.w	r1, r1, rrx
 8000536:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800053a:	bf1f      	itttt	ne
 800053c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000540:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000544:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000548:	4770      	bxne	lr
 800054a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800054e:	bf08      	it	eq
 8000550:	4770      	bxeq	lr
 8000552:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000556:	bf04      	itt	eq
 8000558:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800056c:	e71c      	b.n	80003a8 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_ul2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f04f 0500 	mov.w	r5, #0
 800057e:	e00a      	b.n	8000596 <__aeabi_l2d+0x16>

08000580 <__aeabi_l2d>:
 8000580:	ea50 0201 	orrs.w	r2, r0, r1
 8000584:	bf08      	it	eq
 8000586:	4770      	bxeq	lr
 8000588:	b530      	push	{r4, r5, lr}
 800058a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800058e:	d502      	bpl.n	8000596 <__aeabi_l2d+0x16>
 8000590:	4240      	negs	r0, r0
 8000592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000596:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a2:	f43f aed8 	beq.w	8000356 <__adddf3+0xe6>
 80005a6:	f04f 0203 	mov.w	r2, #3
 80005aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ae:	bf18      	it	ne
 80005b0:	3203      	addne	r2, #3
 80005b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b6:	bf18      	it	ne
 80005b8:	3203      	addne	r2, #3
 80005ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005be:	f1c2 0320 	rsb	r3, r2, #32
 80005c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ce:	ea40 000e 	orr.w	r0, r0, lr
 80005d2:	fa21 f102 	lsr.w	r1, r1, r2
 80005d6:	4414      	add	r4, r2
 80005d8:	e6bd      	b.n	8000356 <__adddf3+0xe6>
 80005da:	bf00      	nop

080005dc <__aeabi_dmul>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ea:	bf1d      	ittte	ne
 80005ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f0:	ea94 0f0c 	teqne	r4, ip
 80005f4:	ea95 0f0c 	teqne	r5, ip
 80005f8:	f000 f8de 	bleq	80007b8 <__aeabi_dmul+0x1dc>
 80005fc:	442c      	add	r4, r5
 80005fe:	ea81 0603 	eor.w	r6, r1, r3
 8000602:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000606:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800060e:	bf18      	it	ne
 8000610:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800061c:	d038      	beq.n	8000690 <__aeabi_dmul+0xb4>
 800061e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000622:	f04f 0500 	mov.w	r5, #0
 8000626:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800062e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000632:	f04f 0600 	mov.w	r6, #0
 8000636:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063a:	f09c 0f00 	teq	ip, #0
 800063e:	bf18      	it	ne
 8000640:	f04e 0e01 	orrne.w	lr, lr, #1
 8000644:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000648:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800064c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000650:	d204      	bcs.n	800065c <__aeabi_dmul+0x80>
 8000652:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000656:	416d      	adcs	r5, r5
 8000658:	eb46 0606 	adc.w	r6, r6, r6
 800065c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000660:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000664:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000668:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800066c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000670:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000674:	bf88      	it	hi
 8000676:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067a:	d81e      	bhi.n	80006ba <__aeabi_dmul+0xde>
 800067c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000680:	bf08      	it	eq
 8000682:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000686:	f150 0000 	adcs.w	r0, r0, #0
 800068a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000694:	ea46 0101 	orr.w	r1, r6, r1
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	ea81 0103 	eor.w	r1, r1, r3
 80006a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a4:	bfc2      	ittt	gt
 80006a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ae:	bd70      	popgt	{r4, r5, r6, pc}
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f04f 0e00 	mov.w	lr, #0
 80006b8:	3c01      	subs	r4, #1
 80006ba:	f300 80ab 	bgt.w	8000814 <__aeabi_dmul+0x238>
 80006be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c2:	bfde      	ittt	le
 80006c4:	2000      	movle	r0, #0
 80006c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ca:	bd70      	pople	{r4, r5, r6, pc}
 80006cc:	f1c4 0400 	rsb	r4, r4, #0
 80006d0:	3c20      	subs	r4, #32
 80006d2:	da35      	bge.n	8000740 <__aeabi_dmul+0x164>
 80006d4:	340c      	adds	r4, #12
 80006d6:	dc1b      	bgt.n	8000710 <__aeabi_dmul+0x134>
 80006d8:	f104 0414 	add.w	r4, r4, #20
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f305 	lsl.w	r3, r0, r5
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000700:	eb42 0106 	adc.w	r1, r2, r6
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 040c 	rsb	r4, r4, #12
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f304 	lsl.w	r3, r0, r4
 800071c:	fa20 f005 	lsr.w	r0, r0, r5
 8000720:	fa01 f204 	lsl.w	r2, r1, r4
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f205 	lsl.w	r2, r0, r5
 8000748:	ea4e 0e02 	orr.w	lr, lr, r2
 800074c:	fa20 f304 	lsr.w	r3, r0, r4
 8000750:	fa01 f205 	lsl.w	r2, r1, r5
 8000754:	ea43 0302 	orr.w	r3, r3, r2
 8000758:	fa21 f004 	lsr.w	r0, r1, r4
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	fa21 f204 	lsr.w	r2, r1, r4
 8000764:	ea20 0002 	bic.w	r0, r0, r2
 8000768:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f094 0f00 	teq	r4, #0
 800077c:	d10f      	bne.n	800079e <__aeabi_dmul+0x1c2>
 800077e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	eb41 0101 	adc.w	r1, r1, r1
 8000788:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3c01      	subeq	r4, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1a6>
 8000792:	ea41 0106 	orr.w	r1, r1, r6
 8000796:	f095 0f00 	teq	r5, #0
 800079a:	bf18      	it	ne
 800079c:	4770      	bxne	lr
 800079e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a2:	0052      	lsls	r2, r2, #1
 80007a4:	eb43 0303 	adc.w	r3, r3, r3
 80007a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007ac:	bf08      	it	eq
 80007ae:	3d01      	subeq	r5, #1
 80007b0:	d0f7      	beq.n	80007a2 <__aeabi_dmul+0x1c6>
 80007b2:	ea43 0306 	orr.w	r3, r3, r6
 80007b6:	4770      	bx	lr
 80007b8:	ea94 0f0c 	teq	r4, ip
 80007bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c0:	bf18      	it	ne
 80007c2:	ea95 0f0c 	teqne	r5, ip
 80007c6:	d00c      	beq.n	80007e2 <__aeabi_dmul+0x206>
 80007c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007cc:	bf18      	it	ne
 80007ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d2:	d1d1      	bne.n	8000778 <__aeabi_dmul+0x19c>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e6:	bf06      	itte	eq
 80007e8:	4610      	moveq	r0, r2
 80007ea:	4619      	moveq	r1, r3
 80007ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f0:	d019      	beq.n	8000826 <__aeabi_dmul+0x24a>
 80007f2:	ea94 0f0c 	teq	r4, ip
 80007f6:	d102      	bne.n	80007fe <__aeabi_dmul+0x222>
 80007f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007fc:	d113      	bne.n	8000826 <__aeabi_dmul+0x24a>
 80007fe:	ea95 0f0c 	teq	r5, ip
 8000802:	d105      	bne.n	8000810 <__aeabi_dmul+0x234>
 8000804:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000808:	bf1c      	itt	ne
 800080a:	4610      	movne	r0, r2
 800080c:	4619      	movne	r1, r3
 800080e:	d10a      	bne.n	8000826 <__aeabi_dmul+0x24a>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <__aeabi_ddiv>:
 8000830:	b570      	push	{r4, r5, r6, lr}
 8000832:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800083e:	bf1d      	ittte	ne
 8000840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000844:	ea94 0f0c 	teqne	r4, ip
 8000848:	ea95 0f0c 	teqne	r5, ip
 800084c:	f000 f8a7 	bleq	800099e <__aeabi_ddiv+0x16e>
 8000850:	eba4 0405 	sub.w	r4, r4, r5
 8000854:	ea81 0e03 	eor.w	lr, r1, r3
 8000858:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800085c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000860:	f000 8088 	beq.w	8000974 <__aeabi_ddiv+0x144>
 8000864:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000868:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800086c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000870:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000874:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000878:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800087c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000880:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000884:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000888:	429d      	cmp	r5, r3
 800088a:	bf08      	it	eq
 800088c:	4296      	cmpeq	r6, r2
 800088e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000892:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000896:	d202      	bcs.n	800089e <__aeabi_ddiv+0x6e>
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	1ab6      	subs	r6, r6, r2
 80008a0:	eb65 0503 	sbc.w	r5, r5, r3
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800090c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000910:	d018      	beq.n	8000944 <__aeabi_ddiv+0x114>
 8000912:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000916:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800091e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000922:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000926:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800092e:	d1c0      	bne.n	80008b2 <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	d10b      	bne.n	800094e <__aeabi_ddiv+0x11e>
 8000936:	ea41 0100 	orr.w	r1, r1, r0
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000942:	e7b6      	b.n	80008b2 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	bf04      	itt	eq
 800094a:	4301      	orreq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000952:	bf88      	it	hi
 8000954:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000958:	f63f aeaf 	bhi.w	80006ba <__aeabi_dmul+0xde>
 800095c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000960:	bf04      	itt	eq
 8000962:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096a:	f150 0000 	adcs.w	r0, r0, #0
 800096e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000972:	bd70      	pop	{r4, r5, r6, pc}
 8000974:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000978:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800097c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000980:	bfc2      	ittt	gt
 8000982:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000986:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098a:	bd70      	popgt	{r4, r5, r6, pc}
 800098c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000990:	f04f 0e00 	mov.w	lr, #0
 8000994:	3c01      	subs	r4, #1
 8000996:	e690      	b.n	80006ba <__aeabi_dmul+0xde>
 8000998:	ea45 0e06 	orr.w	lr, r5, r6
 800099c:	e68d      	b.n	80006ba <__aeabi_dmul+0xde>
 800099e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a2:	ea94 0f0c 	teq	r4, ip
 80009a6:	bf08      	it	eq
 80009a8:	ea95 0f0c 	teqeq	r5, ip
 80009ac:	f43f af3b 	beq.w	8000826 <__aeabi_dmul+0x24a>
 80009b0:	ea94 0f0c 	teq	r4, ip
 80009b4:	d10a      	bne.n	80009cc <__aeabi_ddiv+0x19c>
 80009b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ba:	f47f af34 	bne.w	8000826 <__aeabi_dmul+0x24a>
 80009be:	ea95 0f0c 	teq	r5, ip
 80009c2:	f47f af25 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e72c      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009cc:	ea95 0f0c 	teq	r5, ip
 80009d0:	d106      	bne.n	80009e0 <__aeabi_ddiv+0x1b0>
 80009d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d6:	f43f aefd 	beq.w	80007d4 <__aeabi_dmul+0x1f8>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e722      	b.n	8000826 <__aeabi_dmul+0x24a>
 80009e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e4:	bf18      	it	ne
 80009e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ea:	f47f aec5 	bne.w	8000778 <__aeabi_dmul+0x19c>
 80009ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f2:	f47f af0d 	bne.w	8000810 <__aeabi_dmul+0x234>
 80009f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fa:	f47f aeeb 	bne.w	80007d4 <__aeabi_dmul+0x1f8>
 80009fe:	e712      	b.n	8000826 <__aeabi_dmul+0x24a>

08000a00 <__gedf2>:
 8000a00:	f04f 3cff 	mov.w	ip, #4294967295
 8000a04:	e006      	b.n	8000a14 <__cmpdf2+0x4>
 8000a06:	bf00      	nop

08000a08 <__ledf2>:
 8000a08:	f04f 0c01 	mov.w	ip, #1
 8000a0c:	e002      	b.n	8000a14 <__cmpdf2+0x4>
 8000a0e:	bf00      	nop

08000a10 <__cmpdf2>:
 8000a10:	f04f 0c01 	mov.w	ip, #1
 8000a14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	bf18      	it	ne
 8000a26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2a:	d01b      	beq.n	8000a64 <__cmpdf2+0x54>
 8000a2c:	b001      	add	sp, #4
 8000a2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a32:	bf0c      	ite	eq
 8000a34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a38:	ea91 0f03 	teqne	r1, r3
 8000a3c:	bf02      	ittt	eq
 8000a3e:	ea90 0f02 	teqeq	r0, r2
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bxeq	lr
 8000a46:	f110 0f00 	cmn.w	r0, #0
 8000a4a:	ea91 0f03 	teq	r1, r3
 8000a4e:	bf58      	it	pl
 8000a50:	4299      	cmppl	r1, r3
 8000a52:	bf08      	it	eq
 8000a54:	4290      	cmpeq	r0, r2
 8000a56:	bf2c      	ite	cs
 8000a58:	17d8      	asrcs	r0, r3, #31
 8000a5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a5e:	f040 0001 	orr.w	r0, r0, #1
 8000a62:	4770      	bx	lr
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d102      	bne.n	8000a74 <__cmpdf2+0x64>
 8000a6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a72:	d107      	bne.n	8000a84 <__cmpdf2+0x74>
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d1d6      	bne.n	8000a2c <__cmpdf2+0x1c>
 8000a7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a82:	d0d3      	beq.n	8000a2c <__cmpdf2+0x1c>
 8000a84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdrcmple>:
 8000a8c:	4684      	mov	ip, r0
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4662      	mov	r2, ip
 8000a92:	468c      	mov	ip, r1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4663      	mov	r3, ip
 8000a98:	e000      	b.n	8000a9c <__aeabi_cdcmpeq>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_cdcmpeq>:
 8000a9c:	b501      	push	{r0, lr}
 8000a9e:	f7ff ffb7 	bl	8000a10 <__cmpdf2>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	bf48      	it	mi
 8000aa6:	f110 0f00 	cmnmi.w	r0, #0
 8000aaa:	bd01      	pop	{r0, pc}

08000aac <__aeabi_dcmpeq>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff fff4 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2001      	moveq	r0, #1
 8000ab8:	2000      	movne	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmplt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffea 	bl	8000a9c <__aeabi_cdcmpeq>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmple>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffe0 	bl	8000a9c <__aeabi_cdcmpeq>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpge>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffce 	bl	8000a8c <__aeabi_cdrcmple>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpgt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffc4 	bl	8000a8c <__aeabi_cdrcmple>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpun>:
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x10>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d10a      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__aeabi_dcmpun+0x20>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_dcmpun+0x26>
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0001 	mov.w	r0, #1
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b982 	b.w	8000f38 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	460f      	mov	r7, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d146      	bne.n	8000cea <__udivmoddi4+0x9e>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d95e      	bls.n	8000d20 <__udivmoddi4+0xd4>
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	b143      	cbz	r3, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c6c:	f1c3 0220 	rsb	r2, r3, #32
 8000c70:	409f      	lsls	r7, r3
 8000c72:	409c      	lsls	r4, r3
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	4317      	orrs	r7, r2
 8000c7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7e:	fa1f f58c 	uxth.w	r5, ip
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c94:	4290      	cmp	r0, r2
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x5e>
 8000c98:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x5c>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f200 8134 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000ca8:	4639      	mov	r1, r7
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	fb00 f505 	mul.w	r5, r0, r5
 8000cba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x88>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x86>
 8000ccc:	42a5      	cmp	r5, r4
 8000cce:	f200 8119 	bhi.w	8000f04 <__udivmoddi4+0x2b8>
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11e      	cbz	r6, 8000ce6 <__udivmoddi4+0x9a>
 8000cde:	40dc      	lsrs	r4, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0xb4>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f000 80fc 	beq.w	8000eec <__udivmoddi4+0x2a0>
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d00:	fab3 f183 	clz	r1, r3
 8000d04:	2900      	cmp	r1, #0
 8000d06:	d14c      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d08:	42ab      	cmp	r3, r5
 8000d0a:	f0c0 80f2 	bcc.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f240 80ef 	bls.w	8000ef2 <__udivmoddi4+0x2a6>
 8000d14:	4608      	mov	r0, r1
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e5      	beq.n	8000ce6 <__udivmoddi4+0x9a>
 8000d1a:	e9c6 4700 	strd	r4, r7, [r6]
 8000d1e:	e7e2      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xd8>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f382 	clz	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 809f 	bne.w	8000e6c <__udivmoddi4+0x220>
 8000d2e:	1a8a      	subs	r2, r1, r2
 8000d30:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb2 f5fe 	udiv	r5, r2, lr
 8000d3e:	fb0e 2015 	mls	r0, lr, r5, r2
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d48:	fb07 f005 	mul.w	r0, r7, r5
 8000d4c:	4290      	cmp	r0, r2
 8000d4e:	d90f      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d50:	eb1c 0202 	adds.w	r2, ip, r2
 8000d54:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d58:	bf2c      	ite	cs
 8000d5a:	f04f 0901 	movcs.w	r9, #1
 8000d5e:	f04f 0900 	movcc.w	r9, #0
 8000d62:	4290      	cmp	r0, r2
 8000d64:	d903      	bls.n	8000d6e <__udivmoddi4+0x122>
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	f000 80ce 	beq.w	8000f0a <__udivmoddi4+0x2be>
 8000d6e:	4645      	mov	r5, r8
 8000d70:	1a12      	subs	r2, r2, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d78:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d84:	42a7      	cmp	r7, r4
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x14e>
 8000d88:	eb1c 0404 	adds.w	r4, ip, r4
 8000d8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x14c>
 8000d92:	42a7      	cmp	r7, r4
 8000d94:	f200 80b3 	bhi.w	8000efe <__udivmoddi4+0x2b2>
 8000d98:	4610      	mov	r0, r2
 8000d9a:	1be4      	subs	r4, r4, r7
 8000d9c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da0:	e79c      	b.n	8000cdc <__udivmoddi4+0x90>
 8000da2:	f1c1 0420 	rsb	r4, r1, #32
 8000da6:	408b      	lsls	r3, r1
 8000da8:	fa05 fc01 	lsl.w	ip, r5, r1
 8000dac:	fa22 f704 	lsr.w	r7, r2, r4
 8000db0:	40e5      	lsrs	r5, r4
 8000db2:	408a      	lsls	r2, r1
 8000db4:	431f      	orrs	r7, r3
 8000db6:	fa20 f304 	lsr.w	r3, r0, r4
 8000dba:	4088      	lsls	r0, r1
 8000dbc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dc0:	ea43 030c 	orr.w	r3, r3, ip
 8000dc4:	fa1f fc87 	uxth.w	ip, r7
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb5 fef8 	udiv	lr, r5, r8
 8000dd0:	fb08 551e 	mls	r5, r8, lr, r5
 8000dd4:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000dd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ddc:	45a9      	cmp	r9, r5
 8000dde:	d90e      	bls.n	8000dfe <__udivmoddi4+0x1b2>
 8000de0:	197d      	adds	r5, r7, r5
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	bf2c      	ite	cs
 8000de8:	f04f 0b01 	movcs.w	fp, #1
 8000dec:	f04f 0b00 	movcc.w	fp, #0
 8000df0:	45a9      	cmp	r9, r5
 8000df2:	d903      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000df4:	f1bb 0f00 	cmp.w	fp, #0
 8000df8:	f000 808d 	beq.w	8000f16 <__udivmoddi4+0x2ca>
 8000dfc:	46d6      	mov	lr, sl
 8000dfe:	eba5 0509 	sub.w	r5, r5, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e0a:	fb08 5513 	mls	r5, r8, r3, r5
 8000e0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e12:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e16:	45ac      	cmp	ip, r5
 8000e18:	d906      	bls.n	8000e28 <__udivmoddi4+0x1dc>
 8000e1a:	197d      	adds	r5, r7, r5
 8000e1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e20:	d201      	bcs.n	8000e26 <__udivmoddi4+0x1da>
 8000e22:	45ac      	cmp	ip, r5
 8000e24:	d87e      	bhi.n	8000f24 <__udivmoddi4+0x2d8>
 8000e26:	4643      	mov	r3, r8
 8000e28:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000e2c:	eba5 050c 	sub.w	r5, r5, ip
 8000e30:	fba3 9802 	umull	r9, r8, r3, r2
 8000e34:	4545      	cmp	r5, r8
 8000e36:	46ce      	mov	lr, r9
 8000e38:	46c4      	mov	ip, r8
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0x1f6>
 8000e3c:	d106      	bne.n	8000e4c <__udivmoddi4+0x200>
 8000e3e:	4548      	cmp	r0, r9
 8000e40:	d204      	bcs.n	8000e4c <__udivmoddi4+0x200>
 8000e42:	3b01      	subs	r3, #1
 8000e44:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e48:	eb68 0c07 	sbc.w	ip, r8, r7
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d06f      	beq.n	8000f30 <__udivmoddi4+0x2e4>
 8000e50:	ebb0 020e 	subs.w	r2, r0, lr
 8000e54:	eb65 050c 	sbc.w	r5, r5, ip
 8000e58:	40ca      	lsrs	r2, r1
 8000e5a:	fa05 f404 	lsl.w	r4, r5, r4
 8000e5e:	40cd      	lsrs	r5, r1
 8000e60:	4618      	mov	r0, r3
 8000e62:	4314      	orrs	r4, r2
 8000e64:	2100      	movs	r1, #0
 8000e66:	e9c6 4500 	strd	r4, r5, [r6]
 8000e6a:	e73c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	f1c3 0220 	rsb	r2, r3, #32
 8000e74:	4099      	lsls	r1, r3
 8000e76:	409c      	lsls	r4, r3
 8000e78:	40d5      	lsrs	r5, r2
 8000e7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000e82:	fa1f f78c 	uxth.w	r7, ip
 8000e86:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e90:	0c11      	lsrs	r1, r2, #16
 8000e92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e96:	fb00 f507 	mul.w	r5, r0, r7
 8000e9a:	428d      	cmp	r5, r1
 8000e9c:	d90e      	bls.n	8000ebc <__udivmoddi4+0x270>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea6:	bf2c      	ite	cs
 8000ea8:	f04f 0901 	movcs.w	r9, #1
 8000eac:	f04f 0900 	movcc.w	r9, #0
 8000eb0:	428d      	cmp	r5, r1
 8000eb2:	d902      	bls.n	8000eba <__udivmoddi4+0x26e>
 8000eb4:	f1b9 0f00 	cmp.w	r9, #0
 8000eb8:	d031      	beq.n	8000f1e <__udivmoddi4+0x2d2>
 8000eba:	4640      	mov	r0, r8
 8000ebc:	1b49      	subs	r1, r1, r5
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	fbb1 f5fe 	udiv	r5, r1, lr
 8000ec4:	fb0e 1115 	mls	r1, lr, r5, r1
 8000ec8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ecc:	fb05 f107 	mul.w	r1, r5, r7
 8000ed0:	4291      	cmp	r1, r2
 8000ed2:	d907      	bls.n	8000ee4 <__udivmoddi4+0x298>
 8000ed4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000edc:	d201      	bcs.n	8000ee2 <__udivmoddi4+0x296>
 8000ede:	4291      	cmp	r1, r2
 8000ee0:	d823      	bhi.n	8000f2a <__udivmoddi4+0x2de>
 8000ee2:	4645      	mov	r5, r8
 8000ee4:	1a52      	subs	r2, r2, r1
 8000ee6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eea:	e726      	b.n	8000d3a <__udivmoddi4+0xee>
 8000eec:	4631      	mov	r1, r6
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e6f9      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000ef2:	1a84      	subs	r4, r0, r2
 8000ef4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ef8:	2001      	movs	r0, #1
 8000efa:	4617      	mov	r7, r2
 8000efc:	e70b      	b.n	8000d16 <__udivmoddi4+0xca>
 8000efe:	4464      	add	r4, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74a      	b.n	8000d9a <__udivmoddi4+0x14e>
 8000f04:	4464      	add	r4, ip
 8000f06:	3802      	subs	r0, #2
 8000f08:	e6e4      	b.n	8000cd4 <__udivmoddi4+0x88>
 8000f0a:	3d02      	subs	r5, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	3902      	subs	r1, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e6c9      	b.n	8000caa <__udivmoddi4+0x5e>
 8000f16:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1a:	443d      	add	r5, r7
 8000f1c:	e76f      	b.n	8000dfe <__udivmoddi4+0x1b2>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	e7cb      	b.n	8000ebc <__udivmoddi4+0x270>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443d      	add	r5, r7
 8000f28:	e77e      	b.n	8000e28 <__udivmoddi4+0x1dc>
 8000f2a:	3d02      	subs	r5, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	e7d9      	b.n	8000ee4 <__udivmoddi4+0x298>
 8000f30:	4618      	mov	r0, r3
 8000f32:	4631      	mov	r1, r6
 8000f34:	e6d7      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <Pack_measurements_1_jlb>:
}

#else

uint32_t Pack_measurements_1_jlb(measurements_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	e007      	b.n	8000f60 <Pack_measurements_1_jlb+0x24>
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	75fa      	strb	r2, [r7, #23]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9f4      	bls.n	8000f50 <Pack_measurements_1_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	b2d9      	uxtb	r1, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	785b      	ldrb	r3, [r3, #1]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	430b      	orrs	r3, r1
 8000f84:	b2d9      	uxtb	r1, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	789b      	ldrb	r3, [r3, #2]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	430b      	orrs	r3, r1
 8000f96:	b2d9      	uxtb	r1, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	791b      	ldrb	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	795b      	ldrb	r3, [r3, #5]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	79db      	ldrb	r3, [r3, #7]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	7819      	ldrb	r1, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2da      	uxtb	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	7a5b      	ldrb	r3, [r3, #9]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b2da      	uxtb	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	7a9b      	ldrb	r3, [r3, #10]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b2da      	uxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	7adb      	ldrb	r3, [r3, #11]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3302      	adds	r3, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	3303      	adds	r3, #3
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	7b1b      	ldrb	r3, [r3, #12]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7b5b      	ldrb	r3, [r3, #13]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	7b9b      	ldrb	r3, [r3, #14]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	7bdb      	ldrb	r3, [r3, #15]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3303      	adds	r3, #3
 8001084:	430a      	orrs	r2, r1
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3304      	adds	r3, #4
 800108e:	7819      	ldrb	r1, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	7c1b      	ldrb	r3, [r3, #16]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	b2da      	uxtb	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	7c5b      	ldrb	r3, [r3, #17]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	7c9b      	ldrb	r3, [r3, #18]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	7cdb      	ldrb	r3, [r3, #19]
 80010c2:	019b      	lsls	r3, r3, #6
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3304      	adds	r3, #4
 80010ce:	430a      	orrs	r2, r1
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3305      	adds	r3, #5
 80010d8:	7819      	ldrb	r1, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7d1b      	ldrb	r3, [r3, #20]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7d5b      	ldrb	r3, [r3, #21]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	7d9b      	ldrb	r3, [r3, #22]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b2da      	uxtb	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	7ddb      	ldrb	r3, [r3, #23]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b2da      	uxtb	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3305      	adds	r3, #5
 8001118:	430a      	orrs	r2, r1
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3306      	adds	r3, #6
 8001122:	7819      	ldrb	r1, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	7e5b      	ldrb	r3, [r3, #25]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	7e9b      	ldrb	r3, [r3, #26]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	7edb      	ldrb	r3, [r3, #27]
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3306      	adds	r3, #6
 8001162:	430a      	orrs	r2, r1
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3307      	adds	r3, #7
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	b2da      	uxtb	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7f5b      	ldrb	r3, [r3, #29]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b2da      	uxtb	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	7f9b      	ldrb	r3, [r3, #30]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b2da      	uxtb	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	7fdb      	ldrb	r3, [r3, #31]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3307      	adds	r3, #7
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_1_DLC;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2208      	movs	r2, #8
 80011b6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_1_IDE;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
  return measurements_1_CANID;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <Pack_measurements_2_jlb>:
}

#else

uint32_t Pack_measurements_2_jlb(measurements_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	e007      	b.n	80011f0 <Pack_measurements_2_jlb+0x24>
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	75fa      	strb	r2, [r7, #23]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d9f4      	bls.n	80011e0 <Pack_measurements_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->line_sensor_1 & (0x03U)) | ((_m->line_sensor_2 & (0x03U)) << 2U) | ((_m->line_sensor_3 & (0x03U)) << 4U) | ((_m->line_sensor_4 & (0x03U)) << 6U) );
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	b2d9      	uxtb	r1, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	b2db      	uxtb	r3, r3
 8001212:	430b      	orrs	r3, r1
 8001214:	b2d9      	uxtb	r1, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001222:	b2db      	uxtb	r3, r3
 8001224:	430b      	orrs	r3, r1
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	430b      	orrs	r3, r1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b2da      	uxtb	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->line_sensor_5 & (0x03U)) | ((_m->line_sensor_6 & (0x03U)) << 2U) | ((_m->line_sensor_7 & (0x03U)) << 4U) | ((_m->line_sensor_8 & (0x03U)) << 6U) );
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	3301      	adds	r3, #1
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	791b      	ldrb	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	795b      	ldrb	r3, [r3, #5]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 030c 	and.w	r3, r3, #12
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	799b      	ldrb	r3, [r3, #6]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	79db      	ldrb	r3, [r3, #7]
 8001274:	019b      	lsls	r3, r3, #6
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b2da      	uxtb	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->line_sensor_9 & (0x03U)) | ((_m->line_sensor_10 & (0x03U)) << 2U) | ((_m->line_sensor_11 & (0x03U)) << 4U) | ((_m->line_sensor_12 & (0x03U)) << 6U) );
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3302      	adds	r3, #2
 800128a:	7819      	ldrb	r1, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	7a1b      	ldrb	r3, [r3, #8]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	b2da      	uxtb	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	7a5b      	ldrb	r3, [r3, #9]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7a9b      	ldrb	r3, [r3, #10]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7adb      	ldrb	r3, [r3, #11]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3302      	adds	r3, #2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->line_sensor_13 & (0x03U)) | ((_m->line_sensor_14 & (0x03U)) << 2U) | ((_m->line_sensor_15 & (0x03U)) << 4U) | ((_m->line_sensor_16 & (0x03U)) << 6U) );
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	3303      	adds	r3, #3
 80012d4:	7819      	ldrb	r1, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	7b5b      	ldrb	r3, [r3, #13]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	7b9b      	ldrb	r3, [r3, #14]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7bdb      	ldrb	r3, [r3, #15]
 8001308:	019b      	lsls	r3, r3, #6
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3303      	adds	r3, #3
 8001314:	430a      	orrs	r2, r1
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->line_sensor_17 & (0x03U)) | ((_m->line_sensor_18 & (0x03U)) << 2U) | ((_m->line_sensor_19 & (0x03U)) << 4U) | ((_m->line_sensor_20 & (0x03U)) << 6U) );
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3304      	adds	r3, #4
 800131e:	7819      	ldrb	r1, [r3, #0]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	7c1b      	ldrb	r3, [r3, #16]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	7c5b      	ldrb	r3, [r3, #17]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	b2db      	uxtb	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b2da      	uxtb	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	7c9b      	ldrb	r3, [r3, #18]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	7cdb      	ldrb	r3, [r3, #19]
 8001352:	019b      	lsls	r3, r3, #6
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3304      	adds	r3, #4
 800135e:	430a      	orrs	r2, r1
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( (_m->line_sensor_21 & (0x03U)) | ((_m->line_sensor_22 & (0x03U)) << 2U) | ((_m->line_sensor_23 & (0x03U)) << 4U) | ((_m->line_sensor_24 & (0x03U)) << 6U) );
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3305      	adds	r3, #5
 8001368:	7819      	ldrb	r1, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	7d1b      	ldrb	r3, [r3, #20]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	7d5b      	ldrb	r3, [r3, #21]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	7d9b      	ldrb	r3, [r3, #22]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7ddb      	ldrb	r3, [r3, #23]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3305      	adds	r3, #5
 80013a8:	430a      	orrs	r2, r1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->line_sensor_25 & (0x03U)) | ((_m->line_sensor_26 & (0x03U)) << 2U) | ((_m->line_sensor_27 & (0x03U)) << 4U) | ((_m->line_sensor_28 & (0x03U)) << 6U) );
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3306      	adds	r3, #6
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7e1b      	ldrb	r3, [r3, #24]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7e5b      	ldrb	r3, [r3, #25]
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	7e9b      	ldrb	r3, [r3, #26]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	7edb      	ldrb	r3, [r3, #27]
 80013e6:	019b      	lsls	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3306      	adds	r3, #6
 80013f2:	430a      	orrs	r2, r1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( (_m->line_sensor_29 & (0x03U)) | ((_m->line_sensor_30 & (0x03U)) << 2U) | ((_m->line_sensor_31 & (0x03U)) << 4U) | ((_m->line_sensor_32 & (0x03U)) << 6U) );
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3307      	adds	r3, #7
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	7f1b      	ldrb	r3, [r3, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	7f5b      	ldrb	r3, [r3, #29]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	7f9b      	ldrb	r3, [r3, #30]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	7fdb      	ldrb	r3, [r3, #31]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3307      	adds	r3, #7
 800143c:	430a      	orrs	r2, r1
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_2_DLC;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2208      	movs	r2, #8
 8001446:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_2_IDE;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
  return measurements_2_CANID;
 800144e:	2302      	movs	r3, #2
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	0000      	movs	r0, r0
	...

08001460 <Pack_measurements_3_jlb>:
}

#else

uint32_t Pack_measurements_3_jlb(measurements_3_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_3_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e007      	b.n	8001484 <Pack_measurements_3_jlb+0x24>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	75fa      	strb	r2, [r7, #23]
 800147a:	461a      	mov	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9f4      	bls.n	8001474 <Pack_measurements_3_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_x_ro = (uint16_t) JLB_angular_velocity_x_ro_toS(_m->angular_velocity_x_phys);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001490:	a34f      	add	r3, pc, #316	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7fe feeb 	bl	8000270 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	a34d      	add	r3, pc, #308	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f9c2 	bl	8000830 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb42 	bl	8000b3c <__aeabi_d2uiz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	801a      	strh	r2, [r3, #0]
  _m->angular_velocity_y_ro = (uint16_t) JLB_angular_velocity_y_ro_toS(_m->angular_velocity_y_phys);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014c6:	a342      	add	r3, pc, #264	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fed0 	bl	8000270 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a33f      	add	r3, pc, #252	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f9a7 	bl	8000830 <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fb27 	bl	8000b3c <__aeabi_d2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	821a      	strh	r2, [r3, #16]
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80014fc:	a334      	add	r3, pc, #208	; (adr r3, 80015d0 <Pack_measurements_3_jlb+0x170>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7fe feb5 	bl	8000270 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	a332      	add	r3, pc, #200	; (adr r3, 80015d8 <Pack_measurements_3_jlb+0x178>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f98c 	bl	8000830 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fb0c 	bl	8000b3c <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_x_ro & (0xFFU)) );
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_x_ro >> 8U) & (0xFFU)) );
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3301      	adds	r3, #1
 8001542:	7819      	ldrb	r1, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->angular_velocity_y_ro & (0xFFU)) );
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3302      	adds	r3, #2
 800155c:	7819      	ldrb	r1, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8a1b      	ldrh	r3, [r3, #16]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3302      	adds	r3, #2
 8001568:	430a      	orrs	r2, r1
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->angular_velocity_y_ro >> 8U) & (0xFFU)) );
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3303      	adds	r3, #3
 8001572:	7819      	ldrb	r1, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8a1b      	ldrh	r3, [r3, #16]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	b29b      	uxth	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3303      	adds	r3, #3
 8001582:	430a      	orrs	r2, r1
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	3304      	adds	r3, #4
 800158c:	7819      	ldrb	r1, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8c1b      	ldrh	r3, [r3, #32]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3304      	adds	r3, #4
 8001598:	430a      	orrs	r2, r1
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3305      	adds	r3, #5
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8c1b      	ldrh	r3, [r3, #32]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3305      	adds	r3, #5
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_3_DLC;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_3_IDE;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
  return measurements_3_CANID;
 80015c4:	2303      	movs	r3, #3
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	b4395810 	.word	0xb4395810
 80015d4:	401a36c8 	.word	0x401a36c8
 80015d8:	eb1c432d 	.word	0xeb1c432d
 80015dc:	3f2a36e2 	.word	0x3f2a36e2

080015e0 <Pack_measurements_4_jlb>:
}

#else

uint32_t Pack_measurements_4_jlb(measurements_4_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_4_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e007      	b.n	8001604 <Pack_measurements_4_jlb+0x24>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	75fa      	strb	r2, [r7, #23]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b07      	cmp	r3, #7
 8001608:	d9f4      	bls.n	80015f4 <Pack_measurements_4_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->linear_acceleration_x_ro = (uint16_t) JLB_linear_acceleration_x_ro_toS(_m->linear_acceleration_x_phys);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001610:	a34f      	add	r3, pc, #316	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe fe2b 	bl	8000270 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a34d      	add	r3, pc, #308	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f902 	bl	8000830 <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fa82 	bl	8000b3c <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	801a      	strh	r2, [r3, #0]
  _m->linear_acceleration_y_ro = (uint16_t) JLB_linear_acceleration_y_ro_toS(_m->linear_acceleration_y_phys);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001646:	a342      	add	r3, pc, #264	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fe10 	bl	8000270 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	a33f      	add	r3, pc, #252	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8e7 	bl	8000830 <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa67 	bl	8000b3c <__aeabi_d2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	821a      	strh	r2, [r3, #16]
  _m->linear_acceleration_z_ro = (uint16_t) JLB_linear_acceleration_z_ro_toS(_m->linear_acceleration_z_phys);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800167c:	a334      	add	r3, pc, #208	; (adr r3, 8001750 <Pack_measurements_4_jlb+0x170>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fdf5 	bl	8000270 <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	a332      	add	r3, pc, #200	; (adr r3, 8001758 <Pack_measurements_4_jlb+0x178>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f8cc 	bl	8000830 <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa4c 	bl	8000b3c <__aeabi_d2uiz>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->linear_acceleration_x_ro & (0xFFU)) );
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->linear_acceleration_x_ro >> 8U) & (0xFFU)) );
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3301      	adds	r3, #1
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_acceleration_y_ro & (0xFFU)) );
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3302      	adds	r3, #2
 80016dc:	7819      	ldrb	r1, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8a1b      	ldrh	r3, [r3, #16]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3302      	adds	r3, #2
 80016e8:	430a      	orrs	r2, r1
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_acceleration_y_ro >> 8U) & (0xFFU)) );
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3303      	adds	r3, #3
 80016f2:	7819      	ldrb	r1, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8a1b      	ldrh	r3, [r3, #16]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3303      	adds	r3, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->linear_acceleration_z_ro & (0xFFU)) );
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	3304      	adds	r3, #4
 800170c:	7819      	ldrb	r1, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8c1b      	ldrh	r3, [r3, #32]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3304      	adds	r3, #4
 8001718:	430a      	orrs	r2, r1
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->linear_acceleration_z_ro >> 8U) & (0xFFU)) );
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3305      	adds	r3, #5
 8001722:	7819      	ldrb	r1, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8c1b      	ldrh	r3, [r3, #32]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3305      	adds	r3, #5
 8001732:	430a      	orrs	r2, r1
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_4_DLC;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2208      	movs	r2, #8
 800173c:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_4_IDE;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  return measurements_4_CANID;
 8001744:	2304      	movs	r3, #4
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	70a3d70a 	.word	0x70a3d70a
 8001754:	4030623d 	.word	0x4030623d
 8001758:	d2f1a9fc 	.word	0xd2f1a9fc
 800175c:	3f40624d 	.word	0x3f40624d

08001760 <Pack_measurements_5_jlb>:
}

#else

uint32_t Pack_measurements_5_jlb(measurements_5_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(measurements_5_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	e007      	b.n	8001784 <Pack_measurements_5_jlb+0x24>
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	75fa      	strb	r2, [r7, #23]
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d9f4      	bls.n	8001774 <Pack_measurements_5_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->motor_rpm_ro = (uint16_t) JLB_motor_rpm_ro_toS(_m->motor_rpm_phys);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001790:	a331      	add	r3, pc, #196	; (adr r3, 8001858 <Pack_measurements_5_jlb+0xf8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fd6b 	bl	8000270 <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a32f      	add	r3, pc, #188	; (adr r3, 8001860 <Pack_measurements_5_jlb+0x100>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f842 	bl	8000830 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f9c2 	bl	8000b3c <__aeabi_d2uiz>
 80017b8:	4603      	mov	r3, r0
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	801a      	strh	r2, [r3, #0]
  _m->object_range_ro = (uint16_t) JLB_object_range_ro_toS(_m->object_range_phys);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c6:	a328      	add	r3, pc, #160	; (adr r3, 8001868 <Pack_measurements_5_jlb+0x108>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7ff f830 	bl	8000830 <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9b0 	bl	8000b3c <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->motor_rpm_ro & (0xFFU)) );
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->motor_rpm_ro >> 8U) & (0xFFU)) );
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3301      	adds	r3, #1
 80017fa:	7819      	ldrb	r1, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3301      	adds	r3, #1
 800180a:	430a      	orrs	r2, r1
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->object_range_ro & (0xFFU)) );
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3302      	adds	r3, #2
 8001814:	7819      	ldrb	r1, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8a1b      	ldrh	r3, [r3, #16]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3302      	adds	r3, #2
 8001820:	430a      	orrs	r2, r1
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->object_range_ro >> 8U) & (0xFFU)) );
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3303      	adds	r3, #3
 800182a:	7819      	ldrb	r1, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8a1b      	ldrh	r3, [r3, #16]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	b2da      	uxtb	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3303      	adds	r3, #3
 800183a:	430a      	orrs	r2, r1
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) measurements_5_DLC;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2208      	movs	r2, #8
 8001844:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) measurements_5_IDE;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
  return measurements_5_CANID;
 800184c:	2305      	movs	r3, #5
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	40999980 	.word	0x40999980
 8001860:	9999999a 	.word	0x9999999a
 8001864:	3fa99999 	.word	0x3fa99999
 8001868:	eb1c432d 	.word	0xeb1c432d
 800186c:	3f1a36e2 	.word	0x3f1a36e2

08001870 <Pack_odometry_1_jlb>:
}

#else

uint32_t Pack_odometry_1_jlb(odometry_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]
 8001882:	e007      	b.n	8001894 <Pack_odometry_1_jlb+0x24>
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	75fa      	strb	r2, [r7, #23]
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d9f4      	bls.n	8001884 <Pack_odometry_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->orientation_ro = (uint16_t) JLB_orientation_ro_toS(_m->orientation_phys);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018a0:	a34f      	add	r3, pc, #316	; (adr r3, 80019e0 <Pack_odometry_1_jlb+0x170>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fce3 	bl	8000270 <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	a34d      	add	r3, pc, #308	; (adr r3, 80019e8 <Pack_odometry_1_jlb+0x178>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe ffba 	bl	8000830 <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f93a 	bl	8000b3c <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	801a      	strh	r2, [r3, #0]
  _m->position_x_ro = (uint16_t) JLB_position_x_ro_toS(_m->position_x_phys);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018d6:	a346      	add	r3, pc, #280	; (adr r3, 80019f0 <Pack_odometry_1_jlb+0x180>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fcc8 	bl	8000270 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	a343      	add	r3, pc, #268	; (adr r3, 80019f8 <Pack_odometry_1_jlb+0x188>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe ff9f 	bl	8000830 <__aeabi_ddiv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f91f 	bl	8000b3c <__aeabi_d2uiz>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	821a      	strh	r2, [r3, #16]
  _m->position_y_ro = (uint16_t) JLB_position_y_ro_toS(_m->position_y_phys);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800190c:	a338      	add	r3, pc, #224	; (adr r3, 80019f0 <Pack_odometry_1_jlb+0x180>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fcad 	bl	8000270 <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	a336      	add	r3, pc, #216	; (adr r3, 80019f8 <Pack_odometry_1_jlb+0x188>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ff84 	bl	8000830 <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f904 	bl	8000b3c <__aeabi_d2uiz>
 8001934:	4603      	mov	r3, r0
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	841a      	strh	r2, [r3, #32]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->orientation_ro & (0xFFU)) );
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b2da      	uxtb	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->orientation_ro >> 8U) & (0xFFU)) );
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	7819      	ldrb	r1, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->position_x_ro & (0xFFU)) );
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3302      	adds	r3, #2
 800196c:	7819      	ldrb	r1, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8a1b      	ldrh	r3, [r3, #16]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3302      	adds	r3, #2
 8001978:	430a      	orrs	r2, r1
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->position_x_ro >> 8U) & (0xFFU)) );
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3303      	adds	r3, #3
 8001982:	7819      	ldrb	r1, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8a1b      	ldrh	r3, [r3, #16]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3303      	adds	r3, #3
 8001992:	430a      	orrs	r2, r1
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->position_y_ro & (0xFFU)) );
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	3304      	adds	r3, #4
 800199c:	7819      	ldrb	r1, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8c1b      	ldrh	r3, [r3, #32]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3304      	adds	r3, #4
 80019a8:	430a      	orrs	r2, r1
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->position_y_ro >> 8U) & (0xFFU)) );
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	3305      	adds	r3, #5
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8c1b      	ldrh	r3, [r3, #32]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3305      	adds	r3, #5
 80019c2:	430a      	orrs	r2, r1
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_1_DLC;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2208      	movs	r2, #8
 80019cc:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_1_IDE;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
  return odometry_1_CANID;
 80019d4:	2311      	movs	r3, #17
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	b4395810 	.word	0xb4395810
 80019e4:	401a36c8 	.word	0x401a36c8
 80019e8:	eb1c432d 	.word	0xeb1c432d
 80019ec:	3f2a36e2 	.word	0x3f2a36e2
 80019f0:	70a3d70a 	.word	0x70a3d70a
 80019f4:	4030623d 	.word	0x4030623d
 80019f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019fc:	3f40624d 	.word	0x3f40624d

08001a00 <Pack_odometry_2_jlb>:
}

#else

uint32_t Pack_odometry_2_jlb(odometry_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(odometry_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
 8001a12:	e007      	b.n	8001a24 <Pack_odometry_2_jlb+0x24>
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	75fa      	strb	r2, [r7, #23]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d9f4      	bls.n	8001a14 <Pack_odometry_2_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->angular_velocity_z_ro = (uint16_t) JLB_angular_velocity_z_ro_toS(_m->angular_velocity_z_phys);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a30:	a335      	add	r3, pc, #212	; (adr r3, 8001b08 <Pack_odometry_2_jlb+0x108>)
 8001a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a36:	f7fe fc1b 	bl	8000270 <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	a333      	add	r3, pc, #204	; (adr r3, 8001b10 <Pack_odometry_2_jlb+0x110>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	f7fe fef2 	bl	8000830 <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f872 	bl	8000b3c <__aeabi_d2uiz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	801a      	strh	r2, [r3, #0]
  _m->linear_velocity_x_ro = (uint16_t) JLB_linear_velocity_x_ro_toS(_m->linear_velocity_x_phys);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a66:	a32c      	add	r3, pc, #176	; (adr r3, 8001b18 <Pack_odometry_2_jlb+0x118>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fc00 	bl	8000270 <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	a329      	add	r3, pc, #164	; (adr r3, 8001b20 <Pack_odometry_2_jlb+0x120>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fed7 	bl	8000830 <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff f857 	bl	8000b3c <__aeabi_d2uiz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	821a      	strh	r2, [r3, #16]
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->angular_velocity_z_ro & (0xFFU)) );
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->angular_velocity_z_ro >> 8U) & (0xFFU)) );
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	7819      	ldrb	r1, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	3301      	adds	r3, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->linear_velocity_x_ro & (0xFFU)) );
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	7819      	ldrb	r1, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8a1b      	ldrh	r3, [r3, #16]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->linear_velocity_x_ro >> 8U) & (0xFFU)) );
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3303      	adds	r3, #3
 8001adc:	7819      	ldrb	r1, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8a1b      	ldrh	r3, [r3, #16]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	3303      	adds	r3, #3
 8001aec:	430a      	orrs	r2, r1
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) odometry_2_DLC;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2208      	movs	r2, #8
 8001af6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) odometry_2_IDE;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
  return odometry_2_CANID;
 8001afe:	2312      	movs	r3, #18
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	b4395810 	.word	0xb4395810
 8001b0c:	401a36c8 	.word	0x401a36c8
 8001b10:	eb1c432d 	.word	0xeb1c432d
 8001b14:	3f2a36e2 	.word	0x3f2a36e2
 8001b18:	70a3d70a 	.word	0x70a3d70a
 8001b1c:	4030623d 	.word	0x4030623d
 8001b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b24:	3f40624d 	.word	0x3f40624d

08001b28 <Pack_logic_1_jlb>:
}

#else

uint32_t Pack_logic_1_jlb(logic_1_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_1_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]
 8001b3a:	e007      	b.n	8001b4c <Pack_logic_1_jlb+0x24>
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	75fa      	strb	r2, [r7, #23]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4413      	add	r3, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d9f4      	bls.n	8001b3c <Pack_logic_1_jlb+0x14>

#ifdef JLB_USE_SIGFLOAT
  _m->target_angle_ro = (uint16_t) JLB_target_angle_ro_toS(_m->target_angle_phys);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b58:	a369      	add	r3, pc, #420	; (adr r3, 8001d00 <Pack_logic_1_jlb+0x1d8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fb87 	bl	8000270 <__adddf3>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	a367      	add	r3, pc, #412	; (adr r3, 8001d08 <Pack_logic_1_jlb+0x1e0>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fe5e 	bl	8000830 <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe ffde 	bl	8000b3c <__aeabi_d2uiz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	801a      	strh	r2, [r3, #0]
  _m->target_speed_ro = (uint16_t) JLB_target_speed_ro_toS(_m->target_speed_phys);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b8e:	a360      	add	r3, pc, #384	; (adr r3, 8001d10 <Pack_logic_1_jlb+0x1e8>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fb6c 	bl	8000270 <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	a35d      	add	r3, pc, #372	; (adr r3, 8001d18 <Pack_logic_1_jlb+0x1f0>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fe43 	bl	8000830 <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7fe ffc3 	bl	8000b3c <__aeabi_d2uiz>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	821a      	strh	r2, [r3, #16]
  _m->cross_track_error_ro = (uint16_t) JLB_cross_track_error_ro_toS(_m->cross_track_error_phys);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001bc4:	a34e      	add	r3, pc, #312	; (adr r3, 8001d00 <Pack_logic_1_jlb+0x1d8>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fb51 	bl	8000270 <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	a34c      	add	r3, pc, #304	; (adr r3, 8001d08 <Pack_logic_1_jlb+0x1e0>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fe28 	bl	8000830 <__aeabi_ddiv>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe ffa8 	bl	8000b3c <__aeabi_d2uiz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	841a      	strh	r2, [r3, #32]
  _m->heading_error_ro = (uint16_t) JLB_heading_error_ro_toS(_m->heading_error_phys);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bfa:	a349      	add	r3, pc, #292	; (adr r3, 8001d20 <Pack_logic_1_jlb+0x1f8>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fb36 	bl	8000270 <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	a346      	add	r3, pc, #280	; (adr r3, 8001d28 <Pack_logic_1_jlb+0x200>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fe0d 	bl	8000830 <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ff8d 	bl	8000b3c <__aeabi_d2uiz>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	861a      	strh	r2, [r3, #48]	; 0x30
#endif // JLB_USE_SIGFLOAT

  _d[0] |= (uint8_t) ( (_m->target_angle_ro & (0xFFU)) );
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( ((_m->target_angle_ro >> 8U) & (0xFFU)) );
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	7819      	ldrb	r1, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->target_speed_ro & (0xFFU)) );
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	7819      	ldrb	r1, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8a1b      	ldrh	r3, [r3, #16]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3302      	adds	r3, #2
 8001c66:	430a      	orrs	r2, r1
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( ((_m->target_speed_ro >> 8U) & (0xFFU)) );
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3303      	adds	r3, #3
 8001c70:	7819      	ldrb	r1, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8a1b      	ldrh	r3, [r3, #16]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	430a      	orrs	r2, r1
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->cross_track_error_ro & (0xFFU)) );
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	7819      	ldrb	r1, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8c1b      	ldrh	r3, [r3, #32]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3304      	adds	r3, #4
 8001c96:	430a      	orrs	r2, r1
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]
  _d[5] |= (uint8_t) ( ((_m->cross_track_error_ro >> 8U) & (0xFFU)) );
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3305      	adds	r3, #5
 8001ca0:	7819      	ldrb	r1, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8c1b      	ldrh	r3, [r3, #32]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	3305      	adds	r3, #5
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
  _d[6] |= (uint8_t) ( (_m->heading_error_ro & (0xFFU)) );
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3306      	adds	r3, #6
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3306      	adds	r3, #6
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]
  _d[7] |= (uint8_t) ( ((_m->heading_error_ro >> 8U) & (0xFFU)) );
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3307      	adds	r3, #7
 8001cd0:	7819      	ldrb	r1, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	3307      	adds	r3, #7
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_1_DLC;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_1_IDE;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
  return logic_1_CANID;
 8001cf2:	2321      	movs	r3, #33	; 0x21
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	f3af 8000 	nop.w
 8001d00:	b4395810 	.word	0xb4395810
 8001d04:	400a36c8 	.word	0x400a36c8
 8001d08:	eb1c432d 	.word	0xeb1c432d
 8001d0c:	3f1a36e2 	.word	0x3f1a36e2
 8001d10:	70a3d70a 	.word	0x70a3d70a
 8001d14:	4030623d 	.word	0x4030623d
 8001d18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d1c:	3f40624d 	.word	0x3f40624d
 8001d20:	b4395810 	.word	0xb4395810
 8001d24:	3ffa36c8 	.word	0x3ffa36c8
 8001d28:	eb1c432d 	.word	0xeb1c432d
 8001d2c:	3f0a36e2 	.word	0x3f0a36e2

08001d30 <Pack_logic_2_jlb>:
}

#else

uint32_t Pack_logic_2_jlb(logic_2_t* _m, uint8_t* _d, uint8_t* _len, uint8_t* _ide)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  uint8_t i; for (i = 0u; i < JLB_VALIDATE_DLC(logic_2_DLC); _d[i++] = JLB_INITIAL_BYTE_VALUE);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
 8001d42:	e007      	b.n	8001d54 <Pack_logic_2_jlb+0x24>
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	75fa      	strb	r2, [r7, #23]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4413      	add	r3, r2
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d9f4      	bls.n	8001d44 <Pack_logic_2_jlb+0x14>

  _d[0] |= (uint8_t) ( (_m->state & (0xFFU)) );
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	701a      	strb	r2, [r3, #0]
  _d[1] |= (uint8_t) ( (_m->direction & (0xFFU)) );
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	7819      	ldrb	r1, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	785a      	ldrb	r2, [r3, #1]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]
  _d[2] |= (uint8_t) ( (_m->previous_node & (0xFFU)) );
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3302      	adds	r3, #2
 8001d82:	7819      	ldrb	r1, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	789a      	ldrb	r2, [r3, #2]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
  _d[3] |= (uint8_t) ( (_m->next_node & (0xFFU)) );
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3303      	adds	r3, #3
 8001d96:	7819      	ldrb	r1, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	78da      	ldrb	r2, [r3, #3]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	430a      	orrs	r2, r1
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]
  _d[4] |= (uint8_t) ( (_m->at_cross_section & (0x01U)) | ((_m->under_gate & (0x01U)) << 1U) );
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3304      	adds	r3, #4
 8001daa:	7819      	ldrb	r1, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

  *_len = (uint8_t) logic_2_DLC;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	701a      	strb	r2, [r3, #0]
  *_ide = (uint8_t) logic_2_IDE;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
  return logic_2_CANID;
 8001dde:	2322      	movs	r3, #34	; 0x22
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConvCpltCallback>:
uint32_t adc_values_raw[8];
analog_signals_s adc_values = {0u};
uint8_t channel_idx = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	adc_values.motor_batt_voltage_raw = adc_values_raw[0];
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001dfc:	801a      	strh	r2, [r3, #0]
	adc_values.motor_curr_raw = adc_values_raw[1];
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e06:	805a      	strh	r2, [r3, #2]
	adc_values.vbus_raw = adc_values_raw[2];
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e10:	809a      	strh	r2, [r3, #4]
	adc_values.distance_short2_raw = adc_values_raw[5];
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e1a:	80da      	strh	r2, [r3, #6]
	adc_values.distance_short1_raw = adc_values_raw[3];
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e24:	811a      	strh	r2, [r3, #8]
	adc_values.distance_long1_raw = adc_values_raw[4];
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e2e:	815a      	strh	r2, [r3, #10]
	adc_values.lv_batt_voltage_raw = adc_values_raw[6];
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e38:	819a      	strh	r2, [r3, #12]
	adc_values.distance_long2_raw = adc_values_raw[7];
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_ADC_ConvCpltCallback+0x70>)
 8001e42:	81da      	strh	r2, [r3, #14]

	vTaskResume(static_cast<TaskHandle_t>(mainTaskHandle));
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_ADC_ConvCpltCallback+0x74>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f01c fea7 	bl	801eb9c <vTaskResume>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000012c 	.word	0x2000012c
 8001e5c:	2000014c 	.word	0x2000014c
 8001e60:	2000062c 	.word	0x2000062c

08001e64 <_Z18DistanceSensorTaskv>:
extern analog_signals_s adc_values;
DistanceSensorData_s distance_sensor = {0u};


void DistanceSensorTask()
{
 8001e64:	b5b0      	push	{r4, r5, r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	uint8_t i,j;
	distance_sensor.voltage_long[0] = ((float)(adc_values.distance_long1_raw)) / 4096.0f * 3.3f;
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001e6c:	895b      	ldrh	r3, [r3, #10]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e76:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001e7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	4b8d      	ldr	r3, [pc, #564]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]
	distance_sensor.voltage_long[1] = ((float)(adc_values.distance_long2_raw)) / 4096.0f * 3.3f;
 8001e8c:	4b88      	ldr	r3, [pc, #544]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001e8e:	89db      	ldrh	r3, [r3, #14]
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e98:	eddf 6a86 	vldr	s13, [pc, #536]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001eaa:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_sensor.voltage_short[0] = ((float)(adc_values.distance_short1_raw)) / 4096.0f * 3.3f;
 8001eae:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001eb0:	891b      	ldrh	r3, [r3, #8]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eba:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001ebe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001ecc:	edc3 7a02 	vstr	s15, [r3, #8]
	distance_sensor.voltage_short[1] = ((float)(adc_values.distance_short2_raw)) / 4096.0f * 3.3f;
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <_Z18DistanceSensorTaskv+0x24c>)
 8001ed2:	88db      	ldrh	r3, [r3, #6]
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001edc:	eddf 6a75 	vldr	s13, [pc, #468]	; 80020b4 <_Z18DistanceSensorTaskv+0x250>
 8001ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee4:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80020b8 <_Z18DistanceSensorTaskv+0x254>
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	4b73      	ldr	r3, [pc, #460]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001eee:	edc3 7a03 	vstr	s15, [r3, #12]

	for(i = 0; i < 1; ++i)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	71fb      	strb	r3, [r7, #7]
 8001ef6:	e0a1      	b.n	800203c <_Z18DistanceSensorTaskv+0x1d8>
	{
		float x = distance_sensor.voltage_long[i];
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a70      	ldr	r2, [pc, #448]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	603b      	str	r3, [r7, #0]
		distance_sensor.distance_long[i] = 0.0f;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f08:	3304      	adds	r3, #4
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001f14:	2300      	movs	r3, #0
 8001f16:	71bb      	strb	r3, [r7, #6]
 8001f18:	e03a      	b.n	8001f90 <_Z18DistanceSensorTaskv+0x12c>
		{
			distance_sensor.distance_long[i] += pow(x,5-j) * long_poly_coeff[j];
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	f1c3 0305 	rsb	r3, r3, #5
 8001f20:	4618      	mov	r0, r3
 8001f22:	ed97 0a00 	vldr	s0, [r7]
 8001f26:	f000 f8d1 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f2a:	ec55 4b10 	vmov	r4, r5, d0
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <_Z18DistanceSensorTaskv+0x25c>)
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe faf7 	bl	800052c <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe fb49 	bl	80005dc <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4614      	mov	r4, r2
 8001f50:	461d      	mov	r5, r3
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4a59      	ldr	r2, [pc, #356]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f56:	3304      	adds	r3, #4
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fae4 	bl	800052c <__aeabi_f2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4620      	mov	r0, r4
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f7fe f980 	bl	8000270 <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	79fc      	ldrb	r4, [r7, #7]
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fdff 	bl	8000b7c <__aeabi_d2f>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	494e      	ldr	r1, [pc, #312]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f82:	1d23      	adds	r3, r4, #4
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	71bb      	strb	r3, [r7, #6]
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d9c1      	bls.n	8001f1a <_Z18DistanceSensorTaskv+0xb6>
		}

		distance_sensor.distance_short[i] = 0.0f;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4a48      	ldr	r2, [pc, #288]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
		x = distance_sensor.voltage_short[i];
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4a44      	ldr	r2, [pc, #272]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001faa:	3302      	adds	r3, #2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	603b      	str	r3, [r7, #0]
		for(j = 0; j < 6; ++j)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71bb      	strb	r3, [r7, #6]
 8001fb8:	e03a      	b.n	8002030 <_Z18DistanceSensorTaskv+0x1cc>
		{
			distance_sensor.distance_short[i] += pow(x,5-j) * short_poly_coeff[j];
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	f1c3 0305 	rsb	r3, r3, #5
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	ed97 0a00 	vldr	s0, [r7]
 8001fc6:	f000 f881 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001fca:	ec55 4b10 	vmov	r4, r5, d0
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <_Z18DistanceSensorTaskv+0x260>)
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe faa7 	bl	800052c <__aeabi_f2d>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	f7fe faf9 	bl	80005dc <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4614      	mov	r4, r2
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4a31      	ldr	r2, [pc, #196]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa94 	bl	800052c <__aeabi_f2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe f930 	bl	8000270 <__adddf3>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	79fc      	ldrb	r4, [r7, #7]
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7fe fdaf 	bl	8000b7c <__aeabi_d2f>
 800201e:	4602      	mov	r2, r0
 8002020:	4926      	ldr	r1, [pc, #152]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002022:	1da3      	adds	r3, r4, #6
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	601a      	str	r2, [r3, #0]
		for(j = 0; j < 6; ++j)
 800202a:	79bb      	ldrb	r3, [r7, #6]
 800202c:	3301      	adds	r3, #1
 800202e:	71bb      	strb	r3, [r7, #6]
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d9c1      	bls.n	8001fba <_Z18DistanceSensorTaskv+0x156>
	for(i = 0; i < 1; ++i)
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	3301      	adds	r3, #1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f43f af5a 	beq.w	8001ef8 <_Z18DistanceSensorTaskv+0x94>
		}
	}

	if((distance_sensor.distance_short[0] >= 20.0f) || (distance_sensor.distance_short[1] >= 20.0f))
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002046:	edd3 7a06 	vldr	s15, [r3, #24]
 800204a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	da09      	bge.n	800206c <_Z18DistanceSensorTaskv+0x208>
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800205a:	edd3 7a07 	vldr	s15, [r3, #28]
 800205e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	db04      	blt.n	8002076 <_Z18DistanceSensorTaskv+0x212>
	{
		//distance_sensor.distance = (distance_sensor.distance_long[0] + distance_sensor.distance_long[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_long[0];
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e003      	b.n	800207e <_Z18DistanceSensorTaskv+0x21a>
	}
	else
	{
		//distance_sensor.distance = (distance_sensor.distance_short[0] + distance_sensor.distance_short[1]) / 2.0f;
		distance_sensor.distance = distance_sensor.distance_short[0];
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800207c:	6213      	str	r3, [r2, #32]
	}

	distance_sensor.distance -= 7.0f;
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002080:	edd3 7a08 	vldr	s15, [r3, #32]
 8002084:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 800208e:	edc3 7a08 	vstr	s15, [r3, #32]
	distance_sensor.distance /= 100.0f;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 8002094:	ed93 7a08 	vldr	s14, [r3, #32]
 8002098:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80020c8 <_Z18DistanceSensorTaskv+0x264>
 800209c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <_Z18DistanceSensorTaskv+0x258>)
 80020a2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000014c 	.word	0x2000014c
 80020b4:	45800000 	.word	0x45800000
 80020b8:	40533333 	.word	0x40533333
 80020bc:	2000015c 	.word	0x2000015c
 80020c0:	20000018 	.word	0x20000018
 80020c4:	20000000 	.word	0x20000000
 80020c8:	42c80000 	.word	0x42c80000

080020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80020d6:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe fa27 	bl	800052c <__aeabi_f2d>
 80020de:	4604      	mov	r4, r0
 80020e0:	460d      	mov	r5, r1
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f7fe fa10 	bl	8000508 <__aeabi_i2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	ec43 2b11 	vmov	d1, r2, r3
 80020f0:	ec45 4b10 	vmov	d0, r4, r5
 80020f4:	f01e f958 	bl	80203a8 <pow>
 80020f8:	eeb0 7a40 	vmov.f32	s14, s0
 80020fc:	eef0 7a60 	vmov.f32	s15, s1
    }
 8002100:	eeb0 0a47 	vmov.f32	s0, s14
 8002104:	eef0 0a67 	vmov.f32	s1, s15
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002110 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>:

encoder_instance enc_instance_mot;
extern TIM_HandleTypeDef htim3;

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if (!first_time)
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x28>
	{
		encoder_value->velocity = 0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xf4>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e05c      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
	}
	else
	{
		if (temp_counter == encoder_value->last_counter_value)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	429a      	cmp	r2, r3
 8002140:	d103      	bne.n	800214a <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x3a>
		{
			encoder_value->velocity = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	801a      	strh	r2, [r3, #0]
 8002148:	e053      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
		}
		else if (temp_counter > encoder_value->last_counter_value)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d927      	bls.n	80021a4 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x94>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	bf0c      	ite	eq
 8002162:	2301      	moveq	r3, #1
 8002164:	2300      	movne	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d010      	beq.n	800218e <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0x7e>
			{
				encoder_value->velocity = -encoder_value->last_counter_value - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	b29a      	uxth	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	b29b      	uxth	r3, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	b29b      	uxth	r3, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21a      	sxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	801a      	strh	r2, [r3, #0]
 800218c:	e031      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	b29b      	uxth	r3, r3
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	b21a      	sxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	e026      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xc2>
			{
				encoder_value->velocity = temp_counter - encoder_value->last_counter_value;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	801a      	strh	r2, [r3, #0]
 80021d0:	e00f      	b.n	80021f2 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef+0xe2>
			}
			else
			{
				encoder_value->velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value->last_counter_value);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	//encoder_value->rpm = ((float) (encoder_value->velocity) / ENCODER_TASK_TIMESTEP) / 2 * 1000.0f * AB_ROT_PER_PULSE * GEAR_RATIO * 60;
	encoder_value->last_counter_value = temp_counter;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	2000018c 	.word	0x2000018c

08002208 <_Z12Encoder_TaskPv>:

void Encoder_Task(void * argument)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	// measure velocity, position
	int16_t velocity_values[5] = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	811a      	strh	r2, [r3, #8]
	uint8_t index = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8002220:	f01c fdfc 	bl	801ee1c <xTaskGetTickCount>
 8002224:	4603      	mov	r3, r0
 8002226:	60bb      	str	r3, [r7, #8]
	for(;;)
	{
		update_encoder(&enc_instance_mot, &htim3);
 8002228:	491e      	ldr	r1, [pc, #120]	; (80022a4 <_Z12Encoder_TaskPv+0x9c>)
 800222a:	481f      	ldr	r0, [pc, #124]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 800222c:	f7ff ff70 	bl	8002110 <_Z14update_encoderP16encoder_instanceP17TIM_HandleTypeDef>
		velocity_values[index++] = enc_instance_mot.velocity;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002232:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	1c59      	adds	r1, r3, #1
 800223a:	75f9      	strb	r1, [r7, #23]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	3318      	adds	r3, #24
 8002240:	443b      	add	r3, r7
 8002242:	f823 2c0c 	strh.w	r2, [r3, #-12]

		if(index == 5)
 8002246:	7dfb      	ldrb	r3, [r7, #23]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d101      	bne.n	8002250 <_Z12Encoder_TaskPv+0x48>
		{
			index = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	75fb      	strb	r3, [r7, #23]
		}

		enc_instance_mot.rpm = 0.0f;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 8002258:	2300      	movs	r3, #0
 800225a:	75bb      	strb	r3, [r7, #22]
 800225c:	e018      	b.n	8002290 <_Z12Encoder_TaskPv+0x88>
		{
			enc_instance_mot.rpm += ((float)(velocity_values[i])) / 5.0f;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002260:	ed93 7a02 	vldr	s14, [r3, #8]
 8002264:	7dbb      	ldrb	r3, [r7, #22]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	3318      	adds	r3, #24
 800226a:	443b      	add	r3, r7
 800226c:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002278:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 800227c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <_Z12Encoder_TaskPv+0xa0>)
 8002286:	edc3 7a02 	vstr	s15, [r3, #8]
		for(i = 0 ; i < 5; ++i)
 800228a:	7dbb      	ldrb	r3, [r7, #22]
 800228c:	3301      	adds	r3, #1
 800228e:	75bb      	strb	r3, [r7, #22]
 8002290:	7dbb      	ldrb	r3, [r7, #22]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d9e3      	bls.n	800225e <_Z12Encoder_TaskPv+0x56>
		}

		vTaskDelayUntil(&xLastWakeTime, 1u);
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2101      	movs	r1, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f01c fb6d 	bl	801e97c <vTaskDelayUntil>
		update_encoder(&enc_instance_mot, &htim3);
 80022a2:	e7c1      	b.n	8002228 <_Z12Encoder_TaskPv+0x20>
 80022a4:	20000ab8 	.word	0x20000ab8
 80022a8:	20000180 	.word	0x20000180

080022ac <_Z12CalculateRPMv>:
	}
}

float CalculateRPM()
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
	uint8_t i;
	static uint8_t index = 0u;;
	static float rpm_averaging_array[5];
	float averaged_rpm = 0.0f;
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	603b      	str	r3, [r7, #0]
	rpm_averaging_array[index++] = enc_instance_mot.rpm;
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <_Z12CalculateRPMv+0x90>)
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	b2c8      	uxtb	r0, r1
 80022c4:	491e      	ldr	r1, [pc, #120]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022c6:	7008      	strb	r0, [r1, #0]
 80022c8:	491e      	ldr	r1, [pc, #120]	; (8002344 <_Z12CalculateRPMv+0x98>)
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]

	if(index == 5)
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d102      	bne.n	80022de <_Z12CalculateRPMv+0x32>
	{
		index = 0;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <_Z12CalculateRPMv+0x94>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
	}

	averaged_rpm = 0.0f;
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	603b      	str	r3, [r7, #0]
	for(i = 0 ; i < 5; ++i)
 80022e4:	2300      	movs	r3, #0
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	e012      	b.n	8002310 <_Z12CalculateRPMv+0x64>
	{
		averaged_rpm += rpm_averaging_array[i] / 5.0f;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <_Z12CalculateRPMv+0x98>)
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80022fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022fe:	ed97 7a00 	vldr	s14, [r7]
 8002302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002306:	edc7 7a00 	vstr	s15, [r7]
	for(i = 0 ; i < 5; ++i)
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	3301      	adds	r3, #1
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d9e9      	bls.n	80022ea <_Z12CalculateRPMv+0x3e>
	}

	averaged_rpm *= -1.36f;
 8002316:	edd7 7a00 	vldr	s15, [r7]
 800231a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002348 <_Z12CalculateRPMv+0x9c>
 800231e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002322:	edc7 7a00 	vstr	s15, [r7]

	return averaged_rpm;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	ee07 3a90 	vmov	s15, r3
}
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000180 	.word	0x20000180
 8002340:	2000018d 	.word	0x2000018d
 8002344:	20000190 	.word	0x20000190
 8002348:	bfae147b 	.word	0xbfae147b

0800234c <_Z15readByteFromIMUh>:
extern I2C_HandleTypeDef hi2c1;
uint8_t IMU_initialized = 0u;
IMU_signals_s imu;

uint8_t readByteFromIMU(uint8_t address)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t ret = 0u;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &address, 1, 100);
 800235a:	1dfa      	adds	r2, r7, #7
 800235c:	2364      	movs	r3, #100	; 0x64
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	21d6      	movs	r1, #214	; 0xd6
 8002364:	4808      	ldr	r0, [pc, #32]	; (8002388 <_Z15readByteFromIMUh+0x3c>)
 8002366:	f013 fbf3 	bl	8015b50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &ret, 1, 100);
 800236a:	f107 020f 	add.w	r2, r7, #15
 800236e:	2364      	movs	r3, #100	; 0x64
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	21d7      	movs	r1, #215	; 0xd7
 8002376:	4804      	ldr	r0, [pc, #16]	; (8002388 <_Z15readByteFromIMUh+0x3c>)
 8002378:	f013 fcde 	bl	8015d38 <HAL_I2C_Master_Receive>
	return ret;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000708 	.word	0x20000708

0800238c <_Z8IMU_Taskv>:
uint8_t test_data[6] = {0u};

void IMU_Task()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
	if(IMU_initialized == 0u)
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <_Z8IMU_Taskv+0x1c4>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d13f      	bne.n	800241a <_Z8IMU_Taskv+0x8e>
	{
		uint8_t whoami = 0u;
 800239a:	2300      	movs	r3, #0
 800239c:	72bb      	strb	r3, [r7, #10]
		uint8_t whoami_reg = WHO_AM_I_ADDR;
 800239e:	230f      	movs	r3, #15
 80023a0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &whoami_reg, 1, 100);
 80023a2:	f107 0209 	add.w	r2, r7, #9
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	21d6      	movs	r1, #214	; 0xd6
 80023ae:	4869      	ldr	r0, [pc, #420]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 80023b0:	f013 fbce 	bl	8015b50 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &whoami, 1, 100);
 80023b4:	f107 020a 	add.w	r2, r7, #10
 80023b8:	2364      	movs	r3, #100	; 0x64
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	21d7      	movs	r1, #215	; 0xd7
 80023c0:	4864      	ldr	r0, [pc, #400]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 80023c2:	f013 fcb9 	bl	8015d38 <HAL_I2C_Master_Receive>
		if(whoami != 0x6A)
 80023c6:	7abb      	ldrb	r3, [r7, #10]
 80023c8:	2b6a      	cmp	r3, #106	; 0x6a
 80023ca:	f040 80bd 	bne.w	8002548 <_Z8IMU_Taskv+0x1bc>
		{
			return;
		}

		uint8_t pData[2] = {CTRL1_XL_ADDR, 0x60};
 80023ce:	f246 0310 	movw	r3, #24592	; 0x6010
 80023d2:	80bb      	strh	r3, [r7, #4]
		//HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);

		pData[0] = CTRL2_G_ADDR;
 80023d4:	2311      	movs	r3, #17
 80023d6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 80023d8:	1d3a      	adds	r2, r7, #4
 80023da:	2364      	movs	r3, #100	; 0x64
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2302      	movs	r3, #2
 80023e0:	21d6      	movs	r1, #214	; 0xd6
 80023e2:	485c      	ldr	r0, [pc, #368]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 80023e4:	f013 fbb4 	bl	8015b50 <HAL_I2C_Master_Transmit>

		uint8_t ctrl3c = readByteFromIMU(0x12);
 80023e8:	2012      	movs	r0, #18
 80023ea:	f7ff ffaf 	bl	800234c <_Z15readByteFromIMUh>
 80023ee:	4603      	mov	r3, r0
 80023f0:	72fb      	strb	r3, [r7, #11]
		ctrl3c = ctrl3c & (~0x04);
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	72fb      	strb	r3, [r7, #11]
		pData[0] = 0x12;
 80023fa:	2312      	movs	r3, #18
 80023fc:	713b      	strb	r3, [r7, #4]
		pData[1] = ctrl3c;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, pData, 2, 100);
 8002402:	1d3a      	adds	r2, r7, #4
 8002404:	2364      	movs	r3, #100	; 0x64
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2302      	movs	r3, #2
 800240a:	21d6      	movs	r1, #214	; 0xd6
 800240c:	4851      	ldr	r0, [pc, #324]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 800240e:	f013 fb9f 	bl	8015b50 <HAL_I2C_Master_Transmit>

		IMU_initialized = 1u;
 8002412:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <_Z8IMU_Taskv+0x1c4>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e097      	b.n	800254a <_Z8IMU_Taskv+0x1be>
	}
	else
	{
		uint8_t status = 0u;
 800241a:	2300      	movs	r3, #0
 800241c:	70fb      	strb	r3, [r7, #3]
		uint8_t status_reg = STATUS_REG;
 800241e:	231e      	movs	r3, #30
 8002420:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Master_Transmit(&hi2c1, IMU_I2C_WRITE_ADDRESS, &status_reg, 1, 100);
 8002422:	1cba      	adds	r2, r7, #2
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	21d6      	movs	r1, #214	; 0xd6
 800242c:	4849      	ldr	r0, [pc, #292]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 800242e:	f013 fb8f 	bl	8015b50 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, IMU_I2C_READ_ADDRESS, &status, 1, 100);
 8002432:	1cfa      	adds	r2, r7, #3
 8002434:	2364      	movs	r3, #100	; 0x64
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2301      	movs	r3, #1
 800243a:	21d7      	movs	r1, #215	; 0xd7
 800243c:	4845      	ldr	r0, [pc, #276]	; (8002554 <_Z8IMU_Taskv+0x1c8>)
 800243e:	f013 fc7b 	bl	8015d38 <HAL_I2C_Master_Receive>

		//Accelerometer new data available
		if((status & 0x01) == 1u)
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d053      	beq.n	80024f4 <_Z8IMU_Taskv+0x168>
		{
			uint8_t tmp_low, tmp_high;
			tmp_low = readByteFromIMU(OUTX_L_XL);
 800244c:	2028      	movs	r0, #40	; 0x28
 800244e:	f7ff ff7d 	bl	800234c <_Z15readByteFromIMUh>
 8002452:	4603      	mov	r3, r0
 8002454:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTX_H_XL);
 8002456:	2029      	movs	r0, #41	; 0x29
 8002458:	f7ff ff78 	bl	800234c <_Z15readByteFromIMUh>
 800245c:	4603      	mov	r3, r0
 800245e:	73bb      	strb	r3, [r7, #14]
			imu.acc_x = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002460:	7bbb      	ldrb	r3, [r7, #14]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	b21a      	sxth	r2, r3
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002476:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002558 <_Z8IMU_Taskv+0x1cc>
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	4b37      	ldr	r3, [pc, #220]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 8002480:	edc3 7a00 	vstr	s15, [r3]

			tmp_low = readByteFromIMU(OUTY_L_XL);
 8002484:	202a      	movs	r0, #42	; 0x2a
 8002486:	f7ff ff61 	bl	800234c <_Z15readByteFromIMUh>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTY_L_XL);
 800248e:	202a      	movs	r0, #42	; 0x2a
 8002490:	f7ff ff5c 	bl	800234c <_Z15readByteFromIMUh>
 8002494:	4603      	mov	r3, r0
 8002496:	73bb      	strb	r3, [r7, #14]
			imu.acc_y = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21a      	sxth	r2, r3
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002558 <_Z8IMU_Taskv+0x1cc>
 80024b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 80024b8:	edc3 7a01 	vstr	s15, [r3, #4]

			tmp_low = readByteFromIMU(OUTZ_L_XL);
 80024bc:	202c      	movs	r0, #44	; 0x2c
 80024be:	f7ff ff45 	bl	800234c <_Z15readByteFromIMUh>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
			tmp_high = readByteFromIMU(OUTZ_L_XL);
 80024c6:	202c      	movs	r0, #44	; 0x2c
 80024c8:	f7ff ff40 	bl	800234c <_Z15readByteFromIMUh>
 80024cc:	4603      	mov	r3, r0
 80024ce:	73bb      	strb	r3, [r7, #14]
			imu.acc_z = ((int16_t)((tmp_high << 8u)| tmp_low)) * AXL_SENSITIVITY;
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	b21a      	sxth	r2, r3
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	b21b      	sxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b21b      	sxth	r3, r3
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002558 <_Z8IMU_Taskv+0x1cc>
 80024ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ee:	4b1b      	ldr	r3, [pc, #108]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 80024f0:	edc3 7a02 	vstr	s15, [r3, #8]

		}
		//Gyroscope new data available
		if((status & 0x02) == 2u)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d025      	beq.n	800254a <_Z8IMU_Taskv+0x1be>
		{
			uint8_t tmp_low, tmp_high;

			tmp_low = readByteFromIMU(OUTZ_L_G);
 80024fe:	2026      	movs	r0, #38	; 0x26
 8002500:	f7ff ff24 	bl	800234c <_Z15readByteFromIMUh>
 8002504:	4603      	mov	r3, r0
 8002506:	737b      	strb	r3, [r7, #13]
			tmp_high = readByteFromIMU(OUTZ_H_G);
 8002508:	2027      	movs	r0, #39	; 0x27
 800250a:	f7ff ff1f 	bl	800234c <_Z15readByteFromIMUh>
 800250e:	4603      	mov	r3, r0
 8002510:	733b      	strb	r3, [r7, #12]
			imu.yaw = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY / 1000.0f * 0.017453f;
 8002512:	7b3b      	ldrb	r3, [r7, #12]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b21a      	sxth	r2, r3
 8002518:	7b7b      	ldrb	r3, [r7, #13]
 800251a:	b21b      	sxth	r3, r3
 800251c:	4313      	orrs	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002528:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002560 <_Z8IMU_Taskv+0x1d4>
 800252c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002530:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002564 <_Z8IMU_Taskv+0x1d8>
 8002534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002538:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002568 <_Z8IMU_Taskv+0x1dc>
 800253c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <_Z8IMU_Taskv+0x1d0>)
 8002542:	edc3 7a03 	vstr	s15, [r3, #12]
 8002546:	e000      	b.n	800254a <_Z8IMU_Taskv+0x1be>
			return;
 8002548:	bf00      	nop
			//tmp_high = readByteFromIMU(OUTY_H_G);
			//imu.pitch = ((int16_t)((tmp_high << 8u)| tmp_low)) * G_SENSITIVITY;

		}
	}
}
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200001a4 	.word	0x200001a4
 8002554:	20000708 	.word	0x20000708
 8002558:	3d79db23 	.word	0x3d79db23
 800255c:	200001a8 	.word	0x200001a8
 8002560:	407423e2 	.word	0x407423e2
 8002564:	447a0000 	.word	0x447a0000
 8002568:	3c8ef998 	.word	0x3c8ef998

0800256c <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
 8002570:	2300      	movs	r3, #0
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fc8b 	bl	8002eb8 <_ZNSaIfED1Ev>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fc6e 	bl	8002e98 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ffeb 	bl	80025ac <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>:
uint16_t infra_adc_values_test[32];
uint8_t infra_adc_data[32*2];

/* Turns on every #num and #num + 4 Infraled on every led driving IC.*/
void TurnOnInfraLEDs(GPIO_TypeDef* LE_port[2], uint16_t LE_pin[2],GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2], uint8_t num)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	uint8_t i;
	uint8_t data = 0x11 << num;
 80025ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025f2:	2211      	movs	r2, #17
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	75bb      	strb	r3, [r7, #22]

	for(i = 0; i < 4; ++i)
 80025fc:	2300      	movs	r3, #0
 80025fe:	75fb      	strb	r3, [r7, #23]
 8002600:	e00a      	b.n	8002618 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x38>
	{
		HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8002602:	f107 0116 	add.w	r1, r7, #22
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	2201      	movs	r2, #1
 800260c:	4821      	ldr	r0, [pc, #132]	; (8002694 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0xb4>)
 800260e:	f016 f874 	bl	80186fa <HAL_SPI_Transmit>
	for(i = 0; i < 4; ++i)
 8002612:	7dfb      	ldrb	r3, [r7, #23]
 8002614:	3301      	adds	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d9f1      	bls.n	8002602 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h+0x22>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	4619      	mov	r1, r3
 800262a:	f013 f9cf 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3304      	adds	r3, #4
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3302      	adds	r3, #2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4619      	mov	r1, r3
 800263e:	f013 f9c5 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	f013 f9bd 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3304      	adds	r3, #4
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3302      	adds	r3, #2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	4619      	mov	r1, r3
 8002662:	f013 f9b3 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	f013 f9ab 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3302      	adds	r3, #2
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	4619      	mov	r1, r3
 8002686:	f013 f9a1 	bl	80159cc <HAL_GPIO_WritePin>

}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200009a4 	.word	0x200009a4

08002698 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>:

void TurnOnLEDs(GPIO_TypeDef *LE_port[2], uint16_t LE_pin[2], GPIO_TypeDef *OE_port[2], uint16_t OE_pin[2], uint32_t front, uint32_t rear)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4619      	mov	r1, r3
 80026b2:	f013 f98b 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	3302      	adds	r3, #2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	4619      	mov	r1, r3
 80026c6:	f013 f981 	bl	80159cc <HAL_GPIO_WritePin>
	uint8_t i;
	for (i = 0; i < 4; ++i)
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
 80026ce:	e011      	b.n	80026f4 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x5c>
	{
		uint8_t data_front = (front >> (8u*i)) & 0xFF;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	75bb      	strb	r3, [r7, #22]
		HAL_SPI_Transmit(&hspi2, &data_front, 1, HAL_MAX_DELAY);
 80026de:	f107 0116 	add.w	r1, r7, #22
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	2201      	movs	r2, #1
 80026e8:	482d      	ldr	r0, [pc, #180]	; (80027a0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 80026ea:	f016 f806 	bl	80186fa <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	3301      	adds	r3, #1
 80026f2:	75fb      	strb	r3, [r7, #23]
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d9ea      	bls.n	80026d0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x38>
	}
	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_SET);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	2201      	movs	r2, #1
 8002704:	4619      	mov	r1, r3
 8002706:	f013 f961 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[0], LE_pin[0], GPIO_PIN_RESET);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	4619      	mov	r1, r3
 8002716:	f013 f959 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_RESET);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	f013 f951 	bl	80159cc <HAL_GPIO_WritePin>
	for (i = 0; i < 4; ++i)
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
 800272e:	e011      	b.n	8002754 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0xbc>
	{
		uint8_t data_rear = (rear >> (8u*i)) & 0xFF;
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	757b      	strb	r3, [r7, #21]
		HAL_SPI_Transmit(&hspi2, &data_rear, 1, HAL_MAX_DELAY);
 800273e:	f107 0115 	add.w	r1, r7, #21
 8002742:	f04f 33ff 	mov.w	r3, #4294967295
 8002746:	2201      	movs	r2, #1
 8002748:	4815      	ldr	r0, [pc, #84]	; (80027a0 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x108>)
 800274a:	f015 ffd6 	bl	80186fa <HAL_SPI_Transmit>
	for (i = 0; i < 4; ++i)
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	3301      	adds	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d9ea      	bls.n	8002730 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm+0x98>
	}

	//TODO: maybe add a delay to let the latch in
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_SET);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3304      	adds	r3, #4
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3302      	adds	r3, #2
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	2201      	movs	r2, #1
 8002768:	4619      	mov	r1, r3
 800276a:	f013 f92f 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LE_port[1], LE_pin[1], GPIO_PIN_RESET);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3302      	adds	r3, #2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	4619      	mov	r1, r3
 800277e:	f013 f925 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_RESET);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3302      	adds	r3, #2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	2200      	movs	r2, #0
 8002790:	4619      	mov	r1, r3
 8002792:	f013 f91b 	bl	80159cc <HAL_GPIO_WritePin>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200009a4 	.word	0x200009a4

080027a4 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>:


void TurnOffInfraLEDs(GPIO_TypeDef* OE_port[2], uint16_t OE_pin[2])
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(OE_port[0], OE_pin[0], GPIO_PIN_SET);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	2201      	movs	r2, #1
 80027b8:	4619      	mov	r1, r3
 80027ba:	f013 f907 	bl	80159cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_port[1], OE_pin[1], GPIO_PIN_SET);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3304      	adds	r3, #4
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3302      	adds	r3, #2
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4619      	mov	r1, r3
 80027ce:	f013 f8fd 	bl	80159cc <HAL_GPIO_WritePin>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>:

/* Reads out from all of the 4 adc ICs on one line sensor card 2 adc values each defined by num and writes it to res */
void ReadADCValues(GPIO_TypeDef* ports[4], uint16_t pins[4], uint8_t adc_ic_index, uint8_t *res)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	uint8_t tmp[2] = {0, 0};
 80027ec:	2300      	movs	r3, #0
 80027ee:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_RESET);
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	4619      	mov	r1, r3
 8002808:	f013 f8e0 	bl	80159cc <HAL_GPIO_WritePin>
	for(i = 0; i < 8; ++i)
 800280c:	2300      	movs	r3, #0
 800280e:	75fb      	strb	r3, [r7, #23]
 8002810:	e019      	b.n	8002846 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x6a>
	{
		tmp[0] = i << 3u;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	753b      	strb	r3, [r7, #20]
		HAL_SPI_Transmit(&hspi1, tmp, 2, HAL_MAX_DELAY);
 800281a:	f107 0114 	add.w	r1, r7, #20
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	2202      	movs	r2, #2
 8002824:	4812      	ldr	r0, [pc, #72]	; (8002870 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 8002826:	f015 ff68 	bl	80186fa <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &res[i*2], 2, HAL_MAX_DELAY);
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	461a      	mov	r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	1899      	adds	r1, r3, r2
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
 8002838:	2202      	movs	r2, #2
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x94>)
 800283c:	f016 f8cb 	bl	80189d6 <HAL_SPI_Receive>
	for(i = 0; i < 8; ++i)
 8002840:	7dfb      	ldrb	r3, [r7, #23]
 8002842:	3301      	adds	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	2b07      	cmp	r3, #7
 800284a:	d9e2      	bls.n	8002812 <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh+0x36>
	}
	HAL_GPIO_WritePin(ports[adc_ic_index], pins[adc_ic_index], GPIO_PIN_SET);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4413      	add	r3, r2
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	4619      	mov	r1, r3
 8002864:	f013 f8b2 	bl	80159cc <HAL_GPIO_WritePin>

}
 8002868:	bf00      	nop
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000940 	.word	0x20000940

08002874 <_Z14LineSensorTaskv>:
void LineSensorTask(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b096      	sub	sp, #88	; 0x58
 8002878:	af02      	add	r7, sp, #8


#else
	uint8_t j;
	int8_t i;
	for(i = 0; i < 4; ++i)
 800287a:	2300      	movs	r3, #0
 800287c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002880:	e0c1      	b.n	8002a06 <_Z14LineSensorTaskv+0x192>
	{
		TurnOnInfraLEDs(infra_le_ports, infra_le_pins, infra_oe_ports, infra_le_pins, i);
 8002882:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4b92      	ldr	r3, [pc, #584]	; (8002ad4 <_Z14LineSensorTaskv+0x260>)
 800288a:	4a93      	ldr	r2, [pc, #588]	; (8002ad8 <_Z14LineSensorTaskv+0x264>)
 800288c:	4991      	ldr	r1, [pc, #580]	; (8002ad4 <_Z14LineSensorTaskv+0x260>)
 800288e:	4893      	ldr	r0, [pc, #588]	; (8002adc <_Z14LineSensorTaskv+0x268>)
 8002890:	f7ff fea6 	bl	80025e0 <_Z15TurnOnInfraLEDsPP12GPIO_TypeDefPtS1_S2_h>

		uint32_t delay_start = __HAL_TIM_GetCounter(&htim6);
 8002894:	4b92      	ldr	r3, [pc, #584]	; (8002ae0 <_Z14LineSensorTaskv+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
		while((__HAL_TIM_GetCounter(&htim6) - delay_start) < INFRA_WAIT_TIME);
 800289c:	bf00      	nop
 800289e:	4b90      	ldr	r3, [pc, #576]	; (8002ae0 <_Z14LineSensorTaskv+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b95      	cmp	r3, #149	; 0x95
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f3      	bne.n	800289e <_Z14LineSensorTaskv+0x2a>

		for(j = 0; j < 4; ++j)
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80028bc:	e094      	b.n	80029e8 <_Z14LineSensorTaskv+0x174>
		{
			uint8_t adc_front_values[16];
			uint8_t adc_rear_values[16];
			ReadADCValues(front_adc_cs_ports, front_adc_cs_pins, j, adc_front_values);
 80028be:	f107 0318 	add.w	r3, r7, #24
 80028c2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80028c6:	4987      	ldr	r1, [pc, #540]	; (8002ae4 <_Z14LineSensorTaskv+0x270>)
 80028c8:	4887      	ldr	r0, [pc, #540]	; (8002ae8 <_Z14LineSensorTaskv+0x274>)
 80028ca:	f7ff ff87 	bl	80027dc <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>
			ReadADCValues(rear_adc_cs_ports, rear_adc_cs_pins, j, adc_rear_values);
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80028d6:	4985      	ldr	r1, [pc, #532]	; (8002aec <_Z14LineSensorTaskv+0x278>)
 80028d8:	4885      	ldr	r0, [pc, #532]	; (8002af0 <_Z14LineSensorTaskv+0x27c>)
 80028da:	f7ff ff7f 	bl	80027dc <_Z13ReadADCValuesPP12GPIO_TypeDefPthPh>

			// i = id of LED, j = id of ic, adc_ic_values contains the 8 adc values from one ic
			ls_data.adc_values_f[j*8 + i] = (uint16_t)(adc_front_values[i*2] << 8u) | (adc_front_values[i*2+1]);
 80028de:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	3350      	adds	r3, #80	; 0x50
 80028e6:	443b      	add	r3, r7
 80028e8:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	021b      	lsls	r3, r3, #8
 80028f0:	b299      	uxth	r1, r3
 80028f2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	3301      	adds	r3, #1
 80028fa:	3350      	adds	r3, #80	; 0x50
 80028fc:	443b      	add	r3, r7
 80028fe:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002902:	b29a      	uxth	r2, r3
 8002904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002908:	00d8      	lsls	r0, r3, #3
 800290a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800290e:	4403      	add	r3, r0
 8002910:	430a      	orrs	r2, r1
 8002912:	b291      	uxth	r1, r2
 8002914:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002916:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_f[j*8 + i + 4] = (uint16_t)(adc_front_values[(i*2) + 8] << 8u) | (adc_front_values[(i*2) + 8 + 1]);
 800291a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800291e:	3304      	adds	r3, #4
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	3350      	adds	r3, #80	; 0x50
 8002924:	443b      	add	r3, r7
 8002926:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800292a:	b29b      	uxth	r3, r3
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	b299      	uxth	r1, r3
 8002930:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002934:	3304      	adds	r3, #4
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	3301      	adds	r3, #1
 800293a:	3350      	adds	r3, #80	; 0x50
 800293c:	443b      	add	r3, r7
 800293e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8002942:	b29a      	uxth	r2, r3
 8002944:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002948:	00d8      	lsls	r0, r3, #3
 800294a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800294e:	4403      	add	r3, r0
 8002950:	3304      	adds	r3, #4
 8002952:	430a      	orrs	r2, r1
 8002954:	b291      	uxth	r1, r2
 8002956:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002958:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			ls_data.adc_values_r[j*8 + i] = (uint16_t)(adc_rear_values[i*2] << 8u) | (adc_rear_values[i*2+1]);
 800295c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	3350      	adds	r3, #80	; 0x50
 8002964:	443b      	add	r3, r7
 8002966:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800296a:	b29b      	uxth	r3, r3
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	b299      	uxth	r1, r3
 8002970:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	3301      	adds	r3, #1
 8002978:	3350      	adds	r3, #80	; 0x50
 800297a:	443b      	add	r3, r7
 800297c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002980:	b29a      	uxth	r2, r3
 8002982:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002986:	00d8      	lsls	r0, r3, #3
 8002988:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800298c:	4403      	add	r3, r0
 800298e:	430a      	orrs	r2, r1
 8002990:	b291      	uxth	r1, r2
 8002992:	4a58      	ldr	r2, [pc, #352]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002994:	3320      	adds	r3, #32
 8002996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			ls_data.adc_values_r[j*8 + i + 4] = (uint16_t)(adc_rear_values[(i*2) + 8] << 8u) | (adc_rear_values[(i*2) + 8 + 1]);
 800299a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 800299e:	3304      	adds	r3, #4
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	3350      	adds	r3, #80	; 0x50
 80029a4:	443b      	add	r3, r7
 80029a6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	b299      	uxth	r1, r3
 80029b0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80029b4:	3304      	adds	r3, #4
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	3301      	adds	r3, #1
 80029ba:	3350      	adds	r3, #80	; 0x50
 80029bc:	443b      	add	r3, r7
 80029be:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029c8:	00d8      	lsls	r0, r3, #3
 80029ca:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 80029ce:	4403      	add	r3, r0
 80029d0:	3304      	adds	r3, #4
 80029d2:	430a      	orrs	r2, r1
 80029d4:	b291      	uxth	r1, r2
 80029d6:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 80029d8:	3320      	adds	r3, #32
 80029da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(j = 0; j < 4; ++j)
 80029de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029e2:	3301      	adds	r3, #1
 80029e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80029e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f67f af66 	bls.w	80028be <_Z14LineSensorTaskv+0x4a>
		}

		TurnOffInfraLEDs(infra_oe_ports, infra_le_pins);
 80029f2:	4938      	ldr	r1, [pc, #224]	; (8002ad4 <_Z14LineSensorTaskv+0x260>)
 80029f4:	4838      	ldr	r0, [pc, #224]	; (8002ad8 <_Z14LineSensorTaskv+0x264>)
 80029f6:	f7ff fed5 	bl	80027a4 <_Z16TurnOffInfraLEDsPP12GPIO_TypeDefPt>
	for(i = 0; i < 4; ++i)
 80029fa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029fe:	3301      	adds	r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002a06:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	f77f af39 	ble.w	8002882 <_Z14LineSensorTaskv+0xe>
	}

	float denominator_f = 0.0f;
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
	float denominator_r = 0.0f;
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t led_front = 0u;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t led_rear = 0u;
 8002a20:	2300      	movs	r3, #0
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t front_max_index = 0u;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t rear_max_index = 0u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	for(i = 1; i < 31; ++i)
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002a36:	e035      	b.n	8002aa4 <_Z14LineSensorTaskv+0x230>
	{
		if(ls_data.adc_values_f[i] > ls_data.adc_values_f[front_max_index])
 8002a38:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002a3c:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002a3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002a46:	492b      	ldr	r1, [pc, #172]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002a48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d903      	bls.n	8002a58 <_Z14LineSensorTaskv+0x1e4>
		{
			front_max_index = i;
 8002a50:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
		if(ls_data.adc_values_r[i] > ls_data.adc_values_r[rear_max_index])
 8002a58:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002a5c:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002a5e:	3320      	adds	r3, #32
 8002a60:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a64:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002a68:	4922      	ldr	r1, [pc, #136]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002a6a:	3320      	adds	r3, #32
 8002a6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d903      	bls.n	8002a7c <_Z14LineSensorTaskv+0x208>
		{
			rear_max_index = i;
 8002a74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		}
		ls_data.front_detection[i] = true;
 8002a7c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002a80:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002a82:	4413      	add	r3, r2
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		ls_data.rear_detection[i] = true;
 8002a8a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002a8e:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002a90:	4413      	add	r3, r2
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8002a98:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002aa4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002aa8:	2b1e      	cmp	r3, #30
 8002aaa:	ddc5      	ble.n	8002a38 <_Z14LineSensorTaskv+0x1c4>
	}

	ls_data.front_detection[0] = true;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	ls_data.front_detection[31] = true;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	ls_data.rear_detection[0] = true;
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ls_data.rear_detection[31] = true;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <_Z14LineSensorTaskv+0x280>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
	for(i = 1; i < 31; ++i)
 8002acc:	2301      	movs	r3, #1
 8002ace:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002ad2:	e090      	b.n	8002bf6 <_Z14LineSensorTaskv+0x382>
 8002ad4:	20000068 	.word	0x20000068
 8002ad8:	2000006c 	.word	0x2000006c
 8002adc:	20000060 	.word	0x20000060
 8002ae0:	20000b50 	.word	0x20000b50
 8002ae4:	20000040 	.word	0x20000040
 8002ae8:	20000030 	.word	0x20000030
 8002aec:	20000058 	.word	0x20000058
 8002af0:	20000048 	.word	0x20000048
 8002af4:	200001c0 	.word	0x200001c0
	{
		ls_data.position_front += (float)((i - 16.0f/* - front_max_index*/) * ls_data.adc_values_f[i]);
 8002af8:	4bb7      	ldr	r3, [pc, #732]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002afa:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8002afe:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002b0e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b12:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b16:	4ab0      	ldr	r2, [pc, #704]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	4baa      	ldr	r3, [pc, #680]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b2e:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		ls_data.position_rear += (float)((i - 16.0f/* - rear_max_index*/) * ls_data.adc_values_r[i]);
 8002b32:	4ba9      	ldr	r3, [pc, #676]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b34:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8002b38:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b44:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002b48:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b4c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b50:	4aa1      	ldr	r2, [pc, #644]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b52:	3320      	adds	r3, #32
 8002b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	4b9b      	ldr	r3, [pc, #620]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b6a:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		denominator_f += (float)(ls_data.adc_values_f[i]);
 8002b6e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b72:	4a99      	ldr	r2, [pc, #612]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		denominator_r += (float)(ls_data.adc_values_r[i]);
 8002b8c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002b90:	4a91      	ldr	r2, [pc, #580]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002b92:	3320      	adds	r3, #32
 8002b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if(ls_data.adc_values_f[i] > 2000)
 8002bac:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bb0:	4a89      	ldr	r2, [pc, #548]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bba:	d906      	bls.n	8002bca <_Z14LineSensorTaskv+0x356>
		{
			ls_data.front_detection[i] = false;
 8002bbc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bc0:	4a85      	ldr	r2, [pc, #532]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002bc2:	4413      	add	r3, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

		}

		if(ls_data.adc_values_r[i] > 2000)
 8002bca:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bce:	4a82      	ldr	r2, [pc, #520]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002bd0:	3320      	adds	r3, #32
 8002bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bd6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002bda:	d906      	bls.n	8002bea <_Z14LineSensorTaskv+0x376>
		{
			ls_data.rear_detection[i] = false;
 8002bdc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002be0:	4a7d      	ldr	r2, [pc, #500]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002be2:	4413      	add	r3, r2
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 1; i < 31; ++i)
 8002bea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002bf6:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002bfa:	2b1e      	cmp	r3, #30
 8002bfc:	f77f af7c 	ble.w	8002af8 <_Z14LineSensorTaskv+0x284>
		}
	}

	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 8002c00:	2302      	movs	r3, #2
 8002c02:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002c06:	e037      	b.n	8002c78 <_Z14LineSensorTaskv+0x404>
	{
		if((ls_data.front_detection[i - 1] == true) && (ls_data.front_detection[i + 1] == true))
 8002c08:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	4a72      	ldr	r2, [pc, #456]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c10:	4413      	add	r3, r2
 8002c12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10f      	bne.n	8002c3a <_Z14LineSensorTaskv+0x3c6>
 8002c1a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c1e:	3301      	adds	r3, #1
 8002c20:	4a6d      	ldr	r2, [pc, #436]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c22:	4413      	add	r3, r2
 8002c24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <_Z14LineSensorTaskv+0x3c6>
		{
			ls_data.front_detection[i] = true;
 8002c2c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c30:	4a69      	ldr	r2, [pc, #420]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c32:	4413      	add	r3, r2
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		}

		if((ls_data.rear_detection[i - 1] == true) && (ls_data.rear_detection[i + 1] == true))
 8002c3a:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	4a65      	ldr	r2, [pc, #404]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c42:	4413      	add	r3, r2
 8002c44:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10f      	bne.n	8002c6c <_Z14LineSensorTaskv+0x3f8>
 8002c4c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c50:	3301      	adds	r3, #1
 8002c52:	4a61      	ldr	r2, [pc, #388]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c54:	4413      	add	r3, r2
 8002c56:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d106      	bne.n	8002c6c <_Z14LineSensorTaskv+0x3f8>
		{
			ls_data.rear_detection[i] = true;
 8002c5e:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c62:	4a5d      	ldr	r2, [pc, #372]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c64:	4413      	add	r3, r2
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	for(i = 2; i < SENSOR_COUNT - 2; ++i)
 8002c6c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002c78:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c7c:	2b1d      	cmp	r3, #29
 8002c7e:	ddc3      	ble.n	8002c08 <_Z14LineSensorTaskv+0x394>
		}
	}

	for(i = 1; i < 31; ++i)
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002c86:	e027      	b.n	8002cd8 <_Z14LineSensorTaskv+0x464>
	{
		if(ls_data.front_detection[i] == false)
 8002c88:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c8c:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <_Z14LineSensorTaskv+0x436>
		{
			led_front |= 0x80000000 >> (i);
 8002c98:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002c9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	643b      	str	r3, [r7, #64]	; 0x40
		}
		if(ls_data.rear_detection[i] == false)
 8002caa:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002cae:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <_Z14LineSensorTaskv+0x458>
		{
			led_rear |= 0x80000000 >> (i);
 8002cba:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(i = 1; i < 31; ++i)
 8002ccc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002cd8:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8002cdc:	2b1e      	cmp	r3, #30
 8002cde:	ddd3      	ble.n	8002c88 <_Z14LineSensorTaskv+0x414>
		}
	}
	uint8_t cluster_start_front = SENSOR_COUNT + 1;
 8002ce0:	2321      	movs	r3, #33	; 0x21
 8002ce2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t cluster_end_front = SENSOR_COUNT + 1;
 8002ce6:	2321      	movs	r3, #33	; 0x21
 8002ce8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t cluster_start_rear = SENSOR_COUNT + 1;
 8002cec:	2321      	movs	r3, #33	; 0x21
 8002cee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t cluster_end_rear = SENSOR_COUNT + 1;
 8002cf2:	2321      	movs	r3, #33	; 0x21
 8002cf4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t current_idx;
	ls_data.front.clear();
 8002cf8:	4838      	ldr	r0, [pc, #224]	; (8002ddc <_Z14LineSensorTaskv+0x568>)
 8002cfa:	f000 f91c 	bl	8002f36 <_ZNSt6vectorIfSaIfEE5clearEv>
	ls_data.rear.clear();
 8002cfe:	4838      	ldr	r0, [pc, #224]	; (8002de0 <_Z14LineSensorTaskv+0x56c>)
 8002d00:	f000 f919 	bl	8002f36 <_ZNSt6vectorIfSaIfEE5clearEv>
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002d0a:	e0a8      	b.n	8002e5e <_Z14LineSensorTaskv+0x5ea>
	{
		if (!ls_data.front_detection[current_idx])
 8002d0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d10:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002d12:	4413      	add	r3, r2
 8002d14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d18:	f083 0301 	eor.w	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <_Z14LineSensorTaskv+0x4c8>
		{
			if (cluster_start_front == SENSOR_COUNT + 1)
 8002d22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002d26:	2b21      	cmp	r3, #33	; 0x21
 8002d28:	d103      	bne.n	8002d32 <_Z14LineSensorTaskv+0x4be>
			{
				cluster_start_front = current_idx;
 8002d2a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d2e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			}
			cluster_end_front = current_idx;
 8002d32:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002d36:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8002d3a:	e035      	b.n	8002da8 <_Z14LineSensorTaskv+0x534>
		}
		else
		{
			if (cluster_start_front != SENSOR_COUNT + 1)
 8002d3c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002d40:	2b21      	cmp	r3, #33	; 0x21
 8002d42:	d031      	beq.n	8002da8 <_Z14LineSensorTaskv+0x534>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_front + 1 + cluster_end_front + 1) / 2.0f;
 8002d44:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002d4e:	4413      	add	r3, r2
 8002d50:	3301      	adds	r3, #1
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 8002d66:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d6a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002de4 <_Z14LineSensorTaskv+0x570>
 8002d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d72:	edc7 7a01 	vstr	s15, [r7, #4]
				line_position = -1.0f * line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 8002d76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d7a:	eef1 7a67 	vneg.f32	s15, s15
 8002d7e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002de8 <_Z14LineSensorTaskv+0x574>
 8002d82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d86:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 8002d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d8e:	edc7 7a01 	vstr	s15, [r7, #4]
				// add the line position to the vector
				ls_data.front.push_back(line_position);
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4811      	ldr	r0, [pc, #68]	; (8002ddc <_Z14LineSensorTaskv+0x568>)
 8002d98:	f000 f8db 	bl	8002f52 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_front = SENSOR_COUNT + 1;
 8002d9c:	2321      	movs	r3, #33	; 0x21
 8002d9e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				cluster_end_front = SENSOR_COUNT + 1;
 8002da2:	2321      	movs	r3, #33	; 0x21
 8002da4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			}
		}

		if (!ls_data.rear_detection[current_idx])
 8002da8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <_Z14LineSensorTaskv+0x564>)
 8002dae:	4413      	add	r3, r2
 8002db0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d016      	beq.n	8002dec <_Z14LineSensorTaskv+0x578>
		{
			if (cluster_start_rear == SENSOR_COUNT + 1)
 8002dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dc2:	2b21      	cmp	r3, #33	; 0x21
 8002dc4:	d103      	bne.n	8002dce <_Z14LineSensorTaskv+0x55a>
			{
				cluster_start_rear = current_idx;
 8002dc6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
			cluster_end_rear = current_idx;
 8002dce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002dd6:	e03d      	b.n	8002e54 <_Z14LineSensorTaskv+0x5e0>
 8002dd8:	200001c0 	.word	0x200001c0
 8002ddc:	20000288 	.word	0x20000288
 8002de0:	20000294 	.word	0x20000294
 8002de4:	41840000 	.word	0x41840000
 8002de8:	3e4ccccd 	.word	0x3e4ccccd
		}
		else
		{
			if (cluster_start_rear != SENSOR_COUNT + 1)
 8002dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002df0:	2b21      	cmp	r3, #33	; 0x21
 8002df2:	d02f      	beq.n	8002e54 <_Z14LineSensorTaskv+0x5e0>
			{
				// calculate the center of mass of the cluster
				float cluster_center = (cluster_start_rear + 1 + cluster_end_rear + 1) / 2.0f;
 8002df4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002dfe:	4413      	add	r3, r2
 8002e00:	3301      	adds	r3, #1
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e12:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				// calculate the position of the line relative to the center of the sensor
				float line_position = cluster_center - 16.5f;
 8002e16:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e1a:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8002de4 <_Z14LineSensorTaskv+0x570>
 8002e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e22:	edc7 7a00 	vstr	s15, [r7]
				line_position = line_position * SENSOR_WIDTH / (SENSOR_COUNT - 1);
 8002e26:	edd7 7a00 	vldr	s15, [r7]
 8002e2a:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8002de8 <_Z14LineSensorTaskv+0x574>
 8002e2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e32:	eef3 6a0f 	vmov.f32	s13, #63	; 0x41f80000  31.0
 8002e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e3a:	edc7 7a00 	vstr	s15, [r7]
				// add the line position to the vector
				ls_data.rear.push_back(line_position);
 8002e3e:	463b      	mov	r3, r7
 8002e40:	4619      	mov	r1, r3
 8002e42:	4810      	ldr	r0, [pc, #64]	; (8002e84 <_Z14LineSensorTaskv+0x610>)
 8002e44:	f000 f885 	bl	8002f52 <_ZNSt6vectorIfSaIfEE9push_backERKf>
				// reset the cluster start and end
				cluster_start_rear = SENSOR_COUNT + 1;
 8002e48:	2321      	movs	r3, #33	; 0x21
 8002e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cluster_end_rear = SENSOR_COUNT + 1;
 8002e4e:	2321      	movs	r3, #33	; 0x21
 8002e50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (current_idx = 0; current_idx < SENSOR_COUNT; current_idx++)
 8002e54:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002e5e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e62:	2b1f      	cmp	r3, #31
 8002e64:	f67f af52 	bls.w	8002d0c <_Z14LineSensorTaskv+0x498>
			}
		}
	}


	TurnOnLEDs(led_le_ports, led_le_pins, led_oe_ports, led_oe_pins, led_front, led_rear);
 8002e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <_Z14LineSensorTaskv+0x614>)
 8002e72:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <_Z14LineSensorTaskv+0x618>)
 8002e74:	4906      	ldr	r1, [pc, #24]	; (8002e90 <_Z14LineSensorTaskv+0x61c>)
 8002e76:	4807      	ldr	r0, [pc, #28]	; (8002e94 <_Z14LineSensorTaskv+0x620>)
 8002e78:	f7ff fc0e 	bl	8002698 <_Z10TurnOnLEDsPP12GPIO_TypeDefPtS1_S2_mm>
	//ls_data.position_front = -1.0f * ls_data.position_front * 2.5f / 100.0f / denominator_f;
	//ls_data.position_rear = ls_data.position_rear * 2.5f / 100.0f / denominator_r;


#endif
}
 8002e7c:	bf00      	nop
 8002e7e:	3750      	adds	r7, #80	; 0x50
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000294 	.word	0x20000294
 8002e88:	20000088 	.word	0x20000088
 8002e8c:	20000080 	.word	0x20000080
 8002e90:	2000007c 	.word	0x2000007c
 8002e94:	20000074 	.word	0x20000074

08002e98 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f87b 	bl	8002f9c <_ZNSaIfEC1Ev>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 f883 	bl	8002fb4 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f877 	bl	8002fdc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fb4f 	bl	8002594 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681c      	ldr	r4, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f875 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002f18:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f000 f87a 	bl	8003018 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ffd1 	bl	8002ece <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}

08002f36 <_ZNSt6vectorIfSaIfEE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4619      	mov	r1, r3
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f875 	bl	8003034 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d00c      	beq.n	8002f82 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	f000 f895 	bl	80030a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	1d1a      	adds	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	605a      	str	r2, [r3, #4]
      }
 8002f80:	e008      	b.n	8002f94 <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f89e 	bl	80030c4 <_ZNSt6vectorIfSaIfEE3endEv>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8aa 	bl	80030e8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f91b 	bl	80031e0 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
	{ }
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	if (__p)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f8fe 	bl	80031f6 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f904 	bl	8003234 <_ZSt8_DestroyIPfEvT_S1_>
    }
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	109b      	asrs	r3, r3, #2
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00e      	beq.n	800306e <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff ffd3 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800305c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800305e:	461a      	mov	r2, r3
 8003060:	4621      	mov	r1, r4
 8003062:	6838      	ldr	r0, [r7, #0]
 8003064:	f7ff ffd8 	bl	8003018 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}

08003076 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8003076:	b590      	push	{r4, r7, lr}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003080:	6838      	ldr	r0, [r7, #0]
 8003082:	f000 f8ed 	bl	8003260 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8003086:	4603      	mov	r3, r0
 8003088:	681c      	ldr	r4, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4619      	mov	r1, r3
 800308e:	2004      	movs	r0, #4
 8003090:	f7ff fa74 	bl	800257c <_ZnwjPv>
 8003094:	4603      	mov	r3, r0
 8003096:	601c      	str	r4, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bd90      	pop	{r4, r7, pc}

080030a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8d7 	bl	8003260 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4619      	mov	r1, r3
 80030b6:	68b8      	ldr	r0, [r7, #8]
 80030b8:	f7ff ffdd 	bl	8003076 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f8cd 	bl	8003276 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80030f4:	4a39      	ldr	r2, [pc, #228]	; (80031dc <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f8cc 	bl	8003296 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 80030fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f909 	bl	8003324 <_ZNSt6vectorIfSaIfEE5beginEv>
 8003112:	4603      	mov	r3, r0
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	f107 0214 	add.w	r2, r7, #20
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f90f 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8003126:	4603      	mov	r3, r0
 8003128:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800312e:	4618      	mov	r0, r3
 8003130:	f000 f91d 	bl	800336e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003134:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800313a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	18d5      	adds	r5, r2, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f88b 	bl	8003260 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	4629      	mov	r1, r5
 8003150:	4620      	mov	r0, r4
 8003152:	f7ff ffa5 	bl	80030a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800315a:	f107 0308 	add.w	r3, r7, #8
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f92d 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003164:	4603      	mov	r3, r0
 8003166:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff49 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003170:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	4621      	mov	r1, r4
 8003176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003178:	f000 f90d 	bl	8003396 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 800317c:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	3304      	adds	r3, #4
 8003182:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f918 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800318e:	4603      	mov	r3, r0
 8003190:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff34 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800319a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a0:	4620      	mov	r0, r4
 80031a2:	f000 f8f8 	bl	8003396 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 80031a6:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80031a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80031b4:	461a      	mov	r2, r3
 80031b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b8:	f7ff ff10 	bl	8002fdc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	441a      	add	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	609a      	str	r2, [r3, #8]
    }
 80031d4:	bf00      	nop
 80031d6:	3730      	adds	r7, #48	; 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdb0      	pop	{r4, r5, r7, pc}
 80031dc:	08023c48 	.word	0x08023c48

080031e0 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800320e:	f7ff f9ad 	bl	800256c <_ZSt21is_constant_evaluatedv>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	  {
	    ::operator delete(__p);
 8003218:	69b8      	ldr	r0, [r7, #24]
 800321a:	f01d f86f 	bl	80202fc <_ZdlPv>
	    return;
 800321e:	e005      	b.n	800322c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	69f8      	ldr	r0, [r7, #28]
 8003226:	f000 f96a 	bl	80034fe <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800323e:	f7ff f995 	bl	800256c <_ZSt21is_constant_evaluatedv>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d004      	beq.n	8003252 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8003248:	6839      	ldr	r1, [r7, #0]
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8c2 	bl	80033d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 8003250:	e003      	b.n	800325a <_ZSt8_DestroyIPfEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003252:	6839      	ldr	r1, [r7, #0]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8d6 	bl	8003406 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003296:	b590      	push	{r4, r7, lr}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8ba 	bl	800341c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80032a8:	4604      	mov	r4, r0
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8c7 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80032b0:	4603      	mov	r3, r0
 80032b2:	1ae2      	subs	r2, r4, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	bf34      	ite	cc
 80032ba:	2301      	movcc	r3, #1
 80032bc:	2300      	movcs	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f01d f837 	bl	8020338 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f8b7 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80032d0:	4604      	mov	r4, r0
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f8b3 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80032d8:	4603      	mov	r3, r0
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	f107 0208 	add.w	r2, r7, #8
 80032e0:	f107 0310 	add.w	r3, r7, #16
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f8b9 	bl	800345e <_ZSt3maxIjERKT_S2_S2_>
 80032ec:	4603      	mov	r3, r0
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4423      	add	r3, r4
 80032f2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f8a2 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d306      	bcc.n	8003310 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f88a 	bl	800341c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4293      	cmp	r3, r2
 800330e:	d904      	bls.n	800331a <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f883 	bl	800341c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8003316:	4603      	mov	r3, r0
 8003318:	e000      	b.n	800331c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 800331a:	697b      	ldr	r3, [r7, #20]
      }
 800331c:	4618      	mov	r0, r3
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}

08003324 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	f107 030c 	add.w	r3, r7, #12
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff9e 	bl	8003276 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f835 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8003354:	4603      	mov	r3, r0
 8003356:	681c      	ldr	r4, [r3, #0]
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	f000 f830 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800335e:	4603      	mov	r3, r0
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1ae3      	subs	r3, r4, r3
 8003364:	109b      	asrs	r3, r3, #2
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}

0800336e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6839      	ldr	r1, [r7, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f87f 	bl	8003486 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003388:	4603      	mov	r3, r0
 800338a:	e000      	b.n	800338e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800338c:	2300      	movs	r3, #0
      }
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003396:	b590      	push	{r4, r7, lr}
 8003398:	b087      	sub	sp, #28
 800339a:	af02      	add	r7, sp, #8
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80033a4:	f88d 4000 	strb.w	r4, [sp]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f889 	bl	80034c6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 80033b4:	4603      	mov	r3, r0
      }
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}

080033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80033de:	e009      	b.n	80033f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f89b 	bl	800351c <_ZSt11__addressofIfEPT_RS0_>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f8a2 	bl	8003532 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3304      	adds	r3, #4
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1f1      	bne.n	80033e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8b4 	bl	8003594 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800342c:	4603      	mov	r3, r0
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f896 	bl	8003560 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8003434:	4603      	mov	r3, r0
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	109b      	asrs	r3, r3, #2
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d201      	bcs.n	8003478 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	e000      	b.n	800347a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003478:	687b      	ldr	r3, [r7, #4]
    }
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8003498:	f7ff f868 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f01c ff2c 	bl	8020304 <_Znwj>
 80034ac:	4603      	mov	r3, r0
 80034ae:	e006      	b.n	80034be <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8b5 	bl	8003624 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 80034ba:	4603      	mov	r3, r0
 80034bc:	bf00      	nop
      { return __a.allocate(__n); }
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f865 	bl	80035aa <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 80034e0:	4603      	mov	r3, r0
      }
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
    }
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4619      	mov	r1, r3
 8003510:	68b8      	ldr	r0, [r7, #8]
 8003512:	f01c fef5 	bl	8020300 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffd5 	bl	80034ea <_ZSt10destroy_atIfEvPT_>
    }
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8003550:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003568:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800356c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ffea 	bl	8003548 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003574:	4603      	mov	r3, r0
 8003576:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003578:	f107 0208 	add.w	r2, r7, #8
 800357c:	f107 030c 	add.w	r3, r7, #12
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f82e 	bl	80035e4 <_ZSt3minIjERKT_S2_S2_>
 8003588:	4603      	mov	r3, r0
 800358a:	681b      	ldr	r3, [r3, #0]
      }
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80035aa:	b5b0      	push	{r4, r5, r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f85d 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 80035be:	4604      	mov	r4, r0
 80035c0:	68b8      	ldr	r0, [r7, #8]
 80035c2:	f000 f859 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 80035c6:	4605      	mov	r5, r0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f855 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4629      	mov	r1, r5
 80035d4:	4620      	mov	r0, r4
 80035d6:	f000 f85a 	bl	800368e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80035da:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bdb0      	pop	{r4, r5, r7, pc}

080035e4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d201      	bcs.n	80035fe <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	e000      	b.n	8003600 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80035fe:	687b      	ldr	r3, [r7, #4]
    }
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003614:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff ffeb 	bl	800360c <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003636:	4602      	mov	r2, r0
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4293      	cmp	r3, r2
 800363c:	bf8c      	ite	hi
 800363e:	2301      	movhi	r3, #1
 8003640:	2300      	movls	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d301      	bcc.n	800365e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800365a:	f01c fe6a 	bl	8020332 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800365e:	f01c fe65 	bl	802032c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f01c fe4c 	bl	8020304 <_Znwj>
 800366c:	4603      	mov	r3, r0
 800366e:	bf00      	nop
      }
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <_ZSt12__niter_baseIPfET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	109b      	asrs	r3, r3, #2
 80036a4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dd06      	ble.n	80036ba <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	461a      	mov	r2, r3
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f01e ffdc 	bl	8022672 <memmove>
      return __result + __count;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
    }
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_ZN16LineSensorData_sD1Ev>:
	float position_front;
	float position_rear;

	std::vector<float> front;
	std::vector<float> rear;
}LineSensorData_s;
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	33d4      	adds	r3, #212	; 0xd4
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fc12 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	33c8      	adds	r3, #200	; 0xc8
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fc0d 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_Z41__static_initialization_and_destruction_0ii>:
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d116      	bne.n	800372e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003706:	4293      	cmp	r3, r2
 8003708:	d111      	bne.n	800372e <_Z41__static_initialization_and_destruction_0ii+0x3e>
LineSensorData_s ls_data = {0u};
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800370c:	33c8      	adds	r3, #200	; 0xc8
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	480e      	ldr	r0, [pc, #56]	; (8003750 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003718:	f7fe ff55 	bl	80025c6 <_ZNSt6vectorIfSaIfEEC1Ev>
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800371e:	33d4      	adds	r3, #212	; 0xd4
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	480a      	ldr	r0, [pc, #40]	; (8003754 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800372a:	f7fe ff4c 	bl	80025c6 <_ZNSt6vectorIfSaIfEEC1Ev>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373a:	4293      	cmp	r3, r2
 800373c:	d102      	bne.n	8003744 <_Z41__static_initialization_and_destruction_0ii+0x54>
 800373e:	4803      	ldr	r0, [pc, #12]	; (800374c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003740:	f7ff ffc3 	bl	80036ca <_ZN16LineSensorData_sD1Ev>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200001c0 	.word	0x200001c0
 8003750:	20000288 	.word	0x20000288
 8003754:	20000294 	.word	0x20000294

08003758 <_GLOBAL__sub_I_ls_data>:
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
 800375c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003760:	2001      	movs	r0, #1
 8003762:	f7ff ffc5 	bl	80036f0 <_Z41__static_initialization_and_destruction_0ii>
 8003766:	bd80      	pop	{r7, pc}

08003768 <_GLOBAL__sub_D_ls_data>:
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
 800376c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003770:	2000      	movs	r0, #0
 8003772:	f7ff ffbd 	bl	80036f0 <_Z41__static_initialization_and_destruction_0ii>
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003782:	edd7 7a01 	vldr	s15, [r7, #4]
 8003786:	eef0 7ae7 	vabs.f32	s15, s15
 800378a:	eeb0 0a67 	vmov.f32	s0, s15
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	ed87 0a01 	vstr	s0, [r7, #4]
 80037a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80037a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80037ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b2:	bf6c      	ite	vs
 80037b4:	2301      	movvs	r3, #1
 80037b6:	2300      	movvc	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_ZN3PIDC1Ev>:
#include <cmath>

class PID
{
public:
    PID() {}
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <_ZN3PIDD1Ev>:
    ~PID() {}
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_ZN3PID4initEffffffff>:

    void init(float kp, float ki, float kd, float tau, float T, float minOutput, float maxOutput, float deadband)
 80037fc:	b480      	push	{r7}
 80037fe:	b08b      	sub	sp, #44	; 0x2c
 8003800:	af00      	add	r7, sp, #0
 8003802:	6278      	str	r0, [r7, #36]	; 0x24
 8003804:	ed87 0a08 	vstr	s0, [r7, #32]
 8003808:	edc7 0a07 	vstr	s1, [r7, #28]
 800380c:	ed87 1a06 	vstr	s2, [r7, #24]
 8003810:	edc7 1a05 	vstr	s3, [r7, #20]
 8003814:	ed87 2a04 	vstr	s4, [r7, #16]
 8003818:	edc7 2a03 	vstr	s5, [r7, #12]
 800381c:	ed87 3a02 	vstr	s6, [r7, #8]
 8003820:	edc7 3a01 	vstr	s7, [r7, #4]
    {
        kp_ = kp;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	6a3a      	ldr	r2, [r7, #32]
 8003828:	601a      	str	r2, [r3, #0]
        ki_ = ki;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	605a      	str	r2, [r3, #4]
        kd_ = kd;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	609a      	str	r2, [r3, #8]
        tau_ = tau;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	60da      	str	r2, [r3, #12]
        T_ = T;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	611a      	str	r2, [r3, #16]
        minOutput_ = minOutput;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	615a      	str	r2, [r3, #20]
        maxOutput_ = maxOutput;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	619a      	str	r2, [r3, #24]
        deadband_ = deadband;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	61da      	str	r2, [r3, #28]
        prevError_ = 0.0f;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	621a      	str	r2, [r3, #32]
        integral_ = 0.0f;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
    }
 8003864:	bf00      	nop
 8003866:	372c      	adds	r7, #44	; 0x2c
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_ZN3PID6updateEfff>:

    float update(float setpoint, float processVariable, float dt)
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	ed87 0a02 	vstr	s0, [r7, #8]
 800387c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003880:	ed87 1a00 	vstr	s2, [r7]
    {
        if (dt == 0.0f)
 8003884:	edd7 7a00 	vldr	s15, [r7]
 8003888:	eef5 7a40 	vcmp.f32	s15, #0.0
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	d102      	bne.n	8003898 <_ZN3PID6updateEfff+0x28>
            return 0.0f;
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	e0bc      	b.n	8003a12 <_ZN3PID6updateEfff+0x1a2>

        float error = setpoint - processVariable;
 8003898:	ed97 7a02 	vldr	s14, [r7, #8]
 800389c:	edd7 7a01 	vldr	s15, [r7, #4]
 80038a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a4:	edc7 7a06 	vstr	s15, [r7, #24]



        integral_ += (error * dt);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80038ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80038b2:	edd7 7a00 	vldr	s15, [r7]
 80038b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

        if(std::isnan(integral_))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	f7ff ff63 	bl	8003798 <_ZSt5isnanf>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <_ZN3PID6updateEfff+0x70>
        {
        	integral_ = 0.0f;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // Anti-windup: Limit the integral term
        if (integral_ > maxOutput_)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80038ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f4:	dd04      	ble.n	8003900 <_ZN3PID6updateEfff+0x90>
            integral_ = maxOutput_;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
 80038fe:	e00e      	b.n	800391e <_ZN3PID6updateEfff+0xae>
        else if (integral_ < minOutput_)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	edd3 7a05 	vldr	s15, [r3, #20]
 800390c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d503      	bpl.n	800391e <_ZN3PID6updateEfff+0xae>
            integral_ = minOutput_;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

        // Deadband: If the error is within the deadband, set the output to zero
        if(std::abs(error) < deadband_)
 800391e:	ed97 0a06 	vldr	s0, [r7, #24]
 8003922:	f7ff ff29 	bl	8003778 <_ZSt3absf>
 8003926:	eeb0 7a40 	vmov.f32	s14, s0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003938:	bf4c      	ite	mi
 800393a:	2301      	movmi	r3, #1
 800393c:	2300      	movpl	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <_ZN3PID6updateEfff+0xdc>
        {
        	integral_ = 0.0f; // Reset integral term within the deadband
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        float derivative = (error - prevError_) / dt;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003952:	ed97 7a06 	vldr	s14, [r7, #24]
 8003956:	ee77 6a67 	vsub.f32	s13, s14, s15
 800395a:	ed97 7a00 	vldr	s14, [r7]
 800395e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003962:	edc7 7a05 	vstr	s15, [r7, #20]

        float output = kp_ * (1 + dt / (tau_ + T_)) * error + ki_ * (dt / T_) * integral_ - kd_ * derivative;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	ed93 7a00 	vldr	s14, [r3]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	edd3 7a04 	vldr	s15, [r3, #16]
 8003978:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800397c:	ed97 6a00 	vldr	s12, [r7]
 8003980:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003990:	edd7 7a06 	vldr	s15, [r7, #24]
 8003994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	edd3 6a01 	vldr	s13, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	ed93 6a04 	vldr	s12, [r3, #16]
 80039a4:	edd7 5a00 	vldr	s11, [r7]
 80039a8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80039ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80039b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80039c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80039c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d0:	edc7 7a07 	vstr	s15, [r7, #28]

        // Output clamping: Limit the output within the specified range
        if (output > maxOutput_)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80039da:	ed97 7a07 	vldr	s14, [r7, #28]
 80039de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	dd03      	ble.n	80039f0 <_ZN3PID6updateEfff+0x180>
            output = maxOutput_;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e00c      	b.n	8003a0a <_ZN3PID6updateEfff+0x19a>
        else if (output < minOutput_)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80039fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	d502      	bpl.n	8003a0a <_ZN3PID6updateEfff+0x19a>
            output = minOutput_;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	61fb      	str	r3, [r7, #28]

        prevError_ = error;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	621a      	str	r2, [r3, #32]

        return output;
 8003a10:	69fb      	ldr	r3, [r7, #28]
    }
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eeb0 0a67 	vmov.f32	s0, s15
 8003a1a:	3720      	adds	r7, #32
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <_Z16MotorControlTaskv>:
float pi_integral_error = 0.0f;

PID motorcontrol_pid;

void MotorControlTask()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	if(first_run == 1u)
 8003a24:	4b70      	ldr	r3, [pc, #448]	; (8003be8 <_Z16MotorControlTaskv+0x1c8>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <_Z16MotorControlTaskv+0x38>
	{
		motorcontrol_pid.init(SPEED_CONTROLER_KP,SPEED_CONTROLLER_KI, SPEED_CONTROLLER_KD, SPEED_CONTROLLER_TAU, SPEED_CONTROLLER_T, SPEED_CONTROLLER_MIN, SPEED_CONTROLLER_MAX, SPEED_CONTROLLER_DEADBAND);
 8003a2c:	eddf 3a6f 	vldr	s7, [pc, #444]	; 8003bec <_Z16MotorControlTaskv+0x1cc>
 8003a30:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8003a34:	eefe 2a00 	vmov.f32	s5, #224	; 0xbf000000 -0.5
 8003a38:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8003bf0 <_Z16MotorControlTaskv+0x1d0>
 8003a3c:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8003bf4 <_Z16MotorControlTaskv+0x1d4>
 8003a40:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8003bec <_Z16MotorControlTaskv+0x1cc>
 8003a44:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8003bf8 <_Z16MotorControlTaskv+0x1d8>
 8003a48:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8003bfc <_Z16MotorControlTaskv+0x1dc>
 8003a4c:	486c      	ldr	r0, [pc, #432]	; (8003c00 <_Z16MotorControlTaskv+0x1e0>)
 8003a4e:	f7ff fed5 	bl	80037fc <_ZN3PID4initEffffffff>
		first_run = 0u;
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <_Z16MotorControlTaskv+0x1c8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
	}

	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <_Z16MotorControlTaskv+0x1e4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003a60:	d90a      	bls.n	8003a78 <_Z16MotorControlTaskv+0x58>
 8003a62:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <_Z16MotorControlTaskv+0x1e4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8003a6a:	d205      	bcs.n	8003a78 <_Z16MotorControlTaskv+0x58>
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_SET);
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2108      	movs	r1, #8
 8003a70:	4865      	ldr	r0, [pc, #404]	; (8003c08 <_Z16MotorControlTaskv+0x1e8>)
 8003a72:	f011 ffab 	bl	80159cc <HAL_GPIO_WritePin>
 8003a76:	e008      	b.n	8003a8a <_Z16MotorControlTaskv+0x6a>
	}
	else
	{
		HAL_GPIO_WritePin(DRIVE_ENABLE_GPIO_Port, DRIVE_ENABLE_Pin, GPIO_PIN_RESET);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2108      	movs	r1, #8
 8003a7c:	4862      	ldr	r0, [pc, #392]	; (8003c08 <_Z16MotorControlTaskv+0x1e8>)
 8003a7e:	f011 ffa5 	bl	80159cc <HAL_GPIO_WritePin>
		pi_integral_error = 0.0f;
 8003a82:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <_Z16MotorControlTaskv+0x1ec>)
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
	}
	motorcontrol.battery_voltage = ((float)(adc_values.motor_batt_voltage_raw)) / 4096.0f * 3.3f * ANALOG_TO_MOTOR_BATT;
 8003a8a:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <_Z16MotorControlTaskv+0x1f0>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c14 <_Z16MotorControlTaskv+0x1f4>
 8003a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a9e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003c18 <_Z16MotorControlTaskv+0x1f8>
 8003aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aa6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aae:	4b5b      	ldr	r3, [pc, #364]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
	motorcontrol.motor_current = (((float)((adc_values.motor_curr_raw)) / 4096.0f) * 3.3f - MOTOR_CURR_NULL) / MOTOR_CURR_SENSITIVITY;
 8003ab4:	4b56      	ldr	r3, [pc, #344]	; (8003c10 <_Z16MotorControlTaskv+0x1f0>)
 8003ab6:	885b      	ldrh	r3, [r3, #2]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ac0:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003c14 <_Z16MotorControlTaskv+0x1f4>
 8003ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ac8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003c18 <_Z16MotorControlTaskv+0x1f8>
 8003acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ad0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003c20 <_Z16MotorControlTaskv+0x200>
 8003ad4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003ad8:	eddf 6a52 	vldr	s13, [pc, #328]	; 8003c24 <_Z16MotorControlTaskv+0x204>
 8003adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003ae2:	edc3 7a01 	vstr	s15, [r3, #4]
	float pi_proportional_error = pi_error * SPEED_CONTROLER_KP;
	pi_integral_error += pi_error * SPEED_CONTROLLER_KI / MOTOR_CONTROL_TASK_FREQ;
	motorcontrol.duty_cycle = pi_integral_error + pi_proportional_error;
	*/

	motorcontrol.duty_cycle = motorcontrol_pid.update(motorcontrol.target_velocity, motorcontrol.actual_velocity, 0.005f);
 8003ae6:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003ae8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aec:	4b4b      	ldr	r3, [pc, #300]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003aee:	ed93 7a02 	vldr	s14, [r3, #8]
 8003af2:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8003bf0 <_Z16MotorControlTaskv+0x1d0>
 8003af6:	eef0 0a47 	vmov.f32	s1, s14
 8003afa:	eeb0 0a67 	vmov.f32	s0, s15
 8003afe:	4840      	ldr	r0, [pc, #256]	; (8003c00 <_Z16MotorControlTaskv+0x1e0>)
 8003b00:	f7ff feb6 	bl	8003870 <_ZN3PID6updateEfff>
 8003b04:	eef0 7a40 	vmov.f32	s15, s0
 8003b08:	4b44      	ldr	r3, [pc, #272]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b0a:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle += 0.5f;
 8003b0e:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b10:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b14:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b1c:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b1e:	edc3 7a04 	vstr	s15, [r3, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle > 0.95f) ? 0.95f : motorcontrol.duty_cycle;
 8003b22:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b24:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b28:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003c28 <_Z16MotorControlTaskv+0x208>
 8003b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b34:	dd01      	ble.n	8003b3a <_Z16MotorControlTaskv+0x11a>
 8003b36:	4b3d      	ldr	r3, [pc, #244]	; (8003c2c <_Z16MotorControlTaskv+0x20c>)
 8003b38:	e001      	b.n	8003b3e <_Z16MotorControlTaskv+0x11e>
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	4a37      	ldr	r2, [pc, #220]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b40:	6113      	str	r3, [r2, #16]
	motorcontrol.duty_cycle = (motorcontrol.duty_cycle < 0.5f) ? 0.05f : motorcontrol.duty_cycle;
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b44:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	d501      	bpl.n	8003b5a <_Z16MotorControlTaskv+0x13a>
 8003b56:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <_Z16MotorControlTaskv+0x210>)
 8003b58:	e001      	b.n	8003b5e <_Z16MotorControlTaskv+0x13e>
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b60:	6113      	str	r3, [r2, #16]


	if((motorcontrol.target_velocity == 0.0f) && (motorcontrol.actual_velocity < 1.0f) && (motorcontrol.actual_velocity >= -1.0f))
 8003b62:	4b2e      	ldr	r3, [pc, #184]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b64:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d117      	bne.n	8003ba2 <_Z16MotorControlTaskv+0x182>
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b74:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b84:	d50d      	bpl.n	8003ba2 <_Z16MotorControlTaskv+0x182>
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b8c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	db03      	blt.n	8003ba2 <_Z16MotorControlTaskv+0x182>
	{
		motorcontrol.duty_cycle = 0.5f;
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003b9c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003ba0:	611a      	str	r2, [r3, #16]
	}

	//float duty_cycle = 0.6f;
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, motorcontrol.duty_cycle * PWM_COUNTER_PREIOD);
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ba8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003c34 <_Z16MotorControlTaskv+0x214>
 8003bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <_Z16MotorControlTaskv+0x218>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, PWM_COUNTER_PREIOD - (motorcontrol.duty_cycle * PWM_COUNTER_PREIOD));
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <_Z16MotorControlTaskv+0x1fc>)
 8003bc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bc4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003c34 <_Z16MotorControlTaskv+0x214>
 8003bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bcc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003c34 <_Z16MotorControlTaskv+0x214>
 8003bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <_Z16MotorControlTaskv+0x218>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bdc:	ee17 2a90 	vmov	r2, s15
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	2000008c 	.word	0x2000008c
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	3ba3d70a 	.word	0x3ba3d70a
 8003bf4:	3d4ccccd 	.word	0x3d4ccccd
 8003bf8:	3ed70a3d 	.word	0x3ed70a3d
 8003bfc:	3d8d4fdf 	.word	0x3d8d4fdf
 8003c00:	200002b8 	.word	0x200002b8
 8003c04:	200002f8 	.word	0x200002f8
 8003c08:	42021400 	.word	0x42021400
 8003c0c:	200002b4 	.word	0x200002b4
 8003c10:	2000014c 	.word	0x2000014c
 8003c14:	45800000 	.word	0x45800000
 8003c18:	40533333 	.word	0x40533333
 8003c1c:	200002a0 	.word	0x200002a0
 8003c20:	3fd47ae1 	.word	0x3fd47ae1
 8003c24:	3c0ce704 	.word	0x3c0ce704
 8003c28:	3f733333 	.word	0x3f733333
 8003c2c:	3f733333 	.word	0x3f733333
 8003c30:	3d4ccccd 	.word	0x3d4ccccd
 8003c34:	44e54000 	.word	0x44e54000
 8003c38:	20000b04 	.word	0x20000b04

08003c3c <_Z41__static_initialization_and_destruction_0ii>:
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d102      	bne.n	8003c5c <_Z41__static_initialization_and_destruction_0ii+0x20>
PID motorcontrol_pid;
 8003c56:	4809      	ldr	r0, [pc, #36]	; (8003c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c58:	f7ff fdba 	bl	80037d0 <_ZN3PIDC1Ev>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d102      	bne.n	8003c72 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003c6c:	4803      	ldr	r0, [pc, #12]	; (8003c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c6e:	f7ff fdba 	bl	80037e6 <_ZN3PIDD1Ev>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200002b8 	.word	0x200002b8

08003c80 <_GLOBAL__sub_I_motorcontrol>:
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7ff ffd7 	bl	8003c3c <_Z41__static_initialization_and_destruction_0ii>
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_GLOBAL__sub_D_motorcontrol>:
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7ff ffcf 	bl	8003c3c <_Z41__static_initialization_and_destruction_0ii>
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <_Z10Radio_Initv>:
bool flood_active = false;
uint8_t flood_counter = 0;
char pirate_from, pirate_to, pirate_next;
int pirate_percentage = 0;
void Radio_Init()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT (&huart4, radio_rxBuffer, 12);
 8003ca4:	220c      	movs	r2, #12
 8003ca6:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <_Z10Radio_Initv+0x14>)
 8003ca8:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <_Z10Radio_Initv+0x18>)
 8003caa:	f017 fc77 	bl	801b59c <HAL_UART_Receive_IT>

}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	200002e0 	.word	0x200002e0
 8003cb8:	200007f0 	.word	0x200007f0

08003cbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
	uint8_t i, length;
    // Check to see where is the termination character to determine what type of message is received
    for(i = 0; i < 12; ++i)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e009      	b.n	8003cde <HAL_UART_RxCpltCallback+0x22>
    {
    	if(radio_rxBuffer[i] == '\r')
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_UART_RxCpltCallback+0x94>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	2b0d      	cmp	r3, #13
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_RxCpltCallback+0x1c>
    	{
    		length = i;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	73bb      	strb	r3, [r7, #14]
    for(i = 0; i < 12; ++i)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b0b      	cmp	r3, #11
 8003ce2:	d9f2      	bls.n	8003cca <HAL_UART_RxCpltCallback+0xe>
    	}
    }
    // Labirinth countdown message received
    if(length == 1)
 8003ce4:	7bbb      	ldrb	r3, [r7, #14]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d103      	bne.n	8003cf2 <HAL_UART_RxCpltCallback+0x36>
    {
    	countdown_value = radio_rxBuffer[0];
 8003cea:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_UART_RxCpltCallback+0x94>)
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_UART_RxCpltCallback+0x98>)
 8003cf0:	701a      	strb	r2, [r3, #0]
    }
    if(length == 6)
 8003cf2:	7bbb      	ldrb	r3, [r7, #14]
 8003cf4:	2b06      	cmp	r3, #6
 8003cf6:	d115      	bne.n	8003d24 <HAL_UART_RxCpltCallback+0x68>
    {
    	//FLOOD message received
    	if(!strcmp("FLOOD!\r", reinterpret_cast<const char*>(radio_rxBuffer)))
 8003cf8:	4915      	ldr	r1, [pc, #84]	; (8003d50 <HAL_UART_RxCpltCallback+0x94>)
 8003cfa:	4817      	ldr	r0, [pc, #92]	; (8003d58 <HAL_UART_RxCpltCallback+0x9c>)
 8003cfc:	f7fc faa0 	bl	8000240 <strcmp>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <HAL_UART_RxCpltCallback+0x52>
    	{
    		flood_active = true;
 8003d06:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <HAL_UART_RxCpltCallback+0xa0>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e010      	b.n	8003d30 <HAL_UART_RxCpltCallback+0x74>
    	}
    	else
    	{
    		sscanf(reinterpret_cast<const char*>(radio_rxBuffer), "%c%c%c%03d", &pirate_from, &pirate_to, &pirate_next, &pirate_percentage);
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_UART_RxCpltCallback+0xa4>)
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_UART_RxCpltCallback+0xa8>)
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_UART_RxCpltCallback+0xac>)
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_UART_RxCpltCallback+0xb0>)
 8003d1a:	4915      	ldr	r1, [pc, #84]	; (8003d70 <HAL_UART_RxCpltCallback+0xb4>)
 8003d1c:	480c      	ldr	r0, [pc, #48]	; (8003d50 <HAL_UART_RxCpltCallback+0x94>)
 8003d1e:	f01e fc37 	bl	8022590 <siscanf>
 8003d22:	e005      	b.n	8003d30 <HAL_UART_RxCpltCallback+0x74>
    	}
    }

    else
    {
    	flood_counter++;
 8003d24:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <HAL_UART_RxCpltCallback+0xb8>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_UART_RxCpltCallback+0xb8>)
 8003d2e:	701a      	strb	r2, [r3, #0]
    }

    if(flood_counter > 10)
 8003d30:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_UART_RxCpltCallback+0xb8>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b0a      	cmp	r3, #10
 8003d36:	d902      	bls.n	8003d3e <HAL_UART_RxCpltCallback+0x82>
    {
    	flood_active = false;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_UART_RxCpltCallback+0xa0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart4, radio_rxBuffer, 12);
 8003d3e:	220c      	movs	r2, #12
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <HAL_UART_RxCpltCallback+0x94>)
 8003d42:	480d      	ldr	r0, [pc, #52]	; (8003d78 <HAL_UART_RxCpltCallback+0xbc>)
 8003d44:	f017 fc2a 	bl	801b59c <HAL_UART_Receive_IT>

}
 8003d48:	bf00      	nop
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200002e0 	.word	0x200002e0
 8003d54:	2000008d 	.word	0x2000008d
 8003d58:	08023c64 	.word	0x08023c64
 8003d5c:	200002ec 	.word	0x200002ec
 8003d60:	200002f4 	.word	0x200002f4
 8003d64:	200002f0 	.word	0x200002f0
 8003d68:	200002ef 	.word	0x200002ef
 8003d6c:	200002ee 	.word	0x200002ee
 8003d70:	08023c6c 	.word	0x08023c6c
 8003d74:	200002ed 	.word	0x200002ed
 8003d78:	200007f0 	.word	0x200007f0

08003d7c <_Z16SetSteeringAnglef>:
uint8_t Is_First_Captured = 0;


/* Angle in +90 to -90 degree */
void SetSteeringAngle(float angle)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	ed87 0a01 	vstr	s0, [r7, #4]
	if((usWidth_throttle > 1800) && (usWidth_throttle < 2800))
 8003d86:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <_Z16SetSteeringAnglef+0x64>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003d8e:	d91c      	bls.n	8003dca <_Z16SetSteeringAnglef+0x4e>
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <_Z16SetSteeringAnglef+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8003d98:	d217      	bcs.n	8003dca <_Z16SetSteeringAnglef+0x4e>
	{
		uint16_t compare = SERVO_NULL + (angle/ 21.5f * SERVO_RANGE);
 8003d9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d9e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003de4 <_Z16SetSteeringAnglef+0x68>
 8003da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003da6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003de8 <_Z16SetSteeringAnglef+0x6c>
 8003daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003dec <_Z16SetSteeringAnglef+0x70>
 8003db2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dba:	ee17 3a90 	vmov	r3, s15
 8003dbe:	81fb      	strh	r3, [r7, #14]
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, compare);	}
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <_Z16SetSteeringAnglef+0x74>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	89fa      	ldrh	r2, [r7, #14]
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34
 8003dc8:	e004      	b.n	8003dd4 <_Z16SetSteeringAnglef+0x58>
	else
	{
	    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <_Z16SetSteeringAnglef+0x74>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	200002f8 	.word	0x200002f8
 8003de4:	41ac0000 	.word	0x41ac0000
 8003de8:	43c80000 	.word	0x43c80000
 8003dec:	44960000 	.word	0x44960000
 8003df0:	20000b9c 	.word	0x20000b9c

08003df4 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	// RISING
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7f1b      	ldrb	r3, [r3, #28]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d104      	bne.n	8003e0e <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
		float refClock = TIMCLOCK/(PRESCALAR);
		float mFactor = 1000000/refClock;

		usWidth_throttle = falling_value*mFactor;
	}
}
 8003e0c:	e024      	b.n	8003e58 <HAL_TIM_IC_CaptureCallback+0x64>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7f1b      	ldrb	r3, [r3, #28]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d120      	bne.n	8003e58 <HAL_TIM_IC_CaptureCallback+0x64>
		falling_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8003e16:	210c      	movs	r1, #12
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f016 fbe3 	bl	801a5e4 <HAL_TIM_ReadCapturedValue>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003e22:	6013      	str	r3, [r2, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_TIM_IC_CaptureCallback+0x70>)
 8003e26:	60fb      	str	r3, [r7, #12]
		float mFactor = 1000000/refClock;
 8003e28:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003e68 <HAL_TIM_IC_CaptureCallback+0x74>
 8003e2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e34:	edc7 7a02 	vstr	s15, [r7, #8]
		usWidth_throttle = falling_value*mFactor;
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e44:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e50:	ee17 2a90 	vmov	r2, s15
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_TIM_IC_CaptureCallback+0x78>)
 8003e56:	601a      	str	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200002fc 	.word	0x200002fc
 8003e64:	49742400 	.word	0x49742400
 8003e68:	49742400 	.word	0x49742400
 8003e6c:	200002f8 	.word	0x200002f8

08003e70 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(strong_ordering, strong_ordering) noexcept = default;

    friend constexpr bool
    operator< (strong_ordering __v, __cmp_cat::__unspec) noexcept
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	7138      	strb	r0, [r7, #4]
 8003e90:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8003e92:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	09db      	lsrs	r3, r3, #7
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	bf00      	nop
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	7138      	strb	r0, [r7, #4]
 8003ec0:	bf00      	nop
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	f1c3 031f 	rsb	r3, r3, #31
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ef6:	edc7 0a00 	vstr	s1, [r7]
 8003efa:	edd7 0a00 	vldr	s1, [r7]
 8003efe:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f02:	f01c faed 	bl	80204e0 <atan2f>
 8003f06:	eef0 7a40 	vmov.f32	s15, s0
 8003f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f22:	f01c fadf 	bl	80204e4 <cosf>
 8003f26:	eef0 7a40 	vmov.f32	s15, s0
 8003f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f42:	eef0 7ae7 	vabs.f32	s15, s15
 8003f46:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003f62:	f01c fb03 	bl	802056c <sinf>
 8003f66:	eef0 7a40 	vmov.f32	s15, s0
 8003f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_ZN3jlb10ControllerC1ENS_9DirectionE>:
        std::vector<float> line_positions_rear;

        Direction direction      = Direction::STRAIGHT;
        Direction prev_direction = Direction::STRAIGHT;

        Controller(Direction direction_ = Direction::STRAIGHT) : direction{direction_} { object_pid.init(kP, kI, kD, TAU, T, LIM_MIN, LIM_MAX, DEADBAND); }
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2210      	movs	r2, #16
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2210      	movs	r2, #16
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	611a      	str	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	615a      	str	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	619a      	str	r2, [r3, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	621a      	str	r2, [r3, #32]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a35      	ldr	r2, [pc, #212]	; (80040ac <_ZN3jlb10ControllerC1ENS_9DirectionE+0x138>)
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3370      	adds	r3, #112	; 0x70
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe faf2 	bl	80025c6 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	337c      	adds	r3, #124	; 0x7c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe faed 	bl	80025c6 <_ZNSt6vectorIfSaIfEEC1Ev>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800401a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004024:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x13c>)
 800402c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	33bc      	adds	r3, #188	; 0xbc
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fbad 	bl	80037d0 <_ZN3PIDC1Ev>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	33bc      	adds	r3, #188	; 0xbc
 800407a:	eddf 3a0e 	vldr	s7, [pc, #56]	; 80040b4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x140>
 800407e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8004082:	eddf 2a0c 	vldr	s5, [pc, #48]	; 80040b4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x140>
 8004086:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80040b8 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x144>
 800408a:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80040bc <_ZN3jlb10ControllerC1ENS_9DirectionE+0x148>
 800408e:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80040b4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x140>
 8004092:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80040c0 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x14c>
 8004096:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80040c4 <_ZN3jlb10ControllerC1ENS_9DirectionE+0x150>
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fbae 	bl	80037fc <_ZN3PID4initEffffffff>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	42c80000 	.word	0x42c80000
 80040b0:	3dcccccd 	.word	0x3dcccccd
 80040b4:	00000000 	.word	0x00000000
 80040b8:	3ba3d70a 	.word	0x3ba3d70a
 80040bc:	3d4ccccd 	.word	0x3d4ccccd
 80040c0:	3f30a3d7 	.word	0x3f30a3d7
 80040c4:	40866666 	.word	0x40866666

080040c8 <_ZN3jlb10ControllerD1Ev>:
        ~Controller() {}
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	33bc      	adds	r3, #188	; 0xbc
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fb86 	bl	80037e6 <_ZN3PIDD1Ev>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	337c      	adds	r3, #124	; 0x7c
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe ff0e 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3370      	adds	r3, #112	; 0x70
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe ff09 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZN3jlb10Controller7stanleyEfff>:

        float stanley(const float cross_track_error, const float heading_error, const float dt)
 80040f8:	b580      	push	{r7, lr}
 80040fa:	ed2d 8b02 	vpush	{d8}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	ed87 0a02 	vstr	s0, [r7, #8]
 8004108:	edc7 0a01 	vstr	s1, [r7, #4]
 800410c:	ed87 1a00 	vstr	s2, [r7]
        {
        	if(	reference_speed == FAST_SPEED &&
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004116:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800411a:	eef4 7a47 	vcmp.f32	s15, s14
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d176      	bne.n	8004212 <_ZN3jlb10Controller7stanleyEfff+0x11a>
        		(kANG_FS + 0.05 < kAng || kAng < kANG_FS - 0.05) &&
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc f9ff 	bl	800052c <__aeabi_f2d>
        	if(	reference_speed == FAST_SPEED &&
 800412e:	a3d2      	add	r3, pc, #840	; (adr r3, 8004478 <_ZN3jlb10Controller7stanleyEfff+0x380>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc fce2 	bl	8000afc <__aeabi_dcmpgt>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <_ZN3jlb10Controller7stanleyEfff+0x60>
        		(kANG_FS + 0.05 < kAng || kAng < kANG_FS - 0.05) &&
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc f9f2 	bl	800052c <__aeabi_f2d>
 8004148:	a3cd      	add	r3, pc, #820	; (adr r3, 8004480 <_ZN3jlb10Controller7stanleyEfff+0x388>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fcb7 	bl	8000ac0 <__aeabi_dcmplt>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d05c      	beq.n	8004212 <_ZN3jlb10Controller7stanleyEfff+0x11a>
				!started_param_transition_accel &&
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800415e:	f083 0301 	eor.w	r3, r3, #1
 8004162:	b2db      	uxtb	r3, r3
        		(kANG_FS + 0.05 < kAng || kAng < kANG_FS - 0.05) &&
 8004164:	2b00      	cmp	r3, #0
 8004166:	d054      	beq.n	8004212 <_ZN3jlb10Controller7stanleyEfff+0x11a>
				!started_param_transition_decel)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800416e:	f083 0301 	eor.w	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
				!started_param_transition_accel &&
 8004174:	2b00      	cmp	r3, #0
 8004176:	d04c      	beq.n	8004212 <_ZN3jlb10Controller7stanleyEfff+0x11a>
        	{
        		kAng_modifier = (kANG_FS - kAng) / (PARAM_TRANSITION_TIME_ACCEL / dt);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800417e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004182:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004186:	ed9f 6ab8 	vldr	s12, [pc, #736]	; 8004468 <_ZN3jlb10Controller7stanleyEfff+0x370>
 800418a:	edd7 7a00 	vldr	s15, [r7]
 800418e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
        		kDist_modifier = (kDIST_FS - kDist) / (PARAM_TRANSITION_TIME_ACCEL / dt);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80041a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041aa:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 8004468 <_ZN3jlb10Controller7stanleyEfff+0x370>
 80041ae:	edd7 7a00 	vldr	s15, [r7]
 80041b2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
        		kSoft_modifier = (kSOFT_FS - kSoft) / (PARAM_TRANSITION_TIME_ACCEL / dt);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80041c6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80041ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041ce:	ed9f 6aa6 	vldr	s12, [pc, #664]	; 8004468 <_ZN3jlb10Controller7stanleyEfff+0x370>
 80041d2:	edd7 7a00 	vldr	s15, [r7]
 80041d6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80041da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
        		kDamp_modifier = (kDAMP_FS - kDamp) / (PARAM_TRANSITION_TIME_ACCEL / dt);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80041ea:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 800446c <_ZN3jlb10Controller7stanleyEfff+0x374>
 80041ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80041f2:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8004468 <_ZN3jlb10Controller7stanleyEfff+0x370>
 80041f6:	edd7 7a00 	vldr	s15, [r7]
 80041fa:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80041fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
        		started_param_transition_accel = true;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8004210:	e0b9      	b.n	8004386 <_ZN3jlb10Controller7stanleyEfff+0x28e>
        	}
        	else if(reference_speed == FAST_SPEED_TURN &&
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8004218:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800421c:	eef4 7a47 	vcmp.f32	s15, s14
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	d176      	bne.n	8004314 <_ZN3jlb10Controller7stanleyEfff+0x21c>
        			(kANG_FST + 0.05 < kAng || kAng < kANG_FST - 0.05) &&
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc f97e 	bl	800052c <__aeabi_f2d>
        	else if(reference_speed == FAST_SPEED_TURN &&
 8004230:	a389      	add	r3, pc, #548	; (adr r3, 8004458 <_ZN3jlb10Controller7stanleyEfff+0x360>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fc fc61 	bl	8000afc <__aeabi_dcmpgt>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10c      	bne.n	800425a <_ZN3jlb10Controller7stanleyEfff+0x162>
        			(kANG_FST + 0.05 < kAng || kAng < kANG_FST - 0.05) &&
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f971 	bl	800052c <__aeabi_f2d>
 800424a:	a385      	add	r3, pc, #532	; (adr r3, 8004460 <_ZN3jlb10Controller7stanleyEfff+0x368>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc fc36 	bl	8000ac0 <__aeabi_dcmplt>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d05c      	beq.n	8004314 <_ZN3jlb10Controller7stanleyEfff+0x21c>
					!started_param_transition_accel &&
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004260:	f083 0301 	eor.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
        			(kANG_FST + 0.05 < kAng || kAng < kANG_FST - 0.05) &&
 8004266:	2b00      	cmp	r3, #0
 8004268:	d054      	beq.n	8004314 <_ZN3jlb10Controller7stanleyEfff+0x21c>
					!started_param_transition_decel)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004270:	f083 0301 	eor.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
					!started_param_transition_accel &&
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04c      	beq.n	8004314 <_ZN3jlb10Controller7stanleyEfff+0x21c>
        	{
        		kAng_modifier = (kANG_FST - kAng) / (PARAM_TRANSITION_TIME_DECEL / dt);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004280:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004284:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004288:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800428c:	edd7 7a00 	vldr	s15, [r7]
 8004290:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
				kDist_modifier = (kDIST_FST - kDist) / (PARAM_TRANSITION_TIME_DECEL / dt);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80042a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80042b0:	edd7 7a00 	vldr	s15, [r7]
 80042b4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80042b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
				kSoft_modifier = (kSOFT_FST - kSoft) / (PARAM_TRANSITION_TIME_DECEL / dt);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80042c8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004470 <_ZN3jlb10Controller7stanleyEfff+0x378>
 80042cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80042d4:	edd7 7a00 	vldr	s15, [r7]
 80042d8:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80042dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
				kDamp_modifier = (kDAMP_FST - kDamp) / (PARAM_TRANSITION_TIME_DECEL / dt);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80042ec:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004474 <_ZN3jlb10Controller7stanleyEfff+0x37c>
 80042f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80042f8:	edd7 7a00 	vldr	s15, [r7]
 80042fc:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
				started_param_transition_decel = true;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8004312:	e038      	b.n	8004386 <_ZN3jlb10Controller7stanleyEfff+0x28e>
        	}
        	else if (started_param_transition_accel && transition_cycle_count == static_cast<int>(PARAM_TRANSITION_TIME_ACCEL / dt))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800431a:	2b00      	cmp	r3, #0
 800431c:	d017      	beq.n	800434e <_ZN3jlb10Controller7stanleyEfff+0x256>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004324:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004468 <_ZN3jlb10Controller7stanleyEfff+0x370>
 8004328:	ed97 7a00 	vldr	s14, [r7]
 800432c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004334:	ee17 2a90 	vmov	r2, s15
 8004338:	4293      	cmp	r3, r2
 800433a:	d108      	bne.n	800434e <_ZN3jlb10Controller7stanleyEfff+0x256>
        	{
        		started_param_transition_accel = false;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        		transition_cycle_count = 0;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800434c:	e01b      	b.n	8004386 <_ZN3jlb10Controller7stanleyEfff+0x28e>
        	}
        	else if (started_param_transition_decel && transition_cycle_count == static_cast<int>(PARAM_TRANSITION_TIME_DECEL / dt))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004354:	2b00      	cmp	r3, #0
 8004356:	d016      	beq.n	8004386 <_ZN3jlb10Controller7stanleyEfff+0x28e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004362:	ed97 7a00 	vldr	s14, [r7]
 8004366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800436e:	ee17 2a90 	vmov	r2, s15
 8004372:	4293      	cmp	r3, r2
 8004374:	d107      	bne.n	8004386 <_ZN3jlb10Controller7stanleyEfff+0x28e>
			{
				started_param_transition_decel = false;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				transition_cycle_count = 0;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			}

        	if(started_param_transition_accel || started_param_transition_decel)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <_ZN3jlb10Controller7stanleyEfff+0x2a2>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8004396:	2b00      	cmp	r3, #0
 8004398:	d032      	beq.n	8004400 <_ZN3jlb10Controller7stanleyEfff+0x308>
        	{
        		kAng += kAng_modifier;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80043a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				kDist += kDist_modifier;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 80043bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
				kSoft += kSoft_modifier;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80043d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
				kDamp += kDamp_modifier;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80043e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
				transition_cycle_count++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        	}

        	return kAng * heading_error + std::atan2(kDist * cross_track_error, kSoft + kDamp * current_velocity);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004406:	edd7 7a01 	vldr	s15, [r7, #4]
 800440a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004414:	edd7 7a02 	vldr	s15, [r7, #8]
 8004418:	ee27 6a27 	vmul.f32	s12, s14, s15
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 800442e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004436:	eef0 0a67 	vmov.f32	s1, s15
 800443a:	eeb0 0a46 	vmov.f32	s0, s12
 800443e:	f7ff fd55 	bl	8003eec <_ZSt5atan2ff>
 8004442:	eef0 7a40 	vmov.f32	s15, s0
 8004446:	ee78 7a27 	vadd.f32	s15, s16, s15
        }
 800444a:	eeb0 0a67 	vmov.f32	s0, s15
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	ecbd 8b02 	vpop	{d8}
 8004456:	bd80      	pop	{r7, pc}
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	3ff8cccc 	.word	0x3ff8cccc
 8004460:	33333333 	.word	0x33333333
 8004464:	3ff73333 	.word	0x3ff73333
 8004468:	3d4ccccd 	.word	0x3d4ccccd
 800446c:	3dcccccd 	.word	0x3dcccccd
 8004470:	3e19999a 	.word	0x3e19999a
 8004474:	00000000 	.word	0x00000000
 8004478:	33333333 	.word	0x33333333
 800447c:	3fd33333 	.word	0x3fd33333
 8004480:	9999999a 	.word	0x9999999a
 8004484:	3fc99999 	.word	0x3fc99999

08004488 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>:

        float select_control_point(std::vector<float> line_positions, float prev_line_position)
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	ed2d 8b02 	vpush	{d8}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	ed87 0a01 	vstr	s0, [r7, #4]
        {
            std::sort(line_positions.begin(), line_positions.end());
 800449a:	68b8      	ldr	r0, [r7, #8]
 800449c:	f7fe ff42 	bl	8003324 <_ZNSt6vectorIfSaIfEE5beginEv>
 80044a0:	4604      	mov	r4, r0
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f7fe fe0e 	bl	80030c4 <_ZNSt6vectorIfSaIfEE3endEv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4619      	mov	r1, r3
 80044ac:	4620      	mov	r0, r4
 80044ae:	f007 f994 	bl	800b7da <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

            if (line_positions.size() == 1) { return line_positions[0]; }
 80044b2:	68b8      	ldr	r0, [r7, #8]
 80044b4:	f7fe ffc3 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x50>
 80044c8:	2100      	movs	r1, #0
 80044ca:	68b8      	ldr	r0, [r7, #8]
 80044cc:	f007 f995 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80044d0:	4603      	mov	r3, r0
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	e114      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            else if (line_positions.size() == 2)
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7fe ffb0 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8096 	beq.w	800461c <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x194>
            {
                switch (direction)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d00f      	beq.n	800451a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x92>
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	f300 808b 	bgt.w	8004616 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x82>
 8004504:	2b01      	cmp	r3, #1
 8004506:	d07e      	beq.n	8004606 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x17e>
 8004508:	e085      	b.n	8004616 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x18e>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 800450a:	2100      	movs	r1, #0
 800450c:	68b8      	ldr	r0, [r7, #8]
 800450e:	f007 f974 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004512:	4603      	mov	r3, r0
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	e0f3      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        if (direction == prev_direction)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004526:	429a      	cmp	r2, r3
 8004528:	d136      	bne.n	8004598 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x110>
                        {
                            return std::fabs(line_positions[0] - prev_line_position) < std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1];
 800452a:	2100      	movs	r1, #0
 800452c:	68b8      	ldr	r0, [r7, #8]
 800452e:	f007 f964 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004532:	4603      	mov	r3, r0
 8004534:	ed93 7a00 	vldr	s14, [r3]
 8004538:	edd7 7a01 	vldr	s15, [r7, #4]
 800453c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004540:	eeb0 0a67 	vmov.f32	s0, s15
 8004544:	f7ff fcf6 	bl	8003f34 <_ZSt4fabsf>
 8004548:	eeb0 8a40 	vmov.f32	s16, s0
 800454c:	2101      	movs	r1, #1
 800454e:	68b8      	ldr	r0, [r7, #8]
 8004550:	f007 f953 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004554:	4603      	mov	r3, r0
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	edd7 7a01 	vldr	s15, [r7, #4]
 800455e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004562:	eeb0 0a67 	vmov.f32	s0, s15
 8004566:	f7ff fce5 	bl	8003f34 <_ZSt4fabsf>
 800456a:	eef0 7a40 	vmov.f32	s15, s0
 800456e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004576:	d507      	bpl.n	8004588 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x100>
 8004578:	2100      	movs	r1, #0
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f007 f93d 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004580:	4603      	mov	r3, r0
 8004582:	edd3 7a00 	vldr	s15, [r3]
 8004586:	e0bc      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 8004588:	2101      	movs	r1, #1
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f007 f935 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004590:	4603      	mov	r3, r0
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	e0b4      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                        }
                        else { return std::fabs(line_positions[0] - prev_line_position) > std::fabs(line_positions[1] - prev_line_position) ? line_positions[0] : line_positions[1]; }
 8004598:	2100      	movs	r1, #0
 800459a:	68b8      	ldr	r0, [r7, #8]
 800459c:	f007 f92d 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80045a0:	4603      	mov	r3, r0
 80045a2:	ed93 7a00 	vldr	s14, [r3]
 80045a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80045aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ae:	eeb0 0a67 	vmov.f32	s0, s15
 80045b2:	f7ff fcbf 	bl	8003f34 <_ZSt4fabsf>
 80045b6:	eeb0 8a40 	vmov.f32	s16, s0
 80045ba:	2101      	movs	r1, #1
 80045bc:	68b8      	ldr	r0, [r7, #8]
 80045be:	f007 f91c 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80045c2:	4603      	mov	r3, r0
 80045c4:	ed93 7a00 	vldr	s14, [r3]
 80045c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80045cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045d0:	eeb0 0a67 	vmov.f32	s0, s15
 80045d4:	f7ff fcae 	bl	8003f34 <_ZSt4fabsf>
 80045d8:	eef0 7a40 	vmov.f32	s15, s0
 80045dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80045e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e4:	dd07      	ble.n	80045f6 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x16e>
 80045e6:	2100      	movs	r1, #0
 80045e8:	68b8      	ldr	r0, [r7, #8]
 80045ea:	f007 f906 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80045ee:	4603      	mov	r3, r0
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	e085      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
 80045f6:	2101      	movs	r1, #1
 80045f8:	68b8      	ldr	r0, [r7, #8]
 80045fa:	f007 f8fe 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80045fe:	4603      	mov	r3, r0
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	e07d      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[1];
 8004606:	2101      	movs	r1, #1
 8004608:	68b8      	ldr	r0, [r7, #8]
 800460a:	f007 f8f6 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 800460e:	4603      	mov	r3, r0
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	e075      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 8004616:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8004710 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 800461a:	e072      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 3)
 800461c:	68b8      	ldr	r0, [r7, #8]
 800461e:	f7fe ff0e 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004622:	4603      	mov	r3, r0
 8004624:	2b03      	cmp	r3, #3
 8004626:	bf0c      	ite	eq
 8004628:	2301      	moveq	r3, #1
 800462a:	2300      	movne	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d026      	beq.n	8004680 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f8>
            {
                switch (direction)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	2b02      	cmp	r3, #2
 800463a:	d00e      	beq.n	800465a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1d2>
 800463c:	2b02      	cmp	r3, #2
 800463e:	dc1c      	bgt.n	800467a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1c2>
 8004644:	2b01      	cmp	r3, #1
 8004646:	d010      	beq.n	800466a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1e2>
 8004648:	e017      	b.n	800467a <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x1f2>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 800464a:	2100      	movs	r1, #0
 800464c:	68b8      	ldr	r0, [r7, #8]
 800464e:	f007 f8d4 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004652:	4603      	mov	r3, r0
 8004654:	edd3 7a00 	vldr	s15, [r3]
 8004658:	e053      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1];
 800465a:	2101      	movs	r1, #1
 800465c:	68b8      	ldr	r0, [r7, #8]
 800465e:	f007 f8cc 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004662:	4603      	mov	r3, r0
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	e04b      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[2];
 800466a:	2102      	movs	r1, #2
 800466c:	68b8      	ldr	r0, [r7, #8]
 800466e:	f007 f8c4 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 8004672:	4603      	mov	r3, r0
 8004674:	edd3 7a00 	vldr	s15, [r3]
 8004678:	e043      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 800467a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004710 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 800467e:	e040      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                }
            }
            else if (line_positions.size() == 4)
 8004680:	68b8      	ldr	r0, [r7, #8]
 8004682:	f7fe fedc 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8004686:	4603      	mov	r3, r0
 8004688:	2b04      	cmp	r3, #4
 800468a:	bf0c      	ite	eq
 800468c:	2301      	moveq	r3, #1
 800468e:	2300      	movne	r3, #0
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d033      	beq.n	80046fe <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x276>
            {
                switch (direction)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	2b02      	cmp	r3, #2
 800469e:	d00e      	beq.n	80046be <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x236>
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	dc29      	bgt.n	80046f8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x226>
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d01d      	beq.n	80046e8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x260>
 80046ac:	e024      	b.n	80046f8 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x270>
                {
                    case Direction::LEFT:
                    {
                        return line_positions[0];
 80046ae:	2100      	movs	r1, #0
 80046b0:	68b8      	ldr	r0, [r7, #8]
 80046b2:	f007 f8a2 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80046b6:	4603      	mov	r3, r0
 80046b8:	edd3 7a00 	vldr	s15, [r3]
 80046bc:	e021      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::STRAIGHT:
                    {
                        return line_positions[1] + line_positions[2] / 2.0f;
 80046be:	2101      	movs	r1, #1
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f007 f89a 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80046c6:	4603      	mov	r3, r0
 80046c8:	ed93 8a00 	vldr	s16, [r3]
 80046cc:	2102      	movs	r1, #2
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f007 f893 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80046d4:	4603      	mov	r3, r0
 80046d6:	ed93 7a00 	vldr	s14, [r3]
 80046da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80046de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80046e6:	e00c      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    case Direction::RIGHT:
                    {
                        return line_positions[3];
 80046e8:	2103      	movs	r1, #3
 80046ea:	68b8      	ldr	r0, [r7, #8]
 80046ec:	f007 f885 	bl	800b7fa <_ZNSt6vectorIfSaIfEEixEj>
 80046f0:	4603      	mov	r3, r0
 80046f2:	edd3 7a00 	vldr	s15, [r3]
 80046f6:	e004      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
                    }
                    default:
                        return 0.0f;
 80046f8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004710 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
 80046fc:	e001      	b.n	8004702 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x27a>
            }
            else
            {
                // this should never happen

                return 0.0f;
 80046fe:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004710 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf+0x288>
            }
        }
 8004702:	eeb0 0a67 	vmov.f32	s0, s15
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	ecbd 8b02 	vpop	{d8}
 800470e:	bd90      	pop	{r4, r7, pc}
 8004710:	00000000 	.word	0x00000000

08004714 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>:

        void lateral_control([[maybe_unused]] const float dt)
        {
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	4618      	mov	r0, r3
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>:

            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <_ZN3jlb10Controller15lateral_controlEf>:
        void lateral_control([[maybe_unused]] const float dt)
 8004748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800474a:	b08b      	sub	sp, #44	; 0x2c
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	ed87 0a00 	vstr	s0, [r7]
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3330      	adds	r3, #48	; 0x30
 8004758:	4618      	mov	r0, r3
 800475a:	f007 f85e 	bl	800b81a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800475e:	4604      	mov	r4, r0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3330      	adds	r3, #48	; 0x30
 8004764:	4618      	mov	r0, r3
 8004766:	f007 f863 	bl	800b830 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800476a:	4603      	mov	r3, r0
 800476c:	4632      	mov	r2, r6
 800476e:	4619      	mov	r1, r3
 8004770:	4620      	mov	r0, r4
 8004772:	f007 f869 	bl	800b848 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 80ec 	bne.w	8004956 <_ZN3jlb10Controller15lateral_controlEf+0x20e>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3350      	adds	r3, #80	; 0x50
 8004782:	4618      	mov	r0, r3
 8004784:	f007 f849 	bl	800b81a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 8004788:	4604      	mov	r4, r0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3350      	adds	r3, #80	; 0x50
 800478e:	4618      	mov	r0, r3
 8004790:	f007 f84e 	bl	800b830 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 8004794:	4603      	mov	r3, r0
 8004796:	462a      	mov	r2, r5
 8004798:	4619      	mov	r1, r3
 800479a:	4620      	mov	r0, r4
 800479c:	f007 f86a 	bl	800b874 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 80d9 	bne.w	800495a <_ZN3jlb10Controller15lateral_controlEf+0x212>

            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3370      	adds	r3, #112	; 0x70
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fe46 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d017      	beq.n	80047e8 <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	337c      	adds	r3, #124	; 0x7c
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fe3e 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3370      	adds	r3, #112	; 0x70
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fe36 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d807      	bhi.n	80047e8 <_ZN3jlb10Controller15lateral_controlEf+0xa0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	337c      	adds	r3, #124	; 0x7c
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fe fe2e 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d901      	bls.n	80047ec <_ZN3jlb10Controller15lateral_controlEf+0xa4>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <_ZN3jlb10Controller15lateral_controlEf+0xa6>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 80b5 	bne.w	800495e <_ZN3jlb10Controller15lateral_controlEf+0x216>

            line_position_front      = select_control_point(line_positions_front, prev_line_position_front);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f007 f84d 	bl	800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	edd3 7a04 	vldr	s15, [r3, #16]
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	eeb0 0a67 	vmov.f32	s0, s15
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fe36 	bl	8004488 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 800481c:	eef0 7a40 	vmov.f32	s15, s0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	edc3 7a02 	vstr	s15, [r3, #8]
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fb68 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
            line_position_rear       = select_control_point(line_positions_rear, prev_line_position_rear);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004836:	f107 0314 	add.w	r3, r7, #20
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f007 f82f 	bl	800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	edd3 7a05 	vldr	s15, [r3, #20]
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	eeb0 0a67 	vmov.f32	s0, s15
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff fe18 	bl	8004488 <_ZN3jlb10Controller20select_control_pointESt6vectorIfSaIfEEf>
 8004858:	eef0 7a40 	vmov.f32	s15, s0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	edc3 7a03 	vstr	s15, [r3, #12]
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe fb4a 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
            prev_line_position_front = line_position_front;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	611a      	str	r2, [r3, #16]
            prev_line_position_rear  = line_position_rear;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	615a      	str	r2, [r3, #20]

            float sensor_rate   = SENSOR_WIDTH / SENSOR_COUNT;
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <_ZN3jlb10Controller15lateral_controlEf+0x220>)
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
            float sensor_center = SENSOR_COUNT / 2.0f;
 8004880:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8004884:	623b      	str	r3, [r7, #32]
            selected_front      = static_cast<unsigned long>(line_position_front / sensor_rate + sensor_center);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	edd3 6a02 	vldr	s13, [r3, #8]
 800488c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004894:	edd7 7a08 	vldr	s15, [r7, #32]
 8004898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a0:	ee17 2a90 	vmov	r2, s15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
            selected_rear       = static_cast<unsigned long>(line_position_rear / sensor_rate + sensor_center);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80048ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80048ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c2:	ee17 2a90 	vmov	r2, s15
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	605a      	str	r2, [r3, #4]

            cross_track_error = line_position_front;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]
            heading_error     = std::atan2(line_position_front - line_position_rear, SENSOR_BASE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	edd3 7a03 	vldr	s15, [r3, #12]
 80048de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048e2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80048e6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ea:	f7ff faff 	bl	8003eec <_ZSt5atan2ff>
 80048ee:	eef0 7a40 	vmov.f32	s15, s0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

            target_angle = stanley(cross_track_error, heading_error, dt);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004904:	ed97 1a00 	vldr	s2, [r7]
 8004908:	eef0 0a47 	vmov.f32	s1, s14
 800490c:	eeb0 0a67 	vmov.f32	s0, s15
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fbf1 	bl	80040f8 <_ZN3jlb10Controller7stanleyEfff>
 8004916:	eef0 7a40 	vmov.f32	s15, s0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	edc3 7a06 	vstr	s15, [r3, #24]

            if (target_angle > deg2rad(MAX_WHEEL_ANGLE)) target_angle = deg2rad(MAX_WHEEL_ANGLE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	edd3 7a06 	vldr	s15, [r3, #24]
 8004926:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800496c <_ZN3jlb10Controller15lateral_controlEf+0x224>
 800492a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	dd02      	ble.n	800493a <_ZN3jlb10Controller15lateral_controlEf+0x1f2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0e      	ldr	r2, [pc, #56]	; (8004970 <_ZN3jlb10Controller15lateral_controlEf+0x228>)
 8004938:	619a      	str	r2, [r3, #24]
            if (target_angle < -deg2rad(MAX_WHEEL_ANGLE)) target_angle = -deg2rad(MAX_WHEEL_ANGLE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004940:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004974 <_ZN3jlb10Controller15lateral_controlEf+0x22c>
 8004944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494c:	d508      	bpl.n	8004960 <_ZN3jlb10Controller15lateral_controlEf+0x218>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a09      	ldr	r2, [pc, #36]	; (8004978 <_ZN3jlb10Controller15lateral_controlEf+0x230>)
 8004952:	619a      	str	r2, [r3, #24]
 8004954:	e004      	b.n	8004960 <_ZN3jlb10Controller15lateral_controlEf+0x218>
            if (std::all_of(std::begin(detection_front), std::end(detection_front), [](bool b) { return b; })) { return; }
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <_ZN3jlb10Controller15lateral_controlEf+0x218>
            if (std::all_of(std::begin(detection_rear), std::end(detection_rear), [](bool b) { return b; })) { return; }
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <_ZN3jlb10Controller15lateral_controlEf+0x218>
            if (line_positions_front.size() == 0 || line_positions_rear.size() == 0 || line_positions_front.size() > 4 || line_positions_rear.size() > 4) { return; }
 800495e:	bf00      	nop
        }
 8004960:	372c      	adds	r7, #44	; 0x2c
 8004962:	46bd      	mov	sp, r7
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004966:	bf00      	nop
 8004968:	3bcccccd 	.word	0x3bcccccd
 800496c:	3ec02037 	.word	0x3ec02037
 8004970:	3ec02037 	.word	0x3ec02037
 8004974:	bec02037 	.word	0xbec02037
 8004978:	bec02037 	.word	0xbec02037

0800497c <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	ed93 7a00 	vldr	s14, [r3]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	edd3 7a00 	vldr	s15, [r3]
 8004992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	d501      	bpl.n	80049a0 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	e000      	b.n	80049a2 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80049a0:	687b      	ldr	r3, [r7, #4]
    }
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <_ZN3jlb10Controller20longitudinal_controlEf>:

        void longitudinal_control([[maybe_unused]] const float dt)
 80049b0:	b5b0      	push	{r4, r5, r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	ed87 0a00 	vstr	s0, [r7]
        {
            float dist_error = std::min(std::abs(cross_track_error), DIST_ERROR_MAX);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	edd3 7a08 	vldr	s15, [r3, #32]
 80049c2:	eeb0 0a67 	vmov.f32	s0, s15
 80049c6:	f7fe fed7 	bl	8003778 <_ZSt3absf>
 80049ca:	eef0 7a40 	vmov.f32	s15, s0
 80049ce:	edc7 7a04 	vstr	s15, [r7, #16]
 80049d2:	f107 0310 	add.w	r3, r7, #16
 80049d6:	4951      	ldr	r1, [pc, #324]	; (8004b1c <_ZN3jlb10Controller20longitudinal_controlEf+0x16c>)
 80049d8:	4618      	mov	r0, r3
 80049da:	f006 ff9e 	bl	800b91a <_ZSt3minIfERKT_S2_S2_>
 80049de:	4603      	mov	r3, r0
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
            float ang_error  = std::min(std::abs(heading_error), deg2rad(ANG_ERROR_MAX));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80049ea:	eeb0 0a67 	vmov.f32	s0, s15
 80049ee:	f7fe fec3 	bl	8003778 <_ZSt3absf>
 80049f2:	eef0 7a40 	vmov.f32	s15, s0
 80049f6:	edc7 7a05 	vstr	s15, [r7, #20]
 80049fa:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <_ZN3jlb10Controller20longitudinal_controlEf+0x170>)
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	f107 0218 	add.w	r2, r7, #24
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4611      	mov	r1, r2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f006 ff86 	bl	800b91a <_ZSt3minIfERKT_S2_S2_>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28

            float dist_error_norm = dist_error / DIST_ERROR_MAX;
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	60fb      	str	r3, [r7, #12]
            float ang_error_norm  = ang_error / deg2rad(ANG_ERROR_MAX);
 8004a18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004a1c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004b24 <_ZN3jlb10Controller20longitudinal_controlEf+0x174>
 8004a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a24:	edc7 7a02 	vstr	s15, [r7, #8]

            float x      = std::max(dist_error_norm, ang_error_norm);
 8004a28:	f107 0208 	add.w	r2, r7, #8
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ffa2 	bl	800497c <_ZSt3maxIfERKT_S2_S2_>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
            target_speed = std::min(reference_speed, reference_speed * (1.0f - (0.1666667f * x) - (0.8333333f * x * x)));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8004a4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a4e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004b28 <_ZN3jlb10Controller20longitudinal_controlEf+0x178>
 8004a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004a5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a62:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8004b2c <_ZN3jlb10Controller20longitudinal_controlEf+0x17c>
 8004a66:	ee27 6a86 	vmul.f32	s12, s15, s12
 8004a6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004a6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004a72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
 8004a7e:	f107 031c 	add.w	r3, r7, #28
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f006 ff48 	bl	800b91a <_ZSt3minIfERKT_S2_S2_>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	61da      	str	r2, [r3, #28]

            if (target_speed < MIN_SPEED) target_speed = MIN_SPEED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa4:	d503      	bpl.n	8004aae <_ZN3jlb10Controller20longitudinal_controlEf+0xfe>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004aac:	61da      	str	r2, [r3, #28]

            float object_rate = object_pid.update(FOLLOW_DISTANCE, object_range, dt);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004aba:	ed97 1a00 	vldr	s2, [r7]
 8004abe:	eef0 0a67 	vmov.f32	s1, s15
 8004ac2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004b30 <_ZN3jlb10Controller20longitudinal_controlEf+0x180>
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f7fe fed2 	bl	8003870 <_ZN3PID6updateEfff>
 8004acc:	ed87 0a08 	vstr	s0, [r7, #32]
            target_speed *= std::pow((1 - object_rate),2);
 8004ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ad4:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004adc:	2002      	movs	r0, #2
 8004ade:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae2:	f7fd faf3 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004ae6:	ec55 4b10 	vmov	r4, r5, d0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fb fd1c 	bl	800052c <__aeabi_f2d>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fd6e 	bl	80005dc <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7fc f838 	bl	8000b7c <__aeabi_d2f>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	61da      	str	r2, [r3, #28]
        }
 8004b12:	bf00      	nop
 8004b14:	3730      	adds	r7, #48	; 0x30
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bdb0      	pop	{r4, r5, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	08023dec 	.word	0x08023dec
 8004b20:	3fc90fdb 	.word	0x3fc90fdb
 8004b24:	3fc90fdb 	.word	0x3fc90fdb
 8004b28:	3e2aaaad 	.word	0x3e2aaaad
 8004b2c:	3f555555 	.word	0x3f555555
 8004b30:	3f19999a 	.word	0x3f19999a

08004b34 <_ZN3jlb10Controller6updateEv>:

        ControlSignal update()
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 8004b3c:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <_ZN3jlb10Controller6updateEv+0x48>)
 8004b3e:	61fb      	str	r3, [r7, #28]
            auto                   control_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                 = std::chrono::duration_cast<std::chrono::milliseconds>(control_timestamp_ - prev_control_timestamp_).count() / 1000.0f;
            prev_control_timestamp_                   = control_timestamp_;
#endif

            lateral_control(dt);
 8004b40:	ed97 0a07 	vldr	s0, [r7, #28]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff fdff 	bl	8004748 <_ZN3jlb10Controller15lateral_controlEf>
            longitudinal_control(dt);
 8004b4a:	ed97 0a07 	vldr	s0, [r7, #28]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f7ff ff2e 	bl	80049b0 <_ZN3jlb10Controller20longitudinal_controlEf>

            return {target_angle, target_speed};
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	ee07 2a10 	vmov	s14, r2
 8004b68:	ee07 3a90 	vmov	s15, r3
        }
 8004b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b70:	eef0 0a67 	vmov.f32	s1, s15
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	3ba3d70a 	.word	0x3ba3d70a

08004b80 <_ZN3jlb10Controller16set_object_rangeEf>:

        void set_object_range(const float object_range_) { object_range = object_range_; }
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	ed87 0a00 	vstr	s0, [r7]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_front[i] = detection_front_[i];
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e00c      	b.n	8004bca <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x2c>
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	7819      	ldrb	r1, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3330      	adds	r3, #48	; 0x30
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b1f      	cmp	r3, #31
 8004bce:	d9ef      	bls.n	8004bb0 <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE+0x12>
            line_positions_front = line_positions_front_;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3370      	adds	r3, #112	; 0x70
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f006 feec 	bl	800b9b4 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8004bdc:	bf00      	nop
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>:

        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_)
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
        {
            for (unsigned long i = 0; i < SENSOR_COUNT; i++) detection_rear[i] = detection_rear_[i];
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e00c      	b.n	8004c10 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x2c>
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	7819      	ldrb	r1, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	3350      	adds	r3, #80	; 0x50
 8004c06:	460a      	mov	r2, r1
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b1f      	cmp	r3, #31
 8004c14:	d9ef      	bls.n	8004bf6 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE+0x12>
            line_positions_rear = line_positions_rear_;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	337c      	adds	r3, #124	; 0x7c
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f006 fec9 	bl	800b9b4 <_ZNSt6vectorIfSaIfEEaSERKS1_>
        }
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <_ZN3jlb10Controller20set_current_velocityEf>:

        void set_current_velocity(const float current_velocity_) { current_velocity = current_velocity_; }
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	ed87 0a00 	vstr	s0, [r7]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <_ZN3jlb10Controller13set_directionENS_9DirectionE>:

        void set_direction(const Direction direction_)
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
        {
            prev_direction = direction;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            direction      = direction_;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        }
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <_ZN3jlb10Controller19set_reference_speedEf>:

        void set_reference_speed(const float reference_speed_) { reference_speed = reference_speed_; }
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	ed87 0a00 	vstr	s0, [r7]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f006 ff91 	bl	800bbc4 <_ZNSaIN3jlb4EdgeEED1Ev>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f006 ff74 	bl	800bba4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>:
      vector() = default;
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b082      	sub	sp, #8
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ffeb 	bl	8004cac <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1Ev>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZN3jlb4NodeC1Ecff>:
        char              name;
        float             x;
        float             y;
        std::vector<Edge> edges;

        Node(char name_, float x_, float y_) : name{name_}, x(x_), y(y_) {}
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	ed87 0a01 	vstr	s0, [r7, #4]
 8004cee:	edc7 0a00 	vstr	s1, [r7]
 8004cf2:	72fb      	strb	r3, [r7, #11]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	7afa      	ldrb	r2, [r7, #11]
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff ffdb 	bl	8004cc6 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1Ev>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <_ZN3jlb4NodeD1Ev>:
        ~Node() {}
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	330c      	adds	r3, #12
 8004d26:	4618      	mov	r0, r3
 8004d28:	f006 ff76 	bl	800bc18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <_ZN3jlb4EdgeD1Ev>:
    struct Edge
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3308      	adds	r3, #8
 8004d42:	4618      	mov	r0, r3
 8004d44:	f006 ffc0 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>:

        void add_edge(char name_, Direction direction_, std::vector<char> prev_nodes_, float weight_ = 0.0f) { edges.push_back(Edge{name_, direction_, prev_nodes_, weight_}); }
 8004d52:	b590      	push	{r4, r7, lr}
 8004d54:	b08d      	sub	sp, #52	; 0x34
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6178      	str	r0, [r7, #20]
 8004d5a:	60fa      	str	r2, [r7, #12]
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	74fb      	strb	r3, [r7, #19]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f103 040c 	add.w	r4, r3, #12
 8004d6c:	7cfb      	ldrb	r3, [r7, #19]
 8004d6e:	763b      	strb	r3, [r7, #24]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	f107 0318 	add.w	r3, r7, #24
 8004d78:	3308      	adds	r3, #8
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f006 ff66 	bl	800bc4e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d86:	f107 0318 	add.w	r3, r7, #24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f006 ffb6 	bl	800bcfe <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>
 8004d92:	f107 0318 	add.w	r3, r7, #24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff ffcd 	bl	8004d36 <_ZN3jlb4EdgeD1Ev>
 8004d9c:	bf00      	nop
 8004d9e:	3734      	adds	r7, #52	; 0x34
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd90      	pop	{r4, r7, pc}

08004da4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f006 ffc7 	bl	800bd40 <_ZNSaIN3jlb4NodeEED1Ev>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>:
      _Vector_base() = default;
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f006 ffaa 	bl	800bd20 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>:
      vector() = default;
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff ffeb 	bl	8004dbc <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EEC1Ev>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <_ZN3jlb5GraphC1Ev>:
    class Graph
    {
    public:
        std::vector<Node> nodes;

        Graph()
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	f6ad 4d6c 	subw	sp, sp, #3180	; 0xc6c
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004dfc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e00:	6018      	str	r0, [r3, #0]
        {
 8004e02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff ffe2 	bl	8004dd6 <_ZNSt6vectorIN3jlb4NodeESaIS1_EEC1Ev>
            nodes.push_back(Node{static_cast<char>('A'), px_to_m(704), px_to_m(448)});
 8004e12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e16:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e1a:	681c      	ldr	r4, [r3, #0]
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	eddf 0af3 	vldr	s1, [pc, #972]	; 80051f0 <_ZN3jlb5GraphC1Ev+0x400>
 8004e24:	ed9f 0af3 	vldr	s0, [pc, #972]	; 80051f4 <_ZN3jlb5GraphC1Ev+0x404>
 8004e28:	2141      	movs	r1, #65	; 0x41
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff ff58 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004e30:	f107 0308 	add.w	r3, r7, #8
 8004e34:	4619      	mov	r1, r3
 8004e36:	4620      	mov	r0, r4
 8004e38:	f006 ffc7 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e3c:	f107 0308 	add.w	r3, r7, #8
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff ff6a 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('B'), px_to_m(704), px_to_m(576)});
 8004e46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e4a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e4e:	681c      	ldr	r4, [r3, #0]
 8004e50:	f107 0320 	add.w	r3, r7, #32
 8004e54:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 8004e58:	ed9f 0ae6 	vldr	s0, [pc, #920]	; 80051f4 <_ZN3jlb5GraphC1Ev+0x404>
 8004e5c:	2142      	movs	r1, #66	; 0x42
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ff3e 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004e64:	f107 0320 	add.w	r3, r7, #32
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f006 ffad 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004e70:	f107 0320 	add.w	r3, r7, #32
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff50 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('C'), px_to_m(640), px_to_m(384)});
 8004e7a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004e7e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004e82:	681c      	ldr	r4, [r3, #0]
 8004e84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e88:	eddf 0adb 	vldr	s1, [pc, #876]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 8004e8c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004e90:	2143      	movs	r1, #67	; 0x43
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff ff24 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f006 ff93 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ff36 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('D'), px_to_m(640), px_to_m(512)});
 8004eae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004eb2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004eb6:	681c      	ldr	r4, [r3, #0]
 8004eb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004ebc:	eddf 0acf 	vldr	s1, [pc, #828]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 8004ec0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004ec4:	2144      	movs	r1, #68	; 0x44
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff ff0a 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004ecc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f006 ff79 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004ed8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ff1c 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('E'), px_to_m(640), px_to_m(640)});
 8004ee2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004ee6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004eea:	681c      	ldr	r4, [r3, #0]
 8004eec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004ef0:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004ef4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8004ef8:	2145      	movs	r1, #69	; 0x45
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fef0 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004f00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f04:	4619      	mov	r1, r3
 8004f06:	4620      	mov	r0, r4
 8004f08:	f006 ff5f 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ff02 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('F'), px_to_m(576), px_to_m(448)});
 8004f16:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f1a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f1e:	681c      	ldr	r4, [r3, #0]
 8004f20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004f24:	eddf 0ab2 	vldr	s1, [pc, #712]	; 80051f0 <_ZN3jlb5GraphC1Ev+0x400>
 8004f28:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 8004f2c:	2146      	movs	r1, #70	; 0x46
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fed6 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004f34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	f006 ff45 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fee8 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('G'), px_to_m(576), px_to_m(576)});
 8004f4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f4e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f52:	681c      	ldr	r4, [r3, #0]
 8004f54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f58:	eddf 0aaa 	vldr	s1, [pc, #680]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 8004f5c:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 8004f60:	2147      	movs	r1, #71	; 0x47
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff febc 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004f68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f006 ff2b 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004f74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fece 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('H'), px_to_m(512), px_to_m(384)});
 8004f7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004f82:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004f86:	681c      	ldr	r4, [r3, #0]
 8004f88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f8c:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 8004f90:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 8004f94:	2148      	movs	r1, #72	; 0x48
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fea2 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004f9c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f006 ff11 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004fa8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff feb4 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('I'), px_to_m(512), px_to_m(512)});
 8004fb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fb6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fba:	681c      	ldr	r4, [r3, #0]
 8004fbc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fc0:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 8004fc4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 8004fc8:	2149      	movs	r1, #73	; 0x49
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fe88 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8004fd0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f006 fef7 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8004fdc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fe9a 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('J'), px_to_m(512), px_to_m(640)});
 8004fe6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8004fea:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8004fee:	681c      	ldr	r4, [r3, #0]
 8004ff0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004ff4:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004ff8:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 8004ffc:	214a      	movs	r1, #74	; 0x4a
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fe6e 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005004:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005008:	4619      	mov	r1, r3
 800500a:	4620      	mov	r0, r4
 800500c:	f006 fedd 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005010:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fe80 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('K'), px_to_m(448), px_to_m(448)});
 800501a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800501e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005022:	681c      	ldr	r4, [r3, #0]
 8005024:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005028:	eddf 0a71 	vldr	s1, [pc, #452]	; 80051f0 <_ZN3jlb5GraphC1Ev+0x400>
 800502c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80051f0 <_ZN3jlb5GraphC1Ev+0x400>
 8005030:	214b      	movs	r1, #75	; 0x4b
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fe54 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005038:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800503c:	4619      	mov	r1, r3
 800503e:	4620      	mov	r0, r4
 8005040:	f006 fec3 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005044:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fe66 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('L'), px_to_m(448), px_to_m(576)});
 800504e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005052:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005056:	681c      	ldr	r4, [r3, #0]
 8005058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800505c:	eddf 0a69 	vldr	s1, [pc, #420]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 8005060:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80051f0 <_ZN3jlb5GraphC1Ev+0x400>
 8005064:	214c      	movs	r1, #76	; 0x4c
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fe3a 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 800506c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005070:	4619      	mov	r1, r3
 8005072:	4620      	mov	r0, r4
 8005074:	f006 fea9 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005078:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fe4c 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('M'), px_to_m(384), px_to_m(384)});
 8005082:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005086:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800508a:	681c      	ldr	r4, [r3, #0]
 800508c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8005090:	eddf 0a59 	vldr	s1, [pc, #356]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 8005094:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 8005098:	214d      	movs	r1, #77	; 0x4d
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fe20 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 80050a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80050a4:	4619      	mov	r1, r3
 80050a6:	4620      	mov	r0, r4
 80050a8:	f006 fe8f 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80050ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fe32 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('N'), px_to_m(384), px_to_m(512)});
 80050b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050be:	681c      	ldr	r4, [r3, #0]
 80050c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050c4:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 80050c8:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 80050cc:	214e      	movs	r1, #78	; 0x4e
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fe06 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 80050d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050d8:	4619      	mov	r1, r3
 80050da:	4620      	mov	r0, r4
 80050dc:	f006 fe75 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80050e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fe18 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('O'), px_to_m(384), px_to_m(640)});
 80050ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80050ee:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80050f2:	681c      	ldr	r4, [r3, #0]
 80050f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80050f8:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80050fc:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 8005100:	214f      	movs	r1, #79	; 0x4f
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fdec 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005108:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800510c:	4619      	mov	r1, r3
 800510e:	4620      	mov	r0, r4
 8005110:	f006 fe5b 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005114:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fdfe 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('P'), px_to_m(320), px_to_m(320)});
 800511e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005122:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005126:	681c      	ldr	r4, [r3, #0]
 8005128:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800512c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8005130:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005134:	2150      	movs	r1, #80	; 0x50
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fdd2 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 800513c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005140:	4619      	mov	r1, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f006 fe41 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005148:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff fde4 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('Q'), px_to_m(320), px_to_m(384)});
 8005152:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005156:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800515a:	681c      	ldr	r4, [r3, #0]
 800515c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005160:	eddf 0a25 	vldr	s1, [pc, #148]	; 80051f8 <_ZN3jlb5GraphC1Ev+0x408>
 8005164:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005168:	2151      	movs	r1, #81	; 0x51
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fdb8 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005170:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005174:	4619      	mov	r1, r3
 8005176:	4620      	mov	r0, r4
 8005178:	f006 fe27 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800517c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fdca 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('R'), px_to_m(320), px_to_m(448)});
 8005186:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800518a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800518e:	681c      	ldr	r4, [r3, #0]
 8005190:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8005194:	eddf 0a16 	vldr	s1, [pc, #88]	; 80051f0 <_ZN3jlb5GraphC1Ev+0x400>
 8005198:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800519c:	2152      	movs	r1, #82	; 0x52
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fd9e 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 80051a4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80051a8:	4619      	mov	r1, r3
 80051aa:	4620      	mov	r0, r4
 80051ac:	f006 fe0d 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80051b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fdb0 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('S'), px_to_m(320), px_to_m(512)});
 80051ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80051be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80051c2:	681c      	ldr	r4, [r3, #0]
 80051c4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80051c8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80051fc <_ZN3jlb5GraphC1Ev+0x40c>
 80051cc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80051d0:	2153      	movs	r1, #83	; 0x53
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fd84 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 80051d8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80051dc:	4619      	mov	r1, r3
 80051de:	4620      	mov	r0, r4
 80051e0:	f006 fdf3 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80051e4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fd96 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
 80051ee:	e011      	b.n	8005214 <_ZN3jlb5GraphC1Ev+0x424>
 80051f0:	40866667 	.word	0x40866667
 80051f4:	40d33334 	.word	0x40d33334
 80051f8:	40666667 	.word	0x40666667
 80051fc:	4099999a 	.word	0x4099999a
 8005200:	40d33334 	.word	0x40d33334
 8005204:	40accccd 	.word	0x40accccd
 8005208:	4019999a 	.word	0x4019999a
 800520c:	40866667 	.word	0x40866667
 8005210:	3f666667 	.word	0x3f666667
            nodes.push_back(Node{static_cast<char>('T'), px_to_m(320), px_to_m(576)});
 8005214:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005218:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800521c:	681c      	ldr	r4, [r3, #0]
 800521e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005222:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 8005226:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800522a:	2154      	movs	r1, #84	; 0x54
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fd57 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005232:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005236:	4619      	mov	r1, r3
 8005238:	4620      	mov	r0, r4
 800523a:	f006 fdc6 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800523e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fd69 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('U'), px_to_m(320), px_to_m(704)});
 8005248:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800524c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005250:	681c      	ldr	r4, [r3, #0]
 8005252:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005256:	ed5f 0a16 	vldr	s1, [pc, #-88]	; 8005200 <_ZN3jlb5GraphC1Ev+0x410>
 800525a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800525e:	2155      	movs	r1, #85	; 0x55
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fd3d 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005266:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800526a:	4619      	mov	r1, r3
 800526c:	4620      	mov	r0, r4
 800526e:	f006 fdac 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 8005272:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fd4f 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('V'), px_to_m(256), px_to_m(448)});
 800527c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005280:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005284:	681c      	ldr	r4, [r3, #0]
 8005286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528a:	ed5f 0a20 	vldr	s1, [pc, #-128]	; 800520c <_ZN3jlb5GraphC1Ev+0x41c>
 800528e:	ed1f 0a22 	vldr	s0, [pc, #-136]	; 8005208 <_ZN3jlb5GraphC1Ev+0x418>
 8005292:	2156      	movs	r1, #86	; 0x56
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fd23 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 800529a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529e:	4619      	mov	r1, r3
 80052a0:	4620      	mov	r0, r4
 80052a2:	f006 fd92 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80052a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fd35 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('W'), px_to_m(256), px_to_m(576)});
 80052b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052b4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052b8:	681c      	ldr	r4, [r3, #0]
 80052ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80052be:	ed5f 0a2f 	vldr	s1, [pc, #-188]	; 8005204 <_ZN3jlb5GraphC1Ev+0x414>
 80052c2:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8005208 <_ZN3jlb5GraphC1Ev+0x418>
 80052c6:	2157      	movs	r1, #87	; 0x57
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fd09 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 80052ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80052d2:	4619      	mov	r1, r3
 80052d4:	4620      	mov	r0, r4
 80052d6:	f006 fd78 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 80052da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fd1b 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
            nodes.push_back(Node{static_cast<char>('X'), px_to_m(96), px_to_m(448)});
 80052e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80052e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80052ec:	681c      	ldr	r4, [r3, #0]
 80052ee:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80052f2:	ed5f 0a3a 	vldr	s1, [pc, #-232]	; 800520c <_ZN3jlb5GraphC1Ev+0x41c>
 80052f6:	ed1f 0a3a 	vldr	s0, [pc, #-232]	; 8005210 <_ZN3jlb5GraphC1Ev+0x420>
 80052fa:	2158      	movs	r1, #88	; 0x58
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fcef 	bl	8004ce0 <_ZN3jlb4NodeC1Ecff>
 8005302:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005306:	4619      	mov	r1, r3
 8005308:	4620      	mov	r0, r4
 800530a:	f006 fd5e 	bl	800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>
 800530e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fd01 	bl	8004d1a <_ZN3jlb4NodeD1Ev>

            const auto UNIT           = SQUARE_LENGTH;
 8005318:	4be9      	ldr	r3, [pc, #932]	; (80056c0 <_ZN3jlb5GraphC1Ev+0x8d0>)
 800531a:	f607 4264 	addw	r2, r7, #3172	; 0xc64
 800531e:	6013      	str	r3, [r2, #0]
            const auto QUARTER_CIRCLE = 2 * UNIT * M_PI / 4.0f;
 8005320:	a3e5      	add	r3, pc, #916	; (adr r3, 80056b8 <_ZN3jlb5GraphC1Ev+0x8c8>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	f607 4158 	addw	r1, r7, #3160	; 0xc58
 800532a:	e9c1 2300 	strd	r2, r3, [r1]

            this->operator[]('A').add_edge('C', Direction::LEFT, {'B', 'D'}, QUARTER_CIRCLE);
 800532e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005332:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005336:	2141      	movs	r1, #65	; 0x41
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f002 ff8c 	bl	8008256 <_ZN3jlb5GraphixEc>
 800533e:	4604      	mov	r4, r0
 8005340:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005344:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 8005348:	4ade      	ldr	r2, [pc, #888]	; (80056c4 <_ZN3jlb5GraphC1Ev+0x8d4>)
 800534a:	8812      	ldrh	r2, [r2, #0]
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005352:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8005356:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005360:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8005364:	2202      	movs	r2, #2
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800536c:	4618      	mov	r0, r3
 800536e:	f01a ffda 	bl	8020326 <_ZNSaIcEC1Ev>
 8005372:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005376:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800537a:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 800537e:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8005382:	ca06      	ldmia	r2, {r1, r2}
 8005384:	f006 fd32 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005388:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800538c:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 80056d0 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005390:	2200      	movs	r2, #0
 8005392:	2143      	movs	r1, #67	; 0x43
 8005394:	4620      	mov	r0, r4
 8005396:	f7ff fcdc 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800539a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800539e:	4618      	mov	r0, r3
 80053a0:	f006 fc92 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80053a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053a8:	4618      	mov	r0, r3
 80053aa:	f01a ffbe 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('B', Direction::STRAIGHT, {'C'}, 2.0f * UNIT);
 80053ae:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053b2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80053b6:	2141      	movs	r1, #65	; 0x41
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	f002 ff4c 	bl	8008256 <_ZN3jlb5GraphixEc>
 80053be:	4604      	mov	r4, r0
 80053c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053c4:	f5a3 631f 	sub.w	r3, r3, #2544	; 0x9f0
 80053c8:	2243      	movs	r2, #67	; 0x43
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053d0:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80053d4:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80053de:	f6a3 13f8 	subw	r3, r3, #2552	; 0x9f8
 80053e2:	2201      	movs	r2, #1
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80053ea:	4618      	mov	r0, r3
 80053ec:	f01a ff9b 	bl	8020326 <_ZNSaIcEC1Ev>
 80053f0:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80053f4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80053f8:	f6a2 12f8 	subw	r2, r2, #2552	; 0x9f8
 80053fc:	f507 7019 	add.w	r0, r7, #612	; 0x264
 8005400:	ca06      	ldmia	r2, {r1, r2}
 8005402:	f006 fcf3 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005406:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800540a:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80056c8 <_ZN3jlb5GraphC1Ev+0x8d8>
 800540e:	2202      	movs	r2, #2
 8005410:	2142      	movs	r1, #66	; 0x42
 8005412:	4620      	mov	r0, r4
 8005414:	f7ff fc9d 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005418:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800541c:	4618      	mov	r0, r3
 800541e:	f006 fc53 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005422:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8005426:	4618      	mov	r0, r3
 8005428:	f01a ff7f 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('A').add_edge('D', Direction::RIGHT, {'C'}, QUARTER_CIRCLE);
 800542c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005430:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005434:	2141      	movs	r1, #65	; 0x41
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	f002 ff0d 	bl	8008256 <_ZN3jlb5GraphixEc>
 800543c:	4604      	mov	r4, r0
 800543e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005442:	f6a3 13d4 	subw	r3, r3, #2516	; 0x9d4
 8005446:	2243      	movs	r2, #67	; 0x43
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800544e:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005452:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800545c:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8005460:	2201      	movs	r2, #1
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005468:	4618      	mov	r0, r3
 800546a:	f01a ff5c 	bl	8020326 <_ZNSaIcEC1Ev>
 800546e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8005472:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005476:	f6a2 12dc 	subw	r2, r2, #2524	; 0x9dc
 800547a:	f507 7020 	add.w	r0, r7, #640	; 0x280
 800547e:	ca06      	ldmia	r2, {r1, r2}
 8005480:	f006 fcb4 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005484:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8005488:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80056d0 <_ZN3jlb5GraphC1Ev+0x8e0>
 800548c:	2201      	movs	r2, #1
 800548e:	2144      	movs	r1, #68	; 0x44
 8005490:	4620      	mov	r0, r4
 8005492:	f7ff fc5e 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005496:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800549a:	4618      	mov	r0, r3
 800549c:	f006 fc14 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80054a0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80054a4:	4618      	mov	r0, r3
 80054a6:	f01a ff40 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('A', Direction::STRAIGHT, {'E'}, 2.0f * UNIT);
 80054aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054ae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80054b2:	2142      	movs	r1, #66	; 0x42
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	f002 fece 	bl	8008256 <_ZN3jlb5GraphixEc>
 80054ba:	4604      	mov	r4, r0
 80054bc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054c0:	f6a3 13b8 	subw	r3, r3, #2488	; 0x9b8
 80054c4:	2245      	movs	r2, #69	; 0x45
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054cc:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 80054d0:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80054da:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 80054de:	2201      	movs	r2, #1
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80054e6:	4618      	mov	r0, r3
 80054e8:	f01a ff1d 	bl	8020326 <_ZNSaIcEC1Ev>
 80054ec:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80054f0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80054f4:	f5a2 621c 	sub.w	r2, r2, #2496	; 0x9c0
 80054f8:	f507 7027 	add.w	r0, r7, #668	; 0x29c
 80054fc:	ca06      	ldmia	r2, {r1, r2}
 80054fe:	f006 fc75 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005502:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005506:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80056c8 <_ZN3jlb5GraphC1Ev+0x8d8>
 800550a:	2202      	movs	r2, #2
 800550c:	2141      	movs	r1, #65	; 0x41
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff fc1f 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005514:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8005518:	4618      	mov	r0, r3
 800551a:	f006 fbd5 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800551e:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8005522:	4618      	mov	r0, r3
 8005524:	f01a ff01 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('E', Direction::RIGHT, {'A', 'D'}, QUARTER_CIRCLE);
 8005528:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800552c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005530:	2142      	movs	r1, #66	; 0x42
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	f002 fe8f 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005538:	4604      	mov	r4, r0
 800553a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800553e:	f6a3 139c 	subw	r3, r3, #2460	; 0x99c
 8005542:	4a62      	ldr	r2, [pc, #392]	; (80056cc <_ZN3jlb5GraphC1Ev+0x8dc>)
 8005544:	8812      	ldrh	r2, [r2, #0]
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800554c:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 8005550:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800555a:	f6a3 13a4 	subw	r3, r3, #2468	; 0x9a4
 800555e:	2202      	movs	r2, #2
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005566:	4618      	mov	r0, r3
 8005568:	f01a fedd 	bl	8020326 <_ZNSaIcEC1Ev>
 800556c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005570:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005574:	f6a2 12a4 	subw	r2, r2, #2468	; 0x9a4
 8005578:	f507 702e 	add.w	r0, r7, #696	; 0x2b8
 800557c:	ca06      	ldmia	r2, {r1, r2}
 800557e:	f006 fc35 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005582:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005586:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80056d0 <_ZN3jlb5GraphC1Ev+0x8e0>
 800558a:	2201      	movs	r2, #1
 800558c:	2145      	movs	r1, #69	; 0x45
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff fbdf 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005594:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005598:	4618      	mov	r0, r3
 800559a:	f006 fb95 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800559e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f01a fec1 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('B').add_edge('D', Direction::LEFT, {'E'}, QUARTER_CIRCLE);
 80055a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80055b0:	2142      	movs	r1, #66	; 0x42
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	f002 fe4f 	bl	8008256 <_ZN3jlb5GraphixEc>
 80055b8:	4604      	mov	r4, r0
 80055ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055be:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 80055c2:	2245      	movs	r2, #69	; 0x45
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055ca:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 80055ce:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80055d8:	f6a3 1388 	subw	r3, r3, #2440	; 0x988
 80055dc:	2201      	movs	r2, #1
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80055e4:	4618      	mov	r0, r3
 80055e6:	f01a fe9e 	bl	8020326 <_ZNSaIcEC1Ev>
 80055ea:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 80055ee:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80055f2:	f6a2 1288 	subw	r2, r2, #2440	; 0x988
 80055f6:	f507 7035 	add.w	r0, r7, #724	; 0x2d4
 80055fa:	ca06      	ldmia	r2, {r1, r2}
 80055fc:	f006 fbf6 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005600:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005604:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80056d0 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005608:	2200      	movs	r2, #0
 800560a:	2144      	movs	r1, #68	; 0x44
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff fba0 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005612:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8005616:	4618      	mov	r0, r3
 8005618:	f006 fb56 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800561c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8005620:	4618      	mov	r0, r3
 8005622:	f01a fe82 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('A', Direction::RIGHT, {'F'}, QUARTER_CIRCLE);
 8005626:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800562a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800562e:	2143      	movs	r1, #67	; 0x43
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	f002 fe10 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005636:	4604      	mov	r4, r0
 8005638:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800563c:	f6a3 1364 	subw	r3, r3, #2404	; 0x964
 8005640:	2246      	movs	r2, #70	; 0x46
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005648:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 800564c:	f507 7241 	add.w	r2, r7, #772	; 0x304
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005656:	f6a3 136c 	subw	r3, r3, #2412	; 0x96c
 800565a:	2201      	movs	r2, #1
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8005662:	4618      	mov	r0, r3
 8005664:	f01a fe5f 	bl	8020326 <_ZNSaIcEC1Ev>
 8005668:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800566c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005670:	f6a2 126c 	subw	r2, r2, #2412	; 0x96c
 8005674:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 8005678:	ca06      	ldmia	r2, {r1, r2}
 800567a:	f006 fbb7 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800567e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005682:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80056d0 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005686:	2201      	movs	r2, #1
 8005688:	2141      	movs	r1, #65	; 0x41
 800568a:	4620      	mov	r0, r4
 800568c:	f7ff fb61 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005690:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005694:	4618      	mov	r0, r3
 8005696:	f006 fb17 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800569a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800569e:	4618      	mov	r0, r3
 80056a0:	f01a fe43 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('C').add_edge('F', Direction::LEFT, {'A'}, QUARTER_CIRCLE);
 80056a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056a8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80056ac:	2143      	movs	r1, #67	; 0x43
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	f002 fdd1 	bl	8008256 <_ZN3jlb5GraphixEc>
 80056b4:	e00e      	b.n	80056d4 <_ZN3jlb5GraphC1Ev+0x8e4>
 80056b6:	bf00      	nop
 80056b8:	460698c7 	.word	0x460698c7
 80056bc:	3fee28c7 	.word	0x3fee28c7
 80056c0:	3f19999a 	.word	0x3f19999a
 80056c4:	08023c80 	.word	0x08023c80
 80056c8:	3f99999a 	.word	0x3f99999a
 80056cc:	08023c84 	.word	0x08023c84
 80056d0:	3f71463a 	.word	0x3f71463a
 80056d4:	4604      	mov	r4, r0
 80056d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056da:	f6a3 1348 	subw	r3, r3, #2376	; 0x948
 80056de:	2241      	movs	r2, #65	; 0x41
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056e6:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 80056ea:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80056f4:	f5a3 6315 	sub.w	r3, r3, #2384	; 0x950
 80056f8:	2201      	movs	r2, #1
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8005700:	4618      	mov	r0, r3
 8005702:	f01a fe10 	bl	8020326 <_ZNSaIcEC1Ev>
 8005706:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800570a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800570e:	f5a2 6215 	sub.w	r2, r2, #2384	; 0x950
 8005712:	f507 7043 	add.w	r0, r7, #780	; 0x30c
 8005716:	ca06      	ldmia	r2, {r1, r2}
 8005718:	f006 fb68 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800571c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005720:	ed1f 0a15 	vldr	s0, [pc, #-84]	; 80056d0 <_ZN3jlb5GraphC1Ev+0x8e0>
 8005724:	2200      	movs	r2, #0
 8005726:	2146      	movs	r1, #70	; 0x46
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff fb12 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800572e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8005732:	4618      	mov	r0, r3
 8005734:	f006 fac8 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005738:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800573c:	4618      	mov	r0, r3
 800573e:	f01a fdf4 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('A', Direction::LEFT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 8005742:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005746:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800574a:	2144      	movs	r1, #68	; 0x44
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	f002 fd82 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005752:	4604      	mov	r4, r0
 8005754:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005758:	f6a3 132c 	subw	r3, r3, #2348	; 0x92c
 800575c:	4ae5      	ldr	r2, [pc, #916]	; (8005af4 <_ZN3jlb5GraphC1Ev+0xd04>)
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	4611      	mov	r1, r2
 8005762:	8019      	strh	r1, [r3, #0]
 8005764:	3302      	adds	r3, #2
 8005766:	0c12      	lsrs	r2, r2, #16
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800576e:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005772:	f507 724f 	add.w	r2, r7, #828	; 0x33c
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800577c:	f6a3 1334 	subw	r3, r3, #2356	; 0x934
 8005780:	2203      	movs	r2, #3
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005788:	4618      	mov	r0, r3
 800578a:	f01a fdcc 	bl	8020326 <_ZNSaIcEC1Ev>
 800578e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8005792:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005796:	f6a2 1234 	subw	r2, r2, #2356	; 0x934
 800579a:	f507 704a 	add.w	r0, r7, #808	; 0x328
 800579e:	ca06      	ldmia	r2, {r1, r2}
 80057a0:	f006 fb24 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80057a4:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80057a8:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8005b04 <_ZN3jlb5GraphC1Ev+0xd14>
 80057ac:	2200      	movs	r2, #0
 80057ae:	2141      	movs	r1, #65	; 0x41
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff face 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80057b6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80057ba:	4618      	mov	r0, r3
 80057bc:	f006 fa84 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80057c0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80057c4:	4618      	mov	r0, r3
 80057c6:	f01a fdb0 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('B', Direction::RIGHT, {'F', 'G', 'I'}, QUARTER_CIRCLE);
 80057ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80057d2:	2144      	movs	r1, #68	; 0x44
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	f002 fd3e 	bl	8008256 <_ZN3jlb5GraphixEc>
 80057da:	4604      	mov	r4, r0
 80057dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057e0:	f5a3 6311 	sub.w	r3, r3, #2320	; 0x910
 80057e4:	4ac3      	ldr	r2, [pc, #780]	; (8005af4 <_ZN3jlb5GraphC1Ev+0xd04>)
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	4611      	mov	r1, r2
 80057ea:	8019      	strh	r1, [r3, #0]
 80057ec:	3302      	adds	r3, #2
 80057ee:	0c12      	lsrs	r2, r2, #16
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80057f6:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 80057fa:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005804:	f6a3 1318 	subw	r3, r3, #2328	; 0x918
 8005808:	2203      	movs	r2, #3
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8005810:	4618      	mov	r0, r3
 8005812:	f01a fd88 	bl	8020326 <_ZNSaIcEC1Ev>
 8005816:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800581a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800581e:	f6a2 1218 	subw	r2, r2, #2328	; 0x918
 8005822:	f507 7051 	add.w	r0, r7, #836	; 0x344
 8005826:	ca06      	ldmia	r2, {r1, r2}
 8005828:	f006 fae0 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800582c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8005830:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8005b04 <_ZN3jlb5GraphC1Ev+0xd14>
 8005834:	2201      	movs	r2, #1
 8005836:	2142      	movs	r1, #66	; 0x42
 8005838:	4620      	mov	r0, r4
 800583a:	f7ff fa8a 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800583e:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8005842:	4618      	mov	r0, r3
 8005844:	f006 fa40 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005848:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 800584c:	4618      	mov	r0, r3
 800584e:	f01a fd6c 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('G', Direction::LEFT, {'A', 'B'}, QUARTER_CIRCLE);
 8005852:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005856:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800585a:	2144      	movs	r1, #68	; 0x44
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	f002 fcfa 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005862:	4604      	mov	r4, r0
 8005864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005868:	f6a3 03f4 	subw	r3, r3, #2292	; 0x8f4
 800586c:	4aa2      	ldr	r2, [pc, #648]	; (8005af8 <_ZN3jlb5GraphC1Ev+0xd08>)
 800586e:	8812      	ldrh	r2, [r2, #0]
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005876:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 800587a:	f507 725d 	add.w	r2, r7, #884	; 0x374
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005884:	f6a3 03fc 	subw	r3, r3, #2300	; 0x8fc
 8005888:	2202      	movs	r2, #2
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8005890:	4618      	mov	r0, r3
 8005892:	f01a fd48 	bl	8020326 <_ZNSaIcEC1Ev>
 8005896:	f507 735e 	add.w	r3, r7, #888	; 0x378
 800589a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800589e:	f6a2 02fc 	subw	r2, r2, #2300	; 0x8fc
 80058a2:	f507 7058 	add.w	r0, r7, #864	; 0x360
 80058a6:	ca06      	ldmia	r2, {r1, r2}
 80058a8:	f006 faa0 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80058ac:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80058b0:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005b04 <_ZN3jlb5GraphC1Ev+0xd14>
 80058b4:	2200      	movs	r2, #0
 80058b6:	2147      	movs	r1, #71	; 0x47
 80058b8:	4620      	mov	r0, r4
 80058ba:	f7ff fa4a 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80058be:	f507 7358 	add.w	r3, r7, #864	; 0x360
 80058c2:	4618      	mov	r0, r3
 80058c4:	f006 fa00 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80058c8:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80058cc:	4618      	mov	r0, r3
 80058ce:	f01a fd2c 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('I', Direction::STRAIGHT, {'A', 'B'}, 2.0f * UNIT);
 80058d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80058da:	2144      	movs	r1, #68	; 0x44
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	f002 fcba 	bl	8008256 <_ZN3jlb5GraphixEc>
 80058e2:	4604      	mov	r4, r0
 80058e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058e8:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 80058ec:	4a82      	ldr	r2, [pc, #520]	; (8005af8 <_ZN3jlb5GraphC1Ev+0xd08>)
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80058f6:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 80058fa:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005904:	f5a3 630e 	sub.w	r3, r3, #2272	; 0x8e0
 8005908:	2202      	movs	r2, #2
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	f507 7365 	add.w	r3, r7, #916	; 0x394
 8005910:	4618      	mov	r0, r3
 8005912:	f01a fd08 	bl	8020326 <_ZNSaIcEC1Ev>
 8005916:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800591a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800591e:	f5a2 620e 	sub.w	r2, r2, #2272	; 0x8e0
 8005922:	f507 705f 	add.w	r0, r7, #892	; 0x37c
 8005926:	ca06      	ldmia	r2, {r1, r2}
 8005928:	f006 fa60 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800592c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8005930:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005afc <_ZN3jlb5GraphC1Ev+0xd0c>
 8005934:	2202      	movs	r2, #2
 8005936:	2149      	movs	r1, #73	; 0x49
 8005938:	4620      	mov	r0, r4
 800593a:	f7ff fa0a 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800593e:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8005942:	4618      	mov	r0, r3
 8005944:	f006 f9c0 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005948:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800594c:	4618      	mov	r0, r3
 800594e:	f01a fcec 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('D').add_edge('F', Direction::RIGHT, {'A', 'B'}, QUARTER_CIRCLE);
 8005952:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005956:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800595a:	2144      	movs	r1, #68	; 0x44
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f002 fc7a 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005962:	4604      	mov	r4, r0
 8005964:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005968:	f6a3 03bc 	subw	r3, r3, #2236	; 0x8bc
 800596c:	4a62      	ldr	r2, [pc, #392]	; (8005af8 <_ZN3jlb5GraphC1Ev+0xd08>)
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005976:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 800597a:	f507 726b 	add.w	r2, r7, #940	; 0x3ac
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005984:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8005988:	2202      	movs	r2, #2
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005990:	4618      	mov	r0, r3
 8005992:	f01a fcc8 	bl	8020326 <_ZNSaIcEC1Ev>
 8005996:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800599a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800599e:	f6a2 02c4 	subw	r2, r2, #2244	; 0x8c4
 80059a2:	f507 7066 	add.w	r0, r7, #920	; 0x398
 80059a6:	ca06      	ldmia	r2, {r1, r2}
 80059a8:	f006 fa20 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80059ac:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80059b0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8005b04 <_ZN3jlb5GraphC1Ev+0xd14>
 80059b4:	2201      	movs	r2, #1
 80059b6:	2146      	movs	r1, #70	; 0x46
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7ff f9ca 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80059be:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80059c2:	4618      	mov	r0, r3
 80059c4:	f006 f980 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80059c8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f01a fcac 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('B', Direction::LEFT, {'G', 'J'}, QUARTER_CIRCLE);
 80059d2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059d6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80059da:	2145      	movs	r1, #69	; 0x45
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	f002 fc3a 	bl	8008256 <_ZN3jlb5GraphixEc>
 80059e2:	4604      	mov	r4, r0
 80059e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059e8:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80059ec:	4a44      	ldr	r2, [pc, #272]	; (8005b00 <_ZN3jlb5GraphC1Ev+0xd10>)
 80059ee:	8812      	ldrh	r2, [r2, #0]
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80059f6:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80059fa:	f507 7272 	add.w	r2, r7, #968	; 0x3c8
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a04:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8005a08:	2202      	movs	r2, #2
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005a10:	4618      	mov	r0, r3
 8005a12:	f01a fc88 	bl	8020326 <_ZNSaIcEC1Ev>
 8005a16:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005a1a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a1e:	f6a2 02a8 	subw	r2, r2, #2216	; 0x8a8
 8005a22:	f507 706d 	add.w	r0, r7, #948	; 0x3b4
 8005a26:	ca06      	ldmia	r2, {r1, r2}
 8005a28:	f006 f9e0 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005a2c:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8005a30:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8005b04 <_ZN3jlb5GraphC1Ev+0xd14>
 8005a34:	2200      	movs	r2, #0
 8005a36:	2142      	movs	r1, #66	; 0x42
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff f98a 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005a3e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f006 f940 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005a48:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f01a fc6c 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('J', Direction::STRAIGHT, {'B'}, 2.0f * UNIT);
 8005a52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a56:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005a5a:	2145      	movs	r1, #69	; 0x45
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	f002 fbfa 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005a62:	4604      	mov	r4, r0
 8005a64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a68:	f6a3 0384 	subw	r3, r3, #2180	; 0x884
 8005a6c:	2242      	movs	r2, #66	; 0x42
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a74:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8005a78:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005a82:	f6a3 038c 	subw	r3, r3, #2188	; 0x88c
 8005a86:	2201      	movs	r2, #1
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f01a fc49 	bl	8020326 <_ZNSaIcEC1Ev>
 8005a94:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005a98:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005a9c:	f6a2 028c 	subw	r2, r2, #2188	; 0x88c
 8005aa0:	f507 7074 	add.w	r0, r7, #976	; 0x3d0
 8005aa4:	ca06      	ldmia	r2, {r1, r2}
 8005aa6:	f006 f9a1 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005aaa:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005aae:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005afc <_ZN3jlb5GraphC1Ev+0xd0c>
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	214a      	movs	r1, #74	; 0x4a
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f7ff f94b 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005abc:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f006 f901 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ac6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8005aca:	4618      	mov	r0, r3
 8005acc:	f01a fc2d 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('E').add_edge('G', Direction::RIGHT, {'B'}, QUARTER_CIRCLE);
 8005ad0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ad4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005ad8:	2145      	movs	r1, #69	; 0x45
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	f002 fbbb 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ae6:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8005aea:	2242      	movs	r2, #66	; 0x42
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005af2:	e009      	b.n	8005b08 <_ZN3jlb5GraphC1Ev+0xd18>
 8005af4:	08023c88 	.word	0x08023c88
 8005af8:	08023c8c 	.word	0x08023c8c
 8005afc:	3f99999a 	.word	0x3f99999a
 8005b00:	08023c90 	.word	0x08023c90
 8005b04:	3f71463a 	.word	0x3f71463a
 8005b08:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8005b0c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b16:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005b22:	4618      	mov	r0, r3
 8005b24:	f01a fbff 	bl	8020326 <_ZNSaIcEC1Ev>
 8005b28:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005b2c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005b30:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 8005b34:	f507 707b 	add.w	r0, r7, #1004	; 0x3ec
 8005b38:	ca06      	ldmia	r2, {r1, r2}
 8005b3a:	f006 f957 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005b3e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8005b42:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 8005b04 <_ZN3jlb5GraphC1Ev+0xd14>
 8005b46:	2201      	movs	r2, #1
 8005b48:	2147      	movs	r1, #71	; 0x47
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f7ff f901 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005b50:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8005b54:	4618      	mov	r0, r3
 8005b56:	f006 f8b7 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005b5a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f01a fbe3 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('C', Direction::RIGHT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005b64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b68:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005b6c:	2146      	movs	r1, #70	; 0x46
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	f002 fb71 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005b74:	4604      	mov	r4, r0
 8005b76:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b7a:	f6a3 034c 	subw	r3, r3, #2124	; 0x84c
 8005b7e:	4ae4      	ldr	r2, [pc, #912]	; (8005f10 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	4611      	mov	r1, r2
 8005b84:	8019      	strh	r1, [r3, #0]
 8005b86:	3302      	adds	r3, #2
 8005b88:	0c12      	lsrs	r2, r2, #16
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b90:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8005b94:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005b9e:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005baa:	4618      	mov	r0, r3
 8005bac:	f01a fbbb 	bl	8020326 <_ZNSaIcEC1Ev>
 8005bb0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005bb4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005bb8:	f6a2 0254 	subw	r2, r2, #2132	; 0x854
 8005bbc:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8005bc0:	ca06      	ldmia	r2, {r1, r2}
 8005bc2:	f006 f913 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005bc6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8005bca:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8005f14 <_ZN3jlb5GraphC1Ev+0x1124>
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2143      	movs	r1, #67	; 0x43
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff f8bd 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005bd8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f006 f873 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005be2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005be6:	4618      	mov	r0, r3
 8005be8:	f01a fb9f 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('D', Direction::LEFT, {'C', 'H'}, QUARTER_CIRCLE);
 8005bec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005bf0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005bf4:	2146      	movs	r1, #70	; 0x46
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	f002 fb2d 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c02:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8005c06:	4ac4      	ldr	r2, [pc, #784]	; (8005f18 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005c08:	8812      	ldrh	r2, [r2, #0]
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c10:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8005c14:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c1e:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8005c22:	2202      	movs	r2, #2
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f01a fb7b 	bl	8020326 <_ZNSaIcEC1Ev>
 8005c30:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005c34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005c38:	f6a2 0238 	subw	r2, r2, #2104	; 0x838
 8005c3c:	f207 4024 	addw	r0, r7, #1060	; 0x424
 8005c40:	ca06      	ldmia	r2, {r1, r2}
 8005c42:	f006 f8d3 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005c46:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005c4a:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8005f14 <_ZN3jlb5GraphC1Ev+0x1124>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2144      	movs	r1, #68	; 0x44
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7ff f87d 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005c58:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f006 f833 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005c62:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8005c66:	4618      	mov	r0, r3
 8005c68:	f01a fb5f 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('G', Direction::STRAIGHT, {'C', 'H'}, 2.0f * UNIT);
 8005c6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005c74:	2146      	movs	r1, #70	; 0x46
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	f002 faed 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c82:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8005c86:	4aa4      	ldr	r2, [pc, #656]	; (8005f18 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005c88:	8812      	ldrh	r2, [r2, #0]
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c90:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8005c94:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005c9e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005caa:	4618      	mov	r0, r3
 8005cac:	f01a fb3b 	bl	8020326 <_ZNSaIcEC1Ev>
 8005cb0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005cb4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005cb8:	f6a2 021c 	subw	r2, r2, #2076	; 0x81c
 8005cbc:	f507 6088 	add.w	r0, r7, #1088	; 0x440
 8005cc0:	ca06      	ldmia	r2, {r1, r2}
 8005cc2:	f006 f893 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005cc6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005cca:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005f1c <_ZN3jlb5GraphC1Ev+0x112c>
 8005cce:	2202      	movs	r2, #2
 8005cd0:	2147      	movs	r1, #71	; 0x47
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7ff f83d 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005cd8:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f005 fff3 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005ce2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f01a fb1f 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('I', Direction::RIGHT, {'C', 'H'}, QUARTER_CIRCLE);
 8005cec:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005cf0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005cf4:	2146      	movs	r1, #70	; 0x46
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	f002 faad 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d02:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8005d06:	4a84      	ldr	r2, [pc, #528]	; (8005f18 <_ZN3jlb5GraphC1Ev+0x1128>)
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d10:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005d14:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d1e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005d22:	2202      	movs	r2, #2
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f01a fafb 	bl	8020326 <_ZNSaIcEC1Ev>
 8005d30:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005d34:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005d38:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005d3c:	f207 405c 	addw	r0, r7, #1116	; 0x45c
 8005d40:	ca06      	ldmia	r2, {r1, r2}
 8005d42:	f006 f853 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005d46:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005d4a:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8005f14 <_ZN3jlb5GraphC1Ev+0x1124>
 8005d4e:	2201      	movs	r2, #1
 8005d50:	2149      	movs	r1, #73	; 0x49
 8005d52:	4620      	mov	r0, r4
 8005d54:	f7fe fffd 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005d58:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f005 ffb3 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005d62:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005d66:	4618      	mov	r0, r3
 8005d68:	f01a fadf 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('F').add_edge('H', Direction::LEFT, {'D', 'G', 'I'}, QUARTER_CIRCLE);
 8005d6c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d70:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005d74:	2146      	movs	r1, #70	; 0x46
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	f002 fa6d 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d82:	f2a3 73dc 	subw	r3, r3, #2012	; 0x7dc
 8005d86:	4a62      	ldr	r2, [pc, #392]	; (8005f10 <_ZN3jlb5GraphC1Ev+0x1120>)
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	8019      	strh	r1, [r3, #0]
 8005d8e:	3302      	adds	r3, #2
 8005d90:	0c12      	lsrs	r2, r2, #16
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005d98:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005d9c:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005da6:	f2a3 73e4 	subw	r3, r3, #2020	; 0x7e4
 8005daa:	2203      	movs	r2, #3
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005db2:	4618      	mov	r0, r3
 8005db4:	f01a fab7 	bl	8020326 <_ZNSaIcEC1Ev>
 8005db8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005dbc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005dc0:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 8005dc4:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8005dc8:	ca06      	ldmia	r2, {r1, r2}
 8005dca:	f006 f80f 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005dce:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005dd2:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005f14 <_ZN3jlb5GraphC1Ev+0x1124>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2148      	movs	r1, #72	; 0x48
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7fe ffb9 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005de0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005de4:	4618      	mov	r0, r3
 8005de6:	f005 ff6f 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005dea:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005dee:	4618      	mov	r0, r3
 8005df0:	f01a fa9b 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('F', Direction::STRAIGHT, {'E', 'J'}, 2.0f * UNIT);
 8005df4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005df8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005dfc:	2147      	movs	r1, #71	; 0x47
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	f002 fa29 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005e04:	4604      	mov	r4, r0
 8005e06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e0a:	f5a3 63f8 	sub.w	r3, r3, #1984	; 0x7c0
 8005e0e:	4a44      	ldr	r2, [pc, #272]	; (8005f20 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e18:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005e1c:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e26:	f5a3 63f9 	sub.w	r3, r3, #1992	; 0x7c8
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005e32:	4618      	mov	r0, r3
 8005e34:	f01a fa77 	bl	8020326 <_ZNSaIcEC1Ev>
 8005e38:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005e3c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005e40:	f5a2 62f9 	sub.w	r2, r2, #1992	; 0x7c8
 8005e44:	f207 4094 	addw	r0, r7, #1172	; 0x494
 8005e48:	ca06      	ldmia	r2, {r1, r2}
 8005e4a:	f005 ffcf 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005e4e:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8005e52:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8005f1c <_ZN3jlb5GraphC1Ev+0x112c>
 8005e56:	2202      	movs	r2, #2
 8005e58:	2146      	movs	r1, #70	; 0x46
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f7fe ff79 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005e60:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8005e64:	4618      	mov	r0, r3
 8005e66:	f005 ff2f 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005e6a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f01a fa5b 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('D', Direction::RIGHT, {'E', 'J'}, QUARTER_CIRCLE);
 8005e74:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e78:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005e7c:	2147      	movs	r1, #71	; 0x47
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	f002 f9e9 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005e84:	4604      	mov	r4, r0
 8005e86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e8a:	f2a3 73a4 	subw	r3, r3, #1956	; 0x7a4
 8005e8e:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <_ZN3jlb5GraphC1Ev+0x1130>)
 8005e90:	8812      	ldrh	r2, [r2, #0]
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005e98:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005e9c:	f207 42c4 	addw	r2, r7, #1220	; 0x4c4
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ea6:	f2a3 73ac 	subw	r3, r3, #1964	; 0x7ac
 8005eaa:	2202      	movs	r2, #2
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f01a fa37 	bl	8020326 <_ZNSaIcEC1Ev>
 8005eb8:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005ebc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005ec0:	f2a2 72ac 	subw	r2, r2, #1964	; 0x7ac
 8005ec4:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8005ec8:	ca06      	ldmia	r2, {r1, r2}
 8005eca:	f005 ff8f 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ece:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005ed2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005f14 <_ZN3jlb5GraphC1Ev+0x1124>
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	2144      	movs	r1, #68	; 0x44
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7fe ff39 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005ee0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f005 feef 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005eea:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f01a fa1b 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('E', Direction::LEFT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8005ef4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005ef8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005efc:	2147      	movs	r1, #71	; 0x47
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	f002 f9a9 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005f04:	4604      	mov	r4, r0
 8005f06:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f0a:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8005f0e:	e009      	b.n	8005f24 <_ZN3jlb5GraphC1Ev+0x1134>
 8005f10:	08023c94 	.word	0x08023c94
 8005f14:	3f71463a 	.word	0x3f71463a
 8005f18:	08023c98 	.word	0x08023c98
 8005f1c:	3f99999a 	.word	0x3f99999a
 8005f20:	08023c9c 	.word	0x08023c9c
 8005f24:	4ae6      	ldr	r2, [pc, #920]	; (80062c0 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	4611      	mov	r1, r2
 8005f2a:	8019      	strh	r1, [r3, #0]
 8005f2c:	3302      	adds	r3, #2
 8005f2e:	0c12      	lsrs	r2, r2, #16
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f36:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005f3a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f44:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8005f48:	2203      	movs	r2, #3
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f01a f9e8 	bl	8020326 <_ZNSaIcEC1Ev>
 8005f56:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005f5a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005f5e:	f5a2 62f2 	sub.w	r2, r2, #1936	; 0x790
 8005f62:	f207 40cc 	addw	r0, r7, #1228	; 0x4cc
 8005f66:	ca06      	ldmia	r2, {r1, r2}
 8005f68:	f005 ff40 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005f6c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005f70:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 80062c4 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005f74:	2200      	movs	r2, #0
 8005f76:	2145      	movs	r1, #69	; 0x45
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7fe feea 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8005f7e:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8005f82:	4618      	mov	r0, r3
 8005f84:	f005 fea0 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8005f88:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f01a f9cc 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('J', Direction::RIGHT, {'D', 'F', 'I'}, QUARTER_CIRCLE);
 8005f92:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005f96:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8005f9a:	2147      	movs	r1, #71	; 0x47
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f002 f95a 	bl	8008256 <_ZN3jlb5GraphixEc>
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fa8:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8005fac:	4ac4      	ldr	r2, [pc, #784]	; (80062c0 <_ZN3jlb5GraphC1Ev+0x14d0>)
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	8019      	strh	r1, [r3, #0]
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	0c12      	lsrs	r2, r2, #16
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fbe:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005fc2:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8005fcc:	f2a3 7374 	subw	r3, r3, #1908	; 0x774
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	605a      	str	r2, [r3, #4]
 8005fd4:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f01a f9a4 	bl	8020326 <_ZNSaIcEC1Ev>
 8005fde:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005fe2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8005fe6:	f2a2 7274 	subw	r2, r2, #1908	; 0x774
 8005fea:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 8005fee:	ca06      	ldmia	r2, {r1, r2}
 8005ff0:	f005 fefc 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8005ff4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8005ff8:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 80062c4 <_ZN3jlb5GraphC1Ev+0x14d4>
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	214a      	movs	r1, #74	; 0x4a
 8006000:	4620      	mov	r0, r4
 8006002:	f7fe fea6 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006006:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800600a:	4618      	mov	r0, r3
 800600c:	f005 fe5c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006010:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8006014:	4618      	mov	r0, r3
 8006016:	f01a f988 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('G').add_edge('I', Direction::LEFT, {'E', 'J'}, QUARTER_CIRCLE);
 800601a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800601e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006022:	2147      	movs	r1, #71	; 0x47
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	f002 f916 	bl	8008256 <_ZN3jlb5GraphixEc>
 800602a:	4604      	mov	r4, r0
 800602c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006030:	f5a3 63ea 	sub.w	r3, r3, #1872	; 0x750
 8006034:	4aa4      	ldr	r2, [pc, #656]	; (80062c8 <_ZN3jlb5GraphC1Ev+0x14d8>)
 8006036:	8812      	ldrh	r2, [r2, #0]
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800603e:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006042:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800604c:	f5a3 63eb 	sub.w	r3, r3, #1880	; 0x758
 8006050:	2202      	movs	r2, #2
 8006052:	605a      	str	r2, [r3, #4]
 8006054:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006058:	4618      	mov	r0, r3
 800605a:	f01a f964 	bl	8020326 <_ZNSaIcEC1Ev>
 800605e:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006062:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006066:	f5a2 62eb 	sub.w	r2, r2, #1880	; 0x758
 800606a:	f207 5004 	addw	r0, r7, #1284	; 0x504
 800606e:	ca06      	ldmia	r2, {r1, r2}
 8006070:	f005 febc 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006074:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8006078:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80062c4 <_ZN3jlb5GraphC1Ev+0x14d4>
 800607c:	2200      	movs	r2, #0
 800607e:	2149      	movs	r1, #73	; 0x49
 8006080:	4620      	mov	r0, r4
 8006082:	f7fe fe66 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006086:	f207 5304 	addw	r3, r7, #1284	; 0x504
 800608a:	4618      	mov	r0, r3
 800608c:	f005 fe1c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006090:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 8006094:	4618      	mov	r0, r3
 8006096:	f01a f948 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('F', Direction::RIGHT, {'K', 'M'}, QUARTER_CIRCLE);
 800609a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800609e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80060a2:	2148      	movs	r1, #72	; 0x48
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f002 f8d6 	bl	8008256 <_ZN3jlb5GraphixEc>
 80060aa:	4604      	mov	r4, r0
 80060ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060b0:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 80060b4:	4a85      	ldr	r2, [pc, #532]	; (80062cc <_ZN3jlb5GraphC1Ev+0x14dc>)
 80060b6:	8812      	ldrh	r2, [r2, #0]
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060be:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80060c2:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80060cc:	f2a3 733c 	subw	r3, r3, #1852	; 0x73c
 80060d0:	2202      	movs	r2, #2
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80060d8:	4618      	mov	r0, r3
 80060da:	f01a f924 	bl	8020326 <_ZNSaIcEC1Ev>
 80060de:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80060e2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80060e6:	f2a2 723c 	subw	r2, r2, #1852	; 0x73c
 80060ea:	f507 60a4 	add.w	r0, r7, #1312	; 0x520
 80060ee:	ca06      	ldmia	r2, {r1, r2}
 80060f0:	f005 fe7c 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80060f4:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80060f8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80062c4 <_ZN3jlb5GraphC1Ev+0x14d4>
 80060fc:	2201      	movs	r2, #1
 80060fe:	2146      	movs	r1, #70	; 0x46
 8006100:	4620      	mov	r0, r4
 8006102:	f7fe fe26 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006106:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800610a:	4618      	mov	r0, r3
 800610c:	f005 fddc 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006110:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8006114:	4618      	mov	r0, r3
 8006116:	f01a f908 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('K', Direction::LEFT, {'F'}, QUARTER_CIRCLE);
 800611a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800611e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006122:	2148      	movs	r1, #72	; 0x48
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f002 f896 	bl	8008256 <_ZN3jlb5GraphixEc>
 800612a:	4604      	mov	r4, r0
 800612c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006130:	f5a3 63e3 	sub.w	r3, r3, #1816	; 0x718
 8006134:	2246      	movs	r2, #70	; 0x46
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800613c:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 8006140:	f507 62aa 	add.w	r2, r7, #1360	; 0x550
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800614a:	f5a3 63e4 	sub.w	r3, r3, #1824	; 0x720
 800614e:	2201      	movs	r2, #1
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006156:	4618      	mov	r0, r3
 8006158:	f01a f8e5 	bl	8020326 <_ZNSaIcEC1Ev>
 800615c:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006160:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006164:	f5a2 62e4 	sub.w	r2, r2, #1824	; 0x720
 8006168:	f207 503c 	addw	r0, r7, #1340	; 0x53c
 800616c:	ca06      	ldmia	r2, {r1, r2}
 800616e:	f005 fe3d 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006172:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8006176:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80062c4 <_ZN3jlb5GraphC1Ev+0x14d4>
 800617a:	2200      	movs	r2, #0
 800617c:	214b      	movs	r1, #75	; 0x4b
 800617e:	4620      	mov	r0, r4
 8006180:	f7fe fde7 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006184:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8006188:	4618      	mov	r0, r3
 800618a:	f005 fd9d 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800618e:	f207 5354 	addw	r3, r7, #1364	; 0x554
 8006192:	4618      	mov	r0, r3
 8006194:	f01a f8c9 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('H').add_edge('M', Direction::STRAIGHT, {'F'}, 2.0f * UNIT);
 8006198:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800619c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80061a0:	2148      	movs	r1, #72	; 0x48
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	f002 f857 	bl	8008256 <_ZN3jlb5GraphixEc>
 80061a8:	4604      	mov	r4, r0
 80061aa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061ae:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 80061b2:	2246      	movs	r2, #70	; 0x46
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061ba:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80061be:	f207 526c 	addw	r2, r7, #1388	; 0x56c
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80061c8:	f2a3 7304 	subw	r3, r3, #1796	; 0x704
 80061cc:	2201      	movs	r2, #1
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80061d4:	4618      	mov	r0, r3
 80061d6:	f01a f8a6 	bl	8020326 <_ZNSaIcEC1Ev>
 80061da:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80061de:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80061e2:	f2a2 7204 	subw	r2, r2, #1796	; 0x704
 80061e6:	f507 60ab 	add.w	r0, r7, #1368	; 0x558
 80061ea:	ca06      	ldmia	r2, {r1, r2}
 80061ec:	f005 fdfe 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80061f0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80061f4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80062d4 <_ZN3jlb5GraphC1Ev+0x14e4>
 80061f8:	2202      	movs	r2, #2
 80061fa:	214d      	movs	r1, #77	; 0x4d
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7fe fda8 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006202:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8006206:	4618      	mov	r0, r3
 8006208:	f005 fd5e 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800620c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8006210:	4618      	mov	r0, r3
 8006212:	f01a f88a 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('F', Direction::LEFT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006216:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800621a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800621e:	2149      	movs	r1, #73	; 0x49
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	f002 f818 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006226:	4604      	mov	r4, r0
 8006228:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800622c:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <_ZN3jlb5GraphC1Ev+0x14e0>)
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	4611      	mov	r1, r2
 8006236:	8019      	strh	r1, [r3, #0]
 8006238:	3302      	adds	r3, #2
 800623a:	0c12      	lsrs	r2, r2, #16
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006242:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8006246:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006250:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8006254:	2203      	movs	r2, #3
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 800625c:	4618      	mov	r0, r3
 800625e:	f01a f862 	bl	8020326 <_ZNSaIcEC1Ev>
 8006262:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006266:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800626a:	f5a2 62dd 	sub.w	r2, r2, #1768	; 0x6e8
 800626e:	f207 5074 	addw	r0, r7, #1396	; 0x574
 8006272:	ca06      	ldmia	r2, {r1, r2}
 8006274:	f005 fdba 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006278:	f207 5374 	addw	r3, r7, #1396	; 0x574
 800627c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80062c4 <_ZN3jlb5GraphC1Ev+0x14d4>
 8006280:	2200      	movs	r2, #0
 8006282:	2146      	movs	r1, #70	; 0x46
 8006284:	4620      	mov	r0, r4
 8006286:	f7fe fd64 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800628a:	f207 5374 	addw	r3, r7, #1396	; 0x574
 800628e:	4618      	mov	r0, r3
 8006290:	f005 fd1a 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006294:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8006298:	4618      	mov	r0, r3
 800629a:	f01a f846 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('D', Direction::STRAIGHT, {'K', 'L', 'N'}, 2.0f * UNIT);
 800629e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80062a6:	2149      	movs	r1, #73	; 0x49
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f001 ffd4 	bl	8008256 <_ZN3jlb5GraphixEc>
 80062ae:	4604      	mov	r4, r0
 80062b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062b4:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 80062b8:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <_ZN3jlb5GraphC1Ev+0x14e0>)
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	4611      	mov	r1, r2
 80062be:	e00b      	b.n	80062d8 <_ZN3jlb5GraphC1Ev+0x14e8>
 80062c0:	08023ca0 	.word	0x08023ca0
 80062c4:	3f71463a 	.word	0x3f71463a
 80062c8:	08023c9c 	.word	0x08023c9c
 80062cc:	08023ca4 	.word	0x08023ca4
 80062d0:	08023ca8 	.word	0x08023ca8
 80062d4:	3f99999a 	.word	0x3f99999a
 80062d8:	8019      	strh	r1, [r3, #0]
 80062da:	3302      	adds	r3, #2
 80062dc:	0c12      	lsrs	r2, r2, #16
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062e4:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80062e8:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80062f2:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 80062f6:	2203      	movs	r2, #3
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80062fe:	4618      	mov	r0, r3
 8006300:	f01a f811 	bl	8020326 <_ZNSaIcEC1Ev>
 8006304:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8006308:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800630c:	f2a2 62cc 	subw	r2, r2, #1740	; 0x6cc
 8006310:	f507 60b2 	add.w	r0, r7, #1424	; 0x590
 8006314:	ca06      	ldmia	r2, {r1, r2}
 8006316:	f005 fd69 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800631a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800631e:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 80062d4 <_ZN3jlb5GraphC1Ev+0x14e4>
 8006322:	2202      	movs	r2, #2
 8006324:	2144      	movs	r1, #68	; 0x44
 8006326:	4620      	mov	r0, r4
 8006328:	f7fe fd13 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800632c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8006330:	4618      	mov	r0, r3
 8006332:	f005 fcc9 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006336:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800633a:	4618      	mov	r0, r3
 800633c:	f019 fff5 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('G', Direction::RIGHT, {'K', 'L', 'N'}, QUARTER_CIRCLE);
 8006340:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006344:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006348:	2149      	movs	r1, #73	; 0x49
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	f001 ff83 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006350:	4604      	mov	r4, r0
 8006352:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006356:	f5a3 63d5 	sub.w	r3, r3, #1704	; 0x6a8
 800635a:	4ae7      	ldr	r2, [pc, #924]	; (80066f8 <_ZN3jlb5GraphC1Ev+0x1908>)
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	4611      	mov	r1, r2
 8006360:	8019      	strh	r1, [r3, #0]
 8006362:	3302      	adds	r3, #2
 8006364:	0c12      	lsrs	r2, r2, #16
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800636c:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 8006370:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800637a:	f5a3 63d6 	sub.w	r3, r3, #1712	; 0x6b0
 800637e:	2203      	movs	r2, #3
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006386:	4618      	mov	r0, r3
 8006388:	f019 ffcd 	bl	8020326 <_ZNSaIcEC1Ev>
 800638c:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8006390:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006394:	f5a2 62d6 	sub.w	r2, r2, #1712	; 0x6b0
 8006398:	f207 50ac 	addw	r0, r7, #1452	; 0x5ac
 800639c:	ca06      	ldmia	r2, {r1, r2}
 800639e:	f005 fd25 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80063a2:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 80063a6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80066fc <_ZN3jlb5GraphC1Ev+0x190c>
 80063aa:	2201      	movs	r2, #1
 80063ac:	2147      	movs	r1, #71	; 0x47
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7fe fccf 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80063b4:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 80063b8:	4618      	mov	r0, r3
 80063ba:	f005 fc85 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80063be:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f019 ffb1 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('L', Direction::LEFT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 80063c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80063d0:	2149      	movs	r1, #73	; 0x49
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	f001 ff3f 	bl	8008256 <_ZN3jlb5GraphixEc>
 80063d8:	4604      	mov	r4, r0
 80063da:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063de:	f2a3 638c 	subw	r3, r3, #1676	; 0x68c
 80063e2:	4ac7      	ldr	r2, [pc, #796]	; (8006700 <_ZN3jlb5GraphC1Ev+0x1910>)
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	4611      	mov	r1, r2
 80063e8:	8019      	strh	r1, [r3, #0]
 80063ea:	3302      	adds	r3, #2
 80063ec:	0c12      	lsrs	r2, r2, #16
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80063f4:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 80063f8:	f207 52dc 	addw	r2, r7, #1500	; 0x5dc
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006402:	f2a3 6394 	subw	r3, r3, #1684	; 0x694
 8006406:	2203      	movs	r2, #3
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800640e:	4618      	mov	r0, r3
 8006410:	f019 ff89 	bl	8020326 <_ZNSaIcEC1Ev>
 8006414:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8006418:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800641c:	f2a2 6294 	subw	r2, r2, #1684	; 0x694
 8006420:	f507 60b9 	add.w	r0, r7, #1480	; 0x5c8
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	f005 fce1 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800642a:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800642e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 80066fc <_ZN3jlb5GraphC1Ev+0x190c>
 8006432:	2200      	movs	r2, #0
 8006434:	214c      	movs	r1, #76	; 0x4c
 8006436:	4620      	mov	r0, r4
 8006438:	f7fe fc8b 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800643c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8006440:	4618      	mov	r0, r3
 8006442:	f005 fc41 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006446:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800644a:	4618      	mov	r0, r3
 800644c:	f019 ff6d 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('N', Direction::STRAIGHT, {'D', 'F', 'G'}, 2.0f * UNIT);
 8006450:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006454:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006458:	2149      	movs	r1, #73	; 0x49
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	f001 fefb 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006460:	4604      	mov	r4, r0
 8006462:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006466:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 800646a:	4aa5      	ldr	r2, [pc, #660]	; (8006700 <_ZN3jlb5GraphC1Ev+0x1910>)
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	4611      	mov	r1, r2
 8006470:	8019      	strh	r1, [r3, #0]
 8006472:	3302      	adds	r3, #2
 8006474:	0c12      	lsrs	r2, r2, #16
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800647c:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8006480:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800648a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 800648e:	2203      	movs	r2, #3
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 8006496:	4618      	mov	r0, r3
 8006498:	f019 ff45 	bl	8020326 <_ZNSaIcEC1Ev>
 800649c:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 80064a0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80064a4:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 80064a8:	f207 50e4 	addw	r0, r7, #1508	; 0x5e4
 80064ac:	ca06      	ldmia	r2, {r1, r2}
 80064ae:	f005 fc9d 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80064b2:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 80064b6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006704 <_ZN3jlb5GraphC1Ev+0x1914>
 80064ba:	2202      	movs	r2, #2
 80064bc:	214e      	movs	r1, #78	; 0x4e
 80064be:	4620      	mov	r0, r4
 80064c0:	f7fe fc47 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80064c4:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f005 fbfd 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80064ce:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 80064d2:	4618      	mov	r0, r3
 80064d4:	f019 ff29 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('I').add_edge('K', Direction::RIGHT, {'D', 'F', 'G'}, QUARTER_CIRCLE);
 80064d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064dc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80064e0:	2149      	movs	r1, #73	; 0x49
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	f001 feb7 	bl	8008256 <_ZN3jlb5GraphixEc>
 80064e8:	4604      	mov	r4, r0
 80064ea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80064ee:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 80064f2:	4a83      	ldr	r2, [pc, #524]	; (8006700 <_ZN3jlb5GraphC1Ev+0x1910>)
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	4611      	mov	r1, r2
 80064f8:	8019      	strh	r1, [r3, #0]
 80064fa:	3302      	adds	r3, #2
 80064fc:	0c12      	lsrs	r2, r2, #16
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006504:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006508:	f207 6214 	addw	r2, r7, #1556	; 0x614
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006512:	f2a3 635c 	subw	r3, r3, #1628	; 0x65c
 8006516:	2203      	movs	r2, #3
 8006518:	605a      	str	r2, [r3, #4]
 800651a:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800651e:	4618      	mov	r0, r3
 8006520:	f019 ff01 	bl	8020326 <_ZNSaIcEC1Ev>
 8006524:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8006528:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800652c:	f2a2 625c 	subw	r2, r2, #1628	; 0x65c
 8006530:	f507 60c0 	add.w	r0, r7, #1536	; 0x600
 8006534:	ca06      	ldmia	r2, {r1, r2}
 8006536:	f005 fc59 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800653a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800653e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80066fc <_ZN3jlb5GraphC1Ev+0x190c>
 8006542:	2201      	movs	r2, #1
 8006544:	214b      	movs	r1, #75	; 0x4b
 8006546:	4620      	mov	r0, r4
 8006548:	f7fe fc03 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800654c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006550:	4618      	mov	r0, r3
 8006552:	f005 fbb9 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006556:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800655a:	4618      	mov	r0, r3
 800655c:	f019 fee5 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('G', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 8006560:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006564:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006568:	214a      	movs	r1, #74	; 0x4a
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	f001 fe73 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006570:	4604      	mov	r4, r0
 8006572:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006576:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 800657a:	224c      	movs	r2, #76	; 0x4c
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006582:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006586:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006590:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8006594:	2201      	movs	r2, #1
 8006596:	605a      	str	r2, [r3, #4]
 8006598:	f207 6334 	addw	r3, r7, #1588	; 0x634
 800659c:	4618      	mov	r0, r3
 800659e:	f019 fec2 	bl	8020326 <_ZNSaIcEC1Ev>
 80065a2:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80065a6:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80065aa:	f5a2 62c8 	sub.w	r2, r2, #1600	; 0x640
 80065ae:	f207 601c 	addw	r0, r7, #1564	; 0x61c
 80065b2:	ca06      	ldmia	r2, {r1, r2}
 80065b4:	f005 fc1a 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80065b8:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 80065bc:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80066fc <_ZN3jlb5GraphC1Ev+0x190c>
 80065c0:	2200      	movs	r2, #0
 80065c2:	2147      	movs	r1, #71	; 0x47
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7fe fbc4 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80065ca:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 80065ce:	4618      	mov	r0, r3
 80065d0:	f005 fb7a 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80065d4:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80065d8:	4618      	mov	r0, r3
 80065da:	f019 fea6 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('E', Direction::STRAIGHT, {'L'}, 2.0f * UNIT);
 80065de:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065e2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80065e6:	214a      	movs	r1, #74	; 0x4a
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	f001 fe34 	bl	8008256 <_ZN3jlb5GraphixEc>
 80065ee:	4604      	mov	r4, r0
 80065f0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80065f4:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 80065f8:	224c      	movs	r2, #76	; 0x4c
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006600:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006604:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800660e:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 8006612:	2201      	movs	r2, #1
 8006614:	605a      	str	r2, [r3, #4]
 8006616:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800661a:	4618      	mov	r0, r3
 800661c:	f019 fe83 	bl	8020326 <_ZNSaIcEC1Ev>
 8006620:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006624:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006628:	f2a2 6224 	subw	r2, r2, #1572	; 0x624
 800662c:	f507 60c7 	add.w	r0, r7, #1592	; 0x638
 8006630:	ca06      	ldmia	r2, {r1, r2}
 8006632:	f005 fbdb 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006636:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800663a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006704 <_ZN3jlb5GraphC1Ev+0x1914>
 800663e:	2202      	movs	r2, #2
 8006640:	2145      	movs	r1, #69	; 0x45
 8006642:	4620      	mov	r0, r4
 8006644:	f7fe fb85 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006648:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800664c:	4618      	mov	r0, r3
 800664e:	f005 fb3b 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006652:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8006656:	4618      	mov	r0, r3
 8006658:	f019 fe67 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('J').add_edge('L', Direction::RIGHT, {'E', 'G'}, QUARTER_CIRCLE);
 800665c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006660:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006664:	214a      	movs	r1, #74	; 0x4a
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	f001 fdf5 	bl	8008256 <_ZN3jlb5GraphixEc>
 800666c:	4604      	mov	r4, r0
 800666e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006672:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8006676:	4a24      	ldr	r2, [pc, #144]	; (8006708 <_ZN3jlb5GraphC1Ev+0x1918>)
 8006678:	8812      	ldrh	r2, [r2, #0]
 800667a:	801a      	strh	r2, [r3, #0]
 800667c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006680:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006684:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800668e:	f5a3 63c1 	sub.w	r3, r3, #1544	; 0x608
 8006692:	2202      	movs	r2, #2
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 800669a:	4618      	mov	r0, r3
 800669c:	f019 fe43 	bl	8020326 <_ZNSaIcEC1Ev>
 80066a0:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80066a4:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80066a8:	f5a2 62c1 	sub.w	r2, r2, #1544	; 0x608
 80066ac:	f207 6054 	addw	r0, r7, #1620	; 0x654
 80066b0:	ca06      	ldmia	r2, {r1, r2}
 80066b2:	f005 fb9b 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80066b6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80066ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80066fc <_ZN3jlb5GraphC1Ev+0x190c>
 80066be:	2201      	movs	r2, #1
 80066c0:	214c      	movs	r1, #76	; 0x4c
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7fe fb45 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80066c8:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80066cc:	4618      	mov	r0, r3
 80066ce:	f005 fafb 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80066d2:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80066d6:	4618      	mov	r0, r3
 80066d8:	f019 fe27 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('H', Direction::RIGHT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80066dc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80066e4:	214b      	movs	r1, #75	; 0x4b
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	f001 fdb5 	bl	8008256 <_ZN3jlb5GraphixEc>
 80066ec:	4604      	mov	r4, r0
 80066ee:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80066f2:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80066f6:	e009      	b.n	800670c <_ZN3jlb5GraphC1Ev+0x191c>
 80066f8:	08023ca8 	.word	0x08023ca8
 80066fc:	3f71463a 	.word	0x3f71463a
 8006700:	08023cac 	.word	0x08023cac
 8006704:	3f99999a 	.word	0x3f99999a
 8006708:	08023cb0 	.word	0x08023cb0
 800670c:	4ae4      	ldr	r2, [pc, #912]	; (8006aa0 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 800670e:	6812      	ldr	r2, [r2, #0]
 8006710:	4611      	mov	r1, r2
 8006712:	8019      	strh	r1, [r3, #0]
 8006714:	3302      	adds	r3, #2
 8006716:	0c12      	lsrs	r2, r2, #16
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800671e:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006722:	f207 6284 	addw	r2, r7, #1668	; 0x684
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800672c:	f2a3 53ec 	subw	r3, r3, #1516	; 0x5ec
 8006730:	2203      	movs	r2, #3
 8006732:	605a      	str	r2, [r3, #4]
 8006734:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006738:	4618      	mov	r0, r3
 800673a:	f019 fdf4 	bl	8020326 <_ZNSaIcEC1Ev>
 800673e:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006742:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006746:	f2a2 52ec 	subw	r2, r2, #1516	; 0x5ec
 800674a:	f507 60ce 	add.w	r0, r7, #1648	; 0x670
 800674e:	ca06      	ldmia	r2, {r1, r2}
 8006750:	f005 fb4c 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006754:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8006758:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006aa4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 800675c:	2201      	movs	r2, #1
 800675e:	2148      	movs	r1, #72	; 0x48
 8006760:	4620      	mov	r0, r4
 8006762:	f7fe faf6 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006766:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800676a:	4618      	mov	r0, r3
 800676c:	f005 faac 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006770:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8006774:	4618      	mov	r0, r3
 8006776:	f019 fdd8 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('I', Direction::LEFT, {'H', 'M'}, QUARTER_CIRCLE);
 800677a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800677e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006782:	214b      	movs	r1, #75	; 0x4b
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	f001 fd66 	bl	8008256 <_ZN3jlb5GraphixEc>
 800678a:	4604      	mov	r4, r0
 800678c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006790:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8006794:	4ac4      	ldr	r2, [pc, #784]	; (8006aa8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006796:	8812      	ldrh	r2, [r2, #0]
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800679e:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80067a2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067ac:	f5a3 63ba 	sub.w	r3, r3, #1488	; 0x5d0
 80067b0:	2202      	movs	r2, #2
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f019 fdb4 	bl	8020326 <_ZNSaIcEC1Ev>
 80067be:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 80067c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80067c6:	f5a2 62ba 	sub.w	r2, r2, #1488	; 0x5d0
 80067ca:	f207 608c 	addw	r0, r7, #1676	; 0x68c
 80067ce:	ca06      	ldmia	r2, {r1, r2}
 80067d0:	f005 fb0c 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80067d4:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 80067d8:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8006aa4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80067dc:	2200      	movs	r2, #0
 80067de:	2149      	movs	r1, #73	; 0x49
 80067e0:	4620      	mov	r0, r4
 80067e2:	f7fe fab6 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80067e6:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 80067ea:	4618      	mov	r0, r3
 80067ec:	f005 fa6c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80067f0:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f019 fd98 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('L', Direction::STRAIGHT, {'H', 'M'}, 2.0f * UNIT);
 80067fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80067fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006802:	214b      	movs	r1, #75	; 0x4b
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	f001 fd26 	bl	8008256 <_ZN3jlb5GraphixEc>
 800680a:	4604      	mov	r4, r0
 800680c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006810:	f2a3 53ac 	subw	r3, r3, #1452	; 0x5ac
 8006814:	4aa4      	ldr	r2, [pc, #656]	; (8006aa8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006816:	8812      	ldrh	r2, [r2, #0]
 8006818:	801a      	strh	r2, [r3, #0]
 800681a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800681e:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8006822:	f207 62bc 	addw	r2, r7, #1724	; 0x6bc
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800682c:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8006830:	2202      	movs	r2, #2
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006838:	4618      	mov	r0, r3
 800683a:	f019 fd74 	bl	8020326 <_ZNSaIcEC1Ev>
 800683e:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006842:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006846:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800684a:	f507 60d5 	add.w	r0, r7, #1704	; 0x6a8
 800684e:	ca06      	ldmia	r2, {r1, r2}
 8006850:	f005 facc 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006854:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8006858:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006aac <_ZN3jlb5GraphC1Ev+0x1cbc>
 800685c:	2202      	movs	r2, #2
 800685e:	214c      	movs	r1, #76	; 0x4c
 8006860:	4620      	mov	r0, r4
 8006862:	f7fe fa76 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006866:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800686a:	4618      	mov	r0, r3
 800686c:	f005 fa2c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006870:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8006874:	4618      	mov	r0, r3
 8006876:	f019 fd58 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('N', Direction::RIGHT, {'H', 'M'}, QUARTER_CIRCLE);
 800687a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800687e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006882:	214b      	movs	r1, #75	; 0x4b
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f001 fce6 	bl	8008256 <_ZN3jlb5GraphixEc>
 800688a:	4604      	mov	r4, r0
 800688c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006890:	f5a3 63b2 	sub.w	r3, r3, #1424	; 0x590
 8006894:	4a84      	ldr	r2, [pc, #528]	; (8006aa8 <_ZN3jlb5GraphC1Ev+0x1cb8>)
 8006896:	8812      	ldrh	r2, [r2, #0]
 8006898:	801a      	strh	r2, [r3, #0]
 800689a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800689e:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80068a2:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068ac:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80068b0:	2202      	movs	r2, #2
 80068b2:	605a      	str	r2, [r3, #4]
 80068b4:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80068b8:	4618      	mov	r0, r3
 80068ba:	f019 fd34 	bl	8020326 <_ZNSaIcEC1Ev>
 80068be:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80068c2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80068c6:	f5a2 62b3 	sub.w	r2, r2, #1432	; 0x598
 80068ca:	f207 60c4 	addw	r0, r7, #1732	; 0x6c4
 80068ce:	ca06      	ldmia	r2, {r1, r2}
 80068d0:	f005 fa8c 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80068d4:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80068d8:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006aa4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 80068dc:	2201      	movs	r2, #1
 80068de:	214e      	movs	r1, #78	; 0x4e
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7fe fa36 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80068e6:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f005 f9ec 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80068f0:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80068f4:	4618      	mov	r0, r3
 80068f6:	f019 fd18 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('K').add_edge('M', Direction::LEFT, {'I', 'L', 'N'}, QUARTER_CIRCLE);
 80068fa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80068fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006902:	214b      	movs	r1, #75	; 0x4b
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f001 fca6 	bl	8008256 <_ZN3jlb5GraphixEc>
 800690a:	4604      	mov	r4, r0
 800690c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006910:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8006914:	4a62      	ldr	r2, [pc, #392]	; (8006aa0 <_ZN3jlb5GraphC1Ev+0x1cb0>)
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	4611      	mov	r1, r2
 800691a:	8019      	strh	r1, [r3, #0]
 800691c:	3302      	adds	r3, #2
 800691e:	0c12      	lsrs	r2, r2, #16
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006926:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 800692a:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006934:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8006938:	2203      	movs	r2, #3
 800693a:	605a      	str	r2, [r3, #4]
 800693c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8006940:	4618      	mov	r0, r3
 8006942:	f019 fcf0 	bl	8020326 <_ZNSaIcEC1Ev>
 8006946:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800694a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800694e:	f2a2 527c 	subw	r2, r2, #1404	; 0x57c
 8006952:	f507 60dc 	add.w	r0, r7, #1760	; 0x6e0
 8006956:	ca06      	ldmia	r2, {r1, r2}
 8006958:	f005 fa48 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800695c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006960:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006aa4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006964:	2200      	movs	r2, #0
 8006966:	214d      	movs	r1, #77	; 0x4d
 8006968:	4620      	mov	r0, r4
 800696a:	f7fe f9f2 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800696e:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8006972:	4618      	mov	r0, r3
 8006974:	f005 f9a8 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006978:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800697c:	4618      	mov	r0, r3
 800697e:	f019 fcd4 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('K', Direction::STRAIGHT, {'J', 'O'}, 2.0f * UNIT);
 8006982:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006986:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800698a:	214c      	movs	r1, #76	; 0x4c
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	f001 fc62 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006992:	4604      	mov	r4, r0
 8006994:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006998:	f5a3 63ab 	sub.w	r3, r3, #1368	; 0x558
 800699c:	4a44      	ldr	r2, [pc, #272]	; (8006ab0 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 800699e:	8812      	ldrh	r2, [r2, #0]
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069a6:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80069aa:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80069b4:	f5a3 63ac 	sub.w	r3, r3, #1376	; 0x560
 80069b8:	2202      	movs	r2, #2
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80069c0:	4618      	mov	r0, r3
 80069c2:	f019 fcb0 	bl	8020326 <_ZNSaIcEC1Ev>
 80069c6:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80069ca:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80069ce:	f5a2 62ac 	sub.w	r2, r2, #1376	; 0x560
 80069d2:	f207 60fc 	addw	r0, r7, #1788	; 0x6fc
 80069d6:	ca06      	ldmia	r2, {r1, r2}
 80069d8:	f005 fa08 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80069dc:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80069e0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006aac <_ZN3jlb5GraphC1Ev+0x1cbc>
 80069e4:	2202      	movs	r2, #2
 80069e6:	214b      	movs	r1, #75	; 0x4b
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7fe f9b2 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80069ee:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 80069f2:	4618      	mov	r0, r3
 80069f4:	f005 f968 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80069f8:	f207 7314 	addw	r3, r7, #1812	; 0x714
 80069fc:	4618      	mov	r0, r3
 80069fe:	f019 fc94 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('I', Direction::RIGHT, {'J', 'O'}, QUARTER_CIRCLE);
 8006a02:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a06:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a0a:	214c      	movs	r1, #76	; 0x4c
 8006a0c:	6818      	ldr	r0, [r3, #0]
 8006a0e:	f001 fc22 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006a12:	4604      	mov	r4, r0
 8006a14:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a18:	f2a3 533c 	subw	r3, r3, #1340	; 0x53c
 8006a1c:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <_ZN3jlb5GraphC1Ev+0x1cc0>)
 8006a1e:	8812      	ldrh	r2, [r2, #0]
 8006a20:	801a      	strh	r2, [r3, #0]
 8006a22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a26:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8006a2a:	f207 722c 	addw	r2, r7, #1836	; 0x72c
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a34:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8006a38:	2202      	movs	r2, #2
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006a40:	4618      	mov	r0, r3
 8006a42:	f019 fc70 	bl	8020326 <_ZNSaIcEC1Ev>
 8006a46:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006a4a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006a4e:	f2a2 5244 	subw	r2, r2, #1348	; 0x544
 8006a52:	f507 60e3 	add.w	r0, r7, #1816	; 0x718
 8006a56:	ca06      	ldmia	r2, {r1, r2}
 8006a58:	f005 f9c8 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006a5c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8006a60:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006aa4 <_ZN3jlb5GraphC1Ev+0x1cb4>
 8006a64:	2201      	movs	r2, #1
 8006a66:	2149      	movs	r1, #73	; 0x49
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f7fe f972 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006a6e:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8006a72:	4618      	mov	r0, r3
 8006a74:	f005 f928 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006a78:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f019 fc54 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('J', Direction::LEFT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8006a82:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a86:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006a8a:	214c      	movs	r1, #76	; 0x4c
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	f001 fbe2 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006a92:	4604      	mov	r4, r0
 8006a94:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006a98:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8006a9c:	e00a      	b.n	8006ab4 <_ZN3jlb5GraphC1Ev+0x1cc4>
 8006a9e:	bf00      	nop
 8006aa0:	08023cb4 	.word	0x08023cb4
 8006aa4:	3f71463a 	.word	0x3f71463a
 8006aa8:	08023cb8 	.word	0x08023cb8
 8006aac:	3f99999a 	.word	0x3f99999a
 8006ab0:	08023cbc 	.word	0x08023cbc
 8006ab4:	4ae4      	ldr	r2, [pc, #912]	; (8006e48 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	8019      	strh	r1, [r3, #0]
 8006abc:	3302      	adds	r3, #2
 8006abe:	0c12      	lsrs	r2, r2, #16
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ac6:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006aca:	f507 62e9 	add.w	r2, r7, #1864	; 0x748
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ad4:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006ad8:	2203      	movs	r2, #3
 8006ada:	605a      	str	r2, [r3, #4]
 8006adc:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f019 fc20 	bl	8020326 <_ZNSaIcEC1Ev>
 8006ae6:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006aea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006aee:	f5a2 62a5 	sub.w	r2, r2, #1320	; 0x528
 8006af2:	f207 7034 	addw	r0, r7, #1844	; 0x734
 8006af6:	ca06      	ldmia	r2, {r1, r2}
 8006af8:	f005 f978 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006afc:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006b00:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8006e4c <_ZN3jlb5GraphC1Ev+0x205c>
 8006b04:	2200      	movs	r2, #0
 8006b06:	214a      	movs	r1, #74	; 0x4a
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7fe f922 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b0e:	f207 7334 	addw	r3, r7, #1844	; 0x734
 8006b12:	4618      	mov	r0, r3
 8006b14:	f005 f8d8 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006b18:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f019 fc04 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('O', Direction::RIGHT, {'I', 'K', 'N'}, QUARTER_CIRCLE);
 8006b22:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b26:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006b2a:	214c      	movs	r1, #76	; 0x4c
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f001 fb92 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006b32:	4604      	mov	r4, r0
 8006b34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b38:	f2a3 5304 	subw	r3, r3, #1284	; 0x504
 8006b3c:	4ac2      	ldr	r2, [pc, #776]	; (8006e48 <_ZN3jlb5GraphC1Ev+0x2058>)
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	4611      	mov	r1, r2
 8006b42:	8019      	strh	r1, [r3, #0]
 8006b44:	3302      	adds	r3, #2
 8006b46:	0c12      	lsrs	r2, r2, #16
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b4e:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8006b52:	f207 7264 	addw	r2, r7, #1892	; 0x764
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006b5c:	f2a3 530c 	subw	r3, r3, #1292	; 0x50c
 8006b60:	2203      	movs	r2, #3
 8006b62:	605a      	str	r2, [r3, #4]
 8006b64:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f019 fbdc 	bl	8020326 <_ZNSaIcEC1Ev>
 8006b6e:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006b72:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006b76:	f2a2 520c 	subw	r2, r2, #1292	; 0x50c
 8006b7a:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
 8006b7e:	ca06      	ldmia	r2, {r1, r2}
 8006b80:	f005 f934 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006b84:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006b88:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8006e4c <_ZN3jlb5GraphC1Ev+0x205c>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	214f      	movs	r1, #79	; 0x4f
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7fe f8de 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006b96:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f005 f894 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ba0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f019 fbc0 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('L').add_edge('N', Direction::LEFT, {'J', 'O'}, QUARTER_CIRCLE);
 8006baa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bae:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006bb2:	214c      	movs	r1, #76	; 0x4c
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	f001 fb4e 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006bba:	4604      	mov	r4, r0
 8006bbc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bc0:	f5a3 639d 	sub.w	r3, r3, #1256	; 0x4e8
 8006bc4:	4aa2      	ldr	r2, [pc, #648]	; (8006e50 <_ZN3jlb5GraphC1Ev+0x2060>)
 8006bc6:	8812      	ldrh	r2, [r2, #0]
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bce:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8006bd2:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006bdc:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8006be0:	2202      	movs	r2, #2
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006be8:	4618      	mov	r0, r3
 8006bea:	f019 fb9c 	bl	8020326 <_ZNSaIcEC1Ev>
 8006bee:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006bf2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006bf6:	f5a2 629e 	sub.w	r2, r2, #1264	; 0x4f0
 8006bfa:	f207 706c 	addw	r0, r7, #1900	; 0x76c
 8006bfe:	ca06      	ldmia	r2, {r1, r2}
 8006c00:	f005 f8f4 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c04:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006c08:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006e4c <_ZN3jlb5GraphC1Ev+0x205c>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	214e      	movs	r1, #78	; 0x4e
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7fe f89e 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c16:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f005 f854 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006c20:	f207 7384 	addw	r3, r7, #1924	; 0x784
 8006c24:	4618      	mov	r0, r3
 8006c26:	f019 fb80 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('H', Direction::STRAIGHT, {'P', 'Q', 'R'}, 2.0f * UNIT);
 8006c2a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c2e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006c32:	214d      	movs	r1, #77	; 0x4d
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	f001 fb0e 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c40:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8006c44:	4a83      	ldr	r2, [pc, #524]	; (8006e54 <_ZN3jlb5GraphC1Ev+0x2064>)
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	4611      	mov	r1, r2
 8006c4a:	8019      	strh	r1, [r3, #0]
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	0c12      	lsrs	r2, r2, #16
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c56:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006c5a:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006c64:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8006c68:	2203      	movs	r2, #3
 8006c6a:	605a      	str	r2, [r3, #4]
 8006c6c:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f019 fb58 	bl	8020326 <_ZNSaIcEC1Ev>
 8006c76:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006c7a:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006c7e:	f2a2 42d4 	subw	r2, r2, #1236	; 0x4d4
 8006c82:	f507 60f1 	add.w	r0, r7, #1928	; 0x788
 8006c86:	ca06      	ldmia	r2, {r1, r2}
 8006c88:	f005 f8b0 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006c8c:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8006c90:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8006e58 <_ZN3jlb5GraphC1Ev+0x2068>
 8006c94:	2202      	movs	r2, #2
 8006c96:	2148      	movs	r1, #72	; 0x48
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7fe f85a 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006c9e:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f005 f810 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ca8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f019 fb3c 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('K', Direction::RIGHT, {'P', 'Q', 'R'}, QUARTER_CIRCLE);
 8006cb2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cb6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006cba:	214d      	movs	r1, #77	; 0x4d
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	f001 faca 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cc8:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8006ccc:	4a61      	ldr	r2, [pc, #388]	; (8006e54 <_ZN3jlb5GraphC1Ev+0x2064>)
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	8019      	strh	r1, [r3, #0]
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	0c12      	lsrs	r2, r2, #16
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cde:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006ce2:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006cec:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f019 fb14 	bl	8020326 <_ZNSaIcEC1Ev>
 8006cfe:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006d02:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d06:	f5a2 6297 	sub.w	r2, r2, #1208	; 0x4b8
 8006d0a:	f207 70a4 	addw	r0, r7, #1956	; 0x7a4
 8006d0e:	ca06      	ldmia	r2, {r1, r2}
 8006d10:	f005 f86c 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d14:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006d18:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8006e4c <_ZN3jlb5GraphC1Ev+0x205c>
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	214b      	movs	r1, #75	; 0x4b
 8006d20:	4620      	mov	r0, r4
 8006d22:	f7fe f816 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006d26:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f004 ffcc 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006d30:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 8006d34:	4618      	mov	r0, r3
 8006d36:	f019 faf8 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('R', Direction::LEFT, {'H', 'K'}, QUARTER_CIRCLE);
 8006d3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006d42:	214d      	movs	r1, #77	; 0x4d
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	f001 fa86 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d50:	f2a3 4394 	subw	r3, r3, #1172	; 0x494
 8006d54:	4a41      	ldr	r2, [pc, #260]	; (8006e5c <_ZN3jlb5GraphC1Ev+0x206c>)
 8006d56:	8812      	ldrh	r2, [r2, #0]
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d5e:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006d62:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006d6c:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8006d70:	2202      	movs	r2, #2
 8006d72:	605a      	str	r2, [r3, #4]
 8006d74:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f019 fad4 	bl	8020326 <_ZNSaIcEC1Ev>
 8006d7e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006d82:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006d86:	f2a2 429c 	subw	r2, r2, #1180	; 0x49c
 8006d8a:	f507 60f8 	add.w	r0, r7, #1984	; 0x7c0
 8006d8e:	ca06      	ldmia	r2, {r1, r2}
 8006d90:	f005 f82c 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006d94:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006d98:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006e4c <_ZN3jlb5GraphC1Ev+0x205c>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2152      	movs	r1, #82	; 0x52
 8006da0:	4620      	mov	r0, r4
 8006da2:	f7fd ffd6 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006da6:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f004 ff8c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006db0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 8006db4:	4618      	mov	r0, r3
 8006db6:	f019 fab8 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('Q', Direction::STRAIGHT, {'H', 'K'}, UNIT);
 8006dba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dbe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006dc2:	214d      	movs	r1, #77	; 0x4d
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	f001 fa46 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006dca:	4604      	mov	r4, r0
 8006dcc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dd0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8006dd4:	4a21      	ldr	r2, [pc, #132]	; (8006e5c <_ZN3jlb5GraphC1Ev+0x206c>)
 8006dd6:	8812      	ldrh	r2, [r2, #0]
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dde:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006de2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006dec:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8006df0:	2202      	movs	r2, #2
 8006df2:	605a      	str	r2, [r3, #4]
 8006df4:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f019 fa94 	bl	8020326 <_ZNSaIcEC1Ev>
 8006dfe:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006e02:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006e06:	f5a2 6290 	sub.w	r2, r2, #1152	; 0x480
 8006e0a:	f207 70dc 	addw	r0, r7, #2012	; 0x7dc
 8006e0e:	ca06      	ldmia	r2, {r1, r2}
 8006e10:	f004 ffec 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006e14:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006e18:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006e60 <_ZN3jlb5GraphC1Ev+0x2070>
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	2151      	movs	r1, #81	; 0x51
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7fd ff96 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006e26:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f004 ff4c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006e30:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8006e34:	4618      	mov	r0, r3
 8006e36:	f019 fa78 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('M').add_edge('P', Direction::RIGHT, {'H', 'K'}, QUARTER_CIRCLE);
 8006e3a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e3e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006e42:	214d      	movs	r1, #77	; 0x4d
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	e00d      	b.n	8006e64 <_ZN3jlb5GraphC1Ev+0x2074>
 8006e48:	08023cc0 	.word	0x08023cc0
 8006e4c:	3f71463a 	.word	0x3f71463a
 8006e50:	08023cbc 	.word	0x08023cbc
 8006e54:	08023cc4 	.word	0x08023cc4
 8006e58:	3f99999a 	.word	0x3f99999a
 8006e5c:	08023cc8 	.word	0x08023cc8
 8006e60:	3f19999a 	.word	0x3f19999a
 8006e64:	f001 f9f7 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006e68:	4604      	mov	r4, r0
 8006e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e6e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8006e72:	4ae5      	ldr	r2, [pc, #916]	; (8007208 <_ZN3jlb5GraphC1Ev+0x2418>)
 8006e74:	8812      	ldrh	r2, [r2, #0]
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e7c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e80:	f607 020c 	addw	r2, r7, #2060	; 0x80c
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006e8a:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8006e8e:	2202      	movs	r2, #2
 8006e90:	605a      	str	r2, [r3, #4]
 8006e92:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006e96:	4618      	mov	r0, r3
 8006e98:	f019 fa45 	bl	8020326 <_ZNSaIcEC1Ev>
 8006e9c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006ea0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006ea4:	f2a2 4264 	subw	r2, r2, #1124	; 0x464
 8006ea8:	f507 60ff 	add.w	r0, r7, #2040	; 0x7f8
 8006eac:	ca06      	ldmia	r2, {r1, r2}
 8006eae:	f004 ff9d 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006eb2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006eb6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800720c <_ZN3jlb5GraphC1Ev+0x241c>
 8006eba:	2201      	movs	r2, #1
 8006ebc:	2150      	movs	r1, #80	; 0x50
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7fd ff47 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006ec4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f004 fefd 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006ece:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f019 fa29 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('K', Direction::LEFT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006ed8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006edc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ee0:	214e      	movs	r1, #78	; 0x4e
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	f001 f9b7 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006ee8:	4604      	mov	r4, r0
 8006eea:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006eee:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8006ef2:	4ac7      	ldr	r2, [pc, #796]	; (8007210 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	8019      	strh	r1, [r3, #0]
 8006efa:	3302      	adds	r3, #2
 8006efc:	0c12      	lsrs	r2, r2, #16
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f04:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006f08:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f12:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8006f16:	2203      	movs	r2, #3
 8006f18:	605a      	str	r2, [r3, #4]
 8006f1a:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f019 fa01 	bl	8020326 <_ZNSaIcEC1Ev>
 8006f24:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006f28:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006f2c:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8006f30:	f607 0014 	addw	r0, r7, #2068	; 0x814
 8006f34:	ca06      	ldmia	r2, {r1, r2}
 8006f36:	f004 ff59 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006f3a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006f3e:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800720c <_ZN3jlb5GraphC1Ev+0x241c>
 8006f42:	2200      	movs	r2, #0
 8006f44:	214b      	movs	r1, #75	; 0x4b
 8006f46:	4620      	mov	r0, r4
 8006f48:	f7fd ff03 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006f4c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8006f50:	4618      	mov	r0, r3
 8006f52:	f004 feb9 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006f56:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f019 f9e5 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('I', Direction::STRAIGHT, {'R', 'S', 'T'}, 2.0f * UNIT);
 8006f60:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f64:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006f68:	214e      	movs	r1, #78	; 0x4e
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	f001 f973 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006f70:	4604      	mov	r4, r0
 8006f72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f76:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8006f7a:	4aa5      	ldr	r2, [pc, #660]	; (8007210 <_ZN3jlb5GraphC1Ev+0x2420>)
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	4611      	mov	r1, r2
 8006f80:	8019      	strh	r1, [r3, #0]
 8006f82:	3302      	adds	r3, #2
 8006f84:	0c12      	lsrs	r2, r2, #16
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f8c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006f90:	f607 0244 	addw	r2, r7, #2116	; 0x844
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006f9a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	605a      	str	r2, [r3, #4]
 8006fa2:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f019 f9bd 	bl	8020326 <_ZNSaIcEC1Ev>
 8006fac:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006fb0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8006fb4:	f2a2 422c 	subw	r2, r2, #1068	; 0x42c
 8006fb8:	f507 6003 	add.w	r0, r7, #2096	; 0x830
 8006fbc:	ca06      	ldmia	r2, {r1, r2}
 8006fbe:	f004 ff15 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8006fc2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006fc6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8007214 <_ZN3jlb5GraphC1Ev+0x2424>
 8006fca:	2202      	movs	r2, #2
 8006fcc:	2149      	movs	r1, #73	; 0x49
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7fd febf 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8006fd4:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f004 fe75 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8006fde:	f607 0348 	addw	r3, r7, #2120	; 0x848
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f019 f9a1 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('L', Direction::RIGHT, {'R', 'S', 'T'}, QUARTER_CIRCLE);
 8006fe8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006fec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8006ff0:	214e      	movs	r1, #78	; 0x4e
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	f001 f92f 	bl	8008256 <_ZN3jlb5GraphixEc>
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8006ffe:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8007002:	4a83      	ldr	r2, [pc, #524]	; (8007210 <_ZN3jlb5GraphC1Ev+0x2420>)
 8007004:	6812      	ldr	r2, [r2, #0]
 8007006:	4611      	mov	r1, r2
 8007008:	8019      	strh	r1, [r3, #0]
 800700a:	3302      	adds	r3, #2
 800700c:	0c12      	lsrs	r2, r2, #16
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007014:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007018:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007022:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8007026:	2203      	movs	r2, #3
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	f607 0364 	addw	r3, r7, #2148	; 0x864
 800702e:	4618      	mov	r0, r3
 8007030:	f019 f979 	bl	8020326 <_ZNSaIcEC1Ev>
 8007034:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8007038:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800703c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8007040:	f607 004c 	addw	r0, r7, #2124	; 0x84c
 8007044:	ca06      	ldmia	r2, {r1, r2}
 8007046:	f004 fed1 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800704a:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 800704e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800720c <_ZN3jlb5GraphC1Ev+0x241c>
 8007052:	2201      	movs	r2, #1
 8007054:	214c      	movs	r1, #76	; 0x4c
 8007056:	4620      	mov	r0, r4
 8007058:	f7fd fe7b 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800705c:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 8007060:	4618      	mov	r0, r3
 8007062:	f004 fe31 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007066:	f607 0364 	addw	r3, r7, #2148	; 0x864
 800706a:	4618      	mov	r0, r3
 800706c:	f019 f95d 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('T', Direction::LEFT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007070:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007074:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007078:	214e      	movs	r1, #78	; 0x4e
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	f001 f8eb 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007080:	4604      	mov	r4, r0
 8007082:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007086:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 800708a:	4a63      	ldr	r2, [pc, #396]	; (8007218 <_ZN3jlb5GraphC1Ev+0x2428>)
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	4611      	mov	r1, r2
 8007090:	8019      	strh	r1, [r3, #0]
 8007092:	3302      	adds	r3, #2
 8007094:	0c12      	lsrs	r2, r2, #16
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800709c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80070a0:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070aa:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80070ae:	2203      	movs	r2, #3
 80070b0:	605a      	str	r2, [r3, #4]
 80070b2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80070b6:	4618      	mov	r0, r3
 80070b8:	f019 f935 	bl	8020326 <_ZNSaIcEC1Ev>
 80070bc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80070c0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80070c4:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 80070c8:	f607 0068 	addw	r0, r7, #2152	; 0x868
 80070cc:	ca06      	ldmia	r2, {r1, r2}
 80070ce:	f004 fe8d 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80070d2:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80070d6:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800720c <_ZN3jlb5GraphC1Ev+0x241c>
 80070da:	2200      	movs	r2, #0
 80070dc:	2154      	movs	r1, #84	; 0x54
 80070de:	4620      	mov	r0, r4
 80070e0:	f7fd fe37 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80070e4:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80070e8:	4618      	mov	r0, r3
 80070ea:	f004 fded 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80070ee:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80070f2:	4618      	mov	r0, r3
 80070f4:	f019 f919 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('S', Direction::STRAIGHT, {'K', 'I', 'L'}, UNIT);
 80070f8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80070fc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007100:	214e      	movs	r1, #78	; 0x4e
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	f001 f8a7 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007108:	4604      	mov	r4, r0
 800710a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800710e:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8007112:	4a41      	ldr	r2, [pc, #260]	; (8007218 <_ZN3jlb5GraphC1Ev+0x2428>)
 8007114:	6812      	ldr	r2, [r2, #0]
 8007116:	4611      	mov	r1, r2
 8007118:	8019      	strh	r1, [r3, #0]
 800711a:	3302      	adds	r3, #2
 800711c:	0c12      	lsrs	r2, r2, #16
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007124:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8007128:	f607 0298 	addw	r2, r7, #2200	; 0x898
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007132:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8007136:	2203      	movs	r2, #3
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 800713e:	4618      	mov	r0, r3
 8007140:	f019 f8f1 	bl	8020326 <_ZNSaIcEC1Ev>
 8007144:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 8007148:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800714c:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8007150:	f607 0084 	addw	r0, r7, #2180	; 0x884
 8007154:	ca06      	ldmia	r2, {r1, r2}
 8007156:	f004 fe49 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800715a:	f607 0384 	addw	r3, r7, #2180	; 0x884
 800715e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800721c <_ZN3jlb5GraphC1Ev+0x242c>
 8007162:	2202      	movs	r2, #2
 8007164:	2153      	movs	r1, #83	; 0x53
 8007166:	4620      	mov	r0, r4
 8007168:	f7fd fdf3 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800716c:	f607 0384 	addw	r3, r7, #2180	; 0x884
 8007170:	4618      	mov	r0, r3
 8007172:	f004 fda9 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007176:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 800717a:	4618      	mov	r0, r3
 800717c:	f019 f8d5 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('N').add_edge('R', Direction::RIGHT, {'K', 'I', 'L'}, QUARTER_CIRCLE);
 8007180:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007184:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007188:	214e      	movs	r1, #78	; 0x4e
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	f001 f863 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007190:	4604      	mov	r4, r0
 8007192:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007196:	f5a3 736d 	sub.w	r3, r3, #948	; 0x3b4
 800719a:	4a1f      	ldr	r2, [pc, #124]	; (8007218 <_ZN3jlb5GraphC1Ev+0x2428>)
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	4611      	mov	r1, r2
 80071a0:	8019      	strh	r1, [r3, #0]
 80071a2:	3302      	adds	r3, #2
 80071a4:	0c12      	lsrs	r2, r2, #16
 80071a6:	701a      	strb	r2, [r3, #0]
 80071a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071ac:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80071b0:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 80071b4:	601a      	str	r2, [r3, #0]
 80071b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80071ba:	f5a3 736f 	sub.w	r3, r3, #956	; 0x3bc
 80071be:	2203      	movs	r2, #3
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80071c6:	4618      	mov	r0, r3
 80071c8:	f019 f8ad 	bl	8020326 <_ZNSaIcEC1Ev>
 80071cc:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 80071d0:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80071d4:	f5a2 726f 	sub.w	r2, r2, #956	; 0x3bc
 80071d8:	f507 600a 	add.w	r0, r7, #2208	; 0x8a0
 80071dc:	ca06      	ldmia	r2, {r1, r2}
 80071de:	f004 fe05 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80071e2:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80071e6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800720c <_ZN3jlb5GraphC1Ev+0x241c>
 80071ea:	2201      	movs	r2, #1
 80071ec:	2152      	movs	r1, #82	; 0x52
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7fd fdaf 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80071f4:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f004 fd65 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80071fe:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 8007202:	4618      	mov	r0, r3
 8007204:	e00c      	b.n	8007220 <_ZN3jlb5GraphC1Ev+0x2430>
 8007206:	bf00      	nop
 8007208:	08023cc8 	.word	0x08023cc8
 800720c:	3f71463a 	.word	0x3f71463a
 8007210:	08023ccc 	.word	0x08023ccc
 8007214:	3f99999a 	.word	0x3f99999a
 8007218:	08023cd0 	.word	0x08023cd0
 800721c:	3f19999a 	.word	0x3f19999a
 8007220:	f019 f883 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('L', Direction::LEFT, {'T', 'U', 'W'}, QUARTER_CIRCLE);
 8007224:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007228:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800722c:	214f      	movs	r1, #79	; 0x4f
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	f001 f811 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007234:	4604      	mov	r4, r0
 8007236:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800723a:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 800723e:	4aeb      	ldr	r2, [pc, #940]	; (80075ec <_ZN3jlb5GraphC1Ev+0x27fc>)
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	4611      	mov	r1, r2
 8007244:	8019      	strh	r1, [r3, #0]
 8007246:	3302      	adds	r3, #2
 8007248:	0c12      	lsrs	r2, r2, #16
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007250:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8007254:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800725e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8007262:	2203      	movs	r2, #3
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 800726a:	4618      	mov	r0, r3
 800726c:	f019 f85b 	bl	8020326 <_ZNSaIcEC1Ev>
 8007270:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 8007274:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007278:	f5a2 7268 	sub.w	r2, r2, #928	; 0x3a0
 800727c:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
 8007280:	ca06      	ldmia	r2, {r1, r2}
 8007282:	f004 fdb3 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007286:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 800728a:	ed9f 0adc 	vldr	s0, [pc, #880]	; 80075fc <_ZN3jlb5GraphC1Ev+0x280c>
 800728e:	2200      	movs	r2, #0
 8007290:	214c      	movs	r1, #76	; 0x4c
 8007292:	4620      	mov	r0, r4
 8007294:	f7fd fd5d 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007298:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 800729c:	4618      	mov	r0, r3
 800729e:	f004 fd13 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80072a2:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f019 f83f 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('U', Direction::LEFT, {'L'}, QUARTER_CIRCLE);
 80072ac:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80072b4:	214f      	movs	r1, #79	; 0x4f
 80072b6:	6818      	ldr	r0, [r3, #0]
 80072b8:	f000 ffcd 	bl	8008256 <_ZN3jlb5GraphixEc>
 80072bc:	4604      	mov	r4, r0
 80072be:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072c2:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80072c6:	224c      	movs	r2, #76	; 0x4c
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072ce:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80072d2:	f607 02ec 	addw	r2, r7, #2284	; 0x8ec
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80072dc:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80072e0:	2201      	movs	r2, #1
 80072e2:	605a      	str	r2, [r3, #4]
 80072e4:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f019 f81c 	bl	8020326 <_ZNSaIcEC1Ev>
 80072ee:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 80072f2:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80072f6:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 80072fa:	f607 00d8 	addw	r0, r7, #2264	; 0x8d8
 80072fe:	ca06      	ldmia	r2, {r1, r2}
 8007300:	f004 fd74 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007304:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 8007308:	ed9f 0abc 	vldr	s0, [pc, #752]	; 80075fc <_ZN3jlb5GraphC1Ev+0x280c>
 800730c:	2200      	movs	r2, #0
 800730e:	2155      	movs	r1, #85	; 0x55
 8007310:	4620      	mov	r0, r4
 8007312:	f7fd fd1e 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007316:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 800731a:	4618      	mov	r0, r3
 800731c:	f004 fcd4 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007320:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8007324:	4618      	mov	r0, r3
 8007326:	f019 f800 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('W', Direction::STRAIGHT, {'L'}, UNIT + QUARTER_CIRCLE);
 800732a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800732e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007332:	214f      	movs	r1, #79	; 0x4f
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f000 ff8e 	bl	8008256 <_ZN3jlb5GraphixEc>
 800733a:	4604      	mov	r4, r0
 800733c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007340:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8007344:	224c      	movs	r2, #76	; 0x4c
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800734c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8007350:	f607 1208 	addw	r2, r7, #2312	; 0x908
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800735a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800735e:	2201      	movs	r2, #1
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007366:	4618      	mov	r0, r3
 8007368:	f018 ffdd 	bl	8020326 <_ZNSaIcEC1Ev>
 800736c:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 8007370:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007374:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 8007378:	f607 00f4 	addw	r0, r7, #2292	; 0x8f4
 800737c:	ca06      	ldmia	r2, {r1, r2}
 800737e:	f004 fd35 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007382:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007386:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80075f0 <_ZN3jlb5GraphC1Ev+0x2800>
 800738a:	2202      	movs	r2, #2
 800738c:	2157      	movs	r1, #87	; 0x57
 800738e:	4620      	mov	r0, r4
 8007390:	f7fd fcdf 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007394:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8007398:	4618      	mov	r0, r3
 800739a:	f004 fc95 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800739e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80073a2:	4618      	mov	r0, r3
 80073a4:	f018 ffc1 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('O').add_edge('T', Direction::RIGHT, {'L'}, QUARTER_CIRCLE);
 80073a8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80073b0:	214f      	movs	r1, #79	; 0x4f
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	f000 ff4f 	bl	8008256 <_ZN3jlb5GraphixEc>
 80073b8:	4604      	mov	r4, r0
 80073ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073be:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80073c2:	224c      	movs	r2, #76	; 0x4c
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073ca:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80073ce:	f607 1224 	addw	r2, r7, #2340	; 0x924
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80073d8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80073dc:	2201      	movs	r2, #1
 80073de:	605a      	str	r2, [r3, #4]
 80073e0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80073e4:	4618      	mov	r0, r3
 80073e6:	f018 ff9e 	bl	8020326 <_ZNSaIcEC1Ev>
 80073ea:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80073ee:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80073f2:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 80073f6:	f507 6011 	add.w	r0, r7, #2320	; 0x910
 80073fa:	ca06      	ldmia	r2, {r1, r2}
 80073fc:	f004 fcf6 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007400:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007404:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80075fc <_ZN3jlb5GraphC1Ev+0x280c>
 8007408:	2201      	movs	r2, #1
 800740a:	2154      	movs	r1, #84	; 0x54
 800740c:	4620      	mov	r0, r4
 800740e:	f7fd fca0 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007412:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8007416:	4618      	mov	r0, r3
 8007418:	f004 fc56 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800741c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8007420:	4618      	mov	r0, r3
 8007422:	f018 ff82 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('M', Direction::LEFT, {'P'}, QUARTER_CIRCLE);
 8007426:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800742a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800742e:	2150      	movs	r1, #80	; 0x50
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	f000 ff10 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007436:	4604      	mov	r4, r0
 8007438:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800743c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8007440:	2250      	movs	r2, #80	; 0x50
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007448:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800744c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007456:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 800745a:	2201      	movs	r2, #1
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	f607 1344 	addw	r3, r7, #2372	; 0x944
 8007462:	4618      	mov	r0, r3
 8007464:	f018 ff5f 	bl	8020326 <_ZNSaIcEC1Ev>
 8007468:	f607 1344 	addw	r3, r7, #2372	; 0x944
 800746c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007470:	f5a2 724c 	sub.w	r2, r2, #816	; 0x330
 8007474:	f607 102c 	addw	r0, r7, #2348	; 0x92c
 8007478:	ca06      	ldmia	r2, {r1, r2}
 800747a:	f004 fcb7 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800747e:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007482:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80075fc <_ZN3jlb5GraphC1Ev+0x280c>
 8007486:	2200      	movs	r2, #0
 8007488:	214d      	movs	r1, #77	; 0x4d
 800748a:	4620      	mov	r0, r4
 800748c:	f7fd fc61 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007490:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8007494:	4618      	mov	r0, r3
 8007496:	f004 fc17 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800749a:	f607 1344 	addw	r3, r7, #2372	; 0x944
 800749e:	4618      	mov	r0, r3
 80074a0:	f018 ff43 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('P').add_edge('Q', Direction::STRAIGHT, {'P'}, UNIT);
 80074a4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074a8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80074ac:	2150      	movs	r1, #80	; 0x50
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	f000 fed1 	bl	8008256 <_ZN3jlb5GraphixEc>
 80074b4:	4604      	mov	r4, r0
 80074b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074ba:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 80074be:	2250      	movs	r2, #80	; 0x50
 80074c0:	701a      	strb	r2, [r3, #0]
 80074c2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074c6:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80074ca:	f607 125c 	addw	r2, r7, #2396	; 0x95c
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80074d4:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80074d8:	2201      	movs	r2, #1
 80074da:	605a      	str	r2, [r3, #4]
 80074dc:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80074e0:	4618      	mov	r0, r3
 80074e2:	f018 ff20 	bl	8020326 <_ZNSaIcEC1Ev>
 80074e6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80074ea:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 80074ee:	f5a2 7245 	sub.w	r2, r2, #788	; 0x314
 80074f2:	f607 1048 	addw	r0, r7, #2376	; 0x948
 80074f6:	ca06      	ldmia	r2, {r1, r2}
 80074f8:	f004 fc78 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80074fc:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007500:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80075f8 <_ZN3jlb5GraphC1Ev+0x2808>
 8007504:	2202      	movs	r2, #2
 8007506:	2151      	movs	r1, #81	; 0x51
 8007508:	4620      	mov	r0, r4
 800750a:	f7fd fc22 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800750e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8007512:	4618      	mov	r0, r3
 8007514:	f004 fbd8 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007518:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800751c:	4618      	mov	r0, r3
 800751e:	f018 ff04 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('P', Direction::STRAIGHT, {'R'}, UNIT);
 8007522:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007526:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800752a:	2151      	movs	r1, #81	; 0x51
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	f000 fe92 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007532:	4604      	mov	r4, r0
 8007534:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007538:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800753c:	2252      	movs	r2, #82	; 0x52
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007544:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007548:	f607 1278 	addw	r2, r7, #2424	; 0x978
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007552:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8007556:	2201      	movs	r2, #1
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 800755e:	4618      	mov	r0, r3
 8007560:	f018 fee1 	bl	8020326 <_ZNSaIcEC1Ev>
 8007564:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 8007568:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 800756c:	f5a2 723e 	sub.w	r2, r2, #760	; 0x2f8
 8007570:	f607 1064 	addw	r0, r7, #2404	; 0x964
 8007574:	ca06      	ldmia	r2, {r1, r2}
 8007576:	f004 fc39 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800757a:	f607 1364 	addw	r3, r7, #2404	; 0x964
 800757e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80075f8 <_ZN3jlb5GraphC1Ev+0x2808>
 8007582:	2202      	movs	r2, #2
 8007584:	2150      	movs	r1, #80	; 0x50
 8007586:	4620      	mov	r0, r4
 8007588:	f7fd fbe3 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800758c:	f607 1364 	addw	r3, r7, #2404	; 0x964
 8007590:	4618      	mov	r0, r3
 8007592:	f004 fb99 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007596:	f607 137c 	addw	r3, r7, #2428	; 0x97c
 800759a:	4618      	mov	r0, r3
 800759c:	f018 fec5 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('M', Direction::STRAIGHT, {'V', 'X'}, UNIT);
 80075a0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80075a8:	2151      	movs	r1, #81	; 0x51
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	f000 fe53 	bl	8008256 <_ZN3jlb5GraphixEc>
 80075b0:	4604      	mov	r4, r0
 80075b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075b6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80075ba:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <_ZN3jlb5GraphC1Ev+0x2804>)
 80075bc:	8812      	ldrh	r2, [r2, #0]
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075c4:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80075c8:	f607 1294 	addw	r2, r7, #2452	; 0x994
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80075d2:	f5a3 7337 	sub.w	r3, r3, #732	; 0x2dc
 80075d6:	2202      	movs	r2, #2
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80075de:	4618      	mov	r0, r3
 80075e0:	f018 fea1 	bl	8020326 <_ZNSaIcEC1Ev>
 80075e4:	f607 1398 	addw	r3, r7, #2456	; 0x998
 80075e8:	e00c      	b.n	8007604 <_ZN3jlb5GraphC1Ev+0x2814>
 80075ea:	bf00      	nop
 80075ec:	08023cd4 	.word	0x08023cd4
 80075f0:	3fc56fea 	.word	0x3fc56fea
 80075f4:	08023cd8 	.word	0x08023cd8
 80075f8:	3f19999a 	.word	0x3f19999a
 80075fc:	3f71463a 	.word	0x3f71463a
 8007600:	401c518f 	.word	0x401c518f
 8007604:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007608:	f5a2 7237 	sub.w	r2, r2, #732	; 0x2dc
 800760c:	f507 6018 	add.w	r0, r7, #2432	; 0x980
 8007610:	ca06      	ldmia	r2, {r1, r2}
 8007612:	f004 fbeb 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007616:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800761a:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 80075f8 <_ZN3jlb5GraphC1Ev+0x2808>
 800761e:	2202      	movs	r2, #2
 8007620:	214d      	movs	r1, #77	; 0x4d
 8007622:	4620      	mov	r0, r4
 8007624:	f7fd fb95 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007628:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800762c:	4618      	mov	r0, r3
 800762e:	f004 fb4b 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007632:	f607 1398 	addw	r3, r7, #2456	; 0x998
 8007636:	4618      	mov	r0, r3
 8007638:	f018 fe77 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('R', Direction::STRAIGHT, {'P'}, UNIT);
 800763c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007640:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007644:	2151      	movs	r1, #81	; 0x51
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	f000 fe05 	bl	8008256 <_ZN3jlb5GraphixEc>
 800764c:	4604      	mov	r4, r0
 800764e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007652:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007656:	2250      	movs	r2, #80	; 0x50
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800765e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007662:	f507 621b 	add.w	r2, r7, #2480	; 0x9b0
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800766c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8007670:	2201      	movs	r2, #1
 8007672:	605a      	str	r2, [r3, #4]
 8007674:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007678:	4618      	mov	r0, r3
 800767a:	f018 fe54 	bl	8020326 <_ZNSaIcEC1Ev>
 800767e:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 8007682:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007686:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 800768a:	f607 109c 	addw	r0, r7, #2460	; 0x99c
 800768e:	ca06      	ldmia	r2, {r1, r2}
 8007690:	f004 fbac 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007694:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8007698:	ed1f 0a29 	vldr	s0, [pc, #-164]	; 80075f8 <_ZN3jlb5GraphC1Ev+0x2808>
 800769c:	2202      	movs	r2, #2
 800769e:	2152      	movs	r1, #82	; 0x52
 80076a0:	4620      	mov	r0, r4
 80076a2:	f7fd fb56 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80076a6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80076aa:	4618      	mov	r0, r3
 80076ac:	f004 fb0c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80076b0:	f607 13b4 	addw	r3, r7, #2484	; 0x9b4
 80076b4:	4618      	mov	r0, r3
 80076b6:	f018 fe38 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('V', Direction::LEFT, {'M'}, QUARTER_CIRCLE);
 80076ba:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80076c2:	2151      	movs	r1, #81	; 0x51
 80076c4:	6818      	ldr	r0, [r3, #0]
 80076c6:	f000 fdc6 	bl	8008256 <_ZN3jlb5GraphixEc>
 80076ca:	4604      	mov	r4, r0
 80076cc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076d0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80076d4:	224d      	movs	r2, #77	; 0x4d
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076dc:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80076e0:	f607 12cc 	addw	r2, r7, #2508	; 0x9cc
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80076ea:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 80076ee:	2201      	movs	r2, #1
 80076f0:	605a      	str	r2, [r3, #4]
 80076f2:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f018 fe15 	bl	8020326 <_ZNSaIcEC1Ev>
 80076fc:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007700:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007704:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 8007708:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 800770c:	ca06      	ldmia	r2, {r1, r2}
 800770e:	f004 fb6d 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007712:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007716:	ed1f 0a47 	vldr	s0, [pc, #-284]	; 80075fc <_ZN3jlb5GraphC1Ev+0x280c>
 800771a:	2200      	movs	r2, #0
 800771c:	2156      	movs	r1, #86	; 0x56
 800771e:	4620      	mov	r0, r4
 8007720:	f7fd fb17 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007724:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8007728:	4618      	mov	r0, r3
 800772a:	f004 facd 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800772e:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8007732:	4618      	mov	r0, r3
 8007734:	f018 fdf9 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('Q').add_edge('X', Direction::STRAIGHT, {'M'}, 2.5f * UNIT + QUARTER_CIRCLE);
 8007738:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800773c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007740:	2151      	movs	r1, #81	; 0x51
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	f000 fd87 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007748:	4604      	mov	r4, r0
 800774a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800774e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8007752:	224d      	movs	r2, #77	; 0x4d
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800775a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800775e:	f607 12e8 	addw	r2, r7, #2536	; 0x9e8
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007768:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800776c:	2201      	movs	r2, #1
 800776e:	605a      	str	r2, [r3, #4]
 8007770:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8007774:	4618      	mov	r0, r3
 8007776:	f018 fdd6 	bl	8020326 <_ZNSaIcEC1Ev>
 800777a:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 800777e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007782:	f5a2 7222 	sub.w	r2, r2, #648	; 0x288
 8007786:	f607 10d4 	addw	r0, r7, #2516	; 0x9d4
 800778a:	ca06      	ldmia	r2, {r1, r2}
 800778c:	f004 fb2e 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007790:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8007794:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 8007600 <_ZN3jlb5GraphC1Ev+0x2810>
 8007798:	2202      	movs	r2, #2
 800779a:	2158      	movs	r1, #88	; 0x58
 800779c:	4620      	mov	r0, r4
 800779e:	f7fd fad8 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80077a2:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f004 fa8e 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80077ac:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 80077b0:	4618      	mov	r0, r3
 80077b2:	f018 fdba 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('Q', Direction::STRAIGHT, {'N', 'S'}, UNIT);
 80077b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80077be:	2152      	movs	r1, #82	; 0x52
 80077c0:	6818      	ldr	r0, [r3, #0]
 80077c2:	f000 fd48 	bl	8008256 <_ZN3jlb5GraphixEc>
 80077c6:	4604      	mov	r4, r0
 80077c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077d0:	4ae6      	ldr	r2, [pc, #920]	; (8007b6c <_ZN3jlb5GraphC1Ev+0x2d7c>)
 80077d2:	8812      	ldrh	r2, [r2, #0]
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077da:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80077de:	f607 2204 	addw	r2, r7, #2564	; 0xa04
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80077e8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80077ec:	2202      	movs	r2, #2
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80077f4:	4618      	mov	r0, r3
 80077f6:	f018 fd96 	bl	8020326 <_ZNSaIcEC1Ev>
 80077fa:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80077fe:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007802:	f5a2 721b 	sub.w	r2, r2, #620	; 0x26c
 8007806:	f507 601f 	add.w	r0, r7, #2544	; 0x9f0
 800780a:	ca06      	ldmia	r2, {r1, r2}
 800780c:	f004 faee 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007810:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007814:	ed9f 0ad6 	vldr	s0, [pc, #856]	; 8007b70 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007818:	2202      	movs	r2, #2
 800781a:	2151      	movs	r1, #81	; 0x51
 800781c:	4620      	mov	r0, r4
 800781e:	f7fd fa98 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007822:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8007826:	4618      	mov	r0, r3
 8007828:	f004 fa4e 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800782c:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8007830:	4618      	mov	r0, r3
 8007832:	f018 fd7a 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('M', Direction::RIGHT, {'N', 'S'}, QUARTER_CIRCLE);
 8007836:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800783a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800783e:	2152      	movs	r1, #82	; 0x52
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	f000 fd08 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007846:	4604      	mov	r4, r0
 8007848:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800784c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007850:	4ac6      	ldr	r2, [pc, #792]	; (8007b6c <_ZN3jlb5GraphC1Ev+0x2d7c>)
 8007852:	8812      	ldrh	r2, [r2, #0]
 8007854:	801a      	strh	r2, [r3, #0]
 8007856:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800785a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800785e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007868:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800786c:	2202      	movs	r2, #2
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 8007874:	4618      	mov	r0, r3
 8007876:	f018 fd56 	bl	8020326 <_ZNSaIcEC1Ev>
 800787a:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 800787e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007882:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8007886:	f607 200c 	addw	r0, r7, #2572	; 0xa0c
 800788a:	ca06      	ldmia	r2, {r1, r2}
 800788c:	f004 faae 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007890:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 8007894:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8007b7c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007898:	2201      	movs	r2, #1
 800789a:	214d      	movs	r1, #77	; 0x4d
 800789c:	4620      	mov	r0, r4
 800789e:	f7fd fa58 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80078a2:	f607 230c 	addw	r3, r7, #2572	; 0xa0c
 80078a6:	4618      	mov	r0, r3
 80078a8:	f004 fa0e 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80078ac:	f607 2324 	addw	r3, r7, #2596	; 0xa24
 80078b0:	4618      	mov	r0, r3
 80078b2:	f018 fd3a 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('N', Direction::LEFT, {'M', 'Q'}, QUARTER_CIRCLE);
 80078b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80078be:	2152      	movs	r1, #82	; 0x52
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f000 fcc8 	bl	8008256 <_ZN3jlb5GraphixEc>
 80078c6:	4604      	mov	r4, r0
 80078c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078cc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80078d0:	4aa8      	ldr	r2, [pc, #672]	; (8007b74 <_ZN3jlb5GraphC1Ev+0x2d84>)
 80078d2:	8812      	ldrh	r2, [r2, #0]
 80078d4:	801a      	strh	r2, [r3, #0]
 80078d6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078da:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80078de:	f607 223c 	addw	r2, r7, #2620	; 0xa3c
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80078e8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80078ec:	2202      	movs	r2, #2
 80078ee:	605a      	str	r2, [r3, #4]
 80078f0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80078f4:	4618      	mov	r0, r3
 80078f6:	f018 fd16 	bl	8020326 <_ZNSaIcEC1Ev>
 80078fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80078fe:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007902:	f5a2 720d 	sub.w	r2, r2, #564	; 0x234
 8007906:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 800790a:	ca06      	ldmia	r2, {r1, r2}
 800790c:	f004 fa6e 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007910:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8007914:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8007b7c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007918:	2200      	movs	r2, #0
 800791a:	214e      	movs	r1, #78	; 0x4e
 800791c:	4620      	mov	r0, r4
 800791e:	f7fd fa18 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007922:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8007926:	4618      	mov	r0, r3
 8007928:	f004 f9ce 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800792c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8007930:	4618      	mov	r0, r3
 8007932:	f018 fcfa 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('R').add_edge('S', Direction::STRAIGHT, {'M', 'Q'}, UNIT);
 8007936:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800793a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800793e:	2152      	movs	r1, #82	; 0x52
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	f000 fc88 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007946:	4604      	mov	r4, r0
 8007948:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800794c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8007950:	4a88      	ldr	r2, [pc, #544]	; (8007b74 <_ZN3jlb5GraphC1Ev+0x2d84>)
 8007952:	8812      	ldrh	r2, [r2, #0]
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800795a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800795e:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007968:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800796c:	2202      	movs	r2, #2
 800796e:	605a      	str	r2, [r3, #4]
 8007970:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 8007974:	4618      	mov	r0, r3
 8007976:	f018 fcd6 	bl	8020326 <_ZNSaIcEC1Ev>
 800797a:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 800797e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007982:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8007986:	f607 2044 	addw	r0, r7, #2628	; 0xa44
 800798a:	ca06      	ldmia	r2, {r1, r2}
 800798c:	f004 fa2e 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007990:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 8007994:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8007b70 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007998:	2202      	movs	r2, #2
 800799a:	2153      	movs	r1, #83	; 0x53
 800799c:	4620      	mov	r0, r4
 800799e:	f7fd f9d8 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80079a2:	f607 2344 	addw	r3, r7, #2628	; 0xa44
 80079a6:	4618      	mov	r0, r3
 80079a8:	f004 f98e 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80079ac:	f607 235c 	addw	r3, r7, #2652	; 0xa5c
 80079b0:	4618      	mov	r0, r3
 80079b2:	f018 fcba 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('R', Direction::STRAIGHT, {'T'}, UNIT);
 80079b6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80079be:	2153      	movs	r1, #83	; 0x53
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f000 fc48 	bl	8008256 <_ZN3jlb5GraphixEc>
 80079c6:	4604      	mov	r4, r0
 80079c8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079cc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80079d0:	2254      	movs	r2, #84	; 0x54
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079dc:	f607 2274 	addw	r2, r7, #2676	; 0xa74
 80079e0:	601a      	str	r2, [r3, #0]
 80079e2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80079e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079ea:	2201      	movs	r2, #1
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80079f2:	4618      	mov	r0, r3
 80079f4:	f018 fc97 	bl	8020326 <_ZNSaIcEC1Ev>
 80079f8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80079fc:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a00:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8007a04:	f507 6026 	add.w	r0, r7, #2656	; 0xa60
 8007a08:	ca06      	ldmia	r2, {r1, r2}
 8007a0a:	f004 f9ef 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a0e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007a12:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8007b70 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007a16:	2202      	movs	r2, #2
 8007a18:	2152      	movs	r1, #82	; 0x52
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7fd f999 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007a20:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007a24:	4618      	mov	r0, r3
 8007a26:	f004 f94f 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007a2a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f018 fc7b 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('N', Direction::STRAIGHT, {'V', 'W'}, UNIT);
 8007a34:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a38:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007a3c:	2153      	movs	r1, #83	; 0x53
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	f000 fc09 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007a44:	4604      	mov	r4, r0
 8007a46:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a4a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007a4e:	4a4a      	ldr	r2, [pc, #296]	; (8007b78 <_ZN3jlb5GraphC1Ev+0x2d88>)
 8007a50:	8812      	ldrh	r2, [r2, #0]
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a58:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a5c:	f507 6229 	add.w	r2, r7, #2704	; 0xa90
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007a66:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	605a      	str	r2, [r3, #4]
 8007a6e:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007a72:	4618      	mov	r0, r3
 8007a74:	f018 fc57 	bl	8020326 <_ZNSaIcEC1Ev>
 8007a78:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007a7c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007a80:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8007a84:	f607 207c 	addw	r0, r7, #2684	; 0xa7c
 8007a88:	ca06      	ldmia	r2, {r1, r2}
 8007a8a:	f004 f9af 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007a8e:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8007a92:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8007b70 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007a96:	2202      	movs	r2, #2
 8007a98:	214e      	movs	r1, #78	; 0x4e
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7fd f959 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007aa0:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f004 f90f 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007aaa:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f018 fc3b 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('T', Direction::STRAIGHT, {'R'}, UNIT);
 8007ab4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ab8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007abc:	2153      	movs	r1, #83	; 0x53
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	f000 fbc9 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007aca:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007ace:	2252      	movs	r2, #82	; 0x52
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ad6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007ada:	f607 22ac 	addw	r2, r7, #2732	; 0xaac
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ae4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007ae8:	2201      	movs	r2, #1
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007af0:	4618      	mov	r0, r3
 8007af2:	f018 fc18 	bl	8020326 <_ZNSaIcEC1Ev>
 8007af6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007afa:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007afe:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8007b02:	f607 2098 	addw	r0, r7, #2712	; 0xa98
 8007b06:	ca06      	ldmia	r2, {r1, r2}
 8007b08:	f004 f970 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007b0c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007b10:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007b70 <_ZN3jlb5GraphC1Ev+0x2d80>
 8007b14:	2202      	movs	r2, #2
 8007b16:	2154      	movs	r1, #84	; 0x54
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f7fd f91a 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007b1e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8007b22:	4618      	mov	r0, r3
 8007b24:	f004 f8d0 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007b28:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f018 fbfc 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('W', Direction::LEFT, {'N'}, QUARTER_CIRCLE);
 8007b32:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b36:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007b3a:	2153      	movs	r1, #83	; 0x53
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	f000 fb8a 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007b42:	4604      	mov	r4, r0
 8007b44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b48:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8007b4c:	224e      	movs	r2, #78	; 0x4e
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007b58:	f607 22c8 	addw	r2, r7, #2760	; 0xac8
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007b62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007b66:	2201      	movs	r2, #1
 8007b68:	605a      	str	r2, [r3, #4]
 8007b6a:	e009      	b.n	8007b80 <_ZN3jlb5GraphC1Ev+0x2d90>
 8007b6c:	08023cdc 	.word	0x08023cdc
 8007b70:	3f19999a 	.word	0x3f19999a
 8007b74:	08023ce0 	.word	0x08023ce0
 8007b78:	08023ce4 	.word	0x08023ce4
 8007b7c:	3f71463a 	.word	0x3f71463a
 8007b80:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007b84:	4618      	mov	r0, r3
 8007b86:	f018 fbce 	bl	8020326 <_ZNSaIcEC1Ev>
 8007b8a:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007b8e:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007b92:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007b96:	f607 20b4 	addw	r0, r7, #2740	; 0xab4
 8007b9a:	ca06      	ldmia	r2, {r1, r2}
 8007b9c:	f004 f926 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007ba0:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8007ba4:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 8007b7c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2157      	movs	r1, #87	; 0x57
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7fd f8d0 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007bb2:	f607 23b4 	addw	r3, r7, #2740	; 0xab4
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f004 f886 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007bbc:	f607 23cc 	addw	r3, r7, #2764	; 0xacc
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f018 fbb2 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('S').add_edge('V', Direction::RIGHT, {'N'}, QUARTER_CIRCLE);
 8007bc6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bca:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007bce:	2153      	movs	r1, #83	; 0x53
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	f000 fb40 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bdc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007be0:	224e      	movs	r2, #78	; 0x4e
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007be8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007bec:	f607 22e4 	addw	r2, r7, #2788	; 0xae4
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007bf6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	605a      	str	r2, [r3, #4]
 8007bfe:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007c02:	4618      	mov	r0, r3
 8007c04:	f018 fb8f 	bl	8020326 <_ZNSaIcEC1Ev>
 8007c08:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007c0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c10:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 8007c14:	f507 602d 	add.w	r0, r7, #2768	; 0xad0
 8007c18:	ca06      	ldmia	r2, {r1, r2}
 8007c1a:	f004 f8e7 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c1e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007c22:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8007b7c <_ZN3jlb5GraphC1Ev+0x2d8c>
 8007c26:	2201      	movs	r2, #1
 8007c28:	2156      	movs	r1, #86	; 0x56
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7fd f891 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007c30:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f004 f847 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007c3a:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f018 fb73 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('S', Direction::STRAIGHT, {'O', 'U'}, UNIT);
 8007c44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007c4c:	2154      	movs	r1, #84	; 0x54
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	f000 fb01 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007c54:	4604      	mov	r4, r0
 8007c56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c5a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007c5e:	4ae9      	ldr	r2, [pc, #932]	; (8008004 <_ZN3jlb5GraphC1Ev+0x3214>)
 8007c60:	8812      	ldrh	r2, [r2, #0]
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c68:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c6c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007c76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	605a      	str	r2, [r3, #4]
 8007c7e:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007c82:	4618      	mov	r0, r3
 8007c84:	f018 fb4f 	bl	8020326 <_ZNSaIcEC1Ev>
 8007c88:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007c8c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007c90:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8007c94:	f607 20ec 	addw	r0, r7, #2796	; 0xaec
 8007c98:	ca06      	ldmia	r2, {r1, r2}
 8007c9a:	f004 f8a7 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007c9e:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8007ca2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8008008 <_ZN3jlb5GraphC1Ev+0x3218>
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	2153      	movs	r1, #83	; 0x53
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7fd f851 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007cb0:	f607 23ec 	addw	r3, r7, #2796	; 0xaec
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f004 f807 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007cba:	f607 3304 	addw	r3, r7, #2820	; 0xb04
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f018 fb33 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('N', Direction::RIGHT, {'O', 'U'}, QUARTER_CIRCLE);
 8007cc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cc8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ccc:	2154      	movs	r1, #84	; 0x54
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	f000 fac1 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cda:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007cde:	4ac9      	ldr	r2, [pc, #804]	; (8008004 <_ZN3jlb5GraphC1Ev+0x3214>)
 8007ce0:	8812      	ldrh	r2, [r2, #0]
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ce8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007cec:	f607 321c 	addw	r2, r7, #2844	; 0xb1c
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007cf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007d02:	4618      	mov	r0, r3
 8007d04:	f018 fb0f 	bl	8020326 <_ZNSaIcEC1Ev>
 8007d08:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007d0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d10:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 8007d14:	f607 3008 	addw	r0, r7, #2824	; 0xb08
 8007d18:	ca06      	ldmia	r2, {r1, r2}
 8007d1a:	f004 f867 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8007d22:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8008018 <_ZN3jlb5GraphC1Ev+0x3228>
 8007d26:	2201      	movs	r2, #1
 8007d28:	214e      	movs	r1, #78	; 0x4e
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7fd f811 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007d30:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8007d34:	4618      	mov	r0, r3
 8007d36:	f003 ffc7 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007d3a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f018 faf3 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('O', Direction::LEFT, {'N', 'S'}, QUARTER_CIRCLE);
 8007d44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007d4c:	2154      	movs	r1, #84	; 0x54
 8007d4e:	6818      	ldr	r0, [r3, #0]
 8007d50:	f000 fa81 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007d54:	4604      	mov	r4, r0
 8007d56:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5e:	4aab      	ldr	r2, [pc, #684]	; (800800c <_ZN3jlb5GraphC1Ev+0x321c>)
 8007d60:	8812      	ldrh	r2, [r2, #0]
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d68:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d6c:	f607 3238 	addw	r2, r7, #2872	; 0xb38
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007d76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	605a      	str	r2, [r3, #4]
 8007d7e:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007d82:	4618      	mov	r0, r3
 8007d84:	f018 facf 	bl	8020326 <_ZNSaIcEC1Ev>
 8007d88:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007d8c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007d90:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8007d94:	f607 3024 	addw	r0, r7, #2852	; 0xb24
 8007d98:	ca06      	ldmia	r2, {r1, r2}
 8007d9a:	f004 f827 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007d9e:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8007da2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8008018 <_ZN3jlb5GraphC1Ev+0x3228>
 8007da6:	2200      	movs	r2, #0
 8007da8:	214f      	movs	r1, #79	; 0x4f
 8007daa:	4620      	mov	r0, r4
 8007dac:	f7fc ffd1 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007db0:	f607 3324 	addw	r3, r7, #2852	; 0xb24
 8007db4:	4618      	mov	r0, r3
 8007db6:	f003 ff87 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007dba:	f607 333c 	addw	r3, r7, #2876	; 0xb3c
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f018 fab3 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('T').add_edge('U', Direction::STRAIGHT, {'N', 'S'}, 2.0f * UNIT);
 8007dc4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dc8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007dcc:	2154      	movs	r1, #84	; 0x54
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	f000 fa41 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007dde:	4a8b      	ldr	r2, [pc, #556]	; (800800c <_ZN3jlb5GraphC1Ev+0x321c>)
 8007de0:	8812      	ldrh	r2, [r2, #0]
 8007de2:	801a      	strh	r2, [r3, #0]
 8007de4:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007de8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007dec:	f607 3254 	addw	r2, r7, #2900	; 0xb54
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007df6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	605a      	str	r2, [r3, #4]
 8007dfe:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007e02:	4618      	mov	r0, r3
 8007e04:	f018 fa8f 	bl	8020326 <_ZNSaIcEC1Ev>
 8007e08:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007e0c:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007e10:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8007e14:	f507 6034 	add.w	r0, r7, #2880	; 0xb40
 8007e18:	ca06      	ldmia	r2, {r1, r2}
 8007e1a:	f003 ffe7 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e1e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8007e22:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8008014 <_ZN3jlb5GraphC1Ev+0x3224>
 8007e26:	2202      	movs	r2, #2
 8007e28:	2155      	movs	r1, #85	; 0x55
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f7fc ff91 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007e30:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8007e34:	4618      	mov	r0, r3
 8007e36:	f003 ff47 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007e3a:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f018 fa73 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('T', Direction::STRAIGHT, {'U'}, 2.0f * UNIT);
 8007e44:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e48:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007e4c:	2155      	movs	r1, #85	; 0x55
 8007e4e:	6818      	ldr	r0, [r3, #0]
 8007e50:	f000 fa01 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007e54:	4604      	mov	r4, r0
 8007e56:	2355      	movs	r3, #85	; 0x55
 8007e58:	f887 3b70 	strb.w	r3, [r7, #2928]	; 0xb70
 8007e5c:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e64:	f507 6237 	add.w	r2, r7, #2928	; 0xb70
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007e6e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e72:	2201      	movs	r2, #1
 8007e74:	605a      	str	r2, [r3, #4]
 8007e76:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f018 fa53 	bl	8020326 <_ZNSaIcEC1Ev>
 8007e80:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007e84:	f607 4268 	addw	r2, r7, #3176	; 0xc68
 8007e88:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007e8c:	f607 305c 	addw	r0, r7, #2908	; 0xb5c
 8007e90:	ca06      	ldmia	r2, {r1, r2}
 8007e92:	f003 ffab 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007e96:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007e9a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8008014 <_ZN3jlb5GraphC1Ev+0x3224>
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	2154      	movs	r1, #84	; 0x54
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f7fc ff55 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007ea8:	f607 335c 	addw	r3, r7, #2908	; 0xb5c
 8007eac:	4618      	mov	r0, r3
 8007eae:	f003 ff0b 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007eb2:	f607 3374 	addw	r3, r7, #2932	; 0xb74
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f018 fa37 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('U').add_edge('O', Direction::RIGHT, {'U'}, QUARTER_CIRCLE);
 8007ebc:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ec0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ec4:	2155      	movs	r1, #85	; 0x55
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	f000 f9c5 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007ecc:	4604      	mov	r4, r0
 8007ece:	2355      	movs	r3, #85	; 0x55
 8007ed0:	f887 3b8c 	strb.w	r3, [r7, #2956]	; 0xb8c
 8007ed4:	f607 338c 	addw	r3, r7, #2956	; 0xb8c
 8007ed8:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8007edc:	2301      	movs	r3, #1
 8007ede:	f8c7 3b88 	str.w	r3, [r7, #2952]	; 0xb88
 8007ee2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f018 fa1d 	bl	8020326 <_ZNSaIcEC1Ev>
 8007eec:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007ef0:	f607 3078 	addw	r0, r7, #2936	; 0xb78
 8007ef4:	f607 3284 	addw	r2, r7, #2948	; 0xb84
 8007ef8:	ca06      	ldmia	r2, {r1, r2}
 8007efa:	f003 ff77 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007efe:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8007f02:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8008018 <_ZN3jlb5GraphC1Ev+0x3228>
 8007f06:	2201      	movs	r2, #1
 8007f08:	214f      	movs	r1, #79	; 0x4f
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7fc ff21 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f10:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8007f14:	4618      	mov	r0, r3
 8007f16:	f003 fed7 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f1a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f018 fa03 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('Q', Direction::RIGHT, {'S', 'W'}, QUARTER_CIRCLE);
 8007f24:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f28:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f2c:	2156      	movs	r1, #86	; 0x56
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	f000 f991 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007f34:	4604      	mov	r4, r0
 8007f36:	4b36      	ldr	r3, [pc, #216]	; (8008010 <_ZN3jlb5GraphC1Ev+0x3220>)
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	f8a7 3ba8 	strh.w	r3, [r7, #2984]	; 0xba8
 8007f3e:	f607 33a8 	addw	r3, r7, #2984	; 0xba8
 8007f42:	f8c7 3ba0 	str.w	r3, [r7, #2976]	; 0xba0
 8007f46:	2302      	movs	r3, #2
 8007f48:	f8c7 3ba4 	str.w	r3, [r7, #2980]	; 0xba4
 8007f4c:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007f50:	4618      	mov	r0, r3
 8007f52:	f018 f9e8 	bl	8020326 <_ZNSaIcEC1Ev>
 8007f56:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007f5a:	f607 3094 	addw	r0, r7, #2964	; 0xb94
 8007f5e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8007f62:	ca06      	ldmia	r2, {r1, r2}
 8007f64:	f003 ff42 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007f68:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007f6c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008018 <_ZN3jlb5GraphC1Ev+0x3228>
 8007f70:	2201      	movs	r2, #1
 8007f72:	2151      	movs	r1, #81	; 0x51
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7fc feec 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007f7a:	f607 3394 	addw	r3, r7, #2964	; 0xb94
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f003 fea2 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007f84:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f018 f9ce 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('S', Direction::LEFT, {'Q'}, QUARTER_CIRCLE);
 8007f8e:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007f92:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007f96:	2156      	movs	r1, #86	; 0x56
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	f000 f95c 	bl	8008256 <_ZN3jlb5GraphixEc>
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	2351      	movs	r3, #81	; 0x51
 8007fa2:	f887 3bc4 	strb.w	r3, [r7, #3012]	; 0xbc4
 8007fa6:	f607 33c4 	addw	r3, r7, #3012	; 0xbc4
 8007faa:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0
 8007fb4:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f018 f9b4 	bl	8020326 <_ZNSaIcEC1Ev>
 8007fbe:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007fc2:	f507 603b 	add.w	r0, r7, #2992	; 0xbb0
 8007fc6:	f607 32bc 	addw	r2, r7, #3004	; 0xbbc
 8007fca:	ca06      	ldmia	r2, {r1, r2}
 8007fcc:	f003 ff0e 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8007fd0:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8007fd4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008018 <_ZN3jlb5GraphC1Ev+0x3228>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2153      	movs	r1, #83	; 0x53
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7fc feb8 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8007fe2:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f003 fe6e 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8007fec:	f607 33c8 	addw	r3, r7, #3016	; 0xbc8
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f018 f99a 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('V').add_edge('W', Direction::STRAIGHT, {'Q'}, 2.0f * UNIT);
 8007ff6:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 8007ffa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8007ffe:	2156      	movs	r1, #86	; 0x56
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	e00b      	b.n	800801c <_ZN3jlb5GraphC1Ev+0x322c>
 8008004:	08023ce8 	.word	0x08023ce8
 8008008:	3f19999a 	.word	0x3f19999a
 800800c:	08023cdc 	.word	0x08023cdc
 8008010:	08023cec 	.word	0x08023cec
 8008014:	3f99999a 	.word	0x3f99999a
 8008018:	3f71463a 	.word	0x3f71463a
 800801c:	f000 f91b 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008020:	4604      	mov	r4, r0
 8008022:	2351      	movs	r3, #81	; 0x51
 8008024:	f887 3be0 	strb.w	r3, [r7, #3040]	; 0xbe0
 8008028:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800802c:	f8c7 3bd8 	str.w	r3, [r7, #3032]	; 0xbd8
 8008030:	2301      	movs	r3, #1
 8008032:	f8c7 3bdc 	str.w	r3, [r7, #3036]	; 0xbdc
 8008036:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 800803a:	4618      	mov	r0, r3
 800803c:	f018 f973 	bl	8020326 <_ZNSaIcEC1Ev>
 8008040:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8008044:	f607 30cc 	addw	r0, r7, #3020	; 0xbcc
 8008048:	f607 32d8 	addw	r2, r7, #3032	; 0xbd8
 800804c:	ca06      	ldmia	r2, {r1, r2}
 800804e:	f003 fecd 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008052:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008056:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8008014 <_ZN3jlb5GraphC1Ev+0x3224>
 800805a:	2202      	movs	r2, #2
 800805c:	2157      	movs	r1, #87	; 0x57
 800805e:	4620      	mov	r0, r4
 8008060:	f7fc fe77 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008064:	f607 33cc 	addw	r3, r7, #3020	; 0xbcc
 8008068:	4618      	mov	r0, r3
 800806a:	f003 fe2d 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800806e:	f607 33e4 	addw	r3, r7, #3044	; 0xbe4
 8008072:	4618      	mov	r0, r3
 8008074:	f018 f959 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('V', Direction::STRAIGHT, {'O'}, 2.0f * UNIT);
 8008078:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800807c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008080:	2157      	movs	r1, #87	; 0x57
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	f000 f8e7 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008088:	4604      	mov	r4, r0
 800808a:	234f      	movs	r3, #79	; 0x4f
 800808c:	f887 3bfc 	strb.w	r3, [r7, #3068]	; 0xbfc
 8008090:	f607 33fc 	addw	r3, r7, #3068	; 0xbfc
 8008094:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
 8008098:	2301      	movs	r3, #1
 800809a:	f8c7 3bf8 	str.w	r3, [r7, #3064]	; 0xbf8
 800809e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80080a2:	4618      	mov	r0, r3
 80080a4:	f018 f93f 	bl	8020326 <_ZNSaIcEC1Ev>
 80080a8:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80080ac:	f607 30e8 	addw	r0, r7, #3048	; 0xbe8
 80080b0:	f607 32f4 	addw	r2, r7, #3060	; 0xbf4
 80080b4:	ca06      	ldmia	r2, {r1, r2}
 80080b6:	f003 fe99 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80080ba:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80080be:	ed1f 0a2b 	vldr	s0, [pc, #-172]	; 8008014 <_ZN3jlb5GraphC1Ev+0x3224>
 80080c2:	2202      	movs	r2, #2
 80080c4:	2156      	movs	r1, #86	; 0x56
 80080c6:	4620      	mov	r0, r4
 80080c8:	f7fc fe43 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 80080cc:	f607 33e8 	addw	r3, r7, #3048	; 0xbe8
 80080d0:	4618      	mov	r0, r3
 80080d2:	f003 fdf9 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80080d6:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80080da:	4618      	mov	r0, r3
 80080dc:	f018 f925 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('S', Direction::RIGHT, {'O'}, QUARTER_CIRCLE);
 80080e0:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80080e4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80080e8:	2157      	movs	r1, #87	; 0x57
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	f000 f8b3 	bl	8008256 <_ZN3jlb5GraphixEc>
 80080f0:	4604      	mov	r4, r0
 80080f2:	234f      	movs	r3, #79	; 0x4f
 80080f4:	f887 3c18 	strb.w	r3, [r7, #3096]	; 0xc18
 80080f8:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80080fc:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
 8008100:	2301      	movs	r3, #1
 8008102:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 8008106:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 800810a:	4618      	mov	r0, r3
 800810c:	f018 f90b 	bl	8020326 <_ZNSaIcEC1Ev>
 8008110:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8008114:	f607 4004 	addw	r0, r7, #3076	; 0xc04
 8008118:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 800811c:	ca06      	ldmia	r2, {r1, r2}
 800811e:	f003 fe65 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 8008122:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8008126:	ed1f 0a44 	vldr	s0, [pc, #-272]	; 8008018 <_ZN3jlb5GraphC1Ev+0x3228>
 800812a:	2201      	movs	r2, #1
 800812c:	2153      	movs	r1, #83	; 0x53
 800812e:	4620      	mov	r0, r4
 8008130:	f7fc fe0f 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008134:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8008138:	4618      	mov	r0, r3
 800813a:	f003 fdc5 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 800813e:	f607 431c 	addw	r3, r7, #3100	; 0xc1c
 8008142:	4618      	mov	r0, r3
 8008144:	f018 f8f1 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('W').add_edge('O', Direction::STRAIGHT, {'S', 'V'}, UNIT + QUARTER_CIRCLE);
 8008148:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800814c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008150:	2157      	movs	r1, #87	; 0x57
 8008152:	6818      	ldr	r0, [r3, #0]
 8008154:	f000 f87f 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008158:	4604      	mov	r4, r0
 800815a:	4b35      	ldr	r3, [pc, #212]	; (8008230 <_ZN3jlb5GraphC1Ev+0x3440>)
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	f8a7 3c34 	strh.w	r3, [r7, #3124]	; 0xc34
 8008162:	f607 4334 	addw	r3, r7, #3124	; 0xc34
 8008166:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 800816a:	2302      	movs	r3, #2
 800816c:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30
 8008170:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8008174:	4618      	mov	r0, r3
 8008176:	f018 f8d6 	bl	8020326 <_ZNSaIcEC1Ev>
 800817a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800817e:	f507 6042 	add.w	r0, r7, #3104	; 0xc20
 8008182:	f607 422c 	addw	r2, r7, #3116	; 0xc2c
 8008186:	ca06      	ldmia	r2, {r1, r2}
 8008188:	f003 fe30 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 800818c:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008190:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8008234 <_ZN3jlb5GraphC1Ev+0x3444>
 8008194:	2202      	movs	r2, #2
 8008196:	214f      	movs	r1, #79	; 0x4f
 8008198:	4620      	mov	r0, r4
 800819a:	f7fc fdda 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 800819e:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 80081a2:	4618      	mov	r0, r3
 80081a4:	f003 fd90 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 80081a8:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80081ac:	4618      	mov	r0, r3
 80081ae:	f018 f8bc 	bl	802032a <_ZNSaIcED1Ev>
            this->operator[]('X').add_edge('Q', Direction::STRAIGHT, {'X'}, 2.5f * UNIT + QUARTER_CIRCLE);
 80081b2:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 80081b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80081ba:	2158      	movs	r1, #88	; 0x58
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	f000 f84a 	bl	8008256 <_ZN3jlb5GraphixEc>
 80081c2:	4604      	mov	r4, r0
 80081c4:	2358      	movs	r3, #88	; 0x58
 80081c6:	f887 3c50 	strb.w	r3, [r7, #3152]	; 0xc50
 80081ca:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80081ce:	f8c7 3c48 	str.w	r3, [r7, #3144]	; 0xc48
 80081d2:	2301      	movs	r3, #1
 80081d4:	f8c7 3c4c 	str.w	r3, [r7, #3148]	; 0xc4c
 80081d8:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80081dc:	4618      	mov	r0, r3
 80081de:	f018 f8a2 	bl	8020326 <_ZNSaIcEC1Ev>
 80081e2:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 80081e6:	f607 403c 	addw	r0, r7, #3132	; 0xc3c
 80081ea:	f607 4248 	addw	r2, r7, #3144	; 0xc48
 80081ee:	ca06      	ldmia	r2, {r1, r2}
 80081f0:	f003 fdfc 	bl	800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>
 80081f4:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 80081f8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008238 <_ZN3jlb5GraphC1Ev+0x3448>
 80081fc:	2202      	movs	r2, #2
 80081fe:	2151      	movs	r1, #81	; 0x51
 8008200:	4620      	mov	r0, r4
 8008202:	f7fc fda6 	bl	8004d52 <_ZN3jlb4Node8add_edgeEcNS_9DirectionESt6vectorIcSaIcEEf>
 8008206:	f607 433c 	addw	r3, r7, #3132	; 0xc3c
 800820a:	4618      	mov	r0, r3
 800820c:	f003 fd5c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008210:	f607 4354 	addw	r3, r7, #3156	; 0xc54
 8008214:	4618      	mov	r0, r3
 8008216:	f018 f888 	bl	802032a <_ZNSaIcED1Ev>
        }
 800821a:	f607 4368 	addw	r3, r7, #3176	; 0xc68
 800821e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	f607 476c 	addw	r7, r7, #3180	; 0xc6c
 800822a:	46bd      	mov	sp, r7
 800822c:	bd90      	pop	{r4, r7, pc}
 800822e:	bf00      	nop
 8008230:	08023cf0 	.word	0x08023cf0
 8008234:	3fc56fea 	.word	0x3fc56fea
 8008238:	401c518f 	.word	0x401c518f

0800823c <_ZN3jlb5GraphD1Ev>:

        ~Graph() {}
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4618      	mov	r0, r3
 8008248:	f003 fda4 	bl	800bd94 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <_ZN3jlb5GraphixEc>:
        Node &operator[](char name)
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
        {
#ifdef SIMULATION
            if (nodes.empty()) throw std::runtime_error("Graph is empty");
            if (name < 'A' || name > 'X') throw std::runtime_error("Invalid node name");
#endif
            return nodes[static_cast<int>(name - 'A')];
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	3b41      	subs	r3, #65	; 0x41
 8008268:	4619      	mov	r1, r3
 800826a:	4610      	mov	r0, r2
 800826c:	f003 fddf 	bl	800be2e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>
 8008270:	4603      	mov	r3, r0
        }
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800827a:	b480      	push	{r7}
 800827c:	b083      	sub	sp, #12
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008288:	d205      	bcs.n	8008296 <_ZSt16__deque_buf_sizej+0x1c>
 800828a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	e000      	b.n	8008298 <_ZSt16__deque_buf_sizej+0x1e>
 8008296:	2301      	movs	r3, #1
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <_ZNSt5dequeIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f003 fddc 	bl	800be6c <_ZNSt11_Deque_baseIfSaIfEEC1Ev>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <_ZN3jlb8OdometryC1Efff>:
        float meas_ang_vel_z = 0.0f;
        float meas_lin_acc_x = 0.0f;
        float meas_lin_acc_y = 0.0f;
        float meas_lin_acc_z = 0.0f;

        Odometry(const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : x_t(x_t_), y_t(y_t_), theta_t(normalize_angle(theta_t_)) {}
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80082ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80082ce:	ed87 1a00 	vstr	s2, [r7]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	60da      	str	r2, [r3, #12]
 80082ee:	ed97 0a00 	vldr	s0, [r7]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fa68 	bl	80087c8 <_ZN3jlb8Odometry15normalize_angleEf>
 80082f8:	eef0 7a40 	vmov.f32	s15, s0
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	edc3 7a04 	vstr	s15, [r3, #16]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	615a      	str	r2, [r3, #20]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f04f 0200 	mov.w	r2, #0
 8008310:	619a      	str	r2, [r3, #24]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	61da      	str	r2, [r3, #28]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	621a      	str	r2, [r3, #32]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	625a      	str	r2, [r3, #36]	; 0x24
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	629a      	str	r2, [r3, #40]	; 0x28
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f04f 0200 	mov.w	r2, #0
 8008340:	631a      	str	r2, [r3, #48]	; 0x30
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3334      	adds	r3, #52	; 0x34
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff ffac 	bl	80082a4 <_ZNSt5dequeIfSaIfEEC1Ev>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	335c      	adds	r3, #92	; 0x5c
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff ffa7 	bl	80082a4 <_ZNSt5dequeIfSaIfEEC1Ev>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <_ZN3jlb8OdometryD1Ev>:

        ~Odometry() {}
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	335c      	adds	r3, #92	; 0x5c
 8008374:	4618      	mov	r0, r3
 8008376:	f003 fdac 	bl	800bed2 <_ZNSt5dequeIfSaIfEED1Ev>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3334      	adds	r3, #52	; 0x34
 800837e:	4618      	mov	r0, r3
 8008380:	f003 fda7 	bl	800bed2 <_ZNSt5dequeIfSaIfEED1Ev>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <_ZN3jlb8Odometry12rpm_callbackEf>:

        void rpm_callback(const float motor_rpm)
 8008390:	b580      	push	{r7, lr}
 8008392:	ed2d 8b02 	vpush	{d8}
 8008396:	b08c      	sub	sp, #48	; 0x30
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_motor_rpm = motor_rpm;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	619a      	str	r2, [r3, #24]

            float wheel_rpm = motor_rpm * jlb::GEAR_RATIO_MOTOR_TO_WHEEL;
 80083a6:	edd7 7a00 	vldr	s15, [r7]
 80083aa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80084b8 <_ZN3jlb8Odometry12rpm_callbackEf+0x128>
 80083ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            float velocity  = M_PI * jlb::WHEEL_DIAMETER * wheel_rpm / 60.0f;
 80083b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b8:	f7f8 f8b8 	bl	800052c <__aeabi_f2d>
 80083bc:	a33c      	add	r3, pc, #240	; (adr r3, 80084b0 <_ZN3jlb8Odometry12rpm_callbackEf+0x120>)
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	f7f8 f90b 	bl	80005dc <__aeabi_dmul>
 80083c6:	4602      	mov	r2, r0
 80083c8:	460b      	mov	r3, r1
 80083ca:	4610      	mov	r0, r2
 80083cc:	4619      	mov	r1, r3
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	4b3a      	ldr	r3, [pc, #232]	; (80084bc <_ZN3jlb8Odometry12rpm_callbackEf+0x12c>)
 80083d4:	f7f8 fa2c 	bl	8000830 <__aeabi_ddiv>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f7f8 fbcc 	bl	8000b7c <__aeabi_d2f>
 80083e4:	4603      	mov	r3, r0
 80083e6:	60bb      	str	r3, [r7, #8]

            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 80083e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80083ec:	eeb0 0a67 	vmov.f32	s0, s15
 80083f0:	f7fb fda0 	bl	8003f34 <_ZSt4fabsf>
 80083f4:	eef0 7a40 	vmov.f32	s15, s0
 80083f8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80083fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008404:	bfcc      	ite	gt
 8008406:	2301      	movgt	r3, #1
 8008408:	2300      	movle	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d146      	bne.n	800849e <_ZN3jlb8Odometry12rpm_callbackEf+0x10e>

            v_buffer_.push_back(velocity);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3334      	adds	r3, #52	; 0x34
 8008414:	f107 0208 	add.w	r2, r7, #8
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f003 fd7e 	bl	800bf1c <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (v_buffer_.size() > jlb::VELOCITY_BUFFER_SIZE) { v_buffer_.pop_front(); }
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3334      	adds	r3, #52	; 0x34
 8008424:	4618      	mov	r0, r3
 8008426:	f003 fd9a 	bl	800bf5e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800842a:	4603      	mov	r3, r0
 800842c:	2b01      	cmp	r3, #1
 800842e:	bf8c      	ite	hi
 8008430:	2301      	movhi	r3, #1
 8008432:	2300      	movls	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <_ZN3jlb8Odometry12rpm_callbackEf+0xb4>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3334      	adds	r3, #52	; 0x34
 800843e:	4618      	mov	r0, r3
 8008440:	f003 fd9f 	bl	800bf82 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            vx_t = std::accumulate(v_buffer_.begin(), v_buffer_.end(), 0.0f) / v_buffer_.size();
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f003 fdb9 	bl	800bfc8 <_ZNSt5dequeIfSaIfEE5beginEv>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800845c:	f107 031c 	add.w	r3, r7, #28
 8008460:	4611      	mov	r1, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f003 fdbf 	bl	800bfe6 <_ZNSt5dequeIfSaIfEE3endEv>
 8008468:	f107 021c 	add.w	r2, r7, #28
 800846c:	f107 030c 	add.w	r3, r7, #12
 8008470:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80084c0 <_ZN3jlb8Odometry12rpm_callbackEf+0x130>
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f003 fdcf 	bl	800c01a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 800847c:	eeb0 8a40 	vmov.f32	s16, s0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	3334      	adds	r3, #52	; 0x34
 8008484:	4618      	mov	r0, r3
 8008486:	f003 fd6a 	bl	800bf5e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800848a:	ee07 0a90 	vmov	s15, r0
 800848e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008492:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	edc3 7a00 	vstr	s15, [r3]
 800849c:	e000      	b.n	80084a0 <_ZN3jlb8Odometry12rpm_callbackEf+0x110>
            if (std::fabs(velocity) > jlb::MAX_VELOCITY) { return; }
 800849e:	bf00      	nop
        }
 80084a0:	3730      	adds	r7, #48	; 0x30
 80084a2:	46bd      	mov	sp, r7
 80084a4:	ecbd 8b02 	vpop	{d8}
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w
 80084b0:	64af6f9d 	.word	0x64af6f9d
 80084b4:	3fd51c8b 	.word	0x3fd51c8b
 80084b8:	406c4ec5 	.word	0x406c4ec5
 80084bc:	404e0000 	.word	0x404e0000
 80084c0:	00000000 	.word	0x00000000

080084c4 <_ZN3jlb8Odometry12imu_callbackEf>:

        void imu_callback(const float ang_vel_z)
 80084c4:	b580      	push	{r7, lr}
 80084c6:	ed2d 8b02 	vpush	{d8}
 80084ca:	b08a      	sub	sp, #40	; 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	ed87 0a00 	vstr	s0, [r7]
        {
            meas_ang_vel_z = ang_vel_z;
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	625a      	str	r2, [r3, #36]	; 0x24

            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 80084da:	edd7 7a00 	vldr	s15, [r7]
 80084de:	eeb0 0a67 	vmov.f32	s0, s15
 80084e2:	f7fb fd27 	bl	8003f34 <_ZSt4fabsf>
 80084e6:	eef0 7a40 	vmov.f32	s15, s0
 80084ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800859c <_ZN3jlb8Odometry12imu_callbackEf+0xd8>
 80084ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f6:	bfcc      	ite	gt
 80084f8:	2301      	movgt	r3, #1
 80084fa:	2300      	movle	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d145      	bne.n	800858e <_ZN3jlb8Odometry12imu_callbackEf+0xca>

            w_buffer_.push_back(ang_vel_z);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	335c      	adds	r3, #92	; 0x5c
 8008506:	463a      	mov	r2, r7
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f003 fd06 	bl	800bf1c <_ZNSt5dequeIfSaIfEE9push_backERKf>
            if (w_buffer_.size() > jlb::IMU_BUFFER_SIZE) { w_buffer_.pop_front(); }
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	335c      	adds	r3, #92	; 0x5c
 8008514:	4618      	mov	r0, r3
 8008516:	f003 fd22 	bl	800bf5e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800851a:	4603      	mov	r3, r0
 800851c:	2b0a      	cmp	r3, #10
 800851e:	bf8c      	ite	hi
 8008520:	2301      	movhi	r3, #1
 8008522:	2300      	movls	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <_ZN3jlb8Odometry12imu_callbackEf+0x70>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	335c      	adds	r3, #92	; 0x5c
 800852e:	4618      	mov	r0, r3
 8008530:	f003 fd27 	bl	800bf82 <_ZNSt5dequeIfSaIfEE9pop_frontEv>

            w_t = std::accumulate(w_buffer_.begin(), w_buffer_.end(), 0.0f) / w_buffer_.size();
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800853a:	f107 0308 	add.w	r3, r7, #8
 800853e:	4611      	mov	r1, r2
 8008540:	4618      	mov	r0, r3
 8008542:	f003 fd41 	bl	800bfc8 <_ZNSt5dequeIfSaIfEE5beginEv>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800854c:	f107 0318 	add.w	r3, r7, #24
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f003 fd47 	bl	800bfe6 <_ZNSt5dequeIfSaIfEE3endEv>
 8008558:	f107 0218 	add.w	r2, r7, #24
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80085a0 <_ZN3jlb8Odometry12imu_callbackEf+0xdc>
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f003 fd57 	bl	800c01a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>
 800856c:	eeb0 8a40 	vmov.f32	s16, s0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	335c      	adds	r3, #92	; 0x5c
 8008574:	4618      	mov	r0, r3
 8008576:	f003 fcf2 	bl	800bf5e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800857a:	ee07 0a90 	vmov	s15, r0
 800857e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008582:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	edc3 7a01 	vstr	s15, [r3, #4]
 800858c:	e000      	b.n	8008590 <_ZN3jlb8Odometry12imu_callbackEf+0xcc>
            if (std::fabs(ang_vel_z) > jlb::MAX_YAW_RATE) { return; }
 800858e:	bf00      	nop
        }
 8008590:	3728      	adds	r7, #40	; 0x28
 8008592:	46bd      	mov	sp, r7
 8008594:	ecbd 8b02 	vpop	{d8}
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	4096cbe4 	.word	0x4096cbe4
	...

080085a8 <_ZN3jlb8Odometry11update_odomEv>:

        Odom update_odom()
 80085a8:	b580      	push	{r7, lr}
 80085aa:	ed2d 8b02 	vpush	{d8}
 80085ae:	b08c      	sub	sp, #48	; 0x30
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6178      	str	r0, [r7, #20]
        {
#ifndef SIMULATION
            // TODO: add timestamp and dt
            float dt = 0.005f;
 80085b4:	4b74      	ldr	r3, [pc, #464]	; (8008788 <_ZN3jlb8Odometry11update_odomEv+0x1e0>)
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c

            auto  update_timestamp = std::chrono::steady_clock::now();
            float dt               = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp - odom_timestamp_).count() / 1000.0f;
#endif

            if (dt > 0.0f)
 80085b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80085bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	f340 80b0 	ble.w	8008728 <_ZN3jlb8Odometry11update_odomEv+0x180>
            {
                vx_t = std::fabs(vx_t) < 0.03 ? 0.0 : vx_t;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	edd3 7a00 	vldr	s15, [r3]
 80085ce:	eeb0 0a67 	vmov.f32	s0, s15
 80085d2:	f7fb fcaf 	bl	8003f34 <_ZSt4fabsf>
 80085d6:	ee10 3a10 	vmov	r3, s0
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f7 ffa6 	bl	800052c <__aeabi_f2d>
 80085e0:	a365      	add	r3, pc, #404	; (adr r3, 8008778 <_ZN3jlb8Odometry11update_odomEv+0x1d0>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f8 fa6b 	bl	8000ac0 <__aeabi_dcmplt>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <_ZN3jlb8Odometry11update_odomEv+0x4e>
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e001      	b.n	80085fa <_ZN3jlb8Odometry11update_odomEv+0x52>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	6013      	str	r3, [r2, #0]
                w_t  = std::fabs(w_t) < 0.015 ? 0.0 : w_t;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	edd3 7a01 	vldr	s15, [r3, #4]
 8008604:	eeb0 0a67 	vmov.f32	s0, s15
 8008608:	f7fb fc94 	bl	8003f34 <_ZSt4fabsf>
 800860c:	ee10 3a10 	vmov	r3, s0
 8008610:	4618      	mov	r0, r3
 8008612:	f7f7 ff8b 	bl	800052c <__aeabi_f2d>
 8008616:	a35a      	add	r3, pc, #360	; (adr r3, 8008780 <_ZN3jlb8Odometry11update_odomEv+0x1d8>)
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f7f8 fa50 	bl	8000ac0 <__aeabi_dcmplt>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <_ZN3jlb8Odometry11update_odomEv+0x84>
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	e001      	b.n	8008630 <_ZN3jlb8Odometry11update_odomEv+0x88>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	6053      	str	r3, [r2, #4]
                // float vy_t = WHEELBASE * w_t / 2.0f;
                float vy_t = 0.0f;
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	62bb      	str	r3, [r7, #40]	; 0x28

                x_t += (vx_t * std::cos(theta_t) - vy_t * std::sin(theta_t)) * dt;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	ed93 8a00 	vldr	s16, [r3]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	edd3 7a04 	vldr	s15, [r3, #16]
 8008646:	eeb0 0a67 	vmov.f32	s0, s15
 800864a:	f7fb fc63 	bl	8003f14 <_ZSt3cosf>
 800864e:	eef0 7a40 	vmov.f32	s15, s0
 8008652:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	edd3 7a04 	vldr	s15, [r3, #16]
 800865c:	eeb0 0a67 	vmov.f32	s0, s15
 8008660:	f7fb fc78 	bl	8003f54 <_ZSt3sinf>
 8008664:	eeb0 7a40 	vmov.f32	s14, s0
 8008668:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	ee38 7a67 	vsub.f32	s14, s16, s15
 8008674:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	edc3 7a02 	vstr	s15, [r3, #8]
                y_t += (vx_t * std::sin(theta_t) + vy_t * std::cos(theta_t)) * dt;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	ed93 8a00 	vldr	s16, [r3]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	edd3 7a04 	vldr	s15, [r3, #16]
 8008698:	eeb0 0a67 	vmov.f32	s0, s15
 800869c:	f7fb fc5a 	bl	8003f54 <_ZSt3sinf>
 80086a0:	eef0 7a40 	vmov.f32	s15, s0
 80086a4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80086ae:	eeb0 0a67 	vmov.f32	s0, s15
 80086b2:	f7fb fc2f 	bl	8003f14 <_ZSt3cosf>
 80086b6:	eeb0 7a40 	vmov.f32	s14, s0
 80086ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80086c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80086d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	edc3 7a03 	vstr	s15, [r3, #12]
                theta_t = normalize_angle(theta_t + w_t * dt);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	ed93 7a04 	vldr	s14, [r3, #16]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80086ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086f6:	eeb0 0a67 	vmov.f32	s0, s15
 80086fa:	6978      	ldr	r0, [r7, #20]
 80086fc:	f000 f864 	bl	80087c8 <_ZN3jlb8Odometry15normalize_angleEf>
 8008700:	eef0 7a40 	vmov.f32	s15, s0
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	edc3 7a04 	vstr	s15, [r3, #16]

                distance_traveled_since_checkpoint += vx_t * dt;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	ed93 7a05 	vldr	s14, [r3, #20]
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	edd3 6a00 	vldr	s13, [r3]
 8008716:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800871a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800871e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	edc3 7a05 	vstr	s15, [r3, #20]
            }
#ifdef SIMULATION
            odom_timestamp_ = update_timestamp > odom_timestamp_ ? update_timestamp : odom_timestamp_;
#endif
            return {vx_t, x_t, y_t, theta_t};
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	61bb      	str	r3, [r7, #24]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
 8008740:	69b8      	ldr	r0, [r7, #24]
 8008742:	69f9      	ldr	r1, [r7, #28]
 8008744:	6a3a      	ldr	r2, [r7, #32]
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	ee06 0a10 	vmov	s12, r0
 800874c:	ee06 1a90 	vmov	s13, r1
 8008750:	ee07 2a10 	vmov	s14, r2
 8008754:	ee07 3a90 	vmov	s15, r3
        }
 8008758:	eeb0 0a46 	vmov.f32	s0, s12
 800875c:	eef0 0a66 	vmov.f32	s1, s13
 8008760:	eeb0 1a47 	vmov.f32	s2, s14
 8008764:	eef0 1a67 	vmov.f32	s3, s15
 8008768:	3730      	adds	r7, #48	; 0x30
 800876a:	46bd      	mov	sp, r7
 800876c:	ecbd 8b02 	vpop	{d8}
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	f3af 8000 	nop.w
 8008778:	eb851eb8 	.word	0xeb851eb8
 800877c:	3f9eb851 	.word	0x3f9eb851
 8008780:	eb851eb8 	.word	0xeb851eb8
 8008784:	3f8eb851 	.word	0x3f8eb851
 8008788:	3ba3d70a 	.word	0x3ba3d70a

0800878c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	ed87 0a03 	vstr	s0, [r7, #12]
 8008796:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7f7 fec6 	bl	800052c <__aeabi_f2d>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	ed97 1b00 	vldr	d1, [r7]
 80087a8:	ec43 2b10 	vmov	d0, r2, r3
 80087ac:	f017 fdce 	bl	802034c <fmod>
 80087b0:	eeb0 7a40 	vmov.f32	s14, s0
 80087b4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80087b8:	eeb0 0a47 	vmov.f32	s0, s14
 80087bc:	eef0 0a67 	vmov.f32	s1, s15
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <_ZN3jlb8Odometry15normalize_angleEf>:

        float normalize_angle(float angle)
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	ed87 0a00 	vstr	s0, [r7]
        {
            angle = std::fmod(angle, 2.0f * M_PI);
 80087d4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8008830 <_ZN3jlb8Odometry15normalize_angleEf+0x68>
 80087d8:	ed97 0a00 	vldr	s0, [r7]
 80087dc:	f7ff ffd6 	bl	800878c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80087e0:	ec53 2b10 	vmov	r2, r3, d0
 80087e4:	4610      	mov	r0, r2
 80087e6:	4619      	mov	r1, r3
 80087e8:	f7f8 f9c8 	bl	8000b7c <__aeabi_d2f>
 80087ec:	4603      	mov	r3, r0
 80087ee:	603b      	str	r3, [r7, #0]
            if (angle < 0.0f) { angle += 2.0f * M_PI; }
 80087f0:	edd7 7a00 	vldr	s15, [r7]
 80087f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fc:	d50f      	bpl.n	800881e <_ZN3jlb8Odometry15normalize_angleEf+0x56>
 80087fe:	6838      	ldr	r0, [r7, #0]
 8008800:	f7f7 fe94 	bl	800052c <__aeabi_f2d>
 8008804:	a30a      	add	r3, pc, #40	; (adr r3, 8008830 <_ZN3jlb8Odometry15normalize_angleEf+0x68>)
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	f7f7 fd31 	bl	8000270 <__adddf3>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4610      	mov	r0, r2
 8008814:	4619      	mov	r1, r3
 8008816:	f7f8 f9b1 	bl	8000b7c <__aeabi_d2f>
 800881a:	4603      	mov	r3, r0
 800881c:	603b      	str	r3, [r7, #0]
            return angle;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	ee07 3a90 	vmov	s15, r3
        }
 8008824:	eeb0 0a67 	vmov.f32	s0, s15
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	54442d18 	.word	0x54442d18
 8008834:	401921fb 	.word	0x401921fb

08008838 <_ZN3jlb8Odometry10correctionEff>:

        void correction([[maybe_unused]] float x_t_, [[maybe_unused]] float y_t_)
 8008838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800883c:	b094      	sub	sp, #80	; 0x50
 800883e:	af00      	add	r7, sp, #0
 8008840:	6178      	str	r0, [r7, #20]
 8008842:	ed87 0a04 	vstr	s0, [r7, #16]
 8008846:	edc7 0a03 	vstr	s1, [r7, #12]
        {
            x_t = x_t_ - (SENSOR_BASE / 2.0f * std::cos(theta_t));
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008850:	eeb0 0a67 	vmov.f32	s0, s15
 8008854:	f7fb fb5e 	bl	8003f14 <_ZSt3cosf>
 8008858:	eef0 7a40 	vmov.f32	s15, s0
 800885c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008864:	ed97 7a04 	vldr	s14, [r7, #16]
 8008868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	edc3 7a02 	vstr	s15, [r3, #8]
            y_t = y_t_ - (SENSOR_BASE / 2.0f * std::sin(theta_t));
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	edd3 7a04 	vldr	s15, [r3, #16]
 8008878:	eeb0 0a67 	vmov.f32	s0, s15
 800887c:	f7fb fb6a 	bl	8003f54 <_ZSt3sinf>
 8008880:	eef0 7a40 	vmov.f32	s15, s0
 8008884:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8008888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800888c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	edc3 7a03 	vstr	s15, [r3, #12]

            // clamp theta to certain values whichever is closer
            // the values are 0, 90, 180, 270, 360

            float theta_0   = std::fabs(theta_t);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	edd3 7a04 	vldr	s15, [r3, #16]
 80088a0:	eeb0 0a67 	vmov.f32	s0, s15
 80088a4:	f7fb fb46 	bl	8003f34 <_ZSt4fabsf>
 80088a8:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
            float theta_90  = std::fabs(theta_t - M_PI / 2.0f);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7f7 fe3b 	bl	800052c <__aeabi_f2d>
 80088b6:	a396      	add	r3, pc, #600	; (adr r3, 8008b10 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	f7f7 fcd6 	bl	800026c <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	603a      	str	r2, [r7, #0]
 80088c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088ca:	607b      	str	r3, [r7, #4]
 80088cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088d0:	f7f8 f954 	bl	8000b7c <__aeabi_d2f>
 80088d4:	4603      	mov	r3, r0
 80088d6:	64bb      	str	r3, [r7, #72]	; 0x48
            float theta_180 = std::fabs(theta_t - M_PI);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	4618      	mov	r0, r3
 80088de:	f7f7 fe25 	bl	800052c <__aeabi_f2d>
 80088e2:	a38d      	add	r3, pc, #564	; (adr r3, 8008b18 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f7f7 fcc0 	bl	800026c <__aeabi_dsub>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4692      	mov	sl, r2
 80088f2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80088f6:	4650      	mov	r0, sl
 80088f8:	4659      	mov	r1, fp
 80088fa:	f7f8 f93f 	bl	8000b7c <__aeabi_d2f>
 80088fe:	4603      	mov	r3, r0
 8008900:	647b      	str	r3, [r7, #68]	; 0x44
            float theta_270 = std::fabs(theta_t - 3.0f * M_PI / 2.0f);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	4618      	mov	r0, r3
 8008908:	f7f7 fe10 	bl	800052c <__aeabi_f2d>
 800890c:	a384      	add	r3, pc, #528	; (adr r3, 8008b20 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fcab 	bl	800026c <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4690      	mov	r8, r2
 800891c:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f8 f92a 	bl	8000b7c <__aeabi_d2f>
 8008928:	4603      	mov	r3, r0
 800892a:	643b      	str	r3, [r7, #64]	; 0x40
            float theta_360 = std::fabs(theta_t - 2.0f * M_PI);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	4618      	mov	r0, r3
 8008932:	f7f7 fdfb 	bl	800052c <__aeabi_f2d>
 8008936:	a37c      	add	r3, pc, #496	; (adr r3, 8008b28 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	f7f7 fc96 	bl	800026c <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4614      	mov	r4, r2
 8008946:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800894a:	4620      	mov	r0, r4
 800894c:	4629      	mov	r1, r5
 800894e:	f7f8 f915 	bl	8000b7c <__aeabi_d2f>
 8008952:	4603      	mov	r3, r0
 8008954:	63fb      	str	r3, [r7, #60]	; 0x3c

            float min_theta = std::min({theta_0, theta_90, theta_180, theta_270, theta_360});
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
 800895a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895c:	62bb      	str	r3, [r7, #40]	; 0x28
 800895e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
 8008966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
 800896a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	2305      	movs	r3, #5
 8008972:	623b      	str	r3, [r7, #32]
 8008974:	f107 031c 	add.w	r3, r7, #28
 8008978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800897c:	f003 fb7f 	bl	800c07e <_ZSt3minIfET_St16initializer_listIS0_E>
 8008980:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

            if (min_theta == theta_0) { theta_t = (theta_t + 0.0f) / 2.0f; }
 8008984:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008988:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800898c:	eeb4 7a67 	vcmp.f32	s14, s15
 8008990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008994:	d10e      	bne.n	80089b4 <_ZN3jlb8Odometry10correctionEff+0x17c>
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	edd3 7a04 	vldr	s15, [r3, #16]
 800899c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008b30 <_ZN3jlb8Odometry10correctionEff+0x2f8>
 80089a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80089a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	edc3 7a04 	vstr	s15, [r3, #16]
 80089b2:	e09a      	b.n	8008aea <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_90) { theta_t = (theta_t + M_PI / 2.0f) / 2.0f; }
 80089b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80089b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80089bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80089c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c4:	d11d      	bne.n	8008a02 <_ZN3jlb8Odometry10correctionEff+0x1ca>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7f7 fdae 	bl	800052c <__aeabi_f2d>
 80089d0:	a34f      	add	r3, pc, #316	; (adr r3, 8008b10 <_ZN3jlb8Odometry10correctionEff+0x2d8>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc4b 	bl	8000270 <__adddf3>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089ea:	f7f7 ff21 	bl	8000830 <__aeabi_ddiv>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	f7f8 f8c1 	bl	8000b7c <__aeabi_d2f>
 80089fa:	4602      	mov	r2, r0
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	611a      	str	r2, [r3, #16]
 8008a00:	e073      	b.n	8008aea <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_180) { theta_t = (theta_t + M_PI) / 2.0f; }
 8008a02:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008a06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008a0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8008a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a12:	d11d      	bne.n	8008a50 <_ZN3jlb8Odometry10correctionEff+0x218>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7f7 fd87 	bl	800052c <__aeabi_f2d>
 8008a1e:	a33e      	add	r3, pc, #248	; (adr r3, 8008b18 <_ZN3jlb8Odometry10correctionEff+0x2e0>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fc24 	bl	8000270 <__adddf3>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a38:	f7f7 fefa 	bl	8000830 <__aeabi_ddiv>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4610      	mov	r0, r2
 8008a42:	4619      	mov	r1, r3
 8008a44:	f7f8 f89a 	bl	8000b7c <__aeabi_d2f>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	611a      	str	r2, [r3, #16]
 8008a4e:	e04c      	b.n	8008aea <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_270) { theta_t = (theta_t + 3.0f * M_PI / 2.0f) / 2.0f; }
 8008a50:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008a54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008a58:	eeb4 7a67 	vcmp.f32	s14, s15
 8008a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a60:	d11d      	bne.n	8008a9e <_ZN3jlb8Odometry10correctionEff+0x266>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f7 fd60 	bl	800052c <__aeabi_f2d>
 8008a6c:	a32c      	add	r3, pc, #176	; (adr r3, 8008b20 <_ZN3jlb8Odometry10correctionEff+0x2e8>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fbfd 	bl	8000270 <__adddf3>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	f04f 0200 	mov.w	r2, #0
 8008a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a86:	f7f7 fed3 	bl	8000830 <__aeabi_ddiv>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4619      	mov	r1, r3
 8008a92:	f7f8 f873 	bl	8000b7c <__aeabi_d2f>
 8008a96:	4602      	mov	r2, r0
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	611a      	str	r2, [r3, #16]
 8008a9c:	e025      	b.n	8008aea <_ZN3jlb8Odometry10correctionEff+0x2b2>
            else if (min_theta == theta_360) { theta_t = (theta_t + 2.0f * M_PI) / 2.0f; }
 8008a9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008aa2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008aa6:	eeb4 7a67 	vcmp.f32	s14, s15
 8008aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aae:	d11c      	bne.n	8008aea <_ZN3jlb8Odometry10correctionEff+0x2b2>
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7f7 fd39 	bl	800052c <__aeabi_f2d>
 8008aba:	a31b      	add	r3, pc, #108	; (adr r3, 8008b28 <_ZN3jlb8Odometry10correctionEff+0x2f0>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f7f7 fbd6 	bl	8000270 <__adddf3>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4610      	mov	r0, r2
 8008aca:	4619      	mov	r1, r3
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ad4:	f7f7 feac 	bl	8000830 <__aeabi_ddiv>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4610      	mov	r0, r2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f7f8 f84c 	bl	8000b7c <__aeabi_d2f>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	611a      	str	r2, [r3, #16]

            theta_t = normalize_angle(theta_t);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	edd3 7a04 	vldr	s15, [r3, #16]
 8008af0:	eeb0 0a67 	vmov.f32	s0, s15
 8008af4:	6978      	ldr	r0, [r7, #20]
 8008af6:	f7ff fe67 	bl	80087c8 <_ZN3jlb8Odometry15normalize_angleEf>
 8008afa:	eef0 7a40 	vmov.f32	s15, s0
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	edc3 7a04 	vstr	s15, [r3, #16]
        }
 8008b04:	bf00      	nop
 8008b06:	3750      	adds	r7, #80	; 0x50
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b0e:	bf00      	nop
 8008b10:	54442d18 	.word	0x54442d18
 8008b14:	3ff921fb 	.word	0x3ff921fb
 8008b18:	54442d18 	.word	0x54442d18
 8008b1c:	400921fb 	.word	0x400921fb
 8008b20:	7f3321d2 	.word	0x7f3321d2
 8008b24:	4012d97c 	.word	0x4012d97c
 8008b28:	54442d18 	.word	0x54442d18
 8008b2c:	401921fb 	.word	0x401921fb
 8008b30:	00000000 	.word	0x00000000

08008b34 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>:
        Mission        mission;
        LabyrinthState labyrinth_state;
        FastState      fast_state;
        float          reference_speed = 0.0f;

        CompositeState(FastState fast_state_) : mission{Mission::FAST}, labyrinth_state{LabyrinthState::START}, fast_state{fast_state_}, reference_speed{0.0f} {}
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2201      	movs	r2, #1
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	609a      	str	r2, [r3, #8]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f04f 0200 	mov.w	r2, #0
 8008b56:	60da      	str	r2, [r3, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>:
        CompositeState(LabyrinthState labyrinth_state_) : mission{Mission::LABYRINTH}, labyrinth_state{labyrinth_state_}, fast_state{FastState::FOLLOW_SAFETY_CAR}, reference_speed{0.0f} {}
        CompositeState(Mission mission_, LabyrinthState labyrinth_state_, FastState fast_state_, float reference_speed_)
 8008b66:	b480      	push	{r7}
 8008b68:	b087      	sub	sp, #28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6178      	str	r0, [r7, #20]
 8008b6e:	6139      	str	r1, [r7, #16]
 8008b70:	60fa      	str	r2, [r7, #12]
 8008b72:	60bb      	str	r3, [r7, #8]
 8008b74:	ed87 0a01 	vstr	s0, [r7, #4]
            : mission{mission_}, labyrinth_state{labyrinth_state_}, fast_state{fast_state_}, reference_speed{reference_speed_}
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	609a      	str	r2, [r3, #8]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	60da      	str	r2, [r3, #12]
        {
        }
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	4618      	mov	r0, r3
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>:
        bool    started_state_transition = false;

        [[maybe_unused]] char previous_node = 'U';
        [[maybe_unused]] char next_node     = 'U';

        ASState(Odometry& odometry_, Controller& controller_, Graph& graph_) : odometry{odometry_}, controller{controller_}, graph{graph_} {}
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	605a      	str	r2, [r3, #4]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	609a      	str	r2, [r3, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f04f 0200 	mov.w	r2, #0
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	741a      	strb	r2, [r3, #16]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	745a      	strb	r2, [r3, #17]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	749a      	strb	r2, [r3, #18]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	74da      	strb	r2, [r3, #19]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f04f 0200 	mov.w	r2, #0
 8008be4:	615a      	str	r2, [r3, #20]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	619a      	str	r2, [r3, #24]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	771a      	strb	r2, [r3, #28]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2255      	movs	r2, #85	; 0x55
 8008bf8:	775a      	strb	r2, [r3, #29]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2255      	movs	r2, #85	; 0x55
 8008bfe:	779a      	strb	r2, [r3, #30]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	621a      	str	r2, [r3, #32]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	625a      	str	r2, [r3, #36]	; 0x24
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	629a      	str	r2, [r3, #40]	; 0x28
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>:

        void set_states(const CompositeState state_)
 8008c20:	b084      	sub	sp, #16
 8008c22:	b480      	push	{r7}
 8008c24:	b083      	sub	sp, #12
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	f107 0014 	add.w	r0, r7, #20
 8008c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        {
            mission         = state_.mission;
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	601a      	str	r2, [r3, #0]
            labyrinth_state = state_.labyrinth_state;
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	605a      	str	r2, [r3, #4]
            fast_state      = state_.fast_state;
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	609a      	str	r2, [r3, #8]
        }
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	b004      	add	sp, #16
 8008c50:	4770      	bx	lr

08008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <_ZN3jlb7ASState6updateEv>:

        CompositeState update()
 8008c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6a:	ed2d 8b02 	vpush	{d8}
 8008c6e:	b08f      	sub	sp, #60	; 0x3c
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
        {
#ifndef SIMULATION
            // TODO: add timestamp
            float dt = 0.005f;
 8008c76:	4bc4      	ldr	r3, [pc, #784]	; (8008f88 <_ZN3jlb7ASState6updateEv+0x320>)
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
            auto                   update_timestamp_ = std::chrono::steady_clock::now();
            [[maybe_unused]] float dt                = std::chrono::duration_cast<std::chrono::milliseconds>(update_timestamp_ - prev_update_timestamp_).count() / 1000.0f;
            prev_update_timestamp_                   = update_timestamp_;
#endif

            state_transition_time += dt;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	ed93 7a06 	vldr	s14, [r3, #24]
 8008c80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	edc3 7a06 	vstr	s15, [r3, #24]
            state_time += dt;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	ed93 7a05 	vldr	s14, [r3, #20]
 8008c94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	edc3 7a05 	vstr	s15, [r3, #20]

            switch (mission)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <_ZN3jlb7ASState6updateEv+0x4a>
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	f000 816e 	beq.w	8008f8c <_ZN3jlb7ASState6updateEv+0x324>
                    break;
                }
                default:
                {
                    // this should never happen
                    break;
 8008cb0:	e290      	b.n	80091d4 <_ZN3jlb7ASState6updateEv+0x56c>
                    bool at_decision_point = under_gate || at_cross_section;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	7c1b      	ldrb	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d103      	bne.n	8008cc2 <_ZN3jlb7ASState6updateEv+0x5a>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	7c5b      	ldrb	r3, [r3, #17]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <_ZN3jlb7ASState6updateEv+0x5e>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e000      	b.n	8008cc8 <_ZN3jlb7ASState6updateEv+0x60>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                    if (!prev_at_decision_point && at_decision_point)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	7c9b      	ldrb	r3, [r3, #18]
 8008cd0:	f083 0301 	eor.w	r3, r3, #1
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 814d 	beq.w	8008f76 <_ZN3jlb7ASState6updateEv+0x30e>
 8008cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 8148 	beq.w	8008f76 <_ZN3jlb7ASState6updateEv+0x30e>
                        float inaccuracy = 0.25f;
 8008ce6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                        if (std::sqrt(std::pow(graph[next_node].x - odometry.x_t, 2) + std::pow(graph[next_node].y - odometry.y_t, 2)) < inaccuracy)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	7f9b      	ldrb	r3, [r3, #30]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7ff faad 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d0e:	2002      	movs	r0, #2
 8008d10:	eeb0 0a67 	vmov.f32	s0, s15
 8008d14:	f7f9 f9da 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008d18:	ec55 4b10 	vmov	r4, r5, d0
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	7f9b      	ldrb	r3, [r3, #30]
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7ff fa95 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	edd3 7a03 	vldr	s15, [r3, #12]
 8008d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d3e:	2002      	movs	r0, #2
 8008d40:	eeb0 0a67 	vmov.f32	s0, s15
 8008d44:	f7f9 f9c2 	bl	80020cc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8008d48:	ec53 2b10 	vmov	r2, r3, d0
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	4629      	mov	r1, r5
 8008d50:	f7f7 fa8e 	bl	8000270 <__adddf3>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	ec43 2b17 	vmov	d7, r2, r3
 8008d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8008d60:	eef0 0a67 	vmov.f32	s1, s15
 8008d64:	f017 fb90 	bl	8020488 <sqrt>
 8008d68:	ec55 4b10 	vmov	r4, r5, d0
 8008d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d6e:	f7f7 fbdd 	bl	800052c <__aeabi_f2d>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	2101      	movs	r1, #1
 8008d78:	460e      	mov	r6, r1
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fe9f 	bl	8000ac0 <__aeabi_dcmplt>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <_ZN3jlb7ASState6updateEv+0x124>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	461e      	mov	r6, r3
 8008d8c:	b2f3      	uxtb	r3, r6
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80f1 	beq.w	8008f76 <_ZN3jlb7ASState6updateEv+0x30e>
                            auto at_node = next_node;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	7f9b      	ldrb	r3, [r3, #30]
 8008d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                unsigned long num_neighbors = graph[at_node].edges.size();
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7ff fa55 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008dac:	4603      	mov	r3, r0
 8008dae:	330c      	adds	r3, #12
 8008db0:	4618      	mov	r0, r3
 8008db2:	f003 f981 	bl	800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 8008db6:	6278      	str	r0, [r7, #36]	; 0x24
                                auto          selected_edge = rand() % num_neighbors;
 8008db8:	f019 faea 	bl	8022390 <rand>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dc6:	fb01 f202 	mul.w	r2, r1, r2
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	623b      	str	r3, [r7, #32]
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fa3c 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008dde:	4603      	mov	r3, r0
 8008de0:	330c      	adds	r3, #12
 8008de2:	6a39      	ldr	r1, [r7, #32]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f003 f97d 	bl	800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008dea:	4603      	mov	r3, r0
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b50      	cmp	r3, #80	; 0x50
 8008df0:	d023      	beq.n	8008e3a <_ZN3jlb7ASState6updateEv+0x1d2>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fa2a 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008e02:	4603      	mov	r3, r0
 8008e04:	330c      	adds	r3, #12
 8008e06:	6a39      	ldr	r1, [r7, #32]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f003 f96b 	bl	800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b55      	cmp	r3, #85	; 0x55
 8008e14:	d011      	beq.n	8008e3a <_ZN3jlb7ASState6updateEv+0x1d2>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fa18 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008e26:	4603      	mov	r3, r0
 8008e28:	330c      	adds	r3, #12
 8008e2a:	6a39      	ldr	r1, [r7, #32]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f003 f959 	bl	800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008e32:	4603      	mov	r3, r0
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b58      	cmp	r3, #88	; 0x58
 8008e38:	d101      	bne.n	8008e3e <_ZN3jlb7ASState6updateEv+0x1d6>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <_ZN3jlb7ASState6updateEv+0x1d8>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f040 8096 	bne.w	8008f72 <_ZN3jlb7ASState6updateEv+0x30a>
                                auto prev_nodes = graph[at_node].edges[selected_edge].prev_nodes;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008e4e:	4611      	mov	r1, r2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7ff fa00 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008e56:	4603      	mov	r3, r0
 8008e58:	330c      	adds	r3, #12
 8008e5a:	6a39      	ldr	r1, [r7, #32]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f003 f941 	bl	800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f103 0208 	add.w	r2, r3, #8
 8008e68:	f107 030c 	add.w	r3, r7, #12
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f002 feed 	bl	800bc4e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
                                if (std::find(prev_nodes.begin(), prev_nodes.end(), previous_node) != prev_nodes.end())
 8008e74:	f107 030c 	add.w	r3, r7, #12
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f003 f946 	bl	800c10a <_ZNSt6vectorIcSaIcEE5beginEv>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	f107 030c 	add.w	r3, r7, #12
 8008e84:	4618      	mov	r0, r3
 8008e86:	f003 f950 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	331d      	adds	r3, #29
 8008e90:	461a      	mov	r2, r3
 8008e92:	4620      	mov	r0, r4
 8008e94:	f003 f95a 	bl	800c14c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f003 f942 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	f107 021c 	add.w	r2, r7, #28
 8008eae:	f107 0318 	add.w	r3, r7, #24
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f003 f95d 	bl	800c174 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	f083 0301 	eor.w	r3, r3, #1
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d04c      	beq.n	8008f60 <_ZN3jlb7ASState6updateEv+0x2f8>
                                    next_node     = graph[at_node].edges[selected_edge].node;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff f9c0 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	330c      	adds	r3, #12
 8008eda:	6a39      	ldr	r1, [r7, #32]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f003 f901 	bl	800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	781a      	ldrb	r2, [r3, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	779a      	strb	r2, [r3, #30]
                                    previous_node = at_node;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008ef0:	775a      	strb	r2, [r3, #29]
                                    controller.set_direction(graph[at_node].edges[selected_edge].direction);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff f9a8 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008f06:	4603      	mov	r3, r0
 8008f08:	330c      	adds	r3, #12
 8008f0a:	6a39      	ldr	r1, [r7, #32]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f003 f8e9 	bl	800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>
 8008f12:	4603      	mov	r3, r0
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4619      	mov	r1, r3
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f7fb fe96 	bl	8004c4a <_ZN3jlb10Controller13set_directionENS_9DirectionE>
                                    odometry.correction(graph[previous_node].x, graph[previous_node].y);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6a1c      	ldr	r4, [r3, #32]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	7f5b      	ldrb	r3, [r3, #29]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7ff f992 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008f32:	4603      	mov	r3, r0
 8008f34:	ed93 8a01 	vldr	s16, [r3, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	7f5b      	ldrb	r3, [r3, #29]
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f7ff f987 	bl	8008256 <_ZN3jlb5GraphixEc>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008f4e:	eef0 0a67 	vmov.f32	s1, s15
 8008f52:	eeb0 0a48 	vmov.f32	s0, s16
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff fc6e 	bl	8008838 <_ZN3jlb8Odometry10correctionEff>
                                    break;
 8008f5c:	2400      	movs	r4, #0
 8008f5e:	e000      	b.n	8008f62 <_ZN3jlb7ASState6updateEv+0x2fa>
                            }
 8008f60:	2401      	movs	r4, #1
 8008f62:	f107 030c 	add.w	r3, r7, #12
 8008f66:	4618      	mov	r0, r3
 8008f68:	f002 feae 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
 8008f6c:	2c01      	cmp	r4, #1
 8008f6e:	d102      	bne.n	8008f76 <_ZN3jlb7ASState6updateEv+0x30e>
 8008f70:	e000      	b.n	8008f74 <_ZN3jlb7ASState6updateEv+0x30c>
                                if (graph[at_node].edges[selected_edge].node == 'P' || graph[at_node].edges[selected_edge].node == 'U' || graph[at_node].edges[selected_edge].node == 'X') { continue; }
 8008f72:	bf00      	nop
                            }
 8008f74:	e712      	b.n	8008d9c <_ZN3jlb7ASState6updateEv+0x134>
                    prev_at_decision_point = at_decision_point;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008f7c:	749a      	strb	r2, [r3, #18]
                    reference_speed = LABYRINTH_SPEED;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008f84:	60da      	str	r2, [r3, #12]
                    break;
 8008f86:	e125      	b.n	80091d4 <_ZN3jlb7ASState6updateEv+0x56c>
 8008f88:	3ba3d70a 	.word	0x3ba3d70a
                    switch (fast_state)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2b06      	cmp	r3, #6
 8008f92:	f200 811d 	bhi.w	80091d0 <_ZN3jlb7ASState6updateEv+0x568>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <_ZN3jlb7ASState6updateEv+0x334>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fb9 	.word	0x08008fb9
 8008fa0:	08008fc1 	.word	0x08008fc1
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08009051 	.word	0x08009051
 8008fb0:	080090d1 	.word	0x080090d1
 8008fb4:	08009151 	.word	0x08009151
                            reference_speed = FAST_SPEED_SAFETY_CAR;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	4a91      	ldr	r2, [pc, #580]	; (8009200 <_ZN3jlb7ASState6updateEv+0x598>)
 8008fbc:	60da      	str	r2, [r3, #12]
                            break;
 8008fbe:	e108      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            reference_speed = FAST_SPEED_OVERTAKE;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	4a90      	ldr	r2, [pc, #576]	; (8009204 <_ZN3jlb7ASState6updateEv+0x59c>)
 8008fc4:	60da      	str	r2, [r3, #12]
                            break;
 8008fc6:	e104      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            reference_speed = FAST_SPEED;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	4a8f      	ldr	r2, [pc, #572]	; (8009208 <_ZN3jlb7ASState6updateEv+0x5a0>)
 8008fcc:	60da      	str	r2, [r3, #12]
                            break;
 8008fce:	e100      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            if (current_number_of_lines == 1u && !started_state_transition)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	7cdb      	ldrb	r3, [r3, #19]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d10e      	bne.n	8008ff6 <_ZN3jlb7ASState6updateEv+0x38e>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	7f1b      	ldrb	r3, [r3, #28]
 8008fdc:	f083 0301 	eor.w	r3, r3, #1
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d007      	beq.n	8008ff6 <_ZN3jlb7ASState6updateEv+0x38e>
                                started_state_transition = true;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	f04f 0200 	mov.w	r2, #0
 8008ff2:	619a      	str	r2, [r3, #24]
 8008ff4:	e00a      	b.n	800900c <_ZN3jlb7ASState6updateEv+0x3a4>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	7cdb      	ldrb	r3, [r3, #19]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d006      	beq.n	800900c <_ZN3jlb7ASState6updateEv+0x3a4>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	7f1b      	ldrb	r3, [r3, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <_ZN3jlb7ASState6updateEv+0x3a4>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2200      	movs	r2, #0
 800900a:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	7f1b      	ldrb	r3, [r3, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d019      	beq.n	8009048 <_ZN3jlb7ASState6updateEv+0x3e0>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	edd3 7a06 	vldr	s15, [r3, #24]
 800901a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800901e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009022:	dd11      	ble.n	8009048 <_ZN3jlb7ASState6updateEv+0x3e0>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	edd3 7a05 	vldr	s15, [r3, #20]
 800902a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800902e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009036:	dd07      	ble.n	8009048 <_ZN3jlb7ASState6updateEv+0x3e0>
                                fast_state = FastState::OUT_ACCEL_ZONE;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2204      	movs	r2, #4
 800903c:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	615a      	str	r2, [r3, #20]
                                break;
 8009046:	e0c4      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            reference_speed = FAST_SPEED;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	4a6f      	ldr	r2, [pc, #444]	; (8009208 <_ZN3jlb7ASState6updateEv+0x5a0>)
 800904c:	60da      	str	r2, [r3, #12]
                            break;
 800904e:	e0c0      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	7cdb      	ldrb	r3, [r3, #19]
 8009054:	2b03      	cmp	r3, #3
 8009056:	d10e      	bne.n	8009076 <_ZN3jlb7ASState6updateEv+0x40e>
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	7f1b      	ldrb	r3, [r3, #28]
 800905c:	f083 0301 	eor.w	r3, r3, #1
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d007      	beq.n	8009076 <_ZN3jlb7ASState6updateEv+0x40e>
                                started_state_transition = true;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2201      	movs	r2, #1
 800906a:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	619a      	str	r2, [r3, #24]
 8009074:	e00a      	b.n	800908c <_ZN3jlb7ASState6updateEv+0x424>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	7cdb      	ldrb	r3, [r3, #19]
 800907a:	2b03      	cmp	r3, #3
 800907c:	d006      	beq.n	800908c <_ZN3jlb7ASState6updateEv+0x424>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	7f1b      	ldrb	r3, [r3, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <_ZN3jlb7ASState6updateEv+0x424>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2200      	movs	r2, #0
 800908a:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	7f1b      	ldrb	r3, [r3, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d019      	beq.n	80090c8 <_ZN3jlb7ASState6updateEv+0x460>
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	edd3 7a06 	vldr	s15, [r3, #24]
 800909a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800909e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a2:	dd11      	ble.n	80090c8 <_ZN3jlb7ASState6updateEv+0x460>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80090aa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80090ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b6:	dd07      	ble.n	80090c8 <_ZN3jlb7ASState6updateEv+0x460>
                                fast_state = FastState::IN_BRAKE_ZONE;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2205      	movs	r2, #5
 80090bc:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	615a      	str	r2, [r3, #20]
                                break;
 80090c6:	e084      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            reference_speed = FAST_SPEED;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	4a4f      	ldr	r2, [pc, #316]	; (8009208 <_ZN3jlb7ASState6updateEv+0x5a0>)
 80090cc:	60da      	str	r2, [r3, #12]
                            break;
 80090ce:	e080      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            if (current_number_of_lines == 1u && !started_state_transition)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	7cdb      	ldrb	r3, [r3, #19]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d10e      	bne.n	80090f6 <_ZN3jlb7ASState6updateEv+0x48e>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	7f1b      	ldrb	r3, [r3, #28]
 80090dc:	f083 0301 	eor.w	r3, r3, #1
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <_ZN3jlb7ASState6updateEv+0x48e>
                                started_state_transition = true;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2201      	movs	r2, #1
 80090ea:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f04f 0200 	mov.w	r2, #0
 80090f2:	619a      	str	r2, [r3, #24]
 80090f4:	e00a      	b.n	800910c <_ZN3jlb7ASState6updateEv+0x4a4>
                            else if (current_number_of_lines != 1u && started_state_transition) { started_state_transition = false; }
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	7cdb      	ldrb	r3, [r3, #19]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d006      	beq.n	800910c <_ZN3jlb7ASState6updateEv+0x4a4>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	7f1b      	ldrb	r3, [r3, #28]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <_ZN3jlb7ASState6updateEv+0x4a4>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2200      	movs	r2, #0
 800910a:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	7f1b      	ldrb	r3, [r3, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d019      	beq.n	8009148 <_ZN3jlb7ASState6updateEv+0x4e0>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	edd3 7a06 	vldr	s15, [r3, #24]
 800911a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	dd11      	ble.n	8009148 <_ZN3jlb7ASState6updateEv+0x4e0>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	edd3 7a05 	vldr	s15, [r3, #20]
 800912a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800912e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009136:	dd07      	ble.n	8009148 <_ZN3jlb7ASState6updateEv+0x4e0>
                                fast_state = FastState::OUT_BRAKE_ZONE;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2206      	movs	r2, #6
 800913c:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	615a      	str	r2, [r3, #20]
                                break;
 8009146:	e044      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            reference_speed = FAST_SPEED_TURN;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	4a2e      	ldr	r2, [pc, #184]	; (8009204 <_ZN3jlb7ASState6updateEv+0x59c>)
 800914c:	60da      	str	r2, [r3, #12]
                            break;
 800914e:	e040      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            if (current_number_of_lines == 3u && !started_state_transition)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	7cdb      	ldrb	r3, [r3, #19]
 8009154:	2b03      	cmp	r3, #3
 8009156:	d10e      	bne.n	8009176 <_ZN3jlb7ASState6updateEv+0x50e>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	7f1b      	ldrb	r3, [r3, #28]
 800915c:	f083 0301 	eor.w	r3, r3, #1
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <_ZN3jlb7ASState6updateEv+0x50e>
                                started_state_transition = true;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2201      	movs	r2, #1
 800916a:	771a      	strb	r2, [r3, #28]
                                state_transition_time    = 0.0f;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	f04f 0200 	mov.w	r2, #0
 8009172:	619a      	str	r2, [r3, #24]
 8009174:	e00a      	b.n	800918c <_ZN3jlb7ASState6updateEv+0x524>
                            else if (current_number_of_lines != 3u && started_state_transition) { started_state_transition = false; }
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	7cdb      	ldrb	r3, [r3, #19]
 800917a:	2b03      	cmp	r3, #3
 800917c:	d006      	beq.n	800918c <_ZN3jlb7ASState6updateEv+0x524>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	7f1b      	ldrb	r3, [r3, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <_ZN3jlb7ASState6updateEv+0x524>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2200      	movs	r2, #0
 800918a:	771a      	strb	r2, [r3, #28]
                            if (started_state_transition && state_transition_time > STATE_TRANSITION_TIME_LIMIT && state_time > STATE_MIN_TIME)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	7f1b      	ldrb	r3, [r3, #28]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d019      	beq.n	80091c8 <_ZN3jlb7ASState6updateEv+0x560>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	edd3 7a06 	vldr	s15, [r3, #24]
 800919a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800919e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a2:	dd11      	ble.n	80091c8 <_ZN3jlb7ASState6updateEv+0x560>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80091aa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80091ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b6:	dd07      	ble.n	80091c8 <_ZN3jlb7ASState6updateEv+0x560>
                                fast_state = FastState::IN_ACCEL_ZONE;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2203      	movs	r2, #3
 80091bc:	609a      	str	r2, [r3, #8]
                                state_time = 0.0f;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	f04f 0200 	mov.w	r2, #0
 80091c4:	615a      	str	r2, [r3, #20]
                                break;
 80091c6:	e004      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            reference_speed = FAST_SPEED_TURN;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	4a0e      	ldr	r2, [pc, #56]	; (8009204 <_ZN3jlb7ASState6updateEv+0x59c>)
 80091cc:	60da      	str	r2, [r3, #12]
                            break;
 80091ce:	e000      	b.n	80091d2 <_ZN3jlb7ASState6updateEv+0x56a>
                            break;
 80091d0:	bf00      	nop
                    break;
 80091d2:	bf00      	nop
                }
            }

            return CompositeState{mission, labyrinth_state, fast_state, reference_speed};
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	6819      	ldr	r1, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	6898      	ldr	r0, [r3, #8]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80091e6:	eeb0 0a67 	vmov.f32	s0, s15
 80091ea:	4603      	mov	r3, r0
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff fcba 	bl	8008b66 <_ZN3jlb14CompositeStateC1ENS_7MissionENS_14LabyrinthStateENS_9FastStateEf>
        }
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	373c      	adds	r7, #60	; 0x3c
 80091f6:	46bd      	mov	sp, r7
 80091f8:	ecbd 8b02 	vpop	{d8}
 80091fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fe:	bf00      	nop
 8009200:	40400000 	.word	0x40400000
 8009204:	40a00000 	.word	0x40a00000
 8009208:	41700000 	.word	0x41700000

0800920c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f017 f888 	bl	802032a <_ZNSaIcED1Ev>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base() = default;
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4618      	mov	r0, r3
 8009230:	f002 ffb8 	bl	800c1a4 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <_ZNSt6vectorIcSaIcEEC1Ev>:
      vector() = default;
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff ffeb 	bl	8009224 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4618      	mov	r0, r3
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphE>:

                std::vector<char> telemetry_data;

#ifndef SIMULATION
                // TODO: initialize UDPClient for STM32
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_) : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_)
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff ffd6 	bl	800923e <_ZNSt6vectorIcSaIcEEC1Ev>
                {
                }
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <_ZN3jlb12SignalSenderD1Ev>:
                SignalSender(const Odometry &odometry_, const Controller &controller_, const ASState &as_state_, const Graph &graph_) : odometry(odometry_), controller(controller_), as_state(as_state_), graph(graph_), client(SENDER_ADDRESS, SENDER_PORT)
                {
                }
#endif

                ~SignalSender()
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
                {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80092aa:	4618      	mov	r0, r3
 80092ac:	f002 fd0c 	bl	800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>
                }
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <_ZN3jlb12SignalSender14send_telemetryEv>:

                void send_telemetry()
 80092ba:	b590      	push	{r4, r7, lr}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
                {
                        telemetry_data.clear();
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 ff93 	bl	800c1f4 <_ZNSt6vectorIcSaIcEE5clearEv>

                        measurements_1();
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f846 	bl	8009360 <_ZN3jlb12SignalSender14measurements_1Ev>
                        measurements_2();
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fde0 	bl	8009e9a <_ZN3jlb12SignalSender14measurements_2Ev>
                        measurements_3();
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 fcfc 	bl	800acd8 <_ZN3jlb12SignalSender14measurements_3Ev>
                        measurements_4();
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 fd5c 	bl	800ad9e <_ZN3jlb12SignalSender14measurements_4Ev>
                        measurements_5();
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fdbc 	bl	800ae64 <_ZN3jlb12SignalSender14measurements_5Ev>
                        odometry_1();
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fe10 	bl	800af12 <_ZN3jlb12SignalSender10odometry_1Ev>
                        odometry_2();
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f001 fe70 	bl	800afd8 <_ZN3jlb12SignalSender10odometry_2Ev>
                        logic_1();
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fec4 	bl	800b086 <_ZN3jlb12SignalSender7logic_1Ev>
                        logic_2();
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 ff30 	bl	800b164 <_ZN3jlb12SignalSender7logic_2Ev>

                        send(telemetry_data.data(), telemetry_data.size());
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800930a:	4618      	mov	r0, r3
 800930c:	f002 ff80 	bl	800c210 <_ZNSt6vectorIcSaIcEE4dataEv>
 8009310:	4604      	mov	r4, r0
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009318:	4618      	mov	r0, r3
 800931a:	f002 ff88 	bl	800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800931e:	4603      	mov	r3, r0
 8009320:	461a      	mov	r2, r3
 8009322:	4621      	mov	r1, r4
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f805 	bl	8009334 <_ZN3jlb12SignalSender4sendEPcj>
                }
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bd90      	pop	{r4, r7, pc}
	...

08009334 <_ZN3jlb12SignalSender4sendEPcj>:
                // TODO: add UDPClient for STM32
#else
                UDPClient client;
#endif

                int send([[maybe_unused]] char *msg, [[maybe_unused]] size_t max_size)
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
                {
#ifndef SIMULATION
                        HAL_UART_Transmit(&huart2, reinterpret_cast<uint8_t *>(msg), max_size, HAL_MAX_DELAY);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	b29a      	uxth	r2, r3
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	68b9      	ldr	r1, [r7, #8]
 800934a:	4804      	ldr	r0, [pc, #16]	; (800935c <_ZN3jlb12SignalSender4sendEPcj+0x28>)
 800934c:	f012 f898 	bl	801b480 <HAL_UART_Transmit>
                        return 0;
 8009350:	2300      	movs	r3, #0
#else
                        return client.send(msg, max_size);
#endif
                }
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20000884 	.word	0x20000884

08009360 <_ZN3jlb12SignalSender14measurements_1Ev>:

                void measurements_1()
 8009360:	b590      	push	{r4, r7, lr}
 8009362:	b089      	sub	sp, #36	; 0x24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_1.line_sensor_1 = 0 == controller.selected_front ? controller.detection_front[0] + 2.0f : controller.detection_front[0];
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d113      	bne.n	800939c <_ZN3jlb12SignalSender14measurements_1Ev+0x3c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800937a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009386:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800938a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800938e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009392:	edc7 7a00 	vstr	s15, [r7]
 8009396:	783b      	ldrb	r3, [r7, #0]
 8009398:	b2db      	uxtb	r3, r3
 800939a:	e00e      	b.n	80093ba <_ZN3jlb12SignalSender14measurements_1Ev+0x5a>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b2:	edc7 7a00 	vstr	s15, [r7]
 80093b6:	783b      	ldrb	r3, [r7, #0]
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	7013      	strb	r3, [r2, #0]
                        jlb_rx.measurements_1.line_sensor_2 = 1 == controller.selected_front ? controller.detection_front[1] + 2.0f : controller.detection_front[1];
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d113      	bne.n	80093f2 <_ZN3jlb12SignalSender14measurements_1Ev+0x92>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80093d4:	ee07 3a90 	vmov	s15, r3
 80093d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80093e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e8:	edc7 7a00 	vstr	s15, [r7]
 80093ec:	783b      	ldrb	r3, [r7, #0]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	e00e      	b.n	8009410 <_ZN3jlb12SignalSender14measurements_1Ev+0xb0>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80093f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009408:	edc7 7a00 	vstr	s15, [r7]
 800940c:	783b      	ldrb	r3, [r7, #0]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	7053      	strb	r3, [r2, #1]
                        jlb_rx.measurements_1.line_sensor_3 = 2 == controller.selected_front ? controller.detection_front[2] + 2.0f : controller.detection_front[2];
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d113      	bne.n	8009448 <_ZN3jlb12SignalSender14measurements_1Ev+0xe8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009426:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009432:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009436:	ee77 7a87 	vadd.f32	s15, s15, s14
 800943a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800943e:	edc7 7a00 	vstr	s15, [r7]
 8009442:	783b      	ldrb	r3, [r7, #0]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	e00e      	b.n	8009466 <_ZN3jlb12SignalSender14measurements_1Ev+0x106>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800944e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800945e:	edc7 7a00 	vstr	s15, [r7]
 8009462:	783b      	ldrb	r3, [r7, #0]
 8009464:	b2db      	uxtb	r3, r3
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	7093      	strb	r3, [r2, #2]
                        jlb_rx.measurements_1.line_sensor_4 = 3 == controller.selected_front ? controller.detection_front[3] + 2.0f : controller.detection_front[3];
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b03      	cmp	r3, #3
 8009474:	d113      	bne.n	800949e <_ZN3jlb12SignalSender14measurements_1Ev+0x13e>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800947c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009480:	ee07 3a90 	vmov	s15, r3
 8009484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009488:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800948c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009494:	edc7 7a00 	vstr	s15, [r7]
 8009498:	783b      	ldrb	r3, [r7, #0]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	e00e      	b.n	80094bc <_ZN3jlb12SignalSender14measurements_1Ev+0x15c>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80094a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80094a8:	ee07 3a90 	vmov	s15, r3
 80094ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b4:	edc7 7a00 	vstr	s15, [r7]
 80094b8:	783b      	ldrb	r3, [r7, #0]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	70d3      	strb	r3, [r2, #3]
                        jlb_rx.measurements_1.line_sensor_5 = 4 == controller.selected_front ? controller.detection_front[4] + 2.0f : controller.detection_front[4];
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d113      	bne.n	80094f4 <_ZN3jlb12SignalSender14measurements_1Ev+0x194>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80094d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ea:	edc7 7a00 	vstr	s15, [r7]
 80094ee:	783b      	ldrb	r3, [r7, #0]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	e00e      	b.n	8009512 <_ZN3jlb12SignalSender14measurements_1Ev+0x1b2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80094fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950a:	edc7 7a00 	vstr	s15, [r7]
 800950e:	783b      	ldrb	r3, [r7, #0]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	7113      	strb	r3, [r2, #4]
                        jlb_rx.measurements_1.line_sensor_6 = 5 == controller.selected_front ? controller.detection_front[5] + 2.0f : controller.detection_front[5];
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b05      	cmp	r3, #5
 8009520:	d113      	bne.n	800954a <_ZN3jlb12SignalSender14measurements_1Ev+0x1ea>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009534:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800953c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009540:	edc7 7a00 	vstr	s15, [r7]
 8009544:	783b      	ldrb	r3, [r7, #0]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	e00e      	b.n	8009568 <_ZN3jlb12SignalSender14measurements_1Ev+0x208>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009554:	ee07 3a90 	vmov	s15, r3
 8009558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009560:	edc7 7a00 	vstr	s15, [r7]
 8009564:	783b      	ldrb	r3, [r7, #0]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7153      	strb	r3, [r2, #5]
                        jlb_rx.measurements_1.line_sensor_7 = 6 == controller.selected_front ? controller.detection_front[6] + 2.0f : controller.detection_front[6];
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b06      	cmp	r3, #6
 8009576:	d113      	bne.n	80095a0 <_ZN3jlb12SignalSender14measurements_1Ev+0x240>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800957e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800958a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800958e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009596:	edc7 7a00 	vstr	s15, [r7]
 800959a:	783b      	ldrb	r3, [r7, #0]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	e00e      	b.n	80095be <_ZN3jlb12SignalSender14measurements_1Ev+0x25e>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80095a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80095aa:	ee07 3a90 	vmov	s15, r3
 80095ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b6:	edc7 7a00 	vstr	s15, [r7]
 80095ba:	783b      	ldrb	r3, [r7, #0]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	7193      	strb	r3, [r2, #6]
                        jlb_rx.measurements_1.line_sensor_8 = 7 == controller.selected_front ? controller.detection_front[7] + 2.0f : controller.detection_front[7];
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b07      	cmp	r3, #7
 80095cc:	d113      	bne.n	80095f6 <_ZN3jlb12SignalSender14measurements_1Ev+0x296>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80095d4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80095e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ec:	edc7 7a00 	vstr	s15, [r7]
 80095f0:	783b      	ldrb	r3, [r7, #0]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	e00e      	b.n	8009614 <_ZN3jlb12SignalSender14measurements_1Ev+0x2b4>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80095fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800960c:	edc7 7a00 	vstr	s15, [r7]
 8009610:	783b      	ldrb	r3, [r7, #0]
 8009612:	b2db      	uxtb	r3, r3
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	71d3      	strb	r3, [r2, #7]
                        jlb_rx.measurements_1.line_sensor_9 = 8 == controller.selected_front ? controller.detection_front[8] + 2.0f : controller.detection_front[8];
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b08      	cmp	r3, #8
 8009622:	d113      	bne.n	800964c <_ZN3jlb12SignalSender14measurements_1Ev+0x2ec>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800962a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009636:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800963a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800963e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009642:	edc7 7a00 	vstr	s15, [r7]
 8009646:	783b      	ldrb	r3, [r7, #0]
 8009648:	b2db      	uxtb	r3, r3
 800964a:	e00e      	b.n	800966a <_ZN3jlb12SignalSender14measurements_1Ev+0x30a>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009652:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009662:	edc7 7a00 	vstr	s15, [r7]
 8009666:	783b      	ldrb	r3, [r7, #0]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	7213      	strb	r3, [r2, #8]
                        jlb_rx.measurements_1.line_sensor_10 = 9 == controller.selected_front ? controller.detection_front[9] + 2.0f : controller.detection_front[9];
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b09      	cmp	r3, #9
 8009678:	d113      	bne.n	80096a2 <_ZN3jlb12SignalSender14measurements_1Ev+0x342>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009684:	ee07 3a90 	vmov	s15, r3
 8009688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800968c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009698:	edc7 7a00 	vstr	s15, [r7]
 800969c:	783b      	ldrb	r3, [r7, #0]
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	e00e      	b.n	80096c0 <_ZN3jlb12SignalSender14measurements_1Ev+0x360>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80096a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096ac:	ee07 3a90 	vmov	s15, r3
 80096b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b8:	edc7 7a00 	vstr	s15, [r7]
 80096bc:	783b      	ldrb	r3, [r7, #0]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	7253      	strb	r3, [r2, #9]
                        jlb_rx.measurements_1.line_sensor_11 = 10 == controller.selected_front ? controller.detection_front[10] + 2.0f : controller.detection_front[10];
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b0a      	cmp	r3, #10
 80096ce:	d113      	bne.n	80096f8 <_ZN3jlb12SignalSender14measurements_1Ev+0x398>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80096d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ee:	edc7 7a00 	vstr	s15, [r7]
 80096f2:	783b      	ldrb	r3, [r7, #0]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	e00e      	b.n	8009716 <_ZN3jlb12SignalSender14measurements_1Ev+0x3b6>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80096fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800970e:	edc7 7a00 	vstr	s15, [r7]
 8009712:	783b      	ldrb	r3, [r7, #0]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	7293      	strb	r3, [r2, #10]
                        jlb_rx.measurements_1.line_sensor_12 = 11 == controller.selected_front ? controller.detection_front[11] + 2.0f : controller.detection_front[11];
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b0b      	cmp	r3, #11
 8009724:	d113      	bne.n	800974e <_ZN3jlb12SignalSender14measurements_1Ev+0x3ee>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800972c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009730:	ee07 3a90 	vmov	s15, r3
 8009734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009738:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800973c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009744:	edc7 7a00 	vstr	s15, [r7]
 8009748:	783b      	ldrb	r3, [r7, #0]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	e00e      	b.n	800976c <_ZN3jlb12SignalSender14measurements_1Ev+0x40c>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009754:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009758:	ee07 3a90 	vmov	s15, r3
 800975c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009764:	edc7 7a00 	vstr	s15, [r7]
 8009768:	783b      	ldrb	r3, [r7, #0]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	72d3      	strb	r3, [r2, #11]
                        jlb_rx.measurements_1.line_sensor_13 = 12 == controller.selected_front ? controller.detection_front[12] + 2.0f : controller.detection_front[12];
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b0c      	cmp	r3, #12
 800977a:	d113      	bne.n	80097a4 <_ZN3jlb12SignalSender14measurements_1Ev+0x444>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800978e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979a:	edc7 7a00 	vstr	s15, [r7]
 800979e:	783b      	ldrb	r3, [r7, #0]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	e00e      	b.n	80097c2 <_ZN3jlb12SignalSender14measurements_1Ev+0x462>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80097aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ba:	edc7 7a00 	vstr	s15, [r7]
 80097be:	783b      	ldrb	r3, [r7, #0]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	7313      	strb	r3, [r2, #12]
                        jlb_rx.measurements_1.line_sensor_14 = 13 == controller.selected_front ? controller.detection_front[13] + 2.0f : controller.detection_front[13];
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b0d      	cmp	r3, #13
 80097d0:	d113      	bne.n	80097fa <_ZN3jlb12SignalSender14measurements_1Ev+0x49a>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80097d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80097e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f0:	edc7 7a00 	vstr	s15, [r7]
 80097f4:	783b      	ldrb	r3, [r7, #0]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	e00e      	b.n	8009818 <_ZN3jlb12SignalSender14measurements_1Ev+0x4b8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009804:	ee07 3a90 	vmov	s15, r3
 8009808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009810:	edc7 7a00 	vstr	s15, [r7]
 8009814:	783b      	ldrb	r3, [r7, #0]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7353      	strb	r3, [r2, #13]
                        jlb_rx.measurements_1.line_sensor_15 = 14 == controller.selected_front ? controller.detection_front[14] + 2.0f : controller.detection_front[14];
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b0e      	cmp	r3, #14
 8009826:	d113      	bne.n	8009850 <_ZN3jlb12SignalSender14measurements_1Ev+0x4f0>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800982e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009832:	ee07 3a90 	vmov	s15, r3
 8009836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800983a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800983e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009846:	edc7 7a00 	vstr	s15, [r7]
 800984a:	783b      	ldrb	r3, [r7, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	e00e      	b.n	800986e <_ZN3jlb12SignalSender14measurements_1Ev+0x50e>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009866:	edc7 7a00 	vstr	s15, [r7]
 800986a:	783b      	ldrb	r3, [r7, #0]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	7393      	strb	r3, [r2, #14]
                        jlb_rx.measurements_1.line_sensor_16 = 15 == controller.selected_front ? controller.detection_front[15] + 2.0f : controller.detection_front[15];
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b0f      	cmp	r3, #15
 800987c:	d113      	bne.n	80098a6 <_ZN3jlb12SignalSender14measurements_1Ev+0x546>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009888:	ee07 3a90 	vmov	s15, r3
 800988c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009890:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009894:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800989c:	edc7 7a00 	vstr	s15, [r7]
 80098a0:	783b      	ldrb	r3, [r7, #0]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	e00e      	b.n	80098c4 <_ZN3jlb12SignalSender14measurements_1Ev+0x564>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098b0:	ee07 3a90 	vmov	s15, r3
 80098b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098bc:	edc7 7a00 	vstr	s15, [r7]
 80098c0:	783b      	ldrb	r3, [r7, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	73d3      	strb	r3, [r2, #15]
#ifndef SIMULATION
                        jlb_rx.measurements_1.line_sensor_17 = 16 == controller.selected_front ? controller.detection_front[16] + 2.0f : controller.detection_front[16];
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b10      	cmp	r3, #16
 80098d2:	d113      	bne.n	80098fc <_ZN3jlb12SignalSender14measurements_1Ev+0x59c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80098da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80098ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f2:	edc7 7a00 	vstr	s15, [r7]
 80098f6:	783b      	ldrb	r3, [r7, #0]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	e00e      	b.n	800991a <_ZN3jlb12SignalSender14measurements_1Ev+0x5ba>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009906:	ee07 3a90 	vmov	s15, r3
 800990a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009912:	edc7 7a00 	vstr	s15, [r7]
 8009916:	783b      	ldrb	r3, [r7, #0]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	7413      	strb	r3, [r2, #16]
                        jlb_rx.measurements_1.line_sensor_18 = 17 == controller.selected_front ? controller.detection_front[17] + 2.0f : controller.detection_front[17];
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b11      	cmp	r3, #17
 8009928:	d113      	bne.n	8009952 <_ZN3jlb12SignalSender14measurements_1Ev+0x5f2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009934:	ee07 3a90 	vmov	s15, r3
 8009938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800993c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009948:	edc7 7a00 	vstr	s15, [r7]
 800994c:	783b      	ldrb	r3, [r7, #0]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	e00e      	b.n	8009970 <_ZN3jlb12SignalSender14measurements_1Ev+0x610>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009968:	edc7 7a00 	vstr	s15, [r7]
 800996c:	783b      	ldrb	r3, [r7, #0]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7453      	strb	r3, [r2, #17]
                        jlb_rx.measurements_1.line_sensor_19 = 18 == controller.selected_front ? controller.detection_front[18] + 2.0f : controller.detection_front[18];
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b12      	cmp	r3, #18
 800997e:	d113      	bne.n	80099a8 <_ZN3jlb12SignalSender14measurements_1Ev+0x648>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009992:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800999a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800999e:	edc7 7a00 	vstr	s15, [r7]
 80099a2:	783b      	ldrb	r3, [r7, #0]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	e00e      	b.n	80099c6 <_ZN3jlb12SignalSender14measurements_1Ev+0x666>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80099ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099b2:	ee07 3a90 	vmov	s15, r3
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099be:	edc7 7a00 	vstr	s15, [r7]
 80099c2:	783b      	ldrb	r3, [r7, #0]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	7493      	strb	r3, [r2, #18]
                        jlb_rx.measurements_1.line_sensor_20 = 19 == controller.selected_front ? controller.detection_front[19] + 2.0f : controller.detection_front[19];
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b13      	cmp	r3, #19
 80099d4:	d113      	bne.n	80099fe <_ZN3jlb12SignalSender14measurements_1Ev+0x69e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80099dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099e0:	ee07 3a90 	vmov	s15, r3
 80099e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80099ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f4:	edc7 7a00 	vstr	s15, [r7]
 80099f8:	783b      	ldrb	r3, [r7, #0]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	e00e      	b.n	8009a1c <_ZN3jlb12SignalSender14measurements_1Ev+0x6bc>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009a04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a08:	ee07 3a90 	vmov	s15, r3
 8009a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a14:	edc7 7a00 	vstr	s15, [r7]
 8009a18:	783b      	ldrb	r3, [r7, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	74d3      	strb	r3, [r2, #19]
                        jlb_rx.measurements_1.line_sensor_21 = 20 == controller.selected_front ? controller.detection_front[20] + 2.0f : controller.detection_front[20];
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b14      	cmp	r3, #20
 8009a2a:	d113      	bne.n	8009a54 <_ZN3jlb12SignalSender14measurements_1Ev+0x6f4>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a3e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a4a:	edc7 7a00 	vstr	s15, [r7]
 8009a4e:	783b      	ldrb	r3, [r7, #0]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	e00e      	b.n	8009a72 <_ZN3jlb12SignalSender14measurements_1Ev+0x712>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a5e:	ee07 3a90 	vmov	s15, r3
 8009a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a6a:	edc7 7a00 	vstr	s15, [r7]
 8009a6e:	783b      	ldrb	r3, [r7, #0]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	7513      	strb	r3, [r2, #20]
                        jlb_rx.measurements_1.line_sensor_22 = 21 == controller.selected_front ? controller.detection_front[21] + 2.0f : controller.detection_front[21];
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b15      	cmp	r3, #21
 8009a80:	d113      	bne.n	8009aaa <_ZN3jlb12SignalSender14measurements_1Ev+0x74a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a8c:	ee07 3a90 	vmov	s15, r3
 8009a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa0:	edc7 7a00 	vstr	s15, [r7]
 8009aa4:	783b      	ldrb	r3, [r7, #0]
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	e00e      	b.n	8009ac8 <_ZN3jlb12SignalSender14measurements_1Ev+0x768>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ac0:	edc7 7a00 	vstr	s15, [r7]
 8009ac4:	783b      	ldrb	r3, [r7, #0]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	7553      	strb	r3, [r2, #21]
                        jlb_rx.measurements_1.line_sensor_23 = 22 == controller.selected_front ? controller.detection_front[22] + 2.0f : controller.detection_front[22];
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b16      	cmp	r3, #22
 8009ad6:	d113      	bne.n	8009b00 <_ZN3jlb12SignalSender14measurements_1Ev+0x7a0>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009ade:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af6:	edc7 7a00 	vstr	s15, [r7]
 8009afa:	783b      	ldrb	r3, [r7, #0]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	e00e      	b.n	8009b1e <_ZN3jlb12SignalSender14measurements_1Ev+0x7be>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009b06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b16:	edc7 7a00 	vstr	s15, [r7]
 8009b1a:	783b      	ldrb	r3, [r7, #0]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	7593      	strb	r3, [r2, #22]
                        jlb_rx.measurements_1.line_sensor_24 = 23 == controller.selected_front ? controller.detection_front[23] + 2.0f : controller.detection_front[23];
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b17      	cmp	r3, #23
 8009b2c:	d113      	bne.n	8009b56 <_ZN3jlb12SignalSender14measurements_1Ev+0x7f6>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009b34:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009b44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b4c:	edc7 7a00 	vstr	s15, [r7]
 8009b50:	783b      	ldrb	r3, [r7, #0]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	e00e      	b.n	8009b74 <_ZN3jlb12SignalSender14measurements_1Ev+0x814>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009b5c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b6c:	edc7 7a00 	vstr	s15, [r7]
 8009b70:	783b      	ldrb	r3, [r7, #0]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	75d3      	strb	r3, [r2, #23]
                        jlb_rx.measurements_1.line_sensor_25 = 24 == controller.selected_front ? controller.detection_front[24] + 2.0f : controller.detection_front[24];
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b18      	cmp	r3, #24
 8009b82:	d113      	bne.n	8009bac <_ZN3jlb12SignalSender14measurements_1Ev+0x84c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009b8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba2:	edc7 7a00 	vstr	s15, [r7]
 8009ba6:	783b      	ldrb	r3, [r7, #0]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	e00e      	b.n	8009bca <_ZN3jlb12SignalSender14measurements_1Ev+0x86a>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009bb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bc2:	edc7 7a00 	vstr	s15, [r7]
 8009bc6:	783b      	ldrb	r3, [r7, #0]
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	7613      	strb	r3, [r2, #24]
                        jlb_rx.measurements_1.line_sensor_26 = 25 == controller.selected_front ? controller.detection_front[25] + 2.0f : controller.detection_front[25];
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b19      	cmp	r3, #25
 8009bd8:	d113      	bne.n	8009c02 <_ZN3jlb12SignalSender14measurements_1Ev+0x8a2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009be0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009be4:	ee07 3a90 	vmov	s15, r3
 8009be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf8:	edc7 7a00 	vstr	s15, [r7]
 8009bfc:	783b      	ldrb	r3, [r7, #0]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	e00e      	b.n	8009c20 <_ZN3jlb12SignalSender14measurements_1Ev+0x8c0>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009c08:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009c0c:	ee07 3a90 	vmov	s15, r3
 8009c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c18:	edc7 7a00 	vstr	s15, [r7]
 8009c1c:	783b      	ldrb	r3, [r7, #0]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	7653      	strb	r3, [r2, #25]
                        jlb_rx.measurements_1.line_sensor_27 = 26 == controller.selected_front ? controller.detection_front[26] + 2.0f : controller.detection_front[26];
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b1a      	cmp	r3, #26
 8009c2e:	d113      	bne.n	8009c58 <_ZN3jlb12SignalSender14measurements_1Ev+0x8f8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009c36:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c4e:	edc7 7a00 	vstr	s15, [r7]
 8009c52:	783b      	ldrb	r3, [r7, #0]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	e00e      	b.n	8009c76 <_ZN3jlb12SignalSender14measurements_1Ev+0x916>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009c5e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c6e:	edc7 7a00 	vstr	s15, [r7]
 8009c72:	783b      	ldrb	r3, [r7, #0]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	7693      	strb	r3, [r2, #26]
                        jlb_rx.measurements_1.line_sensor_28 = 27 == controller.selected_front ? controller.detection_front[27] + 2.0f : controller.detection_front[27];
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b1b      	cmp	r3, #27
 8009c84:	d113      	bne.n	8009cae <_ZN3jlb12SignalSender14measurements_1Ev+0x94e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009c8c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009c90:	ee07 3a90 	vmov	s15, r3
 8009c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009c9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca4:	edc7 7a00 	vstr	s15, [r7]
 8009ca8:	783b      	ldrb	r3, [r7, #0]
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	e00e      	b.n	8009ccc <_ZN3jlb12SignalSender14measurements_1Ev+0x96c>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009cb4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009cb8:	ee07 3a90 	vmov	s15, r3
 8009cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cc4:	edc7 7a00 	vstr	s15, [r7]
 8009cc8:	783b      	ldrb	r3, [r7, #0]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	76d3      	strb	r3, [r2, #27]
                        jlb_rx.measurements_1.line_sensor_29 = 28 == controller.selected_front ? controller.detection_front[28] + 2.0f : controller.detection_front[28];
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b1c      	cmp	r3, #28
 8009cda:	d113      	bne.n	8009d04 <_ZN3jlb12SignalSender14measurements_1Ev+0x9a4>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009ce2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfa:	edc7 7a00 	vstr	s15, [r7]
 8009cfe:	783b      	ldrb	r3, [r7, #0]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	e00e      	b.n	8009d22 <_ZN3jlb12SignalSender14measurements_1Ev+0x9c2>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009d0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d1a:	edc7 7a00 	vstr	s15, [r7]
 8009d1e:	783b      	ldrb	r3, [r7, #0]
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	7713      	strb	r3, [r2, #28]
                        jlb_rx.measurements_1.line_sensor_30 = 29 == controller.selected_front ? controller.detection_front[29] + 2.0f : controller.detection_front[29];
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b1d      	cmp	r3, #29
 8009d30:	d113      	bne.n	8009d5a <_ZN3jlb12SignalSender14measurements_1Ev+0x9fa>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009d38:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009d3c:	ee07 3a90 	vmov	s15, r3
 8009d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d50:	edc7 7a00 	vstr	s15, [r7]
 8009d54:	783b      	ldrb	r3, [r7, #0]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e00e      	b.n	8009d78 <_ZN3jlb12SignalSender14measurements_1Ev+0xa18>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009d60:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009d64:	ee07 3a90 	vmov	s15, r3
 8009d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d70:	edc7 7a00 	vstr	s15, [r7]
 8009d74:	783b      	ldrb	r3, [r7, #0]
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	7753      	strb	r3, [r2, #29]
                        jlb_rx.measurements_1.line_sensor_31 = 30 == controller.selected_front ? controller.detection_front[30] + 2.0f : controller.detection_front[30];
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b1e      	cmp	r3, #30
 8009d86:	d113      	bne.n	8009db0 <_ZN3jlb12SignalSender14measurements_1Ev+0xa50>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009d8e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da6:	edc7 7a00 	vstr	s15, [r7]
 8009daa:	783b      	ldrb	r3, [r7, #0]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	e00e      	b.n	8009dce <_ZN3jlb12SignalSender14measurements_1Ev+0xa6e>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009db6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dc6:	edc7 7a00 	vstr	s15, [r7]
 8009dca:	783b      	ldrb	r3, [r7, #0]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	7793      	strb	r3, [r2, #30]
                        jlb_rx.measurements_1.line_sensor_32 = 31 == controller.selected_front ? controller.detection_front[31] + 2.0f : controller.detection_front[31];
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b1f      	cmp	r3, #31
 8009ddc:	d113      	bne.n	8009e06 <_ZN3jlb12SignalSender14measurements_1Ev+0xaa6>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009de4:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8009de8:	ee07 3a90 	vmov	s15, r3
 8009dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009df0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dfc:	edc7 7a00 	vstr	s15, [r7]
 8009e00:	783b      	ldrb	r3, [r7, #0]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	e00e      	b.n	8009e24 <_ZN3jlb12SignalSender14measurements_1Ev+0xac4>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009e0c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8009e10:	ee07 3a90 	vmov	s15, r3
 8009e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e1c:	edc7 7a00 	vstr	s15, [r7]
 8009e20:	783b      	ldrb	r3, [r7, #0]
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	77d3      	strb	r3, [r2, #31]
#endif

                        char data[measurements_1_DLC + 2] = {0};
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	f107 0310 	add.w	r3, r7, #16
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_1_IDE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_1_DLC;
 8009e3a:	2308      	movs	r3, #8
 8009e3c:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_1_CANID;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_1_DLC;
 8009e42:	2308      	movs	r3, #8
 8009e44:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_1_jlb(&jlb_rx.measurements_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f107 010c 	add.w	r1, r7, #12
 8009e4c:	3102      	adds	r1, #2
 8009e4e:	f107 030b 	add.w	r3, r7, #11
 8009e52:	f107 020a 	add.w	r2, r7, #10
 8009e56:	f7f7 f871 	bl	8000f3c <Pack_measurements_1_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_1_DLC + 2);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009e66:	4618      	mov	r0, r3
 8009e68:	f002 f95f 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	61fb      	str	r3, [r7, #28]
 8009e70:	f107 021c 	add.w	r2, r7, #28
 8009e74:	f107 0318 	add.w	r3, r7, #24
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f002 f9e6 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8009e80:	f107 030c 	add.w	r3, r7, #12
 8009e84:	330a      	adds	r3, #10
 8009e86:	f107 020c 	add.w	r2, r7, #12
 8009e8a:	69b9      	ldr	r1, [r7, #24]
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f002 f9ee 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 8009e92:	bf00      	nop
 8009e94:	3724      	adds	r7, #36	; 0x24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd90      	pop	{r4, r7, pc}

08009e9a <_ZN3jlb12SignalSender14measurements_2Ev>:

                void measurements_2()
 8009e9a:	b590      	push	{r4, r7, lr}
 8009e9c:	b089      	sub	sp, #36	; 0x24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_2.line_sensor_1 = 0 == controller.selected_rear ? controller.detection_rear[0] + 2.0f : controller.detection_rear[0];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d113      	bne.n	8009ed6 <_ZN3jlb12SignalSender14measurements_2Ev+0x3c>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ec0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ecc:	edc7 7a00 	vstr	s15, [r7]
 8009ed0:	783b      	ldrb	r3, [r7, #0]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	e00e      	b.n	8009ef4 <_ZN3jlb12SignalSender14measurements_2Ev+0x5a>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ee0:	ee07 3a90 	vmov	s15, r3
 8009ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eec:	edc7 7a00 	vstr	s15, [r7]
 8009ef0:	783b      	ldrb	r3, [r7, #0]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	f882 3020 	strb.w	r3, [r2, #32]
                        jlb_rx.measurements_2.line_sensor_2 = 1 == controller.selected_rear ? controller.detection_rear[1] + 2.0f : controller.detection_rear[1];
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d113      	bne.n	8009f2e <_ZN3jlb12SignalSender14measurements_2Ev+0x94>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	edc7 7a00 	vstr	s15, [r7]
 8009f28:	783b      	ldrb	r3, [r7, #0]
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	e00e      	b.n	8009f4c <_ZN3jlb12SignalSender14measurements_2Ev+0xb2>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f38:	ee07 3a90 	vmov	s15, r3
 8009f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f44:	edc7 7a00 	vstr	s15, [r7]
 8009f48:	783b      	ldrb	r3, [r7, #0]
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
                        jlb_rx.measurements_2.line_sensor_3 = 2 == controller.selected_rear ? controller.detection_rear[2] + 2.0f : controller.detection_rear[2];
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d113      	bne.n	8009f86 <_ZN3jlb12SignalSender14measurements_2Ev+0xec>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009f64:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f68:	ee07 3a90 	vmov	s15, r3
 8009f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f7c:	edc7 7a00 	vstr	s15, [r7]
 8009f80:	783b      	ldrb	r3, [r7, #0]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	e00e      	b.n	8009fa4 <_ZN3jlb12SignalSender14measurements_2Ev+0x10a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009f8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f90:	ee07 3a90 	vmov	s15, r3
 8009f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f9c:	edc7 7a00 	vstr	s15, [r7]
 8009fa0:	783b      	ldrb	r3, [r7, #0]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
                        jlb_rx.measurements_2.line_sensor_4 = 3 == controller.selected_rear ? controller.detection_rear[3] + 2.0f : controller.detection_rear[3];
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d113      	bne.n	8009fde <_ZN3jlb12SignalSender14measurements_2Ev+0x144>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009fbc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009fc0:	ee07 3a90 	vmov	s15, r3
 8009fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd4:	edc7 7a00 	vstr	s15, [r7]
 8009fd8:	783b      	ldrb	r3, [r7, #0]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	e00e      	b.n	8009ffc <_ZN3jlb12SignalSender14measurements_2Ev+0x162>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8009fe4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8009fe8:	ee07 3a90 	vmov	s15, r3
 8009fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ff4:	edc7 7a00 	vstr	s15, [r7]
 8009ff8:	783b      	ldrb	r3, [r7, #0]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
                        jlb_rx.measurements_2.line_sensor_5 = 4 == controller.selected_rear ? controller.detection_rear[4] + 2.0f : controller.detection_rear[4];
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d113      	bne.n	800a036 <_ZN3jlb12SignalSender14measurements_2Ev+0x19c>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a014:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a020:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a024:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a02c:	edc7 7a00 	vstr	s15, [r7]
 800a030:	783b      	ldrb	r3, [r7, #0]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	e00e      	b.n	800a054 <_ZN3jlb12SignalSender14measurements_2Ev+0x1ba>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a03c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a040:	ee07 3a90 	vmov	s15, r3
 800a044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a04c:	edc7 7a00 	vstr	s15, [r7]
 800a050:	783b      	ldrb	r3, [r7, #0]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
                        jlb_rx.measurements_2.line_sensor_6 = 5 == controller.selected_rear ? controller.detection_rear[5] + 2.0f : controller.detection_rear[5];
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	2b05      	cmp	r3, #5
 800a064:	d113      	bne.n	800a08e <_ZN3jlb12SignalSender14measurements_2Ev+0x1f4>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a06c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a078:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a07c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a084:	edc7 7a00 	vstr	s15, [r7]
 800a088:	783b      	ldrb	r3, [r7, #0]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	e00e      	b.n	800a0ac <_ZN3jlb12SignalSender14measurements_2Ev+0x212>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a094:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a098:	ee07 3a90 	vmov	s15, r3
 800a09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0a4:	edc7 7a00 	vstr	s15, [r7]
 800a0a8:	783b      	ldrb	r3, [r7, #0]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
                        jlb_rx.measurements_2.line_sensor_7 = 6 == controller.selected_rear ? controller.detection_rear[6] + 2.0f : controller.detection_rear[6];
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	2b06      	cmp	r3, #6
 800a0bc:	d113      	bne.n	800a0e6 <_ZN3jlb12SignalSender14measurements_2Ev+0x24c>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a0c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a0c8:	ee07 3a90 	vmov	s15, r3
 800a0cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a0d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a0d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0dc:	edc7 7a00 	vstr	s15, [r7]
 800a0e0:	783b      	ldrb	r3, [r7, #0]
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	e00e      	b.n	800a104 <_ZN3jlb12SignalSender14measurements_2Ev+0x26a>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a0ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0fc:	edc7 7a00 	vstr	s15, [r7]
 800a100:	783b      	ldrb	r3, [r7, #0]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
                        jlb_rx.measurements_2.line_sensor_8 = 7 == controller.selected_rear ? controller.detection_rear[7] + 2.0f : controller.detection_rear[7];
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	2b07      	cmp	r3, #7
 800a114:	d113      	bne.n	800a13e <_ZN3jlb12SignalSender14measurements_2Ev+0x2a4>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a11c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a120:	ee07 3a90 	vmov	s15, r3
 800a124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a128:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a12c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a134:	edc7 7a00 	vstr	s15, [r7]
 800a138:	783b      	ldrb	r3, [r7, #0]
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	e00e      	b.n	800a15c <_ZN3jlb12SignalSender14measurements_2Ev+0x2c2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a144:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800a148:	ee07 3a90 	vmov	s15, r3
 800a14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a154:	edc7 7a00 	vstr	s15, [r7]
 800a158:	783b      	ldrb	r3, [r7, #0]
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
                        jlb_rx.measurements_2.line_sensor_9 = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2b08      	cmp	r3, #8
 800a16c:	d113      	bne.n	800a196 <_ZN3jlb12SignalSender14measurements_2Ev+0x2fc>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a174:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a178:	ee07 3a90 	vmov	s15, r3
 800a17c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a180:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a184:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a18c:	edc7 7a00 	vstr	s15, [r7]
 800a190:	783b      	ldrb	r3, [r7, #0]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	e00e      	b.n	800a1b4 <_ZN3jlb12SignalSender14measurements_2Ev+0x31a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a19c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a1a0:	ee07 3a90 	vmov	s15, r3
 800a1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ac:	edc7 7a00 	vstr	s15, [r7]
 800a1b0:	783b      	ldrb	r3, [r7, #0]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                        jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	d113      	bne.n	800a1ee <_ZN3jlb12SignalSender14measurements_2Ev+0x354>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a1cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1d0:	ee07 3a90 	vmov	s15, r3
 800a1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a1dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a1e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1e4:	edc7 7a00 	vstr	s15, [r7]
 800a1e8:	783b      	ldrb	r3, [r7, #0]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	e00e      	b.n	800a20c <_ZN3jlb12SignalSender14measurements_2Ev+0x372>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a1f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a1f8:	ee07 3a90 	vmov	s15, r3
 800a1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a204:	edc7 7a00 	vstr	s15, [r7]
 800a208:	783b      	ldrb	r3, [r7, #0]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                        jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	2b0a      	cmp	r3, #10
 800a21c:	d113      	bne.n	800a246 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ac>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a224:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a228:	ee07 3a90 	vmov	s15, r3
 800a22c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a230:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a234:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a23c:	edc7 7a00 	vstr	s15, [r7]
 800a240:	783b      	ldrb	r3, [r7, #0]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	e00e      	b.n	800a264 <_ZN3jlb12SignalSender14measurements_2Ev+0x3ca>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a24c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a25c:	edc7 7a00 	vstr	s15, [r7]
 800a260:	783b      	ldrb	r3, [r7, #0]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	2b0b      	cmp	r3, #11
 800a274:	d113      	bne.n	800a29e <_ZN3jlb12SignalSender14measurements_2Ev+0x404>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a27c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a280:	ee07 3a90 	vmov	s15, r3
 800a284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a288:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a28c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a294:	edc7 7a00 	vstr	s15, [r7]
 800a298:	783b      	ldrb	r3, [r7, #0]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	e00e      	b.n	800a2bc <_ZN3jlb12SignalSender14measurements_2Ev+0x422>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a2a4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a2a8:	ee07 3a90 	vmov	s15, r3
 800a2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2b4:	edc7 7a00 	vstr	s15, [r7]
 800a2b8:	783b      	ldrb	r3, [r7, #0]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                        jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	2b0c      	cmp	r3, #12
 800a2cc:	d113      	bne.n	800a2f6 <_ZN3jlb12SignalSender14measurements_2Ev+0x45c>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a2d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a2d8:	ee07 3a90 	vmov	s15, r3
 800a2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a2e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ec:	edc7 7a00 	vstr	s15, [r7]
 800a2f0:	783b      	ldrb	r3, [r7, #0]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	e00e      	b.n	800a314 <_ZN3jlb12SignalSender14measurements_2Ev+0x47a>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a2fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a30c:	edc7 7a00 	vstr	s15, [r7]
 800a310:	783b      	ldrb	r3, [r7, #0]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	2b0d      	cmp	r3, #13
 800a324:	d113      	bne.n	800a34e <_ZN3jlb12SignalSender14measurements_2Ev+0x4b4>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a32c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a330:	ee07 3a90 	vmov	s15, r3
 800a334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a338:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a33c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a344:	edc7 7a00 	vstr	s15, [r7]
 800a348:	783b      	ldrb	r3, [r7, #0]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	e00e      	b.n	800a36c <_ZN3jlb12SignalSender14measurements_2Ev+0x4d2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a354:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a358:	ee07 3a90 	vmov	s15, r3
 800a35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a364:	edc7 7a00 	vstr	s15, [r7]
 800a368:	783b      	ldrb	r3, [r7, #0]
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                        jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b0e      	cmp	r3, #14
 800a37c:	d113      	bne.n	800a3a6 <_ZN3jlb12SignalSender14measurements_2Ev+0x50c>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a384:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a388:	ee07 3a90 	vmov	s15, r3
 800a38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a390:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a394:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a39c:	edc7 7a00 	vstr	s15, [r7]
 800a3a0:	783b      	ldrb	r3, [r7, #0]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	e00e      	b.n	800a3c4 <_ZN3jlb12SignalSender14measurements_2Ev+0x52a>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a3ac:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3bc:	edc7 7a00 	vstr	s15, [r7]
 800a3c0:	783b      	ldrb	r3, [r7, #0]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                        jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	d113      	bne.n	800a3fe <_ZN3jlb12SignalSender14measurements_2Ev+0x564>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a3dc:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a3e0:	ee07 3a90 	vmov	s15, r3
 800a3e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a3ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f4:	edc7 7a00 	vstr	s15, [r7]
 800a3f8:	783b      	ldrb	r3, [r7, #0]
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	e00e      	b.n	800a41c <_ZN3jlb12SignalSender14measurements_2Ev+0x582>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a404:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a408:	ee07 3a90 	vmov	s15, r3
 800a40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a414:	edc7 7a00 	vstr	s15, [r7]
 800a418:	783b      	ldrb	r3, [r7, #0]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
#ifndef SIMULATION
                        jlb_rx.measurements_2.line_sensor_9 = 8 == controller.selected_rear ? controller.detection_rear[8] + 2.0f : controller.detection_rear[8];
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	2b08      	cmp	r3, #8
 800a42c:	d113      	bne.n	800a456 <_ZN3jlb12SignalSender14measurements_2Ev+0x5bc>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a434:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a438:	ee07 3a90 	vmov	s15, r3
 800a43c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a440:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a444:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a44c:	edc7 7a00 	vstr	s15, [r7]
 800a450:	783b      	ldrb	r3, [r7, #0]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	e00e      	b.n	800a474 <_ZN3jlb12SignalSender14measurements_2Ev+0x5da>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a45c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a460:	ee07 3a90 	vmov	s15, r3
 800a464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46c:	edc7 7a00 	vstr	s15, [r7]
 800a470:	783b      	ldrb	r3, [r7, #0]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
                        jlb_rx.measurements_2.line_sensor_10 = 9 == controller.selected_rear ? controller.detection_rear[9] + 2.0f : controller.detection_rear[9];
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	2b09      	cmp	r3, #9
 800a484:	d113      	bne.n	800a4ae <_ZN3jlb12SignalSender14measurements_2Ev+0x614>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a48c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a490:	ee07 3a90 	vmov	s15, r3
 800a494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a498:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a49c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4a4:	edc7 7a00 	vstr	s15, [r7]
 800a4a8:	783b      	ldrb	r3, [r7, #0]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	e00e      	b.n	800a4cc <_ZN3jlb12SignalSender14measurements_2Ev+0x632>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a4b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a4b8:	ee07 3a90 	vmov	s15, r3
 800a4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4c4:	edc7 7a00 	vstr	s15, [r7]
 800a4c8:	783b      	ldrb	r3, [r7, #0]
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
                        jlb_rx.measurements_2.line_sensor_11 = 10 == controller.selected_rear ? controller.detection_rear[10] + 2.0f : controller.detection_rear[10];
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	2b0a      	cmp	r3, #10
 800a4dc:	d113      	bne.n	800a506 <_ZN3jlb12SignalSender14measurements_2Ev+0x66c>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a4e4:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a4e8:	ee07 3a90 	vmov	s15, r3
 800a4ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a4f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4fc:	edc7 7a00 	vstr	s15, [r7]
 800a500:	783b      	ldrb	r3, [r7, #0]
 800a502:	b2db      	uxtb	r3, r3
 800a504:	e00e      	b.n	800a524 <_ZN3jlb12SignalSender14measurements_2Ev+0x68a>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a50c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800a510:	ee07 3a90 	vmov	s15, r3
 800a514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a51c:	edc7 7a00 	vstr	s15, [r7]
 800a520:	783b      	ldrb	r3, [r7, #0]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                        jlb_rx.measurements_2.line_sensor_12 = 11 == controller.selected_rear ? controller.detection_rear[11] + 2.0f : controller.detection_rear[11];
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2b0b      	cmp	r3, #11
 800a534:	d113      	bne.n	800a55e <_ZN3jlb12SignalSender14measurements_2Ev+0x6c4>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a53c:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a548:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a54c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a554:	edc7 7a00 	vstr	s15, [r7]
 800a558:	783b      	ldrb	r3, [r7, #0]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	e00e      	b.n	800a57c <_ZN3jlb12SignalSender14measurements_2Ev+0x6e2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a564:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800a568:	ee07 3a90 	vmov	s15, r3
 800a56c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a574:	edc7 7a00 	vstr	s15, [r7]
 800a578:	783b      	ldrb	r3, [r7, #0]
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                        jlb_rx.measurements_2.line_sensor_13 = 12 == controller.selected_rear ? controller.detection_rear[12] + 2.0f : controller.detection_rear[12];
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b0c      	cmp	r3, #12
 800a58c:	d113      	bne.n	800a5b6 <_ZN3jlb12SignalSender14measurements_2Ev+0x71c>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a594:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a598:	ee07 3a90 	vmov	s15, r3
 800a59c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a5a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ac:	edc7 7a00 	vstr	s15, [r7]
 800a5b0:	783b      	ldrb	r3, [r7, #0]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	e00e      	b.n	800a5d4 <_ZN3jlb12SignalSender14measurements_2Ev+0x73a>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a5bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5c0:	ee07 3a90 	vmov	s15, r3
 800a5c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5cc:	edc7 7a00 	vstr	s15, [r7]
 800a5d0:	783b      	ldrb	r3, [r7, #0]
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                        jlb_rx.measurements_2.line_sensor_14 = 13 == controller.selected_rear ? controller.detection_rear[13] + 2.0f : controller.detection_rear[13];
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b0d      	cmp	r3, #13
 800a5e4:	d113      	bne.n	800a60e <_ZN3jlb12SignalSender14measurements_2Ev+0x774>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a5ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5f0:	ee07 3a90 	vmov	s15, r3
 800a5f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a5fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a604:	edc7 7a00 	vstr	s15, [r7]
 800a608:	783b      	ldrb	r3, [r7, #0]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	e00e      	b.n	800a62c <_ZN3jlb12SignalSender14measurements_2Ev+0x792>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a618:	ee07 3a90 	vmov	s15, r3
 800a61c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a624:	edc7 7a00 	vstr	s15, [r7]
 800a628:	783b      	ldrb	r3, [r7, #0]
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
                        jlb_rx.measurements_2.line_sensor_15 = 14 == controller.selected_rear ? controller.detection_rear[14] + 2.0f : controller.detection_rear[14];
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	2b0e      	cmp	r3, #14
 800a63c:	d113      	bne.n	800a666 <_ZN3jlb12SignalSender14measurements_2Ev+0x7cc>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a644:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a648:	ee07 3a90 	vmov	s15, r3
 800a64c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a650:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a654:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a65c:	edc7 7a00 	vstr	s15, [r7]
 800a660:	783b      	ldrb	r3, [r7, #0]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	e00e      	b.n	800a684 <_ZN3jlb12SignalSender14measurements_2Ev+0x7ea>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a66c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800a670:	ee07 3a90 	vmov	s15, r3
 800a674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a67c:	edc7 7a00 	vstr	s15, [r7]
 800a680:	783b      	ldrb	r3, [r7, #0]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
                        jlb_rx.measurements_2.line_sensor_16 = 15 == controller.selected_rear ? controller.detection_rear[15] + 2.0f : controller.detection_rear[15];
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	2b0f      	cmp	r3, #15
 800a694:	d113      	bne.n	800a6be <_ZN3jlb12SignalSender14measurements_2Ev+0x824>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a69c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a6a0:	ee07 3a90 	vmov	s15, r3
 800a6a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a6a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a6ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6b4:	edc7 7a00 	vstr	s15, [r7]
 800a6b8:	783b      	ldrb	r3, [r7, #0]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	e00e      	b.n	800a6dc <_ZN3jlb12SignalSender14measurements_2Ev+0x842>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a6c4:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800a6c8:	ee07 3a90 	vmov	s15, r3
 800a6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d4:	edc7 7a00 	vstr	s15, [r7]
 800a6d8:	783b      	ldrb	r3, [r7, #0]
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
                        jlb_rx.measurements_2.line_sensor_17 = 16 == controller.selected_rear ? controller.detection_rear[16] + 2.0f : controller.detection_rear[16];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	2b10      	cmp	r3, #16
 800a6ec:	d113      	bne.n	800a716 <_ZN3jlb12SignalSender14measurements_2Ev+0x87c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a6f4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a6f8:	ee07 3a90 	vmov	s15, r3
 800a6fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a700:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a704:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a70c:	edc7 7a00 	vstr	s15, [r7]
 800a710:	783b      	ldrb	r3, [r7, #0]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	e00e      	b.n	800a734 <_ZN3jlb12SignalSender14measurements_2Ev+0x89a>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a71c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a72c:	edc7 7a00 	vstr	s15, [r7]
 800a730:	783b      	ldrb	r3, [r7, #0]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
                        jlb_rx.measurements_2.line_sensor_18 = 17 == controller.selected_rear ? controller.detection_rear[17] + 2.0f : controller.detection_rear[17];
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	2b11      	cmp	r3, #17
 800a744:	d113      	bne.n	800a76e <_ZN3jlb12SignalSender14measurements_2Ev+0x8d4>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a74c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a750:	ee07 3a90 	vmov	s15, r3
 800a754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a758:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a75c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a764:	edc7 7a00 	vstr	s15, [r7]
 800a768:	783b      	ldrb	r3, [r7, #0]
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	e00e      	b.n	800a78c <_ZN3jlb12SignalSender14measurements_2Ev+0x8f2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a774:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a778:	ee07 3a90 	vmov	s15, r3
 800a77c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a784:	edc7 7a00 	vstr	s15, [r7]
 800a788:	783b      	ldrb	r3, [r7, #0]
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
                        jlb_rx.measurements_2.line_sensor_19 = 18 == controller.selected_rear ? controller.detection_rear[18] + 2.0f : controller.detection_rear[18];
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2b12      	cmp	r3, #18
 800a79c:	d113      	bne.n	800a7c6 <_ZN3jlb12SignalSender14measurements_2Ev+0x92c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a7a4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a7b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7bc:	edc7 7a00 	vstr	s15, [r7]
 800a7c0:	783b      	ldrb	r3, [r7, #0]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	e00e      	b.n	800a7e4 <_ZN3jlb12SignalSender14measurements_2Ev+0x94a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a7cc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7dc:	edc7 7a00 	vstr	s15, [r7]
 800a7e0:	783b      	ldrb	r3, [r7, #0]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                        jlb_rx.measurements_2.line_sensor_20 = 19 == controller.selected_rear ? controller.detection_rear[19] + 2.0f : controller.detection_rear[19];
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	2b13      	cmp	r3, #19
 800a7f4:	d113      	bne.n	800a81e <_ZN3jlb12SignalSender14measurements_2Ev+0x984>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a7fc:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a808:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a80c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a814:	edc7 7a00 	vstr	s15, [r7]
 800a818:	783b      	ldrb	r3, [r7, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	e00e      	b.n	800a83c <_ZN3jlb12SignalSender14measurements_2Ev+0x9a2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a824:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a834:	edc7 7a00 	vstr	s15, [r7]
 800a838:	783b      	ldrb	r3, [r7, #0]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                        jlb_rx.measurements_2.line_sensor_21 = 20 == controller.selected_rear ? controller.detection_rear[20] + 2.0f : controller.detection_rear[20];
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	2b14      	cmp	r3, #20
 800a84c:	d113      	bne.n	800a876 <_ZN3jlb12SignalSender14measurements_2Ev+0x9dc>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a854:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a858:	ee07 3a90 	vmov	s15, r3
 800a85c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a860:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a864:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a86c:	edc7 7a00 	vstr	s15, [r7]
 800a870:	783b      	ldrb	r3, [r7, #0]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	e00e      	b.n	800a894 <_ZN3jlb12SignalSender14measurements_2Ev+0x9fa>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a87c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a88c:	edc7 7a00 	vstr	s15, [r7]
 800a890:	783b      	ldrb	r3, [r7, #0]
 800a892:	b2db      	uxtb	r3, r3
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                        jlb_rx.measurements_2.line_sensor_22 = 21 == controller.selected_rear ? controller.detection_rear[21] + 2.0f : controller.detection_rear[21];
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	2b15      	cmp	r3, #21
 800a8a4:	d113      	bne.n	800a8ce <_ZN3jlb12SignalSender14measurements_2Ev+0xa34>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a8ac:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a8b0:	ee07 3a90 	vmov	s15, r3
 800a8b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a8bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c4:	edc7 7a00 	vstr	s15, [r7]
 800a8c8:	783b      	ldrb	r3, [r7, #0]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	e00e      	b.n	800a8ec <_ZN3jlb12SignalSender14measurements_2Ev+0xa52>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a8d4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e4:	edc7 7a00 	vstr	s15, [r7]
 800a8e8:	783b      	ldrb	r3, [r7, #0]
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
                        jlb_rx.measurements_2.line_sensor_23 = 22 == controller.selected_rear ? controller.detection_rear[22] + 2.0f : controller.detection_rear[22];
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	2b16      	cmp	r3, #22
 800a8fc:	d113      	bne.n	800a926 <_ZN3jlb12SignalSender14measurements_2Ev+0xa8c>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a904:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a908:	ee07 3a90 	vmov	s15, r3
 800a90c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a910:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a914:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a91c:	edc7 7a00 	vstr	s15, [r7]
 800a920:	783b      	ldrb	r3, [r7, #0]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	e00e      	b.n	800a944 <_ZN3jlb12SignalSender14measurements_2Ev+0xaaa>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a92c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800a930:	ee07 3a90 	vmov	s15, r3
 800a934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a93c:	edc7 7a00 	vstr	s15, [r7]
 800a940:	783b      	ldrb	r3, [r7, #0]
 800a942:	b2db      	uxtb	r3, r3
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                        jlb_rx.measurements_2.line_sensor_24 = 23 == controller.selected_rear ? controller.detection_rear[23] + 2.0f : controller.detection_rear[23];
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b17      	cmp	r3, #23
 800a954:	d113      	bne.n	800a97e <_ZN3jlb12SignalSender14measurements_2Ev+0xae4>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a95c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800a960:	ee07 3a90 	vmov	s15, r3
 800a964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a968:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a96c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a974:	edc7 7a00 	vstr	s15, [r7]
 800a978:	783b      	ldrb	r3, [r7, #0]
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	e00e      	b.n	800a99c <_ZN3jlb12SignalSender14measurements_2Ev+0xb02>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a984:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a994:	edc7 7a00 	vstr	s15, [r7]
 800a998:	783b      	ldrb	r3, [r7, #0]
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
                        jlb_rx.measurements_2.line_sensor_25 = 24 == controller.selected_rear ? controller.detection_rear[24] + 2.0f : controller.detection_rear[24];
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b18      	cmp	r3, #24
 800a9ac:	d113      	bne.n	800a9d6 <_ZN3jlb12SignalSender14measurements_2Ev+0xb3c>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a9b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a9b8:	ee07 3a90 	vmov	s15, r3
 800a9bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800a9c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9cc:	edc7 7a00 	vstr	s15, [r7]
 800a9d0:	783b      	ldrb	r3, [r7, #0]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	e00e      	b.n	800a9f4 <_ZN3jlb12SignalSender14measurements_2Ev+0xb5a>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800a9dc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800a9e0:	ee07 3a90 	vmov	s15, r3
 800a9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ec:	edc7 7a00 	vstr	s15, [r7]
 800a9f0:	783b      	ldrb	r3, [r7, #0]
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
                        jlb_rx.measurements_2.line_sensor_26 = 25 == controller.selected_rear ? controller.detection_rear[25] + 2.0f : controller.detection_rear[25];
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	2b19      	cmp	r3, #25
 800aa04:	d113      	bne.n	800aa2e <_ZN3jlb12SignalSender14measurements_2Ev+0xb94>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aa0c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa24:	edc7 7a00 	vstr	s15, [r7]
 800aa28:	783b      	ldrb	r3, [r7, #0]
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	e00e      	b.n	800aa4c <_ZN3jlb12SignalSender14measurements_2Ev+0xbb2>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aa34:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa44:	edc7 7a00 	vstr	s15, [r7]
 800aa48:	783b      	ldrb	r3, [r7, #0]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
                        jlb_rx.measurements_2.line_sensor_27 = 26 == controller.selected_rear ? controller.detection_rear[26] + 2.0f : controller.detection_rear[26];
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2b1a      	cmp	r3, #26
 800aa5c:	d113      	bne.n	800aa86 <_ZN3jlb12SignalSender14measurements_2Ev+0xbec>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aa64:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aa74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa7c:	edc7 7a00 	vstr	s15, [r7]
 800aa80:	783b      	ldrb	r3, [r7, #0]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	e00e      	b.n	800aaa4 <_ZN3jlb12SignalSender14measurements_2Ev+0xc0a>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aa8c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800aa90:	ee07 3a90 	vmov	s15, r3
 800aa94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa9c:	edc7 7a00 	vstr	s15, [r7]
 800aaa0:	783b      	ldrb	r3, [r7, #0]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                        jlb_rx.measurements_2.line_sensor_28 = 27 == controller.selected_rear ? controller.detection_rear[27] + 2.0f : controller.detection_rear[27];
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2b1b      	cmp	r3, #27
 800aab4:	d113      	bne.n	800aade <_ZN3jlb12SignalSender14measurements_2Ev+0xc44>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aabc:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800aac0:	ee07 3a90 	vmov	s15, r3
 800aac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aac8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800aacc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad4:	edc7 7a00 	vstr	s15, [r7]
 800aad8:	783b      	ldrb	r3, [r7, #0]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	e00e      	b.n	800aafc <_ZN3jlb12SignalSender14measurements_2Ev+0xc62>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800aae4:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800aae8:	ee07 3a90 	vmov	s15, r3
 800aaec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaf4:	edc7 7a00 	vstr	s15, [r7]
 800aaf8:	783b      	ldrb	r3, [r7, #0]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	f882 303b 	strb.w	r3, [r2, #59]	; 0x3b
                        jlb_rx.measurements_2.line_sensor_29 = 28 == controller.selected_rear ? controller.detection_rear[28] + 2.0f : controller.detection_rear[28];
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	2b1c      	cmp	r3, #28
 800ab0c:	d113      	bne.n	800ab36 <_ZN3jlb12SignalSender14measurements_2Ev+0xc9c>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ab14:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ab18:	ee07 3a90 	vmov	s15, r3
 800ab1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab2c:	edc7 7a00 	vstr	s15, [r7]
 800ab30:	783b      	ldrb	r3, [r7, #0]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	e00e      	b.n	800ab54 <_ZN3jlb12SignalSender14measurements_2Ev+0xcba>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ab3c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ab40:	ee07 3a90 	vmov	s15, r3
 800ab44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab4c:	edc7 7a00 	vstr	s15, [r7]
 800ab50:	783b      	ldrb	r3, [r7, #0]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
                        jlb_rx.measurements_2.line_sensor_30 = 29 == controller.selected_rear ? controller.detection_rear[29] + 2.0f : controller.detection_rear[29];
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b1d      	cmp	r3, #29
 800ab64:	d113      	bne.n	800ab8e <_ZN3jlb12SignalSender14measurements_2Ev+0xcf4>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ab6c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ab70:	ee07 3a90 	vmov	s15, r3
 800ab74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ab7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab84:	edc7 7a00 	vstr	s15, [r7]
 800ab88:	783b      	ldrb	r3, [r7, #0]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e00e      	b.n	800abac <_ZN3jlb12SignalSender14measurements_2Ev+0xd12>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ab94:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ab98:	ee07 3a90 	vmov	s15, r3
 800ab9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba4:	edc7 7a00 	vstr	s15, [r7]
 800aba8:	783b      	ldrb	r3, [r7, #0]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
                        jlb_rx.measurements_2.line_sensor_31 = 30 == controller.selected_rear ? controller.detection_rear[30] + 2.0f : controller.detection_rear[30];
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2b1e      	cmp	r3, #30
 800abbc:	d113      	bne.n	800abe6 <_ZN3jlb12SignalSender14measurements_2Ev+0xd4c>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800abc4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800abd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abdc:	edc7 7a00 	vstr	s15, [r7]
 800abe0:	783b      	ldrb	r3, [r7, #0]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	e00e      	b.n	800ac04 <_ZN3jlb12SignalSender14measurements_2Ev+0xd6a>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800abec:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfc:	edc7 7a00 	vstr	s15, [r7]
 800ac00:	783b      	ldrb	r3, [r7, #0]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e
                        jlb_rx.measurements_2.line_sensor_32 = 31 == controller.selected_rear ? controller.detection_rear[31] + 2.0f : controller.detection_rear[31];
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	2b1f      	cmp	r3, #31
 800ac14:	d113      	bne.n	800ac3e <_ZN3jlb12SignalSender14measurements_2Ev+0xda4>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ac1c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ac20:	ee07 3a90 	vmov	s15, r3
 800ac24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ac2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac34:	edc7 7a00 	vstr	s15, [r7]
 800ac38:	783b      	ldrb	r3, [r7, #0]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e00e      	b.n	800ac5c <_ZN3jlb12SignalSender14measurements_2Ev+0xdc2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ac44:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ac48:	ee07 3a90 	vmov	s15, r3
 800ac4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac54:	edc7 7a00 	vstr	s15, [r7]
 800ac58:	783b      	ldrb	r3, [r7, #0]
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
#endif

                        char data[measurements_2_DLC + 2] = {0};
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	f107 0310 	add.w	r3, r7, #16
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_2_IDE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_2_DLC;
 800ac74:	2308      	movs	r3, #8
 800ac76:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_2_CANID;
 800ac78:	2302      	movs	r3, #2
 800ac7a:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_2_DLC;
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_2_jlb(&jlb_rx.measurements_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f103 0020 	add.w	r0, r3, #32
 800ac86:	f107 010c 	add.w	r1, r7, #12
 800ac8a:	3102      	adds	r1, #2
 800ac8c:	f107 030b 	add.w	r3, r7, #11
 800ac90:	f107 020a 	add.w	r2, r7, #10
 800ac94:	f7f6 fa9a 	bl	80011cc <Pack_measurements_2_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_2_DLC + 2);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aca4:	4618      	mov	r0, r3
 800aca6:	f001 fa40 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800acaa:	4603      	mov	r3, r0
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	f107 021c 	add.w	r2, r7, #28
 800acb2:	f107 0318 	add.w	r3, r7, #24
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fac7 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800acbe:	f107 030c 	add.w	r3, r7, #12
 800acc2:	330a      	adds	r3, #10
 800acc4:	f107 020c 	add.w	r2, r7, #12
 800acc8:	69b9      	ldr	r1, [r7, #24]
 800acca:	4620      	mov	r0, r4
 800accc:	f001 facf 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800acd0:	bf00      	nop
 800acd2:	3724      	adds	r7, #36	; 0x24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd90      	pop	{r4, r7, pc}

0800acd8 <_ZN3jlb12SignalSender14measurements_3Ev>:

                void measurements_3()
 800acd8:	b590      	push	{r4, r7, lr}
 800acda:	b089      	sub	sp, #36	; 0x24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_3.angular_velocity_x_phys = odometry.meas_ang_vel_x;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f5 fc1f 	bl	800052c <__aeabi_f2d>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
                        jlb_rx.measurements_3.angular_velocity_y_phys = odometry.meas_ang_vel_y;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f5 fc13 	bl	800052c <__aeabi_f2d>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
                        jlb_rx.measurements_3.angular_velocity_z_phys = odometry.meas_ang_vel_z;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7f5 fc07 	bl	800052c <__aeabi_f2d>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

                        char data[measurements_2_DLC + 2] = {0};
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	f107 0310 	add.w	r3, r7, #16
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_3_IDE;
 800ad36:	2300      	movs	r3, #0
 800ad38:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_3_DLC;
 800ad3a:	2308      	movs	r3, #8
 800ad3c:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_3_CANID;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_3_DLC;
 800ad42:	2308      	movs	r3, #8
 800ad44:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_3_jlb(&jlb_rx.measurements_3, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ad4c:	f107 010c 	add.w	r1, r7, #12
 800ad50:	3102      	adds	r1, #2
 800ad52:	f107 030b 	add.w	r3, r7, #11
 800ad56:	f107 020a 	add.w	r2, r7, #10
 800ad5a:	f7f6 fb81 	bl	8001460 <Pack_measurements_3_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_3_DLC + 2);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 f9dd 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800ad70:	4603      	mov	r3, r0
 800ad72:	61fb      	str	r3, [r7, #28]
 800ad74:	f107 021c 	add.w	r2, r7, #28
 800ad78:	f107 0318 	add.w	r3, r7, #24
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 fa64 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800ad84:	f107 030c 	add.w	r3, r7, #12
 800ad88:	330a      	adds	r3, #10
 800ad8a:	f107 020c 	add.w	r2, r7, #12
 800ad8e:	69b9      	ldr	r1, [r7, #24]
 800ad90:	4620      	mov	r0, r4
 800ad92:	f001 fa6c 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800ad96:	bf00      	nop
 800ad98:	3724      	adds	r7, #36	; 0x24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd90      	pop	{r4, r7, pc}

0800ad9e <_ZN3jlb12SignalSender14measurements_4Ev>:

                void measurements_4()
 800ad9e:	b590      	push	{r4, r7, lr}
 800ada0:	b089      	sub	sp, #36	; 0x24
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_4.linear_acceleration_x_phys = odometry.meas_lin_acc_x;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f5 fbbc 	bl	800052c <__aeabi_f2d>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
                        jlb_rx.measurements_4.linear_acceleration_y_phys = odometry.meas_lin_acc_y;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7f5 fbb0 	bl	800052c <__aeabi_f2d>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
                        jlb_rx.measurements_4.linear_acceleration_z_phys = odometry.meas_lin_acc_z;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f5 fba4 	bl	800052c <__aeabi_f2d>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

                        char data[measurements_3_DLC + 2] = {0};
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
 800adf2:	f107 0310 	add.w	r3, r7, #16
 800adf6:	2200      	movs	r2, #0
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_4_IDE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_4_DLC;
 800ae00:	2308      	movs	r3, #8
 800ae02:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_4_CANID;
 800ae04:	2304      	movs	r3, #4
 800ae06:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_4_DLC;
 800ae08:	2308      	movs	r3, #8
 800ae0a:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_4_jlb(&jlb_rx.measurements_4, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ae12:	f107 010c 	add.w	r1, r7, #12
 800ae16:	3102      	adds	r1, #2
 800ae18:	f107 030b 	add.w	r3, r7, #11
 800ae1c:	f107 020a 	add.w	r2, r7, #10
 800ae20:	f7f6 fbde 	bl	80015e0 <Pack_measurements_4_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_4_DLC + 2);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 f97a 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800ae36:	4603      	mov	r3, r0
 800ae38:	61fb      	str	r3, [r7, #28]
 800ae3a:	f107 021c 	add.w	r2, r7, #28
 800ae3e:	f107 0318 	add.w	r3, r7, #24
 800ae42:	4611      	mov	r1, r2
 800ae44:	4618      	mov	r0, r3
 800ae46:	f001 fa01 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800ae4a:	f107 030c 	add.w	r3, r7, #12
 800ae4e:	330a      	adds	r3, #10
 800ae50:	f107 020c 	add.w	r2, r7, #12
 800ae54:	69b9      	ldr	r1, [r7, #24]
 800ae56:	4620      	mov	r0, r4
 800ae58:	f001 fa09 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800ae5c:	bf00      	nop
 800ae5e:	3724      	adds	r7, #36	; 0x24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd90      	pop	{r4, r7, pc}

0800ae64 <_ZN3jlb12SignalSender14measurements_5Ev>:

                void measurements_5()
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b089      	sub	sp, #36	; 0x24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.measurements_5.motor_rpm_phys = odometry.meas_motor_rpm;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f5 fb59 	bl	800052c <__aeabi_f2d>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                        jlb_rx.measurements_5.object_range_phys = controller.object_range;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f5 fb4d 	bl	800052c <__aeabi_f2d>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

                        char data[measurements_4_DLC + 2] = {0};
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	f107 0310 	add.w	r3, r7, #16
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = measurements_5_IDE;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = measurements_5_DLC;
 800aeae:	2308      	movs	r3, #8
 800aeb0:	72bb      	strb	r3, [r7, #10]
                        data[0] = measurements_5_CANID;
 800aeb2:	2305      	movs	r3, #5
 800aeb4:	733b      	strb	r3, [r7, #12]
                        data[1] = measurements_5_DLC;
 800aeb6:	2308      	movs	r3, #8
 800aeb8:	737b      	strb	r3, [r7, #13]
                        Pack_measurements_5_jlb(&jlb_rx.measurements_5, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800aec0:	f107 010c 	add.w	r1, r7, #12
 800aec4:	3102      	adds	r1, #2
 800aec6:	f107 030b 	add.w	r3, r7, #11
 800aeca:	f107 020a 	add.w	r2, r7, #10
 800aece:	f7f6 fc47 	bl	8001760 <Pack_measurements_5_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + measurements_5_DLC + 2);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800aede:	4618      	mov	r0, r3
 800aee0:	f001 f923 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800aee4:	4603      	mov	r3, r0
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	f107 021c 	add.w	r2, r7, #28
 800aeec:	f107 0318 	add.w	r3, r7, #24
 800aef0:	4611      	mov	r1, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f001 f9aa 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800aef8:	f107 030c 	add.w	r3, r7, #12
 800aefc:	330a      	adds	r3, #10
 800aefe:	f107 020c 	add.w	r2, r7, #12
 800af02:	69b9      	ldr	r1, [r7, #24]
 800af04:	4620      	mov	r0, r4
 800af06:	f001 f9b2 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800af0a:	bf00      	nop
 800af0c:	3724      	adds	r7, #36	; 0x24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd90      	pop	{r4, r7, pc}

0800af12 <_ZN3jlb12SignalSender10odometry_1Ev>:

                void odometry_1()
 800af12:	b590      	push	{r4, r7, lr}
 800af14:	b089      	sub	sp, #36	; 0x24
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.odometry_1.position_x_phys = odometry.x_t;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	4618      	mov	r0, r3
 800af24:	f7f5 fb02 	bl	800052c <__aeabi_f2d>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
                        jlb_rx.odometry_1.position_y_phys = odometry.y_t;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f5 faf6 	bl	800052c <__aeabi_f2d>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
                        jlb_rx.odometry_1.orientation_phys = controller.kAng;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800af50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af52:	4618      	mov	r0, r3
 800af54:	f7f5 faea 	bl	800052c <__aeabi_f2d>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	6879      	ldr	r1, [r7, #4]
 800af5e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
                        //jlb_rx.odometry_1.orientation_phys = odometry.theta_t;

                        char data[odometry_1_DLC + 2] = {0};
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]
 800af66:	f107 0310 	add.w	r3, r7, #16
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = odometry_1_IDE;
 800af70:	2300      	movs	r3, #0
 800af72:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = odometry_1_DLC;
 800af74:	2308      	movs	r3, #8
 800af76:	72bb      	strb	r3, [r7, #10]
                        data[0] = odometry_1_CANID;
 800af78:	2311      	movs	r3, #17
 800af7a:	733b      	strb	r3, [r7, #12]
                        data[1] = odometry_1_DLC;
 800af7c:	2308      	movs	r3, #8
 800af7e:	737b      	strb	r3, [r7, #13]
                        Pack_odometry_1_jlb(&jlb_rx.odometry_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 800af86:	f107 010c 	add.w	r1, r7, #12
 800af8a:	3102      	adds	r1, #2
 800af8c:	f107 030b 	add.w	r3, r7, #11
 800af90:	f107 020a 	add.w	r2, r7, #10
 800af94:	f7f6 fc6c 	bl	8001870 <Pack_odometry_1_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + odometry_1_DLC + 2);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800afa4:	4618      	mov	r0, r3
 800afa6:	f001 f8c0 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800afaa:	4603      	mov	r3, r0
 800afac:	61fb      	str	r3, [r7, #28]
 800afae:	f107 021c 	add.w	r2, r7, #28
 800afb2:	f107 0318 	add.w	r3, r7, #24
 800afb6:	4611      	mov	r1, r2
 800afb8:	4618      	mov	r0, r3
 800afba:	f001 f947 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800afbe:	f107 030c 	add.w	r3, r7, #12
 800afc2:	330a      	adds	r3, #10
 800afc4:	f107 020c 	add.w	r2, r7, #12
 800afc8:	69b9      	ldr	r1, [r7, #24]
 800afca:	4620      	mov	r0, r4
 800afcc:	f001 f94f 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800afd0:	bf00      	nop
 800afd2:	3724      	adds	r7, #36	; 0x24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd90      	pop	{r4, r7, pc}

0800afd8 <_ZN3jlb12SignalSender10odometry_2Ev>:

                void odometry_2()
 800afd8:	b590      	push	{r4, r7, lr}
 800afda:	b089      	sub	sp, #36	; 0x24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.odometry_2.linear_velocity_x_phys = odometry.vx_t;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f5 fa9f 	bl	800052c <__aeabi_f2d>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
                        jlb_rx.odometry_2.angular_velocity_z_phys = odometry.w_t;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	4618      	mov	r0, r3
 800b002:	f7f5 fa93 	bl	800052c <__aeabi_f2d>
 800b006:	4602      	mov	r2, r0
 800b008:	460b      	mov	r3, r1
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8

                        char data[odometry_2_DLC + 2] = {0};
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]
 800b014:	f107 0310 	add.w	r3, r7, #16
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = odometry_2_IDE;
 800b01e:	2300      	movs	r3, #0
 800b020:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = odometry_2_DLC;
 800b022:	2308      	movs	r3, #8
 800b024:	72bb      	strb	r3, [r7, #10]
                        data[0] = odometry_2_CANID;
 800b026:	2312      	movs	r3, #18
 800b028:	733b      	strb	r3, [r7, #12]
                        data[1] = odometry_2_DLC;
 800b02a:	2308      	movs	r3, #8
 800b02c:	737b      	strb	r3, [r7, #13]
                        Pack_odometry_2_jlb(&jlb_rx.odometry_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800b034:	f107 010c 	add.w	r1, r7, #12
 800b038:	3102      	adds	r1, #2
 800b03a:	f107 030b 	add.w	r3, r7, #11
 800b03e:	f107 020a 	add.w	r2, r7, #10
 800b042:	f7f6 fcdd 	bl	8001a00 <Pack_odometry_2_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + odometry_2_DLC + 2);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b052:	4618      	mov	r0, r3
 800b054:	f001 f869 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800b058:	4603      	mov	r3, r0
 800b05a:	61fb      	str	r3, [r7, #28]
 800b05c:	f107 021c 	add.w	r2, r7, #28
 800b060:	f107 0318 	add.w	r3, r7, #24
 800b064:	4611      	mov	r1, r2
 800b066:	4618      	mov	r0, r3
 800b068:	f001 f8f0 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b06c:	f107 030c 	add.w	r3, r7, #12
 800b070:	330a      	adds	r3, #10
 800b072:	f107 020c 	add.w	r2, r7, #12
 800b076:	69b9      	ldr	r1, [r7, #24]
 800b078:	4620      	mov	r0, r4
 800b07a:	f001 f8f8 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800b07e:	bf00      	nop
 800b080:	3724      	adds	r7, #36	; 0x24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd90      	pop	{r4, r7, pc}

0800b086 <_ZN3jlb12SignalSender7logic_1Ev>:

                void logic_1()
 800b086:	b590      	push	{r4, r7, lr}
 800b088:	b089      	sub	sp, #36	; 0x24
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.logic_1.target_angle_phys = controller.target_angle;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	4618      	mov	r0, r3
 800b098:	f7f5 fa48 	bl	800052c <__aeabi_f2d>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
                        jlb_rx.logic_1.target_speed_phys = controller.target_speed;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f5 fa3c 	bl	800052c <__aeabi_f2d>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	e9c1 234a 	strd	r2, r3, [r1, #296]	; 0x128
                        jlb_rx.logic_1.cross_track_error_phys = controller.cross_track_error;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7f5 fa30 	bl	800052c <__aeabi_f2d>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
                        jlb_rx.logic_1.heading_error_phys = controller.heading_error;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f5 fa24 	bl	800052c <__aeabi_f2d>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	e9c1 2352 	strd	r2, r3, [r1, #328]	; 0x148

                        char data[logic_1_DLC + 2] = {0};
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
 800b0f2:	f107 0310 	add.w	r3, r7, #16
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = logic_1_IDE;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = logic_1_DLC;
 800b100:	2308      	movs	r3, #8
 800b102:	72bb      	strb	r3, [r7, #10]
                        data[0] = logic_1_CANID;
 800b104:	2321      	movs	r3, #33	; 0x21
 800b106:	733b      	strb	r3, [r7, #12]
                        data[1] = logic_1_DLC;
 800b108:	2308      	movs	r3, #8
 800b10a:	737b      	strb	r3, [r7, #13]
                        Pack_logic_1_jlb(&jlb_rx.logic_1, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f503 7088 	add.w	r0, r3, #272	; 0x110
 800b112:	f107 010c 	add.w	r1, r7, #12
 800b116:	3102      	adds	r1, #2
 800b118:	f107 030b 	add.w	r3, r7, #11
 800b11c:	f107 020a 	add.w	r2, r7, #10
 800b120:	f7f6 fd02 	bl	8001b28 <Pack_logic_1_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + logic_1_DLC + 2);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fffa 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800b136:	4603      	mov	r3, r0
 800b138:	61fb      	str	r3, [r7, #28]
 800b13a:	f107 021c 	add.w	r2, r7, #28
 800b13e:	f107 0318 	add.w	r3, r7, #24
 800b142:	4611      	mov	r1, r2
 800b144:	4618      	mov	r0, r3
 800b146:	f001 f881 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b14a:	f107 030c 	add.w	r3, r7, #12
 800b14e:	330a      	adds	r3, #10
 800b150:	f107 020c 	add.w	r2, r7, #12
 800b154:	69b9      	ldr	r1, [r7, #24]
 800b156:	4620      	mov	r0, r4
 800b158:	f001 f889 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800b15c:	bf00      	nop
 800b15e:	3724      	adds	r7, #36	; 0x24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd90      	pop	{r4, r7, pc}

0800b164 <_ZN3jlb12SignalSender7logic_2Ev>:

                void logic_2()
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b089      	sub	sp, #36	; 0x24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
                {
                        jlb_rx.logic_2.state = static_cast<uint8_t>(as_state.fast_state);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	b2da      	uxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
                        jlb_rx.logic_2.direction = static_cast<uint8_t>(controller.direction);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800b182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b186:	b2da      	uxtb	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
                        jlb_rx.logic_2.under_gate = as_state.under_gate;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b194:	7c1b      	ldrb	r3, [r3, #16]
 800b196:	461a      	mov	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
                        jlb_rx.logic_2.at_cross_section = as_state.at_cross_section;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b1a4:	7c5b      	ldrb	r3, [r3, #17]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
                        jlb_rx.logic_2.previous_node = as_state.previous_node;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b1b4:	7f5a      	ldrb	r2, [r3, #29]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
                        jlb_rx.logic_2.next_node = as_state.next_node;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800b1c2:	7f9a      	ldrb	r2, [r3, #30]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153

                        char data[logic_2_DLC + 2] = {0};
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	f107 0310 	add.w	r3, r7, #16
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	809a      	strh	r2, [r3, #4]
                        uint8_t ide = logic_2_IDE;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	72fb      	strb	r3, [r7, #11]
                        uint8_t dlc = logic_2_DLC;
 800b1dc:	2308      	movs	r3, #8
 800b1de:	72bb      	strb	r3, [r7, #10]
                        data[0] = logic_2_CANID;
 800b1e0:	2322      	movs	r3, #34	; 0x22
 800b1e2:	733b      	strb	r3, [r7, #12]
                        data[1] = logic_2_DLC;
 800b1e4:	2308      	movs	r3, #8
 800b1e6:	737b      	strb	r3, [r7, #13]
                        Pack_logic_2_jlb(&jlb_rx.logic_2, reinterpret_cast<uint8_t *>(data + 2), &dlc, &ide);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 800b1ee:	f107 010c 	add.w	r1, r7, #12
 800b1f2:	3102      	adds	r1, #2
 800b1f4:	f107 030b 	add.w	r3, r7, #11
 800b1f8:	f107 020a 	add.w	r2, r7, #10
 800b1fc:	f7f6 fd98 	bl	8001d30 <Pack_logic_2_jlb>
                        telemetry_data.insert(telemetry_data.end(), data, data + logic_2_DLC + 2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 ff8c 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800b212:	4603      	mov	r3, r0
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	f107 021c 	add.w	r2, r7, #28
 800b21a:	f107 0318 	add.w	r3, r7, #24
 800b21e:	4611      	mov	r1, r2
 800b220:	4618      	mov	r0, r3
 800b222:	f001 f813 	bl	800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800b226:	f107 030c 	add.w	r3, r7, #12
 800b22a:	330a      	adds	r3, #10
 800b22c:	f107 020c 	add.w	r2, r7, #12
 800b230:	69b9      	ldr	r1, [r7, #24]
 800b232:	4620      	mov	r0, r4
 800b234:	f001 f81b 	bl	800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>
                }
 800b238:	bf00      	nop
 800b23a:	3724      	adds	r7, #36	; 0x24
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd90      	pop	{r4, r7, pc}

0800b240 <_ZN3jlb5LogicC1ENS_9DirectionEfff>:
namespace jlb
{
    class Logic
    {
    public:
        Logic(Direction direction_ = Direction::STRAIGHT, const float x_t_ = 0.0f, const float y_t_ = 0.0f, const float theta_t_ = 0.0f) : odometry(x_t_, y_t_, theta_t_), controller(direction_) {}
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b089      	sub	sp, #36	; 0x24
 800b244:	af02      	add	r7, sp, #8
 800b246:	6178      	str	r0, [r7, #20]
 800b248:	6139      	str	r1, [r7, #16]
 800b24a:	ed87 0a03 	vstr	s0, [r7, #12]
 800b24e:	edc7 0a02 	vstr	s1, [r7, #8]
 800b252:	ed87 1a01 	vstr	s2, [r7, #4]
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	ed97 1a01 	vldr	s2, [r7, #4]
 800b25c:	edd7 0a02 	vldr	s1, [r7, #8]
 800b260:	ed97 0a03 	vldr	s0, [r7, #12]
 800b264:	4618      	mov	r0, r3
 800b266:	f7fd f82a 	bl	80082be <_ZN3jlb8OdometryC1Efff>
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	3388      	adds	r3, #136	; 0x88
 800b26e:	6939      	ldr	r1, [r7, #16]
 800b270:	4618      	mov	r0, r3
 800b272:	f7f8 fe7f 	bl	8003f74 <_ZN3jlb10ControllerC1ENS_9DirectionE>
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7f9 fdb7 	bl	8004df0 <_ZN3jlb5GraphC1Ev>
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800b288:	6979      	ldr	r1, [r7, #20]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b296:	f7fd fc82 	bl	8008b9e <_ZN3jlb7ASStateC1ERNS_8OdometryERNS_10ControllerERNS_5GraphE>
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f503 70d4 	add.w	r0, r3, #424	; 0x1a8
 800b2a0:	6979      	ldr	r1, [r7, #20]
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f103 0288 	add.w	r2, r3, #136	; 0x88
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	4623      	mov	r3, r4
 800b2b8:	f7fd ffce 	bl	8009258 <_ZN3jlb12SignalSenderC1ERKNS_8OdometryERKNS_10ControllerERKNS_7ASStateERKNS_5GraphE>
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd90      	pop	{r4, r7, pc}

0800b2c6 <_ZN3jlb5Logic6updateEv>:

        ControlSignal update()
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b090      	sub	sp, #64	; 0x40
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
        {
            auto [vx, x, y, theta] = odometry.update_odom();
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fd f969 	bl	80085a8 <_ZN3jlb8Odometry11update_odomEv>
 800b2d6:	eeb0 6a40 	vmov.f32	s12, s0
 800b2da:	eef0 6a60 	vmov.f32	s13, s1
 800b2de:	eeb0 7a41 	vmov.f32	s14, s2
 800b2e2:	eef0 7a61 	vmov.f32	s15, s3
 800b2e6:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 800b2ea:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 800b2ee:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800b2f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            controller.set_current_velocity(vx);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3388      	adds	r3, #136	; 0x88
            auto [vx, x, y, theta] = odometry.update_odom();
 800b2fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
            controller.set_current_velocity(vx);
 800b2fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b302:	4618      	mov	r0, r3
 800b304:	f7f9 fc91 	bl	8004c2a <_ZN3jlb10Controller20set_current_velocityEf>

            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 800b30e:	f107 0318 	add.w	r3, r7, #24
 800b312:	4611      	mov	r1, r2
 800b314:	4618      	mov	r0, r3
 800b316:	f7fd fca7 	bl	8008c68 <_ZN3jlb7ASState6updateEv>
            controller.set_reference_speed(reference_speed);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3388      	adds	r3, #136	; 0x88
            auto [mission, labyrinth_state, fast_state, reference_speed] = as_state.update();
 800b31e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
            controller.set_reference_speed(reference_speed);
 800b322:	eeb0 0a67 	vmov.f32	s0, s15
 800b326:	4618      	mov	r0, r3
 800b328:	f7f9 fca4 	bl	8004c74 <_ZN3jlb10Controller19set_reference_speedEf>

            auto [target_angle, target_speed] = controller.update();
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3388      	adds	r3, #136	; 0x88
 800b330:	4618      	mov	r0, r3
 800b332:	f7f9 fbff 	bl	8004b34 <_ZN3jlb10Controller6updateEv>
 800b336:	eeb0 7a40 	vmov.f32	s14, s0
 800b33a:	eef0 7a60 	vmov.f32	s15, s1
 800b33e:	ed87 7a04 	vstr	s14, [r7, #16]
 800b342:	edc7 7a05 	vstr	s15, [r7, #20]
 800b346:	693b      	ldr	r3, [r7, #16]
            return ControlSignal{target_angle, target_speed};
 800b348:	63bb      	str	r3, [r7, #56]	; 0x38
            auto [target_angle, target_speed] = controller.update();
 800b34a:	697b      	ldr	r3, [r7, #20]
            return ControlSignal{target_angle, target_speed};
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b352:	ee07 2a10 	vmov	s14, r2
 800b356:	ee07 3a90 	vmov	s15, r3
        }
 800b35a:	eeb0 0a47 	vmov.f32	s0, s14
 800b35e:	eef0 0a67 	vmov.f32	s1, s15
 800b362:	3740      	adds	r7, #64	; 0x40
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>:

        void set_detection_front(bool *detection_front_, std::vector<float> line_positions_front_)
 800b368:	b590      	push	{r4, r7, lr}
 800b36a:	b089      	sub	sp, #36	; 0x24
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
        {
            as_state.current_number_of_lines = static_cast<uint8_t>(line_positions_front_.size());
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7f8 f862 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800b37a:	4603      	mov	r3, r0
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
            controller.set_detection_front(detection_front_, line_positions_front_);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800b38a:	f107 0314 	add.w	r3, r7, #20
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 fa85 	bl	800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b396:	f107 0314 	add.w	r3, r7, #20
 800b39a:	461a      	mov	r2, r3
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f7f9 fbfd 	bl	8004b9e <_ZN3jlb10Controller19set_detection_frontEPbSt6vectorIfSaIfEE>
 800b3a4:	f107 0314 	add.w	r3, r7, #20
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7f7 fda9 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
        }
 800b3ae:	bf00      	nop
 800b3b0:	3724      	adds	r7, #36	; 0x24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd90      	pop	{r4, r7, pc}

0800b3b6 <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>:
        void set_detection_rear(bool *detection_rear_, std::vector<float> line_positions_rear_) { controller.set_detection_rear(detection_rear_, line_positions_rear_); }
 800b3b6:	b590      	push	{r4, r7, lr}
 800b3b8:	b089      	sub	sp, #36	; 0x24
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800b3c8:	f107 0314 	add.w	r3, r7, #20
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 fa66 	bl	800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b3d4:	f107 0314 	add.w	r3, r7, #20
 800b3d8:	461a      	mov	r2, r3
 800b3da:	68b9      	ldr	r1, [r7, #8]
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f7f9 fc01 	bl	8004be4 <_ZN3jlb10Controller18set_detection_rearEPbSt6vectorIfSaIfEE>
 800b3e2:	f107 0314 	add.w	r3, r7, #20
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7f7 fd8a 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
 800b3ec:	bf00      	nop
 800b3ee:	3724      	adds	r7, #36	; 0x24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd90      	pop	{r4, r7, pc}

0800b3f4 <_ZN3jlb5Logic12imu_callbackEf>:
        void set_under_gate(const bool under_gate_) { as_state.under_gate = under_gate_; }
        void set_at_cross_section(const bool at_cross_section_) { as_state.at_cross_section = at_cross_section_; }
        void imu_callback(const float yaw_rate_) { odometry.imu_callback(yaw_rate_); }
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	ed87 0a00 	vstr	s0, [r7]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	ed97 0a00 	vldr	s0, [r7]
 800b406:	4618      	mov	r0, r3
 800b408:	f7fd f85c 	bl	80084c4 <_ZN3jlb8Odometry12imu_callbackEf>
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <_ZN3jlb5Logic12rpm_callbackEf>:
        void rpm_callback(const float motor_rpm_) { odometry.rpm_callback(motor_rpm_); }
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	ed87 0a00 	vstr	s0, [r7]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	ed97 0a00 	vldr	s0, [r7]
 800b426:	4618      	mov	r0, r3
 800b428:	f7fc ffb2 	bl	8008390 <_ZN3jlb8Odometry12rpm_callbackEf>
 800b42c:	bf00      	nop
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <_ZN3jlb5Logic16set_object_rangeEf>:
        void set_object_range(const float object_range_) { controller.set_object_range(object_range_); }
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	ed87 0a00 	vstr	s0, [r7]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3388      	adds	r3, #136	; 0x88
 800b444:	ed97 0a00 	vldr	s0, [r7]
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f9 fb99 	bl	8004b80 <_ZN3jlb10Controller16set_object_rangeEf>
 800b44e:	bf00      	nop
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>:
        void set_states(const CompositeState state_) { as_state.set_states(state_); }
 800b456:	b084      	sub	sp, #16
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af02      	add	r7, sp, #8
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	f107 0014 	add.w	r0, r7, #20
 800b464:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800b46e:	6a3b      	ldr	r3, [r7, #32]
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	f107 0314 	add.w	r3, r7, #20
 800b476:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b478:	f7fd fbd2 	bl	8008c20 <_ZN3jlb7ASState10set_statesENS_14CompositeStateE>
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b486:	b004      	add	sp, #16
 800b488:	4770      	bx	lr

0800b48a <_ZN3jlb5Logic14send_telemetryEv>:
        void send_telemetry() { signal_sender.send_telemetry(); }
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fd ff0e 	bl	80092ba <_ZN3jlb12SignalSender14send_telemetryEv>
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <_ZN3jlb5Logic12get_odometryEv>:
        Odom get_odometry() { return {odometry.vx_t, odometry.x_t, odometry.y_t, odometry.theta_t}; }
 800b4a6:	b480      	push	{r7}
 800b4a8:	b08b      	sub	sp, #44	; 0x2c
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6178      	str	r0, [r7, #20]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	61bb      	str	r3, [r7, #24]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	61fb      	str	r3, [r7, #28]
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	623b      	str	r3, [r7, #32]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c6:	69b8      	ldr	r0, [r7, #24]
 800b4c8:	69f9      	ldr	r1, [r7, #28]
 800b4ca:	6a3a      	ldr	r2, [r7, #32]
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	ee06 0a10 	vmov	s12, r0
 800b4d2:	ee06 1a90 	vmov	s13, r1
 800b4d6:	ee07 2a10 	vmov	s14, r2
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eeb0 0a46 	vmov.f32	s0, s12
 800b4e2:	eef0 0a66 	vmov.f32	s1, s13
 800b4e6:	eeb0 1a47 	vmov.f32	s2, s14
 800b4ea:	eef0 1a67 	vmov.f32	s3, s15
 800b4ee:	372c      	adds	r7, #44	; 0x2c
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <_Z19RegistrateUserTasksv>:
{ .name = "LoggerTask", .stack_size = 128 * 5, .priority = (osPriority_t) osPriorityHigh };



void RegistrateUserTasks()
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	af00      	add	r7, sp, #0
	adcTaskHandle = osThreadNew(ADCTask, NULL, &adcTask_attributes);
 800b4fc:	4a10      	ldr	r2, [pc, #64]	; (800b540 <_Z19RegistrateUserTasksv+0x48>)
 800b4fe:	2100      	movs	r1, #0
 800b500:	4810      	ldr	r0, [pc, #64]	; (800b544 <_Z19RegistrateUserTasksv+0x4c>)
 800b502:	f012 fb19 	bl	801db38 <osThreadNew>
 800b506:	4603      	mov	r3, r0
 800b508:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <_Z19RegistrateUserTasksv+0x50>)
 800b50a:	6013      	str	r3, [r2, #0]
	mainTaskHandle = osThreadNew(MainTask, NULL, &mainTask_attributes);
 800b50c:	4a0f      	ldr	r2, [pc, #60]	; (800b54c <_Z19RegistrateUserTasksv+0x54>)
 800b50e:	2100      	movs	r1, #0
 800b510:	480f      	ldr	r0, [pc, #60]	; (800b550 <_Z19RegistrateUserTasksv+0x58>)
 800b512:	f012 fb11 	bl	801db38 <osThreadNew>
 800b516:	4603      	mov	r3, r0
 800b518:	4a0e      	ldr	r2, [pc, #56]	; (800b554 <_Z19RegistrateUserTasksv+0x5c>)
 800b51a:	6013      	str	r3, [r2, #0]
	encoderTaskHandle = osThreadNew(Encoder_Task, NULL, &encoderTask_attributes);
 800b51c:	4a0e      	ldr	r2, [pc, #56]	; (800b558 <_Z19RegistrateUserTasksv+0x60>)
 800b51e:	2100      	movs	r1, #0
 800b520:	480e      	ldr	r0, [pc, #56]	; (800b55c <_Z19RegistrateUserTasksv+0x64>)
 800b522:	f012 fb09 	bl	801db38 <osThreadNew>
 800b526:	4603      	mov	r3, r0
 800b528:	4a0d      	ldr	r2, [pc, #52]	; (800b560 <_Z19RegistrateUserTasksv+0x68>)
 800b52a:	6013      	str	r3, [r2, #0]
	loggerTaskHandle = osThreadNew(LoggerTask, NULL, &loggerTask_attributes);
 800b52c:	4a0d      	ldr	r2, [pc, #52]	; (800b564 <_Z19RegistrateUserTasksv+0x6c>)
 800b52e:	2100      	movs	r1, #0
 800b530:	480d      	ldr	r0, [pc, #52]	; (800b568 <_Z19RegistrateUserTasksv+0x70>)
 800b532:	f012 fb01 	bl	801db38 <osThreadNew>
 800b536:	4603      	mov	r3, r0
 800b538:	4a0c      	ldr	r2, [pc, #48]	; (800b56c <_Z19RegistrateUserTasksv+0x74>)
 800b53a:	6013      	str	r3, [r2, #0]

}
 800b53c:	bf00      	nop
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	08023df0 	.word	0x08023df0
 800b544:	0800b571 	.word	0x0800b571
 800b548:	20000628 	.word	0x20000628
 800b54c:	08023e14 	.word	0x08023e14
 800b550:	0800b5a1 	.word	0x0800b5a1
 800b554:	2000062c 	.word	0x2000062c
 800b558:	08023e38 	.word	0x08023e38
 800b55c:	08002209 	.word	0x08002209
 800b560:	20000630 	.word	0x20000630
 800b564:	08023e5c 	.word	0x08023e5c
 800b568:	0800b78d 	.word	0x0800b78d
 800b56c:	20000634 	.word	0x20000634

0800b570 <_Z7ADCTaskPv>:

void ADCTask(void *argument)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800b578:	f013 fc50 	bl	801ee1c <xTaskGetTickCount>
 800b57c:	4603      	mov	r3, r0
 800b57e:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800b580:	2208      	movs	r2, #8
 800b582:	4905      	ldr	r1, [pc, #20]	; (800b598 <_Z7ADCTaskPv+0x28>)
 800b584:	4805      	ldr	r0, [pc, #20]	; (800b59c <_Z7ADCTaskPv+0x2c>)
 800b586:	f008 fb27 	bl	8013bd8 <HAL_ADC_Start_DMA>
		vTaskDelayUntil(&xLastWakeTime, 5u);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	2105      	movs	r1, #5
 800b590:	4618      	mov	r0, r3
 800b592:	f013 f9f3 	bl	801e97c <vTaskDelayUntil>
		HAL_ADC_Start_DMA(&hadc1, adc_values_raw, 8u);
 800b596:	e7f3      	b.n	800b580 <_Z7ADCTaskPv+0x10>
 800b598:	2000012c 	.word	0x2000012c
 800b59c:	20000638 	.word	0x20000638

0800b5a0 <_Z8MainTaskPv>:
	}
}

void MainTask(void * argument)
{
 800b5a0:	b590      	push	{r4, r7, lr}
 800b5a2:	b095      	sub	sp, #84	; 0x54
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	6078      	str	r0, [r7, #4]
	static uint8_t direction = 1u;
	logic.set_states({jlb::FastState::OUT_ACCEL_ZONE});
 800b5a8:	f107 0320 	add.w	r3, r7, #32
 800b5ac:	2104      	movs	r1, #4
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fd fac0 	bl	8008b34 <_ZN3jlb14CompositeStateC1ENS_9FastStateE>
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	f107 0320 	add.w	r3, r7, #32
 800b5bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5be:	4862      	ldr	r0, [pc, #392]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b5c0:	f7ff ff49 	bl	800b456 <_ZN3jlb5Logic10set_statesENS_14CompositeStateE>
	for (;;)
	{
		lv_battery_voltage = adc_values.lv_batt_voltage_raw / 4096.0f * 3.3f * LV_BATERY_VOLTAGE_DIVIDER * 1.04447;
 800b5c4:	4b61      	ldr	r3, [pc, #388]	; (800b74c <_Z8MainTaskPv+0x1ac>)
 800b5c6:	899b      	ldrh	r3, [r3, #12]
 800b5c8:	ee07 3a90 	vmov	s15, r3
 800b5cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b5d0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b750 <_Z8MainTaskPv+0x1b0>
 800b5d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b5d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800b754 <_Z8MainTaskPv+0x1b4>
 800b5dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b758 <_Z8MainTaskPv+0x1b8>
 800b5e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b5e8:	ee16 0a90 	vmov	r0, s13
 800b5ec:	f7f4 ff9e 	bl	800052c <__aeabi_f2d>
 800b5f0:	a353      	add	r3, pc, #332	; (adr r3, 800b740 <_Z8MainTaskPv+0x1a0>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	f7f4 fff1 	bl	80005dc <__aeabi_dmul>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4610      	mov	r0, r2
 800b600:	4619      	mov	r1, r3
 800b602:	f7f5 fabb 	bl	8000b7c <__aeabi_d2f>
 800b606:	4603      	mov	r3, r0
 800b608:	4a54      	ldr	r2, [pc, #336]	; (800b75c <_Z8MainTaskPv+0x1bc>)
 800b60a:	6013      	str	r3, [r2, #0]
		LineSensorTask();
 800b60c:	f7f7 f932 	bl	8002874 <_Z14LineSensorTaskv>
		IMU_Task();
 800b610:	f7f6 febc 	bl	800238c <_Z8IMU_Taskv>
		DistanceSensorTask();
 800b614:	f7f6 fc26 	bl	8001e64 <_Z18DistanceSensorTaskv>
		wheel_rpm = CalculateRPM();
 800b618:	f7f6 fe48 	bl	80022ac <_Z12CalculateRPMv>
 800b61c:	eef0 7a40 	vmov.f32	s15, s0
 800b620:	4b4f      	ldr	r3, [pc, #316]	; (800b760 <_Z8MainTaskPv+0x1c0>)
 800b622:	edc3 7a00 	vstr	s15, [r3]
		{
			motorcontrol.target_velocity = 0.0f;
		}
#else

		logic.imu_callback(imu.yaw);
 800b626:	4b4f      	ldr	r3, [pc, #316]	; (800b764 <_Z8MainTaskPv+0x1c4>)
 800b628:	edd3 7a03 	vldr	s15, [r3, #12]
 800b62c:	eeb0 0a67 	vmov.f32	s0, s15
 800b630:	4845      	ldr	r0, [pc, #276]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b632:	f7ff fedf 	bl	800b3f4 <_ZN3jlb5Logic12imu_callbackEf>
		logic.rpm_callback(wheel_rpm);
 800b636:	4b4a      	ldr	r3, [pc, #296]	; (800b760 <_Z8MainTaskPv+0x1c0>)
 800b638:	edd3 7a00 	vldr	s15, [r3]
 800b63c:	eeb0 0a67 	vmov.f32	s0, s15
 800b640:	4841      	ldr	r0, [pc, #260]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b642:	f7ff fee7 	bl	800b414 <_ZN3jlb5Logic12rpm_callbackEf>

		std::reverse(std::begin(ls_data.front_detection), std::end(ls_data.front_detection));
 800b646:	4848      	ldr	r0, [pc, #288]	; (800b768 <_Z8MainTaskPv+0x1c8>)
 800b648:	f000 f8e7 	bl	800b81a <_ZSt5beginIbLj32EEPT_RAT0__S0_>
 800b64c:	4604      	mov	r4, r0
 800b64e:	4846      	ldr	r0, [pc, #280]	; (800b768 <_Z8MainTaskPv+0x1c8>)
 800b650:	f000 f8ee 	bl	800b830 <_ZSt3endIbLj32EEPT_RAT0__S0_>
 800b654:	4603      	mov	r3, r0
 800b656:	4619      	mov	r1, r3
 800b658:	4620      	mov	r0, r4
 800b65a:	f000 fe40 	bl	800c2de <_ZSt7reverseIPbEvT_S1_>
		//std::reverse(std::begin(ls_data.rear_detection), std::end(ls_data.rear_detection));
		logic.set_detection_front( ls_data.front_detection, ls_data.front);
 800b65e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b662:	4942      	ldr	r1, [pc, #264]	; (800b76c <_Z8MainTaskPv+0x1cc>)
 800b664:	4618      	mov	r0, r3
 800b666:	f000 f91b 	bl	800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b66a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b66e:	461a      	mov	r2, r3
 800b670:	493d      	ldr	r1, [pc, #244]	; (800b768 <_Z8MainTaskPv+0x1c8>)
 800b672:	4835      	ldr	r0, [pc, #212]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b674:	f7ff fe78 	bl	800b368 <_ZN3jlb5Logic19set_detection_frontEPbSt6vectorIfSaIfEE>
 800b678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7f7 fc3f 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_detection_rear(ls_data.rear_detection, ls_data.rear);
 800b682:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b686:	493a      	ldr	r1, [pc, #232]	; (800b770 <_Z8MainTaskPv+0x1d0>)
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 f909 	bl	800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
 800b68e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b692:	461a      	mov	r2, r3
 800b694:	4937      	ldr	r1, [pc, #220]	; (800b774 <_Z8MainTaskPv+0x1d4>)
 800b696:	482c      	ldr	r0, [pc, #176]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b698:	f7ff fe8d 	bl	800b3b6 <_ZN3jlb5Logic18set_detection_rearEPbSt6vectorIfSaIfEE>
 800b69c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7f7 fc2d 	bl	8002f00 <_ZNSt6vectorIfSaIfEED1Ev>
		logic.set_object_range(distance_sensor.distance);
 800b6a6:	4b34      	ldr	r3, [pc, #208]	; (800b778 <_Z8MainTaskPv+0x1d8>)
 800b6a8:	edd3 7a08 	vldr	s15, [r3, #32]
 800b6ac:	eeb0 0a67 	vmov.f32	s0, s15
 800b6b0:	4825      	ldr	r0, [pc, #148]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b6b2:	f7ff febf 	bl	800b434 <_ZN3jlb5Logic16set_object_rangeEf>
		auto [target_angle, target_speed] = logic.update();
 800b6b6:	4824      	ldr	r0, [pc, #144]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b6b8:	f7ff fe05 	bl	800b2c6 <_ZN3jlb5Logic6updateEv>
 800b6bc:	eeb0 7a40 	vmov.f32	s14, s0
 800b6c0:	eef0 7a60 	vmov.f32	s15, s1
 800b6c4:	ed87 7a06 	vstr	s14, [r7, #24]
 800b6c8:	edc7 7a07 	vstr	s15, [r7, #28]
 800b6cc:	edd7 7a06 	vldr	s15, [r7, #24]
		SetSteeringAngle(target_angle);
 800b6d0:	eeb0 0a67 	vmov.f32	s0, s15
 800b6d4:	f7f8 fb52 	bl	8003d7c <_Z16SetSteeringAnglef>
		auto [vx_t, x_t, y_t, theta_t] = logic.get_odometry();
 800b6d8:	481b      	ldr	r0, [pc, #108]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b6da:	f7ff fee4 	bl	800b4a6 <_ZN3jlb5Logic12get_odometryEv>
 800b6de:	eeb0 6a40 	vmov.f32	s12, s0
 800b6e2:	eef0 6a60 	vmov.f32	s13, s1
 800b6e6:	eeb0 7a41 	vmov.f32	s14, s2
 800b6ea:	eef0 7a61 	vmov.f32	s15, s3
 800b6ee:	ed87 6a02 	vstr	s12, [r7, #8]
 800b6f2:	edc7 6a03 	vstr	s13, [r7, #12]
 800b6f6:	ed87 7a04 	vstr	s14, [r7, #16]
 800b6fa:	edc7 7a05 	vstr	s15, [r7, #20]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
		motorcontrol.actual_velocity = vx_t;
 800b700:	4a1e      	ldr	r2, [pc, #120]	; (800b77c <_Z8MainTaskPv+0x1dc>)
 800b702:	6093      	str	r3, [r2, #8]
		auto [target_angle, target_speed] = logic.update();
 800b704:	69fb      	ldr	r3, [r7, #28]
		motorcontrol.target_velocity = target_speed;
 800b706:	4a1d      	ldr	r2, [pc, #116]	; (800b77c <_Z8MainTaskPv+0x1dc>)
 800b708:	60d3      	str	r3, [r2, #12]
		MotorControlTask();
 800b70a:	f7f8 f989 	bl	8003a20 <_Z16MotorControlTaskv>
		auto [target_angle, target_speed] = logic.update();
 800b70e:	edd7 7a06 	vldr	s15, [r7, #24]
		SetSteeringAngle(target_angle * -180.0f / 3.14f);
 800b712:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800b780 <_Z8MainTaskPv+0x1e0>
 800b716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b71a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b784 <_Z8MainTaskPv+0x1e4>
 800b71e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b722:	eeb0 0a47 	vmov.f32	s0, s14
 800b726:	f7f8 fb29 	bl	8003d7c <_Z16SetSteeringAnglef>
		logic.send_telemetry();
 800b72a:	4807      	ldr	r0, [pc, #28]	; (800b748 <_Z8MainTaskPv+0x1a8>)
 800b72c:	f7ff fead 	bl	800b48a <_ZN3jlb5Logic14send_telemetryEv>

#endif
		vTaskSuspend(static_cast<TaskHandle_t>(mainTaskHandle));
 800b730:	4b15      	ldr	r3, [pc, #84]	; (800b788 <_Z8MainTaskPv+0x1e8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f013 f9a3 	bl	801ea80 <vTaskSuspend>
	}
 800b73a:	e743      	b.n	800b5c4 <_Z8MainTaskPv+0x24>
 800b73c:	f3af 8000 	nop.w
 800b740:	2cba732e 	.word	0x2cba732e
 800b744:	3ff0b626 	.word	0x3ff0b626
 800b748:	20000308 	.word	0x20000308
 800b74c:	2000014c 	.word	0x2000014c
 800b750:	45800000 	.word	0x45800000
 800b754:	40533333 	.word	0x40533333
 800b758:	3e7df3b6 	.word	0x3e7df3b6
 800b75c:	20000300 	.word	0x20000300
 800b760:	20000304 	.word	0x20000304
 800b764:	200001a8 	.word	0x200001a8
 800b768:	20000240 	.word	0x20000240
 800b76c:	20000288 	.word	0x20000288
 800b770:	20000294 	.word	0x20000294
 800b774:	20000260 	.word	0x20000260
 800b778:	2000015c 	.word	0x2000015c
 800b77c:	200002a0 	.word	0x200002a0
 800b780:	c3340000 	.word	0xc3340000
 800b784:	4048f5c3 	.word	0x4048f5c3
 800b788:	2000062c 	.word	0x2000062c

0800b78c <_Z10LoggerTaskPv>:
}

void LoggerTask(void *argument)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800b794:	f013 fb42 	bl	801ee1c <xTaskGetTickCount>
 800b798:	4603      	mov	r3, r0
 800b79a:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		vTaskDelayUntil(&xLastWakeTime, 50u);
 800b79c:	f107 030c 	add.w	r3, r7, #12
 800b7a0:	2132      	movs	r1, #50	; 0x32
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f013 f8ea 	bl	801e97c <vTaskDelayUntil>
 800b7a8:	e7f8      	b.n	800b79c <_Z10LoggerTaskPv+0x10>

0800b7aa <_ZSt4copyIPKcPcET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800b7aa:	b590      	push	{r4, r7, lr}
 800b7ac:	b085      	sub	sp, #20
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 fda4 	bl	800c304 <_ZSt12__miter_baseIPKcET_S2_>
 800b7bc:	4604      	mov	r4, r0
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f000 fda0 	bl	800c304 <_ZSt12__miter_baseIPKcET_S2_>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f000 fda5 	bl	800c31a <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 800b7d0:	4603      	mov	r3, r0
    }
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd90      	pop	{r4, r7, pc}

0800b7da <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 800b7da:	b590      	push	{r4, r7, lr}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 800b7e4:	f7f8 fb60 	bl	8003ea8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 800b7e8:	4622      	mov	r2, r4
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 fdd9 	bl	800c3a4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd90      	pop	{r4, r7, pc}

0800b7fa <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800b7fa:	b480      	push	{r7}
 800b7fc:	b083      	sub	sp, #12
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
      }
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <_ZSt5beginIbLj32EEPT_RAT0__S0_>:
   *  @brief  Return an iterator pointing to the first element of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 800b81a:	b480      	push	{r7}
 800b81c:	b083      	sub	sp, #12
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
    { return __arr; }
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <_ZSt3endIbLj32EEPT_RAT0__S0_>:
   *          of the array.
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3320      	adds	r3, #32
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800b854:	461a      	mov	r2, r3
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 fdd3 	bl	800c404 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>
 800b85e:	4602      	mov	r2, r0
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	4293      	cmp	r3, r2
 800b864:	bf0c      	ite	eq
 800b866:	2301      	moveq	r3, #1
 800b868:	2300      	movne	r3, #0
 800b86a:	b2db      	uxtb	r3, r3
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <_ZSt6all_ofIPbZN3jlb10Controller15lateral_controlEfEUlbE0_EbT_S4_T0_>:
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 800b880:	461a      	mov	r2, r3
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 fdd0 	bl	800c42a <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>
 800b88a:	4602      	mov	r2, r0
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	4293      	cmp	r3, r2
 800b890:	bf0c      	ite	eq
 800b892:	2301      	moveq	r3, #1
 800b894:	2300      	movne	r3, #0
 800b896:	b2db      	uxtb	r3, r3
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800b8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800b8aa:	687c      	ldr	r4, [r7, #4]
 800b8ac:	6838      	ldr	r0, [r7, #0]
 800b8ae:	f7f7 fdc6 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7f7 fe6c 	bl	8003594 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 fdc3 	bl	800c450 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 800b8ca:	f107 030c 	add.w	r3, r7, #12
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 fdca 	bl	800c46c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 800b8d8:	f107 030c 	add.w	r3, r7, #12
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7f7 faeb 	bl	8002eb8 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b8e2:	6838      	ldr	r0, [r7, #0]
 800b8e4:	f000 fdd6 	bl	800c494 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800b8e8:	4605      	mov	r5, r0
 800b8ea:	6838      	ldr	r0, [r7, #0]
 800b8ec:	f000 fde2 	bl	800c4b4 <_ZNKSt6vectorIfSaIfEE3endEv>
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f7 fb82 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b8fe:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800b900:	4622      	mov	r2, r4
 800b902:	4631      	mov	r1, r6
 800b904:	4628      	mov	r0, r5
 800b906:	f000 fde6 	bl	800c4d6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800b90a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	605a      	str	r2, [r3, #4]
      }
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4618      	mov	r0, r3
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b91a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	ed93 7a00 	vldr	s14, [r3]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	edd3 7a00 	vldr	s15, [r3]
 800b930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b938:	d501      	bpl.n	800b93e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	e000      	b.n	800b940 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800b93e:	687b      	ldr	r3, [r7, #4]
    }
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 800b950:	2300      	movs	r3, #0
 800b952:	4618      	mov	r0, r3
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 800b960:	2301      	movs	r3, #1
 800b962:	4618      	mov	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <_ZSteqRKSaIfES1_>:
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
      { return true; }
 800b976:	2301      	movs	r3, #1
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <_ZSt4copyIPfS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800b984:	b590      	push	{r4, r7, lr}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fe0e 	bl	800c5b2 <_ZSt12__miter_baseIPfET_S1_>
 800b996:	4604      	mov	r4, r0
 800b998:	68b8      	ldr	r0, [r7, #8]
 800b99a:	f000 fe0a 	bl	800c5b2 <_ZSt12__miter_baseIPfET_S1_>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 fe0f 	bl	800c5c8 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>
 800b9aa:	4603      	mov	r3, r0
    }
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3714      	adds	r7, #20
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd90      	pop	{r4, r7, pc}

0800b9b4 <_ZNSt6vectorIfSaIfEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800b9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	f000 80e9 	beq.w	800bb9a <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1e6>
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 800b9c8:	f7ff ffc0 	bl	800b94c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE27_S_propagate_on_copy_assignEv>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d046      	beq.n	800ba60 <_ZNSt6vectorIfSaIfEEaSERKS1_+0xac>
	      if (!_Alloc_traits::_S_always_equal()
 800b9d2:	f7ff ffc3 	bl	800b95c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE15_S_always_equalEv>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	f083 0301 	eor.w	r3, r3, #1
 800b9dc:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d015      	beq.n	800ba0e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7f7 fb0c 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f7 fdd0 	bl	8003594 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f7ff ffb7 	bl	800b96c <_ZSteqRKSaIfES1_>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f083 0301 	eor.w	r3, r3, #1
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5a>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e000      	b.n	800ba10 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x5c>
 800ba0e:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d017      	beq.n	800ba44 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x90>
		  this->clear();
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7f7 fa8e 	bl	8002f36 <_ZNSt6vectorIfSaIfEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	109b      	asrs	r3, r3, #2
		  _M_deallocate(this->_M_impl._M_start,
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f7f7 fad5 	bl	8002fdc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
		  this->_M_impl._M_start = nullptr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	609a      	str	r2, [r3, #8]
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f7 fadb 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ba4c:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7f7 fd9f 	bl	8003594 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ba56:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fd4c 	bl	800c4f8 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>
	  const size_type __xlen = __x.size();
 800ba60:	6838      	ldr	r0, [r7, #0]
 800ba62:	f7f7 fcec 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800ba66:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fd50 	bl	800c50e <_ZNKSt6vectorIfSaIfEE8capacityEv>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4293      	cmp	r3, r2
 800ba74:	bf8c      	ite	hi
 800ba76:	2301      	movhi	r3, #1
 800ba78:	2300      	movls	r3, #0
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d032      	beq.n	800bae6 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x132>
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 800ba80:	6838      	ldr	r0, [r7, #0]
 800ba82:	f000 fd07 	bl	800c494 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800ba86:	4604      	mov	r4, r0
 800ba88:	6838      	ldr	r0, [r7, #0]
 800ba8a:	f000 fd13 	bl	800c4b4 <_ZNKSt6vectorIfSaIfEE3endEv>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	4622      	mov	r2, r4
 800ba92:	68f9      	ldr	r1, [r7, #12]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fd4a 	bl	800c52e <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>
 800ba9a:	60b8      	str	r0, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681c      	ldr	r4, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7f7 faab 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800baac:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800baae:	461a      	mov	r2, r3
 800bab0:	4629      	mov	r1, r5
 800bab2:	4620      	mov	r0, r4
 800bab4:	f7f7 fab0 	bl	8003018 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	109b      	asrs	r3, r3, #2
	      _M_deallocate(this->_M_impl._M_start,
 800baca:	461a      	mov	r2, r3
 800bacc:	f7f7 fa86 	bl	8002fdc <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	      this->_M_impl._M_start = __tmp;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	441a      	add	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	609a      	str	r2, [r3, #8]
 800bae4:	e052      	b.n	800bb8c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	  else if (size() >= __xlen)
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7f7 fca9 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800baec:	4602      	mov	r2, r0
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4293      	cmp	r3, r2
 800baf2:	bf94      	ite	ls
 800baf4:	2301      	movls	r3, #1
 800baf6:	2300      	movhi	r3, #0
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d020      	beq.n	800bb40 <_ZNSt6vectorIfSaIfEEaSERKS1_+0x18c>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f000 fcc8 	bl	800c494 <_ZNKSt6vectorIfSaIfEE5beginEv>
 800bb04:	4604      	mov	r4, r0
 800bb06:	6838      	ldr	r0, [r7, #0]
 800bb08:	f000 fcd4 	bl	800c4b4 <_ZNKSt6vectorIfSaIfEE3endEv>
 800bb0c:	4605      	mov	r5, r0
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7f7 fc08 	bl	8003324 <_ZNSt6vectorIfSaIfEE5beginEv>
 800bb14:	4603      	mov	r3, r0
 800bb16:	461a      	mov	r2, r3
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fd23 	bl	800c566 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>
 800bb20:	4604      	mov	r4, r0
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7f7 face 	bl	80030c4 <_ZNSt6vectorIfSaIfEE3endEv>
 800bb28:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f7 fa68 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bb32:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800bb34:	461a      	mov	r2, r3
 800bb36:	4629      	mov	r1, r5
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fd2c 	bl	800c596 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>
 800bb3e:	e025      	b.n	800bb8c <_ZNSt6vectorIfSaIfEEaSERKS1_+0x1d8>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681d      	ldr	r5, [r3, #0]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681c      	ldr	r4, [r3, #0]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7f7 fc78 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	18e1      	adds	r1, r4, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	f7ff ff12 	bl	800b984 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681c      	ldr	r4, [r3, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7f7 fc6a 	bl	800343e <_ZNKSt6vectorIfSaIfEE4sizeEv>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f7 fa41 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bb80:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800bb82:	4632      	mov	r2, r6
 800bb84:	4629      	mov	r1, r5
 800bb86:	4620      	mov	r0, r4
 800bb88:	f000 fd41 	bl	800c60e <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	441a      	add	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	605a      	str	r2, [r3, #4]
      return *this;
 800bb9a:	687b      	ldr	r3, [r7, #4]
    }
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bba4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fd3f 	bl	800c630 <_ZNSaIN3jlb4EdgeEEC1Ev>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fd47 	bl	800c648 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <_ZNSaIN3jlb4EdgeEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689a      	ldr	r2, [r3, #8]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	10db      	asrs	r3, r3, #3
 800bbf4:	4a07      	ldr	r2, [pc, #28]	; (800bc14 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev+0x38>)
 800bbf6:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f000 fd37 	bl	800c670 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7f9 f845 	bl	8004c94 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implD1Ev>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	aaaaaaab 	.word	0xaaaaaaab

0800bc18 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bc18:	b5b0      	push	{r4, r5, r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681c      	ldr	r4, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 fd33 	bl	800c696 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800bc30:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bc32:	461a      	mov	r2, r3
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 fd38 	bl	800c6ac <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>
      }
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7ff ffcc 	bl	800bbdc <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EED1Ev>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bdb0      	pop	{r4, r5, r7, pc}

0800bc4e <_ZNSt6vectorIcSaIcEEC1ERKS1_>:
      vector(const vector& __x)
 800bc4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc50:	b085      	sub	sp, #20
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800bc58:	687c      	ldr	r4, [r7, #4]
 800bc5a:	6838      	ldr	r0, [r7, #0]
 800bc5c:	f000 fae7 	bl	800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800bc60:	4605      	mov	r5, r0
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 fd3d 	bl	800c6e4 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fd28 	bl	800c6c8 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4620      	mov	r0, r4
 800bc82:	f000 fd3a 	bl	800c6fa <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>
 800bc86:	f107 030c 	add.w	r3, r7, #12
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f014 fb4d 	bl	802032a <_ZNSaIcED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800bc90:	6838      	ldr	r0, [r7, #0]
 800bc92:	f000 fd46 	bl	800c722 <_ZNKSt6vectorIcSaIcEE5beginEv>
 800bc96:	4605      	mov	r5, r0
 800bc98:	6838      	ldr	r0, [r7, #0]
 800bc9a:	f000 fd52 	bl	800c742 <_ZNKSt6vectorIcSaIcEE3endEv>
 800bc9e:	4606      	mov	r6, r0
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 fd5c 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800bcac:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800bcae:	4622      	mov	r2, r4
 800bcb0:	4631      	mov	r1, r6
 800bcb2:	4628      	mov	r0, r5
 800bcb4:	f000 fd61 	bl	800c77a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>
 800bcb8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	605a      	str	r2, [r3, #4]
      }
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcc8 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bcc8:	b5b0      	push	{r4, r5, r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681c      	ldr	r4, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fd42 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800bce0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bce2:	461a      	mov	r2, r3
 800bce4:	4629      	mov	r1, r5
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 fd58 	bl	800c79c <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      }
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 fa68 	bl	800c1c4 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bdb0      	pop	{r4, r5, r7, pc}

0800bcfe <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800bd08:	6838      	ldr	r0, [r7, #0]
 800bd0a:	f000 fd55 	bl	800c7b8 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	4619      	mov	r1, r3
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fd5b 	bl	800c7ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fd83 	bl	800c834 <_ZNSaIN3jlb4NodeEEC1Ev>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f000 fd8b 	bl	800c84c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <_ZNSaIN3jlb4NodeEED1Ev>:
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
	...

0800bd58 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	10db      	asrs	r3, r3, #3
 800bd70:	4a07      	ldr	r2, [pc, #28]	; (800bd90 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev+0x38>)
 800bd72:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800bd76:	461a      	mov	r2, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fd7b 	bl	800c874 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      }
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7f9 f80f 	bl	8004da4 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE12_Vector_implD1Ev>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	aaaaaaab 	.word	0xaaaaaaab

0800bd94 <_ZNSt6vectorIN3jlb4NodeESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800bd94:	b5b0      	push	{r4, r5, r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681c      	ldr	r4, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 fd77 	bl	800c89a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800bdac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bdae:	461a      	mov	r2, r3
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 fd7c 	bl	800c8b0 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      }
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff ffcc 	bl	800bd58 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EED1Ev>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bdb0      	pop	{r4, r5, r7, pc}

0800bdca <_ZNSt6vectorIN3jlb4NodeESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800bdd4:	6838      	ldr	r0, [r7, #0]
 800bdd6:	f000 fd79 	bl	800c8cc <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>
 800bdda:	4603      	mov	r3, r0
 800bddc:	4619      	mov	r1, r3
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fd7f 	bl	800c8e2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <_ZNSt6vectorIcSaIcEEC1ESt16initializer_listIcERKS0_>:
      vector(initializer_list<value_type> __l,
 800bdec:	b5b0      	push	{r4, r5, r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	1d38      	adds	r0, r7, #4
 800bdf6:	e880 0006 	stmia.w	r0, {r1, r2}
 800bdfa:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	4618      	mov	r0, r3
 800be02:	f000 fda1 	bl	800c948 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800be06:	1d3b      	adds	r3, r7, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fdac 	bl	800c966 <_ZNKSt16initializer_listIcE5beginEv>
 800be0e:	4604      	mov	r4, r0
 800be10:	1d3b      	adds	r3, r7, #4
 800be12:	4618      	mov	r0, r3
 800be14:	f000 fdb3 	bl	800c97e <_ZNKSt16initializer_listIcE3endEv>
 800be18:	4602      	mov	r2, r0
 800be1a:	462b      	mov	r3, r5
 800be1c:	4621      	mov	r1, r4
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 fdd2 	bl	800c9c8 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>
      }
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bdb0      	pop	{r4, r5, r7, pc}

0800be2e <_ZNSt6vectorIN3jlb4NodeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800be2e:	b480      	push	{r7}
 800be30:	b083      	sub	sp, #12
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6819      	ldr	r1, [r3, #0]
 800be3c:	683a      	ldr	r2, [r7, #0]
 800be3e:	4613      	mov	r3, r2
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4413      	add	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	440b      	add	r3, r1
      }
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7f7 f82b 	bl	8002eb8 <_ZNSaIfED1Ev>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <_ZNSt11_Deque_baseIfSaIfEEC1Ev>:
      _Deque_base()
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fdde 	bl	800ca38 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800be7c:	2100      	movs	r1, #0
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fdea 	bl	800ca58 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d010      	beq.n	800bec0 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800bea6:	3304      	adds	r3, #4
 800bea8:	461a      	mov	r2, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fe37 	bl	800cb1e <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6819      	ldr	r1, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	461a      	mov	r2, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fe4a 	bl	800cb54 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff ffc6 	bl	800be54 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b08a      	sub	sp, #40	; 0x28
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800beda:	f107 0308 	add.w	r3, r7, #8
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f871 	bl	800bfc8 <_ZNSt5dequeIfSaIfEE5beginEv>
 800bee6:	f107 0318 	add.w	r3, r7, #24
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f87a 	bl	800bfe6 <_ZNSt5dequeIfSaIfEE3endEv>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 fe48 	bl	800cb8a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800befa:	4603      	mov	r3, r0
 800befc:	f107 0218 	add.w	r2, r7, #24
 800bf00:	f107 0108 	add.w	r1, r7, #8
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fe4b 	bl	800cba0 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff ffbe 	bl	800be8e <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4618      	mov	r0, r3
 800bf16:	3728      	adds	r7, #40	; 0x28
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <_ZNSt5dequeIfSaIfEE9push_backERKf>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d00c      	beq.n	800bf4e <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f7f7 f8af 	bl	80030a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	1d1a      	adds	r2, r3, #4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800bf4c:	e003      	b.n	800bf56 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fe33 	bl	800cbbc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f103 0218 	add.w	r2, r3, #24
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3308      	adds	r3, #8
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f000 fe66 	bl	800cc44 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d010      	beq.n	800bfba <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 fdf5 	bl	800cb8a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	f000 fe77 	bl	800cc9c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	1d1a      	adds	r2, r3, #4
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 800bfb8:	e002      	b.n	800bfc0 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 fe7a 	bl	800ccb4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 800bfc0:	bf00      	nop
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fe93 	bl	800cd04 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b082      	sub	sp, #8
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	3318      	adds	r3, #24
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fe84 	bl	800cd04 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4618      	mov	r0, r3
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_>:
   *  @return  The final sum.
   */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
 800c01a:	b580      	push	{r7, lr}
 800c01c:	ed2d 8b02 	vpush	{d8}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	ed87 0a01 	vstr	s0, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      for (; __first != __last; ++__first)
 800c02c:	e013      	b.n	800c056 <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x3c>
	__init = _GLIBCXX_MOVE_IF_20(__init) + *__first;
 800c02e:	1d3b      	adds	r3, r7, #4
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff ffe7 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800c036:	4603      	mov	r3, r0
 800c038:	ed93 8a00 	vldr	s16, [r3]
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 feb0 	bl	800cda2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800c042:	4603      	mov	r3, r0
 800c044:	edd3 7a00 	vldr	s15, [r3]
 800c048:	ee78 7a27 	vadd.f32	s15, s16, s15
 800c04c:	edc7 7a01 	vstr	s15, [r7, #4]
      for (; __first != __last; ++__first)
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 fe87 	bl	800cd64 <_ZNSt15_Deque_iteratorIfRfPfEppEv>
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 fe6f 	bl	800cd3c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>
 800c05e:	4603      	mov	r3, r0
 800c060:	f083 0301 	eor.w	r3, r3, #1
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e1      	bne.n	800c02e <_ZSt10accumulateISt15_Deque_iteratorIfRfPfEfET0_T_S5_S4_+0x14>
      return __init;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	ee07 3a90 	vmov	s15, r3
    }
 800c070:	eeb0 0a67 	vmov.f32	s0, s15
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	ecbd 8b02 	vpop	{d8}
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <_ZSt3minIfET_St16initializer_listIS0_E>:
    min(initializer_list<_Tp> __l)
 800c07e:	b590      	push	{r4, r7, lr}
 800c080:	b083      	sub	sp, #12
 800c082:	af00      	add	r7, sp, #0
 800c084:	463b      	mov	r3, r7
 800c086:	e883 0003 	stmia.w	r3, {r0, r1}
    { return *std::min_element(__l.begin(), __l.end()); }
 800c08a:	463b      	mov	r3, r7
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 fe94 	bl	800cdba <_ZNKSt16initializer_listIfE5beginEv>
 800c092:	4604      	mov	r4, r0
 800c094:	463b      	mov	r3, r7
 800c096:	4618      	mov	r0, r3
 800c098:	f000 fe9b 	bl	800cdd2 <_ZNKSt16initializer_listIfE3endEv>
 800c09c:	4603      	mov	r3, r0
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 fea8 	bl	800cdf6 <_ZSt11min_elementIPKfET_S2_S2_>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	ee07 3a90 	vmov	s15, r3
 800c0ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd90      	pop	{r4, r7, pc}

0800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	10db      	asrs	r3, r3, #3
 800c0cc:	4a04      	ldr	r2, [pc, #16]	; (800c0e0 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv+0x28>)
 800c0ce:	fb02 f303 	mul.w	r3, r2, r3
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	aaaaaaab 	.word	0xaaaaaaab

0800c0e4 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6819      	ldr	r1, [r3, #0]
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4413      	add	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	440b      	add	r3, r1
      }
 800c0fe:	4618      	mov	r0, r3
 800c100:	370c      	adds	r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	f107 030c 	add.w	r3, r7, #12
 800c118:	4611      	mov	r1, r2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fe7c 	bl	800ce18 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	1d1a      	adds	r2, r3, #4
 800c136:	f107 030c 	add.w	r3, r7, #12
 800c13a:	4611      	mov	r1, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 fe6b 	bl	800ce18 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <_ZSt4findIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEcET_S7_S7_RKT0_>:
    find(_InputIterator __first, _InputIterator __last,
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fe6d 	bl	800ce38 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 800c15e:	4603      	mov	r3, r0
 800c160:	461a      	mov	r2, r3
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 fe76 	bl	800ce56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>
 800c16a:	4603      	mov	r3, r0
    }
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <_ZN9__gnu_cxxeqIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c174:	b590      	push	{r4, r7, lr}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7fc fd67 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800c184:	4603      	mov	r3, r0
 800c186:	681c      	ldr	r4, [r3, #0]
 800c188:	6838      	ldr	r0, [r7, #0]
 800c18a:	f7fc fd62 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800c18e:	4603      	mov	r3, r0
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	429c      	cmp	r4, r3
 800c194:	bf0c      	ite	eq
 800c196:	2301      	moveq	r3, #1
 800c198:	2300      	movne	r3, #0
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	4618      	mov	r0, r3
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd90      	pop	{r4, r7, pc}

0800c1a4 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f014 f8ba 	bl	8020326 <_ZNSaIcEC1Ev>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fe64 	bl	800ce82 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800c1da:	461a      	mov	r2, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fe64 	bl	800ceaa <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      }
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fd f811 	bl	800920c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <_ZNSt6vectorIcSaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fe64 	bl	800ced0 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <_ZNSt6vectorIcSaIcEE4dataEv>:
      data() _GLIBCXX_NOEXCEPT
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fe76 	bl	800cf10 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>
 800c224:	4603      	mov	r3, r0
 800c226:	4618      	mov	r0, r3
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c22e:	b480      	push	{r7}
 800c230:	b083      	sub	sp, #12
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 800c256:	6838      	ldr	r0, [r7, #0]
 800c258:	f7fc fcfb 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800c25c:	4603      	mov	r3, r0
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	601a      	str	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <_ZNSt6vectorIcSaIcEE6insertIPcvEEN9__gnu_cxx17__normal_iteratorIS3_S1_EENS5_IPKcS1_EET_SA_>:
	insert(const_iterator __position, _InputIterator __first,
 800c26e:	b590      	push	{r4, r7, lr}
 800c270:	b08b      	sub	sp, #44	; 0x2c
 800c272:	af02      	add	r7, sp, #8
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	60b9      	str	r1, [r7, #8]
 800c278:	607a      	str	r2, [r7, #4]
 800c27a:	603b      	str	r3, [r7, #0]
	  difference_type __offset = __position - cbegin();
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f000 fe53 	bl	800cf28 <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800c282:	4603      	mov	r3, r0
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	f107 0210 	add.w	r2, r7, #16
 800c28a:	f107 0308 	add.w	r3, r7, #8
 800c28e:	4611      	mov	r1, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f000 fe59 	bl	800cf48 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800c296:	61f8      	str	r0, [r7, #28]
	  _M_insert_dispatch(begin() + __offset,
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff ff36 	bl	800c10a <_ZNSt6vectorIcSaIcEE5beginEv>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	f107 0314 	add.w	r3, r7, #20
 800c2a6:	69f9      	ldr	r1, [r7, #28]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fe61 	bl	800cf70 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800c2ae:	4601      	mov	r1, r0
 800c2b0:	f88d 4000 	strb.w	r4, [sp]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f000 fe70 	bl	800cf9e <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>
	  return begin() + __offset;
 800c2be:	68f8      	ldr	r0, [r7, #12]
 800c2c0:	f7ff ff23 	bl	800c10a <_ZNSt6vectorIcSaIcEE5beginEv>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	f107 0318 	add.w	r3, r7, #24
 800c2cc:	69f9      	ldr	r1, [r7, #28]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fe4e 	bl	800cf70 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800c2d4:	4603      	mov	r3, r0
	}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3724      	adds	r7, #36	; 0x24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd90      	pop	{r4, r7, pc}

0800c2de <_ZSt7reverseIPbEvT_S1_>:
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
 800c2de:	b5b0      	push	{r4, r5, r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
      std::__reverse(__first, __last, std::__iterator_category(__first));
 800c2e8:	687c      	ldr	r4, [r7, #4]
 800c2ea:	1d3b      	adds	r3, r7, #4
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fe6e 	bl	800cfce <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	6839      	ldr	r1, [r7, #0]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f000 fe73 	bl	800cfe2 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>
    }
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bdb0      	pop	{r4, r5, r7, pc}

0800c304 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4618      	mov	r0, r3
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800c31a:	b5b0      	push	{r4, r5, r7, lr}
 800c31c:	b084      	sub	sp, #16
 800c31e:	af00      	add	r7, sp, #0
 800c320:	60f8      	str	r0, [r7, #12]
 800c322:	60b9      	str	r1, [r7, #8]
 800c324:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f000 fe7c 	bl	800d024 <_ZSt12__niter_baseIPKcET_S2_>
 800c32c:	4604      	mov	r4, r0
 800c32e:	68b8      	ldr	r0, [r7, #8]
 800c330:	f000 fe78 	bl	800d024 <_ZSt12__niter_baseIPKcET_S2_>
 800c334:	4605      	mov	r5, r0
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 fe7e 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 800c33e:	4603      	mov	r3, r0
 800c340:	461a      	mov	r2, r3
 800c342:	4629      	mov	r1, r5
 800c344:	4620      	mov	r0, r4
 800c346:	f000 fe83 	bl	800d050 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 800c34a:	4602      	mov	r2, r0
 800c34c:	1d3b      	adds	r3, r7, #4
 800c34e:	4611      	mov	r1, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f000 fe8d 	bl	800d070 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800c356:	4603      	mov	r3, r0
    }
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bdb0      	pop	{r4, r5, r7, pc}

0800c360 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f7f7 f81d 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800c384:	4603      	mov	r3, r0
 800c386:	681c      	ldr	r4, [r3, #0]
 800c388:	6838      	ldr	r0, [r7, #0]
 800c38a:	f7f7 f818 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800c38e:	4603      	mov	r3, r0
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429c      	cmp	r4, r3
 800c394:	bf0c      	ite	eq
 800c396:	2301      	moveq	r3, #1
 800c398:	2300      	movne	r3, #0
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd90      	pop	{r4, r7, pc}

0800c3a4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800c3a4:	b5b0      	push	{r4, r5, r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 800c3b0:	f107 0208 	add.w	r2, r7, #8
 800c3b4:	f107 030c 	add.w	r3, r7, #12
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7ff ffda 	bl	800c374 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f083 0301 	eor.w	r3, r3, #1
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d017      	beq.n	800c3fc <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x58>
				std::__lg(__last - __first) * 2,
 800c3cc:	f107 020c 	add.w	r2, r7, #12
 800c3d0:	f107 0308 	add.w	r3, r7, #8
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f6 ffb4 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7f7 fd75 	bl	8003ece <_ZSt4__lgi>
 800c3e4:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 800c3e6:	005a      	lsls	r2, r3, #1
 800c3e8:	462b      	mov	r3, r5
 800c3ea:	68b9      	ldr	r1, [r7, #8]
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f000 fe4b 	bl	800d088 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 fe7d 	bl	800d0f6 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bdb0      	pop	{r4, r5, r7, pc}

0800c404 <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800c404:	b590      	push	{r4, r7, lr}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800c410:	4618      	mov	r0, r3
 800c412:	f000 fea8 	bl	800d166 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>
 800c416:	4622      	mov	r2, r4
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f000 feb6 	bl	800d18c <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>
 800c420:	4603      	mov	r3, r0
    }
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	bd90      	pop	{r4, r7, pc}

0800c42a <_ZSt11find_if_notIPbZN3jlb10Controller15lateral_controlEfEUlbE0_ET_S4_S4_T0_>:
    find_if_not(_InputIterator __first, _InputIterator __last,
 800c42a:	b590      	push	{r4, r7, lr}
 800c42c:	b085      	sub	sp, #20
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	713a      	strb	r2, [r7, #4]
      return std::__find_if_not(__first, __last,
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fec2 	bl	800d1c0 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>
 800c43c:	4622      	mov	r2, r4
 800c43e:	68b9      	ldr	r1, [r7, #8]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 fed0 	bl	800d1e6 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>
 800c446:	4603      	mov	r3, r0
    }
 800c448:	4618      	mov	r0, r3
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd90      	pop	{r4, r7, pc}

0800c450 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fedb 	bl	800d21a <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6879      	ldr	r1, [r7, #4]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fed9 	bl	800d234 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 fee7 	bl	800d258 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	f107 030c 	add.w	r3, r7, #12
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 fef2 	bl	800d28e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	f107 030c 	add.w	r3, r7, #12
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fee1 	bl	800d28e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	60f8      	str	r0, [r7, #12]
 800c4de:	60b9      	str	r1, [r7, #8]
 800c4e0:	607a      	str	r2, [r7, #4]
 800c4e2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 fee0 	bl	800d2ae <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <_ZSt15__alloc_on_copyISaIfEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
    }
 800c502:	bf00      	nop
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	109b      	asrs	r3, r3, #2
 800c522:	4618      	mov	r0, r3
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKfS1_EEEEPfjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 800c52e:	b580      	push	{r7, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
 800c53a:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	4618      	mov	r0, r3
 800c542:	f7f6 ff14 	bl	800336e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800c546:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7f6 fd59 	bl	8003002 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800c550:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	6839      	ldr	r1, [r7, #0]
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff ffbd 	bl	800c4d6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800c55c:	697b      	ldr	r3, [r7, #20]
	}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800c566:	b590      	push	{r4, r7, lr}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f000 fead 	bl	800d2d2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800c578:	4604      	mov	r4, r0
 800c57a:	68b8      	ldr	r0, [r7, #8]
 800c57c:	f000 fea9 	bl	800d2d2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800c580:	4603      	mov	r3, r0
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	4619      	mov	r1, r3
 800c586:	4620      	mov	r0, r4
 800c588:	f000 feae 	bl	800d2e8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>
 800c58c:	4603      	mov	r3, r0
    }
 800c58e:	4618      	mov	r0, r3
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	bd90      	pop	{r4, r7, pc}

0800c596 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fec0 	bl	800d32a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>
    }
 800c5aa:	bf00      	nop
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <_ZSt13__copy_move_aILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800c5c8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f7f7 f84f 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 800c5da:	4604      	mov	r4, r0
 800c5dc:	68b8      	ldr	r0, [r7, #8]
 800c5de:	f7f7 f84b 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f7 f846 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 feaf 	bl	800d356 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	1d3b      	adds	r3, r7, #4
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 feb9 	bl	800d376 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800c604:	4603      	mov	r3, r0
    }
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bdb0      	pop	{r4, r5, r7, pc}

0800c60e <_ZSt22__uninitialized_copy_aIPfS0_fET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	60b9      	str	r1, [r7, #8]
 800c618:	607a      	str	r2, [r7, #4]
 800c61a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 feb4 	bl	800d38e <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>
 800c626:	4603      	mov	r3, r0
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <_ZNSaIN3jlb4EdgeEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 feba 	bl	800d3b2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	605a      	str	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	609a      	str	r2, [r3, #8]
	{ }
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
	if (__p)
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fe9d 	bl	800d3c8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>
      }
 800c68e:	bf00      	nop
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <_ZSt8_DestroyIPN3jlb4EdgeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c6b8:	68b9      	ldr	r1, [r7, #8]
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f000 fea3 	bl	800d406 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>
    }
 800c6c0:	bf00      	nop
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 feab 	bl	800d432 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr

0800c6fa <_ZNSt12_Vector_baseIcSaIcEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6879      	ldr	r1, [r7, #4]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f000 fe9e 	bl	800d44c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800c710:	68b9      	ldr	r1, [r7, #8]
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f000 feac 	bl	800d470 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <_ZNKSt6vectorIcSaIcEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800c722:	b580      	push	{r7, lr}
 800c724:	b084      	sub	sp, #16
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	f107 030c 	add.w	r3, r7, #12
 800c730:	4611      	mov	r1, r2
 800c732:	4618      	mov	r0, r3
 800c734:	f000 feb6 	bl	800d4a4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <_ZNKSt6vectorIcSaIcEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	1d1a      	adds	r2, r3, #4
 800c74e:	f107 030c 	add.w	r3, r7, #12
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f000 fea5 	bl	800d4a4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPccET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b084      	sub	sp, #16
 800c77e:	af00      	add	r7, sp, #0
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	60b9      	str	r1, [r7, #8]
 800c784:	607a      	str	r2, [r7, #4]
 800c786:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68b9      	ldr	r1, [r7, #8]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 fe99 	bl	800d4c4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800c792:	4603      	mov	r3, r0
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c7a8:	68b9      	ldr	r1, [r7, #8]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 fe9c 	bl	800d4e8 <_ZSt8_DestroyIPcEvT_S1_>
    }
 800c7b0:	bf00      	nop
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c7ce:	b5b0      	push	{r4, r5, r7, lr}
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d012      	beq.n	800c80a <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c7e4:	687c      	ldr	r4, [r7, #4]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685d      	ldr	r5, [r3, #4]
 800c7ea:	6838      	ldr	r0, [r7, #0]
 800c7ec:	f000 fe92 	bl	800d514 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f000 feee 	bl	800d5d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	f103 0218 	add.w	r2, r3, #24
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	605a      	str	r2, [r3, #4]
 800c808:	e00c      	b.n	800c824 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fef6 	bl	800d5fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800c810:	4604      	mov	r4, r0
 800c812:	6838      	ldr	r0, [r7, #0]
 800c814:	f000 fe7e 	bl	800d514 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c818:	4603      	mov	r3, r0
 800c81a:	461a      	mov	r2, r3
 800c81c:	4621      	mov	r1, r4
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fefe 	bl	800d620 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 ff85 	bl	800d734 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>
 800c82a:	4603      	mov	r3, r0
      }
 800c82c:	4618      	mov	r0, r3
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bdb0      	pop	{r4, r5, r7, pc}

0800c834 <_ZNSaIN3jlb4NodeEEC1Ev>:
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 ff94 	bl	800d76a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	4618      	mov	r0, r3
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	601a      	str	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	605a      	str	r2, [r3, #4]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	609a      	str	r2, [r3, #8]
	{ }
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
	if (__p)
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d005      	beq.n	800c892 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	68b9      	ldr	r1, [r7, #8]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 ff77 	bl	800d780 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>
      }
 800c892:	bf00      	nop
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c89a:	b480      	push	{r7}
 800c89c:	b083      	sub	sp, #12
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 ff7d 	bl	800d7be <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>
    }
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <_ZSt4moveIRN3jlb4NodeEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c8e2:	b5b0      	push	{r4, r5, r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685a      	ldr	r2, [r3, #4]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d012      	beq.n	800c91e <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c8f8:	687c      	ldr	r4, [r7, #4]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685d      	ldr	r5, [r3, #4]
 800c8fe:	6838      	ldr	r0, [r7, #0]
 800c900:	f000 ff73 	bl	800d7ea <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c904:	4603      	mov	r3, r0
 800c906:	461a      	mov	r2, r3
 800c908:	4629      	mov	r1, r5
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 ffaf 	bl	800d86e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f103 0218 	add.w	r2, r3, #24
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	605a      	str	r2, [r3, #4]
 800c91c:	e00c      	b.n	800c938 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 ffb7 	bl	800d892 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800c924:	4604      	mov	r4, r0
 800c926:	6838      	ldr	r0, [r7, #0]
 800c928:	f000 ff5f 	bl	800d7ea <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800c92c:	4603      	mov	r3, r0
 800c92e:	461a      	mov	r2, r3
 800c930:	4621      	mov	r1, r4
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 ffbe 	bl	800d8b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 f84f 	bl	800d9dc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>
 800c93e:	4603      	mov	r3, r0
      }
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bdb0      	pop	{r4, r5, r7, pc}

0800c948 <_ZNSt12_Vector_baseIcSaIcEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	4618      	mov	r0, r3
 800c958:	f000 fd78 	bl	800d44c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <_ZNKSt16initializer_listIcE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <_ZNKSt16initializer_listIcE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800c97e:	b590      	push	{r4, r7, lr}
 800c980:	b083      	sub	sp, #12
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7ff ffed 	bl	800c966 <_ZNKSt16initializer_listIcE5beginEv>
 800c98c:	4604      	mov	r4, r0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f001 f83f 	bl	800da12 <_ZNKSt16initializer_listIcE4sizeEv>
 800c994:	4603      	mov	r3, r0
 800c996:	4423      	add	r3, r4
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd90      	pop	{r4, r7, pc}

0800c9a0 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800c9a0:	b5b0      	push	{r4, r5, r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800c9aa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800c9ac:	1d3b      	adds	r3, r7, #4
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f001 f83b 	bl	800da2a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800c9b4:	462a      	mov	r2, r5
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f001 f840 	bl	800da3e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800c9be:	4603      	mov	r3, r0
    }
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bdb0      	pop	{r4, r5, r7, pc}

0800c9c8 <_ZNSt6vectorIcSaIcEE19_M_range_initializeIPKcEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800c9c8:	b590      	push	{r4, r7, lr}
 800c9ca:	b087      	sub	sp, #28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	68b8      	ldr	r0, [r7, #8]
 800c9da:	f7ff ffe1 	bl	800c9a0 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800c9e2:	68fc      	ldr	r4, [r7, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff febc 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	f001 f833 	bl	800da5c <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f001 f856 	bl	800daac <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800ca00:	4602      	mov	r2, r0
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7ff fea3 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800ca1e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800ca20:	4622      	mov	r2, r4
 800ca22:	6879      	ldr	r1, [r7, #4]
 800ca24:	68b8      	ldr	r0, [r7, #8]
 800ca26:	f001 f855 	bl	800dad4 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>
 800ca2a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	605a      	str	r2, [r3, #4]
	}
 800ca30:	bf00      	nop
 800ca32:	371c      	adds	r7, #28
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd90      	pop	{r4, r7, pc}

0800ca38 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7f6 faab 	bl	8002f9c <_ZNSaIfEC1Ev>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f001 f854 	bl	800daf6 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b089      	sub	sp, #36	; 0x24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800ca62:	2004      	movs	r0, #4
 800ca64:	f7fb fc09 	bl	800827a <_ZSt16__deque_buf_sizej>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca70:	3301      	adds	r3, #1
 800ca72:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800ca74:	2308      	movs	r3, #8
 800ca76:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	3302      	adds	r3, #2
 800ca7c:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800ca7e:	f107 0210 	add.w	r2, r7, #16
 800ca82:	f107 030c 	add.w	r3, r7, #12
 800ca86:	4611      	mov	r1, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f6 fce8 	bl	800345e <_ZSt3maxIjERKT_S2_S2_>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 f843 	bl	800db28 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800caa2:	4602      	mov	r2, r0
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6859      	ldr	r1, [r3, #4]
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	1acb      	subs	r3, r1, r3
 800cab4:	085b      	lsrs	r3, r3, #1
 800cab6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800cab8:	4413      	add	r3, r2
 800caba:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	4413      	add	r3, r2
 800cac4:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	69b9      	ldr	r1, [r7, #24]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f001 f849 	bl	800db62 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3308      	adds	r3, #8
 800cad4:	69b9      	ldr	r1, [r7, #24]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f001 f85e 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f103 0218 	add.w	r2, r3, #24
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	3b04      	subs	r3, #4
 800cae6:	4619      	mov	r1, r3
 800cae8:	4610      	mov	r0, r2
 800caea:	f001 f855 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	68da      	ldr	r2, [r3, #12]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800cafa:	2004      	movs	r0, #4
 800cafc:	f7fb fbbd 	bl	800827a <_ZSt16__deque_buf_sizej>
 800cb00:	4602      	mov	r2, r0
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb08:	fb01 f202 	mul.w	r2, r1, r2
 800cb0c:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	619a      	str	r2, [r3, #24]
    }
 800cb16:	bf00      	nop
 800cb18:	3724      	adds	r7, #36	; 0x24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd90      	pop	{r4, r7, pc}

0800cb1e <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b086      	sub	sp, #24
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	617b      	str	r3, [r7, #20]
 800cb2e:	e008      	b.n	800cb42 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x24>
	_M_deallocate_node(*__n);
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4619      	mov	r1, r3
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f001 f847 	bl	800dbca <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	617b      	str	r3, [r7, #20]
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d3f2      	bcc.n	800cb30 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x12>
    }
 800cb4a:	bf00      	nop
 800cb4c:	bf00      	nop
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800cb60:	f107 0314 	add.w	r3, r7, #20
 800cb64:	68f9      	ldr	r1, [r7, #12]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f001 f842 	bl	800dbf0 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800cb6c:	f107 0314 	add.w	r3, r7, #20
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f001 f857 	bl	800dc28 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
      }
 800cb7a:	f107 0314 	add.w	r3, r7, #20
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f001 f847 	bl	800dc12 <_ZNSaIPfED1Ev>
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cb8a:	b480      	push	{r7}
 800cb8c:	b083      	sub	sp, #12
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800cba0:	b480      	push	{r7}
 800cba2:	b08d      	sub	sp, #52	; 0x34
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
 800cbac:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800cbae:	bf00      	nop
 800cbb0:	3734      	adds	r7, #52	; 0x34
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
	...

0800cbbc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 800cbbc:	b5b0      	push	{r4, r5, r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7ff f9c9 	bl	800bf5e <_ZNKSt5dequeIfSaIfEE4sizeEv>
 800cbcc:	4604      	mov	r4, r0
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 f849 	bl	800dc66 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	bf0c      	ite	eq
 800cbda:	2301      	moveq	r3, #1
 800cbdc:	2300      	movne	r3, #0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 800cbe4:	4816      	ldr	r0, [pc, #88]	; (800cc40 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 800cbe6:	f013 fba7 	bl	8020338 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 800cbea:	2101      	movs	r1, #1
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f001 f84b 	bl	800dc88 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	1d1c      	adds	r4, r3, #4
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	f001 f85f 	bl	800dcbe <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800cc00:	4603      	mov	r3, r0
 800cc02:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 800cc04:	687c      	ldr	r4, [r7, #4]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	699d      	ldr	r5, [r3, #24]
 800cc0a:	6838      	ldr	r0, [r7, #0]
 800cc0c:	f7f6 fb28 	bl	8003260 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800cc10:	4603      	mov	r3, r0
 800cc12:	461a      	mov	r2, r3
 800cc14:	4629      	mov	r1, r5
 800cc16:	4620      	mov	r0, r4
 800cc18:	f7f6 fa42 	bl	80030a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f103 0218 	add.w	r2, r3, #24
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc26:	3304      	adds	r3, #4
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	f000 ffb4 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	69da      	ldr	r2, [r3, #28]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc40:	08023d20 	.word	0x08023d20

0800cc44 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 800cc4e:	f001 f848 	bl	800dce2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800cc52:	4603      	mov	r3, r0
 800cc54:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	109b      	asrs	r3, r3, #2
 800cc62:	461a      	mov	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bf14      	ite	ne
 800cc6c:	2301      	movne	r3, #1
 800cc6e:	2300      	moveq	r3, #0
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	6811      	ldr	r1, [r2, #0]
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	6852      	ldr	r2, [r2, #4]
 800cc80:	1a8a      	subs	r2, r1, r2
 800cc82:	1092      	asrs	r2, r2, #2
 800cc84:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	6891      	ldr	r1, [r2, #8]
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	6812      	ldr	r2, [r2, #0]
 800cc8e:	1a8a      	subs	r2, r1, r2
 800cc90:	1092      	asrs	r2, r2, #2
 800cc92:	4413      	add	r3, r2
      }
 800cc94:	4618      	mov	r0, r3
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800cca6:	6838      	ldr	r0, [r7, #0]
 800cca8:	f7f6 fc1f 	bl	80034ea <_ZSt10destroy_atIfEvPT_>
	}
 800ccac:	bf00      	nop
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7ff ff63 	bl	800cb8a <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	4619      	mov	r1, r3
 800cccc:	4610      	mov	r0, r2
 800ccce:	f7ff ffe5 	bl	800cc9c <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	4610      	mov	r0, r2
 800ccdc:	f000 ff75 	bl	800dbca <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f103 0208 	add.w	r2, r3, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	3304      	adds	r3, #4
 800ccec:	4619      	mov	r1, r3
 800ccee:	4610      	mov	r0, r2
 800ccf0:	f000 ff52 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68da      	ldr	r2, [r3, #12]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	609a      	str	r2, [r3, #8]
    }
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	689a      	ldr	r2, [r3, #8]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	609a      	str	r2, [r3, #8]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	68da      	ldr	r2, [r3, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	60da      	str	r2, [r3, #12]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <_ZSteqRKSt15_Deque_iteratorIfRfPfES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	bf0c      	ite	eq
 800cd52:	2301      	moveq	r3, #1
 800cd54:	2300      	movne	r3, #0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <_ZNSt15_Deque_iteratorIfRfPfEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
	++_M_cur;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	1d1a      	adds	r2, r3, #4
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d10a      	bne.n	800cd98 <_ZNSt15_Deque_iteratorIfRfPfEppEv+0x34>
	    _M_set_node(_M_node + 1);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 ff04 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685a      	ldr	r2, [r3, #4]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	601a      	str	r2, [r3, #0]
	return *this;
 800cd98:	687b      	ldr	r3, [r7, #4]
      }
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	370c      	adds	r7, #12
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <_ZNKSt16initializer_listIfE5beginEv>:
      begin() const noexcept { return _M_array; }
 800cdba:	b480      	push	{r7}
 800cdbc:	b083      	sub	sp, #12
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <_ZNKSt16initializer_listIfE3endEv>:
      end() const noexcept { return begin() + size(); }
 800cdd2:	b590      	push	{r4, r7, lr}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff ffed 	bl	800cdba <_ZNKSt16initializer_listIfE5beginEv>
 800cde0:	4604      	mov	r4, r0
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 ff85 	bl	800dcf2 <_ZNKSt16initializer_listIfE4sizeEv>
 800cde8:	4603      	mov	r3, r0
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4423      	add	r3, r4
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd90      	pop	{r4, r7, pc}

0800cdf6 <_ZSt11min_elementIPKfET_S2_S2_>:
   *  @return  Iterator referencing the first instance of the smallest value.
  */
  template<typename _ForwardIterator>
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
 800cdf6:	b590      	push	{r4, r7, lr}
 800cdf8:	b083      	sub	sp, #12
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	6039      	str	r1, [r7, #0]
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      return _GLIBCXX_STD_A::__min_element(__first, __last,
				__gnu_cxx::__ops::__iter_less_iter());
 800ce00:	f7f7 f852 	bl	8003ea8 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
      return _GLIBCXX_STD_A::__min_element(__first, __last,
 800ce04:	4622      	mov	r2, r4
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 ff98 	bl	800dd3e <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>
 800ce0e:	4603      	mov	r3, r0
    }
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd90      	pop	{r4, r7, pc}

0800ce18 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800ce40:	f107 030c 	add.w	r3, r7, #12
 800ce44:	6879      	ldr	r1, [r7, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 ffa4 	bl	800dd94 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_>:
    }

  template<typename _Iterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 800ce56:	b590      	push	{r4, r7, lr}
 800ce58:	b085      	sub	sp, #20
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	60b9      	str	r1, [r7, #8]
 800ce60:	607a      	str	r2, [r7, #4]
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
 800ce62:	f107 030c 	add.w	r3, r7, #12
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 ffa3 	bl	800ddb2 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return __find_if(__first, __last, __pred,
 800ce6c:	4623      	mov	r3, r4
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	68b9      	ldr	r1, [r7, #8]
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f000 ffee 	bl	800de54 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>
 800ce78:	4603      	mov	r3, r0
    }
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd90      	pop	{r4, r7, pc}

0800ce82 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	605a      	str	r2, [r3, #4]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	609a      	str	r2, [r3, #8]
	{ }
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	370c      	adds	r7, #12
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b084      	sub	sp, #16
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	60f8      	str	r0, [r7, #12]
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	607a      	str	r2, [r7, #4]
	if (__p)
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 f85f 	bl	800df86 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800cec8:	bf00      	nop
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800ced0:	b590      	push	{r4, r7, lr}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00e      	beq.n	800cf08 <_ZNSt6vectorIcSaIcEE15_M_erase_at_endEPc+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff fc37 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800cef6:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800cef8:	461a      	mov	r2, r3
 800cefa:	4621      	mov	r1, r4
 800cefc:	6838      	ldr	r0, [r7, #0]
 800cefe:	f7ff fc4d 	bl	800c79c <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	605a      	str	r2, [r3, #4]
      }
 800cf08:	bf00      	nop
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd90      	pop	{r4, r7, pc}

0800cf10 <_ZNKSt6vectorIcSaIcEE11_M_data_ptrIcEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	370c      	adds	r7, #12
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	f107 030c 	add.w	r3, r7, #12
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fab3 	bl	800d4a4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cf48:	b590      	push	{r4, r7, lr}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f001 f836 	bl	800dfc4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	681c      	ldr	r4, [r3, #0]
 800cf5c:	6838      	ldr	r0, [r7, #0]
 800cf5e:	f001 f831 	bl	800dfc4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800cf62:	4603      	mov	r3, r0
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	1ae3      	subs	r3, r4, r3
 800cf68:	4618      	mov	r0, r3
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd90      	pop	{r4, r7, pc}

0800cf70 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	4413      	add	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]
 800cf84:	f107 020c 	add.w	r2, r7, #12
 800cf88:	f107 0308 	add.w	r3, r7, #8
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff ff42 	bl	800ce18 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <_ZNSt6vectorIcSaIcEE18_M_insert_dispatchIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St12__false_type>:
	_M_insert_dispatch(iterator __pos, _InputIterator __first,
 800cf9e:	b5b0      	push	{r4, r5, r7, lr}
 800cfa0:	b088      	sub	sp, #32
 800cfa2:	af02      	add	r7, sp, #8
 800cfa4:	60f8      	str	r0, [r7, #12]
 800cfa6:	60b9      	str	r1, [r7, #8]
 800cfa8:	607a      	str	r2, [r7, #4]
 800cfaa:	603b      	str	r3, [r7, #0]
	  _M_range_insert(__pos, __first, __last,
 800cfac:	687c      	ldr	r4, [r7, #4]
			  std::__iterator_category(__first));
 800cfae:	1d3b      	adds	r3, r7, #4
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff f9d5 	bl	800c360 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
	  _M_range_insert(__pos, __first, __last,
 800cfb6:	f88d 5000 	strb.w	r5, [sp]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	68b9      	ldr	r1, [r7, #8]
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f001 f84f 	bl	800e064 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>
	}
 800cfc6:	bf00      	nop
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bdb0      	pop	{r4, r5, r7, pc}

0800cfce <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 800cfce:	b480      	push	{r7}
 800cfd0:	b083      	sub	sp, #12
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag>:
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d012      	beq.n	800d01c <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3a>
      --__last;
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	3b01      	subs	r3, #1
 800cffa:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800cffc:	e009      	b.n	800d012 <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x30>
	  std::iter_swap(__first, __last);
 800cffe:	68b9      	ldr	r1, [r7, #8]
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f001 f937 	bl	800e274 <_ZSt9iter_swapIPbS0_EvT_T0_>
	  ++__first;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	3301      	adds	r3, #1
 800d00a:	60fb      	str	r3, [r7, #12]
	  --__last;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	3b01      	subs	r3, #1
 800d010:	60bb      	str	r3, [r7, #8]
      while (__first < __last)
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	429a      	cmp	r2, r3
 800d018:	d3f1      	bcc.n	800cffe <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x1c>
 800d01a:	e000      	b.n	800d01e <_ZSt9__reverseIPbEvT_S1_St26random_access_iterator_tag+0x3c>
	return;
 800d01c:	bf00      	nop
    }
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4618      	mov	r0, r3
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	68b9      	ldr	r1, [r7, #8]
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f001 f914 	bl	800e28e <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 800d066:	4603      	mov	r3, r0
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 800d088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800d096:	e01b      	b.n	800d0d0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d106      	bne.n	800d0ac <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 800d09e:	4633      	mov	r3, r6
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	68b9      	ldr	r1, [r7, #8]
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f001 f92d 	bl	800e304 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 800d0aa:	e021      	b.n	800d0f0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 800d0b2:	462a      	mov	r2, r5
 800d0b4:	68b9      	ldr	r1, [r7, #8]
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f001 f93b 	bl	800e332 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 800d0c0:	4623      	mov	r3, r4
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	68b9      	ldr	r1, [r7, #8]
 800d0c6:	6978      	ldr	r0, [r7, #20]
 800d0c8:	f7ff ffde 	bl	800d088 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 800d0d0:	f107 020c 	add.w	r2, r7, #12
 800d0d4:	f107 0308 	add.w	r3, r7, #8
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f6 f932 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b10      	cmp	r3, #16
 800d0e4:	bfcc      	ite	gt
 800d0e6:	2301      	movgt	r3, #1
 800d0e8:	2300      	movle	r3, #0
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1d3      	bne.n	800d098 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 800d0f0:	371c      	adds	r7, #28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0f6 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 800d0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	60f8      	str	r0, [r7, #12]
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 800d102:	f107 020c 	add.w	r2, r7, #12
 800d106:	f107 0308 	add.w	r3, r7, #8
 800d10a:	4611      	mov	r1, r2
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7f6 f919 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800d112:	4603      	mov	r3, r0
 800d114:	2b10      	cmp	r3, #16
 800d116:	bfcc      	ite	gt
 800d118:	2301      	movgt	r3, #1
 800d11a:	2300      	movle	r3, #0
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d018      	beq.n	800d154 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800d122:	f107 030c 	add.w	r3, r7, #12
 800d126:	2110      	movs	r1, #16
 800d128:	4618      	mov	r0, r3
 800d12a:	f001 f942 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d12e:	4603      	mov	r3, r0
 800d130:	4632      	mov	r2, r6
 800d132:	4619      	mov	r1, r3
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f001 f9ad 	bl	800e494 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 800d13a:	f107 030c 	add.w	r3, r7, #12
 800d13e:	2110      	movs	r1, #16
 800d140:	4618      	mov	r0, r3
 800d142:	f001 f936 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800d146:	4603      	mov	r3, r0
 800d148:	462a      	mov	r2, r5
 800d14a:	68b9      	ldr	r1, [r7, #8]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f001 fa0a 	bl	800e566 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800d152:	e004      	b.n	800d15e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800d154:	4622      	mov	r2, r4
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f001 f99b 	bl	800e494 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 800d15e:	bf00      	nop
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d166 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_10_Iter_predIT_EES6_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 800d166:	b5b0      	push	{r4, r5, r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800d16e:	1d3b      	adds	r3, r7, #4
 800d170:	4618      	mov	r0, r3
 800d172:	f001 fa20 	bl	800e5b6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800d176:	f107 030c 	add.w	r3, r7, #12
 800d17a:	4629      	mov	r1, r5
 800d17c:	4618      	mov	r0, r3
 800d17e:	f001 fa25 	bl	800e5cc <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800d182:	bf00      	nop
 800d184:	4620      	mov	r0, r4
 800d186:	3710      	adds	r7, #16
 800d188:	46bd      	mov	sp, r7
 800d18a:	bdb0      	pop	{r4, r5, r7, pc}

0800d18c <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800d198:	68fc      	ldr	r4, [r7, #12]
 800d19a:	7938      	ldrb	r0, [r7, #4]
 800d19c:	f001 fa24 	bl	800e5e8 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800d1a0:	f107 030c 	add.w	r3, r7, #12
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff ff12 	bl	800cfce <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800d1aa:	4633      	mov	r3, r6
 800d1ac:	462a      	mov	r2, r5
 800d1ae:	68b9      	ldr	r1, [r7, #8]
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f001 fa40 	bl	800e636 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800d1b6:	4603      	mov	r3, r0
    }
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1c0 <_ZN9__gnu_cxx5__ops11__pred_iterIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_10_Iter_predIT_EES6_>:
    __pred_iter(_Predicate __pred)
 800d1c0:	b5b0      	push	{r4, r5, r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 800d1c8:	1d3b      	adds	r3, r7, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f001 fab2 	bl	800e734 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800d1d0:	f107 030c 	add.w	r3, r7, #12
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 fab7 	bl	800e74a <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800d1dc:	bf00      	nop
 800d1de:	4620      	mov	r0, r4
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bdb0      	pop	{r4, r5, r7, pc}

0800d1e6 <_ZSt13__find_if_notIPbN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 800d1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e8:	b085      	sub	sp, #20
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	60f8      	str	r0, [r7, #12]
 800d1ee:	60b9      	str	r1, [r7, #8]
 800d1f0:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800d1f2:	68fc      	ldr	r4, [r7, #12]
 800d1f4:	7938      	ldrb	r0, [r7, #4]
 800d1f6:	f001 fab6 	bl	800e766 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>
			    std::__iterator_category(__first));
 800d1fa:	f107 030c 	add.w	r3, r7, #12
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7ff fee5 	bl	800cfce <_ZSt19__iterator_categoryIPbENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__find_if(__first, __last,
 800d204:	4633      	mov	r3, r6
 800d206:	462a      	mov	r2, r5
 800d208:	68b9      	ldr	r1, [r7, #8]
 800d20a:	4620      	mov	r0, r4
 800d20c:	f001 fad2 	bl	800e7b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>
 800d210:	4603      	mov	r3, r0
    }
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d21a <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b082      	sub	sp, #8
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f001 fb43 	bl	800e8b2 <_ZNSaIfEC1ERKS_>
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f001 fb36 	bl	800e8b2 <_ZNSaIfEC1ERKS_>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f5 feb3 	bl	8002fb4 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7f6 f882 	bl	800336e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800d26a:	4602      	mov	r2, r0
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	441a      	add	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	609a      	str	r2, [r3, #8]
      }
 800d286:	bf00      	nop
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	601a      	str	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b086      	sub	sp, #24
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	68b9      	ldr	r1, [r7, #8]
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f001 fb03 	bl	800e8ce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 800d2c8:	4603      	mov	r3, r0
    }
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	370c      	adds	r7, #12
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEENS1_IPfS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800d2e8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f001 fafa 	bl	800e8ee <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	68b8      	ldr	r0, [r7, #8]
 800d2fe:	f001 faf6 	bl	800e8ee <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800d302:	4605      	mov	r5, r0
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f001 fb00 	bl	800e90a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800d30a:	4603      	mov	r3, r0
 800d30c:	461a      	mov	r2, r3
 800d30e:	4629      	mov	r1, r5
 800d310:	4620      	mov	r0, r4
 800d312:	f001 fb08 	bl	800e926 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800d316:	4603      	mov	r3, r0
 800d318:	4619      	mov	r1, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 fb13 	bl	800e946 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800d320:	4603      	mov	r3, r0
    }
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bdb0      	pop	{r4, r5, r7, pc}

0800d32a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d334:	f7f5 f91a 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d004      	beq.n	800d348 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f001 fb17 	bl	800e974 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
 800d346:	e003      	b.n	800d350 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_+0x26>
	__destroy(__first, __last);
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f001 fb39 	bl	800e9c2 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>
    }
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <_ZSt14__copy_move_a1ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f001 fb36 	bl	800e9d8 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>
 800d36c:	4603      	mov	r3, r0
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
    { return __res; }
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <_ZSt18uninitialized_copyIPfS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d38e:	b580      	push	{r7, lr}
 800d390:	b086      	sub	sp, #24
 800d392:	af00      	add	r7, sp, #0
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d39a:	2301      	movs	r3, #1
 800d39c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	68b9      	ldr	r1, [r7, #8]
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f001 fb35 	bl	800ea12 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>
 800d3a8:	4603      	mov	r3, r0
    }
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3718      	adds	r7, #24
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d3b2:	b480      	push	{r7}
 800d3b4:	b083      	sub	sp, #12
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b088      	sub	sp, #32
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	61fb      	str	r3, [r7, #28]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800d3e0:	f7f5 f8c4 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d003      	beq.n	800d3f2 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800d3ea:	69b8      	ldr	r0, [r7, #24]
 800d3ec:	f012 ff86 	bl	80202fc <_ZdlPv>
	    return;
 800d3f0:	e005      	b.n	800d3fe <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	69b9      	ldr	r1, [r7, #24]
 800d3f6:	69f8      	ldr	r0, [r7, #28]
 800d3f8:	f002 fb1b 	bl	800fa32 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	3720      	adds	r7, #32
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d406:	b580      	push	{r7, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d410:	f7f5 f8ac 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d004      	beq.n	800d424 <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d41a:	6839      	ldr	r1, [r7, #0]
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fb08 	bl	800ea32 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
 800d422:	e003      	b.n	800d42c <_ZSt8_DestroyIPN3jlb4EdgeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f001 fb03 	bl	800ea32 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>
    }
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800d432:	b580      	push	{r7, lr}
 800d434:	b082      	sub	sp, #8
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f012 ff72 	bl	8020328 <_ZNSaIcEC1ERKS_>
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f012 ff65 	bl	8020328 <_ZNSaIcEC1ERKS_>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4618      	mov	r0, r3
 800d462:	f7ff fd0e 	bl	800ce82 <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1Ev>
	{ }
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4618      	mov	r0, r3
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <_ZNSt12_Vector_baseIcSaIcEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fb15 	bl	800daac <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800d482:	4602      	mov	r2, r0
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	441a      	add	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	609a      	str	r2, [r3, #8]
      }
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	601a      	str	r2, [r3, #0]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f001 fac3 	bl	800ea64 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>
 800d4de:	4603      	mov	r3, r0
    }
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3718      	adds	r7, #24
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d4f2:	f7f5 f83b 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d004      	beq.n	800d506 <_ZSt8_DestroyIPcEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f001 fac0 	bl	800ea84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>
 800d504:	e003      	b.n	800d50e <_ZSt8_DestroyIPcEvT_S1_+0x26>
	__destroy(__first, __last);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f001 fad4 	bl	800eab6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	6039      	str	r1, [r7, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	4611      	mov	r1, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	f001 fac6 	bl	800eacc <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <_ZNSt6vectorIcSaIcEEC1EOS1_>:
      vector(vector&&) noexcept = default;
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b082      	sub	sp, #8
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	4611      	mov	r1, r2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff ffe5 	bl	800d52a <_ZNSt12_Vector_baseIcSaIcEEC1EOS1_>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <_ZN3jlb4EdgeC1EOS0_>:
    struct Edge
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b082      	sub	sp, #8
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	781a      	ldrb	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	701a      	strb	r2, [r3, #0]
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	605a      	str	r2, [r3, #4]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f103 0208 	add.w	r2, r3, #8
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	3308      	adds	r3, #8
 800d58e:	4619      	mov	r1, r3
 800d590:	4610      	mov	r0, r2
 800d592:	f7ff ffda 	bl	800d54a <_ZNSt6vectorIcSaIcEEC1EOS1_>
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	695a      	ldr	r2, [r3, #20]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	615a      	str	r2, [r3, #20]
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800d5a8:	b5b0      	push	{r4, r5, r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800d5b2:	6838      	ldr	r0, [r7, #0]
 800d5b4:	f7ff ffae 	bl	800d514 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	2018      	movs	r0, #24
 800d5c0:	f7f4 ffdc 	bl	800257c <_ZnwjPv>
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	4629      	mov	r1, r5
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f7ff ffce 	bl	800d56a <_ZN3jlb4EdgeC1EOS0_>
 800d5ce:	4623      	mov	r3, r4
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bdb0      	pop	{r4, r5, r7, pc}

0800d5d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff ff95 	bl	800d514 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	68b8      	ldr	r0, [r7, #8]
 800d5f0:	f7ff ffda 	bl	800d5a8 <_ZSt12construct_atIN3jlb4EdgeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	1d1a      	adds	r2, r3, #4
 800d608:	f107 030c 	add.w	r3, r7, #12
 800d60c:	4611      	mov	r1, r2
 800d60e:	4618      	mov	r0, r3
 800d610:	f001 fa77 	bl	800eb02 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
	...

0800d620 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d620:	b5b0      	push	{r4, r5, r7, lr}
 800d622:	b08c      	sub	sp, #48	; 0x30
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d62c:	4a3f      	ldr	r2, [pc, #252]	; (800d72c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10c>)
 800d62e:	2101      	movs	r1, #1
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f001 fa76 	bl	800eb22 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>
 800d636:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f001 fab3 	bl	800ebb0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800d64a:	4603      	mov	r3, r0
 800d64c:	617b      	str	r3, [r7, #20]
 800d64e:	f107 0214 	add.w	r2, r7, #20
 800d652:	f107 0308 	add.w	r3, r7, #8
 800d656:	4611      	mov	r1, r2
 800d658:	4618      	mov	r0, r3
 800d65a:	f001 fab9 	bl	800ebd0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d65e:	4603      	mov	r3, r0
 800d660:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d666:	4618      	mov	r0, r3
 800d668:	f001 facc 	bl	800ec04 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 800d66c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800d672:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d674:	6a3a      	ldr	r2, [r7, #32]
 800d676:	4613      	mov	r3, r2
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	4413      	add	r3, r2
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	189d      	adds	r5, r3, r2
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ff45 	bl	800d514 <_ZSt7forwardIN3jlb4EdgeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d68a:	4603      	mov	r3, r0
 800d68c:	461a      	mov	r2, r3
 800d68e:	4629      	mov	r1, r5
 800d690:	4620      	mov	r0, r4
 800d692:	f7ff ffa1 	bl	800d5d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800d696:	2300      	movs	r3, #0
 800d698:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d69a:	f107 0308 	add.w	r3, r7, #8
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 fad8 	bl	800ec54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe fff3 	bl	800c696 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d6b0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d6b2:	69fa      	ldr	r2, [r7, #28]
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b8:	f001 fab8 	bl	800ec2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800d6bc:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	3318      	adds	r3, #24
 800d6c2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d6c4:	f107 0308 	add.w	r3, r7, #8
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f001 fac3 	bl	800ec54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe ffde 	bl	800c696 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d6da:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d6dc:	69ba      	ldr	r2, [r7, #24]
 800d6de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f001 faa3 	bl	800ec2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800d6e6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800d6e8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	689a      	ldr	r2, [r3, #8]
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	10db      	asrs	r3, r3, #3
 800d6f4:	4a0e      	ldr	r2, [pc, #56]	; (800d730 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x110>)
 800d6f6:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6fe:	f7fe ffb7 	bl	800c670 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	69fa      	ldr	r2, [r7, #28]
 800d706:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d710:	4613      	mov	r3, r2
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	4413      	add	r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	461a      	mov	r2, r3
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	441a      	add	r2, r3
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	609a      	str	r2, [r3, #8]
    }
 800d722:	bf00      	nop
 800d724:	3730      	adds	r7, #48	; 0x30
 800d726:	46bd      	mov	sp, r7
 800d728:	bdb0      	pop	{r4, r5, r7, pc}
 800d72a:	bf00      	nop
 800d72c:	08023d50 	.word	0x08023d50
 800d730:	aaaaaaab 	.word	0xaaaaaaab

0800d734 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7ff ff5d 	bl	800d5fc <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800d742:	4603      	mov	r3, r0
 800d744:	60fb      	str	r3, [r7, #12]
 800d746:	f107 030c 	add.w	r3, r7, #12
 800d74a:	2101      	movs	r1, #1
 800d74c:	4618      	mov	r0, r3
 800d74e:	f001 fa98 	bl	800ec82 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>
 800d752:	4603      	mov	r3, r0
 800d754:	60bb      	str	r3, [r7, #8]
 800d756:	f107 0308 	add.w	r3, r7, #8
 800d75a:	4618      	mov	r0, r3
 800d75c:	f001 faad 	bl	800ecba <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 800d760:	4603      	mov	r3, r0
      }
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEEC1Ev>:
 800d76a:	b480      	push	{r7}
 800d76c:	b083      	sub	sp, #12
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4618      	mov	r0, r3
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d780:	b580      	push	{r7, lr}
 800d782:	b088      	sub	sp, #32
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	61fb      	str	r3, [r7, #28]
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	61bb      	str	r3, [r7, #24]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800d798:	f7f4 fee8 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d003      	beq.n	800d7aa <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800d7a2:	69b8      	ldr	r0, [r7, #24]
 800d7a4:	f012 fdaa 	bl	80202fc <_ZdlPv>
	    return;
 800d7a8:	e005      	b.n	800d7b6 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE10deallocateERS2_PS1_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	69b9      	ldr	r1, [r7, #24]
 800d7ae:	69f8      	ldr	r0, [r7, #28]
 800d7b0:	f002 fa09 	bl	800fbc6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800d7b4:	bf00      	nop
 800d7b6:	bf00      	nop
 800d7b8:	3720      	adds	r7, #32
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800d7c8:	f7f4 fed0 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d004      	beq.n	800d7dc <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f001 fa7c 	bl	800ecd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
 800d7da:	e003      	b.n	800d7e4 <_ZSt8_DestroyIPN3jlb4NodeEEvT_S3_+0x26>
	__destroy(__first, __last);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f001 fa77 	bl	800ecd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>
    }
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}

0800d7ea <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d7ea:	b480      	push	{r7}
 800d7ec:	b083      	sub	sp, #12
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <_ZN3jlb4NodeC1ERKS0_>:
    class Node
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	781a      	ldrb	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	701a      	strb	r2, [r3, #0]
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	605a      	str	r2, [r3, #4]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	689a      	ldr	r2, [r3, #8]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	609a      	str	r2, [r3, #8]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f103 020c 	add.w	r2, r3, #12
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	330c      	adds	r3, #12
 800d82c:	4619      	mov	r1, r3
 800d82e:	4610      	mov	r0, r2
 800d830:	f001 fa68 	bl	800ed04 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800d83e:	b5b0      	push	{r4, r5, r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800d848:	6838      	ldr	r0, [r7, #0]
 800d84a:	f7ff ffce 	bl	800d7ea <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d84e:	4605      	mov	r5, r0
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4619      	mov	r1, r3
 800d854:	2018      	movs	r0, #24
 800d856:	f7f4 fe91 	bl	800257c <_ZnwjPv>
 800d85a:	4604      	mov	r4, r0
 800d85c:	4629      	mov	r1, r5
 800d85e:	4620      	mov	r0, r4
 800d860:	f7ff ffce 	bl	800d800 <_ZN3jlb4NodeC1ERKS0_>
 800d864:	4623      	mov	r3, r4
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bdb0      	pop	{r4, r5, r7, pc}

0800d86e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff ffb5 	bl	800d7ea <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d880:	4603      	mov	r3, r0
 800d882:	4619      	mov	r1, r3
 800d884:	68b8      	ldr	r0, [r7, #8]
 800d886:	f7ff ffda 	bl	800d83e <_ZSt12construct_atIN3jlb4NodeEJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800d88a:	bf00      	nop
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	1d1a      	adds	r2, r3, #4
 800d89e:	f107 030c 	add.w	r3, r7, #12
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f001 fa6a 	bl	800ed7e <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800d8b4:	b5b0      	push	{r4, r5, r7, lr}
 800d8b6:	b08c      	sub	sp, #48	; 0x30
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d8c0:	4a44      	ldr	r2, [pc, #272]	; (800d9d4 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x120>)
 800d8c2:	2101      	movs	r1, #1
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f001 fa6a 	bl	800ed9e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>
 800d8ca:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f001 faa7 	bl	800ee2c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	f107 0214 	add.w	r2, r7, #20
 800d8e6:	f107 0308 	add.w	r3, r7, #8
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f001 faad 	bl	800ee4c <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f001 fac0 	bl	800ee80 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>
 800d900:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800d906:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d908:	6a3a      	ldr	r2, [r7, #32]
 800d90a:	4613      	mov	r3, r2
 800d90c:	005b      	lsls	r3, r3, #1
 800d90e:	4413      	add	r3, r2
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	189d      	adds	r5, r3, r2
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff66 	bl	800d7ea <_ZSt7forwardIN3jlb4NodeEEOT_RNSt16remove_referenceIS2_E4typeE>
 800d91e:	4603      	mov	r3, r0
 800d920:	461a      	mov	r2, r3
 800d922:	4629      	mov	r1, r5
 800d924:	4620      	mov	r0, r4
 800d926:	f7ff ffa2 	bl	800d86e <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800d92a:	2300      	movs	r3, #0
 800d92c:	61bb      	str	r3, [r7, #24]
		(__old_start, __position.base(),
 800d92e:	f107 0308 	add.w	r3, r7, #8
 800d932:	4618      	mov	r0, r3
 800d934:	f001 fab8 	bl	800eea8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d938:	4603      	mov	r3, r0
 800d93a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe ffab 	bl	800c89a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d944:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800d946:	69fa      	ldr	r2, [r7, #28]
 800d948:	4621      	mov	r1, r4
 800d94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d94c:	f001 fab7 	bl	800eebe <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800d950:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	3318      	adds	r3, #24
 800d956:	61bb      	str	r3, [r7, #24]
		(__position.base(), __old_finish,
 800d958:	f107 0308 	add.w	r3, r7, #8
 800d95c:	4618      	mov	r0, r3
 800d95e:	f001 faa3 	bl	800eea8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800d962:	4603      	mov	r3, r0
 800d964:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fe ff96 	bl	800c89a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d96e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d974:	4620      	mov	r0, r4
 800d976:	f001 faa2 	bl	800eebe <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800d97a:	61b8      	str	r0, [r7, #24]
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe ff8b 	bl	800c89a <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800d984:	4603      	mov	r3, r0
 800d986:	461a      	mov	r2, r3
 800d988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d98a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d98c:	f7fe ff90 	bl	800c8b0 <_ZSt8_DestroyIPN3jlb4NodeES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800d990:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	689a      	ldr	r2, [r3, #8]
 800d996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	10db      	asrs	r3, r3, #3
 800d99c:	4a0e      	ldr	r2, [pc, #56]	; (800d9d8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x124>)
 800d99e:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9a6:	f7fe ff65 	bl	800c874 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	69fa      	ldr	r2, [r7, #28]
 800d9ae:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	69ba      	ldr	r2, [r7, #24]
 800d9b4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	005b      	lsls	r3, r3, #1
 800d9bc:	4413      	add	r3, r2
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	441a      	add	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	609a      	str	r2, [r3, #8]
    }
 800d9ca:	bf00      	nop
 800d9cc:	3730      	adds	r7, #48	; 0x30
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	08023d50 	.word	0x08023d50
 800d9d8:	aaaaaaab 	.word	0xaaaaaaab

0800d9dc <_ZNSt6vectorIN3jlb4NodeESaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff ff54 	bl	800d892 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE3endEv>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	f107 030c 	add.w	r3, r7, #12
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f001 fa7b 	bl	800eef0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	60bb      	str	r3, [r7, #8]
 800d9fe:	f107 0308 	add.w	r3, r7, #8
 800da02:	4618      	mov	r0, r3
 800da04:	f001 fa90 	bl	800ef28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>
 800da08:	4603      	mov	r3, r0
      }
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <_ZNKSt16initializer_listIcE4sizeEv>:
      size() const noexcept { return _M_len; }
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	4618      	mov	r0, r3
 800da20:	370c      	adds	r7, #12
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 800da2a:	b480      	push	{r7}
 800da2c:	b083      	sub	sp, #12
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800da32:	4618      	mov	r0, r3
 800da34:	370c      	adds	r7, #12
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr

0800da3e <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800da3e:	b480      	push	{r7}
 800da40:	b085      	sub	sp, #20
 800da42:	af00      	add	r7, sp, #0
 800da44:	60f8      	str	r0, [r7, #12]
 800da46:	60b9      	str	r1, [r7, #8]
 800da48:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	1ad3      	subs	r3, r2, r3
    }
 800da50:	4618      	mov	r0, r3
 800da52:	3714      	adds	r7, #20
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800da66:	f107 030c 	add.w	r3, r7, #12
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f012 fc5b 	bl	8020328 <_ZNSaIcEC1ERKS_>
 800da72:	f107 030c 	add.w	r3, r7, #12
 800da76:	4618      	mov	r0, r3
 800da78:	f001 fa6e 	bl	800ef58 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800da7c:	4602      	mov	r2, r0
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4293      	cmp	r3, r2
 800da82:	bf8c      	ite	hi
 800da84:	2301      	movhi	r3, #1
 800da86:	2300      	movls	r3, #0
 800da88:	b2dc      	uxtb	r4, r3
 800da8a:	f107 030c 	add.w	r3, r7, #12
 800da8e:	4618      	mov	r0, r3
 800da90:	f012 fc4b 	bl	802032a <_ZNSaIcED1Ev>
 800da94:	2c00      	cmp	r4, #0
 800da96:	d002      	beq.n	800da9e <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 800da98:	4803      	ldr	r0, [pc, #12]	; (800daa8 <_ZNSt6vectorIcSaIcEE17_S_check_init_lenEjRKS0_+0x4c>)
 800da9a:	f012 fc4d 	bl	8020338 <_ZSt20__throw_length_errorPKc>
	return __n;
 800da9e:	687b      	ldr	r3, [r7, #4]
      }
 800daa0:	4618      	mov	r0, r3
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd90      	pop	{r4, r7, pc}
 800daa8:	08023d6c 	.word	0x08023d6c

0800daac <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d006      	beq.n	800daca <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 fc01 	bl	800e2c8 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800dac6:	4603      	mov	r3, r0
 800dac8:	e000      	b.n	800dacc <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800daca:	2300      	movs	r3, #0
      }
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <_ZSt22__uninitialized_copy_aIPKcPccET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	68b9      	ldr	r1, [r7, #8]
 800dae6:	68f8      	ldr	r0, [r7, #12]
 800dae8:	f001 fa50 	bl	800ef8c <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>
 800daec:	4603      	mov	r3, r0
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b082      	sub	sp, #8
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	601a      	str	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	605a      	str	r2, [r3, #4]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	3308      	adds	r3, #8
 800db0e:	4618      	mov	r0, r3
 800db10:	f001 fa4e 	bl	800efb0 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3318      	adds	r3, #24
 800db18:	4618      	mov	r0, r3
 800db1a:	f001 fa49 	bl	800efb0 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4618      	mov	r0, r3
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800db28:	b590      	push	{r4, r7, lr}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800db32:	f107 030c 	add.w	r3, r7, #12
 800db36:	6879      	ldr	r1, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	f000 f859 	bl	800dbf0 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800db3e:	f107 030c 	add.w	r3, r7, #12
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	4618      	mov	r0, r3
 800db46:	f001 fa4a 	bl	800efde <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 800db4a:	4604      	mov	r4, r0
 800db4c:	bf00      	nop
      }
 800db4e:	f107 030c 	add.w	r3, r7, #12
 800db52:	4618      	mov	r0, r3
 800db54:	f000 f85d 	bl	800dc12 <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800db58:	4623      	mov	r3, r4
      }
 800db5a:	4618      	mov	r0, r3
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd90      	pop	{r4, r7, pc}

0800db62 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800db62:	b580      	push	{r7, lr}
 800db64:	b086      	sub	sp, #24
 800db66:	af00      	add	r7, sp, #0
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	617b      	str	r3, [r7, #20]
 800db72:	e008      	b.n	800db86 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x24>
	    *__cur = this->_M_allocate_node();
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f8a2 	bl	800dcbe <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800db7a:	4602      	mov	r2, r0
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	3304      	adds	r3, #4
 800db84:	617b      	str	r3, [r7, #20]
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d3f2      	bcc.n	800db74 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x12>
    }
 800db8e:	bf00      	nop
 800db90:	bf00      	nop
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800db98:	b590      	push	{r4, r7, lr}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	683a      	ldr	r2, [r7, #0]
 800dba6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685c      	ldr	r4, [r3, #4]
 800dbb4:	f000 f895 	bl	800dce2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	18e2      	adds	r2, r4, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	609a      	str	r2, [r3, #8]
      }
 800dbc2:	bf00      	nop
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd90      	pop	{r4, r7, pc}

0800dbca <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800dbca:	b590      	push	{r4, r7, lr}
 800dbcc:	b083      	sub	sp, #12
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800dbd4:	687c      	ldr	r4, [r7, #4]
 800dbd6:	2004      	movs	r0, #4
 800dbd8:	f7fa fb4f 	bl	800827a <_ZSt16__deque_buf_sizej>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	6839      	ldr	r1, [r7, #0]
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f7f5 fb07 	bl	80031f6 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd90      	pop	{r4, r7, pc}

0800dbf0 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800dbfa:	6838      	ldr	r0, [r7, #0]
 800dbfc:	f001 fa0f 	bl	800f01e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800dc00:	4603      	mov	r3, r0
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f001 fa15 	bl	800f034 <_ZNSaIPfEC1IfEERKSaIT_E>
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b088      	sub	sp, #32
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	61fb      	str	r3, [r7, #28]
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	61bb      	str	r3, [r7, #24]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800dc40:	f7f4 fc94 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d003      	beq.n	800dc52 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 800dc4a:	69b8      	ldr	r0, [r7, #24]
 800dc4c:	f012 fb56 	bl	80202fc <_ZdlPv>
	    return;
 800dc50:	e005      	b.n	800dc5e <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	69b9      	ldr	r1, [r7, #24]
 800dc56:	69f8      	ldr	r0, [r7, #28]
 800dc58:	f002 f8c9 	bl	800fdee <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b082      	sub	sp, #8
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f001 f9d4 	bl	800f01e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800dc76:	4603      	mov	r3, r0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 f9e8 	bl	800f04e <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	4618      	mov	r0, r3
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	6809      	ldr	r1, [r1, #0]
 800dca2:	1a41      	subs	r1, r0, r1
 800dca4:	1089      	asrs	r1, r1, #2
 800dca6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d904      	bls.n	800dcb6 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800dcac:	2200      	movs	r2, #0
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f001 fa16 	bl	800f0e2 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 800dcb6:	bf00      	nop
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800dcbe:	b590      	push	{r4, r7, lr}
 800dcc0:	b083      	sub	sp, #12
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800dcc6:	687c      	ldr	r4, [r7, #4]
 800dcc8:	2004      	movs	r0, #4
 800dcca:	f7fa fad6 	bl	800827a <_ZSt16__deque_buf_sizej>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f7f5 fbd7 	bl	8003486 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 800dcd8:	4603      	mov	r3, r0
      }
 800dcda:	4618      	mov	r0, r3
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd90      	pop	{r4, r7, pc}

0800dce2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800dce2:	b580      	push	{r7, lr}
 800dce4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800dce6:	2004      	movs	r0, #4
 800dce8:	f7fa fac7 	bl	800827a <_ZSt16__deque_buf_sizej>
 800dcec:	4603      	mov	r3, r0
 800dcee:	4618      	mov	r0, r3
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <_ZNKSt16initializer_listIfE4sizeEv>:
 800dcf2:	b480      	push	{r7}
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800dd0a:	b480      	push	{r7}
 800dd0c:	b085      	sub	sp, #20
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	ed93 7a00 	vldr	s14, [r3]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	edd3 7a00 	vldr	s15, [r3]
 800dd22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	bf4c      	ite	mi
 800dd2c:	2301      	movmi	r3, #1
 800dd2e:	2300      	movpl	r3, #0
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_>:
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b086      	sub	sp, #24
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	60f8      	str	r0, [r7, #12]
 800dd46:	60b9      	str	r1, [r7, #8]
 800dd48:	713a      	strb	r2, [r7, #4]
      if (__first == __last)
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d101      	bne.n	800dd56 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x18>
	return __first;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	e01a      	b.n	800dd8c <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x4e>
      _ForwardIterator __result = __first;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800dd5a:	e00a      	b.n	800dd72 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	if (__comp(__first, __result))
 800dd5c:	1d3b      	adds	r3, r7, #4
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	68f9      	ldr	r1, [r7, #12]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7ff ffd1 	bl	800dd0a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclIPKfS4_EEbT_T0_>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x34>
	  __result = __first;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	617b      	str	r3, [r7, #20]
      while (++__first != __last)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	3304      	adds	r3, #4
 800dd76:	60fb      	str	r3, [r7, #12]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	bf14      	ite	ne
 800dd80:	2301      	movne	r3, #1
 800dd82:	2300      	moveq	r3, #0
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e8      	bne.n	800dd5c <_ZSt13__min_elementIPKfN9__gnu_cxx5__ops15_Iter_less_iterEET_S5_S5_T0_+0x1e>
      return __result;
 800dd8a:	697b      	ldr	r3, [r7, #20]
    }
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	601a      	str	r2, [r3, #0]
      { }
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4618      	mov	r0, r3
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
    __iterator_category(const _Iter&)
 800ddb2:	b480      	push	{r7}
 800ddb4:	b083      	sub	sp, #12
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ddc6:	b590      	push	{r4, r7, lr}
 800ddc8:	b083      	sub	sp, #12
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7fa ff3e 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	681c      	ldr	r4, [r3, #0]
 800ddda:	6838      	ldr	r0, [r7, #0]
 800dddc:	f7fa ff39 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800dde0:	4603      	mov	r3, r0
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	1ae3      	subs	r3, r4, r3
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd90      	pop	{r4, r7, pc}

0800ddee <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ddee:	b480      	push	{r7}
 800ddf0:	b083      	sub	sp, #12
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>:
	operator()(_Iterator __it)
 800de06:	b580      	push	{r7, lr}
 800de08:	b082      	sub	sp, #8
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
 800de0e:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 800de10:	463b      	mov	r3, r7
 800de12:	4618      	mov	r0, r3
 800de14:	f7ff ffeb 	bl	800ddee <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEdeEv>
 800de18:	4603      	mov	r3, r0
 800de1a:	781a      	ldrb	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	429a      	cmp	r2, r3
 800de24:	bf0c      	ite	eq
 800de26:	2301      	moveq	r3, #1
 800de28:	2300      	movne	r3, #0
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	601a      	str	r2, [r3, #0]
	return *this;
 800de46:	687b      	ldr	r3, [r7, #4]
      }
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
 800de60:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800de62:	f107 020c 	add.w	r2, r7, #12
 800de66:	f107 0308 	add.w	r3, r7, #8
 800de6a:	4611      	mov	r1, r2
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7ff ffaa 	bl	800ddc6 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800de72:	4603      	mov	r3, r0
 800de74:	109b      	asrs	r3, r3, #2
 800de76:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800de78:	e03e      	b.n	800def8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 800de7a:	1d3b      	adds	r3, r7, #4
 800de7c:	68f9      	ldr	r1, [r7, #12]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff ffc1 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	e077      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800de8e:	f107 030c 	add.w	r3, r7, #12
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff ffce 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800de98:	1d3b      	adds	r3, r7, #4
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff ffb2 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	e068      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800deac:	f107 030c 	add.w	r3, r7, #12
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff ffbf 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800deb6:	1d3b      	adds	r3, r7, #4
 800deb8:	68f9      	ldr	r1, [r7, #12]
 800deba:	4618      	mov	r0, r3
 800debc:	f7ff ffa3 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	e059      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800deca:	f107 030c 	add.w	r3, r7, #12
 800dece:	4618      	mov	r0, r3
 800ded0:	f7ff ffb0 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800ded4:	1d3b      	adds	r3, r7, #4
 800ded6:	68f9      	ldr	r1, [r7, #12]
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff ff94 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	e04a      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800dee8:	f107 030c 	add.w	r3, r7, #12
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff ffa1 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
      for (; __trip_count > 0; --__trip_count)
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	3b01      	subs	r3, #1
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b00      	cmp	r3, #0
 800defc:	dcbd      	bgt.n	800de7a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 800defe:	f107 020c 	add.w	r2, r7, #12
 800df02:	f107 0308 	add.w	r3, r7, #8
 800df06:	4611      	mov	r1, r2
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff ff5c 	bl	800ddc6 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b03      	cmp	r3, #3
 800df12:	d006      	beq.n	800df22 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xce>
 800df14:	2b03      	cmp	r3, #3
 800df16:	dc31      	bgt.n	800df7c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d020      	beq.n	800df5e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x10a>
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d00f      	beq.n	800df40 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xec>
 800df20:	e02c      	b.n	800df7c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 800df22:	1d3b      	adds	r3, r7, #4
 800df24:	68f9      	ldr	r1, [r7, #12]
 800df26:	4618      	mov	r0, r3
 800df28:	f7ff ff6d 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	e023      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800df36:	f107 030c 	add.w	r3, r7, #12
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ff7a 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800df40:	1d3b      	adds	r3, r7, #4
 800df42:	68f9      	ldr	r1, [r7, #12]
 800df44:	4618      	mov	r0, r3
 800df46:	f7ff ff5e 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	e014      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800df54:	f107 030c 	add.w	r3, r7, #12
 800df58:	4618      	mov	r0, r3
 800df5a:	f7ff ff6b 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  if (__pred(__first))
 800df5e:	1d3b      	adds	r3, r7, #4
 800df60:	68f9      	ldr	r1, [r7, #12]
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff ff4f 	bl	800de06 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcSt6vectorIcSaIcEEEEEEbT_>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d001      	beq.n	800df72 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	e005      	b.n	800df7e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEENS0_5__ops16_Iter_equals_valIKcEEET_SB_SB_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 800df72:	f107 030c 	add.w	r3, r7, #12
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff ff5c 	bl	800de34 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEppEv>
	  return __last;
 800df7c:	68bb      	ldr	r3, [r7, #8]
    }
 800df7e:	4618      	mov	r0, r3
 800df80:	3718      	adds	r7, #24
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800df86:	b580      	push	{r7, lr}
 800df88:	b088      	sub	sp, #32
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	607a      	str	r2, [r7, #4]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	61bb      	str	r3, [r7, #24]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800df9e:	f7f4 fae5 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d003      	beq.n	800dfb0 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 800dfa8:	69b8      	ldr	r0, [r7, #24]
 800dfaa:	f012 f9a7 	bl	80202fc <_ZdlPv>
	    return;
 800dfae:	e005      	b.n	800dfbc <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	69b9      	ldr	r1, [r7, #24]
 800dfb4:	69f8      	ldr	r0, [r7, #28]
 800dfb6:	f001 ff7a 	bl	800feae <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800dfba:	bf00      	nop
 800dfbc:	bf00      	nop
 800dfbe:	3720      	adds	r7, #32
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 800dfda:	b5b0      	push	{r4, r5, r7, lr}
 800dfdc:	b082      	sub	sp, #8
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 800dfe4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800dfe6:	1d3b      	adds	r3, r7, #4
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fe f9b9 	bl	800c360 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 800dfee:	462a      	mov	r2, r5
 800dff0:	6839      	ldr	r1, [r7, #0]
 800dff2:	4620      	mov	r0, r4
 800dff4:	f001 f90f 	bl	800f216 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800dff8:	4603      	mov	r3, r0
    }
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bdb0      	pop	{r4, r5, r7, pc}

0800e002 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e002:	b590      	push	{r4, r7, lr}
 800e004:	b085      	sub	sp, #20
 800e006:	af00      	add	r7, sp, #0
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f001 f929 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 800e014:	4604      	mov	r4, r0
 800e016:	68b8      	ldr	r0, [r7, #8]
 800e018:	f001 f925 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 800e01c:	4603      	mov	r3, r0
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	4619      	mov	r1, r3
 800e022:	4620      	mov	r0, r4
 800e024:	f001 f92a 	bl	800f27c <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>
 800e028:	4603      	mov	r3, r0
    }
 800e02a:	4618      	mov	r0, r3
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd90      	pop	{r4, r7, pc}

0800e032 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 800e032:	b590      	push	{r4, r7, lr}
 800e034:	b085      	sub	sp, #20
 800e036:	af00      	add	r7, sp, #0
 800e038:	60f8      	str	r0, [r7, #12]
 800e03a:	60b9      	str	r1, [r7, #8]
 800e03c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f001 f911 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 800e044:	4604      	mov	r4, r0
 800e046:	68b8      	ldr	r0, [r7, #8]
 800e048:	f001 f90d 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 800e04c:	4603      	mov	r3, r0
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	4619      	mov	r1, r3
 800e052:	4620      	mov	r0, r4
 800e054:	f001 f935 	bl	800f2c2 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>
 800e058:	4603      	mov	r3, r0
    }
 800e05a:	4618      	mov	r0, r3
 800e05c:	3714      	adds	r7, #20
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd90      	pop	{r4, r7, pc}
	...

0800e064 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 800e064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e066:	b08d      	sub	sp, #52	; 0x34
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
 800e070:	603b      	str	r3, [r7, #0]
      _M_range_insert(iterator __position, _ForwardIterator __first,
		      _ForwardIterator __last, std::forward_iterator_tag)
      {
	if (__first != __last)
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	f000 80f6 	beq.w	800e268 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
	  {
	    const size_type __n = std::distance(__first, __last);
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff ffab 	bl	800dfda <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800e084:	4603      	mov	r3, r0
 800e086:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (size_type(this->_M_impl._M_end_of_storage
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_finish) >= __n)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	1ad3      	subs	r3, r2, r3
	    if (size_type(this->_M_impl._M_end_of_storage
 800e092:	461a      	mov	r2, r3
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	4293      	cmp	r3, r2
 800e098:	f200 8081 	bhi.w	800e19e <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x13a>
	      {
		const size_type __elems_after = end() - __position;
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7fe f844 	bl	800c12a <_ZNSt6vectorIcSaIcEE3endEv>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	617b      	str	r3, [r7, #20]
 800e0a6:	f107 0208 	add.w	r2, r7, #8
 800e0aa:	f107 0314 	add.w	r3, r7, #20
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fe88 	bl	800ddc6 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	61fb      	str	r3, [r7, #28]
		pointer __old_finish(this->_M_impl._M_finish);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	61bb      	str	r3, [r7, #24]
		if (__elems_after > __n)
 800e0c0:	69fa      	ldr	r2, [r7, #28]
 800e0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d92d      	bls.n	800e124 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0xc0>
		  {
		    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	685a      	ldr	r2, [r3, #4]
 800e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ce:	425b      	negs	r3, r3
 800e0d0:	18d4      	adds	r4, r2, r3
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	685d      	ldr	r5, [r3, #4]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	685e      	ldr	r6, [r3, #4]
						this->_M_impl._M_finish,
						this->_M_impl._M_finish,
						_M_get_Tp_allocator());
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fb41 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e0e2:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	4629      	mov	r1, r5
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f001 f8a3 	bl	800f234 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __n;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	441a      	add	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	605a      	str	r2, [r3, #4]
		    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
		    _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800e0fa:	f107 0308 	add.w	r3, r7, #8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fa fda7 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e104:	4603      	mov	r3, r0
 800e106:	6818      	ldr	r0, [r3, #0]
 800e108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10a:	425b      	negs	r3, r3
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	4413      	add	r3, r2
 800e110:	69ba      	ldr	r2, [r7, #24]
 800e112:	4619      	mov	r1, r3
 800e114:	f7ff ff75 	bl	800e002 <_ZSt13move_backwardIPcS0_ET0_T_S2_S1_>
					    __old_finish - __n, __old_finish);
		    std::copy(__first, __last, __position);
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff ff88 	bl	800e032 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
		this->_M_impl._M_start = __new_start;
		this->_M_impl._M_finish = __new_finish;
		this->_M_impl._M_end_of_storage = __new_start + __len;
	      }
	  }
      }
 800e122:	e0a1      	b.n	800e268 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		    _ForwardIterator __mid = __first;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	613b      	str	r3, [r7, #16]
		    std::advance(__mid, __elems_after);
 800e128:	f107 0310 	add.w	r3, r7, #16
 800e12c:	69f9      	ldr	r1, [r7, #28]
 800e12e:	4618      	mov	r0, r3
 800e130:	f001 f8e8 	bl	800f304 <_ZSt7advanceIPcjEvRT_T0_>
		    std::__uninitialized_copy_a(__mid, __last,
 800e134:	693c      	ldr	r4, [r7, #16]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fe fb11 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e142:	4603      	mov	r3, r0
		    std::__uninitialized_copy_a(__mid, __last,
 800e144:	462a      	mov	r2, r5
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	4620      	mov	r0, r4
 800e14a:	f001 f8ee 	bl	800f32a <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
		    this->_M_impl._M_finish += __n - __elems_after;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	685a      	ldr	r2, [r3, #4]
 800e152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	1acb      	subs	r3, r1, r3
 800e158:	441a      	add	r2, r3
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	605a      	str	r2, [r3, #4]
		    std::__uninitialized_move_a(__position.base(),
 800e15e:	f107 0308 	add.w	r3, r7, #8
 800e162:	4618      	mov	r0, r3
 800e164:	f7fa fd75 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e168:	4603      	mov	r3, r0
 800e16a:	681c      	ldr	r4, [r3, #0]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	685d      	ldr	r5, [r3, #4]
						_M_get_Tp_allocator());
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	4618      	mov	r0, r3
 800e174:	f7fe faf6 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e178:	4603      	mov	r3, r0
		    std::__uninitialized_move_a(__position.base(),
 800e17a:	462a      	mov	r2, r5
 800e17c:	69b9      	ldr	r1, [r7, #24]
 800e17e:	4620      	mov	r0, r4
 800e180:	f001 f858 	bl	800f234 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
		    this->_M_impl._M_finish += __elems_after;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	441a      	add	r2, r3
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	605a      	str	r2, [r3, #4]
		    std::copy(__first, __mid, __position);
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	4619      	mov	r1, r3
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff ff4b 	bl	800e032 <_ZSt4copyIPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET0_T_S8_S7_>
      }
 800e19c:	e064      	b.n	800e268 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x204>
		  _M_check_len(__n, "vector::_M_range_insert");
 800e19e:	4a34      	ldr	r2, [pc, #208]	; (800e270 <_ZNSt6vectorIcSaIcEE15_M_range_insertIPcEEvN9__gnu_cxx17__normal_iteratorIS3_S1_EET_S7_St20forward_iterator_tag+0x20c>)
 800e1a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f001 f8d2 	bl	800f34c <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 800e1a8:	62b8      	str	r0, [r7, #40]	; 0x28
		pointer __new_start(this->_M_allocate(__len));
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff fc7c 	bl	800daac <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800e1b4:	6278      	str	r0, [r7, #36]	; 0x24
		pointer __new_finish(__new_start);
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	623b      	str	r3, [r7, #32]
		      (this->_M_impl._M_start, __position.base(),
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681c      	ldr	r4, [r3, #0]
 800e1be:	f107 0308 	add.w	r3, r7, #8
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fa fd45 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	681d      	ldr	r5, [r3, #0]
		       __new_start, _M_get_Tp_allocator());
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe fac8 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e1d4:	4603      	mov	r3, r0
		      (this->_M_impl._M_start, __position.base(),
 800e1d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1d8:	4629      	mov	r1, r5
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f001 f8fd 	bl	800f3da <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800e1e0:	6238      	str	r0, [r7, #32]
						    _M_get_Tp_allocator());
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7fe fabd 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e1ea:	4603      	mov	r3, r0
		      = std::__uninitialized_copy_a(__first, __last,
 800e1ec:	6a3a      	ldr	r2, [r7, #32]
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f001 f89a 	bl	800f32a <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>
 800e1f6:	6238      	str	r0, [r7, #32]
		      (__position.base(), this->_M_impl._M_finish,
 800e1f8:	f107 0308 	add.w	r3, r7, #8
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fa fd28 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800e202:	4603      	mov	r3, r0
 800e204:	681c      	ldr	r4, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	685d      	ldr	r5, [r3, #4]
		       __new_finish, _M_get_Tp_allocator());
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe faa9 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e212:	4603      	mov	r3, r0
		      (__position.base(), this->_M_impl._M_finish,
 800e214:	6a3a      	ldr	r2, [r7, #32]
 800e216:	4629      	mov	r1, r5
 800e218:	4620      	mov	r0, r4
 800e21a:	f001 f8de 	bl	800f3da <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 800e21e:	6238      	str	r0, [r7, #32]
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681c      	ldr	r4, [r3, #0]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	685d      	ldr	r5, [r3, #4]
			      _M_get_Tp_allocator());
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe fa9a 	bl	800c764 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800e230:	4603      	mov	r3, r0
		std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e232:	461a      	mov	r2, r3
 800e234:	4629      	mov	r1, r5
 800e236:	4620      	mov	r0, r4
 800e238:	f7fe fab0 	bl	800c79c <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		_M_deallocate(this->_M_impl._M_start,
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6819      	ldr	r1, [r3, #0]
			      this->_M_impl._M_end_of_storage
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	689a      	ldr	r2, [r3, #8]
			      - this->_M_impl._M_start);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	1ad3      	subs	r3, r2, r3
		_M_deallocate(this->_M_impl._M_start,
 800e24c:	461a      	mov	r2, r3
 800e24e:	f7fe fe2c 	bl	800ceaa <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		this->_M_impl._M_start = __new_start;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e256:	601a      	str	r2, [r3, #0]
		this->_M_impl._M_finish = __new_finish;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6a3a      	ldr	r2, [r7, #32]
 800e25c:	605a      	str	r2, [r3, #4]
		this->_M_impl._M_end_of_storage = __new_start + __len;
 800e25e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	441a      	add	r2, r3
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	609a      	str	r2, [r3, #8]
      }
 800e268:	bf00      	nop
 800e26a:	3734      	adds	r7, #52	; 0x34
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e270:	08023da0 	.word	0x08023da0

0800e274 <_ZSt9iter_swapIPbS0_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f001 f8c3 	bl	800f40c <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 800e286:	bf00      	nop
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	60f8      	str	r0, [r7, #12]
 800e296:	60b9      	str	r1, [r7, #8]
 800e298:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800e29a:	f7f4 f967 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d006      	beq.n	800e2b2 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	68b9      	ldr	r1, [r7, #8]
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f001 f8ce 	bl	800f44a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	e006      	b.n	800e2c0 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	68b9      	ldr	r1, [r7, #8]
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f001 f8e9 	bl	800f48e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	bf00      	nop
    }
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	60fb      	str	r3, [r7, #12]
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800e2da:	f7f4 f947 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d004      	beq.n	800e2ee <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e2e4:	68b8      	ldr	r0, [r7, #8]
 800e2e6:	f012 f80d 	bl	8020304 <_Znwj>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	e006      	b.n	800e2fc <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	68b9      	ldr	r1, [r7, #8]
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f001 feac 	bl	8010050 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	bf00      	nop
      { return __a.allocate(__n); }
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 800e312:	4623      	mov	r3, r4
 800e314:	687a      	ldr	r2, [r7, #4]
 800e316:	68b9      	ldr	r1, [r7, #8]
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f001 f915 	bl	800f548 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800e31e:	463b      	mov	r3, r7
 800e320:	461a      	mov	r2, r3
 800e322:	68b9      	ldr	r1, [r7, #8]
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f001 f95d 	bl	800f5e4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 800e32a:	bf00      	nop
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd90      	pop	{r4, r7, pc}

0800e332 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 800e332:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e334:	b089      	sub	sp, #36	; 0x24
 800e336:	af02      	add	r7, sp, #8
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800e33e:	f107 020c 	add.w	r2, r7, #12
 800e342:	f107 0308 	add.w	r3, r7, #8
 800e346:	4611      	mov	r1, r2
 800e348:	4618      	mov	r0, r3
 800e34a:	f7f4 fffb 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800e34e:	4603      	mov	r3, r0
 800e350:	0fda      	lsrs	r2, r3, #31
 800e352:	4413      	add	r3, r2
 800e354:	105b      	asrs	r3, r3, #1
 800e356:	461a      	mov	r2, r3
 800e358:	f107 030c 	add.w	r3, r7, #12
 800e35c:	4611      	mov	r1, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 f827 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e364:	4603      	mov	r3, r0
 800e366:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800e368:	f107 030c 	add.w	r3, r7, #12
 800e36c:	2101      	movs	r1, #1
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 f81f 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e374:	4604      	mov	r4, r0
 800e376:	f107 0308 	add.w	r3, r7, #8
 800e37a:	2101      	movs	r1, #1
 800e37c:	4618      	mov	r0, r3
 800e37e:	f001 f958 	bl	800f632 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 800e382:	4603      	mov	r3, r0
 800e384:	f88d 5000 	strb.w	r5, [sp]
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	4621      	mov	r1, r4
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f001 f969 	bl	800f664 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 800e392:	f107 030c 	add.w	r3, r7, #12
 800e396:	2101      	movs	r1, #1
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 f80a 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e39e:	4633      	mov	r3, r6
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	68b9      	ldr	r1, [r7, #8]
 800e3a4:	f001 f9b3 	bl	800f70e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 800e3a8:	4603      	mov	r3, r0
    }
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	371c      	adds	r7, #28
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
 800e3ba:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	60fb      	str	r3, [r7, #12]
 800e3c8:	f107 020c 	add.w	r2, r7, #12
 800e3cc:	f107 0308 	add.w	r3, r7, #8
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f4 ff4f 	bl	8003276 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e3e2:	b480      	push	{r7}
 800e3e4:	b083      	sub	sp, #12
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	1d1a      	adds	r2, r3, #4
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	601a      	str	r2, [r3, #0]
	return *this;
 800e3f4:	687b      	ldr	r3, [r7, #4]
      }
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e402:	b480      	push	{r7}
 800e404:	b083      	sub	sp, #12
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4618      	mov	r0, r3
 800e410:	370c      	adds	r7, #12
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 800e41a:	b580      	push	{r7, lr}
 800e41c:	ed2d 8b02 	vpush	{d8}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	60f8      	str	r0, [r7, #12]
 800e426:	60b9      	str	r1, [r7, #8]
 800e428:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 800e42a:	f107 0308 	add.w	r3, r7, #8
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff ffe7 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e434:	4603      	mov	r3, r0
 800e436:	ed93 8a00 	vldr	s16, [r3]
 800e43a:	1d3b      	adds	r3, r7, #4
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7ff ffe0 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e442:	4603      	mov	r3, r0
 800e444:	edd3 7a00 	vldr	s15, [r3]
 800e448:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e450:	bf4c      	ite	mi
 800e452:	2301      	movmi	r3, #1
 800e454:	2300      	movpl	r3, #0
 800e456:	b2db      	uxtb	r3, r3
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	ecbd 8b02 	vpop	{d8}
 800e462:	bd80      	pop	{r7, pc}

0800e464 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e464:	b590      	push	{r4, r7, lr}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f001 f99f 	bl	800f7b4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800e476:	4604      	mov	r4, r0
 800e478:	68b8      	ldr	r0, [r7, #8]
 800e47a:	f001 f99b 	bl	800f7b4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 800e47e:	4603      	mov	r3, r0
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	4619      	mov	r1, r3
 800e484:	4620      	mov	r0, r4
 800e486:	f001 f9a0 	bl	800f7ca <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 800e48a:	4603      	mov	r3, r0
    }
 800e48c:	4618      	mov	r0, r3
 800e48e:	3714      	adds	r7, #20
 800e490:	46bd      	mov	sp, r7
 800e492:	bd90      	pop	{r4, r7, pc}

0800e494 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800e494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800e4a0:	f107 0208 	add.w	r2, r7, #8
 800e4a4:	f107 030c 	add.w	r3, r7, #12
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fd ff62 	bl	800c374 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d153      	bne.n	800e55e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xca>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e4b6:	f107 030c 	add.w	r3, r7, #12
 800e4ba:	2101      	movs	r1, #1
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7ff ff78 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	617b      	str	r3, [r7, #20]
 800e4c6:	e03b      	b.n	800e540 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 800e4c8:	1d3b      	adds	r3, r7, #4
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	6979      	ldr	r1, [r7, #20]
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7ff ffa3 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d026      	beq.n	800e528 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 800e4da:	f107 0314 	add.w	r3, r7, #20
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff ff8f 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fd fd8c 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800e4f2:	f107 0314 	add.w	r3, r7, #20
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7ff ff5a 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e4fe:	4603      	mov	r3, r0
 800e500:	461a      	mov	r2, r3
 800e502:	6979      	ldr	r1, [r7, #20]
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f7ff ffad 	bl	800e464 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 800e50a:	f107 0310 	add.w	r3, r7, #16
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fd fd78 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800e514:	4603      	mov	r3, r0
 800e516:	681c      	ldr	r4, [r3, #0]
 800e518:	f107 030c 	add.w	r3, r7, #12
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff ff70 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e522:	4603      	mov	r3, r0
 800e524:	601c      	str	r4, [r3, #0]
 800e526:	e006      	b.n	800e536 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800e528:	4630      	mov	r0, r6
 800e52a:	f7f5 fcc5 	bl	8003eb8 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 800e52e:	4629      	mov	r1, r5
 800e530:	6978      	ldr	r0, [r7, #20]
 800e532:	f001 f98b 	bl	800f84c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800e536:	f107 0314 	add.w	r3, r7, #20
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7ff ff51 	bl	800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800e540:	f107 0208 	add.w	r2, r7, #8
 800e544:	f107 0314 	add.w	r3, r7, #20
 800e548:	4611      	mov	r1, r2
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fd ff12 	bl	800c374 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800e550:	4603      	mov	r3, r0
 800e552:	f083 0301 	eor.w	r3, r3, #1
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1b5      	bne.n	800e4c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 800e55c:	e000      	b.n	800e560 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xcc>
      if (__first == __last) return;
 800e55e:	bf00      	nop
    }
 800e560:	371c      	adds	r7, #28
 800e562:	46bd      	mov	sp, r7
 800e564:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e566 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 800e566:	b5b0      	push	{r4, r5, r7, lr}
 800e568:	b086      	sub	sp, #24
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	60f8      	str	r0, [r7, #12]
 800e56e:	60b9      	str	r1, [r7, #8]
 800e570:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	617b      	str	r3, [r7, #20]
 800e576:	e00b      	b.n	800e590 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 800e578:	4628      	mov	r0, r5
 800e57a:	f7f5 fc9d 	bl	8003eb8 <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 800e57e:	4621      	mov	r1, r4
 800e580:	6978      	ldr	r0, [r7, #20]
 800e582:	f001 f963 	bl	800f84c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800e586:	f107 0314 	add.w	r3, r7, #20
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff ff29 	bl	800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800e590:	f107 0208 	add.w	r2, r7, #8
 800e594:	f107 0314 	add.w	r3, r7, #20
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fd feea 	bl	800c374 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f083 0301 	eor.w	r3, r3, #1
 800e5a6:	b2db      	uxtb	r3, r3
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1e5      	bne.n	800e578 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 800e5ac:	bf00      	nop
 800e5ae:	bf00      	nop
 800e5b0:	3718      	adds	r7, #24
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bdb0      	pop	{r4, r5, r7, pc}

0800e5b6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e5b6:	b480      	push	{r7}
 800e5b8:	b083      	sub	sp, #12
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	370c      	adds	r7, #12
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800e5d6:	463b      	mov	r3, r7
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff ffec 	bl	800e5b6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 800e5e8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800e5f0:	1d3b      	adds	r3, r7, #4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff ffdf 	bl	800e5b6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800e5f8:	f107 030c 	add.w	r3, r7, #12
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	4618      	mov	r0, r3
 800e600:	f001 f96f 	bl	800f8e2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>
 800e604:	bf00      	nop
 800e606:	4620      	mov	r0, r4
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bdb0      	pop	{r4, r5, r7, pc}

0800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800e60e:	b580      	push	{r7, lr}
 800e610:	b082      	sub	sp, #8
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
 800e616:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	4619      	mov	r1, r3
 800e620:	4610      	mov	r0, r2
 800e622:	f7f6 f877 	bl	8004714 <_ZZN3jlb10Controller15lateral_controlEfENKUlbE_clEb>
 800e626:	4603      	mov	r3, r0
 800e628:	f083 0301 	eor.w	r3, r3, #1
 800e62c:	b2db      	uxtb	r3, r3
 800e62e:	4618      	mov	r0, r3
 800e630:	3708      	adds	r7, #8
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e636:	b580      	push	{r7, lr}
 800e638:	b086      	sub	sp, #24
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	60f8      	str	r0, [r7, #12]
 800e63e:	60b9      	str	r1, [r7, #8]
 800e640:	713a      	strb	r2, [r7, #4]
 800e642:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	109b      	asrs	r3, r3, #2
 800e64c:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800e64e:	e036      	b.n	800e6be <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800e650:	1d3b      	adds	r3, r7, #4
 800e652:	68f9      	ldr	r1, [r7, #12]
 800e654:	4618      	mov	r0, r3
 800e656:	f7ff ffda 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	e063      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3301      	adds	r3, #1
 800e668:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e66a:	1d3b      	adds	r3, r7, #4
 800e66c:	68f9      	ldr	r1, [r7, #12]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff ffcd 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	e056      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	3301      	adds	r3, #1
 800e682:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e684:	1d3b      	adds	r3, r7, #4
 800e686:	68f9      	ldr	r1, [r7, #12]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff ffc0 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e68e:	4603      	mov	r3, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	e049      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3301      	adds	r3, #1
 800e69c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e69e:	1d3b      	adds	r3, r7, #4
 800e6a0:	68f9      	ldr	r1, [r7, #12]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7ff ffb3 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d001      	beq.n	800e6b2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	e03c      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	dcc5      	bgt.n	800e650 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d006      	beq.n	800e6dc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800e6ce:	2b03      	cmp	r3, #3
 800e6d0:	dc2b      	bgt.n	800e72a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d01c      	beq.n	800e710 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d00d      	beq.n	800e6f6 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800e6da:	e026      	b.n	800e72a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800e6dc:	1d3b      	adds	r3, r7, #4
 800e6de:	68f9      	ldr	r1, [r7, #12]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7ff ff94 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	e01d      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e6f6:	1d3b      	adds	r3, r7, #4
 800e6f8:	68f9      	ldr	r1, [r7, #12]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff ff87 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	e010      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3301      	adds	r3, #1
 800e70e:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e710:	1d3b      	adds	r3, r7, #4
 800e712:	68f9      	ldr	r1, [r7, #12]
 800e714:	4618      	mov	r0, r3
 800e716:	f7ff ff7a 	bl	800e60e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EclIPbEEbT_>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	e003      	b.n	800e72c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	3301      	adds	r3, #1
 800e728:	60fb      	str	r3, [r7, #12]
	  return __last;
 800e72a:	68bb      	ldr	r3, [r7, #8]
    }
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4618      	mov	r0, r3
 800e740:	370c      	adds	r7, #12
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <_ZN9__gnu_cxx5__ops10_Iter_predIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_pred(_Predicate __pred)
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b082      	sub	sp, #8
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800e754:	463b      	mov	r3, r7
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff ffec 	bl	800e734 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4618      	mov	r0, r3
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <_ZN9__gnu_cxx5__ops8__negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS6_EE>:
    __negate(_Iter_pred<_Predicate> __pred)
 800e766:	b5b0      	push	{r4, r5, r7, lr}
 800e768:	b084      	sub	sp, #16
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 800e76e:	1d3b      	adds	r3, r7, #4
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff ffdf 	bl	800e734 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
 800e776:	f107 030c 	add.w	r3, r7, #12
 800e77a:	4629      	mov	r1, r5
 800e77c:	4618      	mov	r0, r3
 800e77e:	f001 f8be 	bl	800f8fe <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>
 800e782:	bf00      	nop
 800e784:	4620      	mov	r0, r4
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bdb0      	pop	{r4, r5, r7, pc}

0800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>:
	operator()(_Iterator __it)
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	4619      	mov	r1, r3
 800e79e:	4610      	mov	r0, r2
 800e7a0:	f7f5 ffc5 	bl	800472e <_ZZN3jlb10Controller15lateral_controlEfENKUlbE0_clEb>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f083 0301 	eor.w	r3, r3, #1
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b086      	sub	sp, #24
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	713a      	strb	r2, [r7, #4]
 800e7c0:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 800e7c2:	68ba      	ldr	r2, [r7, #8]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	109b      	asrs	r3, r3, #2
 800e7ca:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 800e7cc:	e036      	b.n	800e83c <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x88>
	  if (__pred(__first))
 800e7ce:	1d3b      	adds	r3, r7, #4
 800e7d0:	68f9      	ldr	r1, [r7, #12]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff ffda 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	e063      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e7e8:	1d3b      	adds	r3, r7, #4
 800e7ea:	68f9      	ldr	r1, [r7, #12]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7ff ffcd 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	e056      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	3301      	adds	r3, #1
 800e800:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e802:	1d3b      	adds	r3, r7, #4
 800e804:	68f9      	ldr	r1, [r7, #12]
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff ffc0 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d001      	beq.n	800e816 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	e049      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	3301      	adds	r3, #1
 800e81a:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e81c:	1d3b      	adds	r3, r7, #4
 800e81e:	68f9      	ldr	r1, [r7, #12]
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff ffb3 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	e03c      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	3301      	adds	r3, #1
 800e834:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	3b01      	subs	r3, #1
 800e83a:	617b      	str	r3, [r7, #20]
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	dcc5      	bgt.n	800e7ce <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0x1a>
      switch (__last - __first)
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	1ad3      	subs	r3, r2, r3
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d006      	beq.n	800e85a <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xa6>
 800e84c:	2b03      	cmp	r3, #3
 800e84e:	dc2b      	bgt.n	800e8a8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
 800e850:	2b01      	cmp	r3, #1
 800e852:	d01c      	beq.n	800e88e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xda>
 800e854:	2b02      	cmp	r3, #2
 800e856:	d00d      	beq.n	800e874 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xc0>
 800e858:	e026      	b.n	800e8a8 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf4>
	  if (__pred(__first))
 800e85a:	1d3b      	adds	r3, r7, #4
 800e85c:	68f9      	ldr	r1, [r7, #12]
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff ff94 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	e01d      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	3301      	adds	r3, #1
 800e872:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e874:	1d3b      	adds	r3, r7, #4
 800e876:	68f9      	ldr	r1, [r7, #12]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7ff ff87 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	e010      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	3301      	adds	r3, #1
 800e88c:	60fb      	str	r3, [r7, #12]
	  if (__pred(__first))
 800e88e:	1d3b      	adds	r3, r7, #4
 800e890:	68f9      	ldr	r1, [r7, #12]
 800e892:	4618      	mov	r0, r3
 800e894:	f7ff ff7a 	bl	800e78c <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EclIPbEEbT_>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	e003      	b.n	800e8aa <_ZSt9__find_ifIPbN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EEET_S8_S8_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	60fb      	str	r3, [r7, #12]
	  return __last;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
    }
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3718      	adds	r7, #24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f001 f82b 	bl	800f91a <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b084      	sub	sp, #16
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	60f8      	str	r0, [r7, #12]
 800e8d6:	60b9      	str	r1, [r7, #8]
 800e8d8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	68b9      	ldr	r1, [r7, #8]
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f001 f827 	bl	800f932 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3710      	adds	r7, #16
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}

0800e8ee <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e8ee:	b580      	push	{r7, lr}
 800e8f0:	b082      	sub	sp, #8
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800e8f6:	1d3b      	adds	r3, r7, #4
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f001 f832 	bl	800f962 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 800e8fe:	4603      	mov	r3, r0
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b082      	sub	sp, #8
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800e912:	1d3b      	adds	r3, r7, #4
 800e914:	4618      	mov	r0, r3
 800e916:	f7f4 fd52 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800e91a:	4603      	mov	r3, r0
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4618      	mov	r0, r3
 800e920:	3708      	adds	r7, #8
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800e926:	b580      	push	{r7, lr}
 800e928:	b084      	sub	sp, #16
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	68b9      	ldr	r1, [r7, #8]
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f001 f81e 	bl	800f978 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800e93c:	4603      	mov	r3, r0
 800e93e:	4618      	mov	r0, r3
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800e946:	b580      	push	{r7, lr}
 800e948:	b082      	sub	sp, #8
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f7ff ffda 	bl	800e90a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800e956:	4602      	mov	r2, r0
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	1a9b      	subs	r3, r3, r2
 800e95c:	109b      	asrs	r3, r3, #2
 800e95e:	461a      	mov	r2, r3
 800e960:	1d3b      	adds	r3, r7, #4
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f7ff fd24 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 800e96a:	4603      	mov	r3, r0
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800e97e:	e00f      	b.n	800e9a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0x2c>
	    std::_Destroy(std::__addressof(*__first));
 800e980:	1d3b      	adds	r3, r7, #4
 800e982:	4618      	mov	r0, r3
 800e984:	f7ff fd3d 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800e988:	4603      	mov	r3, r0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7f4 fdc6 	bl	800351c <_ZSt11__addressofIfEPT_RS0_>
 800e990:	4603      	mov	r3, r0
 800e992:	4618      	mov	r0, r3
 800e994:	f7f4 fdcd 	bl	8003532 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 800e998:	1d3b      	adds	r3, r7, #4
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7ff fd21 	bl	800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800e9a0:	463a      	mov	r2, r7
 800e9a2:	1d3b      	adds	r3, r7, #4
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fd fce4 	bl	800c374 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	f083 0301 	eor.w	r3, r3, #1
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e3      	bne.n	800e980 <_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_+0xc>
	}
 800e9b8:	bf00      	nop
 800e9ba:	bf00      	nop
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800e9c2:	b480      	push	{r7}
 800e9c4:	b083      	sub	sp, #12
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b084      	sub	sp, #16
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800e9e4:	f7f3 fdc2 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d006      	beq.n	800e9fc <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	68b9      	ldr	r1, [r7, #8]
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f000 ffdd 	bl	800f9b2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	e006      	b.n	800ea0a <_ZSt14__copy_move_a2ILb0EPfS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	68b9      	ldr	r1, [r7, #8]
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f000 fff9 	bl	800f9f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800ea06:	4603      	mov	r3, r0
 800ea08:	bf00      	nop
    }
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPfS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	60f8      	str	r0, [r7, #12]
 800ea1a:	60b9      	str	r1, [r7, #8]
 800ea1c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	68b9      	ldr	r1, [r7, #8]
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7fc ffae 	bl	800b984 <_ZSt4copyIPfS0_ET0_T_S2_S1_>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ea3c:	e009      	b.n	800ea52 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f001 f809 	bl	800fa56 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 800ea44:	4603      	mov	r3, r0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f001 f810 	bl	800fa6c <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>
	  for (; __first != __last; ++__first)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3318      	adds	r3, #24
 800ea50:	607b      	str	r3, [r7, #4]
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d1f1      	bne.n	800ea3e <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4EdgeEEEvT_S5_+0xc>
	}
 800ea5a:	bf00      	nop
 800ea5c:	bf00      	nop
 800ea5e:	3708      	adds	r7, #8
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	68b9      	ldr	r1, [r7, #8]
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	f001 f804 	bl	800fa82 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ea8e:	e009      	b.n	800eaa4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fd16 	bl	800f4c2 <_ZSt11__addressofIcEPT_RS0_>
 800ea96:	4603      	mov	r3, r0
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f001 f80a 	bl	800fab2 <_ZSt8_DestroyIcEvPT_>
	  for (; __first != __last; ++__first)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	607b      	str	r3, [r7, #4]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d1f1      	bne.n	800ea90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPcEEvT_S3_+0xc>
	}
 800eaac:	bf00      	nop
 800eaae:	bf00      	nop
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800eab6:	b480      	push	{r7}
 800eab8:	b083      	sub	sp, #12
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
 800eabe:	6039      	str	r1, [r7, #0]
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 800eacc:	b590      	push	{r4, r7, lr}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 800ead6:	6838      	ldr	r0, [r7, #0]
 800ead8:	f000 fff6 	bl	800fac8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800eadc:	4603      	mov	r3, r0
 800eade:	4619      	mov	r1, r3
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f011 fc21 	bl	8020328 <_ZNSaIcEC1ERKS_>
 800eae6:	687c      	ldr	r4, [r7, #4]
 800eae8:	6838      	ldr	r0, [r7, #0]
 800eaea:	f000 ffed 	bl	800fac8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 fff3 	bl	800fade <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>
	{ }
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd90      	pop	{r4, r7, pc}

0800eb02 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800eb02:	b480      	push	{r7}
 800eb04:	b083      	sub	sp, #12
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	601a      	str	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4618      	mov	r0, r3
 800eb18:	370c      	adds	r7, #12
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr

0800eb22 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800eb22:	b590      	push	{r4, r7, lr}
 800eb24:	b087      	sub	sp, #28
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f000 fff8 	bl	800fb24 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800eb34:	4604      	mov	r4, r0
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f7fd fabe 	bl	800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	1ae2      	subs	r2, r4, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	bf34      	ite	cc
 800eb46:	2301      	movcc	r3, #1
 800eb48:	2300      	movcs	r3, #0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f011 fbf1 	bl	8020338 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f7fd faae 	bl	800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f7fd faaa 	bl	800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800eb64:	4603      	mov	r3, r0
 800eb66:	613b      	str	r3, [r7, #16]
 800eb68:	f107 0208 	add.w	r2, r7, #8
 800eb6c:	f107 0310 	add.w	r3, r7, #16
 800eb70:	4611      	mov	r1, r2
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7f4 fc73 	bl	800345e <_ZSt3maxIjERKT_S2_S2_>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	4423      	add	r3, r4
 800eb7e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800eb80:	68f8      	ldr	r0, [r7, #12]
 800eb82:	f7fd fa99 	bl	800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800eb86:	4602      	mov	r2, r0
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d306      	bcc.n	800eb9c <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f000 ffc8 	bl	800fb24 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800eb94:	4602      	mov	r2, r0
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d904      	bls.n	800eba6 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f000 ffc1 	bl	800fb24 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>
 800eba2:	4603      	mov	r3, r0
 800eba4:	e000      	b.n	800eba8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800eba6:	697b      	ldr	r3, [r7, #20]
      }
 800eba8:	4618      	mov	r0, r3
 800ebaa:	371c      	adds	r7, #28
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd90      	pop	{r4, r7, pc}

0800ebb0 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	f107 030c 	add.w	r3, r7, #12
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff ff9e 	bl	800eb02 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ebd0:	b590      	push	{r4, r7, lr}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 f83a 	bl	800ec54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	681c      	ldr	r4, [r3, #0]
 800ebe4:	6838      	ldr	r0, [r7, #0]
 800ebe6:	f000 f835 	bl	800ec54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ebea:	4603      	mov	r3, r0
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	1ae3      	subs	r3, r4, r3
 800ebf0:	10db      	asrs	r3, r3, #3
 800ebf2:	4a03      	ldr	r2, [pc, #12]	; (800ec00 <_ZN9__gnu_cxxmiIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800ebf4:	fb02 f303 	mul.w	r3, r2, r3
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd90      	pop	{r4, r7, pc}
 800ec00:	aaaaaaab 	.word	0xaaaaaaab

0800ec04 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d006      	beq.n	800ec22 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x1e>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 ff94 	bl	800fb46 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	e000      	b.n	800ec24 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj+0x20>
 800ec22:	2300      	movs	r3, #0
      }
 800ec24:	4618      	mov	r0, r3
 800ec26:	3708      	adds	r7, #8
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800ec2c:	b590      	push	{r4, r7, lr}
 800ec2e:	b087      	sub	sp, #28
 800ec30:	af02      	add	r7, sp, #8
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800ec3a:	f88d 4000 	strb.w	r4, [sp]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	68b9      	ldr	r1, [r7, #8]
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f000 ffa1 	bl	800fb8c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800ec4a:	4603      	mov	r3, r0
      }
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3714      	adds	r7, #20
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd90      	pop	{r4, r7, pc}

0800ec54 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ec54:	b480      	push	{r7}
 800ec56:	b083      	sub	sp, #12
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	370c      	adds	r7, #12
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr

0800ec6a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b082      	sub	sp, #8
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
 800ec72:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800ec74:	6838      	ldr	r0, [r7, #0]
 800ec76:	f000 ff9b 	bl	800fbb0 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
	}
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6819      	ldr	r1, [r3, #0]
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	4613      	mov	r3, r2
 800ec94:	005b      	lsls	r3, r3, #1
 800ec96:	4413      	add	r3, r2
 800ec98:	00db      	lsls	r3, r3, #3
 800ec9a:	425b      	negs	r3, r3
 800ec9c:	440b      	add	r3, r1
 800ec9e:	60fb      	str	r3, [r7, #12]
 800eca0:	f107 020c 	add.w	r2, r7, #12
 800eca4:	f107 0308 	add.w	r3, r7, #8
 800eca8:	4611      	mov	r1, r2
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7ff ff29 	bl	800eb02 <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ecba:	b480      	push	{r7}
 800ecbc:	b083      	sub	sp, #12
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ecdc:	e009      	b.n	800ecf2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f000 ff83 	bl	800fbea <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 800ece4:	4603      	mov	r3, r0
 800ece6:	4618      	mov	r0, r3
 800ece8:	f000 ff8a 	bl	800fc00 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>
	  for (; __first != __last; ++__first)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3318      	adds	r3, #24
 800ecf0:	607b      	str	r3, [r7, #4]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d1f1      	bne.n	800ecde <_ZNSt12_Destroy_auxILb0EE9__destroyIPN3jlb4NodeEEEvT_S5_+0xc>
	}
 800ecfa:	bf00      	nop
 800ecfc:	bf00      	nop
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EEC1ERKS3_>:
      vector(const vector& __x)
 800ed04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800ed0e:	687c      	ldr	r4, [r7, #4]
 800ed10:	6838      	ldr	r0, [r7, #0]
 800ed12:	f7fd f9d1 	bl	800c0b8 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE4sizeEv>
 800ed16:	4605      	mov	r5, r0
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 ff89 	bl	800fc32 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800ed20:	4602      	mov	r2, r0
 800ed22:	f107 030c 	add.w	r3, r7, #12
 800ed26:	4611      	mov	r1, r2
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 ff74 	bl	800fc16 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>
 800ed2e:	f107 030c 	add.w	r3, r7, #12
 800ed32:	461a      	mov	r2, r3
 800ed34:	4629      	mov	r1, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	f000 ff86 	bl	800fc48 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>
 800ed3c:	f107 030c 	add.w	r3, r7, #12
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fc ff3f 	bl	800bbc4 <_ZNSaIN3jlb4EdgeEED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ed46:	6838      	ldr	r0, [r7, #0]
 800ed48:	f000 ff92 	bl	800fc70 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	6838      	ldr	r0, [r7, #0]
 800ed50:	f000 ff9e 	bl	800fc90 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>
 800ed54:	4606      	mov	r6, r0
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fd fc9a 	bl	800c696 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800ed62:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800ed64:	4622      	mov	r2, r4
 800ed66:	4631      	mov	r1, r6
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f000 ffa2 	bl	800fcb2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>
 800ed6e:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	605a      	str	r2, [r3, #4]
      }
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4618      	mov	r0, r3
 800ed78:	3714      	adds	r7, #20
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed7e <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800ed7e:	b480      	push	{r7}
 800ed80:	b083      	sub	sp, #12
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
 800ed86:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	601a      	str	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4618      	mov	r0, r3
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800ed9e:	b590      	push	{r4, r7, lr}
 800eda0:	b087      	sub	sp, #28
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	60f8      	str	r0, [r7, #12]
 800eda6:	60b9      	str	r1, [r7, #8]
 800eda8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 ff92 	bl	800fcd4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800edb0:	4604      	mov	r4, r0
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f000 ffa0 	bl	800fcf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800edb8:	4603      	mov	r3, r0
 800edba:	1ae2      	subs	r2, r4, r3
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	bf34      	ite	cc
 800edc2:	2301      	movcc	r3, #1
 800edc4:	2300      	movcs	r3, #0
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d002      	beq.n	800edd2 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f011 fab3 	bl	8020338 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800edd2:	68f8      	ldr	r0, [r7, #12]
 800edd4:	f000 ff90 	bl	800fcf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800edd8:	4604      	mov	r4, r0
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	f000 ff8c 	bl	800fcf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ede0:	4603      	mov	r3, r0
 800ede2:	613b      	str	r3, [r7, #16]
 800ede4:	f107 0208 	add.w	r2, r7, #8
 800ede8:	f107 0310 	add.w	r3, r7, #16
 800edec:	4611      	mov	r1, r2
 800edee:	4618      	mov	r0, r3
 800edf0:	f7f4 fb35 	bl	800345e <_ZSt3maxIjERKT_S2_S2_>
 800edf4:	4603      	mov	r3, r0
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4423      	add	r3, r4
 800edfa:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 ff7b 	bl	800fcf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>
 800ee02:	4602      	mov	r2, r0
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d306      	bcc.n	800ee18 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	f000 ff62 	bl	800fcd4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ee10:	4602      	mov	r2, r0
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d904      	bls.n	800ee22 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x84>
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f000 ff5b 	bl	800fcd4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	e000      	b.n	800ee24 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE12_M_check_lenEjPKc+0x86>
 800ee22:	697b      	ldr	r3, [r7, #20]
      }
 800ee24:	4618      	mov	r0, r3
 800ee26:	371c      	adds	r7, #28
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd90      	pop	{r4, r7, pc}

0800ee2c <_ZNSt6vectorIN3jlb4NodeESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	f107 030c 	add.w	r3, r7, #12
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7ff ff9e 	bl	800ed7e <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	4618      	mov	r0, r3
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800ee4c:	b590      	push	{r4, r7, lr}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f826 	bl	800eea8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	681c      	ldr	r4, [r3, #0]
 800ee60:	6838      	ldr	r0, [r7, #0]
 800ee62:	f000 f821 	bl	800eea8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>
 800ee66:	4603      	mov	r3, r0
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	1ae3      	subs	r3, r4, r3
 800ee6c:	10db      	asrs	r3, r3, #3
 800ee6e:	4a03      	ldr	r2, [pc, #12]	; (800ee7c <_ZN9__gnu_cxxmiIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 800ee70:	fb02 f303 	mul.w	r3, r2, r3
 800ee74:	4618      	mov	r0, r3
 800ee76:	370c      	adds	r7, #12
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd90      	pop	{r4, r7, pc}
 800ee7c:	aaaaaaab 	.word	0xaaaaaaab

0800ee80 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d006      	beq.n	800ee9e <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x1e>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6839      	ldr	r1, [r7, #0]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 ff45 	bl	800fd24 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	e000      	b.n	800eea0 <_ZNSt12_Vector_baseIN3jlb4NodeESaIS1_EE11_M_allocateEj+0x20>
 800ee9e:	2300      	movs	r3, #0
      }
 800eea0:	4618      	mov	r0, r3
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	370c      	adds	r7, #12
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <_ZSt34__uninitialized_move_if_noexcept_aIPN3jlb4NodeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800eebe:	b590      	push	{r4, r7, lr}
 800eec0:	b085      	sub	sp, #20
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	60f8      	str	r0, [r7, #12]
 800eec6:	60b9      	str	r1, [r7, #8]
 800eec8:	607a      	str	r2, [r7, #4]
 800eeca:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 ff4c 	bl	800fd6a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800eed2:	4604      	mov	r4, r0
 800eed4:	68b8      	ldr	r0, [r7, #8]
 800eed6:	f000 ff48 	bl	800fd6a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>
 800eeda:	4601      	mov	r1, r0
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	4620      	mov	r0, r4
 800eee2:	f000 ff4d 	bl	800fd80 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>
 800eee6:	4603      	mov	r3, r0
    }
 800eee8:	4618      	mov	r0, r3
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}

0800eef0 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6819      	ldr	r1, [r3, #0]
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	4613      	mov	r3, r2
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4413      	add	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	425b      	negs	r3, r3
 800ef0a:	440b      	add	r3, r1
 800ef0c:	60fb      	str	r3, [r7, #12]
 800ef0e:	f107 020c 	add.w	r2, r7, #12
 800ef12:	f107 0308 	add.w	r3, r7, #8
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff ff30 	bl	800ed7e <_ZN9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	4618      	mov	r0, r3
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <_ZNK9__gnu_cxx17__normal_iteratorIPN3jlb4NodeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4618      	mov	r0, r3
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ef48:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	370c      	adds	r7, #12
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ef60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ef64:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7ff ffea 	bl	800ef40 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ef70:	f107 0208 	add.w	r2, r7, #8
 800ef74:	f107 030c 	add.w	r3, r7, #12
 800ef78:	4611      	mov	r1, r2
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7f4 fb32 	bl	80035e4 <_ZSt3minIjERKT_S2_S2_>
 800ef80:	4603      	mov	r3, r0
 800ef82:	681b      	ldr	r3, [r3, #0]
      }
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <_ZSt18uninitialized_copyIPKcPcET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	68b9      	ldr	r1, [r7, #8]
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f000 ff09 	bl	800fdb8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>
 800efa6:	4603      	mov	r3, r0
    }
 800efa8:	4618      	mov	r0, r3
 800efaa:	3718      	adds	r7, #24
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	601a      	str	r2, [r3, #0]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	605a      	str	r2, [r3, #4]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	609a      	str	r2, [r3, #8]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	60da      	str	r2, [r3, #12]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4618      	mov	r0, r3
 800efd4:	370c      	adds	r7, #12
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr

0800efde <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800efde:	b580      	push	{r7, lr}
 800efe0:	b084      	sub	sp, #16
 800efe2:	af00      	add	r7, sp, #0
 800efe4:	6078      	str	r0, [r7, #4]
 800efe6:	6039      	str	r1, [r7, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800eff0:	f7f3 fabc 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d006      	beq.n	800f008 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	4618      	mov	r0, r3
 800f000:	f011 f980 	bl	8020304 <_Znwj>
 800f004:	4603      	mov	r3, r0
 800f006:	e006      	b.n	800f016 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f008:	2200      	movs	r2, #0
 800f00a:	68b9      	ldr	r1, [r7, #8]
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f001 fa76 	bl	80104fe <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 800f012:	4603      	mov	r3, r0
 800f014:	bf00      	nop
      { return __a.allocate(__n); }
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800f01e:	b480      	push	{r7}
 800f020:	b083      	sub	sp, #12
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 feca 	bl	800fdd8 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f04e:	b580      	push	{r7, lr}
 800f050:	b084      	sub	sp, #16
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800f056:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f05a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7f4 fa73 	bl	8003548 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 800f062:	4603      	mov	r3, r0
 800f064:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f066:	f107 0208 	add.w	r2, r7, #8
 800f06a:	f107 030c 	add.w	r3, r7, #12
 800f06e:	4611      	mov	r1, r2
 800f070:	4618      	mov	r0, r3
 800f072:	f7f4 fab7 	bl	80035e4 <_ZSt3minIjERKT_S2_S2_>
 800f076:	4603      	mov	r3, r0
 800f078:	681b      	ldr	r3, [r3, #0]
      }
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800f082:	b590      	push	{r4, r7, lr}
 800f084:	b085      	sub	sp, #20
 800f086:	af00      	add	r7, sp, #0
 800f088:	60f8      	str	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f000 febc 	bl	800fe0c <_ZSt12__miter_baseIPPfET_S2_>
 800f094:	4604      	mov	r4, r0
 800f096:	68b8      	ldr	r0, [r7, #8]
 800f098:	f000 feb8 	bl	800fe0c <_ZSt12__miter_baseIPPfET_S2_>
 800f09c:	4603      	mov	r3, r0
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f000 febd 	bl	800fe22 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 800f0a8:	4603      	mov	r3, r0
    }
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd90      	pop	{r4, r7, pc}

0800f0b2 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800f0b2:	b590      	push	{r4, r7, lr}
 800f0b4:	b085      	sub	sp, #20
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	60f8      	str	r0, [r7, #12]
 800f0ba:	60b9      	str	r1, [r7, #8]
 800f0bc:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f0be:	68f8      	ldr	r0, [r7, #12]
 800f0c0:	f000 fea4 	bl	800fe0c <_ZSt12__miter_baseIPPfET_S2_>
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	68b8      	ldr	r0, [r7, #8]
 800f0c8:	f000 fea0 	bl	800fe0c <_ZSt12__miter_baseIPPfET_S2_>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fec8 	bl	800fe68 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 800f0d8:	4603      	mov	r3, r0
    }
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3714      	adds	r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd90      	pop	{r4, r7, pc}

0800f0e2 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800f0e2:	b590      	push	{r4, r7, lr}
 800f0e4:	b08b      	sub	sp, #44	; 0x2c
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	60f8      	str	r0, [r7, #12]
 800f0ea:	60b9      	str	r1, [r7, #8]
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	695b      	ldr	r3, [r3, #20]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	109b      	asrs	r3, r3, #2
 800f0fc:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800f0fe:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	6a3a      	ldr	r2, [r7, #32]
 800f104:	4413      	add	r3, r2
 800f106:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	005b      	lsls	r3, r3, #1
 800f110:	429a      	cmp	r2, r3
 800f112:	d92d      	bls.n	800f170 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	1acb      	subs	r3, r1, r3
 800f120:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f122:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800f124:	79fb      	ldrb	r3, [r7, #7]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d002      	beq.n	800f130 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	e000      	b.n	800f132 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 800f130:	2300      	movs	r3, #0
 800f132:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800f134:	4413      	add	r3, r2
 800f136:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	695b      	ldr	r3, [r3, #20]
 800f13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13e:	429a      	cmp	r2, r3
 800f140:	d209      	bcs.n	800f156 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800f14a:	3304      	adds	r3, #4
 800f14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f14e:	4619      	mov	r1, r3
 800f150:	f7ff ff97 	bl	800f082 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 800f154:	e048      	b.n	800f1e8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f15e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800f160:	6a3b      	ldr	r3, [r7, #32]
 800f162:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800f164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f166:	4413      	add	r3, r2
 800f168:	461a      	mov	r2, r3
 800f16a:	f7ff ffa2 	bl	800f0b2 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 800f16e:	e03b      	b.n	800f1e8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	3304      	adds	r3, #4
 800f178:	f107 0208 	add.w	r2, r7, #8
 800f17c:	4611      	mov	r1, r2
 800f17e:	4618      	mov	r0, r3
 800f180:	f7f4 f96d 	bl	800345e <_ZSt3maxIjERKT_S2_S2_>
 800f184:	4603      	mov	r3, r0
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800f18a:	3302      	adds	r3, #2
 800f18c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	69b9      	ldr	r1, [r7, #24]
 800f192:	4618      	mov	r0, r3
 800f194:	f7fe fcc8 	bl	800db28 <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 800f198:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800f19a:	69ba      	ldr	r2, [r7, #24]
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	1ad3      	subs	r3, r2, r3
 800f1a0:	085b      	lsrs	r3, r3, #1
 800f1a2:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800f1a4:	79fb      	ldrb	r3, [r7, #7]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	e000      	b.n	800f1b2 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800f1b4:	697a      	ldr	r2, [r7, #20]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	f7ff ff5b 	bl	800f082 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6819      	ldr	r1, [r3, #0]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f7fd fcbc 	bl	800cb54 <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	697a      	ldr	r2, [r7, #20]
 800f1e0:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	3308      	adds	r3, #8
 800f1ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe fcd2 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f103 0018 	add.w	r0, r3, #24
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f200:	3b01      	subs	r3, #1
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f206:	4413      	add	r3, r2
 800f208:	4619      	mov	r1, r3
 800f20a:	f7fe fcc5 	bl	800db98 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 800f20e:	bf00      	nop
 800f210:	372c      	adds	r7, #44	; 0x2c
 800f212:	46bd      	mov	sp, r7
 800f214:	bd90      	pop	{r4, r7, pc}

0800f216 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f216:	b480      	push	{r7}
 800f218:	b085      	sub	sp, #20
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	60f8      	str	r0, [r7, #12]
 800f21e:	60b9      	str	r1, [r7, #8]
 800f220:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	1ad3      	subs	r3, r2, r3
    }
 800f228:	4618      	mov	r0, r3
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <_ZSt22__uninitialized_move_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800f234:	b590      	push	{r4, r7, lr}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
 800f240:	603b      	str	r3, [r7, #0]
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 fe40 	bl	800fec8 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800f248:	4604      	mov	r4, r0
 800f24a:	68b8      	ldr	r0, [r7, #8]
 800f24c:	f000 fe3c 	bl	800fec8 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>
 800f250:	4601      	mov	r1, r0
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	4620      	mov	r0, r4
 800f258:	f000 fe4b 	bl	800fef2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800f25c:	4603      	mov	r3, r0
    }
 800f25e:	4618      	mov	r0, r3
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	bd90      	pop	{r4, r7, pc}

0800f266 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 800f266:	b480      	push	{r7}
 800f268:	b083      	sub	sp, #12
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4618      	mov	r0, r3
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <_ZSt22__copy_move_backward_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f27c:	b5b0      	push	{r4, r5, r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f7fd fed6 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 800f28e:	4604      	mov	r4, r0
 800f290:	68b8      	ldr	r0, [r7, #8]
 800f292:	f7fd fed2 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 800f296:	4605      	mov	r5, r0
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fd fecd 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fe34 	bl	800ff14 <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	1d3b      	adds	r3, r7, #4
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fd fedc 	bl	800d070 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 800f2b8:	4603      	mov	r3, r0
    }
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bdb0      	pop	{r4, r5, r7, pc}

0800f2c2 <_ZSt13__copy_move_aILb0EPcN9__gnu_cxx17__normal_iteratorIS0_St6vectorIcSaIcEEEEET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800f2c2:	b5b0      	push	{r4, r5, r7, lr}
 800f2c4:	b084      	sub	sp, #16
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	60f8      	str	r0, [r7, #12]
 800f2ca:	60b9      	str	r1, [r7, #8]
 800f2cc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f7fd feb3 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	68b8      	ldr	r0, [r7, #8]
 800f2d8:	f7fd feaf 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 800f2dc:	4605      	mov	r5, r0
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 fe28 	bl	800ff34 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f000 fe30 	bl	800ff50 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fe3b 	bl	800ff70 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>
 800f2fa:	4603      	mov	r3, r0
    }
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bdb0      	pop	{r4, r5, r7, pc}

0800f304 <_ZSt7advanceIPcjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7fd f824 	bl	800c360 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 800f318:	4622      	mov	r2, r4
 800f31a:	68f9      	ldr	r1, [r7, #12]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fe3c 	bl	800ff9a <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>
    }
 800f322:	bf00      	nop
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	bd90      	pop	{r4, r7, pc}

0800f32a <_ZSt22__uninitialized_copy_aIPcS0_cET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b084      	sub	sp, #16
 800f32e:	af00      	add	r7, sp, #0
 800f330:	60f8      	str	r0, [r7, #12]
 800f332:	60b9      	str	r1, [r7, #8]
 800f334:	607a      	str	r2, [r7, #4]
 800f336:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	68b9      	ldr	r1, [r7, #8]
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f000 fe3e 	bl	800ffbe <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>
 800f342:	4603      	mov	r3, r0
 800f344:	4618      	mov	r0, r3
 800f346:	3710      	adds	r7, #16
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800f34c:	b590      	push	{r4, r7, lr}
 800f34e:	b087      	sub	sp, #28
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800f358:	68f8      	ldr	r0, [r7, #12]
 800f35a:	f000 fe42 	bl	800ffe2 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800f35e:	4604      	mov	r4, r0
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f7fc ff64 	bl	800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f366:	4603      	mov	r3, r0
 800f368:	1ae2      	subs	r2, r4, r3
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	bf34      	ite	cc
 800f370:	2301      	movcc	r3, #1
 800f372:	2300      	movcs	r3, #0
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f010 ffdc 	bl	8020338 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f7fc ff54 	bl	800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f386:	4604      	mov	r4, r0
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7fc ff50 	bl	800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f38e:	4603      	mov	r3, r0
 800f390:	613b      	str	r3, [r7, #16]
 800f392:	f107 0208 	add.w	r2, r7, #8
 800f396:	f107 0310 	add.w	r3, r7, #16
 800f39a:	4611      	mov	r1, r2
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f4 f85e 	bl	800345e <_ZSt3maxIjERKT_S2_S2_>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4423      	add	r3, r4
 800f3a8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7fc ff3f 	bl	800c22e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d306      	bcc.n	800f3c6 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7a>
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f000 fe12 	bl	800ffe2 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d904      	bls.n	800f3d0 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x84>
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f000 fe0b 	bl	800ffe2 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	e000      	b.n	800f3d2 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 800f3d0:	697b      	ldr	r3, [r7, #20]
      }
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	371c      	adds	r7, #28
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd90      	pop	{r4, r7, pc}

0800f3da <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800f3da:	b590      	push	{r4, r7, lr}
 800f3dc:	b085      	sub	sp, #20
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	60f8      	str	r0, [r7, #12]
 800f3e2:	60b9      	str	r1, [r7, #8]
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f000 fe0b 	bl	8010004 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	68b8      	ldr	r0, [r7, #8]
 800f3f2:	f000 fe07 	bl	8010004 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 800f3f6:	4601      	mov	r1, r0
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	687a      	ldr	r2, [r7, #4]
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f000 fd78 	bl	800fef2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 800f402:	4603      	mov	r3, r0
    }
 800f404:	4618      	mov	r0, r3
 800f406:	3714      	adds	r7, #20
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd90      	pop	{r4, r7, pc}

0800f40c <_ZSt4swapIbENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 fe03 	bl	8010022 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800f41c:	4603      	mov	r3, r0
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	73fb      	strb	r3, [r7, #15]
      __a = _GLIBCXX_MOVE(__b);
 800f422:	6838      	ldr	r0, [r7, #0]
 800f424:	f000 fdfd 	bl	8010022 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800f428:	4603      	mov	r3, r0
 800f42a:	781a      	ldrb	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	701a      	strb	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800f430:	f107 030f 	add.w	r3, r7, #15
 800f434:	4618      	mov	r0, r3
 800f436:	f000 fdf4 	bl	8010022 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>
 800f43a:	4603      	mov	r3, r0
 800f43c:	781a      	ldrb	r2, [r3, #0]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	701a      	strb	r2, [r3, #0]
    }
 800f442:	bf00      	nop
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800f44a:	b480      	push	{r7}
 800f44c:	b087      	sub	sp, #28
 800f44e:	af00      	add	r7, sp, #0
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	60b9      	str	r1, [r7, #8]
 800f454:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f456:	68ba      	ldr	r2, [r7, #8]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	617b      	str	r3, [r7, #20]
 800f45e:	e00c      	b.n	800f47a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x30>
	      *__result = *__first;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	701a      	strb	r2, [r3, #0]
	      ++__first;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	3301      	adds	r3, #1
 800f46c:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	3301      	adds	r3, #1
 800f472:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	3b01      	subs	r3, #1
 800f478:	617b      	str	r3, [r7, #20]
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dcef      	bgt.n	800f460 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x16>
	  return __result;
 800f480:	687b      	ldr	r3, [r7, #4]
	}
 800f482:	4618      	mov	r0, r3
 800f484:	371c      	adds	r7, #28
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr

0800f48e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f48e:	b580      	push	{r7, lr}
 800f490:	b086      	sub	sp, #24
 800f492:	af00      	add	r7, sp, #0
 800f494:	60f8      	str	r0, [r7, #12]
 800f496:	60b9      	str	r1, [r7, #8]
 800f498:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	1ad3      	subs	r3, r2, r3
 800f4a0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d005      	beq.n	800f4b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	68f9      	ldr	r1, [r7, #12]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f013 f8df 	bl	8022672 <memmove>
	  return __result + _Num;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	4413      	add	r3, r2
	}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3718      	adds	r7, #24
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f4c2:	b480      	push	{r7}
 800f4c4:	b083      	sub	sp, #12
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 800f4d8:	b480      	push	{r7}
 800f4da:	b085      	sub	sp, #20
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
	  { __t < __u } -> __boolean_testable;
	  { __u < __t } -> __boolean_testable;
	}
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d009      	beq.n	800f504 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2c>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d201      	bcs.n	800f500 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x28>
 800f4fc:	23ff      	movs	r3, #255	; 0xff
 800f4fe:	e002      	b.n	800f506 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800f500:	2301      	movs	r3, #1
 800f502:	e000      	b.n	800f506 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_+0x2e>
 800f504:	2300      	movs	r3, #0
	      else if (__u < __t)
		return weak_ordering::greater;
	      else
		return weak_ordering::equivalent;
	    }
	}
 800f506:	4618      	mov	r0, r3
 800f508:	3714      	adds	r7, #20
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
	...

0800f514 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>:
    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
 800f514:	b590      	push	{r4, r7, lr}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7f3 ff4d 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800f524:	4604      	mov	r4, r0
 800f526:	6838      	ldr	r0, [r7, #0]
 800f528:	f7f3 ff49 	bl	80033be <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 800f52c:	4603      	mov	r3, r0
 800f52e:	461a      	mov	r2, r3
 800f530:	4621      	mov	r1, r4
 800f532:	4804      	ldr	r0, [pc, #16]	; (800f544 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_+0x30>)
 800f534:	f7ff ffd0 	bl	800f4d8 <_ZNKSt8__detail10_Synth3wayclIPfS2_EEDaRKT_RKT0_>
 800f538:	4603      	mov	r3, r0
 800f53a:	4618      	mov	r0, r3
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd90      	pop	{r4, r7, pc}
 800f542:	bf00      	nop
 800f544:	08023de8 	.word	0x08023de8

0800f548 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800f548:	b590      	push	{r4, r7, lr}
 800f54a:	b087      	sub	sp, #28
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	607a      	str	r2, [r7, #4]
 800f554:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 800f556:	463b      	mov	r3, r7
 800f558:	461a      	mov	r2, r3
 800f55a:	68b9      	ldr	r1, [r7, #8]
 800f55c:	68f8      	ldr	r0, [r7, #12]
 800f55e:	f000 fd99 	bl	8010094 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	613b      	str	r3, [r7, #16]
 800f566:	e013      	b.n	800f590 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 800f568:	463b      	mov	r3, r7
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	6939      	ldr	r1, [r7, #16]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe ff53 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f574:	4603      	mov	r3, r0
 800f576:	2b00      	cmp	r3, #0
 800f578:	d005      	beq.n	800f586 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800f57a:	463b      	mov	r3, r7
 800f57c:	693a      	ldr	r2, [r7, #16]
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 fddd 	bl	8010140 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 800f586:	f107 0310 	add.w	r3, r7, #16
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe ff29 	bl	800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800f590:	1d3a      	adds	r2, r7, #4
 800f592:	f107 0310 	add.w	r3, r7, #16
 800f596:	4611      	mov	r1, r2
 800f598:	4618      	mov	r0, r3
 800f59a:	f7ff ffbb 	bl	800f514 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800f59e:	4604      	mov	r4, r0
 800f5a0:	f107 0314 	add.w	r3, r7, #20
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7f4 fc62 	bl	8003e70 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800f5ac:	7d39      	ldrb	r1, [r7, #20]
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f7f4 fc6a 	bl	8003e88 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1d6      	bne.n	800f568 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 800f5ba:	bf00      	nop
 800f5bc:	bf00      	nop
 800f5be:	371c      	adds	r7, #28
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd90      	pop	{r4, r7, pc}

0800f5c4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
	--_M_current;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	1f1a      	subs	r2, r3, #4
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	601a      	str	r2, [r3, #0]
	return *this;
 800f5d6:	687b      	ldr	r3, [r7, #4]
      }
 800f5d8:	4618      	mov	r0, r3
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800f5f0:	e00a      	b.n	800f608 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 800f5f2:	f107 0308 	add.w	r3, r7, #8
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff ffe4 	bl	800f5c4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f000 fd9c 	bl	8010140 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 800f608:	f107 020c 	add.w	r2, r7, #12
 800f60c:	f107 0308 	add.w	r3, r7, #8
 800f610:	4611      	mov	r1, r2
 800f612:	4618      	mov	r0, r3
 800f614:	f7f3 fe96 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	bfcc      	ite	gt
 800f61e:	2301      	movgt	r3, #1
 800f620:	2300      	movle	r3, #0
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e4      	bne.n	800f5f2 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 800f628:	bf00      	nop
 800f62a:	bf00      	nop
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800f632:	b580      	push	{r7, lr}
 800f634:	b084      	sub	sp, #16
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	425b      	negs	r3, r3
 800f646:	4413      	add	r3, r2
 800f648:	60fb      	str	r3, [r7, #12]
 800f64a:	f107 020c 	add.w	r2, r7, #12
 800f64e:	f107 0308 	add.w	r3, r7, #8
 800f652:	4611      	mov	r1, r2
 800f654:	4618      	mov	r0, r3
 800f656:	f7f3 fe0e 	bl	8003276 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	4618      	mov	r0, r3
 800f65e:	3710      	adds	r7, #16
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
 800f670:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	68b9      	ldr	r1, [r7, #8]
 800f676:	f107 0018 	add.w	r0, r7, #24
 800f67a:	f7fe fece 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d020      	beq.n	800f6c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	6879      	ldr	r1, [r7, #4]
 800f688:	f107 0018 	add.w	r0, r7, #24
 800f68c:	f7fe fec5 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d004      	beq.n	800f6a0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 800f696:	6879      	ldr	r1, [r7, #4]
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f000 fd91 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f69e:	e032      	b.n	800f706 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 800f6a0:	683a      	ldr	r2, [r7, #0]
 800f6a2:	68b9      	ldr	r1, [r7, #8]
 800f6a4:	f107 0018 	add.w	r0, r7, #24
 800f6a8:	f7fe feb7 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d004      	beq.n	800f6bc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f000 fd83 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f6ba:	e024      	b.n	800f706 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800f6bc:	68b9      	ldr	r1, [r7, #8]
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f000 fd7e 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f6c4:	e01f      	b.n	800f706 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 800f6c6:	683a      	ldr	r2, [r7, #0]
 800f6c8:	68b9      	ldr	r1, [r7, #8]
 800f6ca:	f107 0018 	add.w	r0, r7, #24
 800f6ce:	f7fe fea4 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d004      	beq.n	800f6e2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f000 fd70 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f6e0:	e011      	b.n	800f706 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	6879      	ldr	r1, [r7, #4]
 800f6e6:	f107 0018 	add.w	r0, r7, #24
 800f6ea:	f7fe fe96 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d004      	beq.n	800f6fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	f000 fd62 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f6fc:	e003      	b.n	800f706 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 800f6fe:	6879      	ldr	r1, [r7, #4]
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f000 fd5d 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 800f706:	bf00      	nop
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800f70e:	b590      	push	{r4, r7, lr}
 800f710:	b087      	sub	sp, #28
 800f712:	af00      	add	r7, sp, #0
 800f714:	60f8      	str	r0, [r7, #12]
 800f716:	60b9      	str	r1, [r7, #8]
 800f718:	607a      	str	r2, [r7, #4]
 800f71a:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800f71c:	e004      	b.n	800f728 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 800f71e:	f107 030c 	add.w	r3, r7, #12
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fe5d 	bl	800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800f728:	463b      	mov	r3, r7
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	68f9      	ldr	r1, [r7, #12]
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fe fe73 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1f1      	bne.n	800f71e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 800f73a:	f107 0308 	add.w	r3, r7, #8
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff ff40 	bl	800f5c4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800f744:	e004      	b.n	800f750 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 800f746:	f107 0308 	add.w	r3, r7, #8
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7ff ff3a 	bl	800f5c4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 800f750:	463b      	mov	r3, r7
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	6879      	ldr	r1, [r7, #4]
 800f756:	4618      	mov	r0, r3
 800f758:	f7fe fe5f 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d1f1      	bne.n	800f746 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 800f762:	f107 0208 	add.w	r2, r7, #8
 800f766:	f107 030c 	add.w	r3, r7, #12
 800f76a:	4611      	mov	r1, r2
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7ff fed1 	bl	800f514 <_ZN9__gnu_cxxssIPfSt6vectorIfSaIfEEEEDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS7_EEEERKNS_17__normal_iteratorIS6_T0_EESD_>
 800f772:	4604      	mov	r4, r0
 800f774:	f107 0314 	add.w	r3, r7, #20
 800f778:	2100      	movs	r1, #0
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7f4 fb78 	bl	8003e70 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 800f780:	7d39      	ldrb	r1, [r7, #20]
 800f782:	4620      	mov	r0, r4
 800f784:	f7f4 fb80 	bl	8003e88 <_ZStltSt15strong_orderingNSt9__cmp_cat8__unspecE>
 800f788:	4603      	mov	r3, r0
 800f78a:	f083 0301 	eor.w	r3, r3, #1
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b00      	cmp	r3, #0
 800f792:	d001      	beq.n	800f798 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x8a>
	    return __first;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	e009      	b.n	800f7ac <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x9e>
	  std::iter_swap(__first, __last);
 800f798:	68b9      	ldr	r1, [r7, #8]
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f000 fd10 	bl	80101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 800f7a0:	f107 030c 	add.w	r3, r7, #12
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fe1c 	bl	800e3e2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 800f7aa:	e7bd      	b.n	800f728 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	371c      	adds	r7, #28
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd90      	pop	{r4, r7, pc}

0800f7b4 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
    { return __it; }
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	370c      	adds	r7, #12
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c8:	4770      	bx	lr

0800f7ca <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800f7ca:	b5b0      	push	{r4, r5, r7, lr}
 800f7cc:	b084      	sub	sp, #16
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	60f8      	str	r0, [r7, #12]
 800f7d2:	60b9      	str	r1, [r7, #8]
 800f7d4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f7ff f897 	bl	800e90a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f7dc:	4604      	mov	r4, r0
 800f7de:	68b8      	ldr	r0, [r7, #8]
 800f7e0:	f7ff f893 	bl	800e90a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f7e4:	4605      	mov	r5, r0
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff f88f 	bl	800e90a <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4629      	mov	r1, r5
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f000 fcfb 	bl	80101ee <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7ff f8a2 	bl	800e946 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 800f802:	4603      	mov	r3, r0
    }
 800f804:	4618      	mov	r0, r3
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bdb0      	pop	{r4, r5, r7, pc}

0800f80c <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 800f80c:	b580      	push	{r7, lr}
 800f80e:	ed2d 8b02 	vpush	{d8}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	ed93 8a00 	vldr	s16, [r3]
 800f822:	1d3b      	adds	r3, r7, #4
 800f824:	4618      	mov	r0, r3
 800f826:	f7fe fdec 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f82a:	4603      	mov	r3, r0
 800f82c:	edd3 7a00 	vldr	s15, [r3]
 800f830:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f838:	bf4c      	ite	mi
 800f83a:	2301      	movmi	r3, #1
 800f83c:	2300      	movpl	r3, #0
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	4618      	mov	r0, r3
 800f842:	3710      	adds	r7, #16
 800f844:	46bd      	mov	sp, r7
 800f846:	ecbd 8b02 	vpop	{d8}
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800f84c:	b590      	push	{r4, r7, lr}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 800f856:	1d3b      	adds	r3, r7, #4
 800f858:	4618      	mov	r0, r3
 800f85a:	f7fe fdd2 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f85e:	4603      	mov	r3, r0
 800f860:	4618      	mov	r0, r3
 800f862:	f7fc fbcf 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f866:	4603      	mov	r3, r0
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	60bb      	str	r3, [r7, #8]
      --__next;
 800f870:	f107 0308 	add.w	r3, r7, #8
 800f874:	4618      	mov	r0, r3
 800f876:	f7ff fea5 	bl	800f5c4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800f87a:	e017      	b.n	800f8ac <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 800f87c:	f107 0308 	add.w	r3, r7, #8
 800f880:	4618      	mov	r0, r3
 800f882:	f7fe fdbe 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f886:	4603      	mov	r3, r0
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fc fbbb 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f88e:	4603      	mov	r3, r0
 800f890:	681c      	ldr	r4, [r3, #0]
 800f892:	1d3b      	adds	r3, r7, #4
 800f894:	4618      	mov	r0, r3
 800f896:	f7fe fdb4 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f89a:	4603      	mov	r3, r0
 800f89c:	601c      	str	r4, [r3, #0]
	  __last = __next;
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	607b      	str	r3, [r7, #4]
	  --__next;
 800f8a2:	f107 0308 	add.w	r3, r7, #8
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff fe8c 	bl	800f5c4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 800f8ac:	f107 010c 	add.w	r1, r7, #12
 800f8b0:	463b      	mov	r3, r7
 800f8b2:	68ba      	ldr	r2, [r7, #8]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff ffa9 	bl	800f80c <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1dd      	bne.n	800f87c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 800f8c0:	f107 030c 	add.w	r3, r7, #12
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7fc fb9d 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	681c      	ldr	r4, [r3, #0]
 800f8ce:	1d3b      	adds	r3, r7, #4
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fe fd96 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	601c      	str	r4, [r3, #0]
    }
 800f8da:	bf00      	nop
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd90      	pop	{r4, r7, pc}

0800f8e2 <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f8ec:	463b      	mov	r3, r7
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fe fe61 	bl	800e5b6 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}

0800f8fe <_ZN9__gnu_cxx5__ops12_Iter_negateIZN3jlb10Controller15lateral_controlEfEUlbE0_EC1ES4_>:
      _Iter_negate(_Predicate __pred)
 800f8fe:	b580      	push	{r7, lr}
 800f900:	b082      	sub	sp, #8
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
 800f906:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 800f908:	463b      	mov	r3, r7
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe ff12 	bl	800e734 <_ZSt4moveIRZN3jlb10Controller15lateral_controlEfEUlbE0_EONSt16remove_referenceIT_E4typeEOS5_>
      { }
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4618      	mov	r0, r3
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800f91a:	b480      	push	{r7}
 800f91c:	b083      	sub	sp, #12
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
 800f922:	6039      	str	r1, [r7, #0]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	370c      	adds	r7, #12
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr

0800f932 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800f932:	b590      	push	{r4, r7, lr}
 800f934:	b085      	sub	sp, #20
 800f936:	af00      	add	r7, sp, #0
 800f938:	60f8      	str	r0, [r7, #12]
 800f93a:	60b9      	str	r1, [r7, #8]
 800f93c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f7fd fcc7 	bl	800d2d2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800f944:	4604      	mov	r4, r0
 800f946:	68b8      	ldr	r0, [r7, #8]
 800f948:	f7fd fcc3 	bl	800d2d2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 800f94c:	4603      	mov	r3, r0
 800f94e:	687a      	ldr	r2, [r7, #4]
 800f950:	4619      	mov	r1, r3
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fc5b 	bl	801020e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800f958:	4603      	mov	r3, r0
    }
 800f95a:	4618      	mov	r0, r3
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd90      	pop	{r4, r7, pc}

0800f962 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800f962:	b480      	push	{r7}
 800f964:	b083      	sub	sp, #12
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	4618      	mov	r0, r3
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800f984:	f7f2 fdf2 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d006      	beq.n	800f99c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	68b9      	ldr	r1, [r7, #8]
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f000 fc5e 	bl	8010254 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 800f998:	4603      	mov	r3, r0
 800f99a:	e006      	b.n	800f9aa <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	68b9      	ldr	r1, [r7, #8]
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 f829 	bl	800f9f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	bf00      	nop
    }
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800f9b2:	b480      	push	{r7}
 800f9b4:	b087      	sub	sp, #28
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	60f8      	str	r0, [r7, #12]
 800f9ba:	60b9      	str	r1, [r7, #8]
 800f9bc:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f9be:	68ba      	ldr	r2, [r7, #8]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	109b      	asrs	r3, r3, #2
 800f9c6:	617b      	str	r3, [r7, #20]
 800f9c8:	e00c      	b.n	800f9e4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x32>
	      *__result = *__first;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	601a      	str	r2, [r3, #0]
	      ++__first;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	3b01      	subs	r3, #1
 800f9e2:	617b      	str	r3, [r7, #20]
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dcef      	bgt.n	800f9ca <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 800f9ea:	687b      	ldr	r3, [r7, #4]
	}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	371c      	adds	r7, #28
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b086      	sub	sp, #24
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	60f8      	str	r0, [r7, #12]
 800fa00:	60b9      	str	r1, [r7, #8]
 800fa02:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800fa04:	68ba      	ldr	r2, [r7, #8]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	109b      	asrs	r3, r3, #2
 800fa0c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d006      	beq.n	800fa22 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	461a      	mov	r2, r3
 800fa1a:	68f9      	ldr	r1, [r7, #12]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f012 fe28 	bl	8022672 <memmove>
	  return __result + _Num;
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	4413      	add	r3, r2
	}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3718      	adds	r7, #24
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b084      	sub	sp, #16
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	60f8      	str	r0, [r7, #12]
 800fa3a:	60b9      	str	r1, [r7, #8]
 800fa3c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	4613      	mov	r3, r2
 800fa42:	005b      	lsls	r3, r3, #1
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	4619      	mov	r1, r3
 800fa4a:	68b8      	ldr	r0, [r7, #8]
 800fa4c:	f010 fc58 	bl	8020300 <_ZdlPvj>
      }
 800fa50:	3710      	adds	r7, #16
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fa56:	b480      	push	{r7}
 800fa58:	b083      	sub	sp, #12
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <_ZSt8_DestroyIN3jlb4EdgeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f89b 	bl	800fbb0 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>
    }
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800fa82:	b590      	push	{r4, r7, lr}
 800fa84:	b085      	sub	sp, #20
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	60f8      	str	r0, [r7, #12]
 800fa8a:	60b9      	str	r1, [r7, #8]
 800fa8c:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800fa8e:	68f8      	ldr	r0, [r7, #12]
 800fa90:	f000 fc03 	bl	801029a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800fa94:	4604      	mov	r4, r0
 800fa96:	68b8      	ldr	r0, [r7, #8]
 800fa98:	f000 fbff 	bl	801029a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	4619      	mov	r1, r3
 800faa2:	4620      	mov	r0, r4
 800faa4:	f000 fc04 	bl	80102b0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>
 800faa8:	4603      	mov	r3, r0
    }
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd90      	pop	{r4, r7, pc}

0800fab2 <_ZSt8_DestroyIcEvPT_>:
    _Destroy(_Tp* __pointer)
 800fab2:	b580      	push	{r7, lr}
 800fab4:	b082      	sub	sp, #8
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fc1b 	bl	80102f6 <_ZSt10destroy_atIcEvPT_>
    }
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <_ZSt4moveIRNSt12_Vector_baseIcSaIcEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	4618      	mov	r0, r3
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr

0800fade <_ZNSt12_Vector_baseIcSaIcEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800fade:	b480      	push	{r7}
 800fae0:	b083      	sub	sp, #12
 800fae2:	af00      	add	r7, sp, #0
 800fae4:	6078      	str	r0, [r7, #4]
 800fae6:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	689a      	ldr	r2, [r3, #8]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	2200      	movs	r2, #0
 800fb04:	609a      	str	r2, [r3, #8]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	689a      	ldr	r2, [r3, #8]
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	605a      	str	r2, [r3, #4]
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	601a      	str	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 f87f 	bl	800fc32 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>
 800fb34:	4603      	mov	r3, r0
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 fbf6 	bl	8010328 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	6039      	str	r1, [r7, #0]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	60fb      	str	r3, [r7, #12]
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800fb58:	f7f2 fd08 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d009      	beq.n	800fb76 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	4613      	mov	r3, r2
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	4413      	add	r3, r2
 800fb6a:	00db      	lsls	r3, r3, #3
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f010 fbc9 	bl	8020304 <_Znwj>
 800fb72:	4603      	mov	r3, r0
 800fb74:	e006      	b.n	800fb84 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800fb76:	2200      	movs	r2, #0
 800fb78:	68b9      	ldr	r1, [r7, #8]
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f000 fe9a 	bl	80108b4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>
 800fb80:	4603      	mov	r3, r0
 800fb82:	bf00      	nop
      { return __a.allocate(__n); }
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	68b9      	ldr	r1, [r7, #8]
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f000 fbdd 	bl	8010360 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 800fba6:	4603      	mov	r3, r0
      }
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <_ZSt10destroy_atIN3jlb4EdgeEEvPT_>:
    destroy_at(_Tp* __location)
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f7f5 f8bc 	bl	8004d36 <_ZN3jlb4EdgeD1Ev>
    }
 800fbbe:	bf00      	nop
 800fbc0:	3708      	adds	r7, #8
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}

0800fbc6 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800fbc6:	b580      	push	{r7, lr}
 800fbc8:	b084      	sub	sp, #16
 800fbca:	af00      	add	r7, sp, #0
 800fbcc:	60f8      	str	r0, [r7, #12]
 800fbce:	60b9      	str	r1, [r7, #8]
 800fbd0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	005b      	lsls	r3, r3, #1
 800fbd8:	4413      	add	r3, r2
 800fbda:	00db      	lsls	r3, r3, #3
 800fbdc:	4619      	mov	r1, r3
 800fbde:	68b8      	ldr	r0, [r7, #8]
 800fbe0:	f010 fb8e 	bl	8020300 <_ZdlPvj>
      }
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800fbea:	b480      	push	{r7}
 800fbec:	b083      	sub	sp, #12
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <_ZSt8_DestroyIN3jlb4NodeEEvPT_>:
    _Destroy(_Tp* __pointer)
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f8ca 	bl	800fda2 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>
    }
 800fc0e:	bf00      	nop
 800fc10:	3708      	adds	r7, #8
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <_ZN9__gnu_cxx14__alloc_traitsISaIN3jlb4EdgeEES2_E17_S_select_on_copyERKS3_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b082      	sub	sp, #8
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
 800fc1e:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6839      	ldr	r1, [r7, #0]
 800fc24:	4618      	mov	r0, r3
 800fc26:	f000 fbb8 	bl	801039a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <_ZNKSt12_Vector_baseIN3jlb4EdgeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800fc32:	b480      	push	{r7}
 800fc34:	b083      	sub	sp, #12
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EEC1EjRKS2_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6879      	ldr	r1, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f000 fbab 	bl	80103b4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>
      { _M_create_storage(__n); }
 800fc5e:	68b9      	ldr	r1, [r7, #8]
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f000 fbb9 	bl	80103d8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	f107 030c 	add.w	r3, r7, #12
 800fc7e:	4611      	mov	r1, r2
 800fc80:	4618      	mov	r0, r3
 800fc82:	f000 fbc7 	bl	8010414 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <_ZNKSt6vectorIN3jlb4EdgeESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	1d1a      	adds	r2, r3, #4
 800fc9c:	f107 030c 	add.w	r3, r7, #12
 800fca0:	4611      	mov	r1, r2
 800fca2:	4618      	mov	r0, r3
 800fca4:	f000 fbb6 	bl	8010414 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3710      	adds	r7, #16
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b084      	sub	sp, #16
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	60f8      	str	r0, [r7, #12]
 800fcba:	60b9      	str	r1, [r7, #8]
 800fcbc:	607a      	str	r2, [r7, #4]
 800fcbe:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	68b9      	ldr	r1, [r7, #8]
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f000 fbb5 	bl	8010434 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>
 800fcca:	4603      	mov	r3, r0
 800fccc:	4618      	mov	r0, r3
 800fcce:	3710      	adds	r7, #16
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f000 fbe4 	bl	80104ac <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>
 800fce4:	4603      	mov	r3, r0
 800fce6:	4618      	mov	r0, r3
 800fce8:	f000 fbc4 	bl	8010474 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>
 800fcec:	4603      	mov	r3, r0
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	1ad3      	subs	r3, r2, r3
 800fd0a:	10db      	asrs	r3, r3, #3
 800fd0c:	4a04      	ldr	r2, [pc, #16]	; (800fd20 <_ZNKSt6vectorIN3jlb4NodeESaIS1_EE4sizeEv+0x28>)
 800fd0e:	fb02 f303 	mul.w	r3, r2, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	370c      	adds	r7, #12
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	aaaaaaab 	.word	0xaaaaaaab

0800fd24 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	60fb      	str	r3, [r7, #12]
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800fd36:	f7f2 fc19 	bl	800256c <_ZSt21is_constant_evaluatedv>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d009      	beq.n	800fd54 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	4613      	mov	r3, r2
 800fd44:	005b      	lsls	r3, r3, #1
 800fd46:	4413      	add	r3, r2
 800fd48:	00db      	lsls	r3, r3, #3
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f010 fada 	bl	8020304 <_Znwj>
 800fd50:	4603      	mov	r3, r0
 800fd52:	e006      	b.n	800fd62 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8allocateERS2_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800fd54:	2200      	movs	r2, #0
 800fd56:	68b9      	ldr	r1, [r7, #8]
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f000 fe77 	bl	8010a4c <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	bf00      	nop
      { return __a.allocate(__n); }
 800fd62:	4618      	mov	r0, r3
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <_ZSt32__make_move_if_noexcept_iteratorIN3jlb4NodeEPKS1_ET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800fd6a:	b480      	push	{r7}
 800fd6c:	b083      	sub	sp, #12
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4618      	mov	r0, r3
 800fd76:	370c      	adds	r7, #12
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <_ZSt22__uninitialized_copy_aIPKN3jlb4NodeEPS1_S1_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
 800fd8c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	68b9      	ldr	r1, [r7, #8]
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f000 fb95 	bl	80104c2 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <_ZSt10destroy_atIN3jlb4NodeEEvPT_>:
    destroy_at(_Tp* __location)
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b082      	sub	sp, #8
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7f4 ffb5 	bl	8004d1a <_ZN3jlb4NodeD1Ev>
    }
 800fdb0:	bf00      	nop
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKcPcEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	68b9      	ldr	r1, [r7, #8]
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f7fb fcee 	bl	800b7aa <_ZSt4copyIPKcPcET0_T_S4_S3_>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4618      	mov	r0, r3
 800fde4:	370c      	adds	r7, #12
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b084      	sub	sp, #16
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	60f8      	str	r0, [r7, #12]
 800fdf6:	60b9      	str	r1, [r7, #8]
 800fdf8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	4619      	mov	r1, r3
 800fe00:	68b8      	ldr	r0, [r7, #8]
 800fe02:	f010 fa7d 	bl	8020300 <_ZdlPvj>
      }
 800fe06:	3710      	adds	r7, #16
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <_ZSt12__miter_baseIPPfET_S2_>:
    __miter_base(_Iterator __it)
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
    { return __it; }
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	4618      	mov	r0, r3
 800fe18:	370c      	adds	r7, #12
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr

0800fe22 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800fe22:	b5b0      	push	{r4, r5, r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	60f8      	str	r0, [r7, #12]
 800fe2a:	60b9      	str	r1, [r7, #8]
 800fe2c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f000 fb8f 	bl	8010552 <_ZSt12__niter_baseIPPfET_S2_>
 800fe34:	4604      	mov	r4, r0
 800fe36:	68b8      	ldr	r0, [r7, #8]
 800fe38:	f000 fb8b 	bl	8010552 <_ZSt12__niter_baseIPPfET_S2_>
 800fe3c:	4605      	mov	r5, r0
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f000 fb86 	bl	8010552 <_ZSt12__niter_baseIPPfET_S2_>
 800fe46:	4603      	mov	r3, r0
 800fe48:	461a      	mov	r2, r3
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f000 fb8b 	bl	8010568 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800fe52:	4602      	mov	r2, r0
 800fe54:	1d3b      	adds	r3, r7, #4
 800fe56:	4611      	mov	r1, r2
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f000 fb95 	bl	8010588 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800fe5e:	4603      	mov	r3, r0
    }
 800fe60:	4618      	mov	r0, r3
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bdb0      	pop	{r4, r5, r7, pc}

0800fe68 <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800fe68:	b5b0      	push	{r4, r5, r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 fb6c 	bl	8010552 <_ZSt12__niter_baseIPPfET_S2_>
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	68b8      	ldr	r0, [r7, #8]
 800fe7e:	f000 fb68 	bl	8010552 <_ZSt12__niter_baseIPPfET_S2_>
 800fe82:	4605      	mov	r5, r0
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f000 fb63 	bl	8010552 <_ZSt12__niter_baseIPPfET_S2_>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4629      	mov	r1, r5
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 fb84 	bl	80105a0 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	1d3b      	adds	r3, r7, #4
 800fe9c:	4611      	mov	r1, r2
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f000 fb72 	bl	8010588 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800fea4:	4603      	mov	r3, r0
    }
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bdb0      	pop	{r4, r5, r7, pc}

0800feae <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800feae:	b580      	push	{r7, lr}
 800feb0:	b084      	sub	sp, #16
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	60f8      	str	r0, [r7, #12]
 800feb6:	60b9      	str	r1, [r7, #8]
 800feb8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800feba:	6879      	ldr	r1, [r7, #4]
 800febc:	68b8      	ldr	r0, [r7, #8]
 800febe:	f010 fa1f 	bl	8020300 <_ZdlPvj>
      }
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ZSt18make_move_iteratorIPcESt13move_iteratorIT_ES2_>:
    make_move_iterator(_Iterator __i)
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
    { return move_iterator<_Iterator>(std::move(__i)); }
 800fed0:	1d3b      	adds	r3, r7, #4
 800fed2:	4618      	mov	r0, r3
 800fed4:	f000 fb74 	bl	80105c0 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 800fed8:	4603      	mov	r3, r0
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	f107 030c 	add.w	r3, r7, #12
 800fee0:	4611      	mov	r1, r2
 800fee2:	4618      	mov	r0, r3
 800fee4:	f000 fb77 	bl	80105d6 <_ZNSt13move_iteratorIPcEC1ES0_>
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	4618      	mov	r0, r3
 800feec:	3710      	adds	r7, #16
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b084      	sub	sp, #16
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	60f8      	str	r0, [r7, #12]
 800fefa:	60b9      	str	r1, [r7, #8]
 800fefc:	607a      	str	r2, [r7, #4]
 800fefe:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	68b9      	ldr	r1, [r7, #8]
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f000 fb78 	bl	80105fa <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3710      	adds	r7, #16
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <_ZSt23__copy_move_backward_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	68b9      	ldr	r1, [r7, #8]
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	f000 fb7a 	bl	801061e <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3710      	adds	r7, #16
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800ff3c:	1d3b      	adds	r3, r7, #4
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7f8 fe87 	bl	8008c52 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800ff44:	4603      	mov	r3, r0
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3708      	adds	r7, #8
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	68b9      	ldr	r1, [r7, #8]
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f000 fb79 	bl	8010658 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>
 800ff66:	4603      	mov	r3, r0
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f7ff ffda 	bl	800ff34 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800ff80:	4602      	mov	r2, r0
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	1a9a      	subs	r2, r3, r2
 800ff86:	1d3b      	adds	r3, r7, #4
 800ff88:	4611      	mov	r1, r2
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fc fff0 	bl	800cf70 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800ff90:	4603      	mov	r3, r0
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <_ZSt9__advanceIPciEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800ff9a:	b480      	push	{r7}
 800ff9c:	b085      	sub	sp, #20
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	60b9      	str	r1, [r7, #8]
 800ffa4:	713a      	strb	r2, [r7, #4]
	__i += __n;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	441a      	add	r2, r3
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	601a      	str	r2, [r3, #0]
    }
 800ffb2:	bf00      	nop
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <_ZSt18uninitialized_copyIPcS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b086      	sub	sp, #24
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	60f8      	str	r0, [r7, #12]
 800ffc6:	60b9      	str	r1, [r7, #8]
 800ffc8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	68b9      	ldr	r1, [r7, #8]
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	f000 fb5d 	bl	8010692 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>
 800ffd8:	4603      	mov	r3, r0
    }
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fc fb79 	bl	800c6e4 <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800fff2:	4603      	mov	r3, r0
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe ffaf 	bl	800ef58 <_ZNSt6vectorIcSaIcEE11_S_max_sizeERKS0_>
 800fffa:	4603      	mov	r3, r0
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	f000 fadf 	bl	80105d6 <_ZNSt13move_iteratorIPcEC1ES0_>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <_ZSt4moveIRbEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4618      	mov	r0, r3
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010040:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7ff ffeb 	bl	8010038 <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 8010062:	4602      	mov	r2, r0
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	4293      	cmp	r3, r2
 8010068:	bf8c      	ite	hi
 801006a:	2301      	movhi	r3, #1
 801006c:	2300      	movls	r3, #0
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2b00      	cmp	r3, #0
 8010072:	bf14      	ite	ne
 8010074:	2301      	movne	r3, #1
 8010076:	2300      	moveq	r3, #0
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 801007e:	f010 f955 	bl	802032c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010082:	68b8      	ldr	r0, [r7, #8]
 8010084:	f010 f93e 	bl	8020304 <_Znwj>
 8010088:	4603      	mov	r3, r0
 801008a:	bf00      	nop
      }
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8010094:	b590      	push	{r4, r7, lr}
 8010096:	b089      	sub	sp, #36	; 0x24
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 80100a0:	f107 020c 	add.w	r2, r7, #12
 80100a4:	f107 0308 	add.w	r3, r7, #8
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7f3 f94a 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	bfd4      	ite	le
 80100b6:	2301      	movle	r3, #1
 80100b8:	2300      	movgt	r3, #0
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d139      	bne.n	8010134 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 80100c0:	f107 020c 	add.w	r2, r7, #12
 80100c4:	f107 0308 	add.w	r3, r7, #8
 80100c8:	4611      	mov	r1, r2
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7f3 f93a 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80100d0:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	3b02      	subs	r3, #2
 80100d6:	0fda      	lsrs	r2, r3, #31
 80100d8:	4413      	add	r3, r2
 80100da:	105b      	asrs	r3, r3, #1
 80100dc:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 80100de:	f107 030c 	add.w	r3, r7, #12
 80100e2:	69f9      	ldr	r1, [r7, #28]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe f964 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80100ea:	4603      	mov	r3, r0
 80100ec:	617b      	str	r3, [r7, #20]
 80100ee:	f107 0314 	add.w	r3, r7, #20
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fe f985 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80100f8:	4603      	mov	r3, r0
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fb ff82 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010100:	4603      	mov	r3, r0
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8010106:	f107 0310 	add.w	r3, r7, #16
 801010a:	4618      	mov	r0, r3
 801010c:	f7fb ff7a 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010110:	4603      	mov	r3, r0
 8010112:	edd3 7a00 	vldr	s15, [r3]
 8010116:	4623      	mov	r3, r4
 8010118:	eeb0 0a67 	vmov.f32	s0, s15
 801011c:	69ba      	ldr	r2, [r7, #24]
 801011e:	69f9      	ldr	r1, [r7, #28]
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f000 fac6 	bl	80106b2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d005      	beq.n	8010138 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	3b01      	subs	r3, #1
 8010130:	61fb      	str	r3, [r7, #28]
      while (true)
 8010132:	e7d4      	b.n	80100de <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 8010134:	bf00      	nop
 8010136:	e000      	b.n	801013a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8010138:	bf00      	nop
    }
 801013a:	3724      	adds	r7, #36	; 0x24
 801013c:	46bd      	mov	sp, r7
 801013e:	bd90      	pop	{r4, r7, pc}

08010140 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8010140:	b5b0      	push	{r4, r5, r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 801014e:	1d3b      	adds	r3, r7, #4
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe f956 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010156:	4603      	mov	r3, r0
 8010158:	4618      	mov	r0, r3
 801015a:	f7fb ff53 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801015e:	4603      	mov	r3, r0
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8010164:	f107 030c 	add.w	r3, r7, #12
 8010168:	4618      	mov	r0, r3
 801016a:	f7fe f94a 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801016e:	4603      	mov	r3, r0
 8010170:	4618      	mov	r0, r3
 8010172:	f7fb ff47 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010176:	4603      	mov	r3, r0
 8010178:	681c      	ldr	r4, [r3, #0]
 801017a:	1d3b      	adds	r3, r7, #4
 801017c:	4618      	mov	r0, r3
 801017e:	f7fe f940 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010182:	4603      	mov	r3, r0
 8010184:	601c      	str	r4, [r3, #0]
			 _DistanceType(__last - __first),
 8010186:	f107 020c 	add.w	r2, r7, #12
 801018a:	f107 0308 	add.w	r3, r7, #8
 801018e:	4611      	mov	r1, r2
 8010190:	4618      	mov	r0, r3
 8010192:	f7f3 f8d7 	bl	8003344 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8010196:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8010198:	f107 0314 	add.w	r3, r7, #20
 801019c:	4618      	mov	r0, r3
 801019e:	f7fb ff31 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80101a2:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 80101a4:	edd3 7a00 	vldr	s15, [r3]
 80101a8:	462b      	mov	r3, r5
 80101aa:	eeb0 0a67 	vmov.f32	s0, s15
 80101ae:	4622      	mov	r2, r4
 80101b0:	2100      	movs	r1, #0
 80101b2:	68f8      	ldr	r0, [r7, #12]
 80101b4:	f000 fa7d 	bl	80106b2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 80101b8:	bf00      	nop
 80101ba:	3718      	adds	r7, #24
 80101bc:	46bd      	mov	sp, r7
 80101be:	bdb0      	pop	{r4, r5, r7, pc}

080101c0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80101c0:	b590      	push	{r4, r7, lr}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80101ca:	1d3b      	adds	r3, r7, #4
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fe f918 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80101d2:	4604      	mov	r4, r0
 80101d4:	463b      	mov	r3, r7
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe f913 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80101dc:	4603      	mov	r3, r0
 80101de:	4619      	mov	r1, r3
 80101e0:	4620      	mov	r0, r4
 80101e2:	f000 fb0e 	bl	8010802 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 80101e6:	bf00      	nop
 80101e8:	370c      	adds	r7, #12
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd90      	pop	{r4, r7, pc}

080101ee <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b084      	sub	sp, #16
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	60f8      	str	r0, [r7, #12]
 80101f6:	60b9      	str	r1, [r7, #8]
 80101f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	68b9      	ldr	r1, [r7, #8]
 80101fe:	68f8      	ldr	r0, [r7, #12]
 8010200:	f000 fb1e 	bl	8010840 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 8010204:	4603      	mov	r3, r0
 8010206:	4618      	mov	r0, r3
 8010208:	3710      	adds	r7, #16
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801020e:	b5b0      	push	{r4, r5, r7, lr}
 8010210:	b084      	sub	sp, #16
 8010212:	af00      	add	r7, sp, #0
 8010214:	60f8      	str	r0, [r7, #12]
 8010216:	60b9      	str	r1, [r7, #8]
 8010218:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f7fe fb67 	bl	800e8ee <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010220:	4604      	mov	r4, r0
 8010222:	68b8      	ldr	r0, [r7, #8]
 8010224:	f7fe fb63 	bl	800e8ee <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8010228:	4605      	mov	r5, r0
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f7f3 fa23 	bl	8003678 <_ZSt12__niter_baseIPfET_S1_>
 8010232:	4603      	mov	r3, r0
 8010234:	461a      	mov	r2, r3
 8010236:	4629      	mov	r1, r5
 8010238:	4620      	mov	r0, r4
 801023a:	f7fe fb74 	bl	800e926 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 801023e:	4602      	mov	r2, r0
 8010240:	1d3b      	adds	r3, r7, #4
 8010242:	4611      	mov	r1, r2
 8010244:	4618      	mov	r0, r3
 8010246:	f7fd f896 	bl	800d376 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 801024a:	4603      	mov	r3, r0
    }
 801024c:	4618      	mov	r0, r3
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bdb0      	pop	{r4, r5, r7, pc}

08010254 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010254:	b480      	push	{r7}
 8010256:	b087      	sub	sp, #28
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	1ad3      	subs	r3, r2, r3
 8010266:	109b      	asrs	r3, r3, #2
 8010268:	617b      	str	r3, [r7, #20]
 801026a:	e00c      	b.n	8010286 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	601a      	str	r2, [r3, #0]
	      ++__first;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	3304      	adds	r3, #4
 8010278:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	3304      	adds	r3, #4
 801027e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	3b01      	subs	r3, #1
 8010284:	617b      	str	r3, [r7, #20]
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b00      	cmp	r3, #0
 801028a:	dcef      	bgt.n	801026c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 801028c:	687b      	ldr	r3, [r7, #4]
	}
 801028e:	4618      	mov	r0, r3
 8010290:	371c      	adds	r7, #28
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEET_S8_>:
    __miter_base(_Iterator __it)
 801029a:	b480      	push	{r7}
 801029c:	b083      	sub	sp, #12
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	4618      	mov	r0, r3
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEEPcET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80102b0:	b5b0      	push	{r4, r5, r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f000 fadc 	bl	801087a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80102c2:	4604      	mov	r4, r0
 80102c4:	68b8      	ldr	r0, [r7, #8]
 80102c6:	f000 fad8 	bl	801087a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80102ca:	4605      	mov	r5, r0
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fc feb3 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 80102d4:	4603      	mov	r3, r0
 80102d6:	461a      	mov	r2, r3
 80102d8:	4629      	mov	r1, r5
 80102da:	4620      	mov	r0, r4
 80102dc:	f7fc feb8 	bl	800d050 <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 80102e0:	4602      	mov	r2, r0
 80102e2:	1d3b      	adds	r3, r7, #4
 80102e4:	4611      	mov	r1, r2
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fc fec2 	bl	800d070 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80102ec:	4603      	mov	r3, r0
    }
 80102ee:	4618      	mov	r0, r3
 80102f0:	3710      	adds	r7, #16
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bdb0      	pop	{r4, r5, r7, pc}

080102f6 <_ZSt10destroy_atIcEvPT_>:
    destroy_at(_Tp* __location)
 80102f6:	b480      	push	{r7}
 80102f8:	b083      	sub	sp, #12
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
    }
 80102fe:	bf00      	nop
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr
	...

0801030c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8010314:	4b03      	ldr	r3, [pc, #12]	; (8010324 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_+0x18>)
      }
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	0aaaaaaa 	.word	0x0aaaaaaa

08010328 <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8010330:	4b0a      	ldr	r3, [pc, #40]	; (801035c <_ZNSt6vectorIN3jlb4EdgeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 8010332:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff ffe9 	bl	801030c <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE8max_sizeERKS2_>
 801033a:	4603      	mov	r3, r0
 801033c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801033e:	f107 0208 	add.w	r2, r7, #8
 8010342:	f107 030c 	add.w	r3, r7, #12
 8010346:	4611      	mov	r1, r2
 8010348:	4618      	mov	r0, r3
 801034a:	f7f3 f94b 	bl	80035e4 <_ZSt3minIjERKT_S2_S2_>
 801034e:	4603      	mov	r3, r0
 8010350:	681b      	ldr	r3, [r3, #0]
      }
 8010352:	4618      	mov	r0, r3
 8010354:	3710      	adds	r7, #16
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	05555555 	.word	0x05555555

08010360 <_ZSt12__relocate_aIPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8010360:	b5b0      	push	{r4, r5, r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	60f8      	str	r0, [r7, #12]
 8010368:	60b9      	str	r1, [r7, #8]
 801036a:	607a      	str	r2, [r7, #4]
 801036c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f000 fad0 	bl	8010914 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010374:	4604      	mov	r4, r0
 8010376:	68b8      	ldr	r0, [r7, #8]
 8010378:	f000 facc 	bl	8010914 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 801037c:	4605      	mov	r5, r0
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 fac8 	bl	8010914 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>
 8010384:	4602      	mov	r2, r0
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	4629      	mov	r1, r5
 801038a:	4620      	mov	r0, r4
 801038c:	f000 facd 	bl	801092a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>
 8010390:	4603      	mov	r3, r0
    }
 8010392:	4618      	mov	r0, r3
 8010394:	3710      	adds	r7, #16
 8010396:	46bd      	mov	sp, r7
 8010398:	bdb0      	pop	{r4, r5, r7, pc}

0801039a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE37select_on_container_copy_constructionERKS2_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 801039a:	b580      	push	{r7, lr}
 801039c:	b082      	sub	sp, #8
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80103a4:	6839      	ldr	r1, [r7, #0]
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 fae5 	bl	8010976 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE12_Vector_implC1ERKS2_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80103be:	6839      	ldr	r1, [r7, #0]
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fad8 	bl	8010976 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fc f93d 	bl	800c648 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	3708      	adds	r7, #8
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80103e2:	6839      	ldr	r1, [r7, #0]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7fe fc0d 	bl	800ec04 <_ZNSt12_Vector_baseIN3jlb4EdgeESaIS1_EE11_M_allocateEj>
 80103ea:	4602      	mov	r2, r0
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6819      	ldr	r1, [r3, #0]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	4613      	mov	r3, r2
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	4413      	add	r3, r2
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	18ca      	adds	r2, r1, r3
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	609a      	str	r2, [r3, #8]
      }
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	601a      	str	r2, [r3, #0]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	4618      	mov	r0, r3
 801042a:	370c      	adds	r7, #12
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr

08010434 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010440:	2301      	movs	r3, #1
 8010442:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	68b9      	ldr	r1, [r7, #8]
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f000 fabe 	bl	80109ca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>
 801044e:	4603      	mov	r3, r0
    }
 8010450:	4618      	mov	r0, r3
 8010452:	3718      	adds	r7, #24
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8010460:	4b03      	ldr	r3, [pc, #12]	; (8010470 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_+0x18>)
      }
 8010462:	4618      	mov	r0, r3
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	0aaaaaaa 	.word	0x0aaaaaaa

08010474 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801047c:	4b0a      	ldr	r3, [pc, #40]	; (80104a8 <_ZNSt6vectorIN3jlb4NodeESaIS1_EE11_S_max_sizeERKS2_+0x34>)
 801047e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f7ff ffe9 	bl	8010458 <_ZNSt16allocator_traitsISaIN3jlb4NodeEEE8max_sizeERKS2_>
 8010486:	4603      	mov	r3, r0
 8010488:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801048a:	f107 0208 	add.w	r2, r7, #8
 801048e:	f107 030c 	add.w	r3, r7, #12
 8010492:	4611      	mov	r1, r2
 8010494:	4618      	mov	r0, r3
 8010496:	f7f3 f8a5 	bl	80035e4 <_ZSt3minIjERKT_S2_S2_>
 801049a:	4603      	mov	r3, r0
 801049c:	681b      	ldr	r3, [r3, #0]
      }
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	05555555 	.word	0x05555555

080104ac <_ZNKSt12_Vector_baseIN3jlb4NodeESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	4618      	mov	r0, r3
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr

080104c2 <_ZSt18uninitialized_copyIPKN3jlb4NodeEPS1_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b086      	sub	sp, #24
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	60f8      	str	r0, [r7, #12]
 80104ca:	60b9      	str	r1, [r7, #8]
 80104cc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80104ce:	2301      	movs	r3, #1
 80104d0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	68b9      	ldr	r1, [r7, #8]
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f000 fae8 	bl	8010aac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>
 80104dc:	4603      	mov	r3, r0
    }
 80104de:	4618      	mov	r0, r3
 80104e0:	3718      	adds	r7, #24
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80104e6:	b480      	push	{r7}
 80104e8:	b083      	sub	sp, #12
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80104ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80104f2:	4618      	mov	r0, r3
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80104fe:	b580      	push	{r7, lr}
 8010500:	b084      	sub	sp, #16
 8010502:	af00      	add	r7, sp, #0
 8010504:	60f8      	str	r0, [r7, #12]
 8010506:	60b9      	str	r1, [r7, #8]
 8010508:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f7ff ffeb 	bl	80104e6 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 8010510:	4602      	mov	r2, r0
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	4293      	cmp	r3, r2
 8010516:	bf8c      	ite	hi
 8010518:	2301      	movhi	r3, #1
 801051a:	2300      	movls	r3, #0
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	bf14      	ite	ne
 8010522:	2301      	movne	r3, #1
 8010524:	2300      	moveq	r3, #0
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d007      	beq.n	801053c <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010532:	d301      	bcc.n	8010538 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8010534:	f00f fefd 	bl	8020332 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8010538:	f00f fef8 	bl	802032c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	4618      	mov	r0, r3
 8010542:	f00f fedf 	bl	8020304 <_Znwj>
 8010546:	4603      	mov	r3, r0
 8010548:	bf00      	nop
      }
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 8010552:	b480      	push	{r7}
 8010554:	b083      	sub	sp, #12
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
    { return __it; }
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	60f8      	str	r0, [r7, #12]
 8010570:	60b9      	str	r1, [r7, #8]
 8010572:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	68b9      	ldr	r1, [r7, #8]
 8010578:	68f8      	ldr	r0, [r7, #12]
 801057a:	f000 fab7 	bl	8010aec <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 801057e:	4603      	mov	r3, r0
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
    { return __res; }
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	4618      	mov	r0, r3
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	68b9      	ldr	r1, [r7, #8]
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	f000 fab8 	bl	8010b26 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 80105b6:	4603      	mov	r3, r0
 80105b8:	4618      	mov	r0, r3
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	4618      	mov	r0, r3
 80105cc:	370c      	adds	r7, #12
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr

080105d6 <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b082      	sub	sp, #8
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80105e0:	463b      	mov	r3, r7
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7ff ffec 	bl	80105c0 <_ZSt4moveIRPcEONSt16remove_referenceIT_E4typeEOS3_>
 80105e8:	4603      	mov	r3, r0
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b086      	sub	sp, #24
 80105fe:	af00      	add	r7, sp, #0
 8010600:	60f8      	str	r0, [r7, #12]
 8010602:	60b9      	str	r1, [r7, #8]
 8010604:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8010606:	2301      	movs	r3, #1
 8010608:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	68b9      	ldr	r1, [r7, #8]
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f000 faa6 	bl	8010b60 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 8010614:	4603      	mov	r3, r0
    }
 8010616:	4618      	mov	r0, r3
 8010618:	3718      	adds	r7, #24
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}

0801061e <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801061e:	b580      	push	{r7, lr}
 8010620:	b084      	sub	sp, #16
 8010622:	af00      	add	r7, sp, #0
 8010624:	60f8      	str	r0, [r7, #12]
 8010626:	60b9      	str	r1, [r7, #8]
 8010628:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801062a:	f7f1 ff9f 	bl	800256c <_ZSt21is_constant_evaluatedv>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	68b9      	ldr	r1, [r7, #8]
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f000 faa1 	bl	8010b80 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>
 801063e:	4603      	mov	r3, r0
 8010640:	e006      	b.n	8010650 <_ZSt23__copy_move_backward_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	68b9      	ldr	r1, [r7, #8]
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f000 fabd 	bl	8010bc6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 801064c:	4603      	mov	r3, r0
								 __result);
 801064e:	bf00      	nop
    }
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010664:	f7f1 ff82 	bl	800256c <_ZSt21is_constant_evaluatedv>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d006      	beq.n	801067c <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	68b9      	ldr	r1, [r7, #8]
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f000 fac5 	bl	8010c02 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 8010678:	4603      	mov	r3, r0
 801067a:	e006      	b.n	801068a <_ZSt14__copy_move_a2ILb0EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	68b9      	ldr	r1, [r7, #8]
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f7fe ff04 	bl	800f48e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8010686:	4603      	mov	r3, r0
 8010688:	bf00      	nop
    }
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPcS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	60f8      	str	r0, [r7, #12]
 801069a:	60b9      	str	r1, [r7, #8]
 801069c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 facf 	bl	8010c46 <_ZSt4copyIPcS0_ET0_T_S2_S1_>
 80106a8:	4603      	mov	r3, r0
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80106b2:	b590      	push	{r4, r7, lr}
 80106b4:	b08f      	sub	sp, #60	; 0x3c
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6178      	str	r0, [r7, #20]
 80106ba:	6139      	str	r1, [r7, #16]
 80106bc:	60fa      	str	r2, [r7, #12]
 80106be:	ed87 0a02 	vstr	s0, [r7, #8]
 80106c2:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 80106cc:	e042      	b.n	8010754 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 80106ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d0:	3301      	adds	r3, #1
 80106d2:	005b      	lsls	r3, r3, #1
 80106d4:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 80106d6:	f107 0314 	add.w	r3, r7, #20
 80106da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fd fe68 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80106e2:	4604      	mov	r4, r0
 80106e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e6:	1e5a      	subs	r2, r3, #1
 80106e8:	f107 0314 	add.w	r3, r7, #20
 80106ec:	4611      	mov	r1, r2
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fd fe5f 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80106f4:	4602      	mov	r2, r0
 80106f6:	1d3b      	adds	r3, r7, #4
 80106f8:	4621      	mov	r1, r4
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7fd fe8d 	bl	800e41a <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8010706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010708:	3b01      	subs	r3, #1
 801070a:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 801070c:	f107 0314 	add.w	r3, r7, #20
 8010710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010712:	4618      	mov	r0, r3
 8010714:	f7fd fe4d 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010718:	4603      	mov	r3, r0
 801071a:	623b      	str	r3, [r7, #32]
 801071c:	f107 0320 	add.w	r3, r7, #32
 8010720:	4618      	mov	r0, r3
 8010722:	f7fd fe6e 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010726:	4603      	mov	r3, r0
 8010728:	4618      	mov	r0, r3
 801072a:	f7fb fc6b 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801072e:	4603      	mov	r3, r0
 8010730:	681c      	ldr	r4, [r3, #0]
 8010732:	f107 0314 	add.w	r3, r7, #20
 8010736:	6939      	ldr	r1, [r7, #16]
 8010738:	4618      	mov	r0, r3
 801073a:	f7fd fe3a 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801073e:	4603      	mov	r3, r0
 8010740:	627b      	str	r3, [r7, #36]	; 0x24
 8010742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010746:	4618      	mov	r0, r3
 8010748:	f7fd fe5b 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 801074c:	4603      	mov	r3, r0
 801074e:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild;
 8010750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010752:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	3b01      	subs	r3, #1
 8010758:	0fda      	lsrs	r2, r3, #31
 801075a:	4413      	add	r3, r2
 801075c:	105b      	asrs	r3, r3, #1
 801075e:	461a      	mov	r2, r3
 8010760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010762:	4293      	cmp	r3, r2
 8010764:	dbb3      	blt.n	80106ce <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f003 0301 	and.w	r3, r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	d133      	bne.n	80107d8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3b02      	subs	r3, #2
 8010774:	0fda      	lsrs	r2, r3, #31
 8010776:	4413      	add	r3, r2
 8010778:	105b      	asrs	r3, r3, #1
 801077a:	461a      	mov	r2, r3
 801077c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077e:	4293      	cmp	r3, r2
 8010780:	d12a      	bne.n	80107d8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8010782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010784:	3301      	adds	r3, #1
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 801078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078c:	1e5a      	subs	r2, r3, #1
 801078e:	f107 0314 	add.w	r3, r7, #20
 8010792:	4611      	mov	r1, r2
 8010794:	4618      	mov	r0, r3
 8010796:	f7fd fe0c 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 801079a:	4603      	mov	r3, r0
 801079c:	62bb      	str	r3, [r7, #40]	; 0x28
 801079e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fd fe2d 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80107a8:	4603      	mov	r3, r0
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fb fc2a 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80107b0:	4603      	mov	r3, r0
 80107b2:	681c      	ldr	r4, [r3, #0]
 80107b4:	f107 0314 	add.w	r3, r7, #20
 80107b8:	6939      	ldr	r1, [r7, #16]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fd fdf9 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 80107c0:	4603      	mov	r3, r0
 80107c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fd fe1a 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 80107ce:	4603      	mov	r3, r0
 80107d0:	601c      	str	r4, [r3, #0]
	  __holeIndex = __secondChild - 1;
 80107d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d4:	3b01      	subs	r3, #1
 80107d6:	613b      	str	r3, [r7, #16]
		       _GLIBCXX_MOVE(__value), __cmp);
 80107d8:	f107 0308 	add.w	r3, r7, #8
 80107dc:	4618      	mov	r0, r3
 80107de:	f7fb fc11 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80107e2:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 80107e4:	edd3 7a00 	vldr	s15, [r3]
 80107e8:	f107 031c 	add.w	r3, r7, #28
 80107ec:	eeb0 0a67 	vmov.f32	s0, s15
 80107f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107f2:	6939      	ldr	r1, [r7, #16]
 80107f4:	6978      	ldr	r0, [r7, #20]
 80107f6:	f000 fa5b 	bl	8010cb0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 80107fa:	bf00      	nop
 80107fc:	373c      	adds	r7, #60	; 0x3c
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd90      	pop	{r4, r7, pc}

08010802 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7fb fbf9 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010812:	4603      	mov	r3, r0
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010818:	6838      	ldr	r0, [r7, #0]
 801081a:	f7fb fbf3 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 801081e:	4603      	mov	r3, r0
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010826:	f107 030c 	add.w	r3, r7, #12
 801082a:	4618      	mov	r0, r3
 801082c:	f7fb fbea 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010830:	4603      	mov	r3, r0
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	601a      	str	r2, [r3, #0]
    }
 8010838:	bf00      	nop
 801083a:	3710      	adds	r7, #16
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801084c:	f7f1 fe8e 	bl	800256c <_ZSt21is_constant_evaluatedv>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d006      	beq.n	8010864 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x24>
	  __copy_move_b(__first, __last, __result);
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	68b9      	ldr	r1, [r7, #8]
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f000 fa95 	bl	8010d8a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>
 8010860:	4603      	mov	r3, r0
 8010862:	e006      	b.n	8010872 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_+0x32>
				       _Category>::__copy_move_b(__first,
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	68b9      	ldr	r1, [r7, #8]
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f000 fab2 	bl	8010dd2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 801086e:	4603      	mov	r3, r0
								 __result);
 8010870:	bf00      	nop
    }
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <_ZSt12__niter_baseIPKcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801087a:	b580      	push	{r7, lr}
 801087c:	b082      	sub	sp, #8
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8010882:	1d3b      	adds	r3, r7, #4
 8010884:	4618      	mov	r0, r3
 8010886:	f7fd fb9d 	bl	800dfc4 <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 801088a:	4603      	mov	r3, r0
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4618      	mov	r0, r3
 8010890:	3708      	adds	r7, #8
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
	...

08010898 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80108a0:	4b03      	ldr	r3, [pc, #12]	; (80108b0 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv+0x18>)
      }
 80108a2:	4618      	mov	r0, r3
 80108a4:	370c      	adds	r7, #12
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop
 80108b0:	05555555 	.word	0x05555555

080108b4 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f7ff ffe9 	bl	8010898 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4EdgeEE11_M_max_sizeEv>
 80108c6:	4602      	mov	r2, r0
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	4293      	cmp	r3, r2
 80108cc:	bf8c      	ite	hi
 80108ce:	2301      	movhi	r3, #1
 80108d0:	2300      	movls	r3, #0
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	bf14      	ite	ne
 80108d8:	2301      	movne	r3, #1
 80108da:	2300      	moveq	r3, #0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d007      	beq.n	80108f2 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	4a0a      	ldr	r2, [pc, #40]	; (8010910 <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x5c>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d901      	bls.n	80108ee <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80108ea:	f00f fd22 	bl	8020332 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80108ee:	f00f fd1d 	bl	802032c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	4613      	mov	r3, r2
 80108f6:	005b      	lsls	r3, r3, #1
 80108f8:	4413      	add	r3, r2
 80108fa:	00db      	lsls	r3, r3, #3
 80108fc:	4618      	mov	r0, r3
 80108fe:	f00f fd01 	bl	8020304 <_Znwj>
 8010902:	4603      	mov	r3, r0
 8010904:	bf00      	nop
      }
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	0aaaaaaa 	.word	0x0aaaaaaa

08010914 <_ZSt12__niter_baseIPN3jlb4EdgeEET_S3_>:
    __niter_base(_Iterator __it)
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4618      	mov	r0, r3
 8010920:	370c      	adds	r7, #12
 8010922:	46bd      	mov	sp, r7
 8010924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010928:	4770      	bx	lr

0801092a <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801092a:	b590      	push	{r4, r7, lr}
 801092c:	b087      	sub	sp, #28
 801092e:	af00      	add	r7, sp, #0
 8010930:	60f8      	str	r0, [r7, #12]
 8010932:	60b9      	str	r1, [r7, #8]
 8010934:	607a      	str	r2, [r7, #4]
 8010936:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 801093c:	e012      	b.n	8010964 <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 801093e:	6978      	ldr	r0, [r7, #20]
 8010940:	f7ff f889 	bl	800fa56 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8010944:	4604      	mov	r4, r0
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f7ff f885 	bl	800fa56 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 801094c:	4603      	mov	r3, r0
 801094e:	683a      	ldr	r2, [r7, #0]
 8010950:	4619      	mov	r1, r3
 8010952:	4620      	mov	r0, r4
 8010954:	f000 fa5f 	bl	8010e16 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3318      	adds	r3, #24
 801095c:	60fb      	str	r3, [r7, #12]
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	3318      	adds	r3, #24
 8010962:	617b      	str	r3, [r7, #20]
 8010964:	68fa      	ldr	r2, [r7, #12]
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	429a      	cmp	r2, r3
 801096a:	d1e8      	bne.n	801093e <_ZSt14__relocate_a_1IPN3jlb4EdgeES2_SaIS1_EET0_T_S5_S4_RT1_+0x14>
      return __cur;
 801096c:	697b      	ldr	r3, [r7, #20]
    }
 801096e:	4618      	mov	r0, r3
 8010970:	371c      	adds	r7, #28
 8010972:	46bd      	mov	sp, r7
 8010974:	bd90      	pop	{r4, r7, pc}

08010976 <_ZNSaIN3jlb4EdgeEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8010976:	b580      	push	{r7, lr}
 8010978:	b082      	sub	sp, #8
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fa62 	bl	8010e4c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	3708      	adds	r7, #8
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}

08010992 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010992:	b480      	push	{r7}
 8010994:	b083      	sub	sp, #12
 8010996:	af00      	add	r7, sp, #0
 8010998:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4618      	mov	r0, r3
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
	++_M_current;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f103 0218 	add.w	r2, r3, #24
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	601a      	str	r2, [r3, #0]
	return *this;
 80109bc:	687b      	ldr	r3, [r7, #4]
      }
 80109be:	4618      	mov	r0, r3
 80109c0:	370c      	adds	r7, #12
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr

080109ca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80109ca:	b590      	push	{r4, r7, lr}
 80109cc:	b087      	sub	sp, #28
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	60f8      	str	r0, [r7, #12]
 80109d2:	60b9      	str	r1, [r7, #8]
 80109d4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80109da:	e015      	b.n	8010a08 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 80109dc:	6978      	ldr	r0, [r7, #20]
 80109de:	f7ff f83a 	bl	800fa56 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 80109e2:	4604      	mov	r4, r0
 80109e4:	f107 030c 	add.w	r3, r7, #12
 80109e8:	4618      	mov	r0, r3
 80109ea:	f000 fa53 	bl	8010e94 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>
 80109ee:	4603      	mov	r3, r0
 80109f0:	4619      	mov	r1, r3
 80109f2:	4620      	mov	r0, r4
 80109f4:	f000 fa79 	bl	8010eea <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80109f8:	f107 030c 	add.w	r3, r7, #12
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7ff ffd3 	bl	80109a8 <_ZN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEppEv>
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	3318      	adds	r3, #24
 8010a06:	617b      	str	r3, [r7, #20]
 8010a08:	f107 0208 	add.w	r2, r7, #8
 8010a0c:	f107 030c 	add.w	r3, r7, #12
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 fa26 	bl	8010e64 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	f083 0301 	eor.w	r3, r3, #1
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d1db      	bne.n	80109dc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_+0x12>
	      return __cur;
 8010a24:	697b      	ldr	r3, [r7, #20]
	}
 8010a26:	4618      	mov	r0, r3
 8010a28:	371c      	adds	r7, #28
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd90      	pop	{r4, r7, pc}
	...

08010a30 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010a38:	4b03      	ldr	r3, [pc, #12]	; (8010a48 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv+0x18>)
      }
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop
 8010a48:	05555555 	.word	0x05555555

08010a4c <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7ff ffe9 	bl	8010a30 <_ZNK9__gnu_cxx13new_allocatorIN3jlb4NodeEE11_M_max_sizeEv>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	4293      	cmp	r3, r2
 8010a64:	bf8c      	ite	hi
 8010a66:	2301      	movhi	r3, #1
 8010a68:	2300      	movls	r3, #0
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	bf14      	ite	ne
 8010a70:	2301      	movne	r3, #1
 8010a72:	2300      	moveq	r3, #0
 8010a74:	b2db      	uxtb	r3, r3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d007      	beq.n	8010a8a <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	4a0a      	ldr	r2, [pc, #40]	; (8010aa8 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x5c>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d901      	bls.n	8010a86 <_ZN9__gnu_cxx13new_allocatorIN3jlb4NodeEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8010a82:	f00f fc56 	bl	8020332 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8010a86:	f00f fc51 	bl	802032c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	4618      	mov	r0, r3
 8010a96:	f00f fc35 	bl	8020304 <_Znwj>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	bf00      	nop
      }
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	0aaaaaaa 	.word	0x0aaaaaaa

08010aac <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8010abc:	e00d      	b.n	8010ada <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x2e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8010abe:	6978      	ldr	r0, [r7, #20]
 8010ac0:	f7ff f893 	bl	800fbea <_ZSt11__addressofIN3jlb4NodeEEPT_RS2_>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	68f9      	ldr	r1, [r7, #12]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f000 fa24 	bl	8010f16 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	3318      	adds	r3, #24
 8010ad2:	60fb      	str	r3, [r7, #12]
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	3318      	adds	r3, #24
 8010ad8:	617b      	str	r3, [r7, #20]
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d1ed      	bne.n	8010abe <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKN3jlb4NodeEPS3_EET0_T_S8_S7_+0x12>
	      return __cur;
 8010ae2:	697b      	ldr	r3, [r7, #20]
	}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3718      	adds	r7, #24
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010af8:	f7f1 fd38 	bl	800256c <_ZSt21is_constant_evaluatedv>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d006      	beq.n	8010b10 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_m(__first, __last, __result);
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	68b9      	ldr	r1, [r7, #8]
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f000 fa1b 	bl	8010f42 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	e006      	b.n	8010b1e <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	68b9      	ldr	r1, [r7, #8]
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f000 fa37 	bl	8010f88 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	bf00      	nop
    }
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b084      	sub	sp, #16
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	60f8      	str	r0, [r7, #12]
 8010b2e:	60b9      	str	r1, [r7, #8]
 8010b30:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8010b32:	f7f1 fd1b 	bl	800256c <_ZSt21is_constant_evaluatedv>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d006      	beq.n	8010b4a <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x24>
	  __copy_move_b(__first, __last, __result);
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	68b9      	ldr	r1, [r7, #8]
 8010b40:	68f8      	ldr	r0, [r7, #12]
 8010b42:	f000 fa3e 	bl	8010fc2 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>
 8010b46:	4603      	mov	r3, r0
 8010b48:	e006      	b.n	8010b58 <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_+0x32>
				       _Category>::__copy_move_b(__first,
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	68b9      	ldr	r1, [r7, #8]
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 fa5a 	bl	8011008 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 8010b54:	4603      	mov	r3, r0
								 __result);
 8010b56:	bf00      	nop
    }
 8010b58:	4618      	mov	r0, r3
 8010b5a:	3710      	adds	r7, #16
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	68b9      	ldr	r1, [r7, #8]
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f000 fa6b 	bl	801104c <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8010b76:	4603      	mov	r3, r0
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3710      	adds	r7, #16
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}

08010b80 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8010b94:	e00f      	b.n	8010bb6 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x36>
	    *--__result = std::move(*--__last);
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	3b01      	subs	r3, #1
 8010b9a:	60bb      	str	r3, [r7, #8]
 8010b9c:	68b8      	ldr	r0, [r7, #8]
 8010b9e:	f000 fa6d 	bl	801107c <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	781a      	ldrb	r2, [r3, #0]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	607b      	str	r3, [r7, #4]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	617b      	str	r3, [r7, #20]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	dcec      	bgt.n	8010b96 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8010bbc:	687b      	ldr	r3, [r7, #4]
	}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3718      	adds	r7, #24
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b086      	sub	sp, #24
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	60b9      	str	r1, [r7, #8]
 8010bd0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d008      	beq.n	8010bf2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	425b      	negs	r3, r3
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	4413      	add	r3, r2
 8010be8:	697a      	ldr	r2, [r7, #20]
 8010bea:	68f9      	ldr	r1, [r7, #12]
 8010bec:	4618      	mov	r0, r3
 8010bee:	f011 fd40 	bl	8022672 <memmove>
	  return __result - _Num;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	425b      	negs	r3, r3
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	4413      	add	r3, r2
	}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3718      	adds	r7, #24
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010c02:	b480      	push	{r7}
 8010c04:	b087      	sub	sp, #28
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	60f8      	str	r0, [r7, #12]
 8010c0a:	60b9      	str	r1, [r7, #8]
 8010c0c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	1ad3      	subs	r3, r2, r3
 8010c14:	617b      	str	r3, [r7, #20]
 8010c16:	e00c      	b.n	8010c32 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	781a      	ldrb	r2, [r3, #0]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	3301      	adds	r3, #1
 8010c24:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	617b      	str	r3, [r7, #20]
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	dcef      	bgt.n	8010c18 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8010c38:	687b      	ldr	r3, [r7, #4]
	}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	371c      	adds	r7, #28
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c44:	4770      	bx	lr

08010c46 <_ZSt4copyIPcS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8010c46:	b590      	push	{r4, r7, lr}
 8010c48:	b085      	sub	sp, #20
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	60f8      	str	r0, [r7, #12]
 8010c4e:	60b9      	str	r1, [r7, #8]
 8010c50:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f7fe fb07 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 8010c58:	4604      	mov	r4, r0
 8010c5a:	68b8      	ldr	r0, [r7, #8]
 8010c5c:	f7fe fb03 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 8010c60:	4603      	mov	r3, r0
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	4619      	mov	r1, r3
 8010c66:	4620      	mov	r0, r4
 8010c68:	f000 fa13 	bl	8011092 <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>
 8010c6c:	4603      	mov	r3, r0
    }
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd90      	pop	{r4, r7, pc}

08010c76 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8010c76:	b580      	push	{r7, lr}
 8010c78:	b084      	sub	sp, #16
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	60f8      	str	r0, [r7, #12]
 8010c7e:	60b9      	str	r1, [r7, #8]
 8010c80:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8010c82:	f107 0308 	add.w	r3, r7, #8
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fd fbbb 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	ed93 7a00 	vldr	s14, [r3]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	edd3 7a00 	vldr	s15, [r3]
 8010c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca0:	bf4c      	ite	mi
 8010ca2:	2301      	movmi	r3, #1
 8010ca4:	2300      	movpl	r3, #0
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3710      	adds	r7, #16
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8010cb0:	b590      	push	{r4, r7, lr}
 8010cb2:	b08b      	sub	sp, #44	; 0x2c
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6178      	str	r0, [r7, #20]
 8010cb8:	6139      	str	r1, [r7, #16]
 8010cba:	60fa      	str	r2, [r7, #12]
 8010cbc:	ed87 0a02 	vstr	s0, [r7, #8]
 8010cc0:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	3b01      	subs	r3, #1
 8010cc6:	0fda      	lsrs	r2, r3, #31
 8010cc8:	4413      	add	r3, r2
 8010cca:	105b      	asrs	r3, r3, #1
 8010ccc:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8010cce:	e029      	b.n	8010d24 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8010cd0:	f107 0314 	add.w	r3, r7, #20
 8010cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fd fb6b 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	61bb      	str	r3, [r7, #24]
 8010ce0:	f107 0318 	add.w	r3, r7, #24
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fd fb8c 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010cea:	4603      	mov	r3, r0
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7fb f989 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	681c      	ldr	r4, [r3, #0]
 8010cf6:	f107 0314 	add.w	r3, r7, #20
 8010cfa:	6939      	ldr	r1, [r7, #16]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fd fb58 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d02:	4603      	mov	r3, r0
 8010d04:	61fb      	str	r3, [r7, #28]
 8010d06:	f107 031c 	add.w	r3, r7, #28
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f7fd fb79 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d10:	4603      	mov	r3, r0
 8010d12:	601c      	str	r4, [r3, #0]
	  __holeIndex = __parent;
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	0fda      	lsrs	r2, r3, #31
 8010d1e:	4413      	add	r3, r2
 8010d20:	105b      	asrs	r3, r3, #1
 8010d22:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8010d24:	693a      	ldr	r2, [r7, #16]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	dd11      	ble.n	8010d50 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8010d2c:	f107 0314 	add.w	r3, r7, #20
 8010d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fd fb3d 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d38:	4601      	mov	r1, r0
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	461a      	mov	r2, r3
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff ff98 	bl	8010c76 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d001      	beq.n	8010d50 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e000      	b.n	8010d52 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 8010d50:	2300      	movs	r3, #0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d1bc      	bne.n	8010cd0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8010d56:	f107 0308 	add.w	r3, r7, #8
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f7fb f952 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010d60:	4603      	mov	r3, r0
 8010d62:	681c      	ldr	r4, [r3, #0]
 8010d64:	f107 0314 	add.w	r3, r7, #20
 8010d68:	6939      	ldr	r1, [r7, #16]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fd fb21 	bl	800e3b2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8010d70:	4603      	mov	r3, r0
 8010d72:	623b      	str	r3, [r7, #32]
 8010d74:	f107 0320 	add.w	r3, r7, #32
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fd fb42 	bl	800e402 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	601c      	str	r4, [r3, #0]
    }
 8010d82:	bf00      	nop
 8010d84:	372c      	adds	r7, #44	; 0x2c
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd90      	pop	{r4, r7, pc}

08010d8a <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b086      	sub	sp, #24
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8010d96:	68ba      	ldr	r2, [r7, #8]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	109b      	asrs	r3, r3, #2
 8010d9e:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8010da0:	e00f      	b.n	8010dc2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x38>
	    *--__result = std::move(*--__last);
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	3b04      	subs	r3, #4
 8010da6:	60bb      	str	r3, [r7, #8]
 8010da8:	68b8      	ldr	r0, [r7, #8]
 8010daa:	f7fb f92b 	bl	800c004 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8010dae:	4603      	mov	r3, r0
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	3b04      	subs	r3, #4
 8010db6:	607b      	str	r3, [r7, #4]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	617b      	str	r3, [r7, #20]
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	dcec      	bgt.n	8010da2 <_ZNSt20__copy_move_backwardILb1ELb0ESt26random_access_iterator_tagE13__copy_move_bIPfS3_EET0_T_S5_S4_+0x18>
	  return __result;
 8010dc8:	687b      	ldr	r3, [r7, #4]
	}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b086      	sub	sp, #24
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	60f8      	str	r0, [r7, #12]
 8010dda:	60b9      	str	r1, [r7, #8]
 8010ddc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	109b      	asrs	r3, r3, #2
 8010de6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d00a      	beq.n	8010e04 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	425b      	negs	r3, r3
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	18d0      	adds	r0, r2, r3
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	68f9      	ldr	r1, [r7, #12]
 8010e00:	f011 fc37 	bl	8022672 <memmove>
	  return __result - _Num;
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	425b      	negs	r3, r3
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	4413      	add	r3, r2
	}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3718      	adds	r7, #24
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <_ZSt19__relocate_object_aIN3jlb4EdgeES1_SaIS1_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b084      	sub	sp, #16
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	60f8      	str	r0, [r7, #12]
 8010e1e:	60b9      	str	r1, [r7, #8]
 8010e20:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8010e22:	68b8      	ldr	r0, [r7, #8]
 8010e24:	f7fb fcc8 	bl	800c7b8 <_ZSt4moveIRN3jlb4EdgeEEONSt16remove_referenceIT_E4typeEOS4_>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	68f9      	ldr	r1, [r7, #12]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7fc fbd2 	bl	800d5d8 <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8010e34:	68b8      	ldr	r0, [r7, #8]
 8010e36:	f7fe fe0e 	bl	800fa56 <_ZSt11__addressofIN3jlb4EdgeEEPT_RS2_>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f7fd ff13 	bl	800ec6a <_ZNSt16allocator_traitsISaIN3jlb4EdgeEEE7destroyIS1_EEvRS2_PT_>
    }
 8010e44:	bf00      	nop
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <_ZN9__gnu_cxx13new_allocatorIN3jlb4EdgeEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8010e4c:	b480      	push	{r7}
 8010e4e:	b083      	sub	sp, #12
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	370c      	adds	r7, #12
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr

08010e64 <_ZN9__gnu_cxxeqIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010e64:	b590      	push	{r4, r7, lr}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f7ff fd8f 	bl	8010992 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8010e74:	4603      	mov	r3, r0
 8010e76:	681c      	ldr	r4, [r3, #0]
 8010e78:	6838      	ldr	r0, [r7, #0]
 8010e7a:	f7ff fd8a 	bl	8010992 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEE4baseEv>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	429c      	cmp	r4, r3
 8010e84:	bf0c      	ite	eq
 8010e86:	2301      	moveq	r3, #1
 8010e88:	2300      	movne	r3, #0
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd90      	pop	{r4, r7, pc}

08010e94 <_ZNK9__gnu_cxx17__normal_iteratorIPKN3jlb4EdgeESt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr

08010eac <_ZN3jlb4EdgeC1ERKS0_>:
    struct Edge
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b082      	sub	sp, #8
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	781a      	ldrb	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	701a      	strb	r2, [r3, #0]
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	685a      	ldr	r2, [r3, #4]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	605a      	str	r2, [r3, #4]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f103 0208 	add.w	r2, r3, #8
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	3308      	adds	r3, #8
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	4610      	mov	r0, r2
 8010ed4:	f7fa febb 	bl	800bc4e <_ZNSt6vectorIcSaIcEEC1ERKS1_>
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	695a      	ldr	r2, [r3, #20]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	615a      	str	r2, [r3, #20]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <_ZSt10_ConstructIN3jlb4EdgeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8010eea:	b590      	push	{r4, r7, lr}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
 8010ef2:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8010ef4:	6838      	ldr	r0, [r7, #0]
 8010ef6:	f000 f8ef 	bl	80110d8 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010efa:	4604      	mov	r4, r0
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	4619      	mov	r1, r3
 8010f00:	2018      	movs	r0, #24
 8010f02:	f7f1 fb3b 	bl	800257c <_ZnwjPv>
 8010f06:	4603      	mov	r3, r0
 8010f08:	4621      	mov	r1, r4
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7ff ffce 	bl	8010eac <_ZN3jlb4EdgeC1ERKS0_>
    }
 8010f10:	370c      	adds	r7, #12
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd90      	pop	{r4, r7, pc}

08010f16 <_ZSt10_ConstructIN3jlb4NodeEJRKS1_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8010f16:	b590      	push	{r4, r7, lr}
 8010f18:	b083      	sub	sp, #12
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
 8010f1e:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8010f20:	6838      	ldr	r0, [r7, #0]
 8010f22:	f000 f8e4 	bl	80110ee <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f26:	4604      	mov	r4, r0
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	2018      	movs	r0, #24
 8010f2e:	f7f1 fb25 	bl	800257c <_ZnwjPv>
 8010f32:	4603      	mov	r3, r0
 8010f34:	4621      	mov	r1, r4
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fc fc62 	bl	800d800 <_ZN3jlb4NodeC1ERKS0_>
    }
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd90      	pop	{r4, r7, pc}

08010f42 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8010f42:	b480      	push	{r7}
 8010f44:	b087      	sub	sp, #28
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60f8      	str	r0, [r7, #12]
 8010f4a:	60b9      	str	r1, [r7, #8]
 8010f4c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010f4e:	68ba      	ldr	r2, [r7, #8]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	109b      	asrs	r3, r3, #2
 8010f56:	617b      	str	r3, [r7, #20]
 8010f58:	e00c      	b.n	8010f74 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x32>
	      *__result = *__first;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	601a      	str	r2, [r3, #0]
	      ++__first;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	3304      	adds	r3, #4
 8010f66:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	3b01      	subs	r3, #1
 8010f72:	617b      	str	r3, [r7, #20]
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	dcef      	bgt.n	8010f5a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 8010f7a:	687b      	ldr	r3, [r7, #4]
	}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	371c      	adds	r7, #28
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8010f94:	68ba      	ldr	r2, [r7, #8]
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	109b      	asrs	r3, r3, #2
 8010f9c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d006      	beq.n	8010fb2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	009b      	lsls	r3, r3, #2
 8010fa8:	461a      	mov	r2, r3
 8010faa:	68f9      	ldr	r1, [r7, #12]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f011 fb60 	bl	8022672 <memmove>
	  return __result + _Num;
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	4413      	add	r3, r2
	}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3718      	adds	r7, #24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8010fc2:	b480      	push	{r7}
 8010fc4:	b087      	sub	sp, #28
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	60f8      	str	r0, [r7, #12]
 8010fca:	60b9      	str	r1, [r7, #8]
 8010fcc:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	109b      	asrs	r3, r3, #2
 8010fd6:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8010fd8:	e00c      	b.n	8010ff4 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x32>
	    *--__result = *--__last;
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	3b04      	subs	r3, #4
 8010fde:	60bb      	str	r3, [r7, #8]
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3b04      	subs	r3, #4
 8010fe8:	607b      	str	r3, [r7, #4]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	3b01      	subs	r3, #1
 8010ff2:	617b      	str	r3, [r7, #20]
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dcef      	bgt.n	8010fda <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPfS4_EET0_T_S6_S5_+0x18>
	  return __result;
 8010ffa:	687b      	ldr	r3, [r7, #4]
	}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	371c      	adds	r7, #28
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011008:	b580      	push	{r7, lr}
 801100a:	b086      	sub	sp, #24
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011014:	68ba      	ldr	r2, [r7, #8]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	109b      	asrs	r3, r3, #2
 801101c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00a      	beq.n	801103a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	425b      	negs	r3, r3
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	18d0      	adds	r0, r2, r3
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	009b      	lsls	r3, r3, #2
 8011032:	461a      	mov	r2, r3
 8011034:	68f9      	ldr	r1, [r7, #12]
 8011036:	f011 fb1c 	bl	8022672 <memmove>
	  return __result - _Num;
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	425b      	negs	r3, r3
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	4413      	add	r3, r2
	}
 8011044:	4618      	mov	r0, r3
 8011046:	3718      	adds	r7, #24
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 801104c:	b590      	push	{r4, r7, lr}
 801104e:	b085      	sub	sp, #20
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 f853 	bl	8011104 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 801105e:	4604      	mov	r4, r0
 8011060:	68b8      	ldr	r0, [r7, #8]
 8011062:	f000 f84f 	bl	8011104 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8011066:	4603      	mov	r3, r0
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	4619      	mov	r1, r3
 801106c:	4620      	mov	r0, r4
 801106e:	f000 f85b 	bl	8011128 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8011072:	4603      	mov	r3, r0
    }
 8011074:	4618      	mov	r0, r3
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	bd90      	pop	{r4, r7, pc}

0801107c <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	4618      	mov	r0, r3
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <_ZSt13__copy_move_aILb0EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011092:	b5b0      	push	{r4, r5, r7, lr}
 8011094:	b084      	sub	sp, #16
 8011096:	af00      	add	r7, sp, #0
 8011098:	60f8      	str	r0, [r7, #12]
 801109a:	60b9      	str	r1, [r7, #8]
 801109c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f7fb ffcb 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 80110a4:	4604      	mov	r4, r0
 80110a6:	68b8      	ldr	r0, [r7, #8]
 80110a8:	f7fb ffc7 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 80110ac:	4605      	mov	r5, r0
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fb ffc2 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 80110b6:	4603      	mov	r3, r0
 80110b8:	461a      	mov	r2, r3
 80110ba:	4629      	mov	r1, r5
 80110bc:	4620      	mov	r0, r4
 80110be:	f7fe ff47 	bl	800ff50 <_ZSt14__copy_move_a1ILb0EPcS0_ET1_T0_S2_S1_>
 80110c2:	4602      	mov	r2, r0
 80110c4:	1d3b      	adds	r3, r7, #4
 80110c6:	4611      	mov	r1, r2
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fb ffd1 	bl	800d070 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80110ce:	4603      	mov	r3, r0
    }
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bdb0      	pop	{r4, r5, r7, pc}

080110d8 <_ZSt7forwardIRKN3jlb4EdgeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80110d8:	b480      	push	{r7}
 80110da:	b083      	sub	sp, #12
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4618      	mov	r0, r3
 80110e4:	370c      	adds	r7, #12
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr

080110ee <_ZSt7forwardIRKN3jlb4NodeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80110ee:	b480      	push	{r7}
 80110f0:	b083      	sub	sp, #12
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4618      	mov	r0, r3
 80110fa:	370c      	adds	r7, #12
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr

08011104 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 801110c:	1d3b      	adds	r3, r7, #4
 801110e:	4618      	mov	r0, r3
 8011110:	f000 f82d 	bl	801116e <_ZNKRSt13move_iteratorIPcE4baseEv>
 8011114:	4603      	mov	r3, r0
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4618      	mov	r0, r3
 801111a:	f7fe f8a4 	bl	800f266 <_ZSt12__miter_baseIPcET_S1_>
 801111e:	4603      	mov	r3, r0
 8011120:	4618      	mov	r0, r3
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011128:	b5b0      	push	{r4, r5, r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f7fb ff80 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 801113a:	4604      	mov	r4, r0
 801113c:	68b8      	ldr	r0, [r7, #8]
 801113e:	f7fb ff7c 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 8011142:	4605      	mov	r5, r0
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4618      	mov	r0, r3
 8011148:	f7fb ff77 	bl	800d03a <_ZSt12__niter_baseIPcET_S1_>
 801114c:	4603      	mov	r3, r0
 801114e:	461a      	mov	r2, r3
 8011150:	4629      	mov	r1, r5
 8011152:	4620      	mov	r0, r4
 8011154:	f000 f816 	bl	8011184 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>
 8011158:	4602      	mov	r2, r0
 801115a:	1d3b      	adds	r3, r7, #4
 801115c:	4611      	mov	r1, r2
 801115e:	4618      	mov	r0, r3
 8011160:	f7fb ff86 	bl	800d070 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8011164:	4603      	mov	r3, r0
    }
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bdb0      	pop	{r4, r5, r7, pc}

0801116e <_ZNKRSt13move_iteratorIPcE4baseEv>:
      base() const & noexcept
 801116e:	b480      	push	{r7}
 8011170:	b083      	sub	sp, #12
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <_ZSt14__copy_move_a1ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f000 f805 	bl	80111a4 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 801119a:	4603      	mov	r3, r0
 801119c:	4618      	mov	r0, r3
 801119e:	3710      	adds	r7, #16
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80111b0:	f7f1 f9dc 	bl	800256c <_ZSt21is_constant_evaluatedv>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d006      	beq.n	80111c8 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	68b9      	ldr	r1, [r7, #8]
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f000 f80d 	bl	80111de <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>
 80111c4:	4603      	mov	r3, r0
 80111c6:	e006      	b.n	80111d6 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	68b9      	ldr	r1, [r7, #8]
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f000 f829 	bl	8011224 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 80111d2:	4603      	mov	r3, r0
 80111d4:	bf00      	nop
    }
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80111de:	b580      	push	{r7, lr}
 80111e0:	b086      	sub	sp, #24
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	60f8      	str	r0, [r7, #12]
 80111e6:	60b9      	str	r1, [r7, #8]
 80111e8:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	617b      	str	r3, [r7, #20]
 80111f2:	e00f      	b.n	8011214 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x36>
	      *__result = std::move(*__first);
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	f7ff ff41 	bl	801107c <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 80111fa:	4603      	mov	r3, r0
 80111fc:	781a      	ldrb	r2, [r3, #0]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	3301      	adds	r3, #1
 8011206:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	3301      	adds	r3, #1
 801120c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	3b01      	subs	r3, #1
 8011212:	617b      	str	r3, [r7, #20]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	2b00      	cmp	r3, #0
 8011218:	dcec      	bgt.n	80111f4 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPcS3_EET0_T_S5_S4_+0x16>
	  return __result;
 801121a:	687b      	ldr	r3, [r7, #4]
	}
 801121c:	4618      	mov	r0, r3
 801121e:	3718      	adds	r7, #24
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011224:	b580      	push	{r7, lr}
 8011226:	b086      	sub	sp, #24
 8011228:	af00      	add	r7, sp, #0
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	60b9      	str	r1, [r7, #8]
 801122e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d005      	beq.n	801124a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	461a      	mov	r2, r3
 8011242:	68f9      	ldr	r1, [r7, #12]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f011 fa14 	bl	8022672 <memmove>
	  return __result + _Num;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	4413      	add	r3, r2
	}
 8011250:	4618      	mov	r0, r3
 8011252:	3718      	adds	r7, #24
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN3jlb5LogicD1Ev>:
    class Logic
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011266:	4618      	mov	r0, r3
 8011268:	f7f8 f818 	bl	800929c <_ZN3jlb12SignalSenderD1Ev>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8011272:	4618      	mov	r0, r3
 8011274:	f7f6 ffe2 	bl	800823c <_ZN3jlb5GraphD1Ev>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3388      	adds	r3, #136	; 0x88
 801127c:	4618      	mov	r0, r3
 801127e:	f7f2 ff23 	bl	80040c8 <_ZN3jlb10ControllerD1Ev>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	f7f7 f86f 	bl	8008368 <_ZN3jlb8OdometryD1Ev>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	4618      	mov	r0, r3
 801128e:	3708      	adds	r7, #8
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <_Z41__static_initialization_and_destruction_0ii>:
	}

}
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d10e      	bne.n	80112c2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d109      	bne.n	80112c2 <_Z41__static_initialization_and_destruction_0ii+0x2e>
jlb::Logic logic;
 80112ae:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80112e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80112b2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80112e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80112b6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80112e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80112ba:	2102      	movs	r1, #2
 80112bc:	4809      	ldr	r0, [pc, #36]	; (80112e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80112be:	f7f9 ffbf 	bl	800b240 <_ZN3jlb5LogicC1ENS_9DirectionEfff>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d107      	bne.n	80112d8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d102      	bne.n	80112d8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80112d2:	4804      	ldr	r0, [pc, #16]	; (80112e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80112d4:	f7ff ffc0 	bl	8011258 <_ZN3jlb5LogicD1Ev>
}
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	00000000 	.word	0x00000000
 80112e4:	20000308 	.word	0x20000308

080112e8 <_GLOBAL__sub_I_motor_battery_voltage>:
 80112e8:	b580      	push	{r7, lr}
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80112f0:	2001      	movs	r0, #1
 80112f2:	f7ff ffcf 	bl	8011294 <_Z41__static_initialization_and_destruction_0ii>
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <_GLOBAL__sub_D_motor_battery_voltage>:
 80112f8:	b580      	push	{r7, lr}
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011300:	2000      	movs	r0, #0
 8011302:	f7ff ffc7 	bl	8011294 <_Z41__static_initialization_and_destruction_0ii>
 8011306:	bd80      	pop	{r7, pc}

08011308 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011310:	4b08      	ldr	r3, [pc, #32]	; (8011334 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011314:	4907      	ldr	r1, [pc, #28]	; (8011334 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4313      	orrs	r3, r2
 801131a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801131c:	4b05      	ldr	r3, [pc, #20]	; (8011334 <LL_AHB2_GRP1_EnableClock+0x2c>)
 801131e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4013      	ands	r3, r2
 8011324:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011326:	68fb      	ldr	r3, [r7, #12]
}
 8011328:	bf00      	nop
 801132a:	3714      	adds	r7, #20
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr
 8011334:	40021000 	.word	0x40021000

08011338 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8011338:	b480      	push	{r7}
 801133a:	b085      	sub	sp, #20
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8011340:	4b08      	ldr	r3, [pc, #32]	; (8011364 <LL_APB1_GRP2_EnableClock+0x2c>)
 8011342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011344:	4907      	ldr	r1, [pc, #28]	; (8011364 <LL_APB1_GRP2_EnableClock+0x2c>)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4313      	orrs	r3, r2
 801134a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801134c:	4b05      	ldr	r3, [pc, #20]	; (8011364 <LL_APB1_GRP2_EnableClock+0x2c>)
 801134e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	4013      	ands	r3, r2
 8011354:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011356:	68fb      	ldr	r3, [r7, #12]
}
 8011358:	bf00      	nop
 801135a:	3714      	adds	r7, #20
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	40021000 	.word	0x40021000

08011368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801136c:	f002 f8a3 	bl	80134b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8011370:	f000 f862 	bl	8011438 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8011374:	f000 ffba 	bl	80122ec <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8011378:	f000 ff8e 	bl	8012298 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 801137c:	f000 fa62 	bl	8011844 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8011380:	f000 fb82 	bl	8011a88 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8011384:	f000 ff24 	bl	80121d0 <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 8011388:	f000 ff58 	bl	801223c <_ZL15MX_USB_PCD_Initv>
  MX_UART4_Init();
 801138c:	f000 fabc 	bl	8011908 <_ZL13MX_UART4_Initv>
  MX_SPI1_Init();
 8011390:	f000 fbce 	bl	8011b30 <_ZL12MX_SPI1_Initv>
  MX_SPI2_Init();
 8011394:	f000 fc0e 	bl	8011bb4 <_ZL12MX_SPI2_Initv>
  MX_SPI3_Init();
 8011398:	f000 fc4e 	bl	8011c38 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 801139c:	f000 fc8e 	bl	8011cbc <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80113a0:	f000 fd2e 	bl	8011e00 <_ZL12MX_TIM3_Initv>
  MX_USART2_UART_Init();
 80113a4:	f000 fb10 	bl	80119c8 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80113a8:	f000 f8b6 	bl	8011518 <_ZL12MX_ADC1_Initv>
  MX_TIM5_Init();
 80113ac:	f000 fd88 	bl	8011ec0 <_ZL12MX_TIM5_Initv>
  MX_I2C1_Init();
 80113b0:	f000 f9dc 	bl	801176c <_ZL12MX_I2C1_Initv>
  MX_ICACHE_Init();
 80113b4:	f000 fa28 	bl	8011808 <_ZL14MX_ICACHE_Initv>
  MX_TIM6_Init();
 80113b8:	f000 fe22 	bl	8012000 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 80113bc:	f000 fe60 	bl	8012080 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */
	Radio_Init();
 80113c0:	f7f2 fc6e 	bl	8003ca0 <_Z10Radio_Initv>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80113c4:	2100      	movs	r1, #0
 80113c6:	4814      	ldr	r0, [pc, #80]	; (8011418 <main+0xb0>)
 80113c8:	f008 f98c 	bl	80196e4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80113cc:	2100      	movs	r1, #0
 80113ce:	4813      	ldr	r0, [pc, #76]	; (801141c <main+0xb4>)
 80113d0:	f008 f988 	bl	80196e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80113d4:	210c      	movs	r1, #12
 80113d6:	4811      	ldr	r0, [pc, #68]	; (801141c <main+0xb4>)
 80113d8:	f008 f984 	bl	80196e4 <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80113dc:	213c      	movs	r1, #60	; 0x3c
 80113de:	4810      	ldr	r0, [pc, #64]	; (8011420 <main+0xb8>)
 80113e0:	f008 fcd8 	bl	8019d94 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim6);
 80113e4:	480f      	ldr	r0, [pc, #60]	; (8011424 <main+0xbc>)
 80113e6:	f008 f84d 	bl	8019484 <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 80113ea:	2108      	movs	r1, #8
 80113ec:	480e      	ldr	r0, [pc, #56]	; (8011428 <main+0xc0>)
 80113ee:	f008 fae1 	bl	80199b4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 80113f2:	210c      	movs	r1, #12
 80113f4:	480c      	ldr	r0, [pc, #48]	; (8011428 <main+0xc0>)
 80113f6:	f008 fadd 	bl	80199b4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80113fa:	f00c fb53 	bl	801daa4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80113fe:	4a0b      	ldr	r2, [pc, #44]	; (801142c <main+0xc4>)
 8011400:	2100      	movs	r1, #0
 8011402:	480b      	ldr	r0, [pc, #44]	; (8011430 <main+0xc8>)
 8011404:	f00c fb98 	bl	801db38 <osThreadNew>
 8011408:	4603      	mov	r3, r0
 801140a:	4a0a      	ldr	r2, [pc, #40]	; (8011434 <main+0xcc>)
 801140c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  RegistrateUserTasks();
 801140e:	f7fa f873 	bl	800b4f8 <_Z19RegistrateUserTasksv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011412:	f00c fb6b 	bl	801daec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8011416:	e7fe      	b.n	8011416 <main+0xae>
 8011418:	20000b9c 	.word	0x20000b9c
 801141c:	20000b04 	.word	0x20000b04
 8011420:	20000ab8 	.word	0x20000ab8
 8011424:	20000b50 	.word	0x20000b50
 8011428:	20000a6c 	.word	0x20000a6c
 801142c:	08023e80 	.word	0x08023e80
 8011430:	08012551 	.word	0x08012551
 8011434:	20000edc 	.word	0x20000edc

08011438 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b098      	sub	sp, #96	; 0x60
 801143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801143e:	f107 0318 	add.w	r3, r7, #24
 8011442:	2248      	movs	r2, #72	; 0x48
 8011444:	2100      	movs	r1, #0
 8011446:	4618      	mov	r0, r3
 8011448:	f011 f92d 	bl	80226a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801144c:	1d3b      	adds	r3, r7, #4
 801144e:	2200      	movs	r2, #0
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	605a      	str	r2, [r3, #4]
 8011454:	609a      	str	r2, [r3, #8]
 8011456:	60da      	str	r2, [r3, #12]
 8011458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 801145a:	2000      	movs	r0, #0
 801145c:	f005 f9de 	bl	801681c <HAL_PWREx_ControlVoltageScaling>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	bf14      	ite	ne
 8011466:	2301      	movne	r3, #1
 8011468:	2300      	moveq	r3, #0
 801146a:	b2db      	uxtb	r3, r3
 801146c:	2b00      	cmp	r3, #0
 801146e:	d001      	beq.n	8011474 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8011470:	f001 f88d 	bl	801258e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8011474:	f005 f9b4 	bl	80167e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8011478:	4b26      	ldr	r3, [pc, #152]	; (8011514 <_Z18SystemClock_Configv+0xdc>)
 801147a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801147e:	4a25      	ldr	r2, [pc, #148]	; (8011514 <_Z18SystemClock_Configv+0xdc>)
 8011480:	f023 0318 	bic.w	r3, r3, #24
 8011484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8011488:	2334      	movs	r3, #52	; 0x34
 801148a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801148c:	2381      	movs	r3, #129	; 0x81
 801148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8011490:	2301      	movs	r3, #1
 8011492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8011494:	2301      	movs	r3, #1
 8011496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8011498:	2300      	movs	r3, #0
 801149a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 801149c:	2360      	movs	r3, #96	; 0x60
 801149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80114a0:	2302      	movs	r3, #2
 80114a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80114a4:	2301      	movs	r3, #1
 80114a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80114a8:	2301      	movs	r3, #1
 80114aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80114ac:	2337      	movs	r3, #55	; 0x37
 80114ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80114b0:	2307      	movs	r3, #7
 80114b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80114b4:	2302      	movs	r3, #2
 80114b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80114b8:	2302      	movs	r3, #2
 80114ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114bc:	f107 0318 	add.w	r3, r7, #24
 80114c0:	4618      	mov	r0, r3
 80114c2:	f005 fa3b 	bl	801693c <HAL_RCC_OscConfig>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bf14      	ite	ne
 80114cc:	2301      	movne	r3, #1
 80114ce:	2300      	moveq	r3, #0
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80114d6:	f001 f85a 	bl	801258e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114da:	230f      	movs	r3, #15
 80114dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114de:	2303      	movs	r3, #3
 80114e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114e2:	2300      	movs	r3, #0
 80114e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80114e6:	2300      	movs	r3, #0
 80114e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114ea:	2300      	movs	r3, #0
 80114ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80114ee:	1d3b      	adds	r3, r7, #4
 80114f0:	2105      	movs	r1, #5
 80114f2:	4618      	mov	r0, r3
 80114f4:	f005 fef8 	bl	80172e8 <HAL_RCC_ClockConfig>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	bf14      	ite	ne
 80114fe:	2301      	movne	r3, #1
 8011500:	2300      	moveq	r3, #0
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8011508:	f001 f841 	bl	801258e <Error_Handler>
  }
}
 801150c:	bf00      	nop
 801150e:	3760      	adds	r7, #96	; 0x60
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	40021000 	.word	0x40021000

08011518 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b08a      	sub	sp, #40	; 0x28
 801151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 801151e:	f107 031c 	add.w	r3, r7, #28
 8011522:	2200      	movs	r2, #0
 8011524:	601a      	str	r2, [r3, #0]
 8011526:	605a      	str	r2, [r3, #4]
 8011528:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 801152a:	1d3b      	adds	r3, r7, #4
 801152c:	2200      	movs	r2, #0
 801152e:	601a      	str	r2, [r3, #0]
 8011530:	605a      	str	r2, [r3, #4]
 8011532:	609a      	str	r2, [r3, #8]
 8011534:	60da      	str	r2, [r3, #12]
 8011536:	611a      	str	r2, [r3, #16]
 8011538:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 801153a:	4b82      	ldr	r3, [pc, #520]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 801153c:	4a82      	ldr	r2, [pc, #520]	; (8011748 <_ZL12MX_ADC1_Initv+0x230>)
 801153e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011540:	4b80      	ldr	r3, [pc, #512]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011542:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011546:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011548:	4b7e      	ldr	r3, [pc, #504]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 801154a:	2200      	movs	r2, #0
 801154c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801154e:	4b7d      	ldr	r3, [pc, #500]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011550:	2200      	movs	r2, #0
 8011552:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8011554:	4b7b      	ldr	r3, [pc, #492]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011556:	2201      	movs	r2, #1
 8011558:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 801155a:	4b7a      	ldr	r3, [pc, #488]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 801155c:	2208      	movs	r2, #8
 801155e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 8011560:	4b78      	ldr	r3, [pc, #480]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011562:	2201      	movs	r2, #1
 8011564:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8011566:	4b77      	ldr	r3, [pc, #476]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011568:	2200      	movs	r2, #0
 801156a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 801156c:	4b75      	ldr	r3, [pc, #468]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 801156e:	2208      	movs	r2, #8
 8011570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011572:	4b74      	ldr	r3, [pc, #464]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801157a:	4b72      	ldr	r3, [pc, #456]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 801157c:	2200      	movs	r2, #0
 801157e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011580:	4b70      	ldr	r3, [pc, #448]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011582:	2200      	movs	r2, #0
 8011584:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8011586:	4b6f      	ldr	r3, [pc, #444]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011588:	2201      	movs	r2, #1
 801158a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 801158e:	4b6d      	ldr	r3, [pc, #436]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011594:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8011596:	4b6b      	ldr	r3, [pc, #428]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011598:	2201      	movs	r2, #1
 801159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 801159e:	4b69      	ldr	r3, [pc, #420]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80115a0:	2214      	movs	r2, #20
 80115a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80115a4:	4b67      	ldr	r3, [pc, #412]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80115a6:	22c0      	movs	r2, #192	; 0xc0
 80115a8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80115aa:	4b66      	ldr	r3, [pc, #408]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80115b0:	4b64      	ldr	r3, [pc, #400]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80115b2:	2201      	movs	r2, #1
 80115b4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80115b6:	4863      	ldr	r0, [pc, #396]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80115b8:	f002 f9c2 	bl	8013940 <HAL_ADC_Init>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b00      	cmp	r3, #0
 80115c0:	bf14      	ite	ne
 80115c2:	2301      	movne	r3, #1
 80115c4:	2300      	moveq	r3, #0
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <_ZL12MX_ADC1_Initv+0xb8>
  {
    Error_Handler();
 80115cc:	f000 ffdf 	bl	801258e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80115d0:	2300      	movs	r3, #0
 80115d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80115d4:	f107 031c 	add.w	r3, r7, #28
 80115d8:	4619      	mov	r1, r3
 80115da:	485a      	ldr	r0, [pc, #360]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80115dc:	f003 fb44 	bl	8014c68 <HAL_ADCEx_MultiModeConfigChannel>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	bf14      	ite	ne
 80115e6:	2301      	movne	r3, #1
 80115e8:	2300      	moveq	r3, #0
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <_ZL12MX_ADC1_Initv+0xdc>
  {
    Error_Handler();
 80115f0:	f000 ffcd 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80115f4:	4b55      	ldr	r3, [pc, #340]	; (801174c <_ZL12MX_ADC1_Initv+0x234>)
 80115f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80115f8:	2306      	movs	r3, #6
 80115fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80115fc:	2301      	movs	r3, #1
 80115fe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011600:	237f      	movs	r3, #127	; 0x7f
 8011602:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011604:	2304      	movs	r3, #4
 8011606:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8011608:	2300      	movs	r3, #0
 801160a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801160c:	1d3b      	adds	r3, r7, #4
 801160e:	4619      	mov	r1, r3
 8011610:	484c      	ldr	r0, [pc, #304]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011612:	f002 fdcd 	bl	80141b0 <HAL_ADC_ConfigChannel>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	bf14      	ite	ne
 801161c:	2301      	movne	r3, #1
 801161e:	2300      	moveq	r3, #0
 8011620:	b2db      	uxtb	r3, r3
 8011622:	2b00      	cmp	r3, #0
 8011624:	d001      	beq.n	801162a <_ZL12MX_ADC1_Initv+0x112>
  {
    Error_Handler();
 8011626:	f000 ffb2 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 801162a:	4b49      	ldr	r3, [pc, #292]	; (8011750 <_ZL12MX_ADC1_Initv+0x238>)
 801162c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 801162e:	230c      	movs	r3, #12
 8011630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011632:	1d3b      	adds	r3, r7, #4
 8011634:	4619      	mov	r1, r3
 8011636:	4843      	ldr	r0, [pc, #268]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011638:	f002 fdba 	bl	80141b0 <HAL_ADC_ConfigChannel>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	bf14      	ite	ne
 8011642:	2301      	movne	r3, #1
 8011644:	2300      	moveq	r3, #0
 8011646:	b2db      	uxtb	r3, r3
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <_ZL12MX_ADC1_Initv+0x138>
  {
    Error_Handler();
 801164c:	f000 ff9f 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8011650:	4b40      	ldr	r3, [pc, #256]	; (8011754 <_ZL12MX_ADC1_Initv+0x23c>)
 8011652:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8011654:	2312      	movs	r3, #18
 8011656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011658:	1d3b      	adds	r3, r7, #4
 801165a:	4619      	mov	r1, r3
 801165c:	4839      	ldr	r0, [pc, #228]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 801165e:	f002 fda7 	bl	80141b0 <HAL_ADC_ConfigChannel>
 8011662:	4603      	mov	r3, r0
 8011664:	2b00      	cmp	r3, #0
 8011666:	bf14      	ite	ne
 8011668:	2301      	movne	r3, #1
 801166a:	2300      	moveq	r3, #0
 801166c:	b2db      	uxtb	r3, r3
 801166e:	2b00      	cmp	r3, #0
 8011670:	d001      	beq.n	8011676 <_ZL12MX_ADC1_Initv+0x15e>
  {
    Error_Handler();
 8011672:	f000 ff8c 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8011676:	4b38      	ldr	r3, [pc, #224]	; (8011758 <_ZL12MX_ADC1_Initv+0x240>)
 8011678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 801167a:	2318      	movs	r3, #24
 801167c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801167e:	1d3b      	adds	r3, r7, #4
 8011680:	4619      	mov	r1, r3
 8011682:	4830      	ldr	r0, [pc, #192]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011684:	f002 fd94 	bl	80141b0 <HAL_ADC_ConfigChannel>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	bf14      	ite	ne
 801168e:	2301      	movne	r3, #1
 8011690:	2300      	moveq	r3, #0
 8011692:	b2db      	uxtb	r3, r3
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <_ZL12MX_ADC1_Initv+0x184>
  {
    Error_Handler();
 8011698:	f000 ff79 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 801169c:	4b2f      	ldr	r3, [pc, #188]	; (801175c <_ZL12MX_ADC1_Initv+0x244>)
 801169e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80116a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116a6:	1d3b      	adds	r3, r7, #4
 80116a8:	4619      	mov	r1, r3
 80116aa:	4826      	ldr	r0, [pc, #152]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80116ac:	f002 fd80 	bl	80141b0 <HAL_ADC_ConfigChannel>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	bf14      	ite	ne
 80116b6:	2301      	movne	r3, #1
 80116b8:	2300      	moveq	r3, #0
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <_ZL12MX_ADC1_Initv+0x1ac>
  {
    Error_Handler();
 80116c0:	f000 ff65 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80116c4:	4b26      	ldr	r3, [pc, #152]	; (8011760 <_ZL12MX_ADC1_Initv+0x248>)
 80116c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80116c8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80116cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116ce:	1d3b      	adds	r3, r7, #4
 80116d0:	4619      	mov	r1, r3
 80116d2:	481c      	ldr	r0, [pc, #112]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80116d4:	f002 fd6c 	bl	80141b0 <HAL_ADC_ConfigChannel>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	bf14      	ite	ne
 80116de:	2301      	movne	r3, #1
 80116e0:	2300      	moveq	r3, #0
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d001      	beq.n	80116ec <_ZL12MX_ADC1_Initv+0x1d4>
  {
    Error_Handler();
 80116e8:	f000 ff51 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80116ec:	4b1d      	ldr	r3, [pc, #116]	; (8011764 <_ZL12MX_ADC1_Initv+0x24c>)
 80116ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80116f0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80116f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116f6:	1d3b      	adds	r3, r7, #4
 80116f8:	4619      	mov	r1, r3
 80116fa:	4812      	ldr	r0, [pc, #72]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 80116fc:	f002 fd58 	bl	80141b0 <HAL_ADC_ConfigChannel>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	bf14      	ite	ne
 8011706:	2301      	movne	r3, #1
 8011708:	2300      	moveq	r3, #0
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b00      	cmp	r3, #0
 801170e:	d001      	beq.n	8011714 <_ZL12MX_ADC1_Initv+0x1fc>
  {
    Error_Handler();
 8011710:	f000 ff3d 	bl	801258e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8011714:	4b14      	ldr	r3, [pc, #80]	; (8011768 <_ZL12MX_ADC1_Initv+0x250>)
 8011716:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8011718:	f44f 7389 	mov.w	r3, #274	; 0x112
 801171c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801171e:	1d3b      	adds	r3, r7, #4
 8011720:	4619      	mov	r1, r3
 8011722:	4808      	ldr	r0, [pc, #32]	; (8011744 <_ZL12MX_ADC1_Initv+0x22c>)
 8011724:	f002 fd44 	bl	80141b0 <HAL_ADC_ConfigChannel>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	bf14      	ite	ne
 801172e:	2301      	movne	r3, #1
 8011730:	2300      	moveq	r3, #0
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d001      	beq.n	801173c <_ZL12MX_ADC1_Initv+0x224>
  {
    Error_Handler();
 8011738:	f000 ff29 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801173c:	bf00      	nop
 801173e:	3728      	adds	r7, #40	; 0x28
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	20000638 	.word	0x20000638
 8011748:	42028000 	.word	0x42028000
 801174c:	04300002 	.word	0x04300002
 8011750:	08600004 	.word	0x08600004
 8011754:	0c900008 	.word	0x0c900008
 8011758:	1d500080 	.word	0x1d500080
 801175c:	21800100 	.word	0x21800100
 8011760:	25b00200 	.word	0x25b00200
 8011764:	32601000 	.word	0x32601000
 8011768:	43210000 	.word	0x43210000

0801176c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011770:	4b22      	ldr	r3, [pc, #136]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 8011772:	4a23      	ldr	r2, [pc, #140]	; (8011800 <_ZL12MX_I2C1_Initv+0x94>)
 8011774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60514452;
 8011776:	4b21      	ldr	r3, [pc, #132]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 8011778:	4a22      	ldr	r2, [pc, #136]	; (8011804 <_ZL12MX_I2C1_Initv+0x98>)
 801177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 801177c:	4b1f      	ldr	r3, [pc, #124]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 801177e:	2200      	movs	r2, #0
 8011780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011782:	4b1e      	ldr	r3, [pc, #120]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 8011784:	2201      	movs	r2, #1
 8011786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011788:	4b1c      	ldr	r3, [pc, #112]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 801178a:	2200      	movs	r2, #0
 801178c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801178e:	4b1b      	ldr	r3, [pc, #108]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 8011790:	2200      	movs	r2, #0
 8011792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011794:	4b19      	ldr	r3, [pc, #100]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 8011796:	2200      	movs	r2, #0
 8011798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801179a:	4b18      	ldr	r3, [pc, #96]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 801179c:	2200      	movs	r2, #0
 801179e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80117a0:	4b16      	ldr	r3, [pc, #88]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 80117a2:	2200      	movs	r2, #0
 80117a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80117a6:	4815      	ldr	r0, [pc, #84]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 80117a8:	f004 f942 	bl	8015a30 <HAL_I2C_Init>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	bf14      	ite	ne
 80117b2:	2301      	movne	r3, #1
 80117b4:	2300      	moveq	r3, #0
 80117b6:	b2db      	uxtb	r3, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d001      	beq.n	80117c0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80117bc:	f000 fee7 	bl	801258e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80117c0:	2100      	movs	r1, #0
 80117c2:	480e      	ldr	r0, [pc, #56]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 80117c4:	f004 fe40 	bl	8016448 <HAL_I2CEx_ConfigAnalogFilter>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	bf14      	ite	ne
 80117ce:	2301      	movne	r3, #1
 80117d0:	2300      	moveq	r3, #0
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d001      	beq.n	80117dc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80117d8:	f000 fed9 	bl	801258e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80117dc:	2100      	movs	r1, #0
 80117de:	4807      	ldr	r0, [pc, #28]	; (80117fc <_ZL12MX_I2C1_Initv+0x90>)
 80117e0:	f004 fe7d 	bl	80164de <HAL_I2CEx_ConfigDigitalFilter>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	bf14      	ite	ne
 80117ea:	2301      	movne	r3, #1
 80117ec:	2300      	moveq	r3, #0
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80117f4:	f000 fecb 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80117f8:	bf00      	nop
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	20000708 	.word	0x20000708
 8011800:	40005400 	.word	0x40005400
 8011804:	60514452 	.word	0x60514452

08011808 <_ZL14MX_ICACHE_Initv>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 801180c:	2000      	movs	r0, #0
 801180e:	f004 feb3 	bl	8016578 <HAL_ICACHE_ConfigAssociativityMode>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	bf14      	ite	ne
 8011818:	2301      	movne	r3, #1
 801181a:	2300      	moveq	r3, #0
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <_ZL14MX_ICACHE_Initv+0x1e>
  {
    Error_Handler();
 8011822:	f000 feb4 	bl	801258e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8011826:	f004 fec7 	bl	80165b8 <HAL_ICACHE_Enable>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	bf14      	ite	ne
 8011830:	2301      	movne	r3, #1
 8011832:	2300      	moveq	r3, #0
 8011834:	b2db      	uxtb	r3, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	d001      	beq.n	801183e <_ZL14MX_ICACHE_Initv+0x36>
  {
    Error_Handler();
 801183a:	f000 fea8 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 801183e:	bf00      	nop
 8011840:	bd80      	pop	{r7, pc}
	...

08011844 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8011848:	4b2c      	ldr	r3, [pc, #176]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801184a:	4a2d      	ldr	r2, [pc, #180]	; (8011900 <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 801184c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 801184e:	4b2b      	ldr	r3, [pc, #172]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011850:	4a2c      	ldr	r2, [pc, #176]	; (8011904 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 8011852:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011854:	4b29      	ldr	r3, [pc, #164]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011856:	2200      	movs	r2, #0
 8011858:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801185a:	4b28      	ldr	r3, [pc, #160]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801185c:	2200      	movs	r2, #0
 801185e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8011860:	4b26      	ldr	r3, [pc, #152]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011862:	2200      	movs	r2, #0
 8011864:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8011866:	4b25      	ldr	r3, [pc, #148]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011868:	220c      	movs	r2, #12
 801186a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801186c:	4b23      	ldr	r3, [pc, #140]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801186e:	2200      	movs	r2, #0
 8011870:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011872:	4b22      	ldr	r3, [pc, #136]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011874:	2200      	movs	r2, #0
 8011876:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011878:	4b20      	ldr	r3, [pc, #128]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801187a:	2200      	movs	r2, #0
 801187c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801187e:	4b1f      	ldr	r3, [pc, #124]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011880:	2200      	movs	r2, #0
 8011882:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8011884:	4b1d      	ldr	r3, [pc, #116]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8011886:	2200      	movs	r2, #0
 8011888:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801188a:	481c      	ldr	r0, [pc, #112]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 801188c:	f009 fda8 	bl	801b3e0 <HAL_UART_Init>
 8011890:	4603      	mov	r3, r0
 8011892:	2b00      	cmp	r3, #0
 8011894:	bf14      	ite	ne
 8011896:	2301      	movne	r3, #1
 8011898:	2300      	moveq	r3, #0
 801189a:	b2db      	uxtb	r3, r3
 801189c:	2b00      	cmp	r3, #0
 801189e:	d001      	beq.n	80118a4 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 80118a0:	f000 fe75 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80118a4:	2100      	movs	r1, #0
 80118a6:	4815      	ldr	r0, [pc, #84]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118a8:	f00b fdf9 	bl	801d49e <HAL_UARTEx_SetTxFifoThreshold>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	bf14      	ite	ne
 80118b2:	2301      	movne	r3, #1
 80118b4:	2300      	moveq	r3, #0
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80118bc:	f000 fe67 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80118c0:	2100      	movs	r1, #0
 80118c2:	480e      	ldr	r0, [pc, #56]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118c4:	f00b fe29 	bl	801d51a <HAL_UARTEx_SetRxFifoThreshold>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bf14      	ite	ne
 80118ce:	2301      	movne	r3, #1
 80118d0:	2300      	moveq	r3, #0
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d001      	beq.n	80118dc <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80118d8:	f000 fe59 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80118dc:	4807      	ldr	r0, [pc, #28]	; (80118fc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80118de:	f00b fda5 	bl	801d42c <HAL_UARTEx_DisableFifoMode>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	bf14      	ite	ne
 80118e8:	2301      	movne	r3, #1
 80118ea:	2300      	moveq	r3, #0
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d001      	beq.n	80118f6 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 80118f2:	f000 fe4c 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80118f6:	bf00      	nop
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	2000075c 	.word	0x2000075c
 8011900:	40008000 	.word	0x40008000
 8011904:	00033324 	.word	0x00033324

08011908 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 801190c:	4b2c      	ldr	r3, [pc, #176]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801190e:	4a2d      	ldr	r2, [pc, #180]	; (80119c4 <_ZL13MX_UART4_Initv+0xbc>)
 8011910:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8011912:	4b2b      	ldr	r3, [pc, #172]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011918:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801191a:	4b29      	ldr	r3, [pc, #164]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801191c:	2200      	movs	r2, #0
 801191e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8011920:	4b27      	ldr	r3, [pc, #156]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011922:	2200      	movs	r2, #0
 8011924:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8011926:	4b26      	ldr	r3, [pc, #152]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011928:	2200      	movs	r2, #0
 801192a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 801192c:	4b24      	ldr	r3, [pc, #144]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801192e:	2204      	movs	r2, #4
 8011930:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011932:	4b23      	ldr	r3, [pc, #140]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011934:	2200      	movs	r2, #0
 8011936:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8011938:	4b21      	ldr	r3, [pc, #132]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801193a:	2200      	movs	r2, #0
 801193c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801193e:	4b20      	ldr	r3, [pc, #128]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011940:	2200      	movs	r2, #0
 8011942:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011944:	4b1e      	ldr	r3, [pc, #120]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011946:	2200      	movs	r2, #0
 8011948:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801194a:	4b1d      	ldr	r3, [pc, #116]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801194c:	2200      	movs	r2, #0
 801194e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8011950:	481b      	ldr	r0, [pc, #108]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 8011952:	f009 fd45 	bl	801b3e0 <HAL_UART_Init>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	bf14      	ite	ne
 801195c:	2301      	movne	r3, #1
 801195e:	2300      	moveq	r3, #0
 8011960:	b2db      	uxtb	r3, r3
 8011962:	2b00      	cmp	r3, #0
 8011964:	d001      	beq.n	801196a <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8011966:	f000 fe12 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801196a:	2100      	movs	r1, #0
 801196c:	4814      	ldr	r0, [pc, #80]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801196e:	f00b fd96 	bl	801d49e <HAL_UARTEx_SetTxFifoThreshold>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	bf14      	ite	ne
 8011978:	2301      	movne	r3, #1
 801197a:	2300      	moveq	r3, #0
 801197c:	b2db      	uxtb	r3, r3
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8011982:	f000 fe04 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011986:	2100      	movs	r1, #0
 8011988:	480d      	ldr	r0, [pc, #52]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 801198a:	f00b fdc6 	bl	801d51a <HAL_UARTEx_SetRxFifoThreshold>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	bf14      	ite	ne
 8011994:	2301      	movne	r3, #1
 8011996:	2300      	moveq	r3, #0
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b00      	cmp	r3, #0
 801199c:	d001      	beq.n	80119a2 <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 801199e:	f000 fdf6 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80119a2:	4807      	ldr	r0, [pc, #28]	; (80119c0 <_ZL13MX_UART4_Initv+0xb8>)
 80119a4:	f00b fd42 	bl	801d42c <HAL_UARTEx_DisableFifoMode>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	bf14      	ite	ne
 80119ae:	2301      	movne	r3, #1
 80119b0:	2300      	moveq	r3, #0
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d001      	beq.n	80119bc <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 80119b8:	f000 fde9 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80119bc:	bf00      	nop
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	200007f0 	.word	0x200007f0
 80119c4:	40004c00 	.word	0x40004c00

080119c8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80119cc:	4b2c      	ldr	r3, [pc, #176]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119ce:	4a2d      	ldr	r2, [pc, #180]	; (8011a84 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80119d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80119d2:	4b2b      	ldr	r3, [pc, #172]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80119d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80119da:	4b29      	ldr	r3, [pc, #164]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119dc:	2200      	movs	r2, #0
 80119de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80119e0:	4b27      	ldr	r3, [pc, #156]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80119e6:	4b26      	ldr	r3, [pc, #152]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80119ec:	4b24      	ldr	r3, [pc, #144]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119ee:	2208      	movs	r2, #8
 80119f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80119f2:	4b23      	ldr	r3, [pc, #140]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119f4:	2200      	movs	r2, #0
 80119f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80119f8:	4b21      	ldr	r3, [pc, #132]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80119fa:	2200      	movs	r2, #0
 80119fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80119fe:	4b20      	ldr	r3, [pc, #128]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011a04:	4b1e      	ldr	r3, [pc, #120]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011a0a:	4b1d      	ldr	r3, [pc, #116]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011a10:	481b      	ldr	r0, [pc, #108]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a12:	f009 fce5 	bl	801b3e0 <HAL_UART_Init>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	bf14      	ite	ne
 8011a1c:	2301      	movne	r3, #1
 8011a1e:	2300      	moveq	r3, #0
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d001      	beq.n	8011a2a <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8011a26:	f000 fdb2 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	4814      	ldr	r0, [pc, #80]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a2e:	f00b fd36 	bl	801d49e <HAL_UARTEx_SetTxFifoThreshold>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	bf14      	ite	ne
 8011a38:	2301      	movne	r3, #1
 8011a3a:	2300      	moveq	r3, #0
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 8011a42:	f000 fda4 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8011a46:	2100      	movs	r1, #0
 8011a48:	480d      	ldr	r0, [pc, #52]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a4a:	f00b fd66 	bl	801d51a <HAL_UARTEx_SetRxFifoThreshold>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	bf14      	ite	ne
 8011a54:	2301      	movne	r3, #1
 8011a56:	2300      	moveq	r3, #0
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 8011a5e:	f000 fd96 	bl	801258e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8011a62:	4807      	ldr	r0, [pc, #28]	; (8011a80 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8011a64:	f00b fce2 	bl	801d42c <HAL_UARTEx_DisableFifoMode>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	bf14      	ite	ne
 8011a6e:	2301      	movne	r3, #1
 8011a70:	2300      	moveq	r3, #0
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 8011a78:	f000 fd89 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011a7c:	bf00      	nop
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	20000884 	.word	0x20000884
 8011a84:	40004400 	.word	0x40004400

08011a88 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b086      	sub	sp, #24
 8011a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8011a8e:	463b      	mov	r3, r7
 8011a90:	2200      	movs	r2, #0
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	605a      	str	r2, [r3, #4]
 8011a96:	609a      	str	r2, [r3, #8]
 8011a98:	60da      	str	r2, [r3, #12]
 8011a9a:	611a      	str	r2, [r3, #16]
 8011a9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8011a9e:	4b22      	ldr	r3, [pc, #136]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011aa0:	4a22      	ldr	r2, [pc, #136]	; (8011b2c <_ZL11MX_RTC_Initv+0xa4>)
 8011aa2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8011aa4:	4b20      	ldr	r3, [pc, #128]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8011aaa:	4b1f      	ldr	r3, [pc, #124]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011aac:	227f      	movs	r2, #127	; 0x7f
 8011aae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8011ab0:	4b1d      	ldr	r3, [pc, #116]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011ab2:	22ff      	movs	r2, #255	; 0xff
 8011ab4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8011ab6:	4b1c      	ldr	r3, [pc, #112]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8011abc:	4b1a      	ldr	r3, [pc, #104]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011abe:	2200      	movs	r2, #0
 8011ac0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8011ac2:	4b19      	ldr	r3, [pc, #100]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8011ac8:	4b17      	ldr	r3, [pc, #92]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011ace:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8011ad0:	4b15      	ldr	r3, [pc, #84]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8011ad6:	4814      	ldr	r0, [pc, #80]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011ad8:	f006 fc32 	bl	8018340 <HAL_RTC_Init>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	bf14      	ite	ne
 8011ae2:	2301      	movne	r3, #1
 8011ae4:	2300      	moveq	r3, #0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8011aec:	f000 fd4f 	bl	801258e <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8011af0:	2300      	movs	r3, #0
 8011af2:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8011af4:	2300      	movs	r3, #0
 8011af6:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8011af8:	2300      	movs	r3, #0
 8011afa:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8011afc:	2300      	movs	r3, #0
 8011afe:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8011b00:	463b      	mov	r3, r7
 8011b02:	4619      	mov	r1, r3
 8011b04:	4808      	ldr	r0, [pc, #32]	; (8011b28 <_ZL11MX_RTC_Initv+0xa0>)
 8011b06:	f006 fd29 	bl	801855c <HAL_RTCEx_PrivilegeModeSet>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	bf14      	ite	ne
 8011b10:	2301      	movne	r3, #1
 8011b12:	2300      	moveq	r3, #0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d001      	beq.n	8011b1e <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8011b1a:	f000 fd38 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8011b1e:	bf00      	nop
 8011b20:	3718      	adds	r7, #24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	20000918 	.word	0x20000918
 8011b2c:	40002800 	.word	0x40002800

08011b30 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011b34:	4b1d      	ldr	r3, [pc, #116]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b36:	4a1e      	ldr	r2, [pc, #120]	; (8011bb0 <_ZL12MX_SPI1_Initv+0x80>)
 8011b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011b3a:	4b1c      	ldr	r3, [pc, #112]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011b42:	4b1a      	ldr	r3, [pc, #104]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b44:	2200      	movs	r2, #0
 8011b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011b48:	4b18      	ldr	r3, [pc, #96]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011b4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011b50:	4b16      	ldr	r3, [pc, #88]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011b56:	4b15      	ldr	r3, [pc, #84]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b58:	2200      	movs	r2, #0
 8011b5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011b5c:	4b13      	ldr	r3, [pc, #76]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8011b64:	4b11      	ldr	r3, [pc, #68]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b66:	2228      	movs	r2, #40	; 0x28
 8011b68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011b6a:	4b10      	ldr	r3, [pc, #64]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011b70:	4b0e      	ldr	r3, [pc, #56]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011b76:	4b0d      	ldr	r3, [pc, #52]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b78:	2200      	movs	r2, #0
 8011b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8011b7c:	4b0b      	ldr	r3, [pc, #44]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b7e:	2207      	movs	r2, #7
 8011b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011b82:	4b0a      	ldr	r3, [pc, #40]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b84:	2200      	movs	r2, #0
 8011b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011b88:	4b08      	ldr	r3, [pc, #32]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b8a:	2208      	movs	r2, #8
 8011b8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8011b8e:	4807      	ldr	r0, [pc, #28]	; (8011bac <_ZL12MX_SPI1_Initv+0x7c>)
 8011b90:	f006 fd10 	bl	80185b4 <HAL_SPI_Init>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bf14      	ite	ne
 8011b9a:	2301      	movne	r3, #1
 8011b9c:	2300      	moveq	r3, #0
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d001      	beq.n	8011ba8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8011ba4:	f000 fcf3 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8011ba8:	bf00      	nop
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	20000940 	.word	0x20000940
 8011bb0:	40013000 	.word	0x40013000

08011bb4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8011bb8:	4b1d      	ldr	r3, [pc, #116]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bba:	4a1e      	ldr	r2, [pc, #120]	; (8011c34 <_ZL12MX_SPI2_Initv+0x80>)
 8011bbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011bbe:	4b1c      	ldr	r3, [pc, #112]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011bc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011bc6:	4b1a      	ldr	r3, [pc, #104]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bc8:	2200      	movs	r2, #0
 8011bca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8011bcc:	4b18      	ldr	r3, [pc, #96]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011bd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011bd4:	4b16      	ldr	r3, [pc, #88]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011bda:	4b15      	ldr	r3, [pc, #84]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bdc:	2200      	movs	r2, #0
 8011bde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011be0:	4b13      	ldr	r3, [pc, #76]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011be6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8011be8:	4b11      	ldr	r3, [pc, #68]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bea:	2218      	movs	r2, #24
 8011bec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8011bee:	4b10      	ldr	r3, [pc, #64]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bf0:	2280      	movs	r2, #128	; 0x80
 8011bf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011bf4:	4b0e      	ldr	r3, [pc, #56]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011bfa:	4b0d      	ldr	r3, [pc, #52]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8011c00:	4b0b      	ldr	r3, [pc, #44]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c02:	2207      	movs	r2, #7
 8011c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011c06:	4b0a      	ldr	r3, [pc, #40]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011c0c:	4b08      	ldr	r3, [pc, #32]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c0e:	2208      	movs	r2, #8
 8011c10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011c12:	4807      	ldr	r0, [pc, #28]	; (8011c30 <_ZL12MX_SPI2_Initv+0x7c>)
 8011c14:	f006 fcce 	bl	80185b4 <HAL_SPI_Init>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	bf14      	ite	ne
 8011c1e:	2301      	movne	r3, #1
 8011c20:	2300      	moveq	r3, #0
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8011c28:	f000 fcb1 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011c2c:	bf00      	nop
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	200009a4 	.word	0x200009a4
 8011c34:	40003800 	.word	0x40003800

08011c38 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8011c3c:	4b1d      	ldr	r3, [pc, #116]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c3e:	4a1e      	ldr	r2, [pc, #120]	; (8011cb8 <_ZL12MX_SPI3_Initv+0x80>)
 8011c40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8011c42:	4b1c      	ldr	r3, [pc, #112]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011c48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8011c4a:	4b1a      	ldr	r3, [pc, #104]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011c50:	4b18      	ldr	r3, [pc, #96]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8011c56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011c58:	4b16      	ldr	r3, [pc, #88]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011c5e:	4b15      	ldr	r3, [pc, #84]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c60:	2200      	movs	r2, #0
 8011c62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011c64:	4b13      	ldr	r3, [pc, #76]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8011c6c:	4b11      	ldr	r3, [pc, #68]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c6e:	2218      	movs	r2, #24
 8011c70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011c72:	4b10      	ldr	r3, [pc, #64]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011c78:	4b0e      	ldr	r3, [pc, #56]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011c7e:	4b0d      	ldr	r3, [pc, #52]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c80:	2200      	movs	r2, #0
 8011c82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8011c84:	4b0b      	ldr	r3, [pc, #44]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c86:	2207      	movs	r2, #7
 8011c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011c8a:	4b0a      	ldr	r3, [pc, #40]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011c90:	4b08      	ldr	r3, [pc, #32]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c92:	2208      	movs	r2, #8
 8011c94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8011c96:	4807      	ldr	r0, [pc, #28]	; (8011cb4 <_ZL12MX_SPI3_Initv+0x7c>)
 8011c98:	f006 fc8c 	bl	80185b4 <HAL_SPI_Init>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	bf14      	ite	ne
 8011ca2:	2301      	movne	r3, #1
 8011ca4:	2300      	moveq	r3, #0
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d001      	beq.n	8011cb0 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8011cac:	f000 fc6f 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8011cb0:	bf00      	nop
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	20000a08 	.word	0x20000a08
 8011cb8:	40003c00 	.word	0x40003c00

08011cbc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b08c      	sub	sp, #48	; 0x30
 8011cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011cc2:	f107 0320 	add.w	r3, r7, #32
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	605a      	str	r2, [r3, #4]
 8011ccc:	609a      	str	r2, [r3, #8]
 8011cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011cd0:	f107 0314 	add.w	r3, r7, #20
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	601a      	str	r2, [r3, #0]
 8011cd8:	605a      	str	r2, [r3, #4]
 8011cda:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8011cdc:	1d3b      	adds	r3, r7, #4
 8011cde:	2200      	movs	r2, #0
 8011ce0:	601a      	str	r2, [r3, #0]
 8011ce2:	605a      	str	r2, [r3, #4]
 8011ce4:	609a      	str	r2, [r3, #8]
 8011ce6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8011ce8:	4b43      	ldr	r3, [pc, #268]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011cea:	4a44      	ldr	r2, [pc, #272]	; (8011dfc <_ZL12MX_TIM1_Initv+0x140>)
 8011cec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 110;
 8011cee:	4b42      	ldr	r3, [pc, #264]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011cf0:	226e      	movs	r2, #110	; 0x6e
 8011cf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011cf4:	4b40      	ldr	r3, [pc, #256]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8011cfa:	4b3f      	ldr	r3, [pc, #252]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011cfc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011d00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011d02:	4b3d      	ldr	r3, [pc, #244]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d04:	2200      	movs	r2, #0
 8011d06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8011d08:	4b3b      	ldr	r3, [pc, #236]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8011d0e:	4b3a      	ldr	r3, [pc, #232]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d10:	2280      	movs	r2, #128	; 0x80
 8011d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8011d14:	4838      	ldr	r0, [pc, #224]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d16:	f007 fb5d 	bl	80193d4 <HAL_TIM_Base_Init>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	bf14      	ite	ne
 8011d20:	2301      	movne	r3, #1
 8011d22:	2300      	moveq	r3, #0
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d001      	beq.n	8011d2e <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 8011d2a:	f000 fc30 	bl	801258e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d32:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011d34:	f107 0320 	add.w	r3, r7, #32
 8011d38:	4619      	mov	r1, r3
 8011d3a:	482f      	ldr	r0, [pc, #188]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d3c:	f008 fb88 	bl	801a450 <HAL_TIM_ConfigClockSource>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	bf14      	ite	ne
 8011d46:	2301      	movne	r3, #1
 8011d48:	2300      	moveq	r3, #0
 8011d4a:	b2db      	uxtb	r3, r3
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d001      	beq.n	8011d54 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 8011d50:	f000 fc1d 	bl	801258e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8011d54:	4828      	ldr	r0, [pc, #160]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d56:	f007 fdcb 	bl	80198f0 <HAL_TIM_IC_Init>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	bf14      	ite	ne
 8011d60:	2301      	movne	r3, #1
 8011d62:	2300      	moveq	r3, #0
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8011d6a:	f000 fc10 	bl	801258e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8011d72:	2300      	movs	r3, #0
 8011d74:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011d76:	2300      	movs	r3, #0
 8011d78:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011d7a:	f107 0314 	add.w	r3, r7, #20
 8011d7e:	4619      	mov	r1, r3
 8011d80:	481d      	ldr	r0, [pc, #116]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011d82:	f009 f9e7 	bl	801b154 <HAL_TIMEx_MasterConfigSynchronization>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	bf14      	ite	ne
 8011d8c:	2301      	movne	r3, #1
 8011d8e:	2300      	moveq	r3, #0
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d001      	beq.n	8011d9a <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 8011d96:	f000 fbfa 	bl	801258e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8011d9e:	2301      	movs	r3, #1
 8011da0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8011da2:	2300      	movs	r3, #0
 8011da4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8011da6:	2300      	movs	r3, #0
 8011da8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8011daa:	1d3b      	adds	r3, r7, #4
 8011dac:	2208      	movs	r2, #8
 8011dae:	4619      	mov	r1, r3
 8011db0:	4811      	ldr	r0, [pc, #68]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011db2:	f008 f99c 	bl	801a0ee <HAL_TIM_IC_ConfigChannel>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	bf14      	ite	ne
 8011dbc:	2301      	movne	r3, #1
 8011dbe:	2300      	moveq	r3, #0
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d001      	beq.n	8011dca <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8011dc6:	f000 fbe2 	bl	801258e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8011dca:	2302      	movs	r3, #2
 8011dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8011dce:	1d3b      	adds	r3, r7, #4
 8011dd0:	220c      	movs	r2, #12
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4808      	ldr	r0, [pc, #32]	; (8011df8 <_ZL12MX_TIM1_Initv+0x13c>)
 8011dd6:	f008 f98a 	bl	801a0ee <HAL_TIM_IC_ConfigChannel>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	bf14      	ite	ne
 8011de0:	2301      	movne	r3, #1
 8011de2:	2300      	moveq	r3, #0
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d001      	beq.n	8011dee <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8011dea:	f000 fbd0 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8011dee:	bf00      	nop
 8011df0:	3730      	adds	r7, #48	; 0x30
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	20000a6c 	.word	0x20000a6c
 8011dfc:	40012c00 	.word	0x40012c00

08011e00 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b08c      	sub	sp, #48	; 0x30
 8011e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8011e06:	f107 030c 	add.w	r3, r7, #12
 8011e0a:	2224      	movs	r2, #36	; 0x24
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f010 fc49 	bl	80226a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011e14:	463b      	mov	r3, r7
 8011e16:	2200      	movs	r2, #0
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	605a      	str	r2, [r3, #4]
 8011e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011e1e:	4b26      	ldr	r3, [pc, #152]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e20:	4a26      	ldr	r2, [pc, #152]	; (8011ebc <_ZL12MX_TIM3_Initv+0xbc>)
 8011e22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8011e24:	4b24      	ldr	r3, [pc, #144]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e26:	2200      	movs	r2, #0
 8011e28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011e2a:	4b23      	ldr	r3, [pc, #140]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8011e30:	4b21      	ldr	r3, [pc, #132]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011e38:	4b1f      	ldr	r3, [pc, #124]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011e3e:	4b1e      	ldr	r3, [pc, #120]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e40:	2200      	movs	r2, #0
 8011e42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8011e44:	2303      	movs	r3, #3
 8011e46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8011e50:	2300      	movs	r3, #0
 8011e52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8011e54:	2300      	movs	r3, #0
 8011e56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8011e60:	2300      	movs	r3, #0
 8011e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8011e68:	f107 030c 	add.w	r3, r7, #12
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	4812      	ldr	r0, [pc, #72]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e70:	f007 feea 	bl	8019c48 <HAL_TIM_Encoder_Init>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	bf14      	ite	ne
 8011e7a:	2301      	movne	r3, #1
 8011e7c:	2300      	moveq	r3, #0
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <_ZL12MX_TIM3_Initv+0x88>
  {
    Error_Handler();
 8011e84:	f000 fb83 	bl	801258e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011e90:	463b      	mov	r3, r7
 8011e92:	4619      	mov	r1, r3
 8011e94:	4808      	ldr	r0, [pc, #32]	; (8011eb8 <_ZL12MX_TIM3_Initv+0xb8>)
 8011e96:	f009 f95d 	bl	801b154 <HAL_TIMEx_MasterConfigSynchronization>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	bf14      	ite	ne
 8011ea0:	2301      	movne	r3, #1
 8011ea2:	2300      	moveq	r3, #0
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d001      	beq.n	8011eae <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 8011eaa:	f000 fb70 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8011eae:	bf00      	nop
 8011eb0:	3730      	adds	r7, #48	; 0x30
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20000ab8 	.word	0x20000ab8
 8011ebc:	40000400 	.word	0x40000400

08011ec0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b08e      	sub	sp, #56	; 0x38
 8011ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011eca:	2200      	movs	r2, #0
 8011ecc:	601a      	str	r2, [r3, #0]
 8011ece:	605a      	str	r2, [r3, #4]
 8011ed0:	609a      	str	r2, [r3, #8]
 8011ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011ed4:	f107 031c 	add.w	r3, r7, #28
 8011ed8:	2200      	movs	r2, #0
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	605a      	str	r2, [r3, #4]
 8011ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011ee0:	463b      	mov	r3, r7
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	605a      	str	r2, [r3, #4]
 8011ee8:	609a      	str	r2, [r3, #8]
 8011eea:	60da      	str	r2, [r3, #12]
 8011eec:	611a      	str	r2, [r3, #16]
 8011eee:	615a      	str	r2, [r3, #20]
 8011ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8011ef2:	4b41      	ldr	r3, [pc, #260]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011ef4:	4a41      	ldr	r2, [pc, #260]	; (8011ffc <_ZL12MX_TIM5_Initv+0x13c>)
 8011ef6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8011ef8:	4b3f      	ldr	r3, [pc, #252]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011efa:	2200      	movs	r2, #0
 8011efc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8011efe:	4b3e      	ldr	r3, [pc, #248]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f00:	2220      	movs	r2, #32
 8011f02:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1834;
 8011f04:	4b3c      	ldr	r3, [pc, #240]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f06:	f240 722a 	movw	r2, #1834	; 0x72a
 8011f0a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011f0c:	4b3a      	ldr	r3, [pc, #232]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8011f12:	4b39      	ldr	r3, [pc, #228]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f14:	2280      	movs	r2, #128	; 0x80
 8011f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8011f18:	4837      	ldr	r0, [pc, #220]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f1a:	f007 fa5b 	bl	80193d4 <HAL_TIM_Base_Init>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	bf14      	ite	ne
 8011f24:	2301      	movne	r3, #1
 8011f26:	2300      	moveq	r3, #0
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d001      	beq.n	8011f32 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 8011f2e:	f000 fb2e 	bl	801258e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8011f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	482e      	ldr	r0, [pc, #184]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f40:	f008 fa86 	bl	801a450 <HAL_TIM_ConfigClockSource>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	bf14      	ite	ne
 8011f4a:	2301      	movne	r3, #1
 8011f4c:	2300      	moveq	r3, #0
 8011f4e:	b2db      	uxtb	r3, r3
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d001      	beq.n	8011f58 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 8011f54:	f000 fb1b 	bl	801258e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8011f58:	4827      	ldr	r0, [pc, #156]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f5a:	f007 fb6b 	bl	8019634 <HAL_TIM_PWM_Init>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	bf14      	ite	ne
 8011f64:	2301      	movne	r3, #1
 8011f66:	2300      	moveq	r3, #0
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d001      	beq.n	8011f72 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 8011f6e:	f000 fb0e 	bl	801258e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011f72:	2300      	movs	r3, #0
 8011f74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011f76:	2300      	movs	r3, #0
 8011f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8011f7a:	f107 031c 	add.w	r3, r7, #28
 8011f7e:	4619      	mov	r1, r3
 8011f80:	481d      	ldr	r0, [pc, #116]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011f82:	f009 f8e7 	bl	801b154 <HAL_TIMEx_MasterConfigSynchronization>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	bf14      	ite	ne
 8011f8c:	2301      	movne	r3, #1
 8011f8e:	2300      	moveq	r3, #0
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8011f96:	f000 fafa 	bl	801258e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011f9a:	2360      	movs	r3, #96	; 0x60
 8011f9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011faa:	463b      	mov	r3, r7
 8011fac:	2200      	movs	r2, #0
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4811      	ldr	r0, [pc, #68]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011fb2:	f008 f939 	bl	801a228 <HAL_TIM_PWM_ConfigChannel>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	bf14      	ite	ne
 8011fbc:	2301      	movne	r3, #1
 8011fbe:	2300      	moveq	r3, #0
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d001      	beq.n	8011fca <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 8011fc6:	f000 fae2 	bl	801258e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8011fca:	463b      	mov	r3, r7
 8011fcc:	220c      	movs	r2, #12
 8011fce:	4619      	mov	r1, r3
 8011fd0:	4809      	ldr	r0, [pc, #36]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011fd2:	f008 f929 	bl	801a228 <HAL_TIM_PWM_ConfigChannel>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	bf14      	ite	ne
 8011fdc:	2301      	movne	r3, #1
 8011fde:	2300      	moveq	r3, #0
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d001      	beq.n	8011fea <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 8011fe6:	f000 fad2 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8011fea:	4803      	ldr	r0, [pc, #12]	; (8011ff8 <_ZL12MX_TIM5_Initv+0x138>)
 8011fec:	f000 ff2c 	bl	8012e48 <HAL_TIM_MspPostInit>

}
 8011ff0:	bf00      	nop
 8011ff2:	3738      	adds	r7, #56	; 0x38
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	20000b04 	.word	0x20000b04
 8011ffc:	40000c00 	.word	0x40000c00

08012000 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012006:	1d3b      	adds	r3, r7, #4
 8012008:	2200      	movs	r2, #0
 801200a:	601a      	str	r2, [r3, #0]
 801200c:	605a      	str	r2, [r3, #4]
 801200e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012010:	4b19      	ldr	r3, [pc, #100]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 8012012:	4a1a      	ldr	r2, [pc, #104]	; (801207c <_ZL12MX_TIM6_Initv+0x7c>)
 8012014:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 110;
 8012016:	4b18      	ldr	r3, [pc, #96]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 8012018:	226e      	movs	r2, #110	; 0x6e
 801201a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801201c:	4b16      	ldr	r3, [pc, #88]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 801201e:	2200      	movs	r2, #0
 8012020:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012022:	4b15      	ldr	r3, [pc, #84]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 8012024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012028:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801202a:	4b13      	ldr	r3, [pc, #76]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 801202c:	2200      	movs	r2, #0
 801202e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012030:	4811      	ldr	r0, [pc, #68]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 8012032:	f007 f9cf 	bl	80193d4 <HAL_TIM_Base_Init>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	bf14      	ite	ne
 801203c:	2301      	movne	r3, #1
 801203e:	2300      	moveq	r3, #0
 8012040:	b2db      	uxtb	r3, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	d001      	beq.n	801204a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8012046:	f000 faa2 	bl	801258e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801204a:	2300      	movs	r3, #0
 801204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801204e:	2300      	movs	r3, #0
 8012050:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012052:	1d3b      	adds	r3, r7, #4
 8012054:	4619      	mov	r1, r3
 8012056:	4808      	ldr	r0, [pc, #32]	; (8012078 <_ZL12MX_TIM6_Initv+0x78>)
 8012058:	f009 f87c 	bl	801b154 <HAL_TIMEx_MasterConfigSynchronization>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	bf14      	ite	ne
 8012062:	2301      	movne	r3, #1
 8012064:	2300      	moveq	r3, #0
 8012066:	b2db      	uxtb	r3, r3
 8012068:	2b00      	cmp	r3, #0
 801206a:	d001      	beq.n	8012070 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 801206c:	f000 fa8f 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012070:	bf00      	nop
 8012072:	3710      	adds	r7, #16
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	20000b50 	.word	0x20000b50
 801207c:	40001000 	.word	0x40001000

08012080 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b098      	sub	sp, #96	; 0x60
 8012084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012086:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801208a:	2200      	movs	r2, #0
 801208c:	601a      	str	r2, [r3, #0]
 801208e:	605a      	str	r2, [r3, #4]
 8012090:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012092:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012096:	2200      	movs	r2, #0
 8012098:	601a      	str	r2, [r3, #0]
 801209a:	605a      	str	r2, [r3, #4]
 801209c:	609a      	str	r2, [r3, #8]
 801209e:	60da      	str	r2, [r3, #12]
 80120a0:	611a      	str	r2, [r3, #16]
 80120a2:	615a      	str	r2, [r3, #20]
 80120a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80120a6:	1d3b      	adds	r3, r7, #4
 80120a8:	2234      	movs	r2, #52	; 0x34
 80120aa:	2100      	movs	r1, #0
 80120ac:	4618      	mov	r0, r3
 80120ae:	f010 fafa 	bl	80226a6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80120b2:	4b45      	ldr	r3, [pc, #276]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120b4:	4a45      	ldr	r2, [pc, #276]	; (80121cc <_ZL12MX_TIM8_Initv+0x14c>)
 80120b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 110;
 80120b8:	4b43      	ldr	r3, [pc, #268]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120ba:	226e      	movs	r2, #110	; 0x6e
 80120bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80120be:	4b42      	ldr	r3, [pc, #264]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120c0:	2200      	movs	r2, #0
 80120c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = PWM_PERIOD;
 80120c4:	4b40      	ldr	r3, [pc, #256]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80120ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80120cc:	4b3e      	ldr	r3, [pc, #248]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120ce:	2200      	movs	r2, #0
 80120d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80120d2:	4b3d      	ldr	r3, [pc, #244]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80120d8:	4b3b      	ldr	r3, [pc, #236]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120da:	2200      	movs	r2, #0
 80120dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80120de:	483a      	ldr	r0, [pc, #232]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80120e0:	f007 faa8 	bl	8019634 <HAL_TIM_PWM_Init>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	bf14      	ite	ne
 80120ea:	2301      	movne	r3, #1
 80120ec:	2300      	moveq	r3, #0
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d001      	beq.n	80120f8 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 80120f4:	f000 fa4b 	bl	801258e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80120f8:	2300      	movs	r3, #0
 80120fa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80120fc:	2300      	movs	r3, #0
 80120fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012100:	2300      	movs	r3, #0
 8012102:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8012104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012108:	4619      	mov	r1, r3
 801210a:	482f      	ldr	r0, [pc, #188]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 801210c:	f009 f822 	bl	801b154 <HAL_TIMEx_MasterConfigSynchronization>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	bf14      	ite	ne
 8012116:	2301      	movne	r3, #1
 8012118:	2300      	moveq	r3, #0
 801211a:	b2db      	uxtb	r3, r3
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8012120:	f000 fa35 	bl	801258e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012124:	2360      	movs	r3, #96	; 0x60
 8012126:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8012128:	2300      	movs	r3, #0
 801212a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801212c:	2300      	movs	r3, #0
 801212e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012130:	2300      	movs	r3, #0
 8012132:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012134:	2300      	movs	r3, #0
 8012136:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8012138:	2300      	movs	r3, #0
 801213a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801213c:	2300      	movs	r3, #0
 801213e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012140:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012144:	2200      	movs	r2, #0
 8012146:	4619      	mov	r1, r3
 8012148:	481f      	ldr	r0, [pc, #124]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 801214a:	f008 f86d 	bl	801a228 <HAL_TIM_PWM_ConfigChannel>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	bf14      	ite	ne
 8012154:	2301      	movne	r3, #1
 8012156:	2300      	moveq	r3, #0
 8012158:	b2db      	uxtb	r3, r3
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 801215e:	f000 fa16 	bl	801258e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8012162:	2300      	movs	r3, #0
 8012164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8012166:	2300      	movs	r3, #0
 8012168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801216a:	2300      	movs	r3, #0
 801216c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801216e:	2300      	movs	r3, #0
 8012170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8012172:	2300      	movs	r3, #0
 8012174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8012176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801217a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801217c:	2300      	movs	r3, #0
 801217e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8012180:	2300      	movs	r3, #0
 8012182:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8012184:	2300      	movs	r3, #0
 8012186:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8012188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801218c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 801218e:	2300      	movs	r3, #0
 8012190:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8012192:	2300      	movs	r3, #0
 8012194:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8012196:	2300      	movs	r3, #0
 8012198:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801219a:	1d3b      	adds	r3, r7, #4
 801219c:	4619      	mov	r1, r3
 801219e:	480a      	ldr	r0, [pc, #40]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80121a0:	f009 f860 	bl	801b264 <HAL_TIMEx_ConfigBreakDeadTime>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	bf14      	ite	ne
 80121aa:	2301      	movne	r3, #1
 80121ac:	2300      	moveq	r3, #0
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <_ZL12MX_TIM8_Initv+0x138>
  {
    Error_Handler();
 80121b4:	f000 f9eb 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80121b8:	4803      	ldr	r0, [pc, #12]	; (80121c8 <_ZL12MX_TIM8_Initv+0x148>)
 80121ba:	f000 fe45 	bl	8012e48 <HAL_TIM_MspPostInit>

}
 80121be:	bf00      	nop
 80121c0:	3760      	adds	r7, #96	; 0x60
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	20000b9c 	.word	0x20000b9c
 80121cc:	40013400 	.word	0x40013400

080121d0 <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b086      	sub	sp, #24
 80121d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121d6:	463b      	mov	r3, r7
 80121d8:	2200      	movs	r2, #0
 80121da:	601a      	str	r2, [r3, #0]
 80121dc:	605a      	str	r2, [r3, #4]
 80121de:	609a      	str	r2, [r3, #8]
 80121e0:	60da      	str	r2, [r3, #12]
 80121e2:	611a      	str	r2, [r3, #16]
 80121e4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80121e6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80121ea:	f7ff f8a5 	bl	8011338 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80121ee:	2002      	movs	r0, #2
 80121f0:	f7ff f88a 	bl	8011308 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80121f4:	2001      	movs	r0, #1
 80121f6:	f7ff f887 	bl	8011308 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80121fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80121fe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8012200:	2303      	movs	r3, #3
 8012202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8012204:	2300      	movs	r3, #0
 8012206:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012208:	463b      	mov	r3, r7
 801220a:	4619      	mov	r1, r3
 801220c:	4809      	ldr	r0, [pc, #36]	; (8012234 <_ZL13MX_UCPD1_Initv+0x64>)
 801220e:	f00b fb5c 	bl	801d8ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8012212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012216:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8012218:	2303      	movs	r3, #3
 801221a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801221c:	2300      	movs	r3, #0
 801221e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012220:	463b      	mov	r3, r7
 8012222:	4619      	mov	r1, r3
 8012224:	4804      	ldr	r0, [pc, #16]	; (8012238 <_ZL13MX_UCPD1_Initv+0x68>)
 8012226:	f00b fb50 	bl	801d8ca <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 801222a:	bf00      	nop
 801222c:	3718      	adds	r7, #24
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	42020400 	.word	0x42020400
 8012238:	42020000 	.word	0x42020000

0801223c <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8012240:	4b13      	ldr	r3, [pc, #76]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 8012242:	4a14      	ldr	r2, [pc, #80]	; (8012294 <_ZL15MX_USB_PCD_Initv+0x58>)
 8012244:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012246:	4b12      	ldr	r3, [pc, #72]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 8012248:	2208      	movs	r2, #8
 801224a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801224c:	4b10      	ldr	r3, [pc, #64]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 801224e:	2202      	movs	r2, #2
 8012250:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012252:	4b0f      	ldr	r3, [pc, #60]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 8012254:	2202      	movs	r2, #2
 8012256:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012258:	4b0d      	ldr	r3, [pc, #52]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 801225a:	2200      	movs	r2, #0
 801225c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801225e:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 8012260:	2200      	movs	r2, #0
 8012262:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012264:	4b0a      	ldr	r3, [pc, #40]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 8012266:	2200      	movs	r2, #0
 8012268:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801226a:	4b09      	ldr	r3, [pc, #36]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 801226c:	2200      	movs	r2, #0
 801226e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012270:	4807      	ldr	r0, [pc, #28]	; (8012290 <_ZL15MX_USB_PCD_Initv+0x54>)
 8012272:	f004 f9b1 	bl	80165d8 <HAL_PCD_Init>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	bf14      	ite	ne
 801227c:	2301      	movne	r3, #1
 801227e:	2300      	moveq	r3, #0
 8012280:	b2db      	uxtb	r3, r3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d001      	beq.n	801228a <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8012286:	f000 f982 	bl	801258e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 801228a:	bf00      	nop
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20000be8 	.word	0x20000be8
 8012294:	4000d400 	.word	0x4000d400

08012298 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801229e:	4b12      	ldr	r3, [pc, #72]	; (80122e8 <_ZL11MX_DMA_Initv+0x50>)
 80122a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122a2:	4a11      	ldr	r2, [pc, #68]	; (80122e8 <_ZL11MX_DMA_Initv+0x50>)
 80122a4:	f043 0304 	orr.w	r3, r3, #4
 80122a8:	6493      	str	r3, [r2, #72]	; 0x48
 80122aa:	4b0f      	ldr	r3, [pc, #60]	; (80122e8 <_ZL11MX_DMA_Initv+0x50>)
 80122ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122ae:	f003 0304 	and.w	r3, r3, #4
 80122b2:	607b      	str	r3, [r7, #4]
 80122b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80122b6:	4b0c      	ldr	r3, [pc, #48]	; (80122e8 <_ZL11MX_DMA_Initv+0x50>)
 80122b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122ba:	4a0b      	ldr	r2, [pc, #44]	; (80122e8 <_ZL11MX_DMA_Initv+0x50>)
 80122bc:	f043 0301 	orr.w	r3, r3, #1
 80122c0:	6493      	str	r3, [r2, #72]	; 0x48
 80122c2:	4b09      	ldr	r3, [pc, #36]	; (80122e8 <_ZL11MX_DMA_Initv+0x50>)
 80122c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122c6:	f003 0301 	and.w	r3, r3, #1
 80122ca:	603b      	str	r3, [r7, #0]
 80122cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80122ce:	2200      	movs	r2, #0
 80122d0:	2105      	movs	r1, #5
 80122d2:	201d      	movs	r0, #29
 80122d4:	f002 fe24 	bl	8014f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80122d8:	201d      	movs	r0, #29
 80122da:	f002 fe3b 	bl	8014f54 <HAL_NVIC_EnableIRQ>

}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	40021000 	.word	0x40021000

080122ec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b08c      	sub	sp, #48	; 0x30
 80122f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122f2:	f107 031c 	add.w	r3, r7, #28
 80122f6:	2200      	movs	r2, #0
 80122f8:	601a      	str	r2, [r3, #0]
 80122fa:	605a      	str	r2, [r3, #4]
 80122fc:	609a      	str	r2, [r3, #8]
 80122fe:	60da      	str	r2, [r3, #12]
 8012300:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012302:	4b8b      	ldr	r3, [pc, #556]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012306:	4a8a      	ldr	r2, [pc, #552]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012308:	f043 0310 	orr.w	r3, r3, #16
 801230c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801230e:	4b88      	ldr	r3, [pc, #544]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012312:	f003 0310 	and.w	r3, r3, #16
 8012316:	61bb      	str	r3, [r7, #24]
 8012318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801231a:	4b85      	ldr	r3, [pc, #532]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 801231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801231e:	4a84      	ldr	r2, [pc, #528]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012320:	f043 0304 	orr.w	r3, r3, #4
 8012324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012326:	4b82      	ldr	r3, [pc, #520]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801232a:	f003 0304 	and.w	r3, r3, #4
 801232e:	617b      	str	r3, [r7, #20]
 8012330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012332:	4b7f      	ldr	r3, [pc, #508]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012336:	4a7e      	ldr	r2, [pc, #504]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012338:	f043 0320 	orr.w	r3, r3, #32
 801233c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801233e:	4b7c      	ldr	r3, [pc, #496]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012342:	f003 0320 	and.w	r3, r3, #32
 8012346:	613b      	str	r3, [r7, #16]
 8012348:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801234a:	4b79      	ldr	r3, [pc, #484]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 801234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801234e:	4a78      	ldr	r2, [pc, #480]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012350:	f043 0301 	orr.w	r3, r3, #1
 8012354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012356:	4b76      	ldr	r3, [pc, #472]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801235a:	f003 0301 	and.w	r3, r3, #1
 801235e:	60fb      	str	r3, [r7, #12]
 8012360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012362:	4b73      	ldr	r3, [pc, #460]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012366:	4a72      	ldr	r2, [pc, #456]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012368:	f043 0302 	orr.w	r3, r3, #2
 801236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801236e:	4b70      	ldr	r3, [pc, #448]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012372:	f003 0302 	and.w	r3, r3, #2
 8012376:	60bb      	str	r3, [r7, #8]
 8012378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801237a:	4b6d      	ldr	r3, [pc, #436]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 801237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801237e:	4a6c      	ldr	r2, [pc, #432]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012380:	f043 0308 	orr.w	r3, r3, #8
 8012384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012386:	4b6a      	ldr	r3, [pc, #424]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801238a:	f003 0308 	and.w	r3, r3, #8
 801238e:	607b      	str	r3, [r7, #4]
 8012390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012392:	4b67      	ldr	r3, [pc, #412]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012396:	4a66      	ldr	r2, [pc, #408]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 8012398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801239e:	4b64      	ldr	r3, [pc, #400]	; (8012530 <_ZL12MX_GPIO_Initv+0x244>)
 80123a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123a6:	603b      	str	r3, [r7, #0]
 80123a8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80123aa:	f004 fa93 	bl	80168d4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DRIVE_ENABLE_Pin|MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin, GPIO_PIN_RESET);
 80123ae:	2200      	movs	r2, #0
 80123b0:	f24e 0108 	movw	r1, #57352	; 0xe008
 80123b4:	485f      	ldr	r0, [pc, #380]	; (8012534 <_ZL12MX_GPIO_Initv+0x248>)
 80123b6:	f003 fb09 	bl	80159cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80123ba:	2200      	movs	r2, #0
 80123bc:	21a4      	movs	r1, #164	; 0xa4
 80123be:	485e      	ldr	r0, [pc, #376]	; (8012538 <_ZL12MX_GPIO_Initv+0x24c>)
 80123c0:	f003 fb04 	bl	80159cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 80123c4:	2200      	movs	r2, #0
 80123c6:	f64f 7187 	movw	r1, #65415	; 0xff87
 80123ca:	485c      	ldr	r0, [pc, #368]	; (801253c <_ZL12MX_GPIO_Initv+0x250>)
 80123cc:	f003 fafe 	bl	80159cc <HAL_GPIO_WritePin>
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80123d0:	2200      	movs	r2, #0
 80123d2:	2180      	movs	r1, #128	; 0x80
 80123d4:	485a      	ldr	r0, [pc, #360]	; (8012540 <_ZL12MX_GPIO_Initv+0x254>)
 80123d6:	f003 faf9 	bl	80159cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80123da:	2200      	movs	r2, #0
 80123dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80123e0:	4858      	ldr	r0, [pc, #352]	; (8012544 <_ZL12MX_GPIO_Initv+0x258>)
 80123e2:	f003 faf3 	bl	80159cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 80123e6:	2200      	movs	r2, #0
 80123e8:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 80123ec:	4856      	ldr	r0, [pc, #344]	; (8012548 <_ZL12MX_GPIO_Initv+0x25c>)
 80123ee:	f003 faed 	bl	80159cc <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DRIVE_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRIVE_ENABLE_Pin;
 80123f2:	2308      	movs	r3, #8
 80123f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80123f6:	2301      	movs	r3, #1
 80123f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80123fa:	2302      	movs	r3, #2
 80123fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80123fe:	2303      	movs	r3, #3
 8012400:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DRIVE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8012402:	f107 031c 	add.w	r3, r7, #28
 8012406:	4619      	mov	r1, r3
 8012408:	484a      	ldr	r0, [pc, #296]	; (8012534 <_ZL12MX_GPIO_Initv+0x248>)
 801240a:	f003 f95f 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_FB_Pin REMOTE_GAS_Pin REMOTE_STEER_Pin */
  GPIO_InitStruct.Pin = MCU_FB_Pin|REMOTE_GAS_Pin|REMOTE_STEER_Pin;
 801240e:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8012412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012414:	2300      	movs	r3, #0
 8012416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012418:	2300      	movs	r3, #0
 801241a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801241c:	f107 031c 	add.w	r3, r7, #28
 8012420:	4619      	mov	r1, r3
 8012422:	4844      	ldr	r0, [pc, #272]	; (8012534 <_ZL12MX_GPIO_Initv+0x248>)
 8012424:	f003 f952 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : MAX_CS_Pin UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = MAX_CS_Pin|UCPD_DBN_Pin|LED_BLUE_Pin;
 8012428:	23a4      	movs	r3, #164	; 0xa4
 801242a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801242c:	2301      	movs	r3, #1
 801242e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012430:	2300      	movs	r3, #0
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012434:	2300      	movs	r3, #0
 8012436:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012438:	f107 031c 	add.w	r3, r7, #28
 801243c:	4619      	mov	r1, r3
 801243e:	483e      	ldr	r0, [pc, #248]	; (8012538 <_ZL12MX_GPIO_Initv+0x24c>)
 8012440:	f003 f944 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_Pin MOT_BATT_L_Pin LV_BATT_L_Pin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|MOT_BATT_L_Pin|LV_BATT_L_Pin;
 8012444:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8012448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801244a:	2301      	movs	r3, #1
 801244c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801244e:	2300      	movs	r3, #0
 8012450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012452:	2300      	movs	r3, #0
 8012454:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012456:	f107 031c 	add.w	r3, r7, #28
 801245a:	4619      	mov	r1, r3
 801245c:	4835      	ldr	r0, [pc, #212]	; (8012534 <_ZL12MX_GPIO_Initv+0x248>)
 801245e:	f003 f935 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin ROTARY1_Pin ROTARY2_Pin ROTARY3_Pin
                           ROTARY4_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|ROTARY1_Pin|ROTARY2_Pin|ROTARY3_Pin
 8012462:	f643 6301 	movw	r3, #15873	; 0x3e01
 8012466:	61fb      	str	r3, [r7, #28]
                          |ROTARY4_Pin|BUTTON1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012468:	2300      	movs	r3, #0
 801246a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801246c:	2300      	movs	r3, #0
 801246e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012470:	f107 031c 	add.w	r3, r7, #28
 8012474:	4619      	mov	r1, r3
 8012476:	4835      	ldr	r0, [pc, #212]	; (801254c <_ZL12MX_GPIO_Initv+0x260>)
 8012478:	f003 f928 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 801247c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012482:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8012486:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012488:	2300      	movs	r3, #0
 801248a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 801248c:	f107 031c 	add.w	r3, r7, #28
 8012490:	4619      	mov	r1, r3
 8012492:	4829      	ldr	r0, [pc, #164]	; (8012538 <_ZL12MX_GPIO_Initv+0x24c>)
 8012494:	f003 f91a 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ADCF1_CS_Pin ADCF2_CS_Pin ADCF3_CS_Pin ADCF4_CS_Pin
                           ADCR1_CS_Pin ADCR2_CS_Pin ADCR3_CS_Pin ADCR4_CS_Pin
                           INFRA_LE_F_Pin LED_LE_F_Pin INFRA_OE_F_Pin LED_OE_F_Pin */
  GPIO_InitStruct.Pin = ADCF1_CS_Pin|ADCF2_CS_Pin|ADCF3_CS_Pin|ADCF4_CS_Pin
 8012498:	f64f 7387 	movw	r3, #65415	; 0xff87
 801249c:	61fb      	str	r3, [r7, #28]
                          |ADCR1_CS_Pin|ADCR2_CS_Pin|ADCR3_CS_Pin|ADCR4_CS_Pin
                          |INFRA_LE_F_Pin|LED_LE_F_Pin|INFRA_OE_F_Pin|LED_OE_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801249e:	2301      	movs	r3, #1
 80124a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124a2:	2300      	movs	r3, #0
 80124a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124a6:	2300      	movs	r3, #0
 80124a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80124aa:	f107 031c 	add.w	r3, r7, #28
 80124ae:	4619      	mov	r1, r3
 80124b0:	4822      	ldr	r0, [pc, #136]	; (801253c <_ZL12MX_GPIO_Initv+0x250>)
 80124b2:	f003 f90b 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_BUTTON_Pin SET_BUTTON_Pin LED2_Pin */
  GPIO_InitStruct.Pin = RESET_BUTTON_Pin|SET_BUTTON_Pin|LED2_Pin;
 80124b6:	2370      	movs	r3, #112	; 0x70
 80124b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80124ba:	2300      	movs	r3, #0
 80124bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124be:	2300      	movs	r3, #0
 80124c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80124c2:	f107 031c 	add.w	r3, r7, #28
 80124c6:	4619      	mov	r1, r3
 80124c8:	481f      	ldr	r0, [pc, #124]	; (8012548 <_ZL12MX_GPIO_Initv+0x25c>)
 80124ca:	f003 f8ff 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80124ce:	2380      	movs	r3, #128	; 0x80
 80124d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124d2:	2301      	movs	r3, #1
 80124d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124d6:	2300      	movs	r3, #0
 80124d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124da:	2300      	movs	r3, #0
 80124dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80124de:	f107 031c 	add.w	r3, r7, #28
 80124e2:	4619      	mov	r1, r3
 80124e4:	4816      	ldr	r0, [pc, #88]	; (8012540 <_ZL12MX_GPIO_Initv+0x254>)
 80124e6:	f003 f8f1 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80124ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80124ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124f0:	2301      	movs	r3, #1
 80124f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124f4:	2300      	movs	r3, #0
 80124f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124f8:	2300      	movs	r3, #0
 80124fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80124fc:	f107 031c 	add.w	r3, r7, #28
 8012500:	4619      	mov	r1, r3
 8012502:	4810      	ldr	r0, [pc, #64]	; (8012544 <_ZL12MX_GPIO_Initv+0x258>)
 8012504:	f003 f8e2 	bl	80156cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INFRA_LE_R_Pin LED_LE_R_Pin INFRA_OE_R_Pin LED_OE_R_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = INFRA_LE_R_Pin|LED_LE_R_Pin|INFRA_OE_R_Pin|LED_OE_R_Pin
 8012508:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 801250c:	61fb      	str	r3, [r7, #28]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801250e:	2301      	movs	r3, #1
 8012510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012512:	2300      	movs	r3, #0
 8012514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012516:	2300      	movs	r3, #0
 8012518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801251a:	f107 031c 	add.w	r3, r7, #28
 801251e:	4619      	mov	r1, r3
 8012520:	4809      	ldr	r0, [pc, #36]	; (8012548 <_ZL12MX_GPIO_Initv+0x25c>)
 8012522:	f003 f8d3 	bl	80156cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8012526:	bf00      	nop
 8012528:	3730      	adds	r7, #48	; 0x30
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	40021000 	.word	0x40021000
 8012534:	42021400 	.word	0x42021400
 8012538:	42020400 	.word	0x42020400
 801253c:	42020c00 	.word	0x42020c00
 8012540:	42020800 	.word	0x42020800
 8012544:	42020000 	.word	0x42020000
 8012548:	42021800 	.word	0x42021800
 801254c:	42021000 	.word	0x42021000

08012550 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8012558:	f44f 7100 	mov.w	r1, #512	; 0x200
 801255c:	4803      	ldr	r0, [pc, #12]	; (801256c <_Z16StartDefaultTaskPv+0x1c>)
 801255e:	f003 fa4d 	bl	80159fc <HAL_GPIO_TogglePin>
	  vTaskDelay(100);
 8012562:	2064      	movs	r0, #100	; 0x64
 8012564:	f00c fa68 	bl	801ea38 <vTaskDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8012568:	e7f6      	b.n	8012558 <_Z16StartDefaultTaskPv+0x8>
 801256a:	bf00      	nop
 801256c:	42020000 	.word	0x42020000

08012570 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b082      	sub	sp, #8
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012580:	d101      	bne.n	8012586 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012582:	f000 ffb3 	bl	80134ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8012586:	bf00      	nop
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801258e:	b480      	push	{r7}
 8012590:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012592:	b672      	cpsid	i
}
 8012594:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012596:	e7fe      	b.n	8012596 <Error_Handler+0x8>

08012598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801259e:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <HAL_MspInit+0x4c>)
 80125a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125a2:	4a10      	ldr	r2, [pc, #64]	; (80125e4 <HAL_MspInit+0x4c>)
 80125a4:	f043 0301 	orr.w	r3, r3, #1
 80125a8:	6613      	str	r3, [r2, #96]	; 0x60
 80125aa:	4b0e      	ldr	r3, [pc, #56]	; (80125e4 <HAL_MspInit+0x4c>)
 80125ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125ae:	f003 0301 	and.w	r3, r3, #1
 80125b2:	607b      	str	r3, [r7, #4]
 80125b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80125b6:	4b0b      	ldr	r3, [pc, #44]	; (80125e4 <HAL_MspInit+0x4c>)
 80125b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125ba:	4a0a      	ldr	r2, [pc, #40]	; (80125e4 <HAL_MspInit+0x4c>)
 80125bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125c0:	6593      	str	r3, [r2, #88]	; 0x58
 80125c2:	4b08      	ldr	r3, [pc, #32]	; (80125e4 <HAL_MspInit+0x4c>)
 80125c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80125c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80125ca:	603b      	str	r3, [r7, #0]
 80125cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 80125ce:	2200      	movs	r2, #0
 80125d0:	2107      	movs	r1, #7
 80125d2:	f06f 0001 	mvn.w	r0, #1
 80125d6:	f002 fca3 	bl	8014f20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80125da:	bf00      	nop
 80125dc:	3708      	adds	r7, #8
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	40021000 	.word	0x40021000

080125e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b08c      	sub	sp, #48	; 0x30
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125f0:	f107 031c 	add.w	r3, r7, #28
 80125f4:	2200      	movs	r2, #0
 80125f6:	601a      	str	r2, [r3, #0]
 80125f8:	605a      	str	r2, [r3, #4]
 80125fa:	609a      	str	r2, [r3, #8]
 80125fc:	60da      	str	r2, [r3, #12]
 80125fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	4a4b      	ldr	r2, [pc, #300]	; (8012734 <HAL_ADC_MspInit+0x14c>)
 8012606:	4293      	cmp	r3, r2
 8012608:	f040 8090 	bne.w	801272c <HAL_ADC_MspInit+0x144>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801260c:	4b4a      	ldr	r3, [pc, #296]	; (8012738 <HAL_ADC_MspInit+0x150>)
 801260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012610:	4a49      	ldr	r2, [pc, #292]	; (8012738 <HAL_ADC_MspInit+0x150>)
 8012612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012618:	4b47      	ldr	r3, [pc, #284]	; (8012738 <HAL_ADC_MspInit+0x150>)
 801261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801261c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012620:	61bb      	str	r3, [r7, #24]
 8012622:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012624:	4b44      	ldr	r3, [pc, #272]	; (8012738 <HAL_ADC_MspInit+0x150>)
 8012626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012628:	4a43      	ldr	r2, [pc, #268]	; (8012738 <HAL_ADC_MspInit+0x150>)
 801262a:	f043 0304 	orr.w	r3, r3, #4
 801262e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012630:	4b41      	ldr	r3, [pc, #260]	; (8012738 <HAL_ADC_MspInit+0x150>)
 8012632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012634:	f003 0304 	and.w	r3, r3, #4
 8012638:	617b      	str	r3, [r7, #20]
 801263a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801263c:	4b3e      	ldr	r3, [pc, #248]	; (8012738 <HAL_ADC_MspInit+0x150>)
 801263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012640:	4a3d      	ldr	r2, [pc, #244]	; (8012738 <HAL_ADC_MspInit+0x150>)
 8012642:	f043 0301 	orr.w	r3, r3, #1
 8012646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012648:	4b3b      	ldr	r3, [pc, #236]	; (8012738 <HAL_ADC_MspInit+0x150>)
 801264a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801264c:	f003 0301 	and.w	r3, r3, #1
 8012650:	613b      	str	r3, [r7, #16]
 8012652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012654:	4b38      	ldr	r3, [pc, #224]	; (8012738 <HAL_ADC_MspInit+0x150>)
 8012656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012658:	4a37      	ldr	r2, [pc, #220]	; (8012738 <HAL_ADC_MspInit+0x150>)
 801265a:	f043 0302 	orr.w	r3, r3, #2
 801265e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012660:	4b35      	ldr	r3, [pc, #212]	; (8012738 <HAL_ADC_MspInit+0x150>)
 8012662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012664:	f003 0302 	and.w	r3, r3, #2
 8012668:	60fb      	str	r3, [r7, #12]
 801266a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = BATT_VOLTAGE_Pin|MOT_CURR_Pin|VBUS_SENSE_Pin|ENC_CHA_Pin;
 801266c:	230f      	movs	r3, #15
 801266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012670:	2303      	movs	r3, #3
 8012672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012674:	2300      	movs	r3, #0
 8012676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012678:	f107 031c 	add.w	r3, r7, #28
 801267c:	4619      	mov	r1, r3
 801267e:	482f      	ldr	r0, [pc, #188]	; (801273c <HAL_ADC_MspInit+0x154>)
 8012680:	f003 f824 	bl	80156cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DISTANCE2_ADC_Pin|DISTANCE1_ADC_Pin|DISTANCE3_ADC_Pin|LV_BATT_Pin;
 8012684:	239c      	movs	r3, #156	; 0x9c
 8012686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012688:	2303      	movs	r3, #3
 801268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801268c:	2300      	movs	r3, #0
 801268e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012690:	f107 031c 	add.w	r3, r7, #28
 8012694:	4619      	mov	r1, r3
 8012696:	482a      	ldr	r0, [pc, #168]	; (8012740 <HAL_ADC_MspInit+0x158>)
 8012698:	f003 f818 	bl	80156cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_CHBB0_Pin|DISTANCE4_ADC_Pin;
 801269c:	2303      	movs	r3, #3
 801269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80126a0:	2303      	movs	r3, #3
 80126a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126a4:	2300      	movs	r3, #0
 80126a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80126a8:	f107 031c 	add.w	r3, r7, #28
 80126ac:	4619      	mov	r1, r3
 80126ae:	4825      	ldr	r0, [pc, #148]	; (8012744 <HAL_ADC_MspInit+0x15c>)
 80126b0:	f003 f80c 	bl	80156cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80126b4:	4b24      	ldr	r3, [pc, #144]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126b6:	4a25      	ldr	r2, [pc, #148]	; (801274c <HAL_ADC_MspInit+0x164>)
 80126b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80126ba:	4b23      	ldr	r3, [pc, #140]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126bc:	2205      	movs	r2, #5
 80126be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80126c0:	4b21      	ldr	r3, [pc, #132]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80126c6:	4b20      	ldr	r3, [pc, #128]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126c8:	2200      	movs	r2, #0
 80126ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80126cc:	4b1e      	ldr	r3, [pc, #120]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126ce:	2280      	movs	r2, #128	; 0x80
 80126d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80126d2:	4b1d      	ldr	r3, [pc, #116]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80126d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80126da:	4b1b      	ldr	r3, [pc, #108]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80126e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80126e2:	4b19      	ldr	r3, [pc, #100]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80126e8:	4b17      	ldr	r3, [pc, #92]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126ea:	2200      	movs	r2, #0
 80126ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80126ee:	4816      	ldr	r0, [pc, #88]	; (8012748 <HAL_ADC_MspInit+0x160>)
 80126f0:	f002 fc3e 	bl	8014f70 <HAL_DMA_Init>
 80126f4:	4603      	mov	r3, r0
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 80126fa:	f7ff ff48 	bl	801258e <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80126fe:	2110      	movs	r1, #16
 8012700:	4811      	ldr	r0, [pc, #68]	; (8012748 <HAL_ADC_MspInit+0x160>)
 8012702:	f002 ff13 	bl	801552c <HAL_DMA_ConfigChannelAttributes>
 8012706:	4603      	mov	r3, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	d001      	beq.n	8012710 <HAL_ADC_MspInit+0x128>
    {
      Error_Handler();
 801270c:	f7ff ff3f 	bl	801258e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4a0d      	ldr	r2, [pc, #52]	; (8012748 <HAL_ADC_MspInit+0x160>)
 8012714:	651a      	str	r2, [r3, #80]	; 0x50
 8012716:	4a0c      	ldr	r2, [pc, #48]	; (8012748 <HAL_ADC_MspInit+0x160>)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 801271c:	2200      	movs	r2, #0
 801271e:	2105      	movs	r1, #5
 8012720:	2025      	movs	r0, #37	; 0x25
 8012722:	f002 fbfd 	bl	8014f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8012726:	2025      	movs	r0, #37	; 0x25
 8012728:	f002 fc14 	bl	8014f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801272c:	bf00      	nop
 801272e:	3730      	adds	r7, #48	; 0x30
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}
 8012734:	42028000 	.word	0x42028000
 8012738:	40021000 	.word	0x40021000
 801273c:	42020800 	.word	0x42020800
 8012740:	42020000 	.word	0x42020000
 8012744:	42020400 	.word	0x42020400
 8012748:	200006a0 	.word	0x200006a0
 801274c:	40020008 	.word	0x40020008

08012750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b0ae      	sub	sp, #184	; 0xb8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801275c:	2200      	movs	r2, #0
 801275e:	601a      	str	r2, [r3, #0]
 8012760:	605a      	str	r2, [r3, #4]
 8012762:	609a      	str	r2, [r3, #8]
 8012764:	60da      	str	r2, [r3, #12]
 8012766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012768:	f107 0310 	add.w	r3, r7, #16
 801276c:	2294      	movs	r2, #148	; 0x94
 801276e:	2100      	movs	r1, #0
 8012770:	4618      	mov	r0, r3
 8012772:	f00f ff98 	bl	80226a6 <memset>
  if(hi2c->Instance==I2C1)
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a21      	ldr	r2, [pc, #132]	; (8012800 <HAL_I2C_MspInit+0xb0>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d13b      	bne.n	80127f8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8012780:	2340      	movs	r3, #64	; 0x40
 8012782:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012784:	2300      	movs	r3, #0
 8012786:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012788:	f107 0310 	add.w	r3, r7, #16
 801278c:	4618      	mov	r0, r3
 801278e:	f005 f8c1 	bl	8017914 <HAL_RCCEx_PeriphCLKConfig>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	d001      	beq.n	801279c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8012798:	f7ff fef9 	bl	801258e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801279c:	4b19      	ldr	r3, [pc, #100]	; (8012804 <HAL_I2C_MspInit+0xb4>)
 801279e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127a0:	4a18      	ldr	r2, [pc, #96]	; (8012804 <HAL_I2C_MspInit+0xb4>)
 80127a2:	f043 0302 	orr.w	r3, r3, #2
 80127a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80127a8:	4b16      	ldr	r3, [pc, #88]	; (8012804 <HAL_I2C_MspInit+0xb4>)
 80127aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127ac:	f003 0302 	and.w	r3, r3, #2
 80127b0:	60fb      	str	r3, [r7, #12]
 80127b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80127b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80127b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80127bc:	2312      	movs	r3, #18
 80127be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127c2:	2300      	movs	r3, #0
 80127c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80127c8:	2300      	movs	r3, #0
 80127ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80127ce:	2304      	movs	r3, #4
 80127d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80127d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80127d8:	4619      	mov	r1, r3
 80127da:	480b      	ldr	r0, [pc, #44]	; (8012808 <HAL_I2C_MspInit+0xb8>)
 80127dc:	f002 ff76 	bl	80156cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80127e0:	4b08      	ldr	r3, [pc, #32]	; (8012804 <HAL_I2C_MspInit+0xb4>)
 80127e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127e4:	4a07      	ldr	r2, [pc, #28]	; (8012804 <HAL_I2C_MspInit+0xb4>)
 80127e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80127ea:	6593      	str	r3, [r2, #88]	; 0x58
 80127ec:	4b05      	ldr	r3, [pc, #20]	; (8012804 <HAL_I2C_MspInit+0xb4>)
 80127ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80127f4:	60bb      	str	r3, [r7, #8]
 80127f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80127f8:	bf00      	nop
 80127fa:	37b8      	adds	r7, #184	; 0xb8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	40005400 	.word	0x40005400
 8012804:	40021000 	.word	0x40021000
 8012808:	42020400 	.word	0x42020400

0801280c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b0b2      	sub	sp, #200	; 0xc8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012814:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012818:	2200      	movs	r2, #0
 801281a:	601a      	str	r2, [r3, #0]
 801281c:	605a      	str	r2, [r3, #4]
 801281e:	609a      	str	r2, [r3, #8]
 8012820:	60da      	str	r2, [r3, #12]
 8012822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012824:	f107 0320 	add.w	r3, r7, #32
 8012828:	2294      	movs	r2, #148	; 0x94
 801282a:	2100      	movs	r1, #0
 801282c:	4618      	mov	r0, r3
 801282e:	f00f ff3a 	bl	80226a6 <memset>
  if(huart->Instance==LPUART1)
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a67      	ldr	r2, [pc, #412]	; (80129d4 <HAL_UART_MspInit+0x1c8>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d13e      	bne.n	80128ba <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 801283c:	2320      	movs	r3, #32
 801283e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8012840:	2300      	movs	r3, #0
 8012842:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012844:	f107 0320 	add.w	r3, r7, #32
 8012848:	4618      	mov	r0, r3
 801284a:	f005 f863 	bl	8017914 <HAL_RCCEx_PeriphCLKConfig>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d001      	beq.n	8012858 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8012854:	f7ff fe9b 	bl	801258e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8012858:	4b5f      	ldr	r3, [pc, #380]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 801285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801285c:	4a5e      	ldr	r2, [pc, #376]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 801285e:	f043 0301 	orr.w	r3, r3, #1
 8012862:	65d3      	str	r3, [r2, #92]	; 0x5c
 8012864:	4b5c      	ldr	r3, [pc, #368]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012868:	f003 0301 	and.w	r3, r3, #1
 801286c:	61fb      	str	r3, [r7, #28]
 801286e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8012870:	4b59      	ldr	r3, [pc, #356]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012874:	4a58      	ldr	r2, [pc, #352]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801287a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801287c:	4b56      	ldr	r3, [pc, #344]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 801287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012884:	61bb      	str	r3, [r7, #24]
 8012886:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8012888:	f004 f824 	bl	80168d4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 801288c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012894:	2302      	movs	r3, #2
 8012896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801289a:	2300      	movs	r3, #0
 801289c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80128a0:	2300      	movs	r3, #0
 80128a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80128a6:	2308      	movs	r3, #8
 80128a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80128ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80128b0:	4619      	mov	r1, r3
 80128b2:	484a      	ldr	r0, [pc, #296]	; (80129dc <HAL_UART_MspInit+0x1d0>)
 80128b4:	f002 ff0a 	bl	80156cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80128b8:	e088      	b.n	80129cc <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==UART4)
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4a48      	ldr	r2, [pc, #288]	; (80129e0 <HAL_UART_MspInit+0x1d4>)
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d143      	bne.n	801294c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80128c4:	2308      	movs	r3, #8
 80128c6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80128c8:	2300      	movs	r3, #0
 80128ca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80128cc:	f107 0320 	add.w	r3, r7, #32
 80128d0:	4618      	mov	r0, r3
 80128d2:	f005 f81f 	bl	8017914 <HAL_RCCEx_PeriphCLKConfig>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d001      	beq.n	80128e0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80128dc:	f7ff fe57 	bl	801258e <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80128e0:	4b3d      	ldr	r3, [pc, #244]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 80128e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128e4:	4a3c      	ldr	r2, [pc, #240]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 80128e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80128ea:	6593      	str	r3, [r2, #88]	; 0x58
 80128ec:	4b3a      	ldr	r3, [pc, #232]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 80128ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80128f4:	617b      	str	r3, [r7, #20]
 80128f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128f8:	4b37      	ldr	r3, [pc, #220]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 80128fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128fc:	4a36      	ldr	r2, [pc, #216]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 80128fe:	f043 0301 	orr.w	r3, r3, #1
 8012902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012904:	4b34      	ldr	r3, [pc, #208]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012908:	f003 0301 	and.w	r3, r3, #1
 801290c:	613b      	str	r3, [r7, #16]
 801290e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012910:	2303      	movs	r3, #3
 8012912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012916:	2302      	movs	r3, #2
 8012918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801291c:	2300      	movs	r3, #0
 801291e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012922:	2300      	movs	r3, #0
 8012924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8012928:	2308      	movs	r3, #8
 801292a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801292e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012932:	4619      	mov	r1, r3
 8012934:	482b      	ldr	r0, [pc, #172]	; (80129e4 <HAL_UART_MspInit+0x1d8>)
 8012936:	f002 fec9 	bl	80156cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 801293a:	2200      	movs	r2, #0
 801293c:	2105      	movs	r1, #5
 801293e:	2040      	movs	r0, #64	; 0x40
 8012940:	f002 faee 	bl	8014f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8012944:	2040      	movs	r0, #64	; 0x40
 8012946:	f002 fb05 	bl	8014f54 <HAL_NVIC_EnableIRQ>
}
 801294a:	e03f      	b.n	80129cc <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	4a25      	ldr	r2, [pc, #148]	; (80129e8 <HAL_UART_MspInit+0x1dc>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d13a      	bne.n	80129cc <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8012956:	2302      	movs	r3, #2
 8012958:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801295a:	2300      	movs	r3, #0
 801295c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801295e:	f107 0320 	add.w	r3, r7, #32
 8012962:	4618      	mov	r0, r3
 8012964:	f004 ffd6 	bl	8017914 <HAL_RCCEx_PeriphCLKConfig>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d001      	beq.n	8012972 <HAL_UART_MspInit+0x166>
      Error_Handler();
 801296e:	f7ff fe0e 	bl	801258e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8012972:	4b19      	ldr	r3, [pc, #100]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012976:	4a18      	ldr	r2, [pc, #96]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801297c:	6593      	str	r3, [r2, #88]	; 0x58
 801297e:	4b16      	ldr	r3, [pc, #88]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012986:	60fb      	str	r3, [r7, #12]
 8012988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801298a:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 801298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801298e:	4a12      	ldr	r2, [pc, #72]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012990:	f043 0308 	orr.w	r3, r3, #8
 8012994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012996:	4b10      	ldr	r3, [pc, #64]	; (80129d8 <HAL_UART_MspInit+0x1cc>)
 8012998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801299a:	f003 0308 	and.w	r3, r3, #8
 801299e:	60bb      	str	r3, [r7, #8]
 80129a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 80129a2:	2360      	movs	r3, #96	; 0x60
 80129a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129a8:	2302      	movs	r3, #2
 80129aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80129b4:	2300      	movs	r3, #0
 80129b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80129ba:	2307      	movs	r3, #7
 80129bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80129c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80129c4:	4619      	mov	r1, r3
 80129c6:	4809      	ldr	r0, [pc, #36]	; (80129ec <HAL_UART_MspInit+0x1e0>)
 80129c8:	f002 fe80 	bl	80156cc <HAL_GPIO_Init>
}
 80129cc:	bf00      	nop
 80129ce:	37c8      	adds	r7, #200	; 0xc8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	40008000 	.word	0x40008000
 80129d8:	40021000 	.word	0x40021000
 80129dc:	42021800 	.word	0x42021800
 80129e0:	40004c00 	.word	0x40004c00
 80129e4:	42020000 	.word	0x42020000
 80129e8:	40004400 	.word	0x40004400
 80129ec:	42020c00 	.word	0x42020c00

080129f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b0a8      	sub	sp, #160	; 0xa0
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80129f8:	f107 030c 	add.w	r3, r7, #12
 80129fc:	2294      	movs	r2, #148	; 0x94
 80129fe:	2100      	movs	r1, #0
 8012a00:	4618      	mov	r0, r3
 8012a02:	f00f fe50 	bl	80226a6 <memset>
  if(hrtc->Instance==RTC)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	4a16      	ldr	r2, [pc, #88]	; (8012a64 <HAL_RTC_MspInit+0x74>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d124      	bne.n	8012a5a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012a10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a14:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8012a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012a1e:	f107 030c 	add.w	r3, r7, #12
 8012a22:	4618      	mov	r0, r3
 8012a24:	f004 ff76 	bl	8017914 <HAL_RCCEx_PeriphCLKConfig>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d001      	beq.n	8012a32 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8012a2e:	f7ff fdae 	bl	801258e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8012a32:	4b0d      	ldr	r3, [pc, #52]	; (8012a68 <HAL_RTC_MspInit+0x78>)
 8012a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a38:	4a0b      	ldr	r2, [pc, #44]	; (8012a68 <HAL_RTC_MspInit+0x78>)
 8012a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012a42:	4b09      	ldr	r3, [pc, #36]	; (8012a68 <HAL_RTC_MspInit+0x78>)
 8012a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a46:	4a08      	ldr	r2, [pc, #32]	; (8012a68 <HAL_RTC_MspInit+0x78>)
 8012a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8012a4e:	4b06      	ldr	r3, [pc, #24]	; (8012a68 <HAL_RTC_MspInit+0x78>)
 8012a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a56:	60bb      	str	r3, [r7, #8]
 8012a58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8012a5a:	bf00      	nop
 8012a5c:	37a0      	adds	r7, #160	; 0xa0
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	40002800 	.word	0x40002800
 8012a68:	40021000 	.word	0x40021000

08012a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b090      	sub	sp, #64	; 0x40
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012a78:	2200      	movs	r2, #0
 8012a7a:	601a      	str	r2, [r3, #0]
 8012a7c:	605a      	str	r2, [r3, #4]
 8012a7e:	609a      	str	r2, [r3, #8]
 8012a80:	60da      	str	r2, [r3, #12]
 8012a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a62      	ldr	r2, [pc, #392]	; (8012c14 <HAL_SPI_MspInit+0x1a8>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d145      	bne.n	8012b1a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012a8e:	4b62      	ldr	r3, [pc, #392]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012a92:	4a61      	ldr	r2, [pc, #388]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012a98:	6613      	str	r3, [r2, #96]	; 0x60
 8012a9a:	4b5f      	ldr	r3, [pc, #380]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8012aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012aa6:	4b5c      	ldr	r3, [pc, #368]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012aaa:	4a5b      	ldr	r2, [pc, #364]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012aac:	f043 0301 	orr.w	r3, r3, #1
 8012ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ab2:	4b59      	ldr	r3, [pc, #356]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012abe:	4b56      	ldr	r3, [pc, #344]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ac2:	4a55      	ldr	r2, [pc, #340]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012ac4:	f043 0310 	orr.w	r3, r3, #16
 8012ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012aca:	4b53      	ldr	r3, [pc, #332]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ace:	f003 0310 	and.w	r3, r3, #16
 8012ad2:	623b      	str	r3, [r7, #32]
 8012ad4:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_ADC_CLK_Pin|SPI_ADC_MISO_Pin;
 8012ad6:	2360      	movs	r3, #96	; 0x60
 8012ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ada:	2302      	movs	r3, #2
 8012adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012ae6:	2305      	movs	r3, #5
 8012ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012aea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012aee:	4619      	mov	r1, r3
 8012af0:	484a      	ldr	r0, [pc, #296]	; (8012c1c <HAL_SPI_MspInit+0x1b0>)
 8012af2:	f002 fdeb 	bl	80156cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_ADC_MOSI_Pin;
 8012af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012afc:	2302      	movs	r3, #2
 8012afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b00:	2300      	movs	r3, #0
 8012b02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b04:	2300      	movs	r3, #0
 8012b06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012b08:	2305      	movs	r3, #5
 8012b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(SPI_ADC_MOSI_GPIO_Port, &GPIO_InitStruct);
 8012b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b10:	4619      	mov	r1, r3
 8012b12:	4843      	ldr	r0, [pc, #268]	; (8012c20 <HAL_SPI_MspInit+0x1b4>)
 8012b14:	f002 fdda 	bl	80156cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012b18:	e078      	b.n	8012c0c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI2)
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a41      	ldr	r2, [pc, #260]	; (8012c24 <HAL_SPI_MspInit+0x1b8>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d145      	bne.n	8012bb0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012b24:	4b3c      	ldr	r3, [pc, #240]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b28:	4a3b      	ldr	r2, [pc, #236]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8012b30:	4b39      	ldr	r3, [pc, #228]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b38:	61fb      	str	r3, [r7, #28]
 8012b3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012b3c:	4b36      	ldr	r3, [pc, #216]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b40:	4a35      	ldr	r2, [pc, #212]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b42:	f043 0302 	orr.w	r3, r3, #2
 8012b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012b48:	4b33      	ldr	r3, [pc, #204]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b4c:	f003 0302 	and.w	r3, r3, #2
 8012b50:	61bb      	str	r3, [r7, #24]
 8012b52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012b54:	4b30      	ldr	r3, [pc, #192]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b58:	4a2f      	ldr	r2, [pc, #188]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b5a:	f043 0308 	orr.w	r3, r3, #8
 8012b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012b60:	4b2d      	ldr	r3, [pc, #180]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b64:	f003 0308 	and.w	r3, r3, #8
 8012b68:	617b      	str	r3, [r7, #20]
 8012b6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b72:	2302      	movs	r3, #2
 8012b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012b7e:	2305      	movs	r3, #5
 8012b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012b86:	4619      	mov	r1, r3
 8012b88:	4827      	ldr	r0, [pc, #156]	; (8012c28 <HAL_SPI_MspInit+0x1bc>)
 8012b8a:	f002 fd9f 	bl	80156cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8012b8e:	2318      	movs	r3, #24
 8012b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012b92:	2302      	movs	r3, #2
 8012b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b96:	2300      	movs	r3, #0
 8012b98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012b9e:	2305      	movs	r3, #5
 8012ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	4820      	ldr	r0, [pc, #128]	; (8012c2c <HAL_SPI_MspInit+0x1c0>)
 8012baa:	f002 fd8f 	bl	80156cc <HAL_GPIO_Init>
}
 8012bae:	e02d      	b.n	8012c0c <HAL_SPI_MspInit+0x1a0>
  else if(hspi->Instance==SPI3)
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a1e      	ldr	r2, [pc, #120]	; (8012c30 <HAL_SPI_MspInit+0x1c4>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d128      	bne.n	8012c0c <HAL_SPI_MspInit+0x1a0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8012bba:	4b17      	ldr	r3, [pc, #92]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bbe:	4a16      	ldr	r2, [pc, #88]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8012bc6:	4b14      	ldr	r3, [pc, #80]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012bce:	613b      	str	r3, [r7, #16]
 8012bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012bd2:	4b11      	ldr	r3, [pc, #68]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012bd6:	4a10      	ldr	r2, [pc, #64]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012bd8:	f043 0304 	orr.w	r3, r3, #4
 8012bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012bde:	4b0e      	ldr	r3, [pc, #56]	; (8012c18 <HAL_SPI_MspInit+0x1ac>)
 8012be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012be2:	f003 0304 	and.w	r3, r3, #4
 8012be6:	60fb      	str	r3, [r7, #12]
 8012be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8012bea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bf0:	2302      	movs	r3, #2
 8012bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012bfc:	2306      	movs	r3, #6
 8012bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c04:	4619      	mov	r1, r3
 8012c06:	480b      	ldr	r0, [pc, #44]	; (8012c34 <HAL_SPI_MspInit+0x1c8>)
 8012c08:	f002 fd60 	bl	80156cc <HAL_GPIO_Init>
}
 8012c0c:	bf00      	nop
 8012c0e:	3740      	adds	r7, #64	; 0x40
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	40013000 	.word	0x40013000
 8012c18:	40021000 	.word	0x40021000
 8012c1c:	42020000 	.word	0x42020000
 8012c20:	42021000 	.word	0x42021000
 8012c24:	40003800 	.word	0x40003800
 8012c28:	42020400 	.word	0x42020400
 8012c2c:	42020c00 	.word	0x42020c00
 8012c30:	40003c00 	.word	0x40003c00
 8012c34:	42020800 	.word	0x42020800

08012c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08c      	sub	sp, #48	; 0x30
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c40:	f107 031c 	add.w	r3, r7, #28
 8012c44:	2200      	movs	r2, #0
 8012c46:	601a      	str	r2, [r3, #0]
 8012c48:	605a      	str	r2, [r3, #4]
 8012c4a:	609a      	str	r2, [r3, #8]
 8012c4c:	60da      	str	r2, [r3, #12]
 8012c4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a40      	ldr	r2, [pc, #256]	; (8012d58 <HAL_TIM_Base_MspInit+0x120>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d14e      	bne.n	8012cf8 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8012c5a:	4b40      	ldr	r3, [pc, #256]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c5e:	4a3f      	ldr	r2, [pc, #252]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012c64:	6613      	str	r3, [r2, #96]	; 0x60
 8012c66:	4b3d      	ldr	r3, [pc, #244]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c6e:	61bb      	str	r3, [r7, #24]
 8012c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012c72:	4b3a      	ldr	r3, [pc, #232]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c76:	4a39      	ldr	r2, [pc, #228]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c78:	f043 0310 	orr.w	r3, r3, #16
 8012c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012c7e:	4b37      	ldr	r3, [pc, #220]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c82:	f003 0310 	and.w	r3, r3, #16
 8012c86:	617b      	str	r3, [r7, #20]
 8012c88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c8a:	4b34      	ldr	r3, [pc, #208]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c8e:	4a33      	ldr	r2, [pc, #204]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c90:	f043 0301 	orr.w	r3, r3, #1
 8012c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012c96:	4b31      	ldr	r3, [pc, #196]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c9a:	f003 0301 	and.w	r3, r3, #1
 8012c9e:	613b      	str	r3, [r7, #16]
 8012ca0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = RC_PWM_STEERING_IN_Pin;
 8012ca2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ca8:	2302      	movs	r3, #2
 8012caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cac:	2300      	movs	r3, #0
 8012cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_STEERING_IN_GPIO_Port, &GPIO_InitStruct);
 8012cb8:	f107 031c 	add.w	r3, r7, #28
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	4828      	ldr	r0, [pc, #160]	; (8012d60 <HAL_TIM_Base_MspInit+0x128>)
 8012cc0:	f002 fd04 	bl	80156cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_PWM_STEERING_Pin|RC_PWM_THROTTLE_IN_Pin;
 8012cc4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8012cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cca:	2302      	movs	r3, #2
 8012ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012cda:	f107 031c 	add.w	r3, r7, #28
 8012cde:	4619      	mov	r1, r3
 8012ce0:	4820      	ldr	r0, [pc, #128]	; (8012d64 <HAL_TIM_Base_MspInit+0x12c>)
 8012ce2:	f002 fcf3 	bl	80156cc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	2105      	movs	r1, #5
 8012cea:	202c      	movs	r0, #44	; 0x2c
 8012cec:	f002 f918 	bl	8014f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8012cf0:	202c      	movs	r0, #44	; 0x2c
 8012cf2:	f002 f92f 	bl	8014f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8012cf6:	e02a      	b.n	8012d4e <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM5)
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	4a1a      	ldr	r2, [pc, #104]	; (8012d68 <HAL_TIM_Base_MspInit+0x130>)
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d10c      	bne.n	8012d1c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8012d02:	4b16      	ldr	r3, [pc, #88]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d06:	4a15      	ldr	r2, [pc, #84]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012d08:	f043 0308 	orr.w	r3, r3, #8
 8012d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8012d0e:	4b13      	ldr	r3, [pc, #76]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d12:	f003 0308 	and.w	r3, r3, #8
 8012d16:	60fb      	str	r3, [r7, #12]
 8012d18:	68fb      	ldr	r3, [r7, #12]
}
 8012d1a:	e018      	b.n	8012d4e <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM6)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	4a12      	ldr	r2, [pc, #72]	; (8012d6c <HAL_TIM_Base_MspInit+0x134>)
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d113      	bne.n	8012d4e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012d26:	4b0d      	ldr	r3, [pc, #52]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d2a:	4a0c      	ldr	r2, [pc, #48]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012d2c:	f043 0310 	orr.w	r3, r3, #16
 8012d30:	6593      	str	r3, [r2, #88]	; 0x58
 8012d32:	4b0a      	ldr	r3, [pc, #40]	; (8012d5c <HAL_TIM_Base_MspInit+0x124>)
 8012d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d36:	f003 0310 	and.w	r3, r3, #16
 8012d3a:	60bb      	str	r3, [r7, #8]
 8012d3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8012d3e:	2200      	movs	r2, #0
 8012d40:	2105      	movs	r1, #5
 8012d42:	2031      	movs	r0, #49	; 0x31
 8012d44:	f002 f8ec 	bl	8014f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8012d48:	2031      	movs	r0, #49	; 0x31
 8012d4a:	f002 f903 	bl	8014f54 <HAL_NVIC_EnableIRQ>
}
 8012d4e:	bf00      	nop
 8012d50:	3730      	adds	r7, #48	; 0x30
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	40012c00 	.word	0x40012c00
 8012d5c:	40021000 	.word	0x40021000
 8012d60:	42021000 	.word	0x42021000
 8012d64:	42020000 	.word	0x42020000
 8012d68:	40000c00 	.word	0x40000c00
 8012d6c:	40001000 	.word	0x40001000

08012d70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08a      	sub	sp, #40	; 0x28
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012d78:	f107 0314 	add.w	r3, r7, #20
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	605a      	str	r2, [r3, #4]
 8012d82:	609a      	str	r2, [r3, #8]
 8012d84:	60da      	str	r2, [r3, #12]
 8012d86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	4a1b      	ldr	r2, [pc, #108]	; (8012dfc <HAL_TIM_Encoder_MspInit+0x8c>)
 8012d8e:	4293      	cmp	r3, r2
 8012d90:	d12f      	bne.n	8012df2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012d92:	4b1b      	ldr	r3, [pc, #108]	; (8012e00 <HAL_TIM_Encoder_MspInit+0x90>)
 8012d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d96:	4a1a      	ldr	r2, [pc, #104]	; (8012e00 <HAL_TIM_Encoder_MspInit+0x90>)
 8012d98:	f043 0302 	orr.w	r3, r3, #2
 8012d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8012d9e:	4b18      	ldr	r3, [pc, #96]	; (8012e00 <HAL_TIM_Encoder_MspInit+0x90>)
 8012da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012da2:	f003 0302 	and.w	r3, r3, #2
 8012da6:	613b      	str	r3, [r7, #16]
 8012da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012daa:	4b15      	ldr	r3, [pc, #84]	; (8012e00 <HAL_TIM_Encoder_MspInit+0x90>)
 8012dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dae:	4a14      	ldr	r2, [pc, #80]	; (8012e00 <HAL_TIM_Encoder_MspInit+0x90>)
 8012db0:	f043 0310 	orr.w	r3, r3, #16
 8012db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012db6:	4b12      	ldr	r3, [pc, #72]	; (8012e00 <HAL_TIM_Encoder_MspInit+0x90>)
 8012db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dba:	f003 0310 	and.w	r3, r3, #16
 8012dbe:	60fb      	str	r3, [r7, #12]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CH_A_Pin|ENC_CHB_Pin;
 8012dc2:	2318      	movs	r3, #24
 8012dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8012dd6:	f107 0314 	add.w	r3, r7, #20
 8012dda:	4619      	mov	r1, r3
 8012ddc:	4809      	ldr	r0, [pc, #36]	; (8012e04 <HAL_TIM_Encoder_MspInit+0x94>)
 8012dde:	f002 fc75 	bl	80156cc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8012de2:	2200      	movs	r2, #0
 8012de4:	2105      	movs	r1, #5
 8012de6:	202e      	movs	r0, #46	; 0x2e
 8012de8:	f002 f89a 	bl	8014f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012dec:	202e      	movs	r0, #46	; 0x2e
 8012dee:	f002 f8b1 	bl	8014f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8012df2:	bf00      	nop
 8012df4:	3728      	adds	r7, #40	; 0x28
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	40000400 	.word	0x40000400
 8012e00:	40021000 	.word	0x40021000
 8012e04:	42021000 	.word	0x42021000

08012e08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b085      	sub	sp, #20
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a0a      	ldr	r2, [pc, #40]	; (8012e40 <HAL_TIM_PWM_MspInit+0x38>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d10b      	bne.n	8012e32 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012e1a:	4b0a      	ldr	r3, [pc, #40]	; (8012e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8012e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e1e:	4a09      	ldr	r2, [pc, #36]	; (8012e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8012e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012e24:	6613      	str	r3, [r2, #96]	; 0x60
 8012e26:	4b07      	ldr	r3, [pc, #28]	; (8012e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8012e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012e2e:	60fb      	str	r3, [r7, #12]
 8012e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8012e32:	bf00      	nop
 8012e34:	3714      	adds	r7, #20
 8012e36:	46bd      	mov	sp, r7
 8012e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3c:	4770      	bx	lr
 8012e3e:	bf00      	nop
 8012e40:	40013400 	.word	0x40013400
 8012e44:	40021000 	.word	0x40021000

08012e48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b08a      	sub	sp, #40	; 0x28
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e50:	f107 0314 	add.w	r3, r7, #20
 8012e54:	2200      	movs	r2, #0
 8012e56:	601a      	str	r2, [r3, #0]
 8012e58:	605a      	str	r2, [r3, #4]
 8012e5a:	609a      	str	r2, [r3, #8]
 8012e5c:	60da      	str	r2, [r3, #12]
 8012e5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a22      	ldr	r2, [pc, #136]	; (8012ef0 <HAL_TIM_MspPostInit+0xa8>)
 8012e66:	4293      	cmp	r3, r2
 8012e68:	d11d      	bne.n	8012ea6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8012e6a:	4b22      	ldr	r3, [pc, #136]	; (8012ef4 <HAL_TIM_MspPostInit+0xac>)
 8012e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e6e:	4a21      	ldr	r2, [pc, #132]	; (8012ef4 <HAL_TIM_MspPostInit+0xac>)
 8012e70:	f043 0320 	orr.w	r3, r3, #32
 8012e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012e76:	4b1f      	ldr	r3, [pc, #124]	; (8012ef4 <HAL_TIM_MspPostInit+0xac>)
 8012e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e7a:	f003 0320 	and.w	r3, r3, #32
 8012e7e:	613b      	str	r3, [r7, #16]
 8012e80:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PF6     ------> TIM5_CH1
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM1_Pin|MOTOR_PWM2_Pin;
 8012e82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8012e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e88:	2302      	movs	r3, #2
 8012e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012e90:	2300      	movs	r3, #0
 8012e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8012e94:	2302      	movs	r3, #2
 8012e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012e98:	f107 0314 	add.w	r3, r7, #20
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	4816      	ldr	r0, [pc, #88]	; (8012ef8 <HAL_TIM_MspPostInit+0xb0>)
 8012ea0:	f002 fc14 	bl	80156cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8012ea4:	e020      	b.n	8012ee8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4a14      	ldr	r2, [pc, #80]	; (8012efc <HAL_TIM_MspPostInit+0xb4>)
 8012eac:	4293      	cmp	r3, r2
 8012eae:	d11b      	bne.n	8012ee8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012eb0:	4b10      	ldr	r3, [pc, #64]	; (8012ef4 <HAL_TIM_MspPostInit+0xac>)
 8012eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012eb4:	4a0f      	ldr	r2, [pc, #60]	; (8012ef4 <HAL_TIM_MspPostInit+0xac>)
 8012eb6:	f043 0304 	orr.w	r3, r3, #4
 8012eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ebc:	4b0d      	ldr	r3, [pc, #52]	; (8012ef4 <HAL_TIM_MspPostInit+0xac>)
 8012ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ec0:	f003 0304 	and.w	r3, r3, #4
 8012ec4:	60fb      	str	r3, [r7, #12]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8012ec8:	2340      	movs	r3, #64	; 0x40
 8012eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ecc:	2302      	movs	r3, #2
 8012ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8012ed8:	2303      	movs	r3, #3
 8012eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012edc:	f107 0314 	add.w	r3, r7, #20
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	4807      	ldr	r0, [pc, #28]	; (8012f00 <HAL_TIM_MspPostInit+0xb8>)
 8012ee4:	f002 fbf2 	bl	80156cc <HAL_GPIO_Init>
}
 8012ee8:	bf00      	nop
 8012eea:	3728      	adds	r7, #40	; 0x28
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	40000c00 	.word	0x40000c00
 8012ef4:	40021000 	.word	0x40021000
 8012ef8:	42021400 	.word	0x42021400
 8012efc:	40013400 	.word	0x40013400
 8012f00:	42020800 	.word	0x42020800

08012f04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b0ae      	sub	sp, #184	; 0xb8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012f10:	2200      	movs	r2, #0
 8012f12:	601a      	str	r2, [r3, #0]
 8012f14:	605a      	str	r2, [r3, #4]
 8012f16:	609a      	str	r2, [r3, #8]
 8012f18:	60da      	str	r2, [r3, #12]
 8012f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012f1c:	f107 0310 	add.w	r3, r7, #16
 8012f20:	2294      	movs	r2, #148	; 0x94
 8012f22:	2100      	movs	r1, #0
 8012f24:	4618      	mov	r0, r3
 8012f26:	f00f fbbe 	bl	80226a6 <memset>
  if(hpcd->Instance==USB)
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4a22      	ldr	r2, [pc, #136]	; (8012fb8 <HAL_PCD_MspInit+0xb4>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d13d      	bne.n	8012fb0 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012f40:	f107 0310 	add.w	r3, r7, #16
 8012f44:	4618      	mov	r0, r3
 8012f46:	f004 fce5 	bl	8017914 <HAL_RCCEx_PeriphCLKConfig>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012f50:	f7ff fb1d 	bl	801258e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f54:	4b19      	ldr	r3, [pc, #100]	; (8012fbc <HAL_PCD_MspInit+0xb8>)
 8012f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f58:	4a18      	ldr	r2, [pc, #96]	; (8012fbc <HAL_PCD_MspInit+0xb8>)
 8012f5a:	f043 0301 	orr.w	r3, r3, #1
 8012f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f60:	4b16      	ldr	r3, [pc, #88]	; (8012fbc <HAL_PCD_MspInit+0xb8>)
 8012f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f64:	f003 0301 	and.w	r3, r3, #1
 8012f68:	60fb      	str	r3, [r7, #12]
 8012f6a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012f6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f74:	2302      	movs	r3, #2
 8012f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f80:	2300      	movs	r3, #0
 8012f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8012f86:	230a      	movs	r3, #10
 8012f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012f90:	4619      	mov	r1, r3
 8012f92:	480b      	ldr	r0, [pc, #44]	; (8012fc0 <HAL_PCD_MspInit+0xbc>)
 8012f94:	f002 fb9a 	bl	80156cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012f98:	4b08      	ldr	r3, [pc, #32]	; (8012fbc <HAL_PCD_MspInit+0xb8>)
 8012f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f9c:	4a07      	ldr	r2, [pc, #28]	; (8012fbc <HAL_PCD_MspInit+0xb8>)
 8012f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012fa2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8012fa4:	4b05      	ldr	r3, [pc, #20]	; (8012fbc <HAL_PCD_MspInit+0xb8>)
 8012fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012fac:	60bb      	str	r3, [r7, #8]
 8012fae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8012fb0:	bf00      	nop
 8012fb2:	37b8      	adds	r7, #184	; 0xb8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	4000d400 	.word	0x4000d400
 8012fbc:	40021000 	.word	0x40021000
 8012fc0:	42020000 	.word	0x42020000

08012fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b08c      	sub	sp, #48	; 0x30
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	202d      	movs	r0, #45	; 0x2d
 8012fda:	f001 ffa1 	bl	8014f20 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8012fde:	202d      	movs	r0, #45	; 0x2d
 8012fe0:	f001 ffb8 	bl	8014f54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8012fe4:	4b1f      	ldr	r3, [pc, #124]	; (8013064 <HAL_InitTick+0xa0>)
 8012fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012fe8:	4a1e      	ldr	r2, [pc, #120]	; (8013064 <HAL_InitTick+0xa0>)
 8012fea:	f043 0301 	orr.w	r3, r3, #1
 8012fee:	6593      	str	r3, [r2, #88]	; 0x58
 8012ff0:	4b1c      	ldr	r3, [pc, #112]	; (8013064 <HAL_InitTick+0xa0>)
 8012ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	60fb      	str	r3, [r7, #12]
 8012ffa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012ffc:	f107 0210 	add.w	r2, r7, #16
 8013000:	f107 0314 	add.w	r3, r7, #20
 8013004:	4611      	mov	r1, r2
 8013006:	4618      	mov	r0, r3
 8013008:	f004 fb80 	bl	801770c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 801300c:	f004 fb56 	bl	80176bc <HAL_RCC_GetPCLK1Freq>
 8013010:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013014:	4a14      	ldr	r2, [pc, #80]	; (8013068 <HAL_InitTick+0xa4>)
 8013016:	fba2 2303 	umull	r2, r3, r2, r3
 801301a:	0c9b      	lsrs	r3, r3, #18
 801301c:	3b01      	subs	r3, #1
 801301e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8013020:	4b12      	ldr	r3, [pc, #72]	; (801306c <HAL_InitTick+0xa8>)
 8013022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013026:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8013028:	4b10      	ldr	r3, [pc, #64]	; (801306c <HAL_InitTick+0xa8>)
 801302a:	f240 32e7 	movw	r2, #999	; 0x3e7
 801302e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8013030:	4a0e      	ldr	r2, [pc, #56]	; (801306c <HAL_InitTick+0xa8>)
 8013032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013034:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8013036:	4b0d      	ldr	r3, [pc, #52]	; (801306c <HAL_InitTick+0xa8>)
 8013038:	2200      	movs	r2, #0
 801303a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801303c:	4b0b      	ldr	r3, [pc, #44]	; (801306c <HAL_InitTick+0xa8>)
 801303e:	2200      	movs	r2, #0
 8013040:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8013042:	480a      	ldr	r0, [pc, #40]	; (801306c <HAL_InitTick+0xa8>)
 8013044:	f006 f9c6 	bl	80193d4 <HAL_TIM_Base_Init>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d104      	bne.n	8013058 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 801304e:	4807      	ldr	r0, [pc, #28]	; (801306c <HAL_InitTick+0xa8>)
 8013050:	f006 fa80 	bl	8019554 <HAL_TIM_Base_Start_IT>
 8013054:	4603      	mov	r3, r0
 8013056:	e000      	b.n	801305a <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8013058:	2301      	movs	r3, #1
}
 801305a:	4618      	mov	r0, r3
 801305c:	3730      	adds	r7, #48	; 0x30
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	40021000 	.word	0x40021000
 8013068:	431bde83 	.word	0x431bde83
 801306c:	20000ee0 	.word	0x20000ee0

08013070 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8013070:	b480      	push	{r7}
 8013072:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013074:	f3bf 8f4f 	dsb	sy
}
 8013078:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801307a:	4b06      	ldr	r3, [pc, #24]	; (8013094 <__NVIC_SystemReset+0x24>)
 801307c:	68db      	ldr	r3, [r3, #12]
 801307e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013082:	4904      	ldr	r1, [pc, #16]	; (8013094 <__NVIC_SystemReset+0x24>)
 8013084:	4b04      	ldr	r3, [pc, #16]	; (8013098 <__NVIC_SystemReset+0x28>)
 8013086:	4313      	orrs	r3, r2
 8013088:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801308a:	f3bf 8f4f 	dsb	sy
}
 801308e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8013090:	bf00      	nop
 8013092:	e7fd      	b.n	8013090 <__NVIC_SystemReset+0x20>
 8013094:	e000ed00 	.word	0xe000ed00
 8013098:	05fa0004 	.word	0x05fa0004

0801309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801309c:	b480      	push	{r7}
 801309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80130a0:	e7fe      	b.n	80130a0 <NMI_Handler+0x4>

080130a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80130a2:	b580      	push	{r7, lr}
 80130a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 80130a6:	f7ff ffe3 	bl	8013070 <__NVIC_SystemReset>

080130aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80130aa:	b480      	push	{r7}
 80130ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80130ae:	e7fe      	b.n	80130ae <MemManage_Handler+0x4>

080130b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80130b0:	b480      	push	{r7}
 80130b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80130b4:	e7fe      	b.n	80130b4 <BusFault_Handler+0x4>

080130b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80130b6:	b480      	push	{r7}
 80130b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80130ba:	e7fe      	b.n	80130ba <UsageFault_Handler+0x4>

080130bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80130bc:	b480      	push	{r7}
 80130be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80130c0:	bf00      	nop
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr
	...

080130cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80130d0:	4802      	ldr	r0, [pc, #8]	; (80130dc <DMA1_Channel1_IRQHandler+0x10>)
 80130d2:	f002 f92b 	bl	801532c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80130d6:	bf00      	nop
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	200006a0 	.word	0x200006a0

080130e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80130e4:	4802      	ldr	r0, [pc, #8]	; (80130f0 <ADC1_2_IRQHandler+0x10>)
 80130e6:	f000 fe2b 	bl	8013d40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80130ea:	bf00      	nop
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	20000638 	.word	0x20000638

080130f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80130f8:	4802      	ldr	r0, [pc, #8]	; (8013104 <TIM1_CC_IRQHandler+0x10>)
 80130fa:	f006 fed9 	bl	8019eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80130fe:	bf00      	nop
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	20000a6c 	.word	0x20000a6c

08013108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801310c:	4802      	ldr	r0, [pc, #8]	; (8013118 <TIM2_IRQHandler+0x10>)
 801310e:	f006 fecf 	bl	8019eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8013112:	bf00      	nop
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop
 8013118:	20000ee0 	.word	0x20000ee0

0801311c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8013120:	4802      	ldr	r0, [pc, #8]	; (801312c <TIM3_IRQHandler+0x10>)
 8013122:	f006 fec5 	bl	8019eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8013126:	bf00      	nop
 8013128:	bd80      	pop	{r7, pc}
 801312a:	bf00      	nop
 801312c:	20000ab8 	.word	0x20000ab8

08013130 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013134:	4802      	ldr	r0, [pc, #8]	; (8013140 <TIM6_IRQHandler+0x10>)
 8013136:	f006 febb 	bl	8019eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 801313a:	bf00      	nop
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	20000b50 	.word	0x20000b50

08013144 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8013148:	4802      	ldr	r0, [pc, #8]	; (8013154 <UART4_IRQHandler+0x10>)
 801314a:	f008 fa73 	bl	801b634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801314e:	bf00      	nop
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	200007f0 	.word	0x200007f0

08013158 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013158:	b480      	push	{r7}
 801315a:	af00      	add	r7, sp, #0
  return 1;
 801315c:	2301      	movs	r3, #1
}
 801315e:	4618      	mov	r0, r3
 8013160:	46bd      	mov	sp, r7
 8013162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013166:	4770      	bx	lr

08013168 <_kill>:

int _kill(int pid, int sig)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013172:	f00f fb3b 	bl	80227ec <__errno>
 8013176:	4603      	mov	r3, r0
 8013178:	2216      	movs	r2, #22
 801317a:	601a      	str	r2, [r3, #0]
  return -1;
 801317c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013180:	4618      	mov	r0, r3
 8013182:	3708      	adds	r7, #8
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <_exit>:

void _exit (int status)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8013190:	f04f 31ff 	mov.w	r1, #4294967295
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f7ff ffe7 	bl	8013168 <_kill>
  while (1) {}    /* Make sure we hang here */
 801319a:	e7fe      	b.n	801319a <_exit+0x12>

0801319c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80131a8:	2300      	movs	r3, #0
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	e00a      	b.n	80131c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80131ae:	f3af 8000 	nop.w
 80131b2:	4601      	mov	r1, r0
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	1c5a      	adds	r2, r3, #1
 80131b8:	60ba      	str	r2, [r7, #8]
 80131ba:	b2ca      	uxtb	r2, r1
 80131bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	3301      	adds	r3, #1
 80131c2:	617b      	str	r3, [r7, #20]
 80131c4:	697a      	ldr	r2, [r7, #20]
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	dbf0      	blt.n	80131ae <_read+0x12>
  }

  return len;
 80131cc:	687b      	ldr	r3, [r7, #4]
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3718      	adds	r7, #24
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b086      	sub	sp, #24
 80131da:	af00      	add	r7, sp, #0
 80131dc:	60f8      	str	r0, [r7, #12]
 80131de:	60b9      	str	r1, [r7, #8]
 80131e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80131e2:	2300      	movs	r3, #0
 80131e4:	617b      	str	r3, [r7, #20]
 80131e6:	e009      	b.n	80131fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	1c5a      	adds	r2, r3, #1
 80131ec:	60ba      	str	r2, [r7, #8]
 80131ee:	781b      	ldrb	r3, [r3, #0]
 80131f0:	4618      	mov	r0, r3
 80131f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	3301      	adds	r3, #1
 80131fa:	617b      	str	r3, [r7, #20]
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	429a      	cmp	r2, r3
 8013202:	dbf1      	blt.n	80131e8 <_write+0x12>
  }
  return len;
 8013204:	687b      	ldr	r3, [r7, #4]
}
 8013206:	4618      	mov	r0, r3
 8013208:	3718      	adds	r7, #24
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}

0801320e <_close>:

int _close(int file)
{
 801320e:	b480      	push	{r7}
 8013210:	b083      	sub	sp, #12
 8013212:	af00      	add	r7, sp, #0
 8013214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8013216:	f04f 33ff 	mov.w	r3, #4294967295
}
 801321a:	4618      	mov	r0, r3
 801321c:	370c      	adds	r7, #12
 801321e:	46bd      	mov	sp, r7
 8013220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013224:	4770      	bx	lr

08013226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8013226:	b480      	push	{r7}
 8013228:	b083      	sub	sp, #12
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
 801322e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013236:	605a      	str	r2, [r3, #4]
  return 0;
 8013238:	2300      	movs	r3, #0
}
 801323a:	4618      	mov	r0, r3
 801323c:	370c      	adds	r7, #12
 801323e:	46bd      	mov	sp, r7
 8013240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013244:	4770      	bx	lr

08013246 <_isatty>:

int _isatty(int file)
{
 8013246:	b480      	push	{r7}
 8013248:	b083      	sub	sp, #12
 801324a:	af00      	add	r7, sp, #0
 801324c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 801324e:	2301      	movs	r3, #1
}
 8013250:	4618      	mov	r0, r3
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801325c:	b480      	push	{r7}
 801325e:	b085      	sub	sp, #20
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8013268:	2300      	movs	r3, #0
}
 801326a:	4618      	mov	r0, r3
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr
	...

08013278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b086      	sub	sp, #24
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013280:	4a14      	ldr	r2, [pc, #80]	; (80132d4 <_sbrk+0x5c>)
 8013282:	4b15      	ldr	r3, [pc, #84]	; (80132d8 <_sbrk+0x60>)
 8013284:	1ad3      	subs	r3, r2, r3
 8013286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801328c:	4b13      	ldr	r3, [pc, #76]	; (80132dc <_sbrk+0x64>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d102      	bne.n	801329a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8013294:	4b11      	ldr	r3, [pc, #68]	; (80132dc <_sbrk+0x64>)
 8013296:	4a12      	ldr	r2, [pc, #72]	; (80132e0 <_sbrk+0x68>)
 8013298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801329a:	4b10      	ldr	r3, [pc, #64]	; (80132dc <_sbrk+0x64>)
 801329c:	681a      	ldr	r2, [r3, #0]
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	4413      	add	r3, r2
 80132a2:	693a      	ldr	r2, [r7, #16]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d207      	bcs.n	80132b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80132a8:	f00f faa0 	bl	80227ec <__errno>
 80132ac:	4603      	mov	r3, r0
 80132ae:	220c      	movs	r2, #12
 80132b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80132b2:	f04f 33ff 	mov.w	r3, #4294967295
 80132b6:	e009      	b.n	80132cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80132b8:	4b08      	ldr	r3, [pc, #32]	; (80132dc <_sbrk+0x64>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80132be:	4b07      	ldr	r3, [pc, #28]	; (80132dc <_sbrk+0x64>)
 80132c0:	681a      	ldr	r2, [r3, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	4413      	add	r3, r2
 80132c6:	4a05      	ldr	r2, [pc, #20]	; (80132dc <_sbrk+0x64>)
 80132c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80132ca:	68fb      	ldr	r3, [r7, #12]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3718      	adds	r7, #24
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	20030000 	.word	0x20030000
 80132d8:	00000400 	.word	0x00000400
 80132dc:	20000f2c 	.word	0x20000f2c
 80132e0:	20003dd0 	.word	0x20003dd0

080132e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80132e4:	b480      	push	{r7}
 80132e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80132e8:	4b06      	ldr	r3, [pc, #24]	; (8013304 <SystemInit+0x20>)
 80132ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80132ee:	4a05      	ldr	r2, [pc, #20]	; (8013304 <SystemInit+0x20>)
 80132f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80132f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80132f8:	bf00      	nop
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop
 8013304:	e000ed00 	.word	0xe000ed00

08013308 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8013308:	b480      	push	{r7}
 801330a:	b087      	sub	sp, #28
 801330c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 801330e:	4b4f      	ldr	r3, [pc, #316]	; (801344c <SystemCoreClockUpdate+0x144>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f003 0308 	and.w	r3, r3, #8
 8013316:	2b00      	cmp	r3, #0
 8013318:	d107      	bne.n	801332a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 801331a:	4b4c      	ldr	r3, [pc, #304]	; (801344c <SystemCoreClockUpdate+0x144>)
 801331c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013320:	0a1b      	lsrs	r3, r3, #8
 8013322:	f003 030f 	and.w	r3, r3, #15
 8013326:	617b      	str	r3, [r7, #20]
 8013328:	e005      	b.n	8013336 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 801332a:	4b48      	ldr	r3, [pc, #288]	; (801344c <SystemCoreClockUpdate+0x144>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	091b      	lsrs	r3, r3, #4
 8013330:	f003 030f 	and.w	r3, r3, #15
 8013334:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8013336:	4a46      	ldr	r2, [pc, #280]	; (8013450 <SystemCoreClockUpdate+0x148>)
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801333e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013340:	4b42      	ldr	r3, [pc, #264]	; (801344c <SystemCoreClockUpdate+0x144>)
 8013342:	689b      	ldr	r3, [r3, #8]
 8013344:	f003 030c 	and.w	r3, r3, #12
 8013348:	2b0c      	cmp	r3, #12
 801334a:	d866      	bhi.n	801341a <SystemCoreClockUpdate+0x112>
 801334c:	a201      	add	r2, pc, #4	; (adr r2, 8013354 <SystemCoreClockUpdate+0x4c>)
 801334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013352:	bf00      	nop
 8013354:	08013389 	.word	0x08013389
 8013358:	0801341b 	.word	0x0801341b
 801335c:	0801341b 	.word	0x0801341b
 8013360:	0801341b 	.word	0x0801341b
 8013364:	08013391 	.word	0x08013391
 8013368:	0801341b 	.word	0x0801341b
 801336c:	0801341b 	.word	0x0801341b
 8013370:	0801341b 	.word	0x0801341b
 8013374:	08013399 	.word	0x08013399
 8013378:	0801341b 	.word	0x0801341b
 801337c:	0801341b 	.word	0x0801341b
 8013380:	0801341b 	.word	0x0801341b
 8013384:	080133a1 	.word	0x080133a1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8013388:	4a32      	ldr	r2, [pc, #200]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	6013      	str	r3, [r2, #0]
      break;
 801338e:	e048      	b.n	8013422 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8013390:	4b30      	ldr	r3, [pc, #192]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 8013392:	4a31      	ldr	r2, [pc, #196]	; (8013458 <SystemCoreClockUpdate+0x150>)
 8013394:	601a      	str	r2, [r3, #0]
      break;
 8013396:	e044      	b.n	8013422 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8013398:	4b2e      	ldr	r3, [pc, #184]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 801339a:	4a30      	ldr	r2, [pc, #192]	; (801345c <SystemCoreClockUpdate+0x154>)
 801339c:	601a      	str	r2, [r3, #0]
      break;
 801339e:	e040      	b.n	8013422 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80133a0:	4b2a      	ldr	r3, [pc, #168]	; (801344c <SystemCoreClockUpdate+0x144>)
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	f003 0303 	and.w	r3, r3, #3
 80133a8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80133aa:	4b28      	ldr	r3, [pc, #160]	; (801344c <SystemCoreClockUpdate+0x144>)
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	091b      	lsrs	r3, r3, #4
 80133b0:	f003 030f 	and.w	r3, r3, #15
 80133b4:	3301      	adds	r3, #1
 80133b6:	60bb      	str	r3, [r7, #8]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2b02      	cmp	r3, #2
 80133bc:	d003      	beq.n	80133c6 <SystemCoreClockUpdate+0xbe>
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2b03      	cmp	r3, #3
 80133c2:	d006      	beq.n	80133d2 <SystemCoreClockUpdate+0xca>
 80133c4:	e00b      	b.n	80133de <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80133c6:	4a24      	ldr	r2, [pc, #144]	; (8013458 <SystemCoreClockUpdate+0x150>)
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80133ce:	613b      	str	r3, [r7, #16]
          break;
 80133d0:	e00b      	b.n	80133ea <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80133d2:	4a22      	ldr	r2, [pc, #136]	; (801345c <SystemCoreClockUpdate+0x154>)
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80133da:	613b      	str	r3, [r7, #16]
          break;
 80133dc:	e005      	b.n	80133ea <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80133e6:	613b      	str	r3, [r7, #16]
          break;
 80133e8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80133ea:	4b18      	ldr	r3, [pc, #96]	; (801344c <SystemCoreClockUpdate+0x144>)
 80133ec:	68db      	ldr	r3, [r3, #12]
 80133ee:	0a1b      	lsrs	r3, r3, #8
 80133f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	fb02 f303 	mul.w	r3, r2, r3
 80133fa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80133fc:	4b13      	ldr	r3, [pc, #76]	; (801344c <SystemCoreClockUpdate+0x144>)
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	0e5b      	lsrs	r3, r3, #25
 8013402:	f003 0303 	and.w	r3, r3, #3
 8013406:	3301      	adds	r3, #1
 8013408:	005b      	lsls	r3, r3, #1
 801340a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 801340c:	693a      	ldr	r2, [r7, #16]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	fbb2 f3f3 	udiv	r3, r2, r3
 8013414:	4a0f      	ldr	r2, [pc, #60]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 8013416:	6013      	str	r3, [r2, #0]
      break;
 8013418:	e003      	b.n	8013422 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 801341a:	4a0e      	ldr	r2, [pc, #56]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	6013      	str	r3, [r2, #0]
      break;
 8013420:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8013422:	4b0a      	ldr	r3, [pc, #40]	; (801344c <SystemCoreClockUpdate+0x144>)
 8013424:	689b      	ldr	r3, [r3, #8]
 8013426:	091b      	lsrs	r3, r3, #4
 8013428:	f003 030f 	and.w	r3, r3, #15
 801342c:	4a0c      	ldr	r2, [pc, #48]	; (8013460 <SystemCoreClockUpdate+0x158>)
 801342e:	5cd3      	ldrb	r3, [r2, r3]
 8013430:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8013432:	4b08      	ldr	r3, [pc, #32]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	fa22 f303 	lsr.w	r3, r2, r3
 801343c:	4a05      	ldr	r2, [pc, #20]	; (8013454 <SystemCoreClockUpdate+0x14c>)
 801343e:	6013      	str	r3, [r2, #0]
}
 8013440:	bf00      	nop
 8013442:	371c      	adds	r7, #28
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr
 801344c:	40021000 	.word	0x40021000
 8013450:	08023ebc 	.word	0x08023ebc
 8013454:	20000090 	.word	0x20000090
 8013458:	00f42400 	.word	0x00f42400
 801345c:	007a1200 	.word	0x007a1200
 8013460:	08023ea4 	.word	0x08023ea4

08013464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8013464:	f8df d034 	ldr.w	sp, [pc, #52]	; 801349c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8013468:	f7ff ff3c 	bl	80132e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801346c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801346e:	e003      	b.n	8013478 <LoopCopyDataInit>

08013470 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8013470:	4b0b      	ldr	r3, [pc, #44]	; (80134a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8013472:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8013474:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8013476:	3104      	adds	r1, #4

08013478 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8013478:	480a      	ldr	r0, [pc, #40]	; (80134a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 801347a:	4b0b      	ldr	r3, [pc, #44]	; (80134a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 801347c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801347e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8013480:	d3f6      	bcc.n	8013470 <CopyDataInit>
	ldr	r2, =_sbss
 8013482:	4a0a      	ldr	r2, [pc, #40]	; (80134ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8013484:	e002      	b.n	801348c <LoopFillZerobss>

08013486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8013486:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8013488:	f842 3b04 	str.w	r3, [r2], #4

0801348c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801348c:	4b08      	ldr	r3, [pc, #32]	; (80134b0 <LoopForever+0x16>)
	cmp	r2, r3
 801348e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8013490:	d3f9      	bcc.n	8013486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8013492:	f00f f9b1 	bl	80227f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8013496:	f7fd ff67 	bl	8011368 <main>

0801349a <LoopForever>:

LoopForever:
    b LoopForever
 801349a:	e7fe      	b.n	801349a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 801349c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80134a0:	08024594 	.word	0x08024594
	ldr	r0, =_sdata
 80134a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80134a8:	2000010c 	.word	0x2000010c
	ldr	r2, =_sbss
 80134ac:	20000110 	.word	0x20000110
	ldr	r3, = _ebss
 80134b0:	20003dcc 	.word	0x20003dcc

080134b4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80134b4:	e7fe      	b.n	80134b4 <COMP_IRQHandler>

080134b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80134b6:	b580      	push	{r7, lr}
 80134b8:	b082      	sub	sp, #8
 80134ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80134c0:	2004      	movs	r0, #4
 80134c2:	f001 fd22 	bl	8014f0a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80134c6:	f7ff ff1f 	bl	8013308 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80134ca:	2007      	movs	r0, #7
 80134cc:	f7ff fd7a 	bl	8012fc4 <HAL_InitTick>
 80134d0:	4603      	mov	r3, r0
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d002      	beq.n	80134dc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80134d6:	2301      	movs	r3, #1
 80134d8:	71fb      	strb	r3, [r7, #7]
 80134da:	e001      	b.n	80134e0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80134dc:	f7ff f85c 	bl	8012598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80134e0:	79fb      	ldrb	r3, [r7, #7]
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3708      	adds	r7, #8
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
	...

080134ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80134ec:	b480      	push	{r7}
 80134ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80134f0:	4b06      	ldr	r3, [pc, #24]	; (801350c <HAL_IncTick+0x20>)
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	461a      	mov	r2, r3
 80134f6:	4b06      	ldr	r3, [pc, #24]	; (8013510 <HAL_IncTick+0x24>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	4413      	add	r3, r2
 80134fc:	4a04      	ldr	r2, [pc, #16]	; (8013510 <HAL_IncTick+0x24>)
 80134fe:	6013      	str	r3, [r2, #0]
}
 8013500:	bf00      	nop
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	20000098 	.word	0x20000098
 8013510:	20000f30 	.word	0x20000f30

08013514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013514:	b480      	push	{r7}
 8013516:	af00      	add	r7, sp, #0
  return uwTick;
 8013518:	4b03      	ldr	r3, [pc, #12]	; (8013528 <HAL_GetTick+0x14>)
 801351a:	681b      	ldr	r3, [r3, #0]
}
 801351c:	4618      	mov	r0, r3
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	20000f30 	.word	0x20000f30

0801352c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	431a      	orrs	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	609a      	str	r2, [r3, #8]
}
 8013546:	bf00      	nop
 8013548:	370c      	adds	r7, #12
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr

08013552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8013552:	b480      	push	{r7}
 8013554:	b083      	sub	sp, #12
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
 801355a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	689b      	ldr	r3, [r3, #8]
 8013560:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	431a      	orrs	r2, r3
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	609a      	str	r2, [r3, #8]
}
 801356c:	bf00      	nop
 801356e:	370c      	adds	r7, #12
 8013570:	46bd      	mov	sp, r7
 8013572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013576:	4770      	bx	lr

08013578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	689b      	ldr	r3, [r3, #8]
 8013584:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8013588:	4618      	mov	r0, r3
 801358a:	370c      	adds	r7, #12
 801358c:	46bd      	mov	sp, r7
 801358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013592:	4770      	bx	lr

08013594 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8013594:	b480      	push	{r7}
 8013596:	b087      	sub	sp, #28
 8013598:	af00      	add	r7, sp, #0
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
 80135a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	3360      	adds	r3, #96	; 0x60
 80135a6:	461a      	mov	r2, r3
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	4413      	add	r3, r2
 80135ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	681a      	ldr	r2, [r3, #0]
 80135b4:	4b08      	ldr	r3, [pc, #32]	; (80135d8 <LL_ADC_SetOffset+0x44>)
 80135b6:	4013      	ands	r3, r2
 80135b8:	687a      	ldr	r2, [r7, #4]
 80135ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80135be:	683a      	ldr	r2, [r7, #0]
 80135c0:	430a      	orrs	r2, r1
 80135c2:	4313      	orrs	r3, r2
 80135c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80135cc:	bf00      	nop
 80135ce:	371c      	adds	r7, #28
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr
 80135d8:	03fff000 	.word	0x03fff000

080135dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80135dc:	b480      	push	{r7}
 80135de:	b085      	sub	sp, #20
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	3360      	adds	r3, #96	; 0x60
 80135ea:	461a      	mov	r2, r3
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	4413      	add	r3, r2
 80135f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3714      	adds	r7, #20
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8013608:	b480      	push	{r7}
 801360a:	b087      	sub	sp, #28
 801360c:	af00      	add	r7, sp, #0
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	60b9      	str	r1, [r7, #8]
 8013612:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	3360      	adds	r3, #96	; 0x60
 8013618:	461a      	mov	r2, r3
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	4413      	add	r3, r2
 8013620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	431a      	orrs	r2, r3
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8013632:	bf00      	nop
 8013634:	371c      	adds	r7, #28
 8013636:	46bd      	mov	sp, r7
 8013638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363c:	4770      	bx	lr

0801363e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 801363e:	b480      	push	{r7}
 8013640:	b083      	sub	sp, #12
 8013642:	af00      	add	r7, sp, #0
 8013644:	6078      	str	r0, [r7, #4]
 8013646:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	695b      	ldr	r3, [r3, #20]
 801364c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	431a      	orrs	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	615a      	str	r2, [r3, #20]
}
 8013658:	bf00      	nop
 801365a:	370c      	adds	r7, #12
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013674:	2b00      	cmp	r3, #0
 8013676:	d101      	bne.n	801367c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8013678:	2301      	movs	r3, #1
 801367a:	e000      	b.n	801367e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 801367c:	2300      	movs	r3, #0
}
 801367e:	4618      	mov	r0, r3
 8013680:	370c      	adds	r7, #12
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr

0801368a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801368a:	b480      	push	{r7}
 801368c:	b087      	sub	sp, #28
 801368e:	af00      	add	r7, sp, #0
 8013690:	60f8      	str	r0, [r7, #12]
 8013692:	60b9      	str	r1, [r7, #8]
 8013694:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	3330      	adds	r3, #48	; 0x30
 801369a:	461a      	mov	r2, r3
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	0a1b      	lsrs	r3, r3, #8
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	f003 030c 	and.w	r3, r3, #12
 80136a6:	4413      	add	r3, r2
 80136a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	f003 031f 	and.w	r3, r3, #31
 80136b4:	211f      	movs	r1, #31
 80136b6:	fa01 f303 	lsl.w	r3, r1, r3
 80136ba:	43db      	mvns	r3, r3
 80136bc:	401a      	ands	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	0e9b      	lsrs	r3, r3, #26
 80136c2:	f003 011f 	and.w	r1, r3, #31
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	f003 031f 	and.w	r3, r3, #31
 80136cc:	fa01 f303 	lsl.w	r3, r1, r3
 80136d0:	431a      	orrs	r2, r3
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80136d6:	bf00      	nop
 80136d8:	371c      	adds	r7, #28
 80136da:	46bd      	mov	sp, r7
 80136dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e0:	4770      	bx	lr

080136e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80136e2:	b480      	push	{r7}
 80136e4:	b083      	sub	sp, #12
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d101      	bne.n	80136fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80136f6:	2301      	movs	r3, #1
 80136f8:	e000      	b.n	80136fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80136fa:	2300      	movs	r3, #0
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	370c      	adds	r7, #12
 8013700:	46bd      	mov	sp, r7
 8013702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013706:	4770      	bx	lr

08013708 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8013708:	b480      	push	{r7}
 801370a:	b087      	sub	sp, #28
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	3314      	adds	r3, #20
 8013718:	461a      	mov	r2, r3
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	0e5b      	lsrs	r3, r3, #25
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	f003 0304 	and.w	r3, r3, #4
 8013724:	4413      	add	r3, r2
 8013726:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	0d1b      	lsrs	r3, r3, #20
 8013730:	f003 031f 	and.w	r3, r3, #31
 8013734:	2107      	movs	r1, #7
 8013736:	fa01 f303 	lsl.w	r3, r1, r3
 801373a:	43db      	mvns	r3, r3
 801373c:	401a      	ands	r2, r3
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	0d1b      	lsrs	r3, r3, #20
 8013742:	f003 031f 	and.w	r3, r3, #31
 8013746:	6879      	ldr	r1, [r7, #4]
 8013748:	fa01 f303 	lsl.w	r3, r1, r3
 801374c:	431a      	orrs	r2, r3
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8013752:	bf00      	nop
 8013754:	371c      	adds	r7, #28
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
	...

08013760 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8013760:	b480      	push	{r7}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	60b9      	str	r1, [r7, #8]
 801376a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013778:	43db      	mvns	r3, r3
 801377a:	401a      	ands	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f003 0318 	and.w	r3, r3, #24
 8013782:	4908      	ldr	r1, [pc, #32]	; (80137a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8013784:	40d9      	lsrs	r1, r3
 8013786:	68bb      	ldr	r3, [r7, #8]
 8013788:	400b      	ands	r3, r1
 801378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801378e:	431a      	orrs	r2, r3
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8013796:	bf00      	nop
 8013798:	3714      	adds	r7, #20
 801379a:	46bd      	mov	sp, r7
 801379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a0:	4770      	bx	lr
 80137a2:	bf00      	nop
 80137a4:	0007ffff 	.word	0x0007ffff

080137a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	f003 031f 	and.w	r3, r3, #31
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr

080137c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b083      	sub	sp, #12
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	689b      	ldr	r3, [r3, #8]
 80137d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	370c      	adds	r7, #12
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr

080137e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	689b      	ldr	r3, [r3, #8]
 80137ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80137f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	6093      	str	r3, [r2, #8]
}
 80137f8:	bf00      	nop
 80137fa:	370c      	adds	r7, #12
 80137fc:	46bd      	mov	sp, r7
 80137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013802:	4770      	bx	lr

08013804 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	689b      	ldr	r3, [r3, #8]
 8013810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013818:	d101      	bne.n	801381e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801381e:	2300      	movs	r3, #0
}
 8013820:	4618      	mov	r0, r3
 8013822:	370c      	adds	r7, #12
 8013824:	46bd      	mov	sp, r7
 8013826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382a:	4770      	bx	lr

0801382c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801382c:	b480      	push	{r7}
 801382e:	b083      	sub	sp, #12
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	689b      	ldr	r3, [r3, #8]
 8013838:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 801383c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013840:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013868:	d101      	bne.n	801386e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801386a:	2301      	movs	r3, #1
 801386c:	e000      	b.n	8013870 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	370c      	adds	r7, #12
 8013874:	46bd      	mov	sp, r7
 8013876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387a:	4770      	bx	lr

0801387c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 801387c:	b480      	push	{r7}
 801387e:	b083      	sub	sp, #12
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	689b      	ldr	r3, [r3, #8]
 8013888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801388c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8013890:	f043 0201 	orr.w	r2, r3, #1
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8013898:	bf00      	nop
 801389a:	370c      	adds	r7, #12
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr

080138a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80138a4:	b480      	push	{r7}
 80138a6:	b083      	sub	sp, #12
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	689b      	ldr	r3, [r3, #8]
 80138b0:	f003 0301 	and.w	r3, r3, #1
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d101      	bne.n	80138bc <LL_ADC_IsEnabled+0x18>
 80138b8:	2301      	movs	r3, #1
 80138ba:	e000      	b.n	80138be <LL_ADC_IsEnabled+0x1a>
 80138bc:	2300      	movs	r3, #0
}
 80138be:	4618      	mov	r0, r3
 80138c0:	370c      	adds	r7, #12
 80138c2:	46bd      	mov	sp, r7
 80138c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c8:	4770      	bx	lr

080138ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80138ca:	b480      	push	{r7}
 80138cc:	b083      	sub	sp, #12
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	689b      	ldr	r3, [r3, #8]
 80138d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80138da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80138de:	f043 0204 	orr.w	r2, r3, #4
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80138e6:	bf00      	nop
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr

080138f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80138f2:	b480      	push	{r7}
 80138f4:	b083      	sub	sp, #12
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	f003 0304 	and.w	r3, r3, #4
 8013902:	2b04      	cmp	r3, #4
 8013904:	d101      	bne.n	801390a <LL_ADC_REG_IsConversionOngoing+0x18>
 8013906:	2301      	movs	r3, #1
 8013908:	e000      	b.n	801390c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	370c      	adds	r7, #12
 8013910:	46bd      	mov	sp, r7
 8013912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013916:	4770      	bx	lr

08013918 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8013918:	b480      	push	{r7}
 801391a:	b083      	sub	sp, #12
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	f003 0308 	and.w	r3, r3, #8
 8013928:	2b08      	cmp	r3, #8
 801392a:	d101      	bne.n	8013930 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801392c:	2301      	movs	r3, #1
 801392e:	e000      	b.n	8013932 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8013930:	2300      	movs	r3, #0
}
 8013932:	4618      	mov	r0, r3
 8013934:	370c      	adds	r7, #12
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr
	...

08013940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013940:	b590      	push	{r4, r7, lr}
 8013942:	b089      	sub	sp, #36	; 0x24
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013948:	2300      	movs	r3, #0
 801394a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 801394c:	2300      	movs	r3, #0
 801394e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d101      	bne.n	801395a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8013956:	2301      	movs	r3, #1
 8013958:	e12e      	b.n	8013bb8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	691b      	ldr	r3, [r3, #16]
 801395e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013964:	2b00      	cmp	r3, #0
 8013966:	d109      	bne.n	801397c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7fe fe3d 	bl	80125e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2200      	movs	r2, #0
 8013972:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2200      	movs	r2, #0
 8013978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4618      	mov	r0, r3
 8013982:	f7ff ff3f 	bl	8013804 <LL_ADC_IsDeepPowerDownEnabled>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d004      	beq.n	8013996 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	4618      	mov	r0, r3
 8013992:	f7ff ff25 	bl	80137e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	4618      	mov	r0, r3
 801399c:	f7ff ff5a 	bl	8013854 <LL_ADC_IsInternalRegulatorEnabled>
 80139a0:	4603      	mov	r3, r0
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d115      	bne.n	80139d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7ff ff3e 	bl	801382c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80139b0:	4b83      	ldr	r3, [pc, #524]	; (8013bc0 <HAL_ADC_Init+0x280>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	099b      	lsrs	r3, r3, #6
 80139b6:	4a83      	ldr	r2, [pc, #524]	; (8013bc4 <HAL_ADC_Init+0x284>)
 80139b8:	fba2 2303 	umull	r2, r3, r2, r3
 80139bc:	099b      	lsrs	r3, r3, #6
 80139be:	3301      	adds	r3, #1
 80139c0:	005b      	lsls	r3, r3, #1
 80139c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80139c4:	e002      	b.n	80139cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	3b01      	subs	r3, #1
 80139ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d1f9      	bne.n	80139c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7ff ff3c 	bl	8013854 <LL_ADC_IsInternalRegulatorEnabled>
 80139dc:	4603      	mov	r3, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d10d      	bne.n	80139fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139e6:	f043 0210 	orr.w	r2, r3, #16
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80139f2:	f043 0201 	orr.w	r2, r3, #1
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80139fa:	2301      	movs	r3, #1
 80139fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7ff ff75 	bl	80138f2 <LL_ADC_REG_IsConversionOngoing>
 8013a08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a0e:	f003 0310 	and.w	r3, r3, #16
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f040 80c7 	bne.w	8013ba6 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f040 80c3 	bne.w	8013ba6 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8013a28:	f043 0202 	orr.w	r2, r3, #2
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7ff ff35 	bl	80138a4 <LL_ADC_IsEnabled>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d110      	bne.n	8013a62 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8013a40:	4861      	ldr	r0, [pc, #388]	; (8013bc8 <HAL_ADC_Init+0x288>)
 8013a42:	f7ff ff2f 	bl	80138a4 <LL_ADC_IsEnabled>
 8013a46:	4604      	mov	r4, r0
 8013a48:	4860      	ldr	r0, [pc, #384]	; (8013bcc <HAL_ADC_Init+0x28c>)
 8013a4a:	f7ff ff2b 	bl	80138a4 <LL_ADC_IsEnabled>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	4323      	orrs	r3, r4
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d105      	bne.n	8013a62 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	485c      	ldr	r0, [pc, #368]	; (8013bd0 <HAL_ADC_Init+0x290>)
 8013a5e:	f7ff fd65 	bl	801352c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	7e5b      	ldrb	r3, [r3, #25]
 8013a66:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013a6c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8013a72:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8013a78:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a80:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013a82:	4313      	orrs	r3, r2
 8013a84:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d106      	bne.n	8013a9e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a94:	3b01      	subs	r3, #1
 8013a96:	045b      	lsls	r3, r3, #17
 8013a98:	69ba      	ldr	r2, [r7, #24]
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d009      	beq.n	8013aba <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013aaa:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8013ab4:	69ba      	ldr	r2, [r7, #24]
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	68da      	ldr	r2, [r3, #12]
 8013ac0:	4b44      	ldr	r3, [pc, #272]	; (8013bd4 <HAL_ADC_Init+0x294>)
 8013ac2:	4013      	ands	r3, r2
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	6812      	ldr	r2, [r2, #0]
 8013ac8:	69b9      	ldr	r1, [r7, #24]
 8013aca:	430b      	orrs	r3, r1
 8013acc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7ff ff20 	bl	8013918 <LL_ADC_INJ_IsConversionOngoing>
 8013ad8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d140      	bne.n	8013b62 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d13d      	bne.n	8013b62 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	7e1b      	ldrb	r3, [r3, #24]
 8013aee:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8013af0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013af8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8013afa:	4313      	orrs	r3, r2
 8013afc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	68db      	ldr	r3, [r3, #12]
 8013b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013b08:	f023 0306 	bic.w	r3, r3, #6
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	6812      	ldr	r2, [r2, #0]
 8013b10:	69b9      	ldr	r1, [r7, #24]
 8013b12:	430b      	orrs	r3, r1
 8013b14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d118      	bne.n	8013b52 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	691b      	ldr	r3, [r3, #16]
 8013b26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8013b2a:	f023 0304 	bic.w	r3, r3, #4
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013b36:	4311      	orrs	r1, r2
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013b3c:	4311      	orrs	r1, r2
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013b42:	430a      	orrs	r2, r1
 8013b44:	431a      	orrs	r2, r3
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	f042 0201 	orr.w	r2, r2, #1
 8013b4e:	611a      	str	r2, [r3, #16]
 8013b50:	e007      	b.n	8013b62 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	691a      	ldr	r2, [r3, #16]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	f022 0201 	bic.w	r2, r2, #1
 8013b60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	691b      	ldr	r3, [r3, #16]
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d10c      	bne.n	8013b84 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b70:	f023 010f 	bic.w	r1, r3, #15
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	69db      	ldr	r3, [r3, #28]
 8013b78:	1e5a      	subs	r2, r3, #1
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	430a      	orrs	r2, r1
 8013b80:	631a      	str	r2, [r3, #48]	; 0x30
 8013b82:	e007      	b.n	8013b94 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f022 020f 	bic.w	r2, r2, #15
 8013b92:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b98:	f023 0303 	bic.w	r3, r3, #3
 8013b9c:	f043 0201 	orr.w	r2, r3, #1
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8013ba4:	e007      	b.n	8013bb6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013baa:	f043 0210 	orr.w	r2, r3, #16
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8013bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3724      	adds	r7, #36	; 0x24
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd90      	pop	{r4, r7, pc}
 8013bc0:	20000090 	.word	0x20000090
 8013bc4:	053e2d63 	.word	0x053e2d63
 8013bc8:	42028000 	.word	0x42028000
 8013bcc:	42028100 	.word	0x42028100
 8013bd0:	42028300 	.word	0x42028300
 8013bd4:	fff0c007 	.word	0xfff0c007

08013bd8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b086      	sub	sp, #24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013be4:	4850      	ldr	r0, [pc, #320]	; (8013d28 <HAL_ADC_Start_DMA+0x150>)
 8013be6:	f7ff fddf 	bl	80137a8 <LL_ADC_GetMultimode>
 8013bea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7ff fe7e 	bl	80138f2 <LL_ADC_REG_IsConversionOngoing>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f040 808e 	bne.w	8013d1a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	d101      	bne.n	8013c0c <HAL_ADC_Start_DMA+0x34>
 8013c08:	2302      	movs	r3, #2
 8013c0a:	e089      	b.n	8013d20 <HAL_ADC_Start_DMA+0x148>
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	2201      	movs	r2, #1
 8013c10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d005      	beq.n	8013c26 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	2b05      	cmp	r3, #5
 8013c1e:	d002      	beq.n	8013c26 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	2b09      	cmp	r3, #9
 8013c24:	d172      	bne.n	8013d0c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8013c26:	68f8      	ldr	r0, [r7, #12]
 8013c28:	f000 feac 	bl	8014984 <ADC_Enable>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8013c30:	7dfb      	ldrb	r3, [r7, #23]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d165      	bne.n	8013d02 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8013c3e:	f023 0301 	bic.w	r3, r3, #1
 8013c42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	4a37      	ldr	r2, [pc, #220]	; (8013d2c <HAL_ADC_Start_DMA+0x154>)
 8013c50:	4293      	cmp	r3, r2
 8013c52:	d002      	beq.n	8013c5a <HAL_ADC_Start_DMA+0x82>
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	e000      	b.n	8013c5c <HAL_ADC_Start_DMA+0x84>
 8013c5a:	4b35      	ldr	r3, [pc, #212]	; (8013d30 <HAL_ADC_Start_DMA+0x158>)
 8013c5c:	68fa      	ldr	r2, [r7, #12]
 8013c5e:	6812      	ldr	r2, [r2, #0]
 8013c60:	4293      	cmp	r3, r2
 8013c62:	d002      	beq.n	8013c6a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d105      	bne.n	8013c76 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d006      	beq.n	8013c90 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c86:	f023 0206 	bic.w	r2, r3, #6
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8013c8e:	e002      	b.n	8013c96 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2200      	movs	r2, #0
 8013c94:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c9a:	4a26      	ldr	r2, [pc, #152]	; (8013d34 <HAL_ADC_Start_DMA+0x15c>)
 8013c9c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ca2:	4a25      	ldr	r2, [pc, #148]	; (8013d38 <HAL_ADC_Start_DMA+0x160>)
 8013ca4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013caa:	4a24      	ldr	r2, [pc, #144]	; (8013d3c <HAL_ADC_Start_DMA+0x164>)
 8013cac:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	221c      	movs	r2, #28
 8013cb4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	685a      	ldr	r2, [r3, #4]
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f042 0210 	orr.w	r2, r2, #16
 8013ccc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	68da      	ldr	r2, [r3, #12]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f042 0201 	orr.w	r2, r2, #1
 8013cdc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	3340      	adds	r3, #64	; 0x40
 8013ce8:	4619      	mov	r1, r3
 8013cea:	68ba      	ldr	r2, [r7, #8]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f001 f9e7 	bl	80150c0 <HAL_DMA_Start_IT>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7ff fde5 	bl	80138ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8013d00:	e00d      	b.n	8013d1e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	2200      	movs	r2, #0
 8013d06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8013d0a:	e008      	b.n	8013d1e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2200      	movs	r2, #0
 8013d14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8013d18:	e001      	b.n	8013d1e <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013d1a:	2302      	movs	r3, #2
 8013d1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8013d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3718      	adds	r7, #24
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}
 8013d28:	42028300 	.word	0x42028300
 8013d2c:	42028100 	.word	0x42028100
 8013d30:	42028000 	.word	0x42028000
 8013d34:	08014a91 	.word	0x08014a91
 8013d38:	08014b69 	.word	0x08014b69
 8013d3c:	08014b85 	.word	0x08014b85

08013d40 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b08a      	sub	sp, #40	; 0x28
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8013d48:	2300      	movs	r3, #0
 8013d4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	685b      	ldr	r3, [r3, #4]
 8013d5a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8013d5c:	4882      	ldr	r0, [pc, #520]	; (8013f68 <HAL_ADC_IRQHandler+0x228>)
 8013d5e:	f7ff fd23 	bl	80137a8 <LL_ADC_GetMultimode>
 8013d62:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	f003 0302 	and.w	r3, r3, #2
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d017      	beq.n	8013d9e <HAL_ADC_IRQHandler+0x5e>
 8013d6e:	69bb      	ldr	r3, [r7, #24]
 8013d70:	f003 0302 	and.w	r3, r3, #2
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d012      	beq.n	8013d9e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d7c:	f003 0310 	and.w	r3, r3, #16
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d105      	bne.n	8013d90 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d88:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f000 ff5f 	bl	8014c54 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	2202      	movs	r2, #2
 8013d9c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	f003 0304 	and.w	r3, r3, #4
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d004      	beq.n	8013db2 <HAL_ADC_IRQHandler+0x72>
 8013da8:	69bb      	ldr	r3, [r7, #24]
 8013daa:	f003 0304 	and.w	r3, r3, #4
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d10a      	bne.n	8013dc8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f000 8083 	beq.w	8013ec4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8013dbe:	69bb      	ldr	r3, [r7, #24]
 8013dc0:	f003 0308 	and.w	r3, r3, #8
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d07d      	beq.n	8013ec4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dcc:	f003 0310 	and.w	r3, r3, #16
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d105      	bne.n	8013de0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff fc3d 	bl	8013664 <LL_ADC_REG_IsTriggerSourceSWStart>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d062      	beq.n	8013eb6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4a5d      	ldr	r2, [pc, #372]	; (8013f6c <HAL_ADC_IRQHandler+0x22c>)
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d002      	beq.n	8013e00 <HAL_ADC_IRQHandler+0xc0>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	e000      	b.n	8013e02 <HAL_ADC_IRQHandler+0xc2>
 8013e00:	4b5b      	ldr	r3, [pc, #364]	; (8013f70 <HAL_ADC_IRQHandler+0x230>)
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	6812      	ldr	r2, [r2, #0]
 8013e06:	4293      	cmp	r3, r2
 8013e08:	d008      	beq.n	8013e1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013e0a:	697b      	ldr	r3, [r7, #20]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d005      	beq.n	8013e1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	2b05      	cmp	r3, #5
 8013e14:	d002      	beq.n	8013e1c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b09      	cmp	r3, #9
 8013e1a:	d104      	bne.n	8013e26 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	68db      	ldr	r3, [r3, #12]
 8013e22:	623b      	str	r3, [r7, #32]
 8013e24:	e00c      	b.n	8013e40 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4a50      	ldr	r2, [pc, #320]	; (8013f6c <HAL_ADC_IRQHandler+0x22c>)
 8013e2c:	4293      	cmp	r3, r2
 8013e2e:	d002      	beq.n	8013e36 <HAL_ADC_IRQHandler+0xf6>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	e000      	b.n	8013e38 <HAL_ADC_IRQHandler+0xf8>
 8013e36:	4b4e      	ldr	r3, [pc, #312]	; (8013f70 <HAL_ADC_IRQHandler+0x230>)
 8013e38:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d135      	bne.n	8013eb6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	f003 0308 	and.w	r3, r3, #8
 8013e54:	2b08      	cmp	r3, #8
 8013e56:	d12e      	bne.n	8013eb6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7ff fd48 	bl	80138f2 <LL_ADC_REG_IsConversionOngoing>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d11a      	bne.n	8013e9e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	685a      	ldr	r2, [r3, #4]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f022 020c 	bic.w	r2, r2, #12
 8013e76:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d112      	bne.n	8013eb6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e94:	f043 0201 	orr.w	r2, r3, #1
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	659a      	str	r2, [r3, #88]	; 0x58
 8013e9c:	e00b      	b.n	8013eb6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ea2:	f043 0210 	orr.w	r2, r3, #16
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013eae:	f043 0201 	orr.w	r2, r3, #1
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	f7ed ff98 	bl	8001dec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	220c      	movs	r2, #12
 8013ec2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	f003 0320 	and.w	r3, r3, #32
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d004      	beq.n	8013ed8 <HAL_ADC_IRQHandler+0x198>
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	f003 0320 	and.w	r3, r3, #32
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d10b      	bne.n	8013ef0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	f000 809f 	beq.w	8014022 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f000 8099 	beq.w	8014022 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ef4:	f003 0310 	and.w	r3, r3, #16
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d105      	bne.n	8013f08 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7ff fbe8 	bl	80136e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8013f12:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7ff fba3 	bl	8013664 <LL_ADC_REG_IsTriggerSourceSWStart>
 8013f1e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	4a11      	ldr	r2, [pc, #68]	; (8013f6c <HAL_ADC_IRQHandler+0x22c>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d002      	beq.n	8013f30 <HAL_ADC_IRQHandler+0x1f0>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	e000      	b.n	8013f32 <HAL_ADC_IRQHandler+0x1f2>
 8013f30:	4b0f      	ldr	r3, [pc, #60]	; (8013f70 <HAL_ADC_IRQHandler+0x230>)
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	6812      	ldr	r2, [r2, #0]
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d008      	beq.n	8013f4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d005      	beq.n	8013f4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	2b06      	cmp	r3, #6
 8013f44:	d002      	beq.n	8013f4c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	2b07      	cmp	r3, #7
 8013f4a:	d104      	bne.n	8013f56 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	68db      	ldr	r3, [r3, #12]
 8013f52:	623b      	str	r3, [r7, #32]
 8013f54:	e013      	b.n	8013f7e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	4a04      	ldr	r2, [pc, #16]	; (8013f6c <HAL_ADC_IRQHandler+0x22c>)
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d009      	beq.n	8013f74 <HAL_ADC_IRQHandler+0x234>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	e007      	b.n	8013f76 <HAL_ADC_IRQHandler+0x236>
 8013f66:	bf00      	nop
 8013f68:	42028300 	.word	0x42028300
 8013f6c:	42028100 	.word	0x42028100
 8013f70:	42028000 	.word	0x42028000
 8013f74:	4b7d      	ldr	r3, [pc, #500]	; (801416c <HAL_ADC_IRQHandler+0x42c>)
 8013f76:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d047      	beq.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8013f84:	6a3b      	ldr	r3, [r7, #32]
 8013f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d007      	beq.n	8013f9e <HAL_ADC_IRQHandler+0x25e>
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d03f      	beq.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8013f94:	6a3b      	ldr	r3, [r7, #32]
 8013f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d13a      	bne.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fa8:	2b40      	cmp	r3, #64	; 0x40
 8013faa:	d133      	bne.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8013fac:	6a3b      	ldr	r3, [r7, #32]
 8013fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d12e      	bne.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7ff fcac 	bl	8013918 <LL_ADC_INJ_IsConversionOngoing>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d11a      	bne.n	8013ffc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	685a      	ldr	r2, [r3, #4]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013fd4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d112      	bne.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ff2:	f043 0201 	orr.w	r2, r3, #1
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	659a      	str	r2, [r3, #88]	; 0x58
 8013ffa:	e00b      	b.n	8014014 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014000:	f043 0210 	orr.w	r2, r3, #16
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801400c:	f043 0201 	orr.w	r2, r3, #1
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f000 fdf5 	bl	8014c04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2260      	movs	r2, #96	; 0x60
 8014020:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014028:	2b00      	cmp	r3, #0
 801402a:	d011      	beq.n	8014050 <HAL_ADC_IRQHandler+0x310>
 801402c:	69bb      	ldr	r3, [r7, #24]
 801402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00c      	beq.n	8014050 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801403a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 f8a0 	bl	8014188 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	2280      	movs	r2, #128	; 0x80
 801404e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014056:	2b00      	cmp	r3, #0
 8014058:	d012      	beq.n	8014080 <HAL_ADC_IRQHandler+0x340>
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014060:	2b00      	cmp	r3, #0
 8014062:	d00d      	beq.n	8014080 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014068:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f000 fddb 	bl	8014c2c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801407e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8014080:	69fb      	ldr	r3, [r7, #28]
 8014082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014086:	2b00      	cmp	r3, #0
 8014088:	d012      	beq.n	80140b0 <HAL_ADC_IRQHandler+0x370>
 801408a:	69bb      	ldr	r3, [r7, #24]
 801408c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014090:	2b00      	cmp	r3, #0
 8014092:	d00d      	beq.n	80140b0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014098:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f000 fdcd 	bl	8014c40 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80140b0:	69fb      	ldr	r3, [r7, #28]
 80140b2:	f003 0310 	and.w	r3, r3, #16
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d036      	beq.n	8014128 <HAL_ADC_IRQHandler+0x3e8>
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	f003 0310 	and.w	r3, r3, #16
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d031      	beq.n	8014128 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d102      	bne.n	80140d2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80140cc:	2301      	movs	r3, #1
 80140ce:	627b      	str	r3, [r7, #36]	; 0x24
 80140d0:	e014      	b.n	80140fc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d008      	beq.n	80140ea <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80140d8:	4825      	ldr	r0, [pc, #148]	; (8014170 <HAL_ADC_IRQHandler+0x430>)
 80140da:	f7ff fb73 	bl	80137c4 <LL_ADC_GetMultiDMATransfer>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00b      	beq.n	80140fc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80140e4:	2301      	movs	r3, #1
 80140e6:	627b      	str	r3, [r7, #36]	; 0x24
 80140e8:	e008      	b.n	80140fc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	68db      	ldr	r3, [r3, #12]
 80140f0:	f003 0301 	and.w	r3, r3, #1
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d001      	beq.n	80140fc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80140f8:	2301      	movs	r3, #1
 80140fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80140fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d10e      	bne.n	8014120 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014106:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014112:	f043 0202 	orr.w	r2, r3, #2
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 f83e 	bl	801419c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	2210      	movs	r2, #16
 8014126:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801412e:	2b00      	cmp	r3, #0
 8014130:	d018      	beq.n	8014164 <HAL_ADC_IRQHandler+0x424>
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014138:	2b00      	cmp	r3, #0
 801413a:	d013      	beq.n	8014164 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014140:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801414c:	f043 0208 	orr.w	r2, r3, #8
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801415c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 fd5a 	bl	8014c18 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8014164:	bf00      	nop
 8014166:	3728      	adds	r7, #40	; 0x28
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	42028000 	.word	0x42028000
 8014170:	42028300 	.word	0x42028300

08014174 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8014174:	b480      	push	{r7}
 8014176:	b083      	sub	sp, #12
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801417c:	bf00      	nop
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr

08014188 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8014190:	bf00      	nop
 8014192:	370c      	adds	r7, #12
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801419c:	b480      	push	{r7}
 801419e:	b083      	sub	sp, #12
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80141a4:	bf00      	nop
 80141a6:	370c      	adds	r7, #12
 80141a8:	46bd      	mov	sp, r7
 80141aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ae:	4770      	bx	lr

080141b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80141b0:	b590      	push	{r4, r7, lr}
 80141b2:	b0b7      	sub	sp, #220	; 0xdc
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80141ba:	2300      	movs	r3, #0
 80141bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80141c0:	2300      	movs	r3, #0
 80141c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80141ca:	2b01      	cmp	r3, #1
 80141cc:	d101      	bne.n	80141d2 <HAL_ADC_ConfigChannel+0x22>
 80141ce:	2302      	movs	r3, #2
 80141d0:	e3c1      	b.n	8014956 <HAL_ADC_ConfigChannel+0x7a6>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2201      	movs	r2, #1
 80141d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	4618      	mov	r0, r3
 80141e0:	f7ff fb87 	bl	80138f2 <LL_ADC_REG_IsConversionOngoing>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	f040 83a6 	bne.w	8014938 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6818      	ldr	r0, [r3, #0]
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	6859      	ldr	r1, [r3, #4]
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	461a      	mov	r2, r3
 80141fa:	f7ff fa46 	bl	801368a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	4618      	mov	r0, r3
 8014204:	f7ff fb75 	bl	80138f2 <LL_ADC_REG_IsConversionOngoing>
 8014208:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4618      	mov	r0, r3
 8014212:	f7ff fb81 	bl	8013918 <LL_ADC_INJ_IsConversionOngoing>
 8014216:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801421a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801421e:	2b00      	cmp	r3, #0
 8014220:	f040 81c1 	bne.w	80145a6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8014224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014228:	2b00      	cmp	r3, #0
 801422a:	f040 81bc 	bne.w	80145a6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014236:	d10f      	bne.n	8014258 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6818      	ldr	r0, [r3, #0]
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	2200      	movs	r2, #0
 8014242:	4619      	mov	r1, r3
 8014244:	f7ff fa60 	bl	8013708 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014250:	4618      	mov	r0, r3
 8014252:	f7ff f9f4 	bl	801363e <LL_ADC_SetSamplingTimeCommonConfig>
 8014256:	e00e      	b.n	8014276 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6818      	ldr	r0, [r3, #0]
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	6819      	ldr	r1, [r3, #0]
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	689b      	ldr	r3, [r3, #8]
 8014264:	461a      	mov	r2, r3
 8014266:	f7ff fa4f 	bl	8013708 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2100      	movs	r1, #0
 8014270:	4618      	mov	r0, r3
 8014272:	f7ff f9e4 	bl	801363e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	695a      	ldr	r2, [r3, #20]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	08db      	lsrs	r3, r3, #3
 8014282:	f003 0303 	and.w	r3, r3, #3
 8014286:	005b      	lsls	r3, r3, #1
 8014288:	fa02 f303 	lsl.w	r3, r2, r3
 801428c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	691b      	ldr	r3, [r3, #16]
 8014294:	2b04      	cmp	r3, #4
 8014296:	d00a      	beq.n	80142ae <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6818      	ldr	r0, [r3, #0]
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	6919      	ldr	r1, [r3, #16]
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80142a8:	f7ff f974 	bl	8013594 <LL_ADC_SetOffset>
 80142ac:	e17b      	b.n	80145a6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2100      	movs	r1, #0
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7ff f991 	bl	80135dc <LL_ADC_GetOffsetChannel>
 80142ba:	4603      	mov	r3, r0
 80142bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d10a      	bne.n	80142da <HAL_ADC_ConfigChannel+0x12a>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	2100      	movs	r1, #0
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7ff f986 	bl	80135dc <LL_ADC_GetOffsetChannel>
 80142d0:	4603      	mov	r3, r0
 80142d2:	0e9b      	lsrs	r3, r3, #26
 80142d4:	f003 021f 	and.w	r2, r3, #31
 80142d8:	e01e      	b.n	8014318 <HAL_ADC_ConfigChannel+0x168>
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2100      	movs	r1, #0
 80142e0:	4618      	mov	r0, r3
 80142e2:	f7ff f97b 	bl	80135dc <LL_ADC_GetOffsetChannel>
 80142e6:	4603      	mov	r3, r0
 80142e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80142ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80142f0:	fa93 f3a3 	rbit	r3, r3
 80142f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80142f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80142fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8014300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d101      	bne.n	801430c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8014308:	2320      	movs	r3, #32
 801430a:	e004      	b.n	8014316 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 801430c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014310:	fab3 f383 	clz	r3, r3
 8014314:	b2db      	uxtb	r3, r3
 8014316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014320:	2b00      	cmp	r3, #0
 8014322:	d105      	bne.n	8014330 <HAL_ADC_ConfigChannel+0x180>
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	0e9b      	lsrs	r3, r3, #26
 801432a:	f003 031f 	and.w	r3, r3, #31
 801432e:	e018      	b.n	8014362 <HAL_ADC_ConfigChannel+0x1b2>
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801433c:	fa93 f3a3 	rbit	r3, r3
 8014340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8014344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801434c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014350:	2b00      	cmp	r3, #0
 8014352:	d101      	bne.n	8014358 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8014354:	2320      	movs	r3, #32
 8014356:	e004      	b.n	8014362 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8014358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801435c:	fab3 f383 	clz	r3, r3
 8014360:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8014362:	429a      	cmp	r2, r3
 8014364:	d106      	bne.n	8014374 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2200      	movs	r2, #0
 801436c:	2100      	movs	r1, #0
 801436e:	4618      	mov	r0, r3
 8014370:	f7ff f94a 	bl	8013608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	2101      	movs	r1, #1
 801437a:	4618      	mov	r0, r3
 801437c:	f7ff f92e 	bl	80135dc <LL_ADC_GetOffsetChannel>
 8014380:	4603      	mov	r3, r0
 8014382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014386:	2b00      	cmp	r3, #0
 8014388:	d10a      	bne.n	80143a0 <HAL_ADC_ConfigChannel+0x1f0>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	2101      	movs	r1, #1
 8014390:	4618      	mov	r0, r3
 8014392:	f7ff f923 	bl	80135dc <LL_ADC_GetOffsetChannel>
 8014396:	4603      	mov	r3, r0
 8014398:	0e9b      	lsrs	r3, r3, #26
 801439a:	f003 021f 	and.w	r2, r3, #31
 801439e:	e01e      	b.n	80143de <HAL_ADC_ConfigChannel+0x22e>
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2101      	movs	r1, #1
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7ff f918 	bl	80135dc <LL_ADC_GetOffsetChannel>
 80143ac:	4603      	mov	r3, r0
 80143ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80143b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80143b6:	fa93 f3a3 	rbit	r3, r3
 80143ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80143be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80143c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80143c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d101      	bne.n	80143d2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80143ce:	2320      	movs	r3, #32
 80143d0:	e004      	b.n	80143dc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80143d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80143d6:	fab3 f383 	clz	r3, r3
 80143da:	b2db      	uxtb	r3, r3
 80143dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d105      	bne.n	80143f6 <HAL_ADC_ConfigChannel+0x246>
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	0e9b      	lsrs	r3, r3, #26
 80143f0:	f003 031f 	and.w	r3, r3, #31
 80143f4:	e018      	b.n	8014428 <HAL_ADC_ConfigChannel+0x278>
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80143fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014402:	fa93 f3a3 	rbit	r3, r3
 8014406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801440a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801440e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8014412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014416:	2b00      	cmp	r3, #0
 8014418:	d101      	bne.n	801441e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 801441a:	2320      	movs	r3, #32
 801441c:	e004      	b.n	8014428 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 801441e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014422:	fab3 f383 	clz	r3, r3
 8014426:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8014428:	429a      	cmp	r2, r3
 801442a:	d106      	bne.n	801443a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2200      	movs	r2, #0
 8014432:	2101      	movs	r1, #1
 8014434:	4618      	mov	r0, r3
 8014436:	f7ff f8e7 	bl	8013608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	2102      	movs	r1, #2
 8014440:	4618      	mov	r0, r3
 8014442:	f7ff f8cb 	bl	80135dc <LL_ADC_GetOffsetChannel>
 8014446:	4603      	mov	r3, r0
 8014448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801444c:	2b00      	cmp	r3, #0
 801444e:	d10a      	bne.n	8014466 <HAL_ADC_ConfigChannel+0x2b6>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2102      	movs	r1, #2
 8014456:	4618      	mov	r0, r3
 8014458:	f7ff f8c0 	bl	80135dc <LL_ADC_GetOffsetChannel>
 801445c:	4603      	mov	r3, r0
 801445e:	0e9b      	lsrs	r3, r3, #26
 8014460:	f003 021f 	and.w	r2, r3, #31
 8014464:	e01e      	b.n	80144a4 <HAL_ADC_ConfigChannel+0x2f4>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	2102      	movs	r1, #2
 801446c:	4618      	mov	r0, r3
 801446e:	f7ff f8b5 	bl	80135dc <LL_ADC_GetOffsetChannel>
 8014472:	4603      	mov	r3, r0
 8014474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801447c:	fa93 f3a3 	rbit	r3, r3
 8014480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8014484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014488:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801448c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014490:	2b00      	cmp	r3, #0
 8014492:	d101      	bne.n	8014498 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8014494:	2320      	movs	r3, #32
 8014496:	e004      	b.n	80144a2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8014498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801449c:	fab3 f383 	clz	r3, r3
 80144a0:	b2db      	uxtb	r3, r3
 80144a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d105      	bne.n	80144bc <HAL_ADC_ConfigChannel+0x30c>
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	0e9b      	lsrs	r3, r3, #26
 80144b6:	f003 031f 	and.w	r3, r3, #31
 80144ba:	e016      	b.n	80144ea <HAL_ADC_ConfigChannel+0x33a>
 80144bc:	683b      	ldr	r3, [r7, #0]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80144c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144c8:	fa93 f3a3 	rbit	r3, r3
 80144cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80144ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80144d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80144d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d101      	bne.n	80144e0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80144dc:	2320      	movs	r3, #32
 80144de:	e004      	b.n	80144ea <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80144e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80144e4:	fab3 f383 	clz	r3, r3
 80144e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d106      	bne.n	80144fc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2200      	movs	r2, #0
 80144f4:	2102      	movs	r1, #2
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7ff f886 	bl	8013608 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2103      	movs	r1, #3
 8014502:	4618      	mov	r0, r3
 8014504:	f7ff f86a 	bl	80135dc <LL_ADC_GetOffsetChannel>
 8014508:	4603      	mov	r3, r0
 801450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801450e:	2b00      	cmp	r3, #0
 8014510:	d10a      	bne.n	8014528 <HAL_ADC_ConfigChannel+0x378>
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2103      	movs	r1, #3
 8014518:	4618      	mov	r0, r3
 801451a:	f7ff f85f 	bl	80135dc <LL_ADC_GetOffsetChannel>
 801451e:	4603      	mov	r3, r0
 8014520:	0e9b      	lsrs	r3, r3, #26
 8014522:	f003 021f 	and.w	r2, r3, #31
 8014526:	e017      	b.n	8014558 <HAL_ADC_ConfigChannel+0x3a8>
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	2103      	movs	r1, #3
 801452e:	4618      	mov	r0, r3
 8014530:	f7ff f854 	bl	80135dc <LL_ADC_GetOffsetChannel>
 8014534:	4603      	mov	r3, r0
 8014536:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801453a:	fa93 f3a3 	rbit	r3, r3
 801453e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8014540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014542:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8014544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014546:	2b00      	cmp	r3, #0
 8014548:	d101      	bne.n	801454e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 801454a:	2320      	movs	r3, #32
 801454c:	e003      	b.n	8014556 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 801454e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014550:	fab3 f383 	clz	r3, r3
 8014554:	b2db      	uxtb	r3, r3
 8014556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014560:	2b00      	cmp	r3, #0
 8014562:	d105      	bne.n	8014570 <HAL_ADC_ConfigChannel+0x3c0>
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	0e9b      	lsrs	r3, r3, #26
 801456a:	f003 031f 	and.w	r3, r3, #31
 801456e:	e011      	b.n	8014594 <HAL_ADC_ConfigChannel+0x3e4>
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014578:	fa93 f3a3 	rbit	r3, r3
 801457c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801457e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014580:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8014582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014584:	2b00      	cmp	r3, #0
 8014586:	d101      	bne.n	801458c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8014588:	2320      	movs	r3, #32
 801458a:	e003      	b.n	8014594 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 801458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801458e:	fab3 f383 	clz	r3, r3
 8014592:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8014594:	429a      	cmp	r2, r3
 8014596:	d106      	bne.n	80145a6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	2200      	movs	r2, #0
 801459e:	2103      	movs	r1, #3
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7ff f831 	bl	8013608 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	4618      	mov	r0, r3
 80145ac:	f7ff f97a 	bl	80138a4 <LL_ADC_IsEnabled>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	f040 81c9 	bne.w	801494a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6818      	ldr	r0, [r3, #0]
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	6819      	ldr	r1, [r3, #0]
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	68db      	ldr	r3, [r3, #12]
 80145c4:	461a      	mov	r2, r3
 80145c6:	f7ff f8cb 	bl	8013760 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	68db      	ldr	r3, [r3, #12]
 80145ce:	4a8f      	ldr	r2, [pc, #572]	; (801480c <HAL_ADC_ConfigChannel+0x65c>)
 80145d0:	4293      	cmp	r3, r2
 80145d2:	f040 8131 	bne.w	8014838 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d10b      	bne.n	80145fe <HAL_ADC_ConfigChannel+0x44e>
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	0e9b      	lsrs	r3, r3, #26
 80145ec:	3301      	adds	r3, #1
 80145ee:	f003 031f 	and.w	r3, r3, #31
 80145f2:	2b09      	cmp	r3, #9
 80145f4:	bf94      	ite	ls
 80145f6:	2301      	movls	r3, #1
 80145f8:	2300      	movhi	r3, #0
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	e019      	b.n	8014632 <HAL_ADC_ConfigChannel+0x482>
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014606:	fa93 f3a3 	rbit	r3, r3
 801460a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801460c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801460e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8014610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014612:	2b00      	cmp	r3, #0
 8014614:	d101      	bne.n	801461a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8014616:	2320      	movs	r3, #32
 8014618:	e003      	b.n	8014622 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 801461a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801461c:	fab3 f383 	clz	r3, r3
 8014620:	b2db      	uxtb	r3, r3
 8014622:	3301      	adds	r3, #1
 8014624:	f003 031f 	and.w	r3, r3, #31
 8014628:	2b09      	cmp	r3, #9
 801462a:	bf94      	ite	ls
 801462c:	2301      	movls	r3, #1
 801462e:	2300      	movhi	r3, #0
 8014630:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014632:	2b00      	cmp	r3, #0
 8014634:	d079      	beq.n	801472a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801463e:	2b00      	cmp	r3, #0
 8014640:	d107      	bne.n	8014652 <HAL_ADC_ConfigChannel+0x4a2>
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	0e9b      	lsrs	r3, r3, #26
 8014648:	3301      	adds	r3, #1
 801464a:	069b      	lsls	r3, r3, #26
 801464c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8014650:	e015      	b.n	801467e <HAL_ADC_ConfigChannel+0x4ce>
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801465a:	fa93 f3a3 	rbit	r3, r3
 801465e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8014660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014662:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8014664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014666:	2b00      	cmp	r3, #0
 8014668:	d101      	bne.n	801466e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 801466a:	2320      	movs	r3, #32
 801466c:	e003      	b.n	8014676 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 801466e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014670:	fab3 f383 	clz	r3, r3
 8014674:	b2db      	uxtb	r3, r3
 8014676:	3301      	adds	r3, #1
 8014678:	069b      	lsls	r3, r3, #26
 801467a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014686:	2b00      	cmp	r3, #0
 8014688:	d109      	bne.n	801469e <HAL_ADC_ConfigChannel+0x4ee>
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	0e9b      	lsrs	r3, r3, #26
 8014690:	3301      	adds	r3, #1
 8014692:	f003 031f 	and.w	r3, r3, #31
 8014696:	2101      	movs	r1, #1
 8014698:	fa01 f303 	lsl.w	r3, r1, r3
 801469c:	e017      	b.n	80146ce <HAL_ADC_ConfigChannel+0x51e>
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80146a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146a6:	fa93 f3a3 	rbit	r3, r3
 80146aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80146ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80146b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d101      	bne.n	80146ba <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80146b6:	2320      	movs	r3, #32
 80146b8:	e003      	b.n	80146c2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80146ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146bc:	fab3 f383 	clz	r3, r3
 80146c0:	b2db      	uxtb	r3, r3
 80146c2:	3301      	adds	r3, #1
 80146c4:	f003 031f 	and.w	r3, r3, #31
 80146c8:	2101      	movs	r1, #1
 80146ca:	fa01 f303 	lsl.w	r3, r1, r3
 80146ce:	ea42 0103 	orr.w	r1, r2, r3
 80146d2:	683b      	ldr	r3, [r7, #0]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d10a      	bne.n	80146f4 <HAL_ADC_ConfigChannel+0x544>
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	0e9b      	lsrs	r3, r3, #26
 80146e4:	3301      	adds	r3, #1
 80146e6:	f003 021f 	and.w	r2, r3, #31
 80146ea:	4613      	mov	r3, r2
 80146ec:	005b      	lsls	r3, r3, #1
 80146ee:	4413      	add	r3, r2
 80146f0:	051b      	lsls	r3, r3, #20
 80146f2:	e018      	b.n	8014726 <HAL_ADC_ConfigChannel+0x576>
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80146fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fc:	fa93 f3a3 	rbit	r3, r3
 8014700:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8014702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014704:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8014706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014708:	2b00      	cmp	r3, #0
 801470a:	d101      	bne.n	8014710 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 801470c:	2320      	movs	r3, #32
 801470e:	e003      	b.n	8014718 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8014710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014712:	fab3 f383 	clz	r3, r3
 8014716:	b2db      	uxtb	r3, r3
 8014718:	3301      	adds	r3, #1
 801471a:	f003 021f 	and.w	r2, r3, #31
 801471e:	4613      	mov	r3, r2
 8014720:	005b      	lsls	r3, r3, #1
 8014722:	4413      	add	r3, r2
 8014724:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014726:	430b      	orrs	r3, r1
 8014728:	e081      	b.n	801482e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014732:	2b00      	cmp	r3, #0
 8014734:	d107      	bne.n	8014746 <HAL_ADC_ConfigChannel+0x596>
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	0e9b      	lsrs	r3, r3, #26
 801473c:	3301      	adds	r3, #1
 801473e:	069b      	lsls	r3, r3, #26
 8014740:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8014744:	e015      	b.n	8014772 <HAL_ADC_ConfigChannel+0x5c2>
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474e:	fa93 f3a3 	rbit	r3, r3
 8014752:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8014754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014756:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8014758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801475a:	2b00      	cmp	r3, #0
 801475c:	d101      	bne.n	8014762 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 801475e:	2320      	movs	r3, #32
 8014760:	e003      	b.n	801476a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8014762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014764:	fab3 f383 	clz	r3, r3
 8014768:	b2db      	uxtb	r3, r3
 801476a:	3301      	adds	r3, #1
 801476c:	069b      	lsls	r3, r3, #26
 801476e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801477a:	2b00      	cmp	r3, #0
 801477c:	d109      	bne.n	8014792 <HAL_ADC_ConfigChannel+0x5e2>
 801477e:	683b      	ldr	r3, [r7, #0]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	0e9b      	lsrs	r3, r3, #26
 8014784:	3301      	adds	r3, #1
 8014786:	f003 031f 	and.w	r3, r3, #31
 801478a:	2101      	movs	r1, #1
 801478c:	fa01 f303 	lsl.w	r3, r1, r3
 8014790:	e017      	b.n	80147c2 <HAL_ADC_ConfigChannel+0x612>
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014798:	6a3b      	ldr	r3, [r7, #32]
 801479a:	fa93 f3a3 	rbit	r3, r3
 801479e:	61fb      	str	r3, [r7, #28]
  return result;
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80147a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d101      	bne.n	80147ae <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80147aa:	2320      	movs	r3, #32
 80147ac:	e003      	b.n	80147b6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80147ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b0:	fab3 f383 	clz	r3, r3
 80147b4:	b2db      	uxtb	r3, r3
 80147b6:	3301      	adds	r3, #1
 80147b8:	f003 031f 	and.w	r3, r3, #31
 80147bc:	2101      	movs	r1, #1
 80147be:	fa01 f303 	lsl.w	r3, r1, r3
 80147c2:	ea42 0103 	orr.w	r1, r2, r3
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10d      	bne.n	80147ee <HAL_ADC_ConfigChannel+0x63e>
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	0e9b      	lsrs	r3, r3, #26
 80147d8:	3301      	adds	r3, #1
 80147da:	f003 021f 	and.w	r2, r3, #31
 80147de:	4613      	mov	r3, r2
 80147e0:	005b      	lsls	r3, r3, #1
 80147e2:	4413      	add	r3, r2
 80147e4:	3b1e      	subs	r3, #30
 80147e6:	051b      	lsls	r3, r3, #20
 80147e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80147ec:	e01e      	b.n	801482c <HAL_ADC_ConfigChannel+0x67c>
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	fa93 f3a3 	rbit	r3, r3
 80147fa:	613b      	str	r3, [r7, #16]
  return result;
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d104      	bne.n	8014810 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8014806:	2320      	movs	r3, #32
 8014808:	e006      	b.n	8014818 <HAL_ADC_ConfigChannel+0x668>
 801480a:	bf00      	nop
 801480c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	fab3 f383 	clz	r3, r3
 8014816:	b2db      	uxtb	r3, r3
 8014818:	3301      	adds	r3, #1
 801481a:	f003 021f 	and.w	r2, r3, #31
 801481e:	4613      	mov	r3, r2
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	4413      	add	r3, r2
 8014824:	3b1e      	subs	r3, #30
 8014826:	051b      	lsls	r3, r3, #20
 8014828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801482c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 801482e:	683a      	ldr	r2, [r7, #0]
 8014830:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014832:	4619      	mov	r1, r3
 8014834:	f7fe ff68 	bl	8013708 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	4b48      	ldr	r3, [pc, #288]	; (8014960 <HAL_ADC_ConfigChannel+0x7b0>)
 801483e:	4013      	ands	r3, r2
 8014840:	2b00      	cmp	r3, #0
 8014842:	f000 8082 	beq.w	801494a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8014846:	4847      	ldr	r0, [pc, #284]	; (8014964 <HAL_ADC_ConfigChannel+0x7b4>)
 8014848:	f7fe fe96 	bl	8013578 <LL_ADC_GetCommonPathInternalCh>
 801484c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014850:	4845      	ldr	r0, [pc, #276]	; (8014968 <HAL_ADC_ConfigChannel+0x7b8>)
 8014852:	f7ff f827 	bl	80138a4 <LL_ADC_IsEnabled>
 8014856:	4604      	mov	r4, r0
 8014858:	4844      	ldr	r0, [pc, #272]	; (801496c <HAL_ADC_ConfigChannel+0x7bc>)
 801485a:	f7ff f823 	bl	80138a4 <LL_ADC_IsEnabled>
 801485e:	4603      	mov	r3, r0
 8014860:	4323      	orrs	r3, r4
 8014862:	2b00      	cmp	r3, #0
 8014864:	d15e      	bne.n	8014924 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a41      	ldr	r2, [pc, #260]	; (8014970 <HAL_ADC_ConfigChannel+0x7c0>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d127      	bne.n	80148c0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8014870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014878:	2b00      	cmp	r3, #0
 801487a:	d121      	bne.n	80148c0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	4a39      	ldr	r2, [pc, #228]	; (8014968 <HAL_ADC_ConfigChannel+0x7b8>)
 8014882:	4293      	cmp	r3, r2
 8014884:	d161      	bne.n	801494a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801488a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801488e:	4619      	mov	r1, r3
 8014890:	4834      	ldr	r0, [pc, #208]	; (8014964 <HAL_ADC_ConfigChannel+0x7b4>)
 8014892:	f7fe fe5e 	bl	8013552 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8014896:	4b37      	ldr	r3, [pc, #220]	; (8014974 <HAL_ADC_ConfigChannel+0x7c4>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	099b      	lsrs	r3, r3, #6
 801489c:	4a36      	ldr	r2, [pc, #216]	; (8014978 <HAL_ADC_ConfigChannel+0x7c8>)
 801489e:	fba2 2303 	umull	r2, r3, r2, r3
 80148a2:	099b      	lsrs	r3, r3, #6
 80148a4:	1c5a      	adds	r2, r3, #1
 80148a6:	4613      	mov	r3, r2
 80148a8:	005b      	lsls	r3, r3, #1
 80148aa:	4413      	add	r3, r2
 80148ac:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80148ae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80148b0:	e002      	b.n	80148b8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	3b01      	subs	r3, #1
 80148b6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d1f9      	bne.n	80148b2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80148be:	e044      	b.n	801494a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	4a2d      	ldr	r2, [pc, #180]	; (801497c <HAL_ADC_ConfigChannel+0x7cc>)
 80148c6:	4293      	cmp	r3, r2
 80148c8:	d113      	bne.n	80148f2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80148ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80148ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d10d      	bne.n	80148f2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	4a23      	ldr	r2, [pc, #140]	; (8014968 <HAL_ADC_ConfigChannel+0x7b8>)
 80148dc:	4293      	cmp	r3, r2
 80148de:	d134      	bne.n	801494a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80148e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80148e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80148e8:	4619      	mov	r1, r3
 80148ea:	481e      	ldr	r0, [pc, #120]	; (8014964 <HAL_ADC_ConfigChannel+0x7b4>)
 80148ec:	f7fe fe31 	bl	8013552 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80148f0:	e02b      	b.n	801494a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	4a22      	ldr	r2, [pc, #136]	; (8014980 <HAL_ADC_ConfigChannel+0x7d0>)
 80148f8:	4293      	cmp	r3, r2
 80148fa:	d126      	bne.n	801494a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80148fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014904:	2b00      	cmp	r3, #0
 8014906:	d120      	bne.n	801494a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	4a16      	ldr	r2, [pc, #88]	; (8014968 <HAL_ADC_ConfigChannel+0x7b8>)
 801490e:	4293      	cmp	r3, r2
 8014910:	d11b      	bne.n	801494a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014916:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801491a:	4619      	mov	r1, r3
 801491c:	4811      	ldr	r0, [pc, #68]	; (8014964 <HAL_ADC_ConfigChannel+0x7b4>)
 801491e:	f7fe fe18 	bl	8013552 <LL_ADC_SetCommonPathInternalCh>
 8014922:	e012      	b.n	801494a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014928:	f043 0220 	orr.w	r2, r3, #32
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8014930:	2301      	movs	r3, #1
 8014932:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8014936:	e008      	b.n	801494a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801493c:	f043 0220 	orr.w	r2, r3, #32
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8014944:	2301      	movs	r3, #1
 8014946:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2200      	movs	r2, #0
 801494e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8014952:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8014956:	4618      	mov	r0, r3
 8014958:	37dc      	adds	r7, #220	; 0xdc
 801495a:	46bd      	mov	sp, r7
 801495c:	bd90      	pop	{r4, r7, pc}
 801495e:	bf00      	nop
 8014960:	80080000 	.word	0x80080000
 8014964:	42028300 	.word	0x42028300
 8014968:	42028000 	.word	0x42028000
 801496c:	42028100 	.word	0x42028100
 8014970:	c7520000 	.word	0xc7520000
 8014974:	20000090 	.word	0x20000090
 8014978:	053e2d63 	.word	0x053e2d63
 801497c:	cb840000 	.word	0xcb840000
 8014980:	80000001 	.word	0x80000001

08014984 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 801498c:	2300      	movs	r3, #0
 801498e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	4618      	mov	r0, r3
 8014996:	f7fe ff85 	bl	80138a4 <LL_ADC_IsEnabled>
 801499a:	4603      	mov	r3, r0
 801499c:	2b00      	cmp	r3, #0
 801499e:	d169      	bne.n	8014a74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	689a      	ldr	r2, [r3, #8]
 80149a6:	4b36      	ldr	r3, [pc, #216]	; (8014a80 <ADC_Enable+0xfc>)
 80149a8:	4013      	ands	r3, r2
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d00d      	beq.n	80149ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149b2:	f043 0210 	orr.w	r2, r3, #16
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80149be:	f043 0201 	orr.w	r2, r3, #1
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80149c6:	2301      	movs	r3, #1
 80149c8:	e055      	b.n	8014a76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fe ff54 	bl	801387c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80149d4:	482b      	ldr	r0, [pc, #172]	; (8014a84 <ADC_Enable+0x100>)
 80149d6:	f7fe fdcf 	bl	8013578 <LL_ADC_GetCommonPathInternalCh>
 80149da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80149dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d013      	beq.n	8014a0c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80149e4:	4b28      	ldr	r3, [pc, #160]	; (8014a88 <ADC_Enable+0x104>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	099b      	lsrs	r3, r3, #6
 80149ea:	4a28      	ldr	r2, [pc, #160]	; (8014a8c <ADC_Enable+0x108>)
 80149ec:	fba2 2303 	umull	r2, r3, r2, r3
 80149f0:	099b      	lsrs	r3, r3, #6
 80149f2:	1c5a      	adds	r2, r3, #1
 80149f4:	4613      	mov	r3, r2
 80149f6:	005b      	lsls	r3, r3, #1
 80149f8:	4413      	add	r3, r2
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80149fe:	e002      	b.n	8014a06 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	3b01      	subs	r3, #1
 8014a04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1f9      	bne.n	8014a00 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8014a0c:	f7fe fd82 	bl	8013514 <HAL_GetTick>
 8014a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014a12:	e028      	b.n	8014a66 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7fe ff43 	bl	80138a4 <LL_ADC_IsEnabled>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d104      	bne.n	8014a2e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7fe ff27 	bl	801387c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014a2e:	f7fe fd71 	bl	8013514 <HAL_GetTick>
 8014a32:	4602      	mov	r2, r0
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	2b02      	cmp	r3, #2
 8014a3a:	d914      	bls.n	8014a66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f003 0301 	and.w	r3, r3, #1
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d00d      	beq.n	8014a66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014a4e:	f043 0210 	orr.w	r2, r3, #16
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014a5a:	f043 0201 	orr.w	r2, r3, #1
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8014a62:	2301      	movs	r3, #1
 8014a64:	e007      	b.n	8014a76 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f003 0301 	and.w	r3, r3, #1
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d1cf      	bne.n	8014a14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014a74:	2300      	movs	r3, #0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}
 8014a7e:	bf00      	nop
 8014a80:	8000003f 	.word	0x8000003f
 8014a84:	42028300 	.word	0x42028300
 8014a88:	20000090 	.word	0x20000090
 8014a8c:	053e2d63 	.word	0x053e2d63

08014a90 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b084      	sub	sp, #16
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a9c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014aa2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d14b      	bne.n	8014b42 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	f003 0308 	and.w	r3, r3, #8
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d021      	beq.n	8014b08 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7fe fdcb 	bl	8013664 <LL_ADC_REG_IsTriggerSourceSWStart>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d032      	beq.n	8014b3a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d12b      	bne.n	8014b3a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d11f      	bne.n	8014b3a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014afe:	f043 0201 	orr.w	r2, r3, #1
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	659a      	str	r2, [r3, #88]	; 0x58
 8014b06:	e018      	b.n	8014b3a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	68db      	ldr	r3, [r3, #12]
 8014b0e:	f003 0302 	and.w	r3, r3, #2
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d111      	bne.n	8014b3a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d105      	bne.n	8014b3a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b32:	f043 0201 	orr.w	r2, r3, #1
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8014b3a:	68f8      	ldr	r0, [r7, #12]
 8014b3c:	f7ed f956 	bl	8001dec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8014b40:	e00e      	b.n	8014b60 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b46:	f003 0310 	and.w	r3, r3, #16
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d003      	beq.n	8014b56 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8014b4e:	68f8      	ldr	r0, [r7, #12]
 8014b50:	f7ff fb24 	bl	801419c <HAL_ADC_ErrorCallback>
}
 8014b54:	e004      	b.n	8014b60 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	4798      	blx	r3
}
 8014b60:	bf00      	nop
 8014b62:	3710      	adds	r7, #16
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b74:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f7ff fafc 	bl	8014174 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014b7c:	bf00      	nop
 8014b7e:	3710      	adds	r7, #16
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}

08014b84 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b084      	sub	sp, #16
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b90:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ba2:	f043 0204 	orr.w	r2, r3, #4
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8014baa:	68f8      	ldr	r0, [r7, #12]
 8014bac:	f7ff faf6 	bl	801419c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8014bb0:	bf00      	nop
 8014bb2:	3710      	adds	r7, #16
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <LL_ADC_IsEnabled>:
{
 8014bb8:	b480      	push	{r7}
 8014bba:	b083      	sub	sp, #12
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	689b      	ldr	r3, [r3, #8]
 8014bc4:	f003 0301 	and.w	r3, r3, #1
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d101      	bne.n	8014bd0 <LL_ADC_IsEnabled+0x18>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e000      	b.n	8014bd2 <LL_ADC_IsEnabled+0x1a>
 8014bd0:	2300      	movs	r3, #0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	370c      	adds	r7, #12
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr

08014bde <LL_ADC_REG_IsConversionOngoing>:
{
 8014bde:	b480      	push	{r7}
 8014be0:	b083      	sub	sp, #12
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	f003 0304 	and.w	r3, r3, #4
 8014bee:	2b04      	cmp	r3, #4
 8014bf0:	d101      	bne.n	8014bf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e000      	b.n	8014bf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8014bf6:	2300      	movs	r3, #0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	370c      	adds	r7, #12
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr

08014c04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b083      	sub	sp, #12
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8014c0c:	bf00      	nop
 8014c0e:	370c      	adds	r7, #12
 8014c10:	46bd      	mov	sp, r7
 8014c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c16:	4770      	bx	lr

08014c18 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8014c20:	bf00      	nop
 8014c22:	370c      	adds	r7, #12
 8014c24:	46bd      	mov	sp, r7
 8014c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2a:	4770      	bx	lr

08014c2c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b083      	sub	sp, #12
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8014c34:	bf00      	nop
 8014c36:	370c      	adds	r7, #12
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr

08014c40 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8014c48:	bf00      	nop
 8014c4a:	370c      	adds	r7, #12
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr

08014c54 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8014c54:	b480      	push	{r7}
 8014c56:	b083      	sub	sp, #12
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8014c5c:	bf00      	nop
 8014c5e:	370c      	adds	r7, #12
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr

08014c68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8014c68:	b590      	push	{r4, r7, lr}
 8014c6a:	b0a1      	sub	sp, #132	; 0x84
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014c72:	2300      	movs	r3, #0
 8014c74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8014c7e:	2b01      	cmp	r3, #1
 8014c80:	d101      	bne.n	8014c86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8014c82:	2302      	movs	r3, #2
 8014c84:	e089      	b.n	8014d9a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2201      	movs	r2, #1
 8014c8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8014c8e:	2300      	movs	r3, #0
 8014c90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8014c92:	2300      	movs	r3, #0
 8014c94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4a42      	ldr	r2, [pc, #264]	; (8014da4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8014c9c:	4293      	cmp	r3, r2
 8014c9e:	d102      	bne.n	8014ca6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8014ca0:	4b41      	ldr	r3, [pc, #260]	; (8014da8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8014ca2:	60fb      	str	r3, [r7, #12]
 8014ca4:	e001      	b.n	8014caa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d10b      	bne.n	8014cc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cb4:	f043 0220 	orr.w	r2, r3, #32
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	e068      	b.n	8014d9a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7ff ff87 	bl	8014bde <LL_ADC_REG_IsConversionOngoing>
 8014cd0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7ff ff81 	bl	8014bde <LL_ADC_REG_IsConversionOngoing>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d14a      	bne.n	8014d78 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8014ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d147      	bne.n	8014d78 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8014ce8:	4b30      	ldr	r3, [pc, #192]	; (8014dac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8014cea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d027      	beq.n	8014d44 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8014cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014cf6:	689b      	ldr	r3, [r3, #8]
 8014cf8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014cfc:	683b      	ldr	r3, [r7, #0]
 8014cfe:	6859      	ldr	r1, [r3, #4]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014d06:	035b      	lsls	r3, r3, #13
 8014d08:	430b      	orrs	r3, r1
 8014d0a:	431a      	orrs	r2, r3
 8014d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014d10:	4824      	ldr	r0, [pc, #144]	; (8014da4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8014d12:	f7ff ff51 	bl	8014bb8 <LL_ADC_IsEnabled>
 8014d16:	4604      	mov	r4, r0
 8014d18:	4823      	ldr	r0, [pc, #140]	; (8014da8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8014d1a:	f7ff ff4d 	bl	8014bb8 <LL_ADC_IsEnabled>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	4323      	orrs	r3, r4
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d132      	bne.n	8014d8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8014d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8014d2e:	f023 030f 	bic.w	r3, r3, #15
 8014d32:	683a      	ldr	r2, [r7, #0]
 8014d34:	6811      	ldr	r1, [r2, #0]
 8014d36:	683a      	ldr	r2, [r7, #0]
 8014d38:	6892      	ldr	r2, [r2, #8]
 8014d3a:	430a      	orrs	r2, r1
 8014d3c:	431a      	orrs	r2, r3
 8014d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d40:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014d42:	e023      	b.n	8014d8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8014d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d46:	689b      	ldr	r3, [r3, #8]
 8014d48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8014d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d4e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014d50:	4814      	ldr	r0, [pc, #80]	; (8014da4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8014d52:	f7ff ff31 	bl	8014bb8 <LL_ADC_IsEnabled>
 8014d56:	4604      	mov	r4, r0
 8014d58:	4813      	ldr	r0, [pc, #76]	; (8014da8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8014d5a:	f7ff ff2d 	bl	8014bb8 <LL_ADC_IsEnabled>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	4323      	orrs	r3, r4
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d112      	bne.n	8014d8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8014d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d68:	689b      	ldr	r3, [r3, #8]
 8014d6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8014d6e:	f023 030f 	bic.w	r3, r3, #15
 8014d72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014d74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014d76:	e009      	b.n	8014d8c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d7c:	f043 0220 	orr.w	r2, r3, #32
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8014d84:	2301      	movs	r3, #1
 8014d86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8014d8a:	e000      	b.n	8014d8e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014d8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	2200      	movs	r2, #0
 8014d92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8014d96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3784      	adds	r7, #132	; 0x84
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd90      	pop	{r4, r7, pc}
 8014da2:	bf00      	nop
 8014da4:	42028000 	.word	0x42028000
 8014da8:	42028100 	.word	0x42028100
 8014dac:	42028300 	.word	0x42028300

08014db0 <__NVIC_SetPriorityGrouping>:
{
 8014db0:	b480      	push	{r7}
 8014db2:	b085      	sub	sp, #20
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f003 0307 	and.w	r3, r3, #7
 8014dbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014dc0:	4b0c      	ldr	r3, [pc, #48]	; (8014df4 <__NVIC_SetPriorityGrouping+0x44>)
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014dc6:	68ba      	ldr	r2, [r7, #8]
 8014dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8014dcc:	4013      	ands	r3, r2
 8014dce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8014ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014de2:	4a04      	ldr	r2, [pc, #16]	; (8014df4 <__NVIC_SetPriorityGrouping+0x44>)
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	60d3      	str	r3, [r2, #12]
}
 8014de8:	bf00      	nop
 8014dea:	3714      	adds	r7, #20
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr
 8014df4:	e000ed00 	.word	0xe000ed00

08014df8 <__NVIC_GetPriorityGrouping>:
{
 8014df8:	b480      	push	{r7}
 8014dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014dfc:	4b04      	ldr	r3, [pc, #16]	; (8014e10 <__NVIC_GetPriorityGrouping+0x18>)
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	0a1b      	lsrs	r3, r3, #8
 8014e02:	f003 0307 	and.w	r3, r3, #7
}
 8014e06:	4618      	mov	r0, r3
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr
 8014e10:	e000ed00 	.word	0xe000ed00

08014e14 <__NVIC_EnableIRQ>:
{
 8014e14:	b480      	push	{r7}
 8014e16:	b083      	sub	sp, #12
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	db0b      	blt.n	8014e3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014e26:	79fb      	ldrb	r3, [r7, #7]
 8014e28:	f003 021f 	and.w	r2, r3, #31
 8014e2c:	4907      	ldr	r1, [pc, #28]	; (8014e4c <__NVIC_EnableIRQ+0x38>)
 8014e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e32:	095b      	lsrs	r3, r3, #5
 8014e34:	2001      	movs	r0, #1
 8014e36:	fa00 f202 	lsl.w	r2, r0, r2
 8014e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014e3e:	bf00      	nop
 8014e40:	370c      	adds	r7, #12
 8014e42:	46bd      	mov	sp, r7
 8014e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e48:	4770      	bx	lr
 8014e4a:	bf00      	nop
 8014e4c:	e000e100 	.word	0xe000e100

08014e50 <__NVIC_SetPriority>:
{
 8014e50:	b480      	push	{r7}
 8014e52:	b083      	sub	sp, #12
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	4603      	mov	r3, r0
 8014e58:	6039      	str	r1, [r7, #0]
 8014e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	db0a      	blt.n	8014e7a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	b2da      	uxtb	r2, r3
 8014e68:	490c      	ldr	r1, [pc, #48]	; (8014e9c <__NVIC_SetPriority+0x4c>)
 8014e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e6e:	0152      	lsls	r2, r2, #5
 8014e70:	b2d2      	uxtb	r2, r2
 8014e72:	440b      	add	r3, r1
 8014e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014e78:	e00a      	b.n	8014e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	b2da      	uxtb	r2, r3
 8014e7e:	4908      	ldr	r1, [pc, #32]	; (8014ea0 <__NVIC_SetPriority+0x50>)
 8014e80:	79fb      	ldrb	r3, [r7, #7]
 8014e82:	f003 030f 	and.w	r3, r3, #15
 8014e86:	3b04      	subs	r3, #4
 8014e88:	0152      	lsls	r2, r2, #5
 8014e8a:	b2d2      	uxtb	r2, r2
 8014e8c:	440b      	add	r3, r1
 8014e8e:	761a      	strb	r2, [r3, #24]
}
 8014e90:	bf00      	nop
 8014e92:	370c      	adds	r7, #12
 8014e94:	46bd      	mov	sp, r7
 8014e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9a:	4770      	bx	lr
 8014e9c:	e000e100 	.word	0xe000e100
 8014ea0:	e000ed00 	.word	0xe000ed00

08014ea4 <NVIC_EncodePriority>:
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b089      	sub	sp, #36	; 0x24
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f003 0307 	and.w	r3, r3, #7
 8014eb6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014eb8:	69fb      	ldr	r3, [r7, #28]
 8014eba:	f1c3 0307 	rsb	r3, r3, #7
 8014ebe:	2b03      	cmp	r3, #3
 8014ec0:	bf28      	it	cs
 8014ec2:	2303      	movcs	r3, #3
 8014ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	3303      	adds	r3, #3
 8014eca:	2b06      	cmp	r3, #6
 8014ecc:	d902      	bls.n	8014ed4 <NVIC_EncodePriority+0x30>
 8014ece:	69fb      	ldr	r3, [r7, #28]
 8014ed0:	3b04      	subs	r3, #4
 8014ed2:	e000      	b.n	8014ed6 <NVIC_EncodePriority+0x32>
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	fa02 f303 	lsl.w	r3, r2, r3
 8014ee2:	43da      	mvns	r2, r3
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	401a      	ands	r2, r3
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014eec:	f04f 31ff 	mov.w	r1, #4294967295
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8014ef6:	43d9      	mvns	r1, r3
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014efc:	4313      	orrs	r3, r2
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3724      	adds	r7, #36	; 0x24
 8014f02:	46bd      	mov	sp, r7
 8014f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f08:	4770      	bx	lr

08014f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b082      	sub	sp, #8
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff ff4c 	bl	8014db0 <__NVIC_SetPriorityGrouping>
}
 8014f18:	bf00      	nop
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}

08014f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b086      	sub	sp, #24
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	4603      	mov	r3, r0
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	607a      	str	r2, [r7, #4]
 8014f2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8014f2e:	f7ff ff63 	bl	8014df8 <__NVIC_GetPriorityGrouping>
 8014f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	68b9      	ldr	r1, [r7, #8]
 8014f38:	6978      	ldr	r0, [r7, #20]
 8014f3a:	f7ff ffb3 	bl	8014ea4 <NVIC_EncodePriority>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f44:	4611      	mov	r1, r2
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7ff ff82 	bl	8014e50 <__NVIC_SetPriority>
}
 8014f4c:	bf00      	nop
 8014f4e:	3718      	adds	r7, #24
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}

08014f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b082      	sub	sp, #8
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7ff ff56 	bl	8014e14 <__NVIC_EnableIRQ>
}
 8014f68:	bf00      	nop
 8014f6a:	3708      	adds	r7, #8
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}

08014f70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b084      	sub	sp, #16
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d101      	bne.n	8014f82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8014f7e:	2301      	movs	r3, #1
 8014f80:	e08d      	b.n	801509e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	461a      	mov	r2, r3
 8014f88:	4b47      	ldr	r3, [pc, #284]	; (80150a8 <HAL_DMA_Init+0x138>)
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d80f      	bhi.n	8014fae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	461a      	mov	r2, r3
 8014f94:	4b45      	ldr	r3, [pc, #276]	; (80150ac <HAL_DMA_Init+0x13c>)
 8014f96:	4413      	add	r3, r2
 8014f98:	4a45      	ldr	r2, [pc, #276]	; (80150b0 <HAL_DMA_Init+0x140>)
 8014f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8014f9e:	091b      	lsrs	r3, r3, #4
 8014fa0:	009a      	lsls	r2, r3, #2
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4a42      	ldr	r2, [pc, #264]	; (80150b4 <HAL_DMA_Init+0x144>)
 8014faa:	649a      	str	r2, [r3, #72]	; 0x48
 8014fac:	e00e      	b.n	8014fcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	4b40      	ldr	r3, [pc, #256]	; (80150b8 <HAL_DMA_Init+0x148>)
 8014fb6:	4413      	add	r3, r2
 8014fb8:	4a3d      	ldr	r2, [pc, #244]	; (80150b0 <HAL_DMA_Init+0x140>)
 8014fba:	fba2 2303 	umull	r2, r3, r2, r3
 8014fbe:	091b      	lsrs	r3, r3, #4
 8014fc0:	009a      	lsls	r2, r3, #2
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	4a3c      	ldr	r2, [pc, #240]	; (80150bc <HAL_DMA_Init+0x14c>)
 8014fca:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2202      	movs	r2, #2
 8014fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8014fe2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8014fe6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8014ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	691b      	ldr	r3, [r3, #16]
 8014ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	699b      	ldr	r3, [r3, #24]
 8015002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6a1b      	ldr	r3, [r3, #32]
 801500e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	4313      	orrs	r3, r2
 8015014:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68fa      	ldr	r2, [r7, #12]
 801501c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 faf2 	bl	8015608 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	689b      	ldr	r3, [r3, #8]
 8015028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801502c:	d102      	bne.n	8015034 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2200      	movs	r2, #0
 8015032:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	685a      	ldr	r2, [r3, #4]
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801503c:	b2d2      	uxtb	r2, r2
 801503e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8015048:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	685b      	ldr	r3, [r3, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d010      	beq.n	8015074 <HAL_DMA_Init+0x104>
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	685b      	ldr	r3, [r3, #4]
 8015056:	2b04      	cmp	r3, #4
 8015058:	d80c      	bhi.n	8015074 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f000 fb12 	bl	8015684 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015064:	2200      	movs	r2, #0
 8015066:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015070:	605a      	str	r2, [r3, #4]
 8015072:	e008      	b.n	8015086 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	2200      	movs	r2, #0
 801507e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	2200      	movs	r2, #0
 8015084:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2200      	movs	r2, #0
 801508a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2201      	movs	r2, #1
 8015090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2200      	movs	r2, #0
 8015098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801509c:	2300      	movs	r3, #0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	40020407 	.word	0x40020407
 80150ac:	bffdfff8 	.word	0xbffdfff8
 80150b0:	cccccccd 	.word	0xcccccccd
 80150b4:	40020000 	.word	0x40020000
 80150b8:	bffdfbf8 	.word	0xbffdfbf8
 80150bc:	40020400 	.word	0x40020400

080150c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b086      	sub	sp, #24
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	607a      	str	r2, [r7, #4]
 80150cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80150ce:	2300      	movs	r3, #0
 80150d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80150d8:	2b01      	cmp	r3, #1
 80150da:	d101      	bne.n	80150e0 <HAL_DMA_Start_IT+0x20>
 80150dc:	2302      	movs	r3, #2
 80150de:	e066      	b.n	80151ae <HAL_DMA_Start_IT+0xee>
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2201      	movs	r2, #1
 80150e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d155      	bne.n	80151a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2202      	movs	r2, #2
 80150f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	2200      	movs	r2, #0
 8015100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	f022 0201 	bic.w	r2, r2, #1
 8015110:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	687a      	ldr	r2, [r7, #4]
 8015116:	68b9      	ldr	r1, [r7, #8]
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	f000 fa37 	bl	801558c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015122:	2b00      	cmp	r3, #0
 8015124:	d008      	beq.n	8015138 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	681a      	ldr	r2, [r3, #0]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	f042 020e 	orr.w	r2, r2, #14
 8015134:	601a      	str	r2, [r3, #0]
 8015136:	e00f      	b.n	8015158 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	681a      	ldr	r2, [r3, #0]
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f022 0204 	bic.w	r2, r2, #4
 8015146:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	681a      	ldr	r2, [r3, #0]
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	f042 020a 	orr.w	r2, r2, #10
 8015156:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015162:	2b00      	cmp	r3, #0
 8015164:	d007      	beq.n	8015176 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015174:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801517a:	2b00      	cmp	r3, #0
 801517c:	d007      	beq.n	801518e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801518c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	f042 0201 	orr.w	r2, r2, #1
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	e005      	b.n	80151ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2200      	movs	r2, #0
 80151a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80151a8:	2302      	movs	r3, #2
 80151aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80151ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3718      	adds	r7, #24
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}

080151b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80151b6:	b480      	push	{r7}
 80151b8:	b085      	sub	sp, #20
 80151ba:	af00      	add	r7, sp, #0
 80151bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80151be:	2300      	movs	r3, #0
 80151c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80151c8:	b2db      	uxtb	r3, r3
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	d008      	beq.n	80151e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	2204      	movs	r2, #4
 80151d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2200      	movs	r2, #0
 80151d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80151dc:	2301      	movs	r3, #1
 80151de:	e040      	b.n	8015262 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	f022 020e 	bic.w	r2, r2, #14
 80151ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80151fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	681a      	ldr	r2, [r3, #0]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f022 0201 	bic.w	r2, r2, #1
 801520e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015214:	f003 021c 	and.w	r2, r3, #28
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801521c:	2101      	movs	r1, #1
 801521e:	fa01 f202 	lsl.w	r2, r1, r2
 8015222:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801522c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015232:	2b00      	cmp	r3, #0
 8015234:	d00c      	beq.n	8015250 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801523a:	681a      	ldr	r2, [r3, #0]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015244:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801524e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2201      	movs	r2, #1
 8015254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2200      	movs	r2, #0
 801525c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8015260:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8015262:	4618      	mov	r0, r3
 8015264:	3714      	adds	r7, #20
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b084      	sub	sp, #16
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015276:	2300      	movs	r3, #0
 8015278:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8015280:	b2db      	uxtb	r3, r3
 8015282:	2b02      	cmp	r3, #2
 8015284:	d005      	beq.n	8015292 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2204      	movs	r2, #4
 801528a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 801528c:	2301      	movs	r3, #1
 801528e:	73fb      	strb	r3, [r7, #15]
 8015290:	e047      	b.n	8015322 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	f022 020e 	bic.w	r2, r2, #14
 80152a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	681a      	ldr	r2, [r3, #0]
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	f022 0201 	bic.w	r2, r2, #1
 80152b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80152bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80152c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80152c6:	f003 021c 	and.w	r2, r3, #28
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80152ce:	2101      	movs	r1, #1
 80152d0:	fa01 f202 	lsl.w	r2, r1, r2
 80152d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80152de:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00c      	beq.n	8015302 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80152f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80152f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015300:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2201      	movs	r2, #1
 8015306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2200      	movs	r2, #0
 801530e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015316:	2b00      	cmp	r3, #0
 8015318:	d003      	beq.n	8015322 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	4798      	blx	r3
    }
  }
  return status;
 8015322:	7bfb      	ldrb	r3, [r7, #15]
}
 8015324:	4618      	mov	r0, r3
 8015326:	3710      	adds	r7, #16
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}

0801532c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015348:	f003 031c 	and.w	r3, r3, #28
 801534c:	2204      	movs	r2, #4
 801534e:	409a      	lsls	r2, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	4013      	ands	r3, r2
 8015354:	2b00      	cmp	r3, #0
 8015356:	d053      	beq.n	8015400 <HAL_DMA_IRQHandler+0xd4>
 8015358:	68bb      	ldr	r3, [r7, #8]
 801535a:	f003 0304 	and.w	r3, r3, #4
 801535e:	2b00      	cmp	r3, #0
 8015360:	d04e      	beq.n	8015400 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801536c:	2b00      	cmp	r3, #0
 801536e:	d024      	beq.n	80153ba <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015374:	f003 021c 	and.w	r2, r3, #28
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801537c:	2104      	movs	r1, #4
 801537e:	fa01 f202 	lsl.w	r2, r1, r2
 8015382:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801538e:	2b00      	cmp	r3, #0
 8015390:	d109      	bne.n	80153a6 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015396:	2b00      	cmp	r3, #0
 8015398:	f000 80c0 	beq.w	801551c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80153a4:	e0ba      	b.n	801551c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	f000 80b6 	beq.w	801551c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80153b8:	e0b0      	b.n	801551c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	f003 0320 	and.w	r3, r3, #32
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d107      	bne.n	80153d8 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	681a      	ldr	r2, [r3, #0]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	f022 0204 	bic.w	r2, r2, #4
 80153d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153dc:	f003 021c 	and.w	r2, r3, #28
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80153e4:	2104      	movs	r1, #4
 80153e6:	fa01 f202 	lsl.w	r2, r1, r2
 80153ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f000 8093 	beq.w	801551c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80153fe:	e08d      	b.n	801551c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015404:	f003 031c 	and.w	r3, r3, #28
 8015408:	2202      	movs	r2, #2
 801540a:	409a      	lsls	r2, r3
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	4013      	ands	r3, r2
 8015410:	2b00      	cmp	r3, #0
 8015412:	d04e      	beq.n	80154b2 <HAL_DMA_IRQHandler+0x186>
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	f003 0302 	and.w	r3, r3, #2
 801541a:	2b00      	cmp	r3, #0
 801541c:	d049      	beq.n	80154b2 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015428:	2b00      	cmp	r3, #0
 801542a:	d018      	beq.n	801545e <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015436:	2b00      	cmp	r3, #0
 8015438:	d108      	bne.n	801544c <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801543e:	2b00      	cmp	r3, #0
 8015440:	d06e      	beq.n	8015520 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801544a:	e069      	b.n	8015520 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015450:	2b00      	cmp	r3, #0
 8015452:	d065      	beq.n	8015520 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801545c:	e060      	b.n	8015520 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	f003 0320 	and.w	r3, r3, #32
 8015468:	2b00      	cmp	r3, #0
 801546a:	d10b      	bne.n	8015484 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	681a      	ldr	r2, [r3, #0]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	f022 020a 	bic.w	r2, r2, #10
 801547a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2201      	movs	r2, #1
 8015480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015488:	f003 021c 	and.w	r2, r3, #28
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015490:	2102      	movs	r1, #2
 8015492:	fa01 f202 	lsl.w	r2, r1, r2
 8015496:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d03b      	beq.n	8015520 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80154b0:	e036      	b.n	8015520 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80154b6:	f003 031c 	and.w	r3, r3, #28
 80154ba:	2208      	movs	r2, #8
 80154bc:	409a      	lsls	r2, r3
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	4013      	ands	r3, r2
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d02e      	beq.n	8015524 <HAL_DMA_IRQHandler+0x1f8>
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	f003 0308 	and.w	r3, r3, #8
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d029      	beq.n	8015524 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f022 020e 	bic.w	r2, r2, #14
 80154de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80154e4:	f003 021c 	and.w	r2, r3, #28
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80154ec:	2101      	movs	r1, #1
 80154ee:	fa01 f202 	lsl.w	r2, r1, r2
 80154f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2201      	movs	r2, #1
 80154f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2201      	movs	r2, #1
 80154fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2200      	movs	r2, #0
 8015506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801550e:	2b00      	cmp	r3, #0
 8015510:	d008      	beq.n	8015524 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801551a:	e002      	b.n	8015522 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 801551c:	bf00      	nop
 801551e:	e000      	b.n	8015522 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8015520:	bf00      	nop
  return;
 8015522:	bf00      	nop
 8015524:	bf00      	nop
}
 8015526:	3710      	adds	r7, #16
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 801552c:	b480      	push	{r7}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015536:	2300      	movs	r3, #0
 8015538:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d103      	bne.n	8015548 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8015540:	2301      	movs	r3, #1
 8015542:	72fb      	strb	r3, [r7, #11]
    return status;
 8015544:	7afb      	ldrb	r3, [r7, #11]
 8015546:	e01b      	b.n	8015580 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	f003 0310 	and.w	r3, r3, #16
 8015556:	2b00      	cmp	r3, #0
 8015558:	d00d      	beq.n	8015576 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015560:	2b00      	cmp	r3, #0
 8015562:	d004      	beq.n	801556e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801556a:	60fb      	str	r3, [r7, #12]
 801556c:	e003      	b.n	8015576 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015574:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	601a      	str	r2, [r3, #0]

  return status;
 801557e:	7afb      	ldrb	r3, [r7, #11]
}
 8015580:	4618      	mov	r0, r3
 8015582:	3714      	adds	r7, #20
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr

0801558c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801558c:	b480      	push	{r7}
 801558e:	b085      	sub	sp, #20
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	607a      	str	r2, [r7, #4]
 8015598:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801559e:	68fa      	ldr	r2, [r7, #12]
 80155a0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80155a2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d004      	beq.n	80155b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80155b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155ba:	f003 021c 	and.w	r2, r3, #28
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155c2:	2101      	movs	r1, #1
 80155c4:	fa01 f202 	lsl.w	r2, r1, r2
 80155c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	683a      	ldr	r2, [r7, #0]
 80155d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	2b10      	cmp	r3, #16
 80155d8:	d108      	bne.n	80155ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	68ba      	ldr	r2, [r7, #8]
 80155e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 80155ea:	e007      	b.n	80155fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	68ba      	ldr	r2, [r7, #8]
 80155f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	60da      	str	r2, [r3, #12]
}
 80155fc:	bf00      	nop
 80155fe:	3714      	adds	r7, #20
 8015600:	46bd      	mov	sp, r7
 8015602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015606:	4770      	bx	lr

08015608 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8015608:	b480      	push	{r7}
 801560a:	b085      	sub	sp, #20
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	461a      	mov	r2, r3
 8015616:	4b17      	ldr	r3, [pc, #92]	; (8015674 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8015618:	429a      	cmp	r2, r3
 801561a:	d80a      	bhi.n	8015632 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015620:	089b      	lsrs	r3, r3, #2
 8015622:	009b      	lsls	r3, r3, #2
 8015624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015628:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	6513      	str	r3, [r2, #80]	; 0x50
 8015630:	e007      	b.n	8015642 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015636:	089b      	lsrs	r3, r3, #2
 8015638:	009a      	lsls	r2, r3, #2
 801563a:	4b0f      	ldr	r3, [pc, #60]	; (8015678 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801563c:	4413      	add	r3, r2
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	b2db      	uxtb	r3, r3
 8015648:	3b08      	subs	r3, #8
 801564a:	4a0c      	ldr	r2, [pc, #48]	; (801567c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801564c:	fba2 2303 	umull	r2, r3, r2, r3
 8015650:	091b      	lsrs	r3, r3, #4
 8015652:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	4a0a      	ldr	r2, [pc, #40]	; (8015680 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8015658:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	f003 031f 	and.w	r3, r3, #31
 8015660:	2201      	movs	r2, #1
 8015662:	409a      	lsls	r2, r3
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	659a      	str	r2, [r3, #88]	; 0x58
}
 8015668:	bf00      	nop
 801566a:	3714      	adds	r7, #20
 801566c:	46bd      	mov	sp, r7
 801566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015672:	4770      	bx	lr
 8015674:	40020407 	.word	0x40020407
 8015678:	40020820 	.word	0x40020820
 801567c:	cccccccd 	.word	0xcccccccd
 8015680:	40020880 	.word	0x40020880

08015684 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8015684:	b480      	push	{r7}
 8015686:	b085      	sub	sp, #20
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	b2db      	uxtb	r3, r3
 8015692:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8015694:	68fa      	ldr	r2, [r7, #12]
 8015696:	4b0b      	ldr	r3, [pc, #44]	; (80156c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8015698:	4413      	add	r3, r2
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	461a      	mov	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	4a08      	ldr	r2, [pc, #32]	; (80156c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80156a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	3b01      	subs	r3, #1
 80156ac:	f003 0303 	and.w	r3, r3, #3
 80156b0:	2201      	movs	r2, #1
 80156b2:	409a      	lsls	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80156b8:	bf00      	nop
 80156ba:	3714      	adds	r7, #20
 80156bc:	46bd      	mov	sp, r7
 80156be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c2:	4770      	bx	lr
 80156c4:	1000823f 	.word	0x1000823f
 80156c8:	40020940 	.word	0x40020940

080156cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b087      	sub	sp, #28
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80156d6:	2300      	movs	r3, #0
 80156d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80156da:	e158      	b.n	801598e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	681a      	ldr	r2, [r3, #0]
 80156e0:	2101      	movs	r1, #1
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	fa01 f303 	lsl.w	r3, r1, r3
 80156e8:	4013      	ands	r3, r2
 80156ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	f000 814a 	beq.w	8015988 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	f003 0303 	and.w	r3, r3, #3
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	d005      	beq.n	801570c <HAL_GPIO_Init+0x40>
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	f003 0303 	and.w	r3, r3, #3
 8015708:	2b02      	cmp	r3, #2
 801570a:	d130      	bne.n	801576e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	689b      	ldr	r3, [r3, #8]
 8015710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	005b      	lsls	r3, r3, #1
 8015716:	2203      	movs	r2, #3
 8015718:	fa02 f303 	lsl.w	r3, r2, r3
 801571c:	43db      	mvns	r3, r3
 801571e:	693a      	ldr	r2, [r7, #16]
 8015720:	4013      	ands	r3, r2
 8015722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	68da      	ldr	r2, [r3, #12]
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	fa02 f303 	lsl.w	r3, r2, r3
 8015730:	693a      	ldr	r2, [r7, #16]
 8015732:	4313      	orrs	r3, r2
 8015734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	693a      	ldr	r2, [r7, #16]
 801573a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8015742:	2201      	movs	r2, #1
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	fa02 f303 	lsl.w	r3, r2, r3
 801574a:	43db      	mvns	r3, r3
 801574c:	693a      	ldr	r2, [r7, #16]
 801574e:	4013      	ands	r3, r2
 8015750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	685b      	ldr	r3, [r3, #4]
 8015756:	091b      	lsrs	r3, r3, #4
 8015758:	f003 0201 	and.w	r2, r3, #1
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	fa02 f303 	lsl.w	r3, r2, r3
 8015762:	693a      	ldr	r2, [r7, #16]
 8015764:	4313      	orrs	r3, r2
 8015766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	693a      	ldr	r2, [r7, #16]
 801576c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801576e:	683b      	ldr	r3, [r7, #0]
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	f003 0303 	and.w	r3, r3, #3
 8015776:	2b03      	cmp	r3, #3
 8015778:	d017      	beq.n	80157aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	68db      	ldr	r3, [r3, #12]
 801577e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	005b      	lsls	r3, r3, #1
 8015784:	2203      	movs	r2, #3
 8015786:	fa02 f303 	lsl.w	r3, r2, r3
 801578a:	43db      	mvns	r3, r3
 801578c:	693a      	ldr	r2, [r7, #16]
 801578e:	4013      	ands	r3, r2
 8015790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	689a      	ldr	r2, [r3, #8]
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	005b      	lsls	r3, r3, #1
 801579a:	fa02 f303 	lsl.w	r3, r2, r3
 801579e:	693a      	ldr	r2, [r7, #16]
 80157a0:	4313      	orrs	r3, r2
 80157a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	693a      	ldr	r2, [r7, #16]
 80157a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	f003 0303 	and.w	r3, r3, #3
 80157b2:	2b02      	cmp	r3, #2
 80157b4:	d123      	bne.n	80157fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	08da      	lsrs	r2, r3, #3
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	3208      	adds	r2, #8
 80157be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	f003 0307 	and.w	r3, r3, #7
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	220f      	movs	r2, #15
 80157ce:	fa02 f303 	lsl.w	r3, r2, r3
 80157d2:	43db      	mvns	r3, r3
 80157d4:	693a      	ldr	r2, [r7, #16]
 80157d6:	4013      	ands	r3, r2
 80157d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	691a      	ldr	r2, [r3, #16]
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	f003 0307 	and.w	r3, r3, #7
 80157e4:	009b      	lsls	r3, r3, #2
 80157e6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ea:	693a      	ldr	r2, [r7, #16]
 80157ec:	4313      	orrs	r3, r2
 80157ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	08da      	lsrs	r2, r3, #3
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	3208      	adds	r2, #8
 80157f8:	6939      	ldr	r1, [r7, #16]
 80157fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	005b      	lsls	r3, r3, #1
 8015808:	2203      	movs	r2, #3
 801580a:	fa02 f303 	lsl.w	r3, r2, r3
 801580e:	43db      	mvns	r3, r3
 8015810:	693a      	ldr	r2, [r7, #16]
 8015812:	4013      	ands	r3, r2
 8015814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	f003 0203 	and.w	r2, r3, #3
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	fa02 f303 	lsl.w	r3, r2, r3
 8015826:	693a      	ldr	r2, [r7, #16]
 8015828:	4313      	orrs	r3, r2
 801582a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	693a      	ldr	r2, [r7, #16]
 8015830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	685b      	ldr	r3, [r3, #4]
 8015836:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801583a:	2b00      	cmp	r3, #0
 801583c:	f000 80a4 	beq.w	8015988 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8015840:	4a5a      	ldr	r2, [pc, #360]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	089b      	lsrs	r3, r3, #2
 8015846:	3318      	adds	r3, #24
 8015848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801584c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	f003 0303 	and.w	r3, r3, #3
 8015854:	00db      	lsls	r3, r3, #3
 8015856:	220f      	movs	r2, #15
 8015858:	fa02 f303 	lsl.w	r3, r2, r3
 801585c:	43db      	mvns	r3, r3
 801585e:	693a      	ldr	r2, [r7, #16]
 8015860:	4013      	ands	r3, r2
 8015862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	4a52      	ldr	r2, [pc, #328]	; (80159b0 <HAL_GPIO_Init+0x2e4>)
 8015868:	4293      	cmp	r3, r2
 801586a:	d025      	beq.n	80158b8 <HAL_GPIO_Init+0x1ec>
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	4a51      	ldr	r2, [pc, #324]	; (80159b4 <HAL_GPIO_Init+0x2e8>)
 8015870:	4293      	cmp	r3, r2
 8015872:	d01f      	beq.n	80158b4 <HAL_GPIO_Init+0x1e8>
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	4a50      	ldr	r2, [pc, #320]	; (80159b8 <HAL_GPIO_Init+0x2ec>)
 8015878:	4293      	cmp	r3, r2
 801587a:	d019      	beq.n	80158b0 <HAL_GPIO_Init+0x1e4>
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	4a4f      	ldr	r2, [pc, #316]	; (80159bc <HAL_GPIO_Init+0x2f0>)
 8015880:	4293      	cmp	r3, r2
 8015882:	d013      	beq.n	80158ac <HAL_GPIO_Init+0x1e0>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a4e      	ldr	r2, [pc, #312]	; (80159c0 <HAL_GPIO_Init+0x2f4>)
 8015888:	4293      	cmp	r3, r2
 801588a:	d00d      	beq.n	80158a8 <HAL_GPIO_Init+0x1dc>
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	4a4d      	ldr	r2, [pc, #308]	; (80159c4 <HAL_GPIO_Init+0x2f8>)
 8015890:	4293      	cmp	r3, r2
 8015892:	d007      	beq.n	80158a4 <HAL_GPIO_Init+0x1d8>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	4a4c      	ldr	r2, [pc, #304]	; (80159c8 <HAL_GPIO_Init+0x2fc>)
 8015898:	4293      	cmp	r3, r2
 801589a:	d101      	bne.n	80158a0 <HAL_GPIO_Init+0x1d4>
 801589c:	2306      	movs	r3, #6
 801589e:	e00c      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158a0:	2307      	movs	r3, #7
 80158a2:	e00a      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158a4:	2305      	movs	r3, #5
 80158a6:	e008      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158a8:	2304      	movs	r3, #4
 80158aa:	e006      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158ac:	2303      	movs	r3, #3
 80158ae:	e004      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158b0:	2302      	movs	r3, #2
 80158b2:	e002      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158b4:	2301      	movs	r3, #1
 80158b6:	e000      	b.n	80158ba <HAL_GPIO_Init+0x1ee>
 80158b8:	2300      	movs	r3, #0
 80158ba:	697a      	ldr	r2, [r7, #20]
 80158bc:	f002 0203 	and.w	r2, r2, #3
 80158c0:	00d2      	lsls	r2, r2, #3
 80158c2:	4093      	lsls	r3, r2
 80158c4:	693a      	ldr	r2, [r7, #16]
 80158c6:	4313      	orrs	r3, r2
 80158c8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80158ca:	4938      	ldr	r1, [pc, #224]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	089b      	lsrs	r3, r3, #2
 80158d0:	3318      	adds	r3, #24
 80158d2:	693a      	ldr	r2, [r7, #16]
 80158d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80158d8:	4b34      	ldr	r3, [pc, #208]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	43db      	mvns	r3, r3
 80158e2:	693a      	ldr	r2, [r7, #16]
 80158e4:	4013      	ands	r3, r2
 80158e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	685b      	ldr	r3, [r3, #4]
 80158ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d003      	beq.n	80158fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80158f4:	693a      	ldr	r2, [r7, #16]
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	4313      	orrs	r3, r2
 80158fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80158fc:	4a2b      	ldr	r2, [pc, #172]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 80158fe:	693b      	ldr	r3, [r7, #16]
 8015900:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015902:	4b2a      	ldr	r3, [pc, #168]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 8015904:	685b      	ldr	r3, [r3, #4]
 8015906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	43db      	mvns	r3, r3
 801590c:	693a      	ldr	r2, [r7, #16]
 801590e:	4013      	ands	r3, r2
 8015910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	685b      	ldr	r3, [r3, #4]
 8015916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801591a:	2b00      	cmp	r3, #0
 801591c:	d003      	beq.n	8015926 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 801591e:	693a      	ldr	r2, [r7, #16]
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	4313      	orrs	r3, r2
 8015924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8015926:	4a21      	ldr	r2, [pc, #132]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 801592c:	4b1f      	ldr	r3, [pc, #124]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 801592e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	43db      	mvns	r3, r3
 8015938:	693a      	ldr	r2, [r7, #16]
 801593a:	4013      	ands	r3, r2
 801593c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015946:	2b00      	cmp	r3, #0
 8015948:	d003      	beq.n	8015952 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 801594a:	693a      	ldr	r2, [r7, #16]
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	4313      	orrs	r3, r2
 8015950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015952:	4a16      	ldr	r2, [pc, #88]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 801595a:	4b14      	ldr	r3, [pc, #80]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 801595c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	43db      	mvns	r3, r3
 8015966:	693a      	ldr	r2, [r7, #16]
 8015968:	4013      	ands	r3, r2
 801596a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801596c:	683b      	ldr	r3, [r7, #0]
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015974:	2b00      	cmp	r3, #0
 8015976:	d003      	beq.n	8015980 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8015978:	693a      	ldr	r2, [r7, #16]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	4313      	orrs	r3, r2
 801597e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015980:	4a0a      	ldr	r2, [pc, #40]	; (80159ac <HAL_GPIO_Init+0x2e0>)
 8015982:	693b      	ldr	r3, [r7, #16]
 8015984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	3301      	adds	r3, #1
 801598c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	697b      	ldr	r3, [r7, #20]
 8015994:	fa22 f303 	lsr.w	r3, r2, r3
 8015998:	2b00      	cmp	r3, #0
 801599a:	f47f ae9f 	bne.w	80156dc <HAL_GPIO_Init+0x10>
  }
}
 801599e:	bf00      	nop
 80159a0:	bf00      	nop
 80159a2:	371c      	adds	r7, #28
 80159a4:	46bd      	mov	sp, r7
 80159a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159aa:	4770      	bx	lr
 80159ac:	4002f400 	.word	0x4002f400
 80159b0:	42020000 	.word	0x42020000
 80159b4:	42020400 	.word	0x42020400
 80159b8:	42020800 	.word	0x42020800
 80159bc:	42020c00 	.word	0x42020c00
 80159c0:	42021000 	.word	0x42021000
 80159c4:	42021400 	.word	0x42021400
 80159c8:	42021800 	.word	0x42021800

080159cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b083      	sub	sp, #12
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	460b      	mov	r3, r1
 80159d6:	807b      	strh	r3, [r7, #2]
 80159d8:	4613      	mov	r3, r2
 80159da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80159dc:	787b      	ldrb	r3, [r7, #1]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d003      	beq.n	80159ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80159e2:	887a      	ldrh	r2, [r7, #2]
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80159e8:	e002      	b.n	80159f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80159ea:	887a      	ldrh	r2, [r7, #2]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80159f0:	bf00      	nop
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr

080159fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b085      	sub	sp, #20
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	460b      	mov	r3, r1
 8015a06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	695b      	ldr	r3, [r3, #20]
 8015a0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8015a0e:	887a      	ldrh	r2, [r7, #2]
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	4013      	ands	r3, r2
 8015a14:	041a      	lsls	r2, r3, #16
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	43d9      	mvns	r1, r3
 8015a1a:	887b      	ldrh	r3, [r7, #2]
 8015a1c:	400b      	ands	r3, r1
 8015a1e:	431a      	orrs	r2, r3
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	619a      	str	r2, [r3, #24]
}
 8015a24:	bf00      	nop
 8015a26:	3714      	adds	r7, #20
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2e:	4770      	bx	lr

08015a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b082      	sub	sp, #8
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d101      	bne.n	8015a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015a3e:	2301      	movs	r3, #1
 8015a40:	e081      	b.n	8015b46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2200      	movs	r2, #0
 8015a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f7fc fe7a 	bl	8012750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2224      	movs	r2, #36	; 0x24
 8015a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	f022 0201 	bic.w	r2, r2, #1
 8015a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	685a      	ldr	r2, [r3, #4]
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015a80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	689a      	ldr	r2, [r3, #8]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015a90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	68db      	ldr	r3, [r3, #12]
 8015a96:	2b01      	cmp	r3, #1
 8015a98:	d107      	bne.n	8015aaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	689a      	ldr	r2, [r3, #8]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015aa6:	609a      	str	r2, [r3, #8]
 8015aa8:	e006      	b.n	8015ab8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	689a      	ldr	r2, [r3, #8]
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8015ab6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	68db      	ldr	r3, [r3, #12]
 8015abc:	2b02      	cmp	r3, #2
 8015abe:	d104      	bne.n	8015aca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	6812      	ldr	r2, [r2, #0]
 8015ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	68da      	ldr	r2, [r3, #12]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	691a      	ldr	r2, [r3, #16]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	695b      	ldr	r3, [r3, #20]
 8015af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	699b      	ldr	r3, [r3, #24]
 8015afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	430a      	orrs	r2, r1
 8015b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	69d9      	ldr	r1, [r3, #28]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6a1a      	ldr	r2, [r3, #32]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	430a      	orrs	r2, r1
 8015b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	681a      	ldr	r2, [r3, #0]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	f042 0201 	orr.w	r2, r2, #1
 8015b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2220      	movs	r2, #32
 8015b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	2200      	movs	r2, #0
 8015b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015b44:	2300      	movs	r3, #0
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3708      	adds	r7, #8
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
	...

08015b50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b088      	sub	sp, #32
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	607a      	str	r2, [r7, #4]
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	817b      	strh	r3, [r7, #10]
 8015b60:	4613      	mov	r3, r2
 8015b62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015b6a:	b2db      	uxtb	r3, r3
 8015b6c:	2b20      	cmp	r3, #32
 8015b6e:	f040 80da 	bne.w	8015d26 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d101      	bne.n	8015b80 <HAL_I2C_Master_Transmit+0x30>
 8015b7c:	2302      	movs	r3, #2
 8015b7e:	e0d3      	b.n	8015d28 <HAL_I2C_Master_Transmit+0x1d8>
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	2201      	movs	r2, #1
 8015b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015b88:	f7fd fcc4 	bl	8013514 <HAL_GetTick>
 8015b8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	9300      	str	r3, [sp, #0]
 8015b92:	2319      	movs	r3, #25
 8015b94:	2201      	movs	r2, #1
 8015b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	f000 f9e6 	bl	8015f6c <I2C_WaitOnFlagUntilTimeout>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d001      	beq.n	8015baa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	e0be      	b.n	8015d28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	2221      	movs	r2, #33	; 0x21
 8015bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2210      	movs	r2, #16
 8015bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	893a      	ldrh	r2, [r7, #8]
 8015bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015bd6:	b29b      	uxth	r3, r3
 8015bd8:	2bff      	cmp	r3, #255	; 0xff
 8015bda:	d90e      	bls.n	8015bfa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	22ff      	movs	r2, #255	; 0xff
 8015be0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015be6:	b2da      	uxtb	r2, r3
 8015be8:	8979      	ldrh	r1, [r7, #10]
 8015bea:	4b51      	ldr	r3, [pc, #324]	; (8015d30 <HAL_I2C_Master_Transmit+0x1e0>)
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f000 fbf6 	bl	80163e4 <I2C_TransferConfig>
 8015bf8:	e06c      	b.n	8015cd4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015bfe:	b29a      	uxth	r2, r3
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c08:	b2da      	uxtb	r2, r3
 8015c0a:	8979      	ldrh	r1, [r7, #10]
 8015c0c:	4b48      	ldr	r3, [pc, #288]	; (8015d30 <HAL_I2C_Master_Transmit+0x1e0>)
 8015c0e:	9300      	str	r3, [sp, #0]
 8015c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015c14:	68f8      	ldr	r0, [r7, #12]
 8015c16:	f000 fbe5 	bl	80163e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015c1a:	e05b      	b.n	8015cd4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c1c:	697a      	ldr	r2, [r7, #20]
 8015c1e:	6a39      	ldr	r1, [r7, #32]
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f000 f9f2 	bl	801600a <I2C_WaitOnTXISFlagUntilTimeout>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d001      	beq.n	8015c30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	e07b      	b.n	8015d28 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c34:	781a      	ldrb	r2, [r3, #0]
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c40:	1c5a      	adds	r2, r3, #1
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c4a:	b29b      	uxth	r3, r3
 8015c4c:	3b01      	subs	r3, #1
 8015c4e:	b29a      	uxth	r2, r3
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c58:	3b01      	subs	r3, #1
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d034      	beq.n	8015cd4 <HAL_I2C_Master_Transmit+0x184>
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d130      	bne.n	8015cd4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	9300      	str	r3, [sp, #0]
 8015c76:	6a3b      	ldr	r3, [r7, #32]
 8015c78:	2200      	movs	r2, #0
 8015c7a:	2180      	movs	r1, #128	; 0x80
 8015c7c:	68f8      	ldr	r0, [r7, #12]
 8015c7e:	f000 f975 	bl	8015f6c <I2C_WaitOnFlagUntilTimeout>
 8015c82:	4603      	mov	r3, r0
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d001      	beq.n	8015c8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015c88:	2301      	movs	r3, #1
 8015c8a:	e04d      	b.n	8015d28 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	2bff      	cmp	r3, #255	; 0xff
 8015c94:	d90e      	bls.n	8015cb4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	22ff      	movs	r2, #255	; 0xff
 8015c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ca0:	b2da      	uxtb	r2, r3
 8015ca2:	8979      	ldrh	r1, [r7, #10]
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f000 fb99 	bl	80163e4 <I2C_TransferConfig>
 8015cb2:	e00f      	b.n	8015cd4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cb8:	b29a      	uxth	r2, r3
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cc2:	b2da      	uxtb	r2, r3
 8015cc4:	8979      	ldrh	r1, [r7, #10]
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015cce:	68f8      	ldr	r0, [r7, #12]
 8015cd0:	f000 fb88 	bl	80163e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d19e      	bne.n	8015c1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015cde:	697a      	ldr	r2, [r7, #20]
 8015ce0:	6a39      	ldr	r1, [r7, #32]
 8015ce2:	68f8      	ldr	r0, [r7, #12]
 8015ce4:	f000 f9d8 	bl	8016098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d001      	beq.n	8015cf2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	e01a      	b.n	8015d28 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2220      	movs	r2, #32
 8015cf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	6859      	ldr	r1, [r3, #4]
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	681a      	ldr	r2, [r3, #0]
 8015d04:	4b0b      	ldr	r3, [pc, #44]	; (8015d34 <HAL_I2C_Master_Transmit+0x1e4>)
 8015d06:	400b      	ands	r3, r1
 8015d08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	2220      	movs	r2, #32
 8015d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	2200      	movs	r2, #0
 8015d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015d22:	2300      	movs	r3, #0
 8015d24:	e000      	b.n	8015d28 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015d26:	2302      	movs	r3, #2
  }
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3718      	adds	r7, #24
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd80      	pop	{r7, pc}
 8015d30:	80002000 	.word	0x80002000
 8015d34:	fe00e800 	.word	0xfe00e800

08015d38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b088      	sub	sp, #32
 8015d3c:	af02      	add	r7, sp, #8
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	607a      	str	r2, [r7, #4]
 8015d42:	461a      	mov	r2, r3
 8015d44:	460b      	mov	r3, r1
 8015d46:	817b      	strh	r3, [r7, #10]
 8015d48:	4613      	mov	r3, r2
 8015d4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	2b20      	cmp	r3, #32
 8015d56:	f040 80db 	bne.w	8015f10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d101      	bne.n	8015d68 <HAL_I2C_Master_Receive+0x30>
 8015d64:	2302      	movs	r3, #2
 8015d66:	e0d4      	b.n	8015f12 <HAL_I2C_Master_Receive+0x1da>
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2201      	movs	r2, #1
 8015d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015d70:	f7fd fbd0 	bl	8013514 <HAL_GetTick>
 8015d74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	9300      	str	r3, [sp, #0]
 8015d7a:	2319      	movs	r3, #25
 8015d7c:	2201      	movs	r2, #1
 8015d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015d82:	68f8      	ldr	r0, [r7, #12]
 8015d84:	f000 f8f2 	bl	8015f6c <I2C_WaitOnFlagUntilTimeout>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d001      	beq.n	8015d92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015d8e:	2301      	movs	r3, #1
 8015d90:	e0bf      	b.n	8015f12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	2222      	movs	r2, #34	; 0x22
 8015d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	2210      	movs	r2, #16
 8015d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	2200      	movs	r2, #0
 8015da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	687a      	ldr	r2, [r7, #4]
 8015dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	893a      	ldrh	r2, [r7, #8]
 8015db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	2200      	movs	r2, #0
 8015db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	2bff      	cmp	r3, #255	; 0xff
 8015dc2:	d90e      	bls.n	8015de2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	22ff      	movs	r2, #255	; 0xff
 8015dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dce:	b2da      	uxtb	r2, r3
 8015dd0:	8979      	ldrh	r1, [r7, #10]
 8015dd2:	4b52      	ldr	r3, [pc, #328]	; (8015f1c <HAL_I2C_Master_Receive+0x1e4>)
 8015dd4:	9300      	str	r3, [sp, #0]
 8015dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	f000 fb02 	bl	80163e4 <I2C_TransferConfig>
 8015de0:	e06d      	b.n	8015ebe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015df0:	b2da      	uxtb	r2, r3
 8015df2:	8979      	ldrh	r1, [r7, #10]
 8015df4:	4b49      	ldr	r3, [pc, #292]	; (8015f1c <HAL_I2C_Master_Receive+0x1e4>)
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	f000 faf1 	bl	80163e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015e02:	e05c      	b.n	8015ebe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e04:	697a      	ldr	r2, [r7, #20]
 8015e06:	6a39      	ldr	r1, [r7, #32]
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f000 f989 	bl	8016120 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d001      	beq.n	8015e18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015e14:	2301      	movs	r3, #1
 8015e16:	e07c      	b.n	8015f12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e22:	b2d2      	uxtb	r2, r2
 8015e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e2a:	1c5a      	adds	r2, r3, #1
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e34:	3b01      	subs	r3, #1
 8015e36:	b29a      	uxth	r2, r3
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e40:	b29b      	uxth	r3, r3
 8015e42:	3b01      	subs	r3, #1
 8015e44:	b29a      	uxth	r2, r3
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d034      	beq.n	8015ebe <HAL_I2C_Master_Receive+0x186>
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d130      	bne.n	8015ebe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	9300      	str	r3, [sp, #0]
 8015e60:	6a3b      	ldr	r3, [r7, #32]
 8015e62:	2200      	movs	r2, #0
 8015e64:	2180      	movs	r1, #128	; 0x80
 8015e66:	68f8      	ldr	r0, [r7, #12]
 8015e68:	f000 f880 	bl	8015f6c <I2C_WaitOnFlagUntilTimeout>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d001      	beq.n	8015e76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015e72:	2301      	movs	r3, #1
 8015e74:	e04d      	b.n	8015f12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	2bff      	cmp	r3, #255	; 0xff
 8015e7e:	d90e      	bls.n	8015e9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	22ff      	movs	r2, #255	; 0xff
 8015e84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	8979      	ldrh	r1, [r7, #10]
 8015e8e:	2300      	movs	r3, #0
 8015e90:	9300      	str	r3, [sp, #0]
 8015e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f000 faa4 	bl	80163e4 <I2C_TransferConfig>
 8015e9c:	e00f      	b.n	8015ebe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015eac:	b2da      	uxtb	r2, r3
 8015eae:	8979      	ldrh	r1, [r7, #10]
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	9300      	str	r3, [sp, #0]
 8015eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015eb8:	68f8      	ldr	r0, [r7, #12]
 8015eba:	f000 fa93 	bl	80163e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d19d      	bne.n	8015e04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015ec8:	697a      	ldr	r2, [r7, #20]
 8015eca:	6a39      	ldr	r1, [r7, #32]
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f000 f8e3 	bl	8016098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d001      	beq.n	8015edc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015ed8:	2301      	movs	r3, #1
 8015eda:	e01a      	b.n	8015f12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2220      	movs	r2, #32
 8015ee2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	6859      	ldr	r1, [r3, #4]
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	681a      	ldr	r2, [r3, #0]
 8015eee:	4b0c      	ldr	r3, [pc, #48]	; (8015f20 <HAL_I2C_Master_Receive+0x1e8>)
 8015ef0:	400b      	ands	r3, r1
 8015ef2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	2220      	movs	r2, #32
 8015ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2200      	movs	r2, #0
 8015f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2200      	movs	r2, #0
 8015f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e000      	b.n	8015f12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8015f10:	2302      	movs	r3, #2
  }
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3718      	adds	r7, #24
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop
 8015f1c:	80002400 	.word	0x80002400
 8015f20:	fe00e800 	.word	0xfe00e800

08015f24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015f24:	b480      	push	{r7}
 8015f26:	b083      	sub	sp, #12
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	699b      	ldr	r3, [r3, #24]
 8015f32:	f003 0302 	and.w	r3, r3, #2
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	d103      	bne.n	8015f42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	699b      	ldr	r3, [r3, #24]
 8015f48:	f003 0301 	and.w	r3, r3, #1
 8015f4c:	2b01      	cmp	r3, #1
 8015f4e:	d007      	beq.n	8015f60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	699a      	ldr	r2, [r3, #24]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	f042 0201 	orr.w	r2, r2, #1
 8015f5e:	619a      	str	r2, [r3, #24]
  }
}
 8015f60:	bf00      	nop
 8015f62:	370c      	adds	r7, #12
 8015f64:	46bd      	mov	sp, r7
 8015f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6a:	4770      	bx	lr

08015f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	60f8      	str	r0, [r7, #12]
 8015f74:	60b9      	str	r1, [r7, #8]
 8015f76:	603b      	str	r3, [r7, #0]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015f7c:	e031      	b.n	8015fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f84:	d02d      	beq.n	8015fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f86:	f7fd fac5 	bl	8013514 <HAL_GetTick>
 8015f8a:	4602      	mov	r2, r0
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	1ad3      	subs	r3, r2, r3
 8015f90:	683a      	ldr	r2, [r7, #0]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d302      	bcc.n	8015f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d122      	bne.n	8015fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	699a      	ldr	r2, [r3, #24]
 8015fa2:	68bb      	ldr	r3, [r7, #8]
 8015fa4:	4013      	ands	r3, r2
 8015fa6:	68ba      	ldr	r2, [r7, #8]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	bf0c      	ite	eq
 8015fac:	2301      	moveq	r3, #1
 8015fae:	2300      	movne	r3, #0
 8015fb0:	b2db      	uxtb	r3, r3
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	79fb      	ldrb	r3, [r7, #7]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d113      	bne.n	8015fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fbe:	f043 0220 	orr.w	r2, r3, #32
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	2220      	movs	r2, #32
 8015fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8015fde:	2301      	movs	r3, #1
 8015fe0:	e00f      	b.n	8016002 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	699a      	ldr	r2, [r3, #24]
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	4013      	ands	r3, r2
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	bf0c      	ite	eq
 8015ff2:	2301      	moveq	r3, #1
 8015ff4:	2300      	movne	r3, #0
 8015ff6:	b2db      	uxtb	r3, r3
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	79fb      	ldrb	r3, [r7, #7]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d0be      	beq.n	8015f7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016000:	2300      	movs	r3, #0
}
 8016002:	4618      	mov	r0, r3
 8016004:	3710      	adds	r7, #16
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}

0801600a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801600a:	b580      	push	{r7, lr}
 801600c:	b084      	sub	sp, #16
 801600e:	af00      	add	r7, sp, #0
 8016010:	60f8      	str	r0, [r7, #12]
 8016012:	60b9      	str	r1, [r7, #8]
 8016014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016016:	e033      	b.n	8016080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016018:	687a      	ldr	r2, [r7, #4]
 801601a:	68b9      	ldr	r1, [r7, #8]
 801601c:	68f8      	ldr	r0, [r7, #12]
 801601e:	f000 f901 	bl	8016224 <I2C_IsErrorOccurred>
 8016022:	4603      	mov	r3, r0
 8016024:	2b00      	cmp	r3, #0
 8016026:	d001      	beq.n	801602c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016028:	2301      	movs	r3, #1
 801602a:	e031      	b.n	8016090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016032:	d025      	beq.n	8016080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016034:	f7fd fa6e 	bl	8013514 <HAL_GetTick>
 8016038:	4602      	mov	r2, r0
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	1ad3      	subs	r3, r2, r3
 801603e:	68ba      	ldr	r2, [r7, #8]
 8016040:	429a      	cmp	r2, r3
 8016042:	d302      	bcc.n	801604a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d11a      	bne.n	8016080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	699b      	ldr	r3, [r3, #24]
 8016050:	f003 0302 	and.w	r3, r3, #2
 8016054:	2b02      	cmp	r3, #2
 8016056:	d013      	beq.n	8016080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801605c:	f043 0220 	orr.w	r2, r3, #32
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	2220      	movs	r2, #32
 8016068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	2200      	movs	r2, #0
 8016070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2200      	movs	r2, #0
 8016078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801607c:	2301      	movs	r3, #1
 801607e:	e007      	b.n	8016090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	699b      	ldr	r3, [r3, #24]
 8016086:	f003 0302 	and.w	r3, r3, #2
 801608a:	2b02      	cmp	r3, #2
 801608c:	d1c4      	bne.n	8016018 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801608e:	2300      	movs	r3, #0
}
 8016090:	4618      	mov	r0, r3
 8016092:	3710      	adds	r7, #16
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b084      	sub	sp, #16
 801609c:	af00      	add	r7, sp, #0
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	60b9      	str	r1, [r7, #8]
 80160a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80160a4:	e02f      	b.n	8016106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	68b9      	ldr	r1, [r7, #8]
 80160aa:	68f8      	ldr	r0, [r7, #12]
 80160ac:	f000 f8ba 	bl	8016224 <I2C_IsErrorOccurred>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d001      	beq.n	80160ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80160b6:	2301      	movs	r3, #1
 80160b8:	e02d      	b.n	8016116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80160ba:	f7fd fa2b 	bl	8013514 <HAL_GetTick>
 80160be:	4602      	mov	r2, r0
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	1ad3      	subs	r3, r2, r3
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d302      	bcc.n	80160d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d11a      	bne.n	8016106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	699b      	ldr	r3, [r3, #24]
 80160d6:	f003 0320 	and.w	r3, r3, #32
 80160da:	2b20      	cmp	r3, #32
 80160dc:	d013      	beq.n	8016106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160e2:	f043 0220 	orr.w	r2, r3, #32
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	2220      	movs	r2, #32
 80160ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2200      	movs	r2, #0
 80160f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2200      	movs	r2, #0
 80160fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016102:	2301      	movs	r3, #1
 8016104:	e007      	b.n	8016116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	699b      	ldr	r3, [r3, #24]
 801610c:	f003 0320 	and.w	r3, r3, #32
 8016110:	2b20      	cmp	r3, #32
 8016112:	d1c8      	bne.n	80160a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016114:	2300      	movs	r3, #0
}
 8016116:	4618      	mov	r0, r3
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
	...

08016120 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b084      	sub	sp, #16
 8016124:	af00      	add	r7, sp, #0
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801612c:	e06b      	b.n	8016206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801612e:	687a      	ldr	r2, [r7, #4]
 8016130:	68b9      	ldr	r1, [r7, #8]
 8016132:	68f8      	ldr	r0, [r7, #12]
 8016134:	f000 f876 	bl	8016224 <I2C_IsErrorOccurred>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d001      	beq.n	8016142 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801613e:	2301      	movs	r3, #1
 8016140:	e069      	b.n	8016216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	699b      	ldr	r3, [r3, #24]
 8016148:	f003 0320 	and.w	r3, r3, #32
 801614c:	2b20      	cmp	r3, #32
 801614e:	d138      	bne.n	80161c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	699b      	ldr	r3, [r3, #24]
 8016156:	f003 0304 	and.w	r3, r3, #4
 801615a:	2b04      	cmp	r3, #4
 801615c:	d105      	bne.n	801616a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016162:	2b00      	cmp	r3, #0
 8016164:	d001      	beq.n	801616a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8016166:	2300      	movs	r3, #0
 8016168:	e055      	b.n	8016216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	699b      	ldr	r3, [r3, #24]
 8016170:	f003 0310 	and.w	r3, r3, #16
 8016174:	2b10      	cmp	r3, #16
 8016176:	d107      	bne.n	8016188 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2210      	movs	r2, #16
 801617e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	2204      	movs	r2, #4
 8016184:	645a      	str	r2, [r3, #68]	; 0x44
 8016186:	e002      	b.n	801618e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	2200      	movs	r2, #0
 801618c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2220      	movs	r2, #32
 8016194:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	6859      	ldr	r1, [r3, #4]
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	681a      	ldr	r2, [r3, #0]
 80161a0:	4b1f      	ldr	r3, [pc, #124]	; (8016220 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80161a2:	400b      	ands	r3, r1
 80161a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	2220      	movs	r2, #32
 80161aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	2200      	movs	r2, #0
 80161ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80161be:	2301      	movs	r3, #1
 80161c0:	e029      	b.n	8016216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80161c2:	f7fd f9a7 	bl	8013514 <HAL_GetTick>
 80161c6:	4602      	mov	r2, r0
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	1ad3      	subs	r3, r2, r3
 80161cc:	68ba      	ldr	r2, [r7, #8]
 80161ce:	429a      	cmp	r2, r3
 80161d0:	d302      	bcc.n	80161d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d116      	bne.n	8016206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	699b      	ldr	r3, [r3, #24]
 80161de:	f003 0304 	and.w	r3, r3, #4
 80161e2:	2b04      	cmp	r3, #4
 80161e4:	d00f      	beq.n	8016206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161ea:	f043 0220 	orr.w	r2, r3, #32
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2220      	movs	r2, #32
 80161f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2200      	movs	r2, #0
 80161fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8016202:	2301      	movs	r3, #1
 8016204:	e007      	b.n	8016216 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	699b      	ldr	r3, [r3, #24]
 801620c:	f003 0304 	and.w	r3, r3, #4
 8016210:	2b04      	cmp	r3, #4
 8016212:	d18c      	bne.n	801612e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016214:	2300      	movs	r3, #0
}
 8016216:	4618      	mov	r0, r3
 8016218:	3710      	adds	r7, #16
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop
 8016220:	fe00e800 	.word	0xfe00e800

08016224 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b08a      	sub	sp, #40	; 0x28
 8016228:	af00      	add	r7, sp, #0
 801622a:	60f8      	str	r0, [r7, #12]
 801622c:	60b9      	str	r1, [r7, #8]
 801622e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016230:	2300      	movs	r3, #0
 8016232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	699b      	ldr	r3, [r3, #24]
 801623c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801623e:	2300      	movs	r3, #0
 8016240:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8016246:	69bb      	ldr	r3, [r7, #24]
 8016248:	f003 0310 	and.w	r3, r3, #16
 801624c:	2b00      	cmp	r3, #0
 801624e:	d068      	beq.n	8016322 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	2210      	movs	r2, #16
 8016256:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016258:	e049      	b.n	80162ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016260:	d045      	beq.n	80162ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016262:	f7fd f957 	bl	8013514 <HAL_GetTick>
 8016266:	4602      	mov	r2, r0
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	1ad3      	subs	r3, r2, r3
 801626c:	68ba      	ldr	r2, [r7, #8]
 801626e:	429a      	cmp	r2, r3
 8016270:	d302      	bcc.n	8016278 <I2C_IsErrorOccurred+0x54>
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d13a      	bne.n	80162ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	685b      	ldr	r3, [r3, #4]
 801627e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016282:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801628a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	699b      	ldr	r3, [r3, #24]
 8016292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801629a:	d121      	bne.n	80162e0 <I2C_IsErrorOccurred+0xbc>
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80162a2:	d01d      	beq.n	80162e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80162a4:	7cfb      	ldrb	r3, [r7, #19]
 80162a6:	2b20      	cmp	r3, #32
 80162a8:	d01a      	beq.n	80162e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	685a      	ldr	r2, [r3, #4]
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80162b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80162ba:	f7fd f92b 	bl	8013514 <HAL_GetTick>
 80162be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80162c0:	e00e      	b.n	80162e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80162c2:	f7fd f927 	bl	8013514 <HAL_GetTick>
 80162c6:	4602      	mov	r2, r0
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	1ad3      	subs	r3, r2, r3
 80162cc:	2b19      	cmp	r3, #25
 80162ce:	d907      	bls.n	80162e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80162d0:	6a3b      	ldr	r3, [r7, #32]
 80162d2:	f043 0320 	orr.w	r3, r3, #32
 80162d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80162d8:	2301      	movs	r3, #1
 80162da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80162de:	e006      	b.n	80162ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	699b      	ldr	r3, [r3, #24]
 80162e6:	f003 0320 	and.w	r3, r3, #32
 80162ea:	2b20      	cmp	r3, #32
 80162ec:	d1e9      	bne.n	80162c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	699b      	ldr	r3, [r3, #24]
 80162f4:	f003 0320 	and.w	r3, r3, #32
 80162f8:	2b20      	cmp	r3, #32
 80162fa:	d003      	beq.n	8016304 <I2C_IsErrorOccurred+0xe0>
 80162fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016300:	2b00      	cmp	r3, #0
 8016302:	d0aa      	beq.n	801625a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016308:	2b00      	cmp	r3, #0
 801630a:	d103      	bne.n	8016314 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2220      	movs	r2, #32
 8016312:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016314:	6a3b      	ldr	r3, [r7, #32]
 8016316:	f043 0304 	orr.w	r3, r3, #4
 801631a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801631c:	2301      	movs	r3, #1
 801631e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	699b      	ldr	r3, [r3, #24]
 8016328:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016330:	2b00      	cmp	r3, #0
 8016332:	d00b      	beq.n	801634c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8016334:	6a3b      	ldr	r3, [r7, #32]
 8016336:	f043 0301 	orr.w	r3, r3, #1
 801633a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016346:	2301      	movs	r3, #1
 8016348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801634c:	69bb      	ldr	r3, [r7, #24]
 801634e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00b      	beq.n	801636e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016356:	6a3b      	ldr	r3, [r7, #32]
 8016358:	f043 0308 	orr.w	r3, r3, #8
 801635c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016366:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016368:	2301      	movs	r3, #1
 801636a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801636e:	69bb      	ldr	r3, [r7, #24]
 8016370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016374:	2b00      	cmp	r3, #0
 8016376:	d00b      	beq.n	8016390 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8016378:	6a3b      	ldr	r3, [r7, #32]
 801637a:	f043 0302 	orr.w	r3, r3, #2
 801637e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016388:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801638a:	2301      	movs	r3, #1
 801638c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8016390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016394:	2b00      	cmp	r3, #0
 8016396:	d01c      	beq.n	80163d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016398:	68f8      	ldr	r0, [r7, #12]
 801639a:	f7ff fdc3 	bl	8015f24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	6859      	ldr	r1, [r3, #4]
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	681a      	ldr	r2, [r3, #0]
 80163a8:	4b0d      	ldr	r3, [pc, #52]	; (80163e0 <I2C_IsErrorOccurred+0x1bc>)
 80163aa:	400b      	ands	r3, r1
 80163ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80163b2:	6a3b      	ldr	r3, [r7, #32]
 80163b4:	431a      	orrs	r2, r3
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2220      	movs	r2, #32
 80163be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	2200      	movs	r2, #0
 80163c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	2200      	movs	r2, #0
 80163ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80163d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3728      	adds	r7, #40	; 0x28
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	fe00e800 	.word	0xfe00e800

080163e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80163e4:	b480      	push	{r7}
 80163e6:	b087      	sub	sp, #28
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	607b      	str	r3, [r7, #4]
 80163ee:	460b      	mov	r3, r1
 80163f0:	817b      	strh	r3, [r7, #10]
 80163f2:	4613      	mov	r3, r2
 80163f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80163f6:	897b      	ldrh	r3, [r7, #10]
 80163f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80163fc:	7a7b      	ldrb	r3, [r7, #9]
 80163fe:	041b      	lsls	r3, r3, #16
 8016400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016404:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801640a:	6a3b      	ldr	r3, [r7, #32]
 801640c:	4313      	orrs	r3, r2
 801640e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016412:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	685a      	ldr	r2, [r3, #4]
 801641a:	6a3b      	ldr	r3, [r7, #32]
 801641c:	0d5b      	lsrs	r3, r3, #21
 801641e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8016422:	4b08      	ldr	r3, [pc, #32]	; (8016444 <I2C_TransferConfig+0x60>)
 8016424:	430b      	orrs	r3, r1
 8016426:	43db      	mvns	r3, r3
 8016428:	ea02 0103 	and.w	r1, r2, r3
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	697a      	ldr	r2, [r7, #20]
 8016432:	430a      	orrs	r2, r1
 8016434:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8016436:	bf00      	nop
 8016438:	371c      	adds	r7, #28
 801643a:	46bd      	mov	sp, r7
 801643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016440:	4770      	bx	lr
 8016442:	bf00      	nop
 8016444:	03ff63ff 	.word	0x03ff63ff

08016448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8016448:	b480      	push	{r7}
 801644a:	b083      	sub	sp, #12
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016458:	b2db      	uxtb	r3, r3
 801645a:	2b20      	cmp	r3, #32
 801645c:	d138      	bne.n	80164d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016464:	2b01      	cmp	r3, #1
 8016466:	d101      	bne.n	801646c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016468:	2302      	movs	r3, #2
 801646a:	e032      	b.n	80164d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2201      	movs	r2, #1
 8016470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2224      	movs	r2, #36	; 0x24
 8016478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	f022 0201 	bic.w	r2, r2, #1
 801648a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	681a      	ldr	r2, [r3, #0]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801649a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	6819      	ldr	r1, [r3, #0]
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	683a      	ldr	r2, [r7, #0]
 80164a8:	430a      	orrs	r2, r1
 80164aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	681a      	ldr	r2, [r3, #0]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f042 0201 	orr.w	r2, r2, #1
 80164ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2220      	movs	r2, #32
 80164c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	2200      	movs	r2, #0
 80164c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80164cc:	2300      	movs	r3, #0
 80164ce:	e000      	b.n	80164d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80164d0:	2302      	movs	r3, #2
  }
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	370c      	adds	r7, #12
 80164d6:	46bd      	mov	sp, r7
 80164d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164dc:	4770      	bx	lr

080164de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80164de:	b480      	push	{r7}
 80164e0:	b085      	sub	sp, #20
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
 80164e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	2b20      	cmp	r3, #32
 80164f2:	d139      	bne.n	8016568 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	d101      	bne.n	8016502 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80164fe:	2302      	movs	r3, #2
 8016500:	e033      	b.n	801656a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	2201      	movs	r2, #1
 8016506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2224      	movs	r2, #36	; 0x24
 801650e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	f022 0201 	bic.w	r2, r2, #1
 8016520:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8016530:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	021b      	lsls	r3, r3, #8
 8016536:	68fa      	ldr	r2, [r7, #12]
 8016538:	4313      	orrs	r3, r2
 801653a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	68fa      	ldr	r2, [r7, #12]
 8016542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	f042 0201 	orr.w	r2, r2, #1
 8016552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2220      	movs	r2, #32
 8016558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2200      	movs	r2, #0
 8016560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016564:	2300      	movs	r3, #0
 8016566:	e000      	b.n	801656a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8016568:	2302      	movs	r3, #2
  }
}
 801656a:	4618      	mov	r0, r3
 801656c:	3714      	adds	r7, #20
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr
	...

08016578 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8016578:	b480      	push	{r7}
 801657a:	b085      	sub	sp, #20
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016580:	2300      	movs	r3, #0
 8016582:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8016584:	4b0b      	ldr	r3, [pc, #44]	; (80165b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	f003 0301 	and.w	r3, r3, #1
 801658c:	2b00      	cmp	r3, #0
 801658e:	d002      	beq.n	8016596 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8016590:	2301      	movs	r3, #1
 8016592:	73fb      	strb	r3, [r7, #15]
 8016594:	e007      	b.n	80165a6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8016596:	4b07      	ldr	r3, [pc, #28]	; (80165b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f023 0204 	bic.w	r2, r3, #4
 801659e:	4905      	ldr	r1, [pc, #20]	; (80165b4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	4313      	orrs	r3, r2
 80165a4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80165a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3714      	adds	r7, #20
 80165ac:	46bd      	mov	sp, r7
 80165ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b2:	4770      	bx	lr
 80165b4:	40030400 	.word	0x40030400

080165b8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80165b8:	b480      	push	{r7}
 80165ba:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80165bc:	4b05      	ldr	r3, [pc, #20]	; (80165d4 <HAL_ICACHE_Enable+0x1c>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	4a04      	ldr	r2, [pc, #16]	; (80165d4 <HAL_ICACHE_Enable+0x1c>)
 80165c2:	f043 0301 	orr.w	r3, r3, #1
 80165c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	46bd      	mov	sp, r7
 80165ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d2:	4770      	bx	lr
 80165d4:	40030400 	.word	0x40030400

080165d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80165d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165da:	b08b      	sub	sp, #44	; 0x2c
 80165dc:	af06      	add	r7, sp, #24
 80165de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d101      	bne.n	80165ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80165e6:	2301      	movs	r3, #1
 80165e8:	e0cb      	b.n	8016782 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80165f0:	b2db      	uxtb	r3, r3
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d106      	bne.n	8016604 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2200      	movs	r2, #0
 80165fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80165fe:	6878      	ldr	r0, [r7, #4]
 8016600:	f7fc fc80 	bl	8012f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2203      	movs	r2, #3
 8016608:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	4618      	mov	r0, r3
 8016612:	f007 f9c7 	bl	801d9a4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016616:	2300      	movs	r3, #0
 8016618:	73fb      	strb	r3, [r7, #15]
 801661a:	e040      	b.n	801669e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801661c:	7bfb      	ldrb	r3, [r7, #15]
 801661e:	6879      	ldr	r1, [r7, #4]
 8016620:	1c5a      	adds	r2, r3, #1
 8016622:	4613      	mov	r3, r2
 8016624:	009b      	lsls	r3, r3, #2
 8016626:	4413      	add	r3, r2
 8016628:	00db      	lsls	r3, r3, #3
 801662a:	440b      	add	r3, r1
 801662c:	3301      	adds	r3, #1
 801662e:	2201      	movs	r2, #1
 8016630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016632:	7bfb      	ldrb	r3, [r7, #15]
 8016634:	6879      	ldr	r1, [r7, #4]
 8016636:	1c5a      	adds	r2, r3, #1
 8016638:	4613      	mov	r3, r2
 801663a:	009b      	lsls	r3, r3, #2
 801663c:	4413      	add	r3, r2
 801663e:	00db      	lsls	r3, r3, #3
 8016640:	440b      	add	r3, r1
 8016642:	7bfa      	ldrb	r2, [r7, #15]
 8016644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016646:	7bfb      	ldrb	r3, [r7, #15]
 8016648:	6879      	ldr	r1, [r7, #4]
 801664a:	1c5a      	adds	r2, r3, #1
 801664c:	4613      	mov	r3, r2
 801664e:	009b      	lsls	r3, r3, #2
 8016650:	4413      	add	r3, r2
 8016652:	00db      	lsls	r3, r3, #3
 8016654:	440b      	add	r3, r1
 8016656:	3303      	adds	r3, #3
 8016658:	2200      	movs	r2, #0
 801665a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801665c:	7bfa      	ldrb	r2, [r7, #15]
 801665e:	6879      	ldr	r1, [r7, #4]
 8016660:	4613      	mov	r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	4413      	add	r3, r2
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	440b      	add	r3, r1
 801666a:	3338      	adds	r3, #56	; 0x38
 801666c:	2200      	movs	r2, #0
 801666e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016670:	7bfa      	ldrb	r2, [r7, #15]
 8016672:	6879      	ldr	r1, [r7, #4]
 8016674:	4613      	mov	r3, r2
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	4413      	add	r3, r2
 801667a:	00db      	lsls	r3, r3, #3
 801667c:	440b      	add	r3, r1
 801667e:	333c      	adds	r3, #60	; 0x3c
 8016680:	2200      	movs	r2, #0
 8016682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016684:	7bfa      	ldrb	r2, [r7, #15]
 8016686:	6879      	ldr	r1, [r7, #4]
 8016688:	4613      	mov	r3, r2
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	4413      	add	r3, r2
 801668e:	00db      	lsls	r3, r3, #3
 8016690:	440b      	add	r3, r1
 8016692:	3340      	adds	r3, #64	; 0x40
 8016694:	2200      	movs	r2, #0
 8016696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016698:	7bfb      	ldrb	r3, [r7, #15]
 801669a:	3301      	adds	r3, #1
 801669c:	73fb      	strb	r3, [r7, #15]
 801669e:	7bfa      	ldrb	r2, [r7, #15]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	429a      	cmp	r2, r3
 80166a6:	d3b9      	bcc.n	801661c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80166a8:	2300      	movs	r3, #0
 80166aa:	73fb      	strb	r3, [r7, #15]
 80166ac:	e044      	b.n	8016738 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80166ae:	7bfa      	ldrb	r2, [r7, #15]
 80166b0:	6879      	ldr	r1, [r7, #4]
 80166b2:	4613      	mov	r3, r2
 80166b4:	009b      	lsls	r3, r3, #2
 80166b6:	4413      	add	r3, r2
 80166b8:	00db      	lsls	r3, r3, #3
 80166ba:	440b      	add	r3, r1
 80166bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80166c0:	2200      	movs	r2, #0
 80166c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80166c4:	7bfa      	ldrb	r2, [r7, #15]
 80166c6:	6879      	ldr	r1, [r7, #4]
 80166c8:	4613      	mov	r3, r2
 80166ca:	009b      	lsls	r3, r3, #2
 80166cc:	4413      	add	r3, r2
 80166ce:	00db      	lsls	r3, r3, #3
 80166d0:	440b      	add	r3, r1
 80166d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80166d6:	7bfa      	ldrb	r2, [r7, #15]
 80166d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80166da:	7bfa      	ldrb	r2, [r7, #15]
 80166dc:	6879      	ldr	r1, [r7, #4]
 80166de:	4613      	mov	r3, r2
 80166e0:	009b      	lsls	r3, r3, #2
 80166e2:	4413      	add	r3, r2
 80166e4:	00db      	lsls	r3, r3, #3
 80166e6:	440b      	add	r3, r1
 80166e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80166ec:	2200      	movs	r2, #0
 80166ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80166f0:	7bfa      	ldrb	r2, [r7, #15]
 80166f2:	6879      	ldr	r1, [r7, #4]
 80166f4:	4613      	mov	r3, r2
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	4413      	add	r3, r2
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	440b      	add	r3, r1
 80166fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8016702:	2200      	movs	r2, #0
 8016704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016706:	7bfa      	ldrb	r2, [r7, #15]
 8016708:	6879      	ldr	r1, [r7, #4]
 801670a:	4613      	mov	r3, r2
 801670c:	009b      	lsls	r3, r3, #2
 801670e:	4413      	add	r3, r2
 8016710:	00db      	lsls	r3, r3, #3
 8016712:	440b      	add	r3, r1
 8016714:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016718:	2200      	movs	r2, #0
 801671a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801671c:	7bfa      	ldrb	r2, [r7, #15]
 801671e:	6879      	ldr	r1, [r7, #4]
 8016720:	4613      	mov	r3, r2
 8016722:	009b      	lsls	r3, r3, #2
 8016724:	4413      	add	r3, r2
 8016726:	00db      	lsls	r3, r3, #3
 8016728:	440b      	add	r3, r1
 801672a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801672e:	2200      	movs	r2, #0
 8016730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016732:	7bfb      	ldrb	r3, [r7, #15]
 8016734:	3301      	adds	r3, #1
 8016736:	73fb      	strb	r3, [r7, #15]
 8016738:	7bfa      	ldrb	r2, [r7, #15]
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	429a      	cmp	r2, r3
 8016740:	d3b5      	bcc.n	80166ae <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	603b      	str	r3, [r7, #0]
 8016748:	687e      	ldr	r6, [r7, #4]
 801674a:	466d      	mov	r5, sp
 801674c:	f106 0410 	add.w	r4, r6, #16
 8016750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016754:	6823      	ldr	r3, [r4, #0]
 8016756:	602b      	str	r3, [r5, #0]
 8016758:	1d33      	adds	r3, r6, #4
 801675a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801675c:	6838      	ldr	r0, [r7, #0]
 801675e:	f007 f93c 	bl	801d9da <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2200      	movs	r2, #0
 8016766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2201      	movs	r2, #1
 801676e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	69db      	ldr	r3, [r3, #28]
 8016776:	2b01      	cmp	r3, #1
 8016778:	d102      	bne.n	8016780 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801677a:	6878      	ldr	r0, [r7, #4]
 801677c:	f000 f805 	bl	801678a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016780:	2300      	movs	r3, #0
}
 8016782:	4618      	mov	r0, r3
 8016784:	3714      	adds	r7, #20
 8016786:	46bd      	mov	sp, r7
 8016788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801678a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801678a:	b480      	push	{r7}
 801678c:	b085      	sub	sp, #20
 801678e:	af00      	add	r7, sp, #0
 8016790:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	2201      	movs	r2, #1
 801679c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2200      	movs	r2, #0
 80167a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	f043 0301 	orr.w	r3, r3, #1
 80167b4:	b29a      	uxth	r2, r3
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	f043 0302 	orr.w	r3, r3, #2
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80167d0:	2300      	movs	r3, #0
}
 80167d2:	4618      	mov	r0, r3
 80167d4:	3714      	adds	r7, #20
 80167d6:	46bd      	mov	sp, r7
 80167d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167dc:	4770      	bx	lr
	...

080167e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80167e0:	b480      	push	{r7}
 80167e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80167e4:	4b05      	ldr	r3, [pc, #20]	; (80167fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4a04      	ldr	r2, [pc, #16]	; (80167fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80167ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167ee:	6013      	str	r3, [r2, #0]
}
 80167f0:	bf00      	nop
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr
 80167fa:	bf00      	nop
 80167fc:	40007000 	.word	0x40007000

08016800 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016800:	b480      	push	{r7}
 8016802:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8016804:	4b04      	ldr	r3, [pc, #16]	; (8016818 <HAL_PWREx_GetVoltageRange+0x18>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 801680c:	4618      	mov	r0, r3
 801680e:	46bd      	mov	sp, r7
 8016810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016814:	4770      	bx	lr
 8016816:	bf00      	nop
 8016818:	40007000 	.word	0x40007000

0801681c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b084      	sub	sp, #16
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8016824:	4b27      	ldr	r3, [pc, #156]	; (80168c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801682c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 801682e:	f000 f861 	bl	80168f4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8016832:	4603      	mov	r3, r0
 8016834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016838:	d101      	bne.n	801683e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 801683a:	2301      	movs	r3, #1
 801683c:	e03e      	b.n	80168bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 801683e:	4b21      	ldr	r3, [pc, #132]	; (80168c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8016840:	68db      	ldr	r3, [r3, #12]
 8016842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801684a:	d101      	bne.n	8016850 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 801684c:	2301      	movs	r3, #1
 801684e:	e035      	b.n	80168bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8016850:	68ba      	ldr	r2, [r7, #8]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	429a      	cmp	r2, r3
 8016856:	d101      	bne.n	801685c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8016858:	2300      	movs	r3, #0
 801685a:	e02f      	b.n	80168bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 801685c:	4b19      	ldr	r3, [pc, #100]	; (80168c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8016864:	4917      	ldr	r1, [pc, #92]	; (80168c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	4313      	orrs	r3, r2
 801686a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 801686c:	4b16      	ldr	r3, [pc, #88]	; (80168c8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	095b      	lsrs	r3, r3, #5
 8016872:	4a16      	ldr	r2, [pc, #88]	; (80168cc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8016874:	fba2 2303 	umull	r2, r3, r2, r3
 8016878:	09db      	lsrs	r3, r3, #7
 801687a:	2232      	movs	r2, #50	; 0x32
 801687c:	fb02 f303 	mul.w	r3, r2, r3
 8016880:	4a13      	ldr	r2, [pc, #76]	; (80168d0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8016882:	fba2 2303 	umull	r2, r3, r2, r3
 8016886:	08db      	lsrs	r3, r3, #3
 8016888:	3301      	adds	r3, #1
 801688a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801688c:	e002      	b.n	8016894 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	3b01      	subs	r3, #1
 8016892:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016894:	4b0b      	ldr	r3, [pc, #44]	; (80168c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8016896:	695b      	ldr	r3, [r3, #20]
 8016898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801689c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80168a0:	d102      	bne.n	80168a8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d1f2      	bne.n	801688e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80168a8:	4b06      	ldr	r3, [pc, #24]	; (80168c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80168aa:	695b      	ldr	r3, [r3, #20]
 80168ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80168b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80168b4:	d101      	bne.n	80168ba <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80168b6:	2303      	movs	r3, #3
 80168b8:	e000      	b.n	80168bc <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80168ba:	2300      	movs	r3, #0
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3710      	adds	r7, #16
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}
 80168c4:	40007000 	.word	0x40007000
 80168c8:	20000090 	.word	0x20000090
 80168cc:	0a7c5ac5 	.word	0x0a7c5ac5
 80168d0:	cccccccd 	.word	0xcccccccd

080168d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80168d4:	b480      	push	{r7}
 80168d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80168d8:	4b05      	ldr	r3, [pc, #20]	; (80168f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	4a04      	ldr	r2, [pc, #16]	; (80168f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80168de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80168e2:	6053      	str	r3, [r2, #4]
}
 80168e4:	bf00      	nop
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	40007000 	.word	0x40007000

080168f4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80168fa:	4b0f      	ldr	r3, [pc, #60]	; (8016938 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80168fc:	691b      	ldr	r3, [r3, #16]
 80168fe:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016906:	2b00      	cmp	r3, #0
 8016908:	d003      	beq.n	8016912 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 801690a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801690e:	607b      	str	r3, [r7, #4]
 8016910:	e00a      	b.n	8016928 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016918:	2b00      	cmp	r3, #0
 801691a:	d103      	bne.n	8016924 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 801691c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016920:	607b      	str	r3, [r7, #4]
 8016922:	e001      	b.n	8016928 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8016924:	2300      	movs	r3, #0
 8016926:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8016928:	687b      	ldr	r3, [r7, #4]
}
 801692a:	4618      	mov	r0, r3
 801692c:	370c      	adds	r7, #12
 801692e:	46bd      	mov	sp, r7
 8016930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016934:	4770      	bx	lr
 8016936:	bf00      	nop
 8016938:	40007000 	.word	0x40007000

0801693c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b088      	sub	sp, #32
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d102      	bne.n	8016950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801694a:	2301      	movs	r3, #1
 801694c:	f000 bcc2 	b.w	80172d4 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016950:	4b99      	ldr	r3, [pc, #612]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016952:	689b      	ldr	r3, [r3, #8]
 8016954:	f003 030c 	and.w	r3, r3, #12
 8016958:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801695a:	4b97      	ldr	r3, [pc, #604]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 801695c:	68db      	ldr	r3, [r3, #12]
 801695e:	f003 0303 	and.w	r3, r3, #3
 8016962:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	f003 0310 	and.w	r3, r3, #16
 801696c:	2b00      	cmp	r3, #0
 801696e:	f000 80e9 	beq.w	8016b44 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016972:	69bb      	ldr	r3, [r7, #24]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d006      	beq.n	8016986 <HAL_RCC_OscConfig+0x4a>
 8016978:	69bb      	ldr	r3, [r7, #24]
 801697a:	2b0c      	cmp	r3, #12
 801697c:	f040 8083 	bne.w	8016a86 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	2b01      	cmp	r3, #1
 8016984:	d17f      	bne.n	8016a86 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016986:	4b8c      	ldr	r3, [pc, #560]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f003 0302 	and.w	r3, r3, #2
 801698e:	2b00      	cmp	r3, #0
 8016990:	d006      	beq.n	80169a0 <HAL_RCC_OscConfig+0x64>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	69db      	ldr	r3, [r3, #28]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d102      	bne.n	80169a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 801699a:	2301      	movs	r3, #1
 801699c:	f000 bc9a 	b.w	80172d4 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80169a4:	4b84      	ldr	r3, [pc, #528]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f003 0308 	and.w	r3, r3, #8
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d004      	beq.n	80169ba <HAL_RCC_OscConfig+0x7e>
 80169b0:	4b81      	ldr	r3, [pc, #516]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169b8:	e005      	b.n	80169c6 <HAL_RCC_OscConfig+0x8a>
 80169ba:	4b7f      	ldr	r3, [pc, #508]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169c0:	091b      	lsrs	r3, r3, #4
 80169c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169c6:	4293      	cmp	r3, r2
 80169c8:	d224      	bcs.n	8016a14 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169ce:	4618      	mov	r0, r3
 80169d0:	f000 fece 	bl	8017770 <RCC_SetFlashLatencyFromMSIRange>
 80169d4:	4603      	mov	r3, r0
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d002      	beq.n	80169e0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80169da:	2301      	movs	r3, #1
 80169dc:	f000 bc7a 	b.w	80172d4 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80169e0:	4b75      	ldr	r3, [pc, #468]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	4a74      	ldr	r2, [pc, #464]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169e6:	f043 0308 	orr.w	r3, r3, #8
 80169ea:	6013      	str	r3, [r2, #0]
 80169ec:	4b72      	ldr	r3, [pc, #456]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169f8:	496f      	ldr	r1, [pc, #444]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 80169fa:	4313      	orrs	r3, r2
 80169fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80169fe:	4b6e      	ldr	r3, [pc, #440]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a00:	685b      	ldr	r3, [r3, #4]
 8016a02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	6a1b      	ldr	r3, [r3, #32]
 8016a0a:	021b      	lsls	r3, r3, #8
 8016a0c:	496a      	ldr	r1, [pc, #424]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a0e:	4313      	orrs	r3, r2
 8016a10:	604b      	str	r3, [r1, #4]
 8016a12:	e026      	b.n	8016a62 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016a14:	4b68      	ldr	r3, [pc, #416]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	4a67      	ldr	r2, [pc, #412]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a1a:	f043 0308 	orr.w	r3, r3, #8
 8016a1e:	6013      	str	r3, [r2, #0]
 8016a20:	4b65      	ldr	r3, [pc, #404]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a2c:	4962      	ldr	r1, [pc, #392]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016a32:	4b61      	ldr	r3, [pc, #388]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a34:	685b      	ldr	r3, [r3, #4]
 8016a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6a1b      	ldr	r3, [r3, #32]
 8016a3e:	021b      	lsls	r3, r3, #8
 8016a40:	495d      	ldr	r1, [pc, #372]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a42:	4313      	orrs	r3, r2
 8016a44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d10a      	bne.n	8016a62 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a50:	4618      	mov	r0, r3
 8016a52:	f000 fe8d 	bl	8017770 <RCC_SetFlashLatencyFromMSIRange>
 8016a56:	4603      	mov	r3, r0
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d002      	beq.n	8016a62 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	f000 bc39 	b.w	80172d4 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016a62:	f000 fe17 	bl	8017694 <HAL_RCC_GetHCLKFreq>
 8016a66:	4603      	mov	r3, r0
 8016a68:	4a54      	ldr	r2, [pc, #336]	; (8016bbc <HAL_RCC_OscConfig+0x280>)
 8016a6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8016a6c:	4b54      	ldr	r3, [pc, #336]	; (8016bc0 <HAL_RCC_OscConfig+0x284>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7fc faa7 	bl	8012fc4 <HAL_InitTick>
 8016a76:	4603      	mov	r3, r0
 8016a78:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8016a7a:	7bfb      	ldrb	r3, [r7, #15]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d060      	beq.n	8016b42 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8016a80:	7bfb      	ldrb	r3, [r7, #15]
 8016a82:	f000 bc27 	b.w	80172d4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	69db      	ldr	r3, [r3, #28]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d039      	beq.n	8016b02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016a8e:	4b4a      	ldr	r3, [pc, #296]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4a49      	ldr	r2, [pc, #292]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016a94:	f043 0301 	orr.w	r3, r3, #1
 8016a98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016a9a:	f7fc fd3b 	bl	8013514 <HAL_GetTick>
 8016a9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016aa0:	e00f      	b.n	8016ac2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016aa2:	f7fc fd37 	bl	8013514 <HAL_GetTick>
 8016aa6:	4602      	mov	r2, r0
 8016aa8:	693b      	ldr	r3, [r7, #16]
 8016aaa:	1ad3      	subs	r3, r2, r3
 8016aac:	2b02      	cmp	r3, #2
 8016aae:	d908      	bls.n	8016ac2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016ab0:	4b41      	ldr	r3, [pc, #260]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	f003 0302 	and.w	r3, r3, #2
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d102      	bne.n	8016ac2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8016abc:	2303      	movs	r3, #3
 8016abe:	f000 bc09 	b.w	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8016ac2:	4b3d      	ldr	r3, [pc, #244]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f003 0302 	and.w	r3, r3, #2
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d0e9      	beq.n	8016aa2 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016ace:	4b3a      	ldr	r3, [pc, #232]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4a39      	ldr	r2, [pc, #228]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016ad4:	f043 0308 	orr.w	r3, r3, #8
 8016ad8:	6013      	str	r3, [r2, #0]
 8016ada:	4b37      	ldr	r3, [pc, #220]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ae6:	4934      	ldr	r1, [pc, #208]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016ae8:	4313      	orrs	r3, r2
 8016aea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016aec:	4b32      	ldr	r3, [pc, #200]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016aee:	685b      	ldr	r3, [r3, #4]
 8016af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6a1b      	ldr	r3, [r3, #32]
 8016af8:	021b      	lsls	r3, r3, #8
 8016afa:	492f      	ldr	r1, [pc, #188]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016afc:	4313      	orrs	r3, r2
 8016afe:	604b      	str	r3, [r1, #4]
 8016b00:	e020      	b.n	8016b44 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016b02:	4b2d      	ldr	r3, [pc, #180]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	4a2c      	ldr	r2, [pc, #176]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b08:	f023 0301 	bic.w	r3, r3, #1
 8016b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016b0e:	f7fc fd01 	bl	8013514 <HAL_GetTick>
 8016b12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016b14:	e00e      	b.n	8016b34 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016b16:	f7fc fcfd 	bl	8013514 <HAL_GetTick>
 8016b1a:	4602      	mov	r2, r0
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	1ad3      	subs	r3, r2, r3
 8016b20:	2b02      	cmp	r3, #2
 8016b22:	d907      	bls.n	8016b34 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016b24:	4b24      	ldr	r3, [pc, #144]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	f003 0302 	and.w	r3, r3, #2
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d001      	beq.n	8016b34 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8016b30:	2303      	movs	r3, #3
 8016b32:	e3cf      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8016b34:	4b20      	ldr	r3, [pc, #128]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	f003 0302 	and.w	r3, r3, #2
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d1ea      	bne.n	8016b16 <HAL_RCC_OscConfig+0x1da>
 8016b40:	e000      	b.n	8016b44 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8016b42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	f003 0301 	and.w	r3, r3, #1
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d07e      	beq.n	8016c4e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016b50:	69bb      	ldr	r3, [r7, #24]
 8016b52:	2b08      	cmp	r3, #8
 8016b54:	d005      	beq.n	8016b62 <HAL_RCC_OscConfig+0x226>
 8016b56:	69bb      	ldr	r3, [r7, #24]
 8016b58:	2b0c      	cmp	r3, #12
 8016b5a:	d10e      	bne.n	8016b7a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	2b03      	cmp	r3, #3
 8016b60:	d10b      	bne.n	8016b7a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016b62:	4b15      	ldr	r3, [pc, #84]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d06e      	beq.n	8016c4c <HAL_RCC_OscConfig+0x310>
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	685b      	ldr	r3, [r3, #4]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d16a      	bne.n	8016c4c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8016b76:	2301      	movs	r3, #1
 8016b78:	e3ac      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b82:	d106      	bne.n	8016b92 <HAL_RCC_OscConfig+0x256>
 8016b84:	4b0c      	ldr	r3, [pc, #48]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	4a0b      	ldr	r2, [pc, #44]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016b8e:	6013      	str	r3, [r2, #0]
 8016b90:	e024      	b.n	8016bdc <HAL_RCC_OscConfig+0x2a0>
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8016b9a:	d113      	bne.n	8016bc4 <HAL_RCC_OscConfig+0x288>
 8016b9c:	4b06      	ldr	r3, [pc, #24]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	4a05      	ldr	r2, [pc, #20]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016ba2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016ba6:	6013      	str	r3, [r2, #0]
 8016ba8:	4b03      	ldr	r3, [pc, #12]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	4a02      	ldr	r2, [pc, #8]	; (8016bb8 <HAL_RCC_OscConfig+0x27c>)
 8016bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016bb2:	6013      	str	r3, [r2, #0]
 8016bb4:	e012      	b.n	8016bdc <HAL_RCC_OscConfig+0x2a0>
 8016bb6:	bf00      	nop
 8016bb8:	40021000 	.word	0x40021000
 8016bbc:	20000090 	.word	0x20000090
 8016bc0:	20000094 	.word	0x20000094
 8016bc4:	4b8b      	ldr	r3, [pc, #556]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	4a8a      	ldr	r2, [pc, #552]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016bce:	6013      	str	r3, [r2, #0]
 8016bd0:	4b88      	ldr	r3, [pc, #544]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4a87      	ldr	r2, [pc, #540]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	685b      	ldr	r3, [r3, #4]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d019      	beq.n	8016c18 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016be4:	f7fc fc96 	bl	8013514 <HAL_GetTick>
 8016be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016bea:	e00e      	b.n	8016c0a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016bec:	f7fc fc92 	bl	8013514 <HAL_GetTick>
 8016bf0:	4602      	mov	r2, r0
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	1ad3      	subs	r3, r2, r3
 8016bf6:	2b64      	cmp	r3, #100	; 0x64
 8016bf8:	d907      	bls.n	8016c0a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016bfa:	4b7e      	ldr	r3, [pc, #504]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d101      	bne.n	8016c0a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8016c06:	2303      	movs	r3, #3
 8016c08:	e364      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016c0a:	4b7a      	ldr	r3, [pc, #488]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d0ea      	beq.n	8016bec <HAL_RCC_OscConfig+0x2b0>
 8016c16:	e01a      	b.n	8016c4e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016c18:	f7fc fc7c 	bl	8013514 <HAL_GetTick>
 8016c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016c1e:	e00e      	b.n	8016c3e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016c20:	f7fc fc78 	bl	8013514 <HAL_GetTick>
 8016c24:	4602      	mov	r2, r0
 8016c26:	693b      	ldr	r3, [r7, #16]
 8016c28:	1ad3      	subs	r3, r2, r3
 8016c2a:	2b64      	cmp	r3, #100	; 0x64
 8016c2c:	d907      	bls.n	8016c3e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016c2e:	4b71      	ldr	r3, [pc, #452]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d001      	beq.n	8016c3e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8016c3a:	2303      	movs	r3, #3
 8016c3c:	e34a      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016c3e:	4b6d      	ldr	r3, [pc, #436]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d1ea      	bne.n	8016c20 <HAL_RCC_OscConfig+0x2e4>
 8016c4a:	e000      	b.n	8016c4e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	f003 0302 	and.w	r3, r3, #2
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d06c      	beq.n	8016d34 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8016c5a:	69bb      	ldr	r3, [r7, #24]
 8016c5c:	2b04      	cmp	r3, #4
 8016c5e:	d005      	beq.n	8016c6c <HAL_RCC_OscConfig+0x330>
 8016c60:	69bb      	ldr	r3, [r7, #24]
 8016c62:	2b0c      	cmp	r3, #12
 8016c64:	d119      	bne.n	8016c9a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8016c66:	697b      	ldr	r3, [r7, #20]
 8016c68:	2b02      	cmp	r3, #2
 8016c6a:	d116      	bne.n	8016c9a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016c6c:	4b61      	ldr	r3, [pc, #388]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d005      	beq.n	8016c84 <HAL_RCC_OscConfig+0x348>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	68db      	ldr	r3, [r3, #12]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d101      	bne.n	8016c84 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8016c80:	2301      	movs	r3, #1
 8016c82:	e327      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016c84:	4b5b      	ldr	r3, [pc, #364]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016c86:	685b      	ldr	r3, [r3, #4]
 8016c88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	691b      	ldr	r3, [r3, #16]
 8016c90:	061b      	lsls	r3, r3, #24
 8016c92:	4958      	ldr	r1, [pc, #352]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016c94:	4313      	orrs	r3, r2
 8016c96:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016c98:	e04c      	b.n	8016d34 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	68db      	ldr	r3, [r3, #12]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d029      	beq.n	8016cf6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016ca2:	4b54      	ldr	r3, [pc, #336]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4a53      	ldr	r2, [pc, #332]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016cae:	f7fc fc31 	bl	8013514 <HAL_GetTick>
 8016cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016cb4:	e00e      	b.n	8016cd4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016cb6:	f7fc fc2d 	bl	8013514 <HAL_GetTick>
 8016cba:	4602      	mov	r2, r0
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	1ad3      	subs	r3, r2, r3
 8016cc0:	2b02      	cmp	r3, #2
 8016cc2:	d907      	bls.n	8016cd4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016cc4:	4b4b      	ldr	r3, [pc, #300]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d101      	bne.n	8016cd4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8016cd0:	2303      	movs	r3, #3
 8016cd2:	e2ff      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016cd4:	4b47      	ldr	r3, [pc, #284]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d0ea      	beq.n	8016cb6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016ce0:	4b44      	ldr	r3, [pc, #272]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	691b      	ldr	r3, [r3, #16]
 8016cec:	061b      	lsls	r3, r3, #24
 8016cee:	4941      	ldr	r1, [pc, #260]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016cf0:	4313      	orrs	r3, r2
 8016cf2:	604b      	str	r3, [r1, #4]
 8016cf4:	e01e      	b.n	8016d34 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016cf6:	4b3f      	ldr	r3, [pc, #252]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	4a3e      	ldr	r2, [pc, #248]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016d02:	f7fc fc07 	bl	8013514 <HAL_GetTick>
 8016d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016d08:	e00e      	b.n	8016d28 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016d0a:	f7fc fc03 	bl	8013514 <HAL_GetTick>
 8016d0e:	4602      	mov	r2, r0
 8016d10:	693b      	ldr	r3, [r7, #16]
 8016d12:	1ad3      	subs	r3, r2, r3
 8016d14:	2b02      	cmp	r3, #2
 8016d16:	d907      	bls.n	8016d28 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016d18:	4b36      	ldr	r3, [pc, #216]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d001      	beq.n	8016d28 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8016d24:	2303      	movs	r3, #3
 8016d26:	e2d5      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016d28:	4b32      	ldr	r3, [pc, #200]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d1ea      	bne.n	8016d0a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f003 0308 	and.w	r3, r3, #8
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d062      	beq.n	8016e06 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	695b      	ldr	r3, [r3, #20]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d038      	beq.n	8016dba <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	699b      	ldr	r3, [r3, #24]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d108      	bne.n	8016d62 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8016d50:	4b28      	ldr	r3, [pc, #160]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d56:	4a27      	ldr	r2, [pc, #156]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d58:	f023 0310 	bic.w	r3, r3, #16
 8016d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016d60:	e007      	b.n	8016d72 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8016d62:	4b24      	ldr	r3, [pc, #144]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d68:	4a22      	ldr	r2, [pc, #136]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d6a:	f043 0310 	orr.w	r3, r3, #16
 8016d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016d72:	4b20      	ldr	r3, [pc, #128]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d78:	4a1e      	ldr	r2, [pc, #120]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d7a:	f043 0301 	orr.w	r3, r3, #1
 8016d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016d82:	f7fc fbc7 	bl	8013514 <HAL_GetTick>
 8016d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016d88:	e00f      	b.n	8016daa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016d8a:	f7fc fbc3 	bl	8013514 <HAL_GetTick>
 8016d8e:	4602      	mov	r2, r0
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	1ad3      	subs	r3, r2, r3
 8016d94:	2b07      	cmp	r3, #7
 8016d96:	d908      	bls.n	8016daa <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016d98:	4b16      	ldr	r3, [pc, #88]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016d9e:	f003 0302 	and.w	r3, r3, #2
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d101      	bne.n	8016daa <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8016da6:	2303      	movs	r3, #3
 8016da8:	e294      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016daa:	4b12      	ldr	r3, [pc, #72]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016db0:	f003 0302 	and.w	r3, r3, #2
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d0e8      	beq.n	8016d8a <HAL_RCC_OscConfig+0x44e>
 8016db8:	e025      	b.n	8016e06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016dba:	4b0e      	ldr	r3, [pc, #56]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016dc0:	4a0c      	ldr	r2, [pc, #48]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016dc2:	f023 0301 	bic.w	r3, r3, #1
 8016dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016dca:	f7fc fba3 	bl	8013514 <HAL_GetTick>
 8016dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016dd0:	e012      	b.n	8016df8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016dd2:	f7fc fb9f 	bl	8013514 <HAL_GetTick>
 8016dd6:	4602      	mov	r2, r0
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	1ad3      	subs	r3, r2, r3
 8016ddc:	2b07      	cmp	r3, #7
 8016dde:	d90b      	bls.n	8016df8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016de0:	4b04      	ldr	r3, [pc, #16]	; (8016df4 <HAL_RCC_OscConfig+0x4b8>)
 8016de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016de6:	f003 0302 	and.w	r3, r3, #2
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d004      	beq.n	8016df8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8016dee:	2303      	movs	r3, #3
 8016df0:	e270      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
 8016df2:	bf00      	nop
 8016df4:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016df8:	4ba8      	ldr	r3, [pc, #672]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016dfe:	f003 0302 	and.w	r3, r3, #2
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d1e5      	bne.n	8016dd2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f003 0304 	and.w	r3, r3, #4
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	f000 812d 	beq.w	801706e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016e14:	2300      	movs	r3, #0
 8016e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8016e18:	4ba0      	ldr	r3, [pc, #640]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d10d      	bne.n	8016e40 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016e24:	4b9d      	ldr	r3, [pc, #628]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e28:	4a9c      	ldr	r2, [pc, #624]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8016e30:	4b9a      	ldr	r3, [pc, #616]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016e38:	60bb      	str	r3, [r7, #8]
 8016e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016e40:	4b97      	ldr	r3, [pc, #604]	; (80170a0 <HAL_RCC_OscConfig+0x764>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d11e      	bne.n	8016e8a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016e4c:	4b94      	ldr	r3, [pc, #592]	; (80170a0 <HAL_RCC_OscConfig+0x764>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	4a93      	ldr	r2, [pc, #588]	; (80170a0 <HAL_RCC_OscConfig+0x764>)
 8016e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016e58:	f7fc fb5c 	bl	8013514 <HAL_GetTick>
 8016e5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016e5e:	e00e      	b.n	8016e7e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016e60:	f7fc fb58 	bl	8013514 <HAL_GetTick>
 8016e64:	4602      	mov	r2, r0
 8016e66:	693b      	ldr	r3, [r7, #16]
 8016e68:	1ad3      	subs	r3, r2, r3
 8016e6a:	2b02      	cmp	r3, #2
 8016e6c:	d907      	bls.n	8016e7e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016e6e:	4b8c      	ldr	r3, [pc, #560]	; (80170a0 <HAL_RCC_OscConfig+0x764>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d101      	bne.n	8016e7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8016e7a:	2303      	movs	r3, #3
 8016e7c:	e22a      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016e7e:	4b88      	ldr	r3, [pc, #544]	; (80170a0 <HAL_RCC_OscConfig+0x764>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d0ea      	beq.n	8016e60 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	689b      	ldr	r3, [r3, #8]
 8016e8e:	f003 0301 	and.w	r3, r3, #1
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d01f      	beq.n	8016ed6 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	689b      	ldr	r3, [r3, #8]
 8016e9a:	f003 0304 	and.w	r3, r3, #4
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d010      	beq.n	8016ec4 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016ea2:	4b7e      	ldr	r3, [pc, #504]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ea8:	4a7c      	ldr	r2, [pc, #496]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016eaa:	f043 0304 	orr.w	r3, r3, #4
 8016eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016eb2:	4b7a      	ldr	r3, [pc, #488]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eb8:	4a78      	ldr	r2, [pc, #480]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016eba:	f043 0301 	orr.w	r3, r3, #1
 8016ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8016ec2:	e018      	b.n	8016ef6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016ec4:	4b75      	ldr	r3, [pc, #468]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eca:	4a74      	ldr	r2, [pc, #464]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ecc:	f043 0301 	orr.w	r3, r3, #1
 8016ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8016ed4:	e00f      	b.n	8016ef6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8016ed6:	4b71      	ldr	r3, [pc, #452]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016edc:	4a6f      	ldr	r2, [pc, #444]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ede:	f023 0301 	bic.w	r3, r3, #1
 8016ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016ee6:	4b6d      	ldr	r3, [pc, #436]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eec:	4a6b      	ldr	r2, [pc, #428]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016eee:	f023 0304 	bic.w	r3, r3, #4
 8016ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	689b      	ldr	r3, [r3, #8]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d068      	beq.n	8016fd0 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016efe:	f7fc fb09 	bl	8013514 <HAL_GetTick>
 8016f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016f04:	e011      	b.n	8016f2a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016f06:	f7fc fb05 	bl	8013514 <HAL_GetTick>
 8016f0a:	4602      	mov	r2, r0
 8016f0c:	693b      	ldr	r3, [r7, #16]
 8016f0e:	1ad3      	subs	r3, r2, r3
 8016f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8016f14:	4293      	cmp	r3, r2
 8016f16:	d908      	bls.n	8016f2a <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016f18:	4b60      	ldr	r3, [pc, #384]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f1e:	f003 0302 	and.w	r3, r3, #2
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d101      	bne.n	8016f2a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8016f26:	2303      	movs	r3, #3
 8016f28:	e1d4      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016f2a:	4b5c      	ldr	r3, [pc, #368]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f30:	f003 0302 	and.w	r3, r3, #2
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d0e6      	beq.n	8016f06 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	689b      	ldr	r3, [r3, #8]
 8016f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d022      	beq.n	8016f8a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8016f44:	4b55      	ldr	r3, [pc, #340]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f4a:	4a54      	ldr	r2, [pc, #336]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016f54:	e011      	b.n	8016f7a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016f56:	f7fc fadd 	bl	8013514 <HAL_GetTick>
 8016f5a:	4602      	mov	r2, r0
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	1ad3      	subs	r3, r2, r3
 8016f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8016f64:	4293      	cmp	r3, r2
 8016f66:	d908      	bls.n	8016f7a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016f68:	4b4c      	ldr	r3, [pc, #304]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d101      	bne.n	8016f7a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8016f76:	2303      	movs	r3, #3
 8016f78:	e1ac      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8016f7a:	4b48      	ldr	r3, [pc, #288]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d0e6      	beq.n	8016f56 <HAL_RCC_OscConfig+0x61a>
 8016f88:	e068      	b.n	801705c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8016f8a:	4b44      	ldr	r3, [pc, #272]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016f90:	4a42      	ldr	r2, [pc, #264]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8016f9a:	e011      	b.n	8016fc0 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016f9c:	f7fc faba 	bl	8013514 <HAL_GetTick>
 8016fa0:	4602      	mov	r2, r0
 8016fa2:	693b      	ldr	r3, [r7, #16]
 8016fa4:	1ad3      	subs	r3, r2, r3
 8016fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d908      	bls.n	8016fc0 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8016fae:	4b3b      	ldr	r3, [pc, #236]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d001      	beq.n	8016fc0 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8016fbc:	2303      	movs	r3, #3
 8016fbe:	e189      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8016fc0:	4b36      	ldr	r3, [pc, #216]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1e6      	bne.n	8016f9c <HAL_RCC_OscConfig+0x660>
 8016fce:	e045      	b.n	801705c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016fd0:	f7fc faa0 	bl	8013514 <HAL_GetTick>
 8016fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016fd6:	e011      	b.n	8016ffc <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016fd8:	f7fc fa9c 	bl	8013514 <HAL_GetTick>
 8016fdc:	4602      	mov	r2, r0
 8016fde:	693b      	ldr	r3, [r7, #16]
 8016fe0:	1ad3      	subs	r3, r2, r3
 8016fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8016fe6:	4293      	cmp	r3, r2
 8016fe8:	d908      	bls.n	8016ffc <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016fea:	4b2c      	ldr	r3, [pc, #176]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ff0:	f003 0302 	and.w	r3, r3, #2
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d001      	beq.n	8016ffc <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8016ff8:	2303      	movs	r3, #3
 8016ffa:	e16b      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016ffc:	4b27      	ldr	r3, [pc, #156]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8016ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017002:	f003 0302 	and.w	r3, r3, #2
 8017006:	2b00      	cmp	r3, #0
 8017008:	d1e6      	bne.n	8016fd8 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801700a:	4b24      	ldr	r3, [pc, #144]	; (801709c <HAL_RCC_OscConfig+0x760>)
 801700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017014:	2b00      	cmp	r3, #0
 8017016:	d021      	beq.n	801705c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8017018:	4b20      	ldr	r3, [pc, #128]	; (801709c <HAL_RCC_OscConfig+0x760>)
 801701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801701e:	4a1f      	ldr	r2, [pc, #124]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8017020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8017028:	e011      	b.n	801704e <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801702a:	f7fc fa73 	bl	8013514 <HAL_GetTick>
 801702e:	4602      	mov	r2, r0
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	1ad3      	subs	r3, r2, r3
 8017034:	f241 3288 	movw	r2, #5000	; 0x1388
 8017038:	4293      	cmp	r3, r2
 801703a:	d908      	bls.n	801704e <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801703c:	4b17      	ldr	r3, [pc, #92]	; (801709c <HAL_RCC_OscConfig+0x760>)
 801703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017046:	2b00      	cmp	r3, #0
 8017048:	d001      	beq.n	801704e <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 801704a:	2303      	movs	r3, #3
 801704c:	e142      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801704e:	4b13      	ldr	r3, [pc, #76]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8017050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017058:	2b00      	cmp	r3, #0
 801705a:	d1e6      	bne.n	801702a <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801705c:	7ffb      	ldrb	r3, [r7, #31]
 801705e:	2b01      	cmp	r3, #1
 8017060:	d105      	bne.n	801706e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017062:	4b0e      	ldr	r3, [pc, #56]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8017064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017066:	4a0d      	ldr	r2, [pc, #52]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8017068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801706c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	f003 0320 	and.w	r3, r3, #32
 8017076:	2b00      	cmp	r3, #0
 8017078:	d04f      	beq.n	801711a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801707e:	2b00      	cmp	r3, #0
 8017080:	d028      	beq.n	80170d4 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8017082:	4b06      	ldr	r3, [pc, #24]	; (801709c <HAL_RCC_OscConfig+0x760>)
 8017084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017088:	4a04      	ldr	r2, [pc, #16]	; (801709c <HAL_RCC_OscConfig+0x760>)
 801708a:	f043 0301 	orr.w	r3, r3, #1
 801708e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017092:	f7fc fa3f 	bl	8013514 <HAL_GetTick>
 8017096:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8017098:	e014      	b.n	80170c4 <HAL_RCC_OscConfig+0x788>
 801709a:	bf00      	nop
 801709c:	40021000 	.word	0x40021000
 80170a0:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80170a4:	f7fc fa36 	bl	8013514 <HAL_GetTick>
 80170a8:	4602      	mov	r2, r0
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	1ad3      	subs	r3, r2, r3
 80170ae:	2b02      	cmp	r3, #2
 80170b0:	d908      	bls.n	80170c4 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80170b2:	4b8a      	ldr	r3, [pc, #552]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80170b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80170b8:	f003 0302 	and.w	r3, r3, #2
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d101      	bne.n	80170c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80170c0:	2303      	movs	r3, #3
 80170c2:	e107      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80170c4:	4b85      	ldr	r3, [pc, #532]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80170c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80170ca:	f003 0302 	and.w	r3, r3, #2
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d0e8      	beq.n	80170a4 <HAL_RCC_OscConfig+0x768>
 80170d2:	e022      	b.n	801711a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80170d4:	4b81      	ldr	r3, [pc, #516]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80170d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80170da:	4a80      	ldr	r2, [pc, #512]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80170dc:	f023 0301 	bic.w	r3, r3, #1
 80170e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80170e4:	f7fc fa16 	bl	8013514 <HAL_GetTick>
 80170e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80170ea:	e00f      	b.n	801710c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80170ec:	f7fc fa12 	bl	8013514 <HAL_GetTick>
 80170f0:	4602      	mov	r2, r0
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	1ad3      	subs	r3, r2, r3
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d908      	bls.n	801710c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80170fa:	4b78      	ldr	r3, [pc, #480]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80170fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017100:	f003 0302 	and.w	r3, r3, #2
 8017104:	2b00      	cmp	r3, #0
 8017106:	d001      	beq.n	801710c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8017108:	2303      	movs	r3, #3
 801710a:	e0e3      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801710c:	4b73      	ldr	r3, [pc, #460]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801710e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017112:	f003 0302 	and.w	r3, r3, #2
 8017116:	2b00      	cmp	r3, #0
 8017118:	d1e8      	bne.n	80170ec <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801711e:	2b00      	cmp	r3, #0
 8017120:	f000 80d7 	beq.w	80172d2 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017124:	4b6d      	ldr	r3, [pc, #436]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 8017126:	689b      	ldr	r3, [r3, #8]
 8017128:	f003 030c 	and.w	r3, r3, #12
 801712c:	2b0c      	cmp	r3, #12
 801712e:	f000 8091 	beq.w	8017254 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017136:	2b02      	cmp	r3, #2
 8017138:	d166      	bne.n	8017208 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801713a:	4b68      	ldr	r3, [pc, #416]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	4a67      	ldr	r2, [pc, #412]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 8017140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017146:	f7fc f9e5 	bl	8013514 <HAL_GetTick>
 801714a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801714c:	e00e      	b.n	801716c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801714e:	f7fc f9e1 	bl	8013514 <HAL_GetTick>
 8017152:	4602      	mov	r2, r0
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	1ad3      	subs	r3, r2, r3
 8017158:	2b02      	cmp	r3, #2
 801715a:	d907      	bls.n	801716c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801715c:	4b5f      	ldr	r3, [pc, #380]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017164:	2b00      	cmp	r3, #0
 8017166:	d001      	beq.n	801716c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8017168:	2303      	movs	r3, #3
 801716a:	e0b3      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801716c:	4b5b      	ldr	r3, [pc, #364]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017174:	2b00      	cmp	r3, #0
 8017176:	d1ea      	bne.n	801714e <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8017178:	4b58      	ldr	r3, [pc, #352]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801717a:	68da      	ldr	r2, [r3, #12]
 801717c:	4b58      	ldr	r3, [pc, #352]	; (80172e0 <HAL_RCC_OscConfig+0x9a4>)
 801717e:	4013      	ands	r3, r2
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8017184:	687a      	ldr	r2, [r7, #4]
 8017186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017188:	3a01      	subs	r2, #1
 801718a:	0112      	lsls	r2, r2, #4
 801718c:	4311      	orrs	r1, r2
 801718e:	687a      	ldr	r2, [r7, #4]
 8017190:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017192:	0212      	lsls	r2, r2, #8
 8017194:	4311      	orrs	r1, r2
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801719a:	0852      	lsrs	r2, r2, #1
 801719c:	3a01      	subs	r2, #1
 801719e:	0552      	lsls	r2, r2, #21
 80171a0:	4311      	orrs	r1, r2
 80171a2:	687a      	ldr	r2, [r7, #4]
 80171a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80171a6:	0852      	lsrs	r2, r2, #1
 80171a8:	3a01      	subs	r2, #1
 80171aa:	0652      	lsls	r2, r2, #25
 80171ac:	4311      	orrs	r1, r2
 80171ae:	687a      	ldr	r2, [r7, #4]
 80171b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80171b2:	06d2      	lsls	r2, r2, #27
 80171b4:	430a      	orrs	r2, r1
 80171b6:	4949      	ldr	r1, [pc, #292]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171b8:	4313      	orrs	r3, r2
 80171ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80171bc:	4b47      	ldr	r3, [pc, #284]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	4a46      	ldr	r2, [pc, #280]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80171c8:	4b44      	ldr	r3, [pc, #272]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171ca:	68db      	ldr	r3, [r3, #12]
 80171cc:	4a43      	ldr	r2, [pc, #268]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80171d4:	f7fc f99e 	bl	8013514 <HAL_GetTick>
 80171d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80171da:	e00e      	b.n	80171fa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80171dc:	f7fc f99a 	bl	8013514 <HAL_GetTick>
 80171e0:	4602      	mov	r2, r0
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	1ad3      	subs	r3, r2, r3
 80171e6:	2b02      	cmp	r3, #2
 80171e8:	d907      	bls.n	80171fa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80171ea:	4b3c      	ldr	r3, [pc, #240]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d101      	bne.n	80171fa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80171f6:	2303      	movs	r3, #3
 80171f8:	e06c      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80171fa:	4b38      	ldr	r3, [pc, #224]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017202:	2b00      	cmp	r3, #0
 8017204:	d0ea      	beq.n	80171dc <HAL_RCC_OscConfig+0x8a0>
 8017206:	e064      	b.n	80172d2 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017208:	4b34      	ldr	r3, [pc, #208]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	4a33      	ldr	r2, [pc, #204]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801720e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8017212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017214:	f7fc f97e 	bl	8013514 <HAL_GetTick>
 8017218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801721a:	e00e      	b.n	801723a <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801721c:	f7fc f97a 	bl	8013514 <HAL_GetTick>
 8017220:	4602      	mov	r2, r0
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	2b02      	cmp	r3, #2
 8017228:	d907      	bls.n	801723a <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801722a:	4b2c      	ldr	r3, [pc, #176]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017232:	2b00      	cmp	r3, #0
 8017234:	d001      	beq.n	801723a <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8017236:	2303      	movs	r3, #3
 8017238:	e04c      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801723a:	4b28      	ldr	r3, [pc, #160]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017242:	2b00      	cmp	r3, #0
 8017244:	d1ea      	bne.n	801721c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8017246:	4b25      	ldr	r3, [pc, #148]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 8017248:	68da      	ldr	r2, [r3, #12]
 801724a:	4924      	ldr	r1, [pc, #144]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 801724c:	4b25      	ldr	r3, [pc, #148]	; (80172e4 <HAL_RCC_OscConfig+0x9a8>)
 801724e:	4013      	ands	r3, r2
 8017250:	60cb      	str	r3, [r1, #12]
 8017252:	e03e      	b.n	80172d2 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017258:	2b01      	cmp	r3, #1
 801725a:	d101      	bne.n	8017260 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 801725c:	2301      	movs	r3, #1
 801725e:	e039      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8017260:	4b1e      	ldr	r3, [pc, #120]	; (80172dc <HAL_RCC_OscConfig+0x9a0>)
 8017262:	68db      	ldr	r3, [r3, #12]
 8017264:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	f003 0203 	and.w	r2, r3, #3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017270:	429a      	cmp	r2, r3
 8017272:	d12c      	bne.n	80172ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801727e:	3b01      	subs	r3, #1
 8017280:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8017282:	429a      	cmp	r2, r3
 8017284:	d123      	bne.n	80172ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8017286:	697b      	ldr	r3, [r7, #20]
 8017288:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017290:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8017292:	429a      	cmp	r2, r3
 8017294:	d11b      	bne.n	80172ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8017296:	697b      	ldr	r3, [r7, #20]
 8017298:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80172a0:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d113      	bne.n	80172ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172b0:	085b      	lsrs	r3, r3, #1
 80172b2:	3b01      	subs	r3, #1
 80172b4:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d109      	bne.n	80172ce <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172c4:	085b      	lsrs	r3, r3, #1
 80172c6:	3b01      	subs	r3, #1
 80172c8:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d001      	beq.n	80172d2 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80172ce:	2301      	movs	r3, #1
 80172d0:	e000      	b.n	80172d4 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80172d2:	2300      	movs	r3, #0
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	3720      	adds	r7, #32
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}
 80172dc:	40021000 	.word	0x40021000
 80172e0:	019f800c 	.word	0x019f800c
 80172e4:	feeefffc 	.word	0xfeeefffc

080172e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b086      	sub	sp, #24
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80172f2:	2300      	movs	r3, #0
 80172f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d101      	bne.n	8017300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80172fc:	2301      	movs	r3, #1
 80172fe:	e11c      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8017300:	4b90      	ldr	r3, [pc, #576]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	f003 030f 	and.w	r3, r3, #15
 8017308:	683a      	ldr	r2, [r7, #0]
 801730a:	429a      	cmp	r2, r3
 801730c:	d910      	bls.n	8017330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801730e:	4b8d      	ldr	r3, [pc, #564]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	f023 020f 	bic.w	r2, r3, #15
 8017316:	498b      	ldr	r1, [pc, #556]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 8017318:	683b      	ldr	r3, [r7, #0]
 801731a:	4313      	orrs	r3, r2
 801731c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801731e:	4b89      	ldr	r3, [pc, #548]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	f003 030f 	and.w	r3, r3, #15
 8017326:	683a      	ldr	r2, [r7, #0]
 8017328:	429a      	cmp	r2, r3
 801732a:	d001      	beq.n	8017330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801732c:	2301      	movs	r3, #1
 801732e:	e104      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	f003 0302 	and.w	r3, r3, #2
 8017338:	2b00      	cmp	r3, #0
 801733a:	d010      	beq.n	801735e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	689a      	ldr	r2, [r3, #8]
 8017340:	4b81      	ldr	r3, [pc, #516]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017342:	689b      	ldr	r3, [r3, #8]
 8017344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017348:	429a      	cmp	r2, r3
 801734a:	d908      	bls.n	801735e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801734c:	4b7e      	ldr	r3, [pc, #504]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 801734e:	689b      	ldr	r3, [r3, #8]
 8017350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	689b      	ldr	r3, [r3, #8]
 8017358:	497b      	ldr	r1, [pc, #492]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 801735a:	4313      	orrs	r3, r2
 801735c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	f003 0301 	and.w	r3, r3, #1
 8017366:	2b00      	cmp	r3, #0
 8017368:	f000 8085 	beq.w	8017476 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	685b      	ldr	r3, [r3, #4]
 8017370:	2b03      	cmp	r3, #3
 8017372:	d11f      	bne.n	80173b4 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017374:	4b74      	ldr	r3, [pc, #464]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801737c:	2b00      	cmp	r3, #0
 801737e:	d101      	bne.n	8017384 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8017380:	2301      	movs	r3, #1
 8017382:	e0da      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8017384:	f000 fa58 	bl	8017838 <RCC_GetSysClockFreqFromPLLSource>
 8017388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	4a6f      	ldr	r2, [pc, #444]	; (801754c <HAL_RCC_ClockConfig+0x264>)
 801738e:	4293      	cmp	r3, r2
 8017390:	d947      	bls.n	8017422 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8017392:	4b6d      	ldr	r3, [pc, #436]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017394:	689b      	ldr	r3, [r3, #8]
 8017396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801739a:	2b00      	cmp	r3, #0
 801739c:	d141      	bne.n	8017422 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801739e:	4b6a      	ldr	r3, [pc, #424]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80173a0:	689b      	ldr	r3, [r3, #8]
 80173a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80173a6:	4a68      	ldr	r2, [pc, #416]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80173a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80173ae:	2380      	movs	r3, #128	; 0x80
 80173b0:	617b      	str	r3, [r7, #20]
 80173b2:	e036      	b.n	8017422 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	685b      	ldr	r3, [r3, #4]
 80173b8:	2b02      	cmp	r3, #2
 80173ba:	d107      	bne.n	80173cc <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80173bc:	4b62      	ldr	r3, [pc, #392]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d115      	bne.n	80173f4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80173c8:	2301      	movs	r3, #1
 80173ca:	e0b6      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	685b      	ldr	r3, [r3, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d107      	bne.n	80173e4 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80173d4:	4b5c      	ldr	r3, [pc, #368]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	f003 0302 	and.w	r3, r3, #2
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d109      	bne.n	80173f4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80173e0:	2301      	movs	r3, #1
 80173e2:	e0aa      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80173e4:	4b58      	ldr	r3, [pc, #352]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d101      	bne.n	80173f4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80173f0:	2301      	movs	r3, #1
 80173f2:	e0a2      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80173f4:	f000 f8b0 	bl	8017558 <HAL_RCC_GetSysClockFreq>
 80173f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	4a53      	ldr	r2, [pc, #332]	; (801754c <HAL_RCC_ClockConfig+0x264>)
 80173fe:	4293      	cmp	r3, r2
 8017400:	d90f      	bls.n	8017422 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8017402:	4b51      	ldr	r3, [pc, #324]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017404:	689b      	ldr	r3, [r3, #8]
 8017406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801740a:	2b00      	cmp	r3, #0
 801740c:	d109      	bne.n	8017422 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801740e:	4b4e      	ldr	r3, [pc, #312]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017410:	689b      	ldr	r3, [r3, #8]
 8017412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017416:	4a4c      	ldr	r2, [pc, #304]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801741c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801741e:	2380      	movs	r3, #128	; 0x80
 8017420:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8017422:	4b49      	ldr	r3, [pc, #292]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017424:	689b      	ldr	r3, [r3, #8]
 8017426:	f023 0203 	bic.w	r2, r3, #3
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	4946      	ldr	r1, [pc, #280]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017430:	4313      	orrs	r3, r2
 8017432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017434:	f7fc f86e 	bl	8013514 <HAL_GetTick>
 8017438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801743a:	e013      	b.n	8017464 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801743c:	f7fc f86a 	bl	8013514 <HAL_GetTick>
 8017440:	4602      	mov	r2, r0
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	1ad3      	subs	r3, r2, r3
 8017446:	f241 3288 	movw	r2, #5000	; 0x1388
 801744a:	4293      	cmp	r3, r2
 801744c:	d90a      	bls.n	8017464 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801744e:	4b3e      	ldr	r3, [pc, #248]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017450:	689b      	ldr	r3, [r3, #8]
 8017452:	f003 020c 	and.w	r2, r3, #12
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	685b      	ldr	r3, [r3, #4]
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	429a      	cmp	r2, r3
 801745e:	d001      	beq.n	8017464 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8017460:	2303      	movs	r3, #3
 8017462:	e06a      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017464:	4b38      	ldr	r3, [pc, #224]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017466:	689b      	ldr	r3, [r3, #8]
 8017468:	f003 020c 	and.w	r2, r3, #12
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	009b      	lsls	r3, r3, #2
 8017472:	429a      	cmp	r2, r3
 8017474:	d1e2      	bne.n	801743c <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	2b80      	cmp	r3, #128	; 0x80
 801747a:	d105      	bne.n	8017488 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801747c:	4b32      	ldr	r3, [pc, #200]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 801747e:	689b      	ldr	r3, [r3, #8]
 8017480:	4a31      	ldr	r2, [pc, #196]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017486:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	f003 0302 	and.w	r3, r3, #2
 8017490:	2b00      	cmp	r3, #0
 8017492:	d010      	beq.n	80174b6 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	689a      	ldr	r2, [r3, #8]
 8017498:	4b2b      	ldr	r3, [pc, #172]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 801749a:	689b      	ldr	r3, [r3, #8]
 801749c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d208      	bcs.n	80174b6 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80174a4:	4b28      	ldr	r3, [pc, #160]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80174a6:	689b      	ldr	r3, [r3, #8]
 80174a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	689b      	ldr	r3, [r3, #8]
 80174b0:	4925      	ldr	r1, [pc, #148]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80174b2:	4313      	orrs	r3, r2
 80174b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80174b6:	4b23      	ldr	r3, [pc, #140]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	f003 030f 	and.w	r3, r3, #15
 80174be:	683a      	ldr	r2, [r7, #0]
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d210      	bcs.n	80174e6 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80174c4:	4b1f      	ldr	r3, [pc, #124]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	f023 020f 	bic.w	r2, r3, #15
 80174cc:	491d      	ldr	r1, [pc, #116]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	4313      	orrs	r3, r2
 80174d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80174d4:	4b1b      	ldr	r3, [pc, #108]	; (8017544 <HAL_RCC_ClockConfig+0x25c>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	f003 030f 	and.w	r3, r3, #15
 80174dc:	683a      	ldr	r2, [r7, #0]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d001      	beq.n	80174e6 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80174e2:	2301      	movs	r3, #1
 80174e4:	e029      	b.n	801753a <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	f003 0304 	and.w	r3, r3, #4
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d008      	beq.n	8017504 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80174f2:	4b15      	ldr	r3, [pc, #84]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 80174f4:	689b      	ldr	r3, [r3, #8]
 80174f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	68db      	ldr	r3, [r3, #12]
 80174fe:	4912      	ldr	r1, [pc, #72]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017500:	4313      	orrs	r3, r2
 8017502:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	f003 0308 	and.w	r3, r3, #8
 801750c:	2b00      	cmp	r3, #0
 801750e:	d009      	beq.n	8017524 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8017510:	4b0d      	ldr	r3, [pc, #52]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017512:	689b      	ldr	r3, [r3, #8]
 8017514:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	691b      	ldr	r3, [r3, #16]
 801751c:	00db      	lsls	r3, r3, #3
 801751e:	490a      	ldr	r1, [pc, #40]	; (8017548 <HAL_RCC_ClockConfig+0x260>)
 8017520:	4313      	orrs	r3, r2
 8017522:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017524:	f000 f8b6 	bl	8017694 <HAL_RCC_GetHCLKFreq>
 8017528:	4603      	mov	r3, r0
 801752a:	4a09      	ldr	r2, [pc, #36]	; (8017550 <HAL_RCC_ClockConfig+0x268>)
 801752c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801752e:	4b09      	ldr	r3, [pc, #36]	; (8017554 <HAL_RCC_ClockConfig+0x26c>)
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	4618      	mov	r0, r3
 8017534:	f7fb fd46 	bl	8012fc4 <HAL_InitTick>
 8017538:	4603      	mov	r3, r0
}
 801753a:	4618      	mov	r0, r3
 801753c:	3718      	adds	r7, #24
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
 8017542:	bf00      	nop
 8017544:	40022000 	.word	0x40022000
 8017548:	40021000 	.word	0x40021000
 801754c:	04c4b400 	.word	0x04c4b400
 8017550:	20000090 	.word	0x20000090
 8017554:	20000094 	.word	0x20000094

08017558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017558:	b480      	push	{r7}
 801755a:	b089      	sub	sp, #36	; 0x24
 801755c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801755e:	2300      	movs	r3, #0
 8017560:	61fb      	str	r3, [r7, #28]
 8017562:	2300      	movs	r3, #0
 8017564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017566:	4b47      	ldr	r3, [pc, #284]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017568:	689b      	ldr	r3, [r3, #8]
 801756a:	f003 030c 	and.w	r3, r3, #12
 801756e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017570:	4b44      	ldr	r3, [pc, #272]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	f003 0303 	and.w	r3, r3, #3
 8017578:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d005      	beq.n	801758c <HAL_RCC_GetSysClockFreq+0x34>
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	2b0c      	cmp	r3, #12
 8017584:	d121      	bne.n	80175ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2b01      	cmp	r3, #1
 801758a:	d11e      	bne.n	80175ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801758c:	4b3d      	ldr	r3, [pc, #244]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	f003 0308 	and.w	r3, r3, #8
 8017594:	2b00      	cmp	r3, #0
 8017596:	d107      	bne.n	80175a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8017598:	4b3a      	ldr	r3, [pc, #232]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 801759a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801759e:	0a1b      	lsrs	r3, r3, #8
 80175a0:	f003 030f 	and.w	r3, r3, #15
 80175a4:	61fb      	str	r3, [r7, #28]
 80175a6:	e005      	b.n	80175b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80175a8:	4b36      	ldr	r3, [pc, #216]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	091b      	lsrs	r3, r3, #4
 80175ae:	f003 030f 	and.w	r3, r3, #15
 80175b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80175b4:	4a34      	ldr	r2, [pc, #208]	; (8017688 <HAL_RCC_GetSysClockFreq+0x130>)
 80175b6:	69fb      	ldr	r3, [r7, #28]
 80175b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80175bc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d10d      	bne.n	80175e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80175c8:	e00a      	b.n	80175e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	2b04      	cmp	r3, #4
 80175ce:	d102      	bne.n	80175d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80175d0:	4b2e      	ldr	r3, [pc, #184]	; (801768c <HAL_RCC_GetSysClockFreq+0x134>)
 80175d2:	61bb      	str	r3, [r7, #24]
 80175d4:	e004      	b.n	80175e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	2b08      	cmp	r3, #8
 80175da:	d101      	bne.n	80175e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80175dc:	4b2c      	ldr	r3, [pc, #176]	; (8017690 <HAL_RCC_GetSysClockFreq+0x138>)
 80175de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	2b0c      	cmp	r3, #12
 80175e4:	d146      	bne.n	8017674 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80175e6:	4b27      	ldr	r3, [pc, #156]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	f003 0303 	and.w	r3, r3, #3
 80175ee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80175f0:	4b24      	ldr	r3, [pc, #144]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 80175f2:	68db      	ldr	r3, [r3, #12]
 80175f4:	091b      	lsrs	r3, r3, #4
 80175f6:	f003 030f 	and.w	r3, r3, #15
 80175fa:	3301      	adds	r3, #1
 80175fc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	2b02      	cmp	r3, #2
 8017602:	d003      	beq.n	801760c <HAL_RCC_GetSysClockFreq+0xb4>
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	2b03      	cmp	r3, #3
 8017608:	d00d      	beq.n	8017626 <HAL_RCC_GetSysClockFreq+0xce>
 801760a:	e019      	b.n	8017640 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801760c:	4a1f      	ldr	r2, [pc, #124]	; (801768c <HAL_RCC_GetSysClockFreq+0x134>)
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	fbb2 f3f3 	udiv	r3, r2, r3
 8017614:	4a1b      	ldr	r2, [pc, #108]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017616:	68d2      	ldr	r2, [r2, #12]
 8017618:	0a12      	lsrs	r2, r2, #8
 801761a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801761e:	fb02 f303 	mul.w	r3, r2, r3
 8017622:	617b      	str	r3, [r7, #20]
        break;
 8017624:	e019      	b.n	801765a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017626:	4a1a      	ldr	r2, [pc, #104]	; (8017690 <HAL_RCC_GetSysClockFreq+0x138>)
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	fbb2 f3f3 	udiv	r3, r2, r3
 801762e:	4a15      	ldr	r2, [pc, #84]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 8017630:	68d2      	ldr	r2, [r2, #12]
 8017632:	0a12      	lsrs	r2, r2, #8
 8017634:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8017638:	fb02 f303 	mul.w	r3, r2, r3
 801763c:	617b      	str	r3, [r7, #20]
        break;
 801763e:	e00c      	b.n	801765a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017640:	69fa      	ldr	r2, [r7, #28]
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	fbb2 f3f3 	udiv	r3, r2, r3
 8017648:	4a0e      	ldr	r2, [pc, #56]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 801764a:	68d2      	ldr	r2, [r2, #12]
 801764c:	0a12      	lsrs	r2, r2, #8
 801764e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8017652:	fb02 f303 	mul.w	r3, r2, r3
 8017656:	617b      	str	r3, [r7, #20]
        break;
 8017658:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 801765a:	4b0a      	ldr	r3, [pc, #40]	; (8017684 <HAL_RCC_GetSysClockFreq+0x12c>)
 801765c:	68db      	ldr	r3, [r3, #12]
 801765e:	0e5b      	lsrs	r3, r3, #25
 8017660:	f003 0303 	and.w	r3, r3, #3
 8017664:	3301      	adds	r3, #1
 8017666:	005b      	lsls	r3, r3, #1
 8017668:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801766a:	697a      	ldr	r2, [r7, #20]
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017672:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8017674:	69bb      	ldr	r3, [r7, #24]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3724      	adds	r7, #36	; 0x24
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr
 8017682:	bf00      	nop
 8017684:	40021000 	.word	0x40021000
 8017688:	08023ebc 	.word	0x08023ebc
 801768c:	00f42400 	.word	0x00f42400
 8017690:	007a1200 	.word	0x007a1200

08017694 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8017698:	f7ff ff5e 	bl	8017558 <HAL_RCC_GetSysClockFreq>
 801769c:	4602      	mov	r2, r0
 801769e:	4b05      	ldr	r3, [pc, #20]	; (80176b4 <HAL_RCC_GetHCLKFreq+0x20>)
 80176a0:	689b      	ldr	r3, [r3, #8]
 80176a2:	091b      	lsrs	r3, r3, #4
 80176a4:	f003 030f 	and.w	r3, r3, #15
 80176a8:	4903      	ldr	r1, [pc, #12]	; (80176b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80176aa:	5ccb      	ldrb	r3, [r1, r3]
 80176ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80176b0:	4618      	mov	r0, r3
 80176b2:	bd80      	pop	{r7, pc}
 80176b4:	40021000 	.word	0x40021000
 80176b8:	08023ea4 	.word	0x08023ea4

080176bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80176c0:	f7ff ffe8 	bl	8017694 <HAL_RCC_GetHCLKFreq>
 80176c4:	4602      	mov	r2, r0
 80176c6:	4b05      	ldr	r3, [pc, #20]	; (80176dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80176c8:	689b      	ldr	r3, [r3, #8]
 80176ca:	0a1b      	lsrs	r3, r3, #8
 80176cc:	f003 0307 	and.w	r3, r3, #7
 80176d0:	4903      	ldr	r1, [pc, #12]	; (80176e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80176d2:	5ccb      	ldrb	r3, [r1, r3]
 80176d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80176d8:	4618      	mov	r0, r3
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	40021000 	.word	0x40021000
 80176e0:	08023eb4 	.word	0x08023eb4

080176e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80176e8:	f7ff ffd4 	bl	8017694 <HAL_RCC_GetHCLKFreq>
 80176ec:	4602      	mov	r2, r0
 80176ee:	4b05      	ldr	r3, [pc, #20]	; (8017704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	0adb      	lsrs	r3, r3, #11
 80176f4:	f003 0307 	and.w	r3, r3, #7
 80176f8:	4903      	ldr	r1, [pc, #12]	; (8017708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80176fa:	5ccb      	ldrb	r3, [r1, r3]
 80176fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017700:	4618      	mov	r0, r3
 8017702:	bd80      	pop	{r7, pc}
 8017704:	40021000 	.word	0x40021000
 8017708:	08023eb4 	.word	0x08023eb4

0801770c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801770c:	b480      	push	{r7}
 801770e:	b083      	sub	sp, #12
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	220f      	movs	r2, #15
 801771a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801771c:	4b12      	ldr	r3, [pc, #72]	; (8017768 <HAL_RCC_GetClockConfig+0x5c>)
 801771e:	689b      	ldr	r3, [r3, #8]
 8017720:	f003 0203 	and.w	r2, r3, #3
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8017728:	4b0f      	ldr	r3, [pc, #60]	; (8017768 <HAL_RCC_GetClockConfig+0x5c>)
 801772a:	689b      	ldr	r3, [r3, #8]
 801772c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8017734:	4b0c      	ldr	r3, [pc, #48]	; (8017768 <HAL_RCC_GetClockConfig+0x5c>)
 8017736:	689b      	ldr	r3, [r3, #8]
 8017738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8017740:	4b09      	ldr	r3, [pc, #36]	; (8017768 <HAL_RCC_GetClockConfig+0x5c>)
 8017742:	689b      	ldr	r3, [r3, #8]
 8017744:	08db      	lsrs	r3, r3, #3
 8017746:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801774e:	4b07      	ldr	r3, [pc, #28]	; (801776c <HAL_RCC_GetClockConfig+0x60>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	f003 020f 	and.w	r2, r3, #15
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	601a      	str	r2, [r3, #0]
}
 801775a:	bf00      	nop
 801775c:	370c      	adds	r7, #12
 801775e:	46bd      	mov	sp, r7
 8017760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017764:	4770      	bx	lr
 8017766:	bf00      	nop
 8017768:	40021000 	.word	0x40021000
 801776c:	40022000 	.word	0x40022000

08017770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b086      	sub	sp, #24
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8017778:	2300      	movs	r3, #0
 801777a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 801777c:	4b2c      	ldr	r3, [pc, #176]	; (8017830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801777e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017784:	2b00      	cmp	r3, #0
 8017786:	d003      	beq.n	8017790 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8017788:	f7ff f83a 	bl	8016800 <HAL_PWREx_GetVoltageRange>
 801778c:	6138      	str	r0, [r7, #16]
 801778e:	e014      	b.n	80177ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8017790:	4b27      	ldr	r3, [pc, #156]	; (8017830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8017792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017794:	4a26      	ldr	r2, [pc, #152]	; (8017830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8017796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801779a:	6593      	str	r3, [r2, #88]	; 0x58
 801779c:	4b24      	ldr	r3, [pc, #144]	; (8017830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 801779e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80177a4:	60fb      	str	r3, [r7, #12]
 80177a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80177a8:	f7ff f82a 	bl	8016800 <HAL_PWREx_GetVoltageRange>
 80177ac:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80177ae:	4b20      	ldr	r3, [pc, #128]	; (8017830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80177b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177b2:	4a1f      	ldr	r2, [pc, #124]	; (8017830 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80177b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80177b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d003      	beq.n	80177c8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80177c6:	d10b      	bne.n	80177e0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	2b80      	cmp	r3, #128	; 0x80
 80177cc:	d919      	bls.n	8017802 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2ba0      	cmp	r3, #160	; 0xa0
 80177d2:	d902      	bls.n	80177da <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80177d4:	2302      	movs	r3, #2
 80177d6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80177d8:	e013      	b.n	8017802 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80177da:	2301      	movs	r3, #1
 80177dc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80177de:	e010      	b.n	8017802 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2b80      	cmp	r3, #128	; 0x80
 80177e4:	d902      	bls.n	80177ec <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80177e6:	2303      	movs	r3, #3
 80177e8:	617b      	str	r3, [r7, #20]
 80177ea:	e00a      	b.n	8017802 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2b80      	cmp	r3, #128	; 0x80
 80177f0:	d102      	bne.n	80177f8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80177f2:	2302      	movs	r3, #2
 80177f4:	617b      	str	r3, [r7, #20]
 80177f6:	e004      	b.n	8017802 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	2b70      	cmp	r3, #112	; 0x70
 80177fc:	d101      	bne.n	8017802 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80177fe:	2301      	movs	r3, #1
 8017800:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8017802:	4b0c      	ldr	r3, [pc, #48]	; (8017834 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	f023 020f 	bic.w	r2, r3, #15
 801780a:	490a      	ldr	r1, [pc, #40]	; (8017834 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	4313      	orrs	r3, r2
 8017810:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8017812:	4b08      	ldr	r3, [pc, #32]	; (8017834 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	f003 030f 	and.w	r3, r3, #15
 801781a:	697a      	ldr	r2, [r7, #20]
 801781c:	429a      	cmp	r2, r3
 801781e:	d001      	beq.n	8017824 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8017820:	2301      	movs	r3, #1
 8017822:	e000      	b.n	8017826 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8017824:	2300      	movs	r3, #0
}
 8017826:	4618      	mov	r0, r3
 8017828:	3718      	adds	r7, #24
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	40021000 	.word	0x40021000
 8017834:	40022000 	.word	0x40022000

08017838 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8017838:	b480      	push	{r7}
 801783a:	b087      	sub	sp, #28
 801783c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801783e:	4b31      	ldr	r3, [pc, #196]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017840:	68db      	ldr	r3, [r3, #12]
 8017842:	f003 0303 	and.w	r3, r3, #3
 8017846:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8017848:	4b2e      	ldr	r3, [pc, #184]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 801784a:	68db      	ldr	r3, [r3, #12]
 801784c:	091b      	lsrs	r3, r3, #4
 801784e:	f003 030f 	and.w	r3, r3, #15
 8017852:	3301      	adds	r3, #1
 8017854:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	2b03      	cmp	r3, #3
 801785a:	d015      	beq.n	8017888 <RCC_GetSysClockFreqFromPLLSource+0x50>
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	2b03      	cmp	r3, #3
 8017860:	d839      	bhi.n	80178d6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2b01      	cmp	r3, #1
 8017866:	d01c      	beq.n	80178a2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2b02      	cmp	r3, #2
 801786c:	d133      	bne.n	80178d6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801786e:	4a26      	ldr	r2, [pc, #152]	; (8017908 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8017870:	68bb      	ldr	r3, [r7, #8]
 8017872:	fbb2 f3f3 	udiv	r3, r2, r3
 8017876:	4a23      	ldr	r2, [pc, #140]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017878:	68d2      	ldr	r2, [r2, #12]
 801787a:	0a12      	lsrs	r2, r2, #8
 801787c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8017880:	fb02 f303 	mul.w	r3, r2, r3
 8017884:	613b      	str	r3, [r7, #16]
      break;
 8017886:	e029      	b.n	80178dc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017888:	4a20      	ldr	r2, [pc, #128]	; (801790c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 801788a:	68bb      	ldr	r3, [r7, #8]
 801788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017890:	4a1c      	ldr	r2, [pc, #112]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8017892:	68d2      	ldr	r2, [r2, #12]
 8017894:	0a12      	lsrs	r2, r2, #8
 8017896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801789a:	fb02 f303 	mul.w	r3, r2, r3
 801789e:	613b      	str	r3, [r7, #16]
      break;
 80178a0:	e01c      	b.n	80178dc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80178a2:	4b18      	ldr	r3, [pc, #96]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f003 0308 	and.w	r3, r3, #8
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d107      	bne.n	80178be <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80178ae:	4b15      	ldr	r3, [pc, #84]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80178b4:	0a1b      	lsrs	r3, r3, #8
 80178b6:	f003 030f 	and.w	r3, r3, #15
 80178ba:	617b      	str	r3, [r7, #20]
 80178bc:	e005      	b.n	80178ca <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80178be:	4b11      	ldr	r3, [pc, #68]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	091b      	lsrs	r3, r3, #4
 80178c4:	f003 030f 	and.w	r3, r3, #15
 80178c8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80178ca:	4a11      	ldr	r2, [pc, #68]	; (8017910 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178d2:	613b      	str	r3, [r7, #16]
        break;
 80178d4:	e002      	b.n	80178dc <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	613b      	str	r3, [r7, #16]
      break;
 80178da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80178dc:	4b09      	ldr	r3, [pc, #36]	; (8017904 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	0e5b      	lsrs	r3, r3, #25
 80178e2:	f003 0303 	and.w	r3, r3, #3
 80178e6:	3301      	adds	r3, #1
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80178ec:	693a      	ldr	r2, [r7, #16]
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80178f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80178f6:	683b      	ldr	r3, [r7, #0]
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	371c      	adds	r7, #28
 80178fc:	46bd      	mov	sp, r7
 80178fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017902:	4770      	bx	lr
 8017904:	40021000 	.word	0x40021000
 8017908:	00f42400 	.word	0x00f42400
 801790c:	007a1200 	.word	0x007a1200
 8017910:	08023ebc 	.word	0x08023ebc

08017914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b088      	sub	sp, #32
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801791c:	2300      	movs	r3, #0
 801791e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017920:	2300      	movs	r3, #0
 8017922:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801792c:	2b00      	cmp	r3, #0
 801792e:	d040      	beq.n	80179b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017934:	2b80      	cmp	r3, #128	; 0x80
 8017936:	d02a      	beq.n	801798e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8017938:	2b80      	cmp	r3, #128	; 0x80
 801793a:	d825      	bhi.n	8017988 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801793c:	2b60      	cmp	r3, #96	; 0x60
 801793e:	d026      	beq.n	801798e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8017940:	2b60      	cmp	r3, #96	; 0x60
 8017942:	d821      	bhi.n	8017988 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8017944:	2b40      	cmp	r3, #64	; 0x40
 8017946:	d006      	beq.n	8017956 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8017948:	2b40      	cmp	r3, #64	; 0x40
 801794a:	d81d      	bhi.n	8017988 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801794c:	2b00      	cmp	r3, #0
 801794e:	d009      	beq.n	8017964 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8017950:	2b20      	cmp	r3, #32
 8017952:	d010      	beq.n	8017976 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8017954:	e018      	b.n	8017988 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8017956:	4b8f      	ldr	r3, [pc, #572]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017958:	68db      	ldr	r3, [r3, #12]
 801795a:	4a8e      	ldr	r2, [pc, #568]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 801795c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017960:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017962:	e015      	b.n	8017990 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	3304      	adds	r3, #4
 8017968:	2100      	movs	r1, #0
 801796a:	4618      	mov	r0, r3
 801796c:	f000 fb56 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017970:	4603      	mov	r3, r0
 8017972:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017974:	e00c      	b.n	8017990 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	3320      	adds	r3, #32
 801797a:	2100      	movs	r1, #0
 801797c:	4618      	mov	r0, r3
 801797e:	f000 fc33 	bl	80181e8 <RCCEx_PLLSAI2_Config>
 8017982:	4603      	mov	r3, r0
 8017984:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017986:	e003      	b.n	8017990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017988:	2301      	movs	r3, #1
 801798a:	77fb      	strb	r3, [r7, #31]
        break;
 801798c:	e000      	b.n	8017990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 801798e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017990:	7ffb      	ldrb	r3, [r7, #31]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d10b      	bne.n	80179ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017996:	4b7f      	ldr	r3, [pc, #508]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801799c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179a4:	497b      	ldr	r1, [pc, #492]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179a6:	4313      	orrs	r3, r2
 80179a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80179ac:	e001      	b.n	80179b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80179ae:	7ffb      	ldrb	r3, [r7, #31]
 80179b0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d047      	beq.n	8017a4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80179c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80179c6:	d030      	beq.n	8017a2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80179c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80179cc:	d82a      	bhi.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80179ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80179d2:	d02a      	beq.n	8017a2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80179d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80179d8:	d824      	bhi.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80179da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179de:	d008      	beq.n	80179f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80179e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179e4:	d81e      	bhi.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d00a      	beq.n	8017a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80179ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179ee:	d010      	beq.n	8017a12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80179f0:	e018      	b.n	8017a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80179f2:	4b68      	ldr	r3, [pc, #416]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179f4:	68db      	ldr	r3, [r3, #12]
 80179f6:	4a67      	ldr	r2, [pc, #412]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80179f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80179fc:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80179fe:	e015      	b.n	8017a2c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	3304      	adds	r3, #4
 8017a04:	2100      	movs	r1, #0
 8017a06:	4618      	mov	r0, r3
 8017a08:	f000 fb08 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8017a10:	e00c      	b.n	8017a2c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	3320      	adds	r3, #32
 8017a16:	2100      	movs	r1, #0
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f000 fbe5 	bl	80181e8 <RCCEx_PLLSAI2_Config>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8017a22:	e003      	b.n	8017a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8017a24:	2301      	movs	r3, #1
 8017a26:	77fb      	strb	r3, [r7, #31]
        break;
 8017a28:	e000      	b.n	8017a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8017a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017a2c:	7ffb      	ldrb	r3, [r7, #31]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d10b      	bne.n	8017a4a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8017a32:	4b58      	ldr	r3, [pc, #352]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017a40:	4954      	ldr	r1, [pc, #336]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a42:	4313      	orrs	r3, r2
 8017a44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8017a48:	e001      	b.n	8017a4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a4a:	7ffb      	ldrb	r3, [r7, #31]
 8017a4c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f000 80ab 	beq.w	8017bb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017a60:	4b4c      	ldr	r3, [pc, #304]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d10d      	bne.n	8017a88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017a6c:	4b49      	ldr	r3, [pc, #292]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a70:	4a48      	ldr	r2, [pc, #288]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017a76:	6593      	str	r3, [r2, #88]	; 0x58
 8017a78:	4b46      	ldr	r3, [pc, #280]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017a80:	60fb      	str	r3, [r7, #12]
 8017a82:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8017a84:	2301      	movs	r3, #1
 8017a86:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017a88:	4b43      	ldr	r3, [pc, #268]	; (8017b98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	4a42      	ldr	r2, [pc, #264]	; (8017b98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017a92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8017a94:	f7fb fd3e 	bl	8013514 <HAL_GetTick>
 8017a98:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017a9a:	e00f      	b.n	8017abc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017a9c:	f7fb fd3a 	bl	8013514 <HAL_GetTick>
 8017aa0:	4602      	mov	r2, r0
 8017aa2:	693b      	ldr	r3, [r7, #16]
 8017aa4:	1ad3      	subs	r3, r2, r3
 8017aa6:	2b02      	cmp	r3, #2
 8017aa8:	d908      	bls.n	8017abc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017aaa:	4b3b      	ldr	r3, [pc, #236]	; (8017b98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d109      	bne.n	8017aca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8017ab6:	2303      	movs	r3, #3
 8017ab8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8017aba:	e006      	b.n	8017aca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8017abc:	4b36      	ldr	r3, [pc, #216]	; (8017b98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d0e9      	beq.n	8017a9c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8017ac8:	e000      	b.n	8017acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8017aca:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8017acc:	7ffb      	ldrb	r3, [r7, #31]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d164      	bne.n	8017b9c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8017ad2:	4b30      	ldr	r3, [pc, #192]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017adc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8017ade:	69bb      	ldr	r3, [r7, #24]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d01f      	beq.n	8017b24 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017aea:	69ba      	ldr	r2, [r7, #24]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d019      	beq.n	8017b24 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8017af0:	4b28      	ldr	r3, [pc, #160]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017afa:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8017afc:	4b25      	ldr	r3, [pc, #148]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b02:	4a24      	ldr	r2, [pc, #144]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017b0c:	4b21      	ldr	r3, [pc, #132]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b12:	4a20      	ldr	r2, [pc, #128]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017b1c:	4a1d      	ldr	r2, [pc, #116]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b1e:	69bb      	ldr	r3, [r7, #24]
 8017b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8017b24:	69bb      	ldr	r3, [r7, #24]
 8017b26:	f003 0301 	and.w	r3, r3, #1
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d01f      	beq.n	8017b6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017b2e:	f7fb fcf1 	bl	8013514 <HAL_GetTick>
 8017b32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b34:	e012      	b.n	8017b5c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017b36:	f7fb fced 	bl	8013514 <HAL_GetTick>
 8017b3a:	4602      	mov	r2, r0
 8017b3c:	693b      	ldr	r3, [r7, #16]
 8017b3e:	1ad3      	subs	r3, r2, r3
 8017b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8017b44:	4293      	cmp	r3, r2
 8017b46:	d909      	bls.n	8017b5c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b48:	4b12      	ldr	r3, [pc, #72]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b4e:	f003 0302 	and.w	r3, r3, #2
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d10a      	bne.n	8017b6c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8017b56:	2303      	movs	r3, #3
 8017b58:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8017b5a:	e007      	b.n	8017b6c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017b5c:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b62:	f003 0302 	and.w	r3, r3, #2
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d0e5      	beq.n	8017b36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8017b6a:	e000      	b.n	8017b6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8017b6c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8017b6e:	7ffb      	ldrb	r3, [r7, #31]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d10c      	bne.n	8017b8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017b74:	4b07      	ldr	r3, [pc, #28]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b84:	4903      	ldr	r1, [pc, #12]	; (8017b94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8017b86:	4313      	orrs	r3, r2
 8017b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8017b8c:	e008      	b.n	8017ba0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017b8e:	7ffb      	ldrb	r3, [r7, #31]
 8017b90:	77bb      	strb	r3, [r7, #30]
 8017b92:	e005      	b.n	8017ba0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8017b94:	40021000 	.word	0x40021000
 8017b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017b9c:	7ffb      	ldrb	r3, [r7, #31]
 8017b9e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8017ba0:	7dfb      	ldrb	r3, [r7, #23]
 8017ba2:	2b01      	cmp	r3, #1
 8017ba4:	d105      	bne.n	8017bb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017ba6:	4b9c      	ldr	r3, [pc, #624]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017baa:	4a9b      	ldr	r2, [pc, #620]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017bb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	f003 0301 	and.w	r3, r3, #1
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d00a      	beq.n	8017bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017bbe:	4b96      	ldr	r3, [pc, #600]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017bc4:	f023 0203 	bic.w	r2, r3, #3
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017bcc:	4992      	ldr	r1, [pc, #584]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017bce:	4313      	orrs	r3, r2
 8017bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	f003 0302 	and.w	r3, r3, #2
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d00a      	beq.n	8017bf6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8017be0:	4b8d      	ldr	r3, [pc, #564]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017be6:	f023 020c 	bic.w	r2, r3, #12
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bee:	498a      	ldr	r1, [pc, #552]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017bf0:	4313      	orrs	r3, r2
 8017bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	f003 0304 	and.w	r3, r3, #4
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d00a      	beq.n	8017c18 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8017c02:	4b85      	ldr	r3, [pc, #532]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c10:	4981      	ldr	r1, [pc, #516]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c12:	4313      	orrs	r3, r2
 8017c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	f003 0308 	and.w	r3, r3, #8
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d00a      	beq.n	8017c3a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8017c24:	4b7c      	ldr	r3, [pc, #496]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c32:	4979      	ldr	r1, [pc, #484]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c34:	4313      	orrs	r3, r2
 8017c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	f003 0310 	and.w	r3, r3, #16
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d00a      	beq.n	8017c5c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8017c46:	4b74      	ldr	r3, [pc, #464]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c54:	4970      	ldr	r1, [pc, #448]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c56:	4313      	orrs	r3, r2
 8017c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	f003 0320 	and.w	r3, r3, #32
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d00a      	beq.n	8017c7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017c68:	4b6b      	ldr	r3, [pc, #428]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c76:	4968      	ldr	r1, [pc, #416]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c78:	4313      	orrs	r3, r2
 8017c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d00a      	beq.n	8017ca0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017c8a:	4b63      	ldr	r3, [pc, #396]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017c98:	495f      	ldr	r1, [pc, #380]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017c9a:	4313      	orrs	r3, r2
 8017c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d00a      	beq.n	8017cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017cac:	4b5a      	ldr	r3, [pc, #360]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017cba:	4957      	ldr	r1, [pc, #348]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cbc:	4313      	orrs	r3, r2
 8017cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d00a      	beq.n	8017ce4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8017cce:	4b52      	ldr	r3, [pc, #328]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017cdc:	494e      	ldr	r1, [pc, #312]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017cde:	4313      	orrs	r3, r2
 8017ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d031      	beq.n	8017d54 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017cf8:	d00e      	beq.n	8017d18 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8017cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8017cfe:	d814      	bhi.n	8017d2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d015      	beq.n	8017d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8017d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017d08:	d10f      	bne.n	8017d2a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017d0a:	4b43      	ldr	r3, [pc, #268]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d0c:	68db      	ldr	r3, [r3, #12]
 8017d0e:	4a42      	ldr	r2, [pc, #264]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017d14:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8017d16:	e00c      	b.n	8017d32 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	3304      	adds	r3, #4
 8017d1c:	2100      	movs	r1, #0
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f000 f97c 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017d24:	4603      	mov	r3, r0
 8017d26:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8017d28:	e003      	b.n	8017d32 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	77fb      	strb	r3, [r7, #31]
        break;
 8017d2e:	e000      	b.n	8017d32 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8017d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017d32:	7ffb      	ldrb	r3, [r7, #31]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d10b      	bne.n	8017d50 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8017d38:	4b37      	ldr	r3, [pc, #220]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017d46:	4934      	ldr	r1, [pc, #208]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d48:	4313      	orrs	r3, r2
 8017d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8017d4e:	e001      	b.n	8017d54 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017d50:	7ffb      	ldrb	r3, [r7, #31]
 8017d52:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00a      	beq.n	8017d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017d60:	4b2d      	ldr	r3, [pc, #180]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d6e:	492a      	ldr	r1, [pc, #168]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d70:	4313      	orrs	r3, r2
 8017d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d00a      	beq.n	8017d98 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8017d82:	4b25      	ldr	r3, [pc, #148]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d90:	4921      	ldr	r1, [pc, #132]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017d92:	4313      	orrs	r3, r2
 8017d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d00a      	beq.n	8017dba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017da4:	4b1c      	ldr	r3, [pc, #112]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017daa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017db2:	4919      	ldr	r1, [pc, #100]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017db4:	4313      	orrs	r3, r2
 8017db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d00a      	beq.n	8017ddc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8017dc6:	4b14      	ldr	r3, [pc, #80]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017dc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017dcc:	f023 0203 	bic.w	r2, r3, #3
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dd4:	4910      	ldr	r1, [pc, #64]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017dd6:	4313      	orrs	r3, r2
 8017dd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d02b      	beq.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017de8:	4b0b      	ldr	r3, [pc, #44]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017df6:	4908      	ldr	r1, [pc, #32]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017df8:	4313      	orrs	r3, r2
 8017dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017e06:	d109      	bne.n	8017e1c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017e08:	4b03      	ldr	r3, [pc, #12]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e0a:	68db      	ldr	r3, [r3, #12]
 8017e0c:	4a02      	ldr	r2, [pc, #8]	; (8017e18 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8017e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017e12:	60d3      	str	r3, [r2, #12]
 8017e14:	e014      	b.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8017e16:	bf00      	nop
 8017e18:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017e24:	d10c      	bne.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	3304      	adds	r3, #4
 8017e2a:	2101      	movs	r1, #1
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f000 f8f5 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017e32:	4603      	mov	r3, r0
 8017e34:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8017e36:	7ffb      	ldrb	r3, [r7, #31]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d001      	beq.n	8017e40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8017e3c:	7ffb      	ldrb	r3, [r7, #31]
 8017e3e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d04a      	beq.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017e54:	d108      	bne.n	8017e68 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8017e56:	4b70      	ldr	r3, [pc, #448]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017e58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e5c:	4a6e      	ldr	r2, [pc, #440]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017e5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017e62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8017e66:	e012      	b.n	8017e8e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8017e68:	4b6b      	ldr	r3, [pc, #428]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e76:	4968      	ldr	r1, [pc, #416]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8017e7e:	4b66      	ldr	r3, [pc, #408]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e84:	4a64      	ldr	r2, [pc, #400]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017e8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017e96:	d10d      	bne.n	8017eb4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	3304      	adds	r3, #4
 8017e9c:	2101      	movs	r1, #1
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f000 f8bc 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017ea8:	7ffb      	ldrb	r3, [r7, #31]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d019      	beq.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8017eae:	7ffb      	ldrb	r3, [r7, #31]
 8017eb0:	77bb      	strb	r3, [r7, #30]
 8017eb2:	e016      	b.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017ebc:	d106      	bne.n	8017ecc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017ebe:	4b56      	ldr	r3, [pc, #344]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ec0:	68db      	ldr	r3, [r3, #12]
 8017ec2:	4a55      	ldr	r2, [pc, #340]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017ec8:	60d3      	str	r3, [r2, #12]
 8017eca:	e00a      	b.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017ed4:	d105      	bne.n	8017ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8017ed6:	4b50      	ldr	r3, [pc, #320]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	4a4f      	ldr	r2, [pc, #316]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017ee0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d028      	beq.n	8017f40 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017eee:	4b4a      	ldr	r3, [pc, #296]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017ef4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017efc:	4946      	ldr	r1, [pc, #280]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017efe:	4313      	orrs	r3, r2
 8017f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f0c:	d106      	bne.n	8017f1c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017f0e:	4b42      	ldr	r3, [pc, #264]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f10:	68db      	ldr	r3, [r3, #12]
 8017f12:	4a41      	ldr	r2, [pc, #260]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f18:	60d3      	str	r3, [r2, #12]
 8017f1a:	e011      	b.n	8017f40 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017f24:	d10c      	bne.n	8017f40 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	3304      	adds	r3, #4
 8017f2a:	2101      	movs	r1, #1
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f000 f875 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017f32:	4603      	mov	r3, r0
 8017f34:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017f36:	7ffb      	ldrb	r3, [r7, #31]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d001      	beq.n	8017f40 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8017f3c:	7ffb      	ldrb	r3, [r7, #31]
 8017f3e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d01e      	beq.n	8017f8a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8017f4c:	4b32      	ldr	r3, [pc, #200]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f5c:	492e      	ldr	r1, [pc, #184]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f5e:	4313      	orrs	r3, r2
 8017f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017f6e:	d10c      	bne.n	8017f8a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	3304      	adds	r3, #4
 8017f74:	2102      	movs	r1, #2
 8017f76:	4618      	mov	r0, r3
 8017f78:	f000 f850 	bl	801801c <RCCEx_PLLSAI1_Config>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017f80:	7ffb      	ldrb	r3, [r7, #31]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d001      	beq.n	8017f8a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8017f86:	7ffb      	ldrb	r3, [r7, #31]
 8017f88:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d00b      	beq.n	8017fae <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8017f96:	4b20      	ldr	r3, [pc, #128]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017f9c:	f023 0204 	bic.w	r2, r3, #4
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017fa6:	491c      	ldr	r1, [pc, #112]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017fa8:	4313      	orrs	r3, r2
 8017faa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d00b      	beq.n	8017fd2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8017fba:	4b17      	ldr	r3, [pc, #92]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017fc0:	f023 0218 	bic.w	r2, r3, #24
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fca:	4913      	ldr	r1, [pc, #76]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017fcc:	4313      	orrs	r3, r2
 8017fce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d017      	beq.n	801800e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8017fde:	4b0e      	ldr	r3, [pc, #56]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017fe0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017fe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017fee:	490a      	ldr	r1, [pc, #40]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8017ff0:	4313      	orrs	r3, r2
 8017ff2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018000:	d105      	bne.n	801800e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8018002:	4b05      	ldr	r3, [pc, #20]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018004:	68db      	ldr	r3, [r3, #12]
 8018006:	4a04      	ldr	r2, [pc, #16]	; (8018018 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8018008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801800c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 801800e:	7fbb      	ldrb	r3, [r7, #30]
}
 8018010:	4618      	mov	r0, r3
 8018012:	3720      	adds	r7, #32
 8018014:	46bd      	mov	sp, r7
 8018016:	bd80      	pop	{r7, pc}
 8018018:	40021000 	.word	0x40021000

0801801c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b084      	sub	sp, #16
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
 8018024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018026:	2300      	movs	r3, #0
 8018028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	2b03      	cmp	r3, #3
 8018030:	d018      	beq.n	8018064 <RCCEx_PLLSAI1_Config+0x48>
 8018032:	2b03      	cmp	r3, #3
 8018034:	d81f      	bhi.n	8018076 <RCCEx_PLLSAI1_Config+0x5a>
 8018036:	2b01      	cmp	r3, #1
 8018038:	d002      	beq.n	8018040 <RCCEx_PLLSAI1_Config+0x24>
 801803a:	2b02      	cmp	r3, #2
 801803c:	d009      	beq.n	8018052 <RCCEx_PLLSAI1_Config+0x36>
 801803e:	e01a      	b.n	8018076 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8018040:	4b65      	ldr	r3, [pc, #404]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	f003 0302 	and.w	r3, r3, #2
 8018048:	2b00      	cmp	r3, #0
 801804a:	d117      	bne.n	801807c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 801804c:	2301      	movs	r3, #1
 801804e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018050:	e014      	b.n	801807c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8018052:	4b61      	ldr	r3, [pc, #388]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801805a:	2b00      	cmp	r3, #0
 801805c:	d110      	bne.n	8018080 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 801805e:	2301      	movs	r3, #1
 8018060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018062:	e00d      	b.n	8018080 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8018064:	4b5c      	ldr	r3, [pc, #368]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 801806c:	2b00      	cmp	r3, #0
 801806e:	d109      	bne.n	8018084 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8018070:	2301      	movs	r3, #1
 8018072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018074:	e006      	b.n	8018084 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8018076:	2301      	movs	r3, #1
 8018078:	73fb      	strb	r3, [r7, #15]
      break;
 801807a:	e004      	b.n	8018086 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 801807c:	bf00      	nop
 801807e:	e002      	b.n	8018086 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018080:	bf00      	nop
 8018082:	e000      	b.n	8018086 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8018084:	bf00      	nop
  }

  if (status == HAL_OK)
 8018086:	7bfb      	ldrb	r3, [r7, #15]
 8018088:	2b00      	cmp	r3, #0
 801808a:	f040 809f 	bne.w	80181cc <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801808e:	4b52      	ldr	r3, [pc, #328]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	4a51      	ldr	r2, [pc, #324]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018094:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8018098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801809a:	f7fb fa3b 	bl	8013514 <HAL_GetTick>
 801809e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80180a0:	e00f      	b.n	80180c2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80180a2:	f7fb fa37 	bl	8013514 <HAL_GetTick>
 80180a6:	4602      	mov	r2, r0
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	1ad3      	subs	r3, r2, r3
 80180ac:	2b02      	cmp	r3, #2
 80180ae:	d908      	bls.n	80180c2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80180b0:	4b49      	ldr	r3, [pc, #292]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d009      	beq.n	80180d0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80180bc:	2303      	movs	r3, #3
 80180be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80180c0:	e006      	b.n	80180d0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80180c2:	4b45      	ldr	r3, [pc, #276]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d1e9      	bne.n	80180a2 <RCCEx_PLLSAI1_Config+0x86>
 80180ce:	e000      	b.n	80180d2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80180d0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80180d2:	7bfb      	ldrb	r3, [r7, #15]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d179      	bne.n	80181cc <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80180d8:	683b      	ldr	r3, [r7, #0]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d116      	bne.n	801810c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80180de:	4b3e      	ldr	r3, [pc, #248]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80180e0:	691a      	ldr	r2, [r3, #16]
 80180e2:	4b3e      	ldr	r3, [pc, #248]	; (80181dc <RCCEx_PLLSAI1_Config+0x1c0>)
 80180e4:	4013      	ands	r3, r2
 80180e6:	687a      	ldr	r2, [r7, #4]
 80180e8:	6892      	ldr	r2, [r2, #8]
 80180ea:	0211      	lsls	r1, r2, #8
 80180ec:	687a      	ldr	r2, [r7, #4]
 80180ee:	68d2      	ldr	r2, [r2, #12]
 80180f0:	06d2      	lsls	r2, r2, #27
 80180f2:	4311      	orrs	r1, r2
 80180f4:	687a      	ldr	r2, [r7, #4]
 80180f6:	6852      	ldr	r2, [r2, #4]
 80180f8:	3a01      	subs	r2, #1
 80180fa:	0112      	lsls	r2, r2, #4
 80180fc:	4311      	orrs	r1, r2
 80180fe:	687a      	ldr	r2, [r7, #4]
 8018100:	6812      	ldr	r2, [r2, #0]
 8018102:	430a      	orrs	r2, r1
 8018104:	4934      	ldr	r1, [pc, #208]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018106:	4313      	orrs	r3, r2
 8018108:	610b      	str	r3, [r1, #16]
 801810a:	e033      	b.n	8018174 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	2b01      	cmp	r3, #1
 8018110:	d118      	bne.n	8018144 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018112:	4b31      	ldr	r3, [pc, #196]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018114:	691a      	ldr	r2, [r3, #16]
 8018116:	4b32      	ldr	r3, [pc, #200]	; (80181e0 <RCCEx_PLLSAI1_Config+0x1c4>)
 8018118:	4013      	ands	r3, r2
 801811a:	687a      	ldr	r2, [r7, #4]
 801811c:	6892      	ldr	r2, [r2, #8]
 801811e:	0211      	lsls	r1, r2, #8
 8018120:	687a      	ldr	r2, [r7, #4]
 8018122:	6912      	ldr	r2, [r2, #16]
 8018124:	0852      	lsrs	r2, r2, #1
 8018126:	3a01      	subs	r2, #1
 8018128:	0552      	lsls	r2, r2, #21
 801812a:	4311      	orrs	r1, r2
 801812c:	687a      	ldr	r2, [r7, #4]
 801812e:	6852      	ldr	r2, [r2, #4]
 8018130:	3a01      	subs	r2, #1
 8018132:	0112      	lsls	r2, r2, #4
 8018134:	4311      	orrs	r1, r2
 8018136:	687a      	ldr	r2, [r7, #4]
 8018138:	6812      	ldr	r2, [r2, #0]
 801813a:	430a      	orrs	r2, r1
 801813c:	4926      	ldr	r1, [pc, #152]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 801813e:	4313      	orrs	r3, r2
 8018140:	610b      	str	r3, [r1, #16]
 8018142:	e017      	b.n	8018174 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8018144:	4b24      	ldr	r3, [pc, #144]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018146:	691a      	ldr	r2, [r3, #16]
 8018148:	4b26      	ldr	r3, [pc, #152]	; (80181e4 <RCCEx_PLLSAI1_Config+0x1c8>)
 801814a:	4013      	ands	r3, r2
 801814c:	687a      	ldr	r2, [r7, #4]
 801814e:	6892      	ldr	r2, [r2, #8]
 8018150:	0211      	lsls	r1, r2, #8
 8018152:	687a      	ldr	r2, [r7, #4]
 8018154:	6952      	ldr	r2, [r2, #20]
 8018156:	0852      	lsrs	r2, r2, #1
 8018158:	3a01      	subs	r2, #1
 801815a:	0652      	lsls	r2, r2, #25
 801815c:	4311      	orrs	r1, r2
 801815e:	687a      	ldr	r2, [r7, #4]
 8018160:	6852      	ldr	r2, [r2, #4]
 8018162:	3a01      	subs	r2, #1
 8018164:	0112      	lsls	r2, r2, #4
 8018166:	4311      	orrs	r1, r2
 8018168:	687a      	ldr	r2, [r7, #4]
 801816a:	6812      	ldr	r2, [r2, #0]
 801816c:	430a      	orrs	r2, r1
 801816e:	491a      	ldr	r1, [pc, #104]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018170:	4313      	orrs	r3, r2
 8018172:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8018174:	4b18      	ldr	r3, [pc, #96]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	4a17      	ldr	r2, [pc, #92]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 801817a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801817e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018180:	f7fb f9c8 	bl	8013514 <HAL_GetTick>
 8018184:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018186:	e00f      	b.n	80181a8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018188:	f7fb f9c4 	bl	8013514 <HAL_GetTick>
 801818c:	4602      	mov	r2, r0
 801818e:	68bb      	ldr	r3, [r7, #8]
 8018190:	1ad3      	subs	r3, r2, r3
 8018192:	2b02      	cmp	r3, #2
 8018194:	d908      	bls.n	80181a8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8018196:	4b10      	ldr	r3, [pc, #64]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d109      	bne.n	80181b6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80181a2:	2303      	movs	r3, #3
 80181a4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80181a6:	e006      	b.n	80181b6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80181a8:	4b0b      	ldr	r3, [pc, #44]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d0e9      	beq.n	8018188 <RCCEx_PLLSAI1_Config+0x16c>
 80181b4:	e000      	b.n	80181b8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80181b6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80181b8:	7bfb      	ldrb	r3, [r7, #15]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d106      	bne.n	80181cc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80181be:	4b06      	ldr	r3, [pc, #24]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181c0:	691a      	ldr	r2, [r3, #16]
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	699b      	ldr	r3, [r3, #24]
 80181c6:	4904      	ldr	r1, [pc, #16]	; (80181d8 <RCCEx_PLLSAI1_Config+0x1bc>)
 80181c8:	4313      	orrs	r3, r2
 80181ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80181cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80181ce:	4618      	mov	r0, r3
 80181d0:	3710      	adds	r7, #16
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}
 80181d6:	bf00      	nop
 80181d8:	40021000 	.word	0x40021000
 80181dc:	07ff800c 	.word	0x07ff800c
 80181e0:	ff9f800c 	.word	0xff9f800c
 80181e4:	f9ff800c 	.word	0xf9ff800c

080181e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b084      	sub	sp, #16
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80181f2:	2300      	movs	r3, #0
 80181f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	2b03      	cmp	r3, #3
 80181fc:	d018      	beq.n	8018230 <RCCEx_PLLSAI2_Config+0x48>
 80181fe:	2b03      	cmp	r3, #3
 8018200:	d81f      	bhi.n	8018242 <RCCEx_PLLSAI2_Config+0x5a>
 8018202:	2b01      	cmp	r3, #1
 8018204:	d002      	beq.n	801820c <RCCEx_PLLSAI2_Config+0x24>
 8018206:	2b02      	cmp	r3, #2
 8018208:	d009      	beq.n	801821e <RCCEx_PLLSAI2_Config+0x36>
 801820a:	e01a      	b.n	8018242 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801820c:	4b4a      	ldr	r3, [pc, #296]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	f003 0302 	and.w	r3, r3, #2
 8018214:	2b00      	cmp	r3, #0
 8018216:	d117      	bne.n	8018248 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8018218:	2301      	movs	r3, #1
 801821a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801821c:	e014      	b.n	8018248 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801821e:	4b46      	ldr	r3, [pc, #280]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018226:	2b00      	cmp	r3, #0
 8018228:	d110      	bne.n	801824c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 801822a:	2301      	movs	r3, #1
 801822c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801822e:	e00d      	b.n	801824c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8018230:	4b41      	ldr	r3, [pc, #260]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8018238:	2b00      	cmp	r3, #0
 801823a:	d109      	bne.n	8018250 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 801823c:	2301      	movs	r3, #1
 801823e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8018240:	e006      	b.n	8018250 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8018242:	2301      	movs	r3, #1
 8018244:	73fb      	strb	r3, [r7, #15]
      break;
 8018246:	e004      	b.n	8018252 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8018248:	bf00      	nop
 801824a:	e002      	b.n	8018252 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 801824c:	bf00      	nop
 801824e:	e000      	b.n	8018252 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8018250:	bf00      	nop
  }

  if (status == HAL_OK)
 8018252:	7bfb      	ldrb	r3, [r7, #15]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d169      	bne.n	801832c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8018258:	4b37      	ldr	r3, [pc, #220]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4a36      	ldr	r2, [pc, #216]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 801825e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018264:	f7fb f956 	bl	8013514 <HAL_GetTick>
 8018268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801826a:	e00f      	b.n	801828c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801826c:	f7fb f952 	bl	8013514 <HAL_GetTick>
 8018270:	4602      	mov	r2, r0
 8018272:	68bb      	ldr	r3, [r7, #8]
 8018274:	1ad3      	subs	r3, r2, r3
 8018276:	2b02      	cmp	r3, #2
 8018278:	d908      	bls.n	801828c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801827a:	4b2f      	ldr	r3, [pc, #188]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018282:	2b00      	cmp	r3, #0
 8018284:	d009      	beq.n	801829a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8018286:	2303      	movs	r3, #3
 8018288:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801828a:	e006      	b.n	801829a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801828c:	4b2a      	ldr	r3, [pc, #168]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018294:	2b00      	cmp	r3, #0
 8018296:	d1e9      	bne.n	801826c <RCCEx_PLLSAI2_Config+0x84>
 8018298:	e000      	b.n	801829c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 801829a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 801829c:	7bfb      	ldrb	r3, [r7, #15]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d144      	bne.n	801832c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d115      	bne.n	80182d4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80182a8:	4b23      	ldr	r3, [pc, #140]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 80182aa:	695a      	ldr	r2, [r3, #20]
 80182ac:	4b23      	ldr	r3, [pc, #140]	; (801833c <RCCEx_PLLSAI2_Config+0x154>)
 80182ae:	4013      	ands	r3, r2
 80182b0:	687a      	ldr	r2, [r7, #4]
 80182b2:	6892      	ldr	r2, [r2, #8]
 80182b4:	0211      	lsls	r1, r2, #8
 80182b6:	687a      	ldr	r2, [r7, #4]
 80182b8:	68d2      	ldr	r2, [r2, #12]
 80182ba:	06d2      	lsls	r2, r2, #27
 80182bc:	4311      	orrs	r1, r2
 80182be:	687a      	ldr	r2, [r7, #4]
 80182c0:	6852      	ldr	r2, [r2, #4]
 80182c2:	3a01      	subs	r2, #1
 80182c4:	0112      	lsls	r2, r2, #4
 80182c6:	4311      	orrs	r1, r2
 80182c8:	687a      	ldr	r2, [r7, #4]
 80182ca:	6812      	ldr	r2, [r2, #0]
 80182cc:	430a      	orrs	r2, r1
 80182ce:	491a      	ldr	r1, [pc, #104]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 80182d0:	4313      	orrs	r3, r2
 80182d2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80182d4:	4b18      	ldr	r3, [pc, #96]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4a17      	ldr	r2, [pc, #92]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 80182da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80182de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80182e0:	f7fb f918 	bl	8013514 <HAL_GetTick>
 80182e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80182e6:	e00f      	b.n	8018308 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80182e8:	f7fb f914 	bl	8013514 <HAL_GetTick>
 80182ec:	4602      	mov	r2, r0
 80182ee:	68bb      	ldr	r3, [r7, #8]
 80182f0:	1ad3      	subs	r3, r2, r3
 80182f2:	2b02      	cmp	r3, #2
 80182f4:	d908      	bls.n	8018308 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80182f6:	4b10      	ldr	r3, [pc, #64]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d109      	bne.n	8018316 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8018302:	2303      	movs	r3, #3
 8018304:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8018306:	e006      	b.n	8018316 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8018308:	4b0b      	ldr	r3, [pc, #44]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018310:	2b00      	cmp	r3, #0
 8018312:	d0e9      	beq.n	80182e8 <RCCEx_PLLSAI2_Config+0x100>
 8018314:	e000      	b.n	8018318 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8018316:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8018318:	7bfb      	ldrb	r3, [r7, #15]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d106      	bne.n	801832c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 801831e:	4b06      	ldr	r3, [pc, #24]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 8018320:	695a      	ldr	r2, [r3, #20]
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	691b      	ldr	r3, [r3, #16]
 8018326:	4904      	ldr	r1, [pc, #16]	; (8018338 <RCCEx_PLLSAI2_Config+0x150>)
 8018328:	4313      	orrs	r3, r2
 801832a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801832c:	7bfb      	ldrb	r3, [r7, #15]
}
 801832e:	4618      	mov	r0, r3
 8018330:	3710      	adds	r7, #16
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}
 8018336:	bf00      	nop
 8018338:	40021000 	.word	0x40021000
 801833c:	07ff800c 	.word	0x07ff800c

08018340 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018348:	2301      	movs	r3, #1
 801834a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d066      	beq.n	8018420 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8018358:	b2db      	uxtb	r3, r3
 801835a:	2b00      	cmp	r3, #0
 801835c:	d106      	bne.n	801836c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2200      	movs	r2, #0
 8018362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	f7fa fb42 	bl	80129f0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	2202      	movs	r2, #2
 8018370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	68db      	ldr	r3, [r3, #12]
 801837a:	f003 0310 	and.w	r3, r3, #16
 801837e:	2b10      	cmp	r3, #16
 8018380:	d045      	beq.n	801840e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018382:	4b2a      	ldr	r3, [pc, #168]	; (801842c <HAL_RTC_Init+0xec>)
 8018384:	22ca      	movs	r2, #202	; 0xca
 8018386:	625a      	str	r2, [r3, #36]	; 0x24
 8018388:	4b28      	ldr	r3, [pc, #160]	; (801842c <HAL_RTC_Init+0xec>)
 801838a:	2253      	movs	r2, #83	; 0x53
 801838c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 801838e:	6878      	ldr	r0, [r7, #4]
 8018390:	f000 f872 	bl	8018478 <RTC_EnterInitMode>
 8018394:	4603      	mov	r3, r0
 8018396:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8018398:	7bfb      	ldrb	r3, [r7, #15]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d121      	bne.n	80183e2 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 801839e:	4b23      	ldr	r3, [pc, #140]	; (801842c <HAL_RTC_Init+0xec>)
 80183a0:	699b      	ldr	r3, [r3, #24]
 80183a2:	4a22      	ldr	r2, [pc, #136]	; (801842c <HAL_RTC_Init+0xec>)
 80183a4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80183a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80183ac:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80183ae:	4b1f      	ldr	r3, [pc, #124]	; (801842c <HAL_RTC_Init+0xec>)
 80183b0:	699a      	ldr	r2, [r3, #24]
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6859      	ldr	r1, [r3, #4]
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	691b      	ldr	r3, [r3, #16]
 80183ba:	4319      	orrs	r1, r3
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	699b      	ldr	r3, [r3, #24]
 80183c0:	430b      	orrs	r3, r1
 80183c2:	491a      	ldr	r1, [pc, #104]	; (801842c <HAL_RTC_Init+0xec>)
 80183c4:	4313      	orrs	r3, r2
 80183c6:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	68da      	ldr	r2, [r3, #12]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	689b      	ldr	r3, [r3, #8]
 80183d0:	041b      	lsls	r3, r3, #16
 80183d2:	4916      	ldr	r1, [pc, #88]	; (801842c <HAL_RTC_Init+0xec>)
 80183d4:	4313      	orrs	r3, r2
 80183d6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80183d8:	6878      	ldr	r0, [r7, #4]
 80183da:	f000 f881 	bl	80184e0 <RTC_ExitInitMode>
 80183de:	4603      	mov	r3, r0
 80183e0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80183e2:	7bfb      	ldrb	r3, [r7, #15]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d10e      	bne.n	8018406 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80183e8:	4b10      	ldr	r3, [pc, #64]	; (801842c <HAL_RTC_Init+0xec>)
 80183ea:	699b      	ldr	r3, [r3, #24]
 80183ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6a19      	ldr	r1, [r3, #32]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	69db      	ldr	r3, [r3, #28]
 80183f8:	4319      	orrs	r1, r3
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	695b      	ldr	r3, [r3, #20]
 80183fe:	430b      	orrs	r3, r1
 8018400:	490a      	ldr	r1, [pc, #40]	; (801842c <HAL_RTC_Init+0xec>)
 8018402:	4313      	orrs	r3, r2
 8018404:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018406:	4b09      	ldr	r3, [pc, #36]	; (801842c <HAL_RTC_Init+0xec>)
 8018408:	22ff      	movs	r2, #255	; 0xff
 801840a:	625a      	str	r2, [r3, #36]	; 0x24
 801840c:	e001      	b.n	8018412 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 801840e:	2300      	movs	r3, #0
 8018410:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8018412:	7bfb      	ldrb	r3, [r7, #15]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d103      	bne.n	8018420 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	2201      	movs	r2, #1
 801841c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8018420:	7bfb      	ldrb	r3, [r7, #15]
}
 8018422:	4618      	mov	r0, r3
 8018424:	3710      	adds	r7, #16
 8018426:	46bd      	mov	sp, r7
 8018428:	bd80      	pop	{r7, pc}
 801842a:	bf00      	nop
 801842c:	40002800 	.word	0x40002800

08018430 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b084      	sub	sp, #16
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8018438:	4b0d      	ldr	r3, [pc, #52]	; (8018470 <HAL_RTC_WaitForSynchro+0x40>)
 801843a:	4a0e      	ldr	r2, [pc, #56]	; (8018474 <HAL_RTC_WaitForSynchro+0x44>)
 801843c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801843e:	f7fb f869 	bl	8013514 <HAL_GetTick>
 8018442:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8018444:	e009      	b.n	801845a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018446:	f7fb f865 	bl	8013514 <HAL_GetTick>
 801844a:	4602      	mov	r2, r0
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	1ad3      	subs	r3, r2, r3
 8018450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018454:	d901      	bls.n	801845a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8018456:	2303      	movs	r3, #3
 8018458:	e006      	b.n	8018468 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 801845a:	4b05      	ldr	r3, [pc, #20]	; (8018470 <HAL_RTC_WaitForSynchro+0x40>)
 801845c:	68db      	ldr	r3, [r3, #12]
 801845e:	f003 0320 	and.w	r3, r3, #32
 8018462:	2b00      	cmp	r3, #0
 8018464:	d0ef      	beq.n	8018446 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8018466:	2300      	movs	r3, #0
}
 8018468:	4618      	mov	r0, r3
 801846a:	3710      	adds	r7, #16
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}
 8018470:	40002800 	.word	0x40002800
 8018474:	0001005c 	.word	0x0001005c

08018478 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018480:	2300      	movs	r3, #0
 8018482:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8018484:	4b15      	ldr	r3, [pc, #84]	; (80184dc <RTC_EnterInitMode+0x64>)
 8018486:	68db      	ldr	r3, [r3, #12]
 8018488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801848c:	2b00      	cmp	r3, #0
 801848e:	d120      	bne.n	80184d2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8018490:	4b12      	ldr	r3, [pc, #72]	; (80184dc <RTC_EnterInitMode+0x64>)
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	4a11      	ldr	r2, [pc, #68]	; (80184dc <RTC_EnterInitMode+0x64>)
 8018496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801849a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 801849c:	f7fb f83a 	bl	8013514 <HAL_GetTick>
 80184a0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80184a2:	e00d      	b.n	80184c0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80184a4:	f7fb f836 	bl	8013514 <HAL_GetTick>
 80184a8:	4602      	mov	r2, r0
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	1ad3      	subs	r3, r2, r3
 80184ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80184b2:	d905      	bls.n	80184c0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80184b4:	2303      	movs	r3, #3
 80184b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2203      	movs	r2, #3
 80184bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80184c0:	4b06      	ldr	r3, [pc, #24]	; (80184dc <RTC_EnterInitMode+0x64>)
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d102      	bne.n	80184d2 <RTC_EnterInitMode+0x5a>
 80184cc:	7bfb      	ldrb	r3, [r7, #15]
 80184ce:	2b03      	cmp	r3, #3
 80184d0:	d1e8      	bne.n	80184a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80184d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80184d4:	4618      	mov	r0, r3
 80184d6:	3710      	adds	r7, #16
 80184d8:	46bd      	mov	sp, r7
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	40002800 	.word	0x40002800

080184e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80184e8:	2300      	movs	r3, #0
 80184ea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80184ec:	4b1a      	ldr	r3, [pc, #104]	; (8018558 <RTC_ExitInitMode+0x78>)
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	4a19      	ldr	r2, [pc, #100]	; (8018558 <RTC_ExitInitMode+0x78>)
 80184f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80184f6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80184f8:	4b17      	ldr	r3, [pc, #92]	; (8018558 <RTC_ExitInitMode+0x78>)
 80184fa:	699b      	ldr	r3, [r3, #24]
 80184fc:	f003 0320 	and.w	r3, r3, #32
 8018500:	2b00      	cmp	r3, #0
 8018502:	d10c      	bne.n	801851e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018504:	6878      	ldr	r0, [r7, #4]
 8018506:	f7ff ff93 	bl	8018430 <HAL_RTC_WaitForSynchro>
 801850a:	4603      	mov	r3, r0
 801850c:	2b00      	cmp	r3, #0
 801850e:	d01e      	beq.n	801854e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2203      	movs	r2, #3
 8018514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8018518:	2303      	movs	r3, #3
 801851a:	73fb      	strb	r3, [r7, #15]
 801851c:	e017      	b.n	801854e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801851e:	4b0e      	ldr	r3, [pc, #56]	; (8018558 <RTC_ExitInitMode+0x78>)
 8018520:	699b      	ldr	r3, [r3, #24]
 8018522:	4a0d      	ldr	r2, [pc, #52]	; (8018558 <RTC_ExitInitMode+0x78>)
 8018524:	f023 0320 	bic.w	r3, r3, #32
 8018528:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801852a:	6878      	ldr	r0, [r7, #4]
 801852c:	f7ff ff80 	bl	8018430 <HAL_RTC_WaitForSynchro>
 8018530:	4603      	mov	r3, r0
 8018532:	2b00      	cmp	r3, #0
 8018534:	d005      	beq.n	8018542 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2203      	movs	r2, #3
 801853a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 801853e:	2303      	movs	r3, #3
 8018540:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8018542:	4b05      	ldr	r3, [pc, #20]	; (8018558 <RTC_ExitInitMode+0x78>)
 8018544:	699b      	ldr	r3, [r3, #24]
 8018546:	4a04      	ldr	r2, [pc, #16]	; (8018558 <RTC_ExitInitMode+0x78>)
 8018548:	f043 0320 	orr.w	r3, r3, #32
 801854c:	6193      	str	r3, [r2, #24]
  }

  return status;
 801854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018550:	4618      	mov	r0, r3
 8018552:	3710      	adds	r7, #16
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}
 8018558:	40002800 	.word	0x40002800

0801855c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	681a      	ldr	r2, [r3, #0]
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	490f      	ldr	r1, [pc, #60]	; (80185ac <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8018570:	4313      	orrs	r3, r2
 8018572:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	689a      	ldr	r2, [r3, #8]
 8018578:	683b      	ldr	r3, [r7, #0]
 801857a:	68db      	ldr	r3, [r3, #12]
 801857c:	490c      	ldr	r1, [pc, #48]	; (80185b0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 801857e:	4313      	orrs	r3, r2
 8018580:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8018582:	4b0b      	ldr	r3, [pc, #44]	; (80185b0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8018584:	6a1b      	ldr	r3, [r3, #32]
 8018586:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	6919      	ldr	r1, [r3, #16]
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	695b      	ldr	r3, [r3, #20]
 8018592:	041b      	lsls	r3, r3, #16
 8018594:	430b      	orrs	r3, r1
 8018596:	4906      	ldr	r1, [pc, #24]	; (80185b0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8018598:	4313      	orrs	r3, r2
 801859a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 801859c:	2300      	movs	r3, #0
}
 801859e:	4618      	mov	r0, r3
 80185a0:	370c      	adds	r7, #12
 80185a2:	46bd      	mov	sp, r7
 80185a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a8:	4770      	bx	lr
 80185aa:	bf00      	nop
 80185ac:	40002800 	.word	0x40002800
 80185b0:	40003400 	.word	0x40003400

080185b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b084      	sub	sp, #16
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d101      	bne.n	80185c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80185c2:	2301      	movs	r3, #1
 80185c4:	e095      	b.n	80186f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d108      	bne.n	80185e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	685b      	ldr	r3, [r3, #4]
 80185d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80185d6:	d009      	beq.n	80185ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2200      	movs	r2, #0
 80185dc:	61da      	str	r2, [r3, #28]
 80185de:	e005      	b.n	80185ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	2200      	movs	r2, #0
 80185e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	2200      	movs	r2, #0
 80185ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	2200      	movs	r2, #0
 80185f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80185f8:	b2db      	uxtb	r3, r3
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d106      	bne.n	801860c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	2200      	movs	r2, #0
 8018602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f7fa fa30 	bl	8012a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	2202      	movs	r2, #2
 8018610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	681a      	ldr	r2, [r3, #0]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	68db      	ldr	r3, [r3, #12]
 8018628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801862c:	d902      	bls.n	8018634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801862e:	2300      	movs	r3, #0
 8018630:	60fb      	str	r3, [r7, #12]
 8018632:	e002      	b.n	801863a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8018634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	68db      	ldr	r3, [r3, #12]
 801863e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8018642:	d007      	beq.n	8018654 <HAL_SPI_Init+0xa0>
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	68db      	ldr	r3, [r3, #12]
 8018648:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801864c:	d002      	beq.n	8018654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2200      	movs	r2, #0
 8018652:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	689b      	ldr	r3, [r3, #8]
 8018660:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8018664:	431a      	orrs	r2, r3
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	691b      	ldr	r3, [r3, #16]
 801866a:	f003 0302 	and.w	r3, r3, #2
 801866e:	431a      	orrs	r2, r3
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	695b      	ldr	r3, [r3, #20]
 8018674:	f003 0301 	and.w	r3, r3, #1
 8018678:	431a      	orrs	r2, r3
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	699b      	ldr	r3, [r3, #24]
 801867e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018682:	431a      	orrs	r2, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	69db      	ldr	r3, [r3, #28]
 8018688:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801868c:	431a      	orrs	r2, r3
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	6a1b      	ldr	r3, [r3, #32]
 8018692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018696:	ea42 0103 	orr.w	r1, r2, r3
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801869e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	430a      	orrs	r2, r1
 80186a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	699b      	ldr	r3, [r3, #24]
 80186ae:	0c1b      	lsrs	r3, r3, #16
 80186b0:	f003 0204 	and.w	r2, r3, #4
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186b8:	f003 0310 	and.w	r3, r3, #16
 80186bc:	431a      	orrs	r2, r3
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186c2:	f003 0308 	and.w	r3, r3, #8
 80186c6:	431a      	orrs	r2, r3
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80186d0:	ea42 0103 	orr.w	r1, r2, r3
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	430a      	orrs	r2, r1
 80186e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2200      	movs	r2, #0
 80186e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2201      	movs	r2, #1
 80186ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80186f0:	2300      	movs	r3, #0
}
 80186f2:	4618      	mov	r0, r3
 80186f4:	3710      	adds	r7, #16
 80186f6:	46bd      	mov	sp, r7
 80186f8:	bd80      	pop	{r7, pc}

080186fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80186fa:	b580      	push	{r7, lr}
 80186fc:	b088      	sub	sp, #32
 80186fe:	af00      	add	r7, sp, #0
 8018700:	60f8      	str	r0, [r7, #12]
 8018702:	60b9      	str	r1, [r7, #8]
 8018704:	603b      	str	r3, [r7, #0]
 8018706:	4613      	mov	r3, r2
 8018708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801870a:	2300      	movs	r3, #0
 801870c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018714:	2b01      	cmp	r3, #1
 8018716:	d101      	bne.n	801871c <HAL_SPI_Transmit+0x22>
 8018718:	2302      	movs	r3, #2
 801871a:	e158      	b.n	80189ce <HAL_SPI_Transmit+0x2d4>
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2201      	movs	r2, #1
 8018720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018724:	f7fa fef6 	bl	8013514 <HAL_GetTick>
 8018728:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801872a:	88fb      	ldrh	r3, [r7, #6]
 801872c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018734:	b2db      	uxtb	r3, r3
 8018736:	2b01      	cmp	r3, #1
 8018738:	d002      	beq.n	8018740 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801873a:	2302      	movs	r3, #2
 801873c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801873e:	e13d      	b.n	80189bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d002      	beq.n	801874c <HAL_SPI_Transmit+0x52>
 8018746:	88fb      	ldrh	r3, [r7, #6]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d102      	bne.n	8018752 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801874c:	2301      	movs	r3, #1
 801874e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8018750:	e134      	b.n	80189bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	2203      	movs	r2, #3
 8018756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	2200      	movs	r2, #0
 801875e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	68ba      	ldr	r2, [r7, #8]
 8018764:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	88fa      	ldrh	r2, [r7, #6]
 801876a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	88fa      	ldrh	r2, [r7, #6]
 8018770:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2200      	movs	r2, #0
 8018776:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	2200      	movs	r2, #0
 801877c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	2200      	movs	r2, #0
 8018784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	2200      	movs	r2, #0
 801878c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	2200      	movs	r2, #0
 8018792:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	689b      	ldr	r3, [r3, #8]
 8018798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801879c:	d10f      	bne.n	80187be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	681a      	ldr	r2, [r3, #0]
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80187ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	681a      	ldr	r2, [r3, #0]
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80187bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187c8:	2b40      	cmp	r3, #64	; 0x40
 80187ca:	d007      	beq.n	80187dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	681a      	ldr	r2, [r3, #0]
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80187da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	68db      	ldr	r3, [r3, #12]
 80187e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80187e4:	d94b      	bls.n	801887e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	685b      	ldr	r3, [r3, #4]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d002      	beq.n	80187f4 <HAL_SPI_Transmit+0xfa>
 80187ee:	8afb      	ldrh	r3, [r7, #22]
 80187f0:	2b01      	cmp	r3, #1
 80187f2:	d13e      	bne.n	8018872 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187f8:	881a      	ldrh	r2, [r3, #0]
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018804:	1c9a      	adds	r2, r3, #2
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801880e:	b29b      	uxth	r3, r3
 8018810:	3b01      	subs	r3, #1
 8018812:	b29a      	uxth	r2, r3
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8018818:	e02b      	b.n	8018872 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	689b      	ldr	r3, [r3, #8]
 8018820:	f003 0302 	and.w	r3, r3, #2
 8018824:	2b02      	cmp	r3, #2
 8018826:	d112      	bne.n	801884e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801882c:	881a      	ldrh	r2, [r3, #0]
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018838:	1c9a      	adds	r2, r3, #2
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018842:	b29b      	uxth	r3, r3
 8018844:	3b01      	subs	r3, #1
 8018846:	b29a      	uxth	r2, r3
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801884c:	e011      	b.n	8018872 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801884e:	f7fa fe61 	bl	8013514 <HAL_GetTick>
 8018852:	4602      	mov	r2, r0
 8018854:	69bb      	ldr	r3, [r7, #24]
 8018856:	1ad3      	subs	r3, r2, r3
 8018858:	683a      	ldr	r2, [r7, #0]
 801885a:	429a      	cmp	r2, r3
 801885c:	d803      	bhi.n	8018866 <HAL_SPI_Transmit+0x16c>
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018864:	d102      	bne.n	801886c <HAL_SPI_Transmit+0x172>
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d102      	bne.n	8018872 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801886c:	2303      	movs	r3, #3
 801886e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8018870:	e0a4      	b.n	80189bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018876:	b29b      	uxth	r3, r3
 8018878:	2b00      	cmp	r3, #0
 801887a:	d1ce      	bne.n	801881a <HAL_SPI_Transmit+0x120>
 801887c:	e07c      	b.n	8018978 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	685b      	ldr	r3, [r3, #4]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d002      	beq.n	801888c <HAL_SPI_Transmit+0x192>
 8018886:	8afb      	ldrh	r3, [r7, #22]
 8018888:	2b01      	cmp	r3, #1
 801888a:	d170      	bne.n	801896e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018890:	b29b      	uxth	r3, r3
 8018892:	2b01      	cmp	r3, #1
 8018894:	d912      	bls.n	80188bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801889a:	881a      	ldrh	r2, [r3, #0]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188a6:	1c9a      	adds	r2, r3, #2
 80188a8:	68fb      	ldr	r3, [r7, #12]
 80188aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	3b02      	subs	r3, #2
 80188b4:	b29a      	uxth	r2, r3
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80188ba:	e058      	b.n	801896e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	330c      	adds	r3, #12
 80188c6:	7812      	ldrb	r2, [r2, #0]
 80188c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188ce:	1c5a      	adds	r2, r3, #1
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80188d8:	b29b      	uxth	r3, r3
 80188da:	3b01      	subs	r3, #1
 80188dc:	b29a      	uxth	r2, r3
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80188e2:	e044      	b.n	801896e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	689b      	ldr	r3, [r3, #8]
 80188ea:	f003 0302 	and.w	r3, r3, #2
 80188ee:	2b02      	cmp	r3, #2
 80188f0:	d12b      	bne.n	801894a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	2b01      	cmp	r3, #1
 80188fa:	d912      	bls.n	8018922 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018900:	881a      	ldrh	r2, [r3, #0]
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801890c:	1c9a      	adds	r2, r3, #2
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018916:	b29b      	uxth	r3, r3
 8018918:	3b02      	subs	r3, #2
 801891a:	b29a      	uxth	r2, r3
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018920:	e025      	b.n	801896e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	330c      	adds	r3, #12
 801892c:	7812      	ldrb	r2, [r2, #0]
 801892e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018934:	1c5a      	adds	r2, r3, #1
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801893e:	b29b      	uxth	r3, r3
 8018940:	3b01      	subs	r3, #1
 8018942:	b29a      	uxth	r2, r3
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018948:	e011      	b.n	801896e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801894a:	f7fa fde3 	bl	8013514 <HAL_GetTick>
 801894e:	4602      	mov	r2, r0
 8018950:	69bb      	ldr	r3, [r7, #24]
 8018952:	1ad3      	subs	r3, r2, r3
 8018954:	683a      	ldr	r2, [r7, #0]
 8018956:	429a      	cmp	r2, r3
 8018958:	d803      	bhi.n	8018962 <HAL_SPI_Transmit+0x268>
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018960:	d102      	bne.n	8018968 <HAL_SPI_Transmit+0x26e>
 8018962:	683b      	ldr	r3, [r7, #0]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d102      	bne.n	801896e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8018968:	2303      	movs	r3, #3
 801896a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801896c:	e026      	b.n	80189bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018972:	b29b      	uxth	r3, r3
 8018974:	2b00      	cmp	r3, #0
 8018976:	d1b5      	bne.n	80188e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018978:	69ba      	ldr	r2, [r7, #24]
 801897a:	6839      	ldr	r1, [r7, #0]
 801897c:	68f8      	ldr	r0, [r7, #12]
 801897e:	f000 fce3 	bl	8019348 <SPI_EndRxTxTransaction>
 8018982:	4603      	mov	r3, r0
 8018984:	2b00      	cmp	r3, #0
 8018986:	d002      	beq.n	801898e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	2220      	movs	r2, #32
 801898c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	689b      	ldr	r3, [r3, #8]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d10a      	bne.n	80189ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8018996:	2300      	movs	r3, #0
 8018998:	613b      	str	r3, [r7, #16]
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	68db      	ldr	r3, [r3, #12]
 80189a0:	613b      	str	r3, [r7, #16]
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	689b      	ldr	r3, [r3, #8]
 80189a8:	613b      	str	r3, [r7, #16]
 80189aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d002      	beq.n	80189ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80189b4:	2301      	movs	r3, #1
 80189b6:	77fb      	strb	r3, [r7, #31]
 80189b8:	e000      	b.n	80189bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80189ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	2201      	movs	r2, #1
 80189c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	2200      	movs	r2, #0
 80189c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80189cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80189ce:	4618      	mov	r0, r3
 80189d0:	3720      	adds	r7, #32
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}

080189d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80189d6:	b580      	push	{r7, lr}
 80189d8:	b088      	sub	sp, #32
 80189da:	af02      	add	r7, sp, #8
 80189dc:	60f8      	str	r0, [r7, #12]
 80189de:	60b9      	str	r1, [r7, #8]
 80189e0:	603b      	str	r3, [r7, #0]
 80189e2:	4613      	mov	r3, r2
 80189e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80189e6:	2300      	movs	r3, #0
 80189e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	685b      	ldr	r3, [r3, #4]
 80189ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80189f2:	d112      	bne.n	8018a1a <HAL_SPI_Receive+0x44>
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	689b      	ldr	r3, [r3, #8]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d10e      	bne.n	8018a1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	2204      	movs	r2, #4
 8018a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8018a04:	88fa      	ldrh	r2, [r7, #6]
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	9300      	str	r3, [sp, #0]
 8018a0a:	4613      	mov	r3, r2
 8018a0c:	68ba      	ldr	r2, [r7, #8]
 8018a0e:	68b9      	ldr	r1, [r7, #8]
 8018a10:	68f8      	ldr	r0, [r7, #12]
 8018a12:	f000 f910 	bl	8018c36 <HAL_SPI_TransmitReceive>
 8018a16:	4603      	mov	r3, r0
 8018a18:	e109      	b.n	8018c2e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018a20:	2b01      	cmp	r3, #1
 8018a22:	d101      	bne.n	8018a28 <HAL_SPI_Receive+0x52>
 8018a24:	2302      	movs	r3, #2
 8018a26:	e102      	b.n	8018c2e <HAL_SPI_Receive+0x258>
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	2201      	movs	r2, #1
 8018a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018a30:	f7fa fd70 	bl	8013514 <HAL_GetTick>
 8018a34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	d002      	beq.n	8018a48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8018a42:	2302      	movs	r3, #2
 8018a44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8018a46:	e0e9      	b.n	8018c1c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d002      	beq.n	8018a54 <HAL_SPI_Receive+0x7e>
 8018a4e:	88fb      	ldrh	r3, [r7, #6]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d102      	bne.n	8018a5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8018a54:	2301      	movs	r3, #1
 8018a56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8018a58:	e0e0      	b.n	8018c1c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	2204      	movs	r2, #4
 8018a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	2200      	movs	r2, #0
 8018a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	68ba      	ldr	r2, [r7, #8]
 8018a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	88fa      	ldrh	r2, [r7, #6]
 8018a72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	88fa      	ldrh	r2, [r7, #6]
 8018a7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	2200      	movs	r2, #0
 8018a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	2200      	movs	r2, #0
 8018a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	2200      	movs	r2, #0
 8018a94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	2200      	movs	r2, #0
 8018a9a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	68db      	ldr	r3, [r3, #12]
 8018aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018aa4:	d908      	bls.n	8018ab8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	685a      	ldr	r2, [r3, #4]
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018ab4:	605a      	str	r2, [r3, #4]
 8018ab6:	e007      	b.n	8018ac8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	685a      	ldr	r2, [r3, #4]
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018ac6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	689b      	ldr	r3, [r3, #8]
 8018acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018ad0:	d10f      	bne.n	8018af2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	681a      	ldr	r2, [r3, #0]
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018ae0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	681a      	ldr	r2, [r3, #0]
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8018af0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018afc:	2b40      	cmp	r3, #64	; 0x40
 8018afe:	d007      	beq.n	8018b10 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	681a      	ldr	r2, [r3, #0]
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018b0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018b18:	d867      	bhi.n	8018bea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8018b1a:	e030      	b.n	8018b7e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	689b      	ldr	r3, [r3, #8]
 8018b22:	f003 0301 	and.w	r3, r3, #1
 8018b26:	2b01      	cmp	r3, #1
 8018b28:	d117      	bne.n	8018b5a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f103 020c 	add.w	r2, r3, #12
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b36:	7812      	ldrb	r2, [r2, #0]
 8018b38:	b2d2      	uxtb	r2, r2
 8018b3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b40:	1c5a      	adds	r2, r3, #1
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018b4c:	b29b      	uxth	r3, r3
 8018b4e:	3b01      	subs	r3, #1
 8018b50:	b29a      	uxth	r2, r3
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8018b58:	e011      	b.n	8018b7e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018b5a:	f7fa fcdb 	bl	8013514 <HAL_GetTick>
 8018b5e:	4602      	mov	r2, r0
 8018b60:	693b      	ldr	r3, [r7, #16]
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	683a      	ldr	r2, [r7, #0]
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d803      	bhi.n	8018b72 <HAL_SPI_Receive+0x19c>
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b70:	d102      	bne.n	8018b78 <HAL_SPI_Receive+0x1a2>
 8018b72:	683b      	ldr	r3, [r7, #0]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d102      	bne.n	8018b7e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8018b78:	2303      	movs	r3, #3
 8018b7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8018b7c:	e04e      	b.n	8018c1c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018b84:	b29b      	uxth	r3, r3
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d1c8      	bne.n	8018b1c <HAL_SPI_Receive+0x146>
 8018b8a:	e034      	b.n	8018bf6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	689b      	ldr	r3, [r3, #8]
 8018b92:	f003 0301 	and.w	r3, r3, #1
 8018b96:	2b01      	cmp	r3, #1
 8018b98:	d115      	bne.n	8018bc6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	68da      	ldr	r2, [r3, #12]
 8018ba0:	68fb      	ldr	r3, [r7, #12]
 8018ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ba4:	b292      	uxth	r2, r2
 8018ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bac:	1c9a      	adds	r2, r3, #2
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018bb8:	b29b      	uxth	r3, r3
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	b29a      	uxth	r2, r3
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8018bc4:	e011      	b.n	8018bea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8018bc6:	f7fa fca5 	bl	8013514 <HAL_GetTick>
 8018bca:	4602      	mov	r2, r0
 8018bcc:	693b      	ldr	r3, [r7, #16]
 8018bce:	1ad3      	subs	r3, r2, r3
 8018bd0:	683a      	ldr	r2, [r7, #0]
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d803      	bhi.n	8018bde <HAL_SPI_Receive+0x208>
 8018bd6:	683b      	ldr	r3, [r7, #0]
 8018bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bdc:	d102      	bne.n	8018be4 <HAL_SPI_Receive+0x20e>
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d102      	bne.n	8018bea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8018be4:	2303      	movs	r3, #3
 8018be6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8018be8:	e018      	b.n	8018c1c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018bf0:	b29b      	uxth	r3, r3
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d1ca      	bne.n	8018b8c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8018bf6:	693a      	ldr	r2, [r7, #16]
 8018bf8:	6839      	ldr	r1, [r7, #0]
 8018bfa:	68f8      	ldr	r0, [r7, #12]
 8018bfc:	f000 fb4c 	bl	8019298 <SPI_EndRxTransaction>
 8018c00:	4603      	mov	r3, r0
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d002      	beq.n	8018c0c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2220      	movs	r2, #32
 8018c0a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d002      	beq.n	8018c1a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8018c14:	2301      	movs	r3, #1
 8018c16:	75fb      	strb	r3, [r7, #23]
 8018c18:	e000      	b.n	8018c1c <HAL_SPI_Receive+0x246>
  }

error :
 8018c1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	2201      	movs	r2, #1
 8018c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	2200      	movs	r2, #0
 8018c28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8018c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c2e:	4618      	mov	r0, r3
 8018c30:	3718      	adds	r7, #24
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bd80      	pop	{r7, pc}

08018c36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8018c36:	b580      	push	{r7, lr}
 8018c38:	b08a      	sub	sp, #40	; 0x28
 8018c3a:	af00      	add	r7, sp, #0
 8018c3c:	60f8      	str	r0, [r7, #12]
 8018c3e:	60b9      	str	r1, [r7, #8]
 8018c40:	607a      	str	r2, [r7, #4]
 8018c42:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8018c44:	2301      	movs	r3, #1
 8018c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8018c54:	2b01      	cmp	r3, #1
 8018c56:	d101      	bne.n	8018c5c <HAL_SPI_TransmitReceive+0x26>
 8018c58:	2302      	movs	r3, #2
 8018c5a:	e1fb      	b.n	8019054 <HAL_SPI_TransmitReceive+0x41e>
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	2201      	movs	r2, #1
 8018c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8018c64:	f7fa fc56 	bl	8013514 <HAL_GetTick>
 8018c68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018c70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8018c78:	887b      	ldrh	r3, [r7, #2]
 8018c7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8018c7c:	887b      	ldrh	r3, [r7, #2]
 8018c7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8018c80:	7efb      	ldrb	r3, [r7, #27]
 8018c82:	2b01      	cmp	r3, #1
 8018c84:	d00e      	beq.n	8018ca4 <HAL_SPI_TransmitReceive+0x6e>
 8018c86:	697b      	ldr	r3, [r7, #20]
 8018c88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8018c8c:	d106      	bne.n	8018c9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	689b      	ldr	r3, [r3, #8]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d102      	bne.n	8018c9c <HAL_SPI_TransmitReceive+0x66>
 8018c96:	7efb      	ldrb	r3, [r7, #27]
 8018c98:	2b04      	cmp	r3, #4
 8018c9a:	d003      	beq.n	8018ca4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8018c9c:	2302      	movs	r3, #2
 8018c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8018ca2:	e1cd      	b.n	8019040 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d005      	beq.n	8018cb6 <HAL_SPI_TransmitReceive+0x80>
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d002      	beq.n	8018cb6 <HAL_SPI_TransmitReceive+0x80>
 8018cb0:	887b      	ldrh	r3, [r7, #2]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d103      	bne.n	8018cbe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8018cb6:	2301      	movs	r3, #1
 8018cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8018cbc:	e1c0      	b.n	8019040 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	2b04      	cmp	r3, #4
 8018cc8:	d003      	beq.n	8018cd2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	2205      	movs	r2, #5
 8018cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	687a      	ldr	r2, [r7, #4]
 8018cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	887a      	ldrh	r2, [r7, #2]
 8018ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	887a      	ldrh	r2, [r7, #2]
 8018cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	68ba      	ldr	r2, [r7, #8]
 8018cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	887a      	ldrh	r2, [r7, #2]
 8018cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	887a      	ldrh	r2, [r7, #2]
 8018cfe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2200      	movs	r2, #0
 8018d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	2200      	movs	r2, #0
 8018d0a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	68db      	ldr	r3, [r3, #12]
 8018d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018d14:	d802      	bhi.n	8018d1c <HAL_SPI_TransmitReceive+0xe6>
 8018d16:	8a3b      	ldrh	r3, [r7, #16]
 8018d18:	2b01      	cmp	r3, #1
 8018d1a:	d908      	bls.n	8018d2e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	685a      	ldr	r2, [r3, #4]
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018d2a:	605a      	str	r2, [r3, #4]
 8018d2c:	e007      	b.n	8018d3e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	685a      	ldr	r2, [r3, #4]
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018d3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018d48:	2b40      	cmp	r3, #64	; 0x40
 8018d4a:	d007      	beq.n	8018d5c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	681a      	ldr	r2, [r3, #0]
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8018d64:	d97c      	bls.n	8018e60 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	685b      	ldr	r3, [r3, #4]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d002      	beq.n	8018d74 <HAL_SPI_TransmitReceive+0x13e>
 8018d6e:	8a7b      	ldrh	r3, [r7, #18]
 8018d70:	2b01      	cmp	r3, #1
 8018d72:	d169      	bne.n	8018e48 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d78:	881a      	ldrh	r2, [r3, #0]
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d84:	1c9a      	adds	r2, r3, #2
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018d8e:	b29b      	uxth	r3, r3
 8018d90:	3b01      	subs	r3, #1
 8018d92:	b29a      	uxth	r2, r3
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018d98:	e056      	b.n	8018e48 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	689b      	ldr	r3, [r3, #8]
 8018da0:	f003 0302 	and.w	r3, r3, #2
 8018da4:	2b02      	cmp	r3, #2
 8018da6:	d11b      	bne.n	8018de0 <HAL_SPI_TransmitReceive+0x1aa>
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d016      	beq.n	8018de0 <HAL_SPI_TransmitReceive+0x1aa>
 8018db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018db4:	2b01      	cmp	r3, #1
 8018db6:	d113      	bne.n	8018de0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018db8:	68fb      	ldr	r3, [r7, #12]
 8018dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dbc:	881a      	ldrh	r2, [r3, #0]
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dc8:	1c9a      	adds	r2, r3, #2
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018dd2:	b29b      	uxth	r3, r3
 8018dd4:	3b01      	subs	r3, #1
 8018dd6:	b29a      	uxth	r2, r3
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	689b      	ldr	r3, [r3, #8]
 8018de6:	f003 0301 	and.w	r3, r3, #1
 8018dea:	2b01      	cmp	r3, #1
 8018dec:	d11c      	bne.n	8018e28 <HAL_SPI_TransmitReceive+0x1f2>
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018df4:	b29b      	uxth	r3, r3
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d016      	beq.n	8018e28 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	68da      	ldr	r2, [r3, #12]
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e04:	b292      	uxth	r2, r2
 8018e06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e0c:	1c9a      	adds	r2, r3, #2
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	3b01      	subs	r3, #1
 8018e1c:	b29a      	uxth	r2, r3
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018e24:	2301      	movs	r3, #1
 8018e26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8018e28:	f7fa fb74 	bl	8013514 <HAL_GetTick>
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	69fb      	ldr	r3, [r7, #28]
 8018e30:	1ad3      	subs	r3, r2, r3
 8018e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e34:	429a      	cmp	r2, r3
 8018e36:	d807      	bhi.n	8018e48 <HAL_SPI_TransmitReceive+0x212>
 8018e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e3e:	d003      	beq.n	8018e48 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8018e40:	2303      	movs	r3, #3
 8018e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8018e46:	e0fb      	b.n	8019040 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018e4c:	b29b      	uxth	r3, r3
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d1a3      	bne.n	8018d9a <HAL_SPI_TransmitReceive+0x164>
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d19d      	bne.n	8018d9a <HAL_SPI_TransmitReceive+0x164>
 8018e5e:	e0df      	b.n	8019020 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	685b      	ldr	r3, [r3, #4]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d003      	beq.n	8018e70 <HAL_SPI_TransmitReceive+0x23a>
 8018e68:	8a7b      	ldrh	r3, [r7, #18]
 8018e6a:	2b01      	cmp	r3, #1
 8018e6c:	f040 80cb 	bne.w	8019006 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	2b01      	cmp	r3, #1
 8018e78:	d912      	bls.n	8018ea0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018e7a:	68fb      	ldr	r3, [r7, #12]
 8018e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e7e:	881a      	ldrh	r2, [r3, #0]
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e8a:	1c9a      	adds	r2, r3, #2
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	3b02      	subs	r3, #2
 8018e98:	b29a      	uxth	r2, r3
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018e9e:	e0b2      	b.n	8019006 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	330c      	adds	r3, #12
 8018eaa:	7812      	ldrb	r2, [r2, #0]
 8018eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8018eae:	68fb      	ldr	r3, [r7, #12]
 8018eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eb2:	1c5a      	adds	r2, r3, #1
 8018eb4:	68fb      	ldr	r3, [r7, #12]
 8018eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018ebc:	b29b      	uxth	r3, r3
 8018ebe:	3b01      	subs	r3, #1
 8018ec0:	b29a      	uxth	r2, r3
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8018ec6:	e09e      	b.n	8019006 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8018ec8:	68fb      	ldr	r3, [r7, #12]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	689b      	ldr	r3, [r3, #8]
 8018ece:	f003 0302 	and.w	r3, r3, #2
 8018ed2:	2b02      	cmp	r3, #2
 8018ed4:	d134      	bne.n	8018f40 <HAL_SPI_TransmitReceive+0x30a>
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d02f      	beq.n	8018f40 <HAL_SPI_TransmitReceive+0x30a>
 8018ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee2:	2b01      	cmp	r3, #1
 8018ee4:	d12c      	bne.n	8018f40 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018eea:	b29b      	uxth	r3, r3
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d912      	bls.n	8018f16 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ef4:	881a      	ldrh	r2, [r3, #0]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f00:	1c9a      	adds	r2, r3, #2
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f0a:	b29b      	uxth	r3, r3
 8018f0c:	3b02      	subs	r3, #2
 8018f0e:	b29a      	uxth	r2, r3
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8018f14:	e012      	b.n	8018f3c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	330c      	adds	r3, #12
 8018f20:	7812      	ldrb	r2, [r2, #0]
 8018f22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f28:	1c5a      	adds	r2, r3, #1
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8018f32:	b29b      	uxth	r3, r3
 8018f34:	3b01      	subs	r3, #1
 8018f36:	b29a      	uxth	r2, r3
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	689b      	ldr	r3, [r3, #8]
 8018f46:	f003 0301 	and.w	r3, r3, #1
 8018f4a:	2b01      	cmp	r3, #1
 8018f4c:	d148      	bne.n	8018fe0 <HAL_SPI_TransmitReceive+0x3aa>
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018f54:	b29b      	uxth	r3, r3
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d042      	beq.n	8018fe0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018f60:	b29b      	uxth	r3, r3
 8018f62:	2b01      	cmp	r3, #1
 8018f64:	d923      	bls.n	8018fae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	68da      	ldr	r2, [r3, #12]
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f70:	b292      	uxth	r2, r2
 8018f72:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f78:	1c9a      	adds	r2, r3, #2
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018f84:	b29b      	uxth	r3, r3
 8018f86:	3b02      	subs	r3, #2
 8018f88:	b29a      	uxth	r2, r3
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018f96:	b29b      	uxth	r3, r3
 8018f98:	2b01      	cmp	r3, #1
 8018f9a:	d81f      	bhi.n	8018fdc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	685a      	ldr	r2, [r3, #4]
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8018faa:	605a      	str	r2, [r3, #4]
 8018fac:	e016      	b.n	8018fdc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	f103 020c 	add.w	r2, r3, #12
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fba:	7812      	ldrb	r2, [r2, #0]
 8018fbc:	b2d2      	uxtb	r2, r2
 8018fbe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fc4:	1c5a      	adds	r2, r3, #1
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8018fd0:	b29b      	uxth	r3, r3
 8018fd2:	3b01      	subs	r3, #1
 8018fd4:	b29a      	uxth	r2, r3
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8018fdc:	2301      	movs	r3, #1
 8018fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8018fe0:	f7fa fa98 	bl	8013514 <HAL_GetTick>
 8018fe4:	4602      	mov	r2, r0
 8018fe6:	69fb      	ldr	r3, [r7, #28]
 8018fe8:	1ad3      	subs	r3, r2, r3
 8018fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d803      	bhi.n	8018ff8 <HAL_SPI_TransmitReceive+0x3c2>
 8018ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ff6:	d102      	bne.n	8018ffe <HAL_SPI_TransmitReceive+0x3c8>
 8018ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d103      	bne.n	8019006 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8018ffe:	2303      	movs	r3, #3
 8019000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8019004:	e01c      	b.n	8019040 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801900a:	b29b      	uxth	r3, r3
 801900c:	2b00      	cmp	r3, #0
 801900e:	f47f af5b 	bne.w	8018ec8 <HAL_SPI_TransmitReceive+0x292>
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8019018:	b29b      	uxth	r3, r3
 801901a:	2b00      	cmp	r3, #0
 801901c:	f47f af54 	bne.w	8018ec8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019020:	69fa      	ldr	r2, [r7, #28]
 8019022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019024:	68f8      	ldr	r0, [r7, #12]
 8019026:	f000 f98f 	bl	8019348 <SPI_EndRxTxTransaction>
 801902a:	4603      	mov	r3, r0
 801902c:	2b00      	cmp	r3, #0
 801902e:	d006      	beq.n	801903e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8019030:	2301      	movs	r3, #1
 8019032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	2220      	movs	r2, #32
 801903a:	661a      	str	r2, [r3, #96]	; 0x60
 801903c:	e000      	b.n	8019040 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801903e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	2201      	movs	r2, #1
 8019044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	2200      	movs	r2, #0
 801904c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8019050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8019054:	4618      	mov	r0, r3
 8019056:	3728      	adds	r7, #40	; 0x28
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b088      	sub	sp, #32
 8019060:	af00      	add	r7, sp, #0
 8019062:	60f8      	str	r0, [r7, #12]
 8019064:	60b9      	str	r1, [r7, #8]
 8019066:	603b      	str	r3, [r7, #0]
 8019068:	4613      	mov	r3, r2
 801906a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801906c:	f7fa fa52 	bl	8013514 <HAL_GetTick>
 8019070:	4602      	mov	r2, r0
 8019072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019074:	1a9b      	subs	r3, r3, r2
 8019076:	683a      	ldr	r2, [r7, #0]
 8019078:	4413      	add	r3, r2
 801907a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801907c:	f7fa fa4a 	bl	8013514 <HAL_GetTick>
 8019080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8019082:	4b39      	ldr	r3, [pc, #228]	; (8019168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	015b      	lsls	r3, r3, #5
 8019088:	0d1b      	lsrs	r3, r3, #20
 801908a:	69fa      	ldr	r2, [r7, #28]
 801908c:	fb02 f303 	mul.w	r3, r2, r3
 8019090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019092:	e054      	b.n	801913e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801909a:	d050      	beq.n	801913e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801909c:	f7fa fa3a 	bl	8013514 <HAL_GetTick>
 80190a0:	4602      	mov	r2, r0
 80190a2:	69bb      	ldr	r3, [r7, #24]
 80190a4:	1ad3      	subs	r3, r2, r3
 80190a6:	69fa      	ldr	r2, [r7, #28]
 80190a8:	429a      	cmp	r2, r3
 80190aa:	d902      	bls.n	80190b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80190ac:	69fb      	ldr	r3, [r7, #28]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d13d      	bne.n	801912e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	685a      	ldr	r2, [r3, #4]
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80190c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	685b      	ldr	r3, [r3, #4]
 80190c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80190ca:	d111      	bne.n	80190f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	689b      	ldr	r3, [r3, #8]
 80190d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80190d4:	d004      	beq.n	80190e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	689b      	ldr	r3, [r3, #8]
 80190da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80190de:	d107      	bne.n	80190f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	681a      	ldr	r2, [r3, #0]
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80190ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80190f8:	d10f      	bne.n	801911a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019108:	601a      	str	r2, [r3, #0]
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	681a      	ldr	r2, [r3, #0]
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	2201      	movs	r2, #1
 801911e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	2200      	movs	r2, #0
 8019126:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801912a:	2303      	movs	r3, #3
 801912c:	e017      	b.n	801915e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801912e:	697b      	ldr	r3, [r7, #20]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d101      	bne.n	8019138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8019134:	2300      	movs	r3, #0
 8019136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	3b01      	subs	r3, #1
 801913c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	689a      	ldr	r2, [r3, #8]
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	4013      	ands	r3, r2
 8019148:	68ba      	ldr	r2, [r7, #8]
 801914a:	429a      	cmp	r2, r3
 801914c:	bf0c      	ite	eq
 801914e:	2301      	moveq	r3, #1
 8019150:	2300      	movne	r3, #0
 8019152:	b2db      	uxtb	r3, r3
 8019154:	461a      	mov	r2, r3
 8019156:	79fb      	ldrb	r3, [r7, #7]
 8019158:	429a      	cmp	r2, r3
 801915a:	d19b      	bne.n	8019094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801915c:	2300      	movs	r3, #0
}
 801915e:	4618      	mov	r0, r3
 8019160:	3720      	adds	r7, #32
 8019162:	46bd      	mov	sp, r7
 8019164:	bd80      	pop	{r7, pc}
 8019166:	bf00      	nop
 8019168:	20000090 	.word	0x20000090

0801916c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b08a      	sub	sp, #40	; 0x28
 8019170:	af00      	add	r7, sp, #0
 8019172:	60f8      	str	r0, [r7, #12]
 8019174:	60b9      	str	r1, [r7, #8]
 8019176:	607a      	str	r2, [r7, #4]
 8019178:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801917a:	2300      	movs	r3, #0
 801917c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801917e:	f7fa f9c9 	bl	8013514 <HAL_GetTick>
 8019182:	4602      	mov	r2, r0
 8019184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019186:	1a9b      	subs	r3, r3, r2
 8019188:	683a      	ldr	r2, [r7, #0]
 801918a:	4413      	add	r3, r2
 801918c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801918e:	f7fa f9c1 	bl	8013514 <HAL_GetTick>
 8019192:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	330c      	adds	r3, #12
 801919a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801919c:	4b3d      	ldr	r3, [pc, #244]	; (8019294 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801919e:	681a      	ldr	r2, [r3, #0]
 80191a0:	4613      	mov	r3, r2
 80191a2:	009b      	lsls	r3, r3, #2
 80191a4:	4413      	add	r3, r2
 80191a6:	00da      	lsls	r2, r3, #3
 80191a8:	1ad3      	subs	r3, r2, r3
 80191aa:	0d1b      	lsrs	r3, r3, #20
 80191ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191ae:	fb02 f303 	mul.w	r3, r2, r3
 80191b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80191b4:	e060      	b.n	8019278 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80191b6:	68bb      	ldr	r3, [r7, #8]
 80191b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80191bc:	d107      	bne.n	80191ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d104      	bne.n	80191ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80191c4:	69fb      	ldr	r3, [r7, #28]
 80191c6:	781b      	ldrb	r3, [r3, #0]
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80191cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191d4:	d050      	beq.n	8019278 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80191d6:	f7fa f99d 	bl	8013514 <HAL_GetTick>
 80191da:	4602      	mov	r2, r0
 80191dc:	6a3b      	ldr	r3, [r7, #32]
 80191de:	1ad3      	subs	r3, r2, r3
 80191e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d902      	bls.n	80191ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80191e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d13d      	bne.n	8019268 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	685a      	ldr	r2, [r3, #4]
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80191fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019204:	d111      	bne.n	801922a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	689b      	ldr	r3, [r3, #8]
 801920a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801920e:	d004      	beq.n	801921a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	689b      	ldr	r3, [r3, #8]
 8019214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019218:	d107      	bne.n	801922a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019228:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801922e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019232:	d10f      	bne.n	8019254 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	681a      	ldr	r2, [r3, #0]
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019242:	601a      	str	r2, [r3, #0]
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	681a      	ldr	r2, [r3, #0]
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019252:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	2201      	movs	r2, #1
 8019258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	2200      	movs	r2, #0
 8019260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8019264:	2303      	movs	r3, #3
 8019266:	e010      	b.n	801928a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8019268:	69bb      	ldr	r3, [r7, #24]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d101      	bne.n	8019272 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801926e:	2300      	movs	r3, #0
 8019270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8019272:	69bb      	ldr	r3, [r7, #24]
 8019274:	3b01      	subs	r3, #1
 8019276:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	689a      	ldr	r2, [r3, #8]
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	4013      	ands	r3, r2
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	429a      	cmp	r2, r3
 8019286:	d196      	bne.n	80191b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8019288:	2300      	movs	r3, #0
}
 801928a:	4618      	mov	r0, r3
 801928c:	3728      	adds	r7, #40	; 0x28
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
 8019292:	bf00      	nop
 8019294:	20000090 	.word	0x20000090

08019298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b086      	sub	sp, #24
 801929c:	af02      	add	r7, sp, #8
 801929e:	60f8      	str	r0, [r7, #12]
 80192a0:	60b9      	str	r1, [r7, #8]
 80192a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80192ac:	d111      	bne.n	80192d2 <SPI_EndRxTransaction+0x3a>
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	689b      	ldr	r3, [r3, #8]
 80192b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80192b6:	d004      	beq.n	80192c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	689b      	ldr	r3, [r3, #8]
 80192bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80192c0:	d107      	bne.n	80192d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80192d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	9300      	str	r3, [sp, #0]
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	2200      	movs	r2, #0
 80192da:	2180      	movs	r1, #128	; 0x80
 80192dc:	68f8      	ldr	r0, [r7, #12]
 80192de:	f7ff febd 	bl	801905c <SPI_WaitFlagStateUntilTimeout>
 80192e2:	4603      	mov	r3, r0
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d007      	beq.n	80192f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80192ec:	f043 0220 	orr.w	r2, r3, #32
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80192f4:	2303      	movs	r3, #3
 80192f6:	e023      	b.n	8019340 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	685b      	ldr	r3, [r3, #4]
 80192fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019300:	d11d      	bne.n	801933e <SPI_EndRxTransaction+0xa6>
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	689b      	ldr	r3, [r3, #8]
 8019306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801930a:	d004      	beq.n	8019316 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	689b      	ldr	r3, [r3, #8]
 8019310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019314:	d113      	bne.n	801933e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	9300      	str	r3, [sp, #0]
 801931a:	68bb      	ldr	r3, [r7, #8]
 801931c:	2200      	movs	r2, #0
 801931e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8019322:	68f8      	ldr	r0, [r7, #12]
 8019324:	f7ff ff22 	bl	801916c <SPI_WaitFifoStateUntilTimeout>
 8019328:	4603      	mov	r3, r0
 801932a:	2b00      	cmp	r3, #0
 801932c:	d007      	beq.n	801933e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019332:	f043 0220 	orr.w	r2, r3, #32
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801933a:	2303      	movs	r3, #3
 801933c:	e000      	b.n	8019340 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801933e:	2300      	movs	r3, #0
}
 8019340:	4618      	mov	r0, r3
 8019342:	3710      	adds	r7, #16
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b086      	sub	sp, #24
 801934c:	af02      	add	r7, sp, #8
 801934e:	60f8      	str	r0, [r7, #12]
 8019350:	60b9      	str	r1, [r7, #8]
 8019352:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	68bb      	ldr	r3, [r7, #8]
 801935a:	2200      	movs	r2, #0
 801935c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8019360:	68f8      	ldr	r0, [r7, #12]
 8019362:	f7ff ff03 	bl	801916c <SPI_WaitFifoStateUntilTimeout>
 8019366:	4603      	mov	r3, r0
 8019368:	2b00      	cmp	r3, #0
 801936a:	d007      	beq.n	801937c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019370:	f043 0220 	orr.w	r2, r3, #32
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8019378:	2303      	movs	r3, #3
 801937a:	e027      	b.n	80193cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	9300      	str	r3, [sp, #0]
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	2200      	movs	r2, #0
 8019384:	2180      	movs	r1, #128	; 0x80
 8019386:	68f8      	ldr	r0, [r7, #12]
 8019388:	f7ff fe68 	bl	801905c <SPI_WaitFlagStateUntilTimeout>
 801938c:	4603      	mov	r3, r0
 801938e:	2b00      	cmp	r3, #0
 8019390:	d007      	beq.n	80193a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019396:	f043 0220 	orr.w	r2, r3, #32
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801939e:	2303      	movs	r3, #3
 80193a0:	e014      	b.n	80193cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	9300      	str	r3, [sp, #0]
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	2200      	movs	r2, #0
 80193aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80193ae:	68f8      	ldr	r0, [r7, #12]
 80193b0:	f7ff fedc 	bl	801916c <SPI_WaitFifoStateUntilTimeout>
 80193b4:	4603      	mov	r3, r0
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d007      	beq.n	80193ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80193ba:	68fb      	ldr	r3, [r7, #12]
 80193bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193be:	f043 0220 	orr.w	r2, r3, #32
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80193c6:	2303      	movs	r3, #3
 80193c8:	e000      	b.n	80193cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80193ca:	2300      	movs	r3, #0
}
 80193cc:	4618      	mov	r0, r3
 80193ce:	3710      	adds	r7, #16
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}

080193d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b082      	sub	sp, #8
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d101      	bne.n	80193e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80193e2:	2301      	movs	r3, #1
 80193e4:	e049      	b.n	801947a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80193ec:	b2db      	uxtb	r3, r3
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d106      	bne.n	8019400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	2200      	movs	r2, #0
 80193f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80193fa:	6878      	ldr	r0, [r7, #4]
 80193fc:	f7f9 fc1c 	bl	8012c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	2202      	movs	r2, #2
 8019404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681a      	ldr	r2, [r3, #0]
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	3304      	adds	r3, #4
 8019410:	4619      	mov	r1, r3
 8019412:	4610      	mov	r0, r2
 8019414:	f001 f948 	bl	801a6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	2201      	movs	r2, #1
 801941c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	2201      	movs	r2, #1
 8019424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	2201      	movs	r2, #1
 801942c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2201      	movs	r2, #1
 8019434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2201      	movs	r2, #1
 801943c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2201      	movs	r2, #1
 8019444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2201      	movs	r2, #1
 801944c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2201      	movs	r2, #1
 8019454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	2201      	movs	r2, #1
 801945c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2201      	movs	r2, #1
 8019464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2201      	movs	r2, #1
 801946c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	2201      	movs	r2, #1
 8019474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019478:	2300      	movs	r3, #0
}
 801947a:	4618      	mov	r0, r3
 801947c:	3708      	adds	r7, #8
 801947e:	46bd      	mov	sp, r7
 8019480:	bd80      	pop	{r7, pc}
	...

08019484 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8019484:	b480      	push	{r7}
 8019486:	b085      	sub	sp, #20
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801948c:	687b      	ldr	r3, [r7, #4]
 801948e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019492:	b2db      	uxtb	r3, r3
 8019494:	2b01      	cmp	r3, #1
 8019496:	d001      	beq.n	801949c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8019498:	2301      	movs	r3, #1
 801949a:	e047      	b.n	801952c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	2202      	movs	r2, #2
 80194a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	4a23      	ldr	r2, [pc, #140]	; (8019538 <HAL_TIM_Base_Start+0xb4>)
 80194aa:	4293      	cmp	r3, r2
 80194ac:	d01d      	beq.n	80194ea <HAL_TIM_Base_Start+0x66>
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80194b6:	d018      	beq.n	80194ea <HAL_TIM_Base_Start+0x66>
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	4a1f      	ldr	r2, [pc, #124]	; (801953c <HAL_TIM_Base_Start+0xb8>)
 80194be:	4293      	cmp	r3, r2
 80194c0:	d013      	beq.n	80194ea <HAL_TIM_Base_Start+0x66>
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	4a1e      	ldr	r2, [pc, #120]	; (8019540 <HAL_TIM_Base_Start+0xbc>)
 80194c8:	4293      	cmp	r3, r2
 80194ca:	d00e      	beq.n	80194ea <HAL_TIM_Base_Start+0x66>
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	4a1c      	ldr	r2, [pc, #112]	; (8019544 <HAL_TIM_Base_Start+0xc0>)
 80194d2:	4293      	cmp	r3, r2
 80194d4:	d009      	beq.n	80194ea <HAL_TIM_Base_Start+0x66>
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a1b      	ldr	r2, [pc, #108]	; (8019548 <HAL_TIM_Base_Start+0xc4>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d004      	beq.n	80194ea <HAL_TIM_Base_Start+0x66>
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a19      	ldr	r2, [pc, #100]	; (801954c <HAL_TIM_Base_Start+0xc8>)
 80194e6:	4293      	cmp	r3, r2
 80194e8:	d115      	bne.n	8019516 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	689a      	ldr	r2, [r3, #8]
 80194f0:	4b17      	ldr	r3, [pc, #92]	; (8019550 <HAL_TIM_Base_Start+0xcc>)
 80194f2:	4013      	ands	r3, r2
 80194f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	2b06      	cmp	r3, #6
 80194fa:	d015      	beq.n	8019528 <HAL_TIM_Base_Start+0xa4>
 80194fc:	68fb      	ldr	r3, [r7, #12]
 80194fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019502:	d011      	beq.n	8019528 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	f042 0201 	orr.w	r2, r2, #1
 8019512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019514:	e008      	b.n	8019528 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	681a      	ldr	r2, [r3, #0]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	f042 0201 	orr.w	r2, r2, #1
 8019524:	601a      	str	r2, [r3, #0]
 8019526:	e000      	b.n	801952a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019528:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801952a:	2300      	movs	r3, #0
}
 801952c:	4618      	mov	r0, r3
 801952e:	3714      	adds	r7, #20
 8019530:	46bd      	mov	sp, r7
 8019532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019536:	4770      	bx	lr
 8019538:	40012c00 	.word	0x40012c00
 801953c:	40000400 	.word	0x40000400
 8019540:	40000800 	.word	0x40000800
 8019544:	40000c00 	.word	0x40000c00
 8019548:	40013400 	.word	0x40013400
 801954c:	40014000 	.word	0x40014000
 8019550:	00010007 	.word	0x00010007

08019554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8019554:	b480      	push	{r7}
 8019556:	b085      	sub	sp, #20
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019562:	b2db      	uxtb	r3, r3
 8019564:	2b01      	cmp	r3, #1
 8019566:	d001      	beq.n	801956c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019568:	2301      	movs	r3, #1
 801956a:	e04f      	b.n	801960c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2202      	movs	r2, #2
 8019570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	68da      	ldr	r2, [r3, #12]
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	f042 0201 	orr.w	r2, r2, #1
 8019582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	4a23      	ldr	r2, [pc, #140]	; (8019618 <HAL_TIM_Base_Start_IT+0xc4>)
 801958a:	4293      	cmp	r3, r2
 801958c:	d01d      	beq.n	80195ca <HAL_TIM_Base_Start_IT+0x76>
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019596:	d018      	beq.n	80195ca <HAL_TIM_Base_Start_IT+0x76>
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	4a1f      	ldr	r2, [pc, #124]	; (801961c <HAL_TIM_Base_Start_IT+0xc8>)
 801959e:	4293      	cmp	r3, r2
 80195a0:	d013      	beq.n	80195ca <HAL_TIM_Base_Start_IT+0x76>
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	4a1e      	ldr	r2, [pc, #120]	; (8019620 <HAL_TIM_Base_Start_IT+0xcc>)
 80195a8:	4293      	cmp	r3, r2
 80195aa:	d00e      	beq.n	80195ca <HAL_TIM_Base_Start_IT+0x76>
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	4a1c      	ldr	r2, [pc, #112]	; (8019624 <HAL_TIM_Base_Start_IT+0xd0>)
 80195b2:	4293      	cmp	r3, r2
 80195b4:	d009      	beq.n	80195ca <HAL_TIM_Base_Start_IT+0x76>
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	4a1b      	ldr	r2, [pc, #108]	; (8019628 <HAL_TIM_Base_Start_IT+0xd4>)
 80195bc:	4293      	cmp	r3, r2
 80195be:	d004      	beq.n	80195ca <HAL_TIM_Base_Start_IT+0x76>
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	4a19      	ldr	r2, [pc, #100]	; (801962c <HAL_TIM_Base_Start_IT+0xd8>)
 80195c6:	4293      	cmp	r3, r2
 80195c8:	d115      	bne.n	80195f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	689a      	ldr	r2, [r3, #8]
 80195d0:	4b17      	ldr	r3, [pc, #92]	; (8019630 <HAL_TIM_Base_Start_IT+0xdc>)
 80195d2:	4013      	ands	r3, r2
 80195d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	2b06      	cmp	r3, #6
 80195da:	d015      	beq.n	8019608 <HAL_TIM_Base_Start_IT+0xb4>
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80195e2:	d011      	beq.n	8019608 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	681a      	ldr	r2, [r3, #0]
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	f042 0201 	orr.w	r2, r2, #1
 80195f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80195f4:	e008      	b.n	8019608 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	681a      	ldr	r2, [r3, #0]
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	f042 0201 	orr.w	r2, r2, #1
 8019604:	601a      	str	r2, [r3, #0]
 8019606:	e000      	b.n	801960a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019608:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801960a:	2300      	movs	r3, #0
}
 801960c:	4618      	mov	r0, r3
 801960e:	3714      	adds	r7, #20
 8019610:	46bd      	mov	sp, r7
 8019612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019616:	4770      	bx	lr
 8019618:	40012c00 	.word	0x40012c00
 801961c:	40000400 	.word	0x40000400
 8019620:	40000800 	.word	0x40000800
 8019624:	40000c00 	.word	0x40000c00
 8019628:	40013400 	.word	0x40013400
 801962c:	40014000 	.word	0x40014000
 8019630:	00010007 	.word	0x00010007

08019634 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d101      	bne.n	8019646 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8019642:	2301      	movs	r3, #1
 8019644:	e049      	b.n	80196da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801964c:	b2db      	uxtb	r3, r3
 801964e:	2b00      	cmp	r3, #0
 8019650:	d106      	bne.n	8019660 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	2200      	movs	r2, #0
 8019656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7f9 fbd4 	bl	8012e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2202      	movs	r2, #2
 8019664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681a      	ldr	r2, [r3, #0]
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	3304      	adds	r3, #4
 8019670:	4619      	mov	r1, r3
 8019672:	4610      	mov	r0, r2
 8019674:	f001 f818 	bl	801a6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	2201      	movs	r2, #1
 801967c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2201      	movs	r2, #1
 8019684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	2201      	movs	r2, #1
 801968c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	2201      	movs	r2, #1
 8019694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2201      	movs	r2, #1
 801969c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2201      	movs	r2, #1
 80196a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	2201      	movs	r2, #1
 80196ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	2201      	movs	r2, #1
 80196b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	2201      	movs	r2, #1
 80196bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	2201      	movs	r2, #1
 80196c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2201      	movs	r2, #1
 80196cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	2201      	movs	r2, #1
 80196d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80196d8:	2300      	movs	r3, #0
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3708      	adds	r7, #8
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
	...

080196e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b084      	sub	sp, #16
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
 80196ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80196ee:	683b      	ldr	r3, [r7, #0]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d109      	bne.n	8019708 <HAL_TIM_PWM_Start+0x24>
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80196fa:	b2db      	uxtb	r3, r3
 80196fc:	2b01      	cmp	r3, #1
 80196fe:	bf14      	ite	ne
 8019700:	2301      	movne	r3, #1
 8019702:	2300      	moveq	r3, #0
 8019704:	b2db      	uxtb	r3, r3
 8019706:	e03c      	b.n	8019782 <HAL_TIM_PWM_Start+0x9e>
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	2b04      	cmp	r3, #4
 801970c:	d109      	bne.n	8019722 <HAL_TIM_PWM_Start+0x3e>
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019714:	b2db      	uxtb	r3, r3
 8019716:	2b01      	cmp	r3, #1
 8019718:	bf14      	ite	ne
 801971a:	2301      	movne	r3, #1
 801971c:	2300      	moveq	r3, #0
 801971e:	b2db      	uxtb	r3, r3
 8019720:	e02f      	b.n	8019782 <HAL_TIM_PWM_Start+0x9e>
 8019722:	683b      	ldr	r3, [r7, #0]
 8019724:	2b08      	cmp	r3, #8
 8019726:	d109      	bne.n	801973c <HAL_TIM_PWM_Start+0x58>
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801972e:	b2db      	uxtb	r3, r3
 8019730:	2b01      	cmp	r3, #1
 8019732:	bf14      	ite	ne
 8019734:	2301      	movne	r3, #1
 8019736:	2300      	moveq	r3, #0
 8019738:	b2db      	uxtb	r3, r3
 801973a:	e022      	b.n	8019782 <HAL_TIM_PWM_Start+0x9e>
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	2b0c      	cmp	r3, #12
 8019740:	d109      	bne.n	8019756 <HAL_TIM_PWM_Start+0x72>
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8019748:	b2db      	uxtb	r3, r3
 801974a:	2b01      	cmp	r3, #1
 801974c:	bf14      	ite	ne
 801974e:	2301      	movne	r3, #1
 8019750:	2300      	moveq	r3, #0
 8019752:	b2db      	uxtb	r3, r3
 8019754:	e015      	b.n	8019782 <HAL_TIM_PWM_Start+0x9e>
 8019756:	683b      	ldr	r3, [r7, #0]
 8019758:	2b10      	cmp	r3, #16
 801975a:	d109      	bne.n	8019770 <HAL_TIM_PWM_Start+0x8c>
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019762:	b2db      	uxtb	r3, r3
 8019764:	2b01      	cmp	r3, #1
 8019766:	bf14      	ite	ne
 8019768:	2301      	movne	r3, #1
 801976a:	2300      	moveq	r3, #0
 801976c:	b2db      	uxtb	r3, r3
 801976e:	e008      	b.n	8019782 <HAL_TIM_PWM_Start+0x9e>
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019776:	b2db      	uxtb	r3, r3
 8019778:	2b01      	cmp	r3, #1
 801977a:	bf14      	ite	ne
 801977c:	2301      	movne	r3, #1
 801977e:	2300      	moveq	r3, #0
 8019780:	b2db      	uxtb	r3, r3
 8019782:	2b00      	cmp	r3, #0
 8019784:	d001      	beq.n	801978a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8019786:	2301      	movs	r3, #1
 8019788:	e09c      	b.n	80198c4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d104      	bne.n	801979a <HAL_TIM_PWM_Start+0xb6>
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2202      	movs	r2, #2
 8019794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019798:	e023      	b.n	80197e2 <HAL_TIM_PWM_Start+0xfe>
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	2b04      	cmp	r3, #4
 801979e:	d104      	bne.n	80197aa <HAL_TIM_PWM_Start+0xc6>
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	2202      	movs	r2, #2
 80197a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80197a8:	e01b      	b.n	80197e2 <HAL_TIM_PWM_Start+0xfe>
 80197aa:	683b      	ldr	r3, [r7, #0]
 80197ac:	2b08      	cmp	r3, #8
 80197ae:	d104      	bne.n	80197ba <HAL_TIM_PWM_Start+0xd6>
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	2202      	movs	r2, #2
 80197b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80197b8:	e013      	b.n	80197e2 <HAL_TIM_PWM_Start+0xfe>
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	2b0c      	cmp	r3, #12
 80197be:	d104      	bne.n	80197ca <HAL_TIM_PWM_Start+0xe6>
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	2202      	movs	r2, #2
 80197c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80197c8:	e00b      	b.n	80197e2 <HAL_TIM_PWM_Start+0xfe>
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	2b10      	cmp	r3, #16
 80197ce:	d104      	bne.n	80197da <HAL_TIM_PWM_Start+0xf6>
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2202      	movs	r2, #2
 80197d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80197d8:	e003      	b.n	80197e2 <HAL_TIM_PWM_Start+0xfe>
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	2202      	movs	r2, #2
 80197de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	2201      	movs	r2, #1
 80197e8:	6839      	ldr	r1, [r7, #0]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f001 fc8c 	bl	801b108 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	4a35      	ldr	r2, [pc, #212]	; (80198cc <HAL_TIM_PWM_Start+0x1e8>)
 80197f6:	4293      	cmp	r3, r2
 80197f8:	d013      	beq.n	8019822 <HAL_TIM_PWM_Start+0x13e>
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	4a34      	ldr	r2, [pc, #208]	; (80198d0 <HAL_TIM_PWM_Start+0x1ec>)
 8019800:	4293      	cmp	r3, r2
 8019802:	d00e      	beq.n	8019822 <HAL_TIM_PWM_Start+0x13e>
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	4a32      	ldr	r2, [pc, #200]	; (80198d4 <HAL_TIM_PWM_Start+0x1f0>)
 801980a:	4293      	cmp	r3, r2
 801980c:	d009      	beq.n	8019822 <HAL_TIM_PWM_Start+0x13e>
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	4a31      	ldr	r2, [pc, #196]	; (80198d8 <HAL_TIM_PWM_Start+0x1f4>)
 8019814:	4293      	cmp	r3, r2
 8019816:	d004      	beq.n	8019822 <HAL_TIM_PWM_Start+0x13e>
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	4a2f      	ldr	r2, [pc, #188]	; (80198dc <HAL_TIM_PWM_Start+0x1f8>)
 801981e:	4293      	cmp	r3, r2
 8019820:	d101      	bne.n	8019826 <HAL_TIM_PWM_Start+0x142>
 8019822:	2301      	movs	r3, #1
 8019824:	e000      	b.n	8019828 <HAL_TIM_PWM_Start+0x144>
 8019826:	2300      	movs	r3, #0
 8019828:	2b00      	cmp	r3, #0
 801982a:	d007      	beq.n	801983c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801983a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	4a22      	ldr	r2, [pc, #136]	; (80198cc <HAL_TIM_PWM_Start+0x1e8>)
 8019842:	4293      	cmp	r3, r2
 8019844:	d01d      	beq.n	8019882 <HAL_TIM_PWM_Start+0x19e>
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801984e:	d018      	beq.n	8019882 <HAL_TIM_PWM_Start+0x19e>
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	4a22      	ldr	r2, [pc, #136]	; (80198e0 <HAL_TIM_PWM_Start+0x1fc>)
 8019856:	4293      	cmp	r3, r2
 8019858:	d013      	beq.n	8019882 <HAL_TIM_PWM_Start+0x19e>
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	4a21      	ldr	r2, [pc, #132]	; (80198e4 <HAL_TIM_PWM_Start+0x200>)
 8019860:	4293      	cmp	r3, r2
 8019862:	d00e      	beq.n	8019882 <HAL_TIM_PWM_Start+0x19e>
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	4a1f      	ldr	r2, [pc, #124]	; (80198e8 <HAL_TIM_PWM_Start+0x204>)
 801986a:	4293      	cmp	r3, r2
 801986c:	d009      	beq.n	8019882 <HAL_TIM_PWM_Start+0x19e>
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	4a17      	ldr	r2, [pc, #92]	; (80198d0 <HAL_TIM_PWM_Start+0x1ec>)
 8019874:	4293      	cmp	r3, r2
 8019876:	d004      	beq.n	8019882 <HAL_TIM_PWM_Start+0x19e>
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	4a15      	ldr	r2, [pc, #84]	; (80198d4 <HAL_TIM_PWM_Start+0x1f0>)
 801987e:	4293      	cmp	r3, r2
 8019880:	d115      	bne.n	80198ae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	689a      	ldr	r2, [r3, #8]
 8019888:	4b18      	ldr	r3, [pc, #96]	; (80198ec <HAL_TIM_PWM_Start+0x208>)
 801988a:	4013      	ands	r3, r2
 801988c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	2b06      	cmp	r3, #6
 8019892:	d015      	beq.n	80198c0 <HAL_TIM_PWM_Start+0x1dc>
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801989a:	d011      	beq.n	80198c0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f042 0201 	orr.w	r2, r2, #1
 80198aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80198ac:	e008      	b.n	80198c0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	681a      	ldr	r2, [r3, #0]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	f042 0201 	orr.w	r2, r2, #1
 80198bc:	601a      	str	r2, [r3, #0]
 80198be:	e000      	b.n	80198c2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80198c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80198c2:	2300      	movs	r3, #0
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3710      	adds	r7, #16
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}
 80198cc:	40012c00 	.word	0x40012c00
 80198d0:	40013400 	.word	0x40013400
 80198d4:	40014000 	.word	0x40014000
 80198d8:	40014400 	.word	0x40014400
 80198dc:	40014800 	.word	0x40014800
 80198e0:	40000400 	.word	0x40000400
 80198e4:	40000800 	.word	0x40000800
 80198e8:	40000c00 	.word	0x40000c00
 80198ec:	00010007 	.word	0x00010007

080198f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b082      	sub	sp, #8
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d101      	bne.n	8019902 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80198fe:	2301      	movs	r3, #1
 8019900:	e049      	b.n	8019996 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019908:	b2db      	uxtb	r3, r3
 801990a:	2b00      	cmp	r3, #0
 801990c:	d106      	bne.n	801991c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2200      	movs	r2, #0
 8019912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8019916:	6878      	ldr	r0, [r7, #4]
 8019918:	f000 f841 	bl	801999e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	2202      	movs	r2, #2
 8019920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681a      	ldr	r2, [r3, #0]
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	3304      	adds	r3, #4
 801992c:	4619      	mov	r1, r3
 801992e:	4610      	mov	r0, r2
 8019930:	f000 feba 	bl	801a6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	2201      	movs	r2, #1
 8019938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	2201      	movs	r2, #1
 8019940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	2201      	movs	r2, #1
 8019948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	2201      	movs	r2, #1
 8019950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2201      	movs	r2, #1
 8019958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2201      	movs	r2, #1
 8019960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2201      	movs	r2, #1
 8019968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	2201      	movs	r2, #1
 8019970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2201      	movs	r2, #1
 8019978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	2201      	movs	r2, #1
 8019980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	2201      	movs	r2, #1
 8019988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	2201      	movs	r2, #1
 8019990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019994:	2300      	movs	r3, #0
}
 8019996:	4618      	mov	r0, r3
 8019998:	3708      	adds	r7, #8
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}

0801999e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801999e:	b480      	push	{r7}
 80199a0:	b083      	sub	sp, #12
 80199a2:	af00      	add	r7, sp, #0
 80199a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80199a6:	bf00      	nop
 80199a8:	370c      	adds	r7, #12
 80199aa:	46bd      	mov	sp, r7
 80199ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b0:	4770      	bx	lr
	...

080199b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b084      	sub	sp, #16
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80199be:	2300      	movs	r3, #0
 80199c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d104      	bne.n	80199d2 <HAL_TIM_IC_Start_IT+0x1e>
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80199ce:	b2db      	uxtb	r3, r3
 80199d0:	e023      	b.n	8019a1a <HAL_TIM_IC_Start_IT+0x66>
 80199d2:	683b      	ldr	r3, [r7, #0]
 80199d4:	2b04      	cmp	r3, #4
 80199d6:	d104      	bne.n	80199e2 <HAL_TIM_IC_Start_IT+0x2e>
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80199de:	b2db      	uxtb	r3, r3
 80199e0:	e01b      	b.n	8019a1a <HAL_TIM_IC_Start_IT+0x66>
 80199e2:	683b      	ldr	r3, [r7, #0]
 80199e4:	2b08      	cmp	r3, #8
 80199e6:	d104      	bne.n	80199f2 <HAL_TIM_IC_Start_IT+0x3e>
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80199ee:	b2db      	uxtb	r3, r3
 80199f0:	e013      	b.n	8019a1a <HAL_TIM_IC_Start_IT+0x66>
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	2b0c      	cmp	r3, #12
 80199f6:	d104      	bne.n	8019a02 <HAL_TIM_IC_Start_IT+0x4e>
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80199fe:	b2db      	uxtb	r3, r3
 8019a00:	e00b      	b.n	8019a1a <HAL_TIM_IC_Start_IT+0x66>
 8019a02:	683b      	ldr	r3, [r7, #0]
 8019a04:	2b10      	cmp	r3, #16
 8019a06:	d104      	bne.n	8019a12 <HAL_TIM_IC_Start_IT+0x5e>
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019a0e:	b2db      	uxtb	r3, r3
 8019a10:	e003      	b.n	8019a1a <HAL_TIM_IC_Start_IT+0x66>
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8019a1c:	683b      	ldr	r3, [r7, #0]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d104      	bne.n	8019a2c <HAL_TIM_IC_Start_IT+0x78>
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	e013      	b.n	8019a54 <HAL_TIM_IC_Start_IT+0xa0>
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	2b04      	cmp	r3, #4
 8019a30:	d104      	bne.n	8019a3c <HAL_TIM_IC_Start_IT+0x88>
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019a38:	b2db      	uxtb	r3, r3
 8019a3a:	e00b      	b.n	8019a54 <HAL_TIM_IC_Start_IT+0xa0>
 8019a3c:	683b      	ldr	r3, [r7, #0]
 8019a3e:	2b08      	cmp	r3, #8
 8019a40:	d104      	bne.n	8019a4c <HAL_TIM_IC_Start_IT+0x98>
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a48:	b2db      	uxtb	r3, r3
 8019a4a:	e003      	b.n	8019a54 <HAL_TIM_IC_Start_IT+0xa0>
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019a52:	b2db      	uxtb	r3, r3
 8019a54:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8019a56:	7bbb      	ldrb	r3, [r7, #14]
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	d102      	bne.n	8019a62 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8019a5c:	7b7b      	ldrb	r3, [r7, #13]
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d001      	beq.n	8019a66 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8019a62:	2301      	movs	r3, #1
 8019a64:	e0dd      	b.n	8019c22 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019a66:	683b      	ldr	r3, [r7, #0]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d104      	bne.n	8019a76 <HAL_TIM_IC_Start_IT+0xc2>
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	2202      	movs	r2, #2
 8019a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8019a74:	e023      	b.n	8019abe <HAL_TIM_IC_Start_IT+0x10a>
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	2b04      	cmp	r3, #4
 8019a7a:	d104      	bne.n	8019a86 <HAL_TIM_IC_Start_IT+0xd2>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	2202      	movs	r2, #2
 8019a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8019a84:	e01b      	b.n	8019abe <HAL_TIM_IC_Start_IT+0x10a>
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	2b08      	cmp	r3, #8
 8019a8a:	d104      	bne.n	8019a96 <HAL_TIM_IC_Start_IT+0xe2>
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	2202      	movs	r2, #2
 8019a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8019a94:	e013      	b.n	8019abe <HAL_TIM_IC_Start_IT+0x10a>
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	2b0c      	cmp	r3, #12
 8019a9a:	d104      	bne.n	8019aa6 <HAL_TIM_IC_Start_IT+0xf2>
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	2202      	movs	r2, #2
 8019aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8019aa4:	e00b      	b.n	8019abe <HAL_TIM_IC_Start_IT+0x10a>
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	2b10      	cmp	r3, #16
 8019aaa:	d104      	bne.n	8019ab6 <HAL_TIM_IC_Start_IT+0x102>
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	2202      	movs	r2, #2
 8019ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8019ab4:	e003      	b.n	8019abe <HAL_TIM_IC_Start_IT+0x10a>
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	2202      	movs	r2, #2
 8019aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d104      	bne.n	8019ace <HAL_TIM_IC_Start_IT+0x11a>
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2202      	movs	r2, #2
 8019ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019acc:	e013      	b.n	8019af6 <HAL_TIM_IC_Start_IT+0x142>
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	2b04      	cmp	r3, #4
 8019ad2:	d104      	bne.n	8019ade <HAL_TIM_IC_Start_IT+0x12a>
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	2202      	movs	r2, #2
 8019ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019adc:	e00b      	b.n	8019af6 <HAL_TIM_IC_Start_IT+0x142>
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	2b08      	cmp	r3, #8
 8019ae2:	d104      	bne.n	8019aee <HAL_TIM_IC_Start_IT+0x13a>
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2202      	movs	r2, #2
 8019ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019aec:	e003      	b.n	8019af6 <HAL_TIM_IC_Start_IT+0x142>
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	2202      	movs	r2, #2
 8019af2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	2b0c      	cmp	r3, #12
 8019afa:	d841      	bhi.n	8019b80 <HAL_TIM_IC_Start_IT+0x1cc>
 8019afc:	a201      	add	r2, pc, #4	; (adr r2, 8019b04 <HAL_TIM_IC_Start_IT+0x150>)
 8019afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b02:	bf00      	nop
 8019b04:	08019b39 	.word	0x08019b39
 8019b08:	08019b81 	.word	0x08019b81
 8019b0c:	08019b81 	.word	0x08019b81
 8019b10:	08019b81 	.word	0x08019b81
 8019b14:	08019b4b 	.word	0x08019b4b
 8019b18:	08019b81 	.word	0x08019b81
 8019b1c:	08019b81 	.word	0x08019b81
 8019b20:	08019b81 	.word	0x08019b81
 8019b24:	08019b5d 	.word	0x08019b5d
 8019b28:	08019b81 	.word	0x08019b81
 8019b2c:	08019b81 	.word	0x08019b81
 8019b30:	08019b81 	.word	0x08019b81
 8019b34:	08019b6f 	.word	0x08019b6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	68da      	ldr	r2, [r3, #12]
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	f042 0202 	orr.w	r2, r2, #2
 8019b46:	60da      	str	r2, [r3, #12]
      break;
 8019b48:	e01d      	b.n	8019b86 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	68da      	ldr	r2, [r3, #12]
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	f042 0204 	orr.w	r2, r2, #4
 8019b58:	60da      	str	r2, [r3, #12]
      break;
 8019b5a:	e014      	b.n	8019b86 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	68da      	ldr	r2, [r3, #12]
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	f042 0208 	orr.w	r2, r2, #8
 8019b6a:	60da      	str	r2, [r3, #12]
      break;
 8019b6c:	e00b      	b.n	8019b86 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	68da      	ldr	r2, [r3, #12]
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	f042 0210 	orr.w	r2, r2, #16
 8019b7c:	60da      	str	r2, [r3, #12]
      break;
 8019b7e:	e002      	b.n	8019b86 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8019b80:	2301      	movs	r3, #1
 8019b82:	73fb      	strb	r3, [r7, #15]
      break;
 8019b84:	bf00      	nop
  }

  if (status == HAL_OK)
 8019b86:	7bfb      	ldrb	r3, [r7, #15]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d149      	bne.n	8019c20 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	2201      	movs	r2, #1
 8019b92:	6839      	ldr	r1, [r7, #0]
 8019b94:	4618      	mov	r0, r3
 8019b96:	f001 fab7 	bl	801b108 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	4a23      	ldr	r2, [pc, #140]	; (8019c2c <HAL_TIM_IC_Start_IT+0x278>)
 8019ba0:	4293      	cmp	r3, r2
 8019ba2:	d01d      	beq.n	8019be0 <HAL_TIM_IC_Start_IT+0x22c>
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019bac:	d018      	beq.n	8019be0 <HAL_TIM_IC_Start_IT+0x22c>
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	4a1f      	ldr	r2, [pc, #124]	; (8019c30 <HAL_TIM_IC_Start_IT+0x27c>)
 8019bb4:	4293      	cmp	r3, r2
 8019bb6:	d013      	beq.n	8019be0 <HAL_TIM_IC_Start_IT+0x22c>
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	4a1d      	ldr	r2, [pc, #116]	; (8019c34 <HAL_TIM_IC_Start_IT+0x280>)
 8019bbe:	4293      	cmp	r3, r2
 8019bc0:	d00e      	beq.n	8019be0 <HAL_TIM_IC_Start_IT+0x22c>
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	4a1c      	ldr	r2, [pc, #112]	; (8019c38 <HAL_TIM_IC_Start_IT+0x284>)
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d009      	beq.n	8019be0 <HAL_TIM_IC_Start_IT+0x22c>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	4a1a      	ldr	r2, [pc, #104]	; (8019c3c <HAL_TIM_IC_Start_IT+0x288>)
 8019bd2:	4293      	cmp	r3, r2
 8019bd4:	d004      	beq.n	8019be0 <HAL_TIM_IC_Start_IT+0x22c>
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	4a19      	ldr	r2, [pc, #100]	; (8019c40 <HAL_TIM_IC_Start_IT+0x28c>)
 8019bdc:	4293      	cmp	r3, r2
 8019bde:	d115      	bne.n	8019c0c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	689a      	ldr	r2, [r3, #8]
 8019be6:	4b17      	ldr	r3, [pc, #92]	; (8019c44 <HAL_TIM_IC_Start_IT+0x290>)
 8019be8:	4013      	ands	r3, r2
 8019bea:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	2b06      	cmp	r3, #6
 8019bf0:	d015      	beq.n	8019c1e <HAL_TIM_IC_Start_IT+0x26a>
 8019bf2:	68bb      	ldr	r3, [r7, #8]
 8019bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019bf8:	d011      	beq.n	8019c1e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	681a      	ldr	r2, [r3, #0]
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	f042 0201 	orr.w	r2, r2, #1
 8019c08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c0a:	e008      	b.n	8019c1e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	681a      	ldr	r2, [r3, #0]
 8019c12:	687b      	ldr	r3, [r7, #4]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	f042 0201 	orr.w	r2, r2, #1
 8019c1a:	601a      	str	r2, [r3, #0]
 8019c1c:	e000      	b.n	8019c20 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019c1e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8019c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c22:	4618      	mov	r0, r3
 8019c24:	3710      	adds	r7, #16
 8019c26:	46bd      	mov	sp, r7
 8019c28:	bd80      	pop	{r7, pc}
 8019c2a:	bf00      	nop
 8019c2c:	40012c00 	.word	0x40012c00
 8019c30:	40000400 	.word	0x40000400
 8019c34:	40000800 	.word	0x40000800
 8019c38:	40000c00 	.word	0x40000c00
 8019c3c:	40013400 	.word	0x40013400
 8019c40:	40014000 	.word	0x40014000
 8019c44:	00010007 	.word	0x00010007

08019c48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b086      	sub	sp, #24
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	6078      	str	r0, [r7, #4]
 8019c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d101      	bne.n	8019c5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8019c58:	2301      	movs	r3, #1
 8019c5a:	e097      	b.n	8019d8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019c62:	b2db      	uxtb	r3, r3
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d106      	bne.n	8019c76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8019c70:	6878      	ldr	r0, [r7, #4]
 8019c72:	f7f9 f87d 	bl	8012d70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	2202      	movs	r2, #2
 8019c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	689b      	ldr	r3, [r3, #8]
 8019c84:	687a      	ldr	r2, [r7, #4]
 8019c86:	6812      	ldr	r2, [r2, #0]
 8019c88:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8019c8c:	f023 0307 	bic.w	r3, r3, #7
 8019c90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	681a      	ldr	r2, [r3, #0]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	3304      	adds	r3, #4
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	4610      	mov	r0, r2
 8019c9e:	f000 fd03 	bl	801a6a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	689b      	ldr	r3, [r3, #8]
 8019ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	699b      	ldr	r3, [r3, #24]
 8019cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	6a1b      	ldr	r3, [r3, #32]
 8019cb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	697a      	ldr	r2, [r7, #20]
 8019cc0:	4313      	orrs	r3, r2
 8019cc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8019cc4:	693b      	ldr	r3, [r7, #16]
 8019cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019cca:	f023 0303 	bic.w	r3, r3, #3
 8019cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8019cd0:	683b      	ldr	r3, [r7, #0]
 8019cd2:	689a      	ldr	r2, [r3, #8]
 8019cd4:	683b      	ldr	r3, [r7, #0]
 8019cd6:	699b      	ldr	r3, [r3, #24]
 8019cd8:	021b      	lsls	r3, r3, #8
 8019cda:	4313      	orrs	r3, r2
 8019cdc:	693a      	ldr	r2, [r7, #16]
 8019cde:	4313      	orrs	r3, r2
 8019ce0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8019ce2:	693b      	ldr	r3, [r7, #16]
 8019ce4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8019ce8:	f023 030c 	bic.w	r3, r3, #12
 8019cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8019cee:	693b      	ldr	r3, [r7, #16]
 8019cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	68da      	ldr	r2, [r3, #12]
 8019cfe:	683b      	ldr	r3, [r7, #0]
 8019d00:	69db      	ldr	r3, [r3, #28]
 8019d02:	021b      	lsls	r3, r3, #8
 8019d04:	4313      	orrs	r3, r2
 8019d06:	693a      	ldr	r2, [r7, #16]
 8019d08:	4313      	orrs	r3, r2
 8019d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	691b      	ldr	r3, [r3, #16]
 8019d10:	011a      	lsls	r2, r3, #4
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	6a1b      	ldr	r3, [r3, #32]
 8019d16:	031b      	lsls	r3, r3, #12
 8019d18:	4313      	orrs	r3, r2
 8019d1a:	693a      	ldr	r2, [r7, #16]
 8019d1c:	4313      	orrs	r3, r2
 8019d1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8019d26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8019d2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8019d30:	683b      	ldr	r3, [r7, #0]
 8019d32:	685a      	ldr	r2, [r3, #4]
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	695b      	ldr	r3, [r3, #20]
 8019d38:	011b      	lsls	r3, r3, #4
 8019d3a:	4313      	orrs	r3, r2
 8019d3c:	68fa      	ldr	r2, [r7, #12]
 8019d3e:	4313      	orrs	r3, r2
 8019d40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	697a      	ldr	r2, [r7, #20]
 8019d48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	693a      	ldr	r2, [r7, #16]
 8019d50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	68fa      	ldr	r2, [r7, #12]
 8019d58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2201      	movs	r2, #1
 8019d5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	2201      	movs	r2, #1
 8019d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2201      	movs	r2, #1
 8019d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2201      	movs	r2, #1
 8019d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2201      	movs	r2, #1
 8019d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	2201      	movs	r2, #1
 8019d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019d8a:	2300      	movs	r3, #0
}
 8019d8c:	4618      	mov	r0, r3
 8019d8e:	3718      	adds	r7, #24
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}

08019d94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b084      	sub	sp, #16
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019da4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8019dac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019db4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019dbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8019dbe:	683b      	ldr	r3, [r7, #0]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d110      	bne.n	8019de6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8019dc4:	7bfb      	ldrb	r3, [r7, #15]
 8019dc6:	2b01      	cmp	r3, #1
 8019dc8:	d102      	bne.n	8019dd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8019dca:	7b7b      	ldrb	r3, [r7, #13]
 8019dcc:	2b01      	cmp	r3, #1
 8019dce:	d001      	beq.n	8019dd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	e069      	b.n	8019ea8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2202      	movs	r2, #2
 8019dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2202      	movs	r2, #2
 8019de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019de4:	e031      	b.n	8019e4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	2b04      	cmp	r3, #4
 8019dea:	d110      	bne.n	8019e0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8019dec:	7bbb      	ldrb	r3, [r7, #14]
 8019dee:	2b01      	cmp	r3, #1
 8019df0:	d102      	bne.n	8019df8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8019df2:	7b3b      	ldrb	r3, [r7, #12]
 8019df4:	2b01      	cmp	r3, #1
 8019df6:	d001      	beq.n	8019dfc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8019df8:	2301      	movs	r3, #1
 8019dfa:	e055      	b.n	8019ea8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	2202      	movs	r2, #2
 8019e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2202      	movs	r2, #2
 8019e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019e0c:	e01d      	b.n	8019e4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e0e:	7bfb      	ldrb	r3, [r7, #15]
 8019e10:	2b01      	cmp	r3, #1
 8019e12:	d108      	bne.n	8019e26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e14:	7bbb      	ldrb	r3, [r7, #14]
 8019e16:	2b01      	cmp	r3, #1
 8019e18:	d105      	bne.n	8019e26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8019e1a:	7b7b      	ldrb	r3, [r7, #13]
 8019e1c:	2b01      	cmp	r3, #1
 8019e1e:	d102      	bne.n	8019e26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8019e20:	7b3b      	ldrb	r3, [r7, #12]
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	d001      	beq.n	8019e2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8019e26:	2301      	movs	r3, #1
 8019e28:	e03e      	b.n	8019ea8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2202      	movs	r2, #2
 8019e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2202      	movs	r2, #2
 8019e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2202      	movs	r2, #2
 8019e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	2202      	movs	r2, #2
 8019e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8019e4a:	683b      	ldr	r3, [r7, #0]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d003      	beq.n	8019e58 <HAL_TIM_Encoder_Start+0xc4>
 8019e50:	683b      	ldr	r3, [r7, #0]
 8019e52:	2b04      	cmp	r3, #4
 8019e54:	d008      	beq.n	8019e68 <HAL_TIM_Encoder_Start+0xd4>
 8019e56:	e00f      	b.n	8019e78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	2201      	movs	r2, #1
 8019e5e:	2100      	movs	r1, #0
 8019e60:	4618      	mov	r0, r3
 8019e62:	f001 f951 	bl	801b108 <TIM_CCxChannelCmd>
      break;
 8019e66:	e016      	b.n	8019e96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	2201      	movs	r2, #1
 8019e6e:	2104      	movs	r1, #4
 8019e70:	4618      	mov	r0, r3
 8019e72:	f001 f949 	bl	801b108 <TIM_CCxChannelCmd>
      break;
 8019e76:	e00e      	b.n	8019e96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	2201      	movs	r2, #1
 8019e7e:	2100      	movs	r1, #0
 8019e80:	4618      	mov	r0, r3
 8019e82:	f001 f941 	bl	801b108 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	2201      	movs	r2, #1
 8019e8c:	2104      	movs	r1, #4
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f001 f93a 	bl	801b108 <TIM_CCxChannelCmd>
      break;
 8019e94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	681a      	ldr	r2, [r3, #0]
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	f042 0201 	orr.w	r2, r2, #1
 8019ea4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8019ea6:	2300      	movs	r3, #0
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3710      	adds	r7, #16
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}

08019eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b082      	sub	sp, #8
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	691b      	ldr	r3, [r3, #16]
 8019ebe:	f003 0302 	and.w	r3, r3, #2
 8019ec2:	2b02      	cmp	r3, #2
 8019ec4:	d122      	bne.n	8019f0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	68db      	ldr	r3, [r3, #12]
 8019ecc:	f003 0302 	and.w	r3, r3, #2
 8019ed0:	2b02      	cmp	r3, #2
 8019ed2:	d11b      	bne.n	8019f0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f06f 0202 	mvn.w	r2, #2
 8019edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2201      	movs	r2, #1
 8019ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	699b      	ldr	r3, [r3, #24]
 8019eea:	f003 0303 	and.w	r3, r3, #3
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d003      	beq.n	8019efa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8019ef2:	6878      	ldr	r0, [r7, #4]
 8019ef4:	f7e9 ff7e 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8019ef8:	e005      	b.n	8019f06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019efa:	6878      	ldr	r0, [r7, #4]
 8019efc:	f000 fbb6 	bl	801a66c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019f00:	6878      	ldr	r0, [r7, #4]
 8019f02:	f000 fbbd 	bl	801a680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	2200      	movs	r2, #0
 8019f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	691b      	ldr	r3, [r3, #16]
 8019f12:	f003 0304 	and.w	r3, r3, #4
 8019f16:	2b04      	cmp	r3, #4
 8019f18:	d122      	bne.n	8019f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	68db      	ldr	r3, [r3, #12]
 8019f20:	f003 0304 	and.w	r3, r3, #4
 8019f24:	2b04      	cmp	r3, #4
 8019f26:	d11b      	bne.n	8019f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f06f 0204 	mvn.w	r2, #4
 8019f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	2202      	movs	r2, #2
 8019f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	699b      	ldr	r3, [r3, #24]
 8019f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d003      	beq.n	8019f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	f7e9 ff54 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8019f4c:	e005      	b.n	8019f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019f4e:	6878      	ldr	r0, [r7, #4]
 8019f50:	f000 fb8c 	bl	801a66c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019f54:	6878      	ldr	r0, [r7, #4]
 8019f56:	f000 fb93 	bl	801a680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	2200      	movs	r2, #0
 8019f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	691b      	ldr	r3, [r3, #16]
 8019f66:	f003 0308 	and.w	r3, r3, #8
 8019f6a:	2b08      	cmp	r3, #8
 8019f6c:	d122      	bne.n	8019fb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	68db      	ldr	r3, [r3, #12]
 8019f74:	f003 0308 	and.w	r3, r3, #8
 8019f78:	2b08      	cmp	r3, #8
 8019f7a:	d11b      	bne.n	8019fb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	f06f 0208 	mvn.w	r2, #8
 8019f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2204      	movs	r2, #4
 8019f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	69db      	ldr	r3, [r3, #28]
 8019f92:	f003 0303 	and.w	r3, r3, #3
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d003      	beq.n	8019fa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019f9a:	6878      	ldr	r0, [r7, #4]
 8019f9c:	f7e9 ff2a 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8019fa0:	e005      	b.n	8019fae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019fa2:	6878      	ldr	r0, [r7, #4]
 8019fa4:	f000 fb62 	bl	801a66c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019fa8:	6878      	ldr	r0, [r7, #4]
 8019faa:	f000 fb69 	bl	801a680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	691b      	ldr	r3, [r3, #16]
 8019fba:	f003 0310 	and.w	r3, r3, #16
 8019fbe:	2b10      	cmp	r3, #16
 8019fc0:	d122      	bne.n	801a008 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	f003 0310 	and.w	r3, r3, #16
 8019fcc:	2b10      	cmp	r3, #16
 8019fce:	d11b      	bne.n	801a008 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	f06f 0210 	mvn.w	r2, #16
 8019fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	2208      	movs	r2, #8
 8019fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	69db      	ldr	r3, [r3, #28]
 8019fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d003      	beq.n	8019ff6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019fee:	6878      	ldr	r0, [r7, #4]
 8019ff0:	f7e9 ff00 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8019ff4:	e005      	b.n	801a002 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8019ff6:	6878      	ldr	r0, [r7, #4]
 8019ff8:	f000 fb38 	bl	801a66c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019ffc:	6878      	ldr	r0, [r7, #4]
 8019ffe:	f000 fb3f 	bl	801a680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	2200      	movs	r2, #0
 801a006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	691b      	ldr	r3, [r3, #16]
 801a00e:	f003 0301 	and.w	r3, r3, #1
 801a012:	2b01      	cmp	r3, #1
 801a014:	d10e      	bne.n	801a034 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	68db      	ldr	r3, [r3, #12]
 801a01c:	f003 0301 	and.w	r3, r3, #1
 801a020:	2b01      	cmp	r3, #1
 801a022:	d107      	bne.n	801a034 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	f06f 0201 	mvn.w	r2, #1
 801a02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a02e:	6878      	ldr	r0, [r7, #4]
 801a030:	f7f8 fa9e 	bl	8012570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	691b      	ldr	r3, [r3, #16]
 801a03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a03e:	2b80      	cmp	r3, #128	; 0x80
 801a040:	d10e      	bne.n	801a060 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	68db      	ldr	r3, [r3, #12]
 801a048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a04c:	2b80      	cmp	r3, #128	; 0x80
 801a04e:	d107      	bne.n	801a060 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a05a:	6878      	ldr	r0, [r7, #4]
 801a05c:	f001 f9ac 	bl	801b3b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	691b      	ldr	r3, [r3, #16]
 801a066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a06e:	d10e      	bne.n	801a08e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	68db      	ldr	r3, [r3, #12]
 801a076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a07a:	2b80      	cmp	r3, #128	; 0x80
 801a07c:	d107      	bne.n	801a08e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801a086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801a088:	6878      	ldr	r0, [r7, #4]
 801a08a:	f001 f99f 	bl	801b3cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	691b      	ldr	r3, [r3, #16]
 801a094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a098:	2b40      	cmp	r3, #64	; 0x40
 801a09a:	d10e      	bne.n	801a0ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	68db      	ldr	r3, [r3, #12]
 801a0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a0a6:	2b40      	cmp	r3, #64	; 0x40
 801a0a8:	d107      	bne.n	801a0ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a0b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f000 faed 	bl	801a694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	691b      	ldr	r3, [r3, #16]
 801a0c0:	f003 0320 	and.w	r3, r3, #32
 801a0c4:	2b20      	cmp	r3, #32
 801a0c6:	d10e      	bne.n	801a0e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	f003 0320 	and.w	r3, r3, #32
 801a0d2:	2b20      	cmp	r3, #32
 801a0d4:	d107      	bne.n	801a0e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	f06f 0220 	mvn.w	r2, #32
 801a0de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	f001 f95f 	bl	801b3a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a0e6:	bf00      	nop
 801a0e8:	3708      	adds	r7, #8
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd80      	pop	{r7, pc}

0801a0ee <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801a0ee:	b580      	push	{r7, lr}
 801a0f0:	b086      	sub	sp, #24
 801a0f2:	af00      	add	r7, sp, #0
 801a0f4:	60f8      	str	r0, [r7, #12]
 801a0f6:	60b9      	str	r1, [r7, #8]
 801a0f8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a0fa:	2300      	movs	r3, #0
 801a0fc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a104:	2b01      	cmp	r3, #1
 801a106:	d101      	bne.n	801a10c <HAL_TIM_IC_ConfigChannel+0x1e>
 801a108:	2302      	movs	r3, #2
 801a10a:	e088      	b.n	801a21e <HAL_TIM_IC_ConfigChannel+0x130>
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	2201      	movs	r2, #1
 801a110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d11b      	bne.n	801a152 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801a122:	68bb      	ldr	r3, [r7, #8]
 801a124:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801a126:	68bb      	ldr	r3, [r7, #8]
 801a128:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 801a12a:	f000 fe2d 	bl	801ad88 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	699a      	ldr	r2, [r3, #24]
 801a134:	68fb      	ldr	r3, [r7, #12]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	f022 020c 	bic.w	r2, r2, #12
 801a13c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	6999      	ldr	r1, [r3, #24]
 801a144:	68bb      	ldr	r3, [r7, #8]
 801a146:	689a      	ldr	r2, [r3, #8]
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	430a      	orrs	r2, r1
 801a14e:	619a      	str	r2, [r3, #24]
 801a150:	e060      	b.n	801a214 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	2b04      	cmp	r3, #4
 801a156:	d11c      	bne.n	801a192 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801a160:	68bb      	ldr	r3, [r7, #8]
 801a162:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801a164:	68bb      	ldr	r3, [r7, #8]
 801a166:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801a168:	f000 feab 	bl	801aec2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	699a      	ldr	r2, [r3, #24]
 801a172:	68fb      	ldr	r3, [r7, #12]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a17a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	6999      	ldr	r1, [r3, #24]
 801a182:	68bb      	ldr	r3, [r7, #8]
 801a184:	689b      	ldr	r3, [r3, #8]
 801a186:	021a      	lsls	r2, r3, #8
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	430a      	orrs	r2, r1
 801a18e:	619a      	str	r2, [r3, #24]
 801a190:	e040      	b.n	801a214 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	2b08      	cmp	r3, #8
 801a196:	d11b      	bne.n	801a1d0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801a1a0:	68bb      	ldr	r3, [r7, #8]
 801a1a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801a1a4:	68bb      	ldr	r3, [r7, #8]
 801a1a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801a1a8:	f000 fef8 	bl	801af9c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	69da      	ldr	r2, [r3, #28]
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	f022 020c 	bic.w	r2, r2, #12
 801a1ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	69d9      	ldr	r1, [r3, #28]
 801a1c2:	68bb      	ldr	r3, [r7, #8]
 801a1c4:	689a      	ldr	r2, [r3, #8]
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	430a      	orrs	r2, r1
 801a1cc:	61da      	str	r2, [r3, #28]
 801a1ce:	e021      	b.n	801a214 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2b0c      	cmp	r3, #12
 801a1d4:	d11c      	bne.n	801a210 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801a1da:	68bb      	ldr	r3, [r7, #8]
 801a1dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801a1de:	68bb      	ldr	r3, [r7, #8]
 801a1e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 801a1e6:	f000 ff15 	bl	801b014 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	69da      	ldr	r2, [r3, #28]
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801a1f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	69d9      	ldr	r1, [r3, #28]
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	689b      	ldr	r3, [r3, #8]
 801a204:	021a      	lsls	r2, r3, #8
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	430a      	orrs	r2, r1
 801a20c:	61da      	str	r2, [r3, #28]
 801a20e:	e001      	b.n	801a214 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801a210:	2301      	movs	r3, #1
 801a212:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	2200      	movs	r2, #0
 801a218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a21c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a21e:	4618      	mov	r0, r3
 801a220:	3718      	adds	r7, #24
 801a222:	46bd      	mov	sp, r7
 801a224:	bd80      	pop	{r7, pc}
	...

0801a228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a228:	b580      	push	{r7, lr}
 801a22a:	b086      	sub	sp, #24
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	60f8      	str	r0, [r7, #12]
 801a230:	60b9      	str	r1, [r7, #8]
 801a232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a234:	2300      	movs	r3, #0
 801a236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a23e:	2b01      	cmp	r3, #1
 801a240:	d101      	bne.n	801a246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801a242:	2302      	movs	r3, #2
 801a244:	e0ff      	b.n	801a446 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	2201      	movs	r2, #1
 801a24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	2b14      	cmp	r3, #20
 801a252:	f200 80f0 	bhi.w	801a436 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801a256:	a201      	add	r2, pc, #4	; (adr r2, 801a25c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a25c:	0801a2b1 	.word	0x0801a2b1
 801a260:	0801a437 	.word	0x0801a437
 801a264:	0801a437 	.word	0x0801a437
 801a268:	0801a437 	.word	0x0801a437
 801a26c:	0801a2f1 	.word	0x0801a2f1
 801a270:	0801a437 	.word	0x0801a437
 801a274:	0801a437 	.word	0x0801a437
 801a278:	0801a437 	.word	0x0801a437
 801a27c:	0801a333 	.word	0x0801a333
 801a280:	0801a437 	.word	0x0801a437
 801a284:	0801a437 	.word	0x0801a437
 801a288:	0801a437 	.word	0x0801a437
 801a28c:	0801a373 	.word	0x0801a373
 801a290:	0801a437 	.word	0x0801a437
 801a294:	0801a437 	.word	0x0801a437
 801a298:	0801a437 	.word	0x0801a437
 801a29c:	0801a3b5 	.word	0x0801a3b5
 801a2a0:	0801a437 	.word	0x0801a437
 801a2a4:	0801a437 	.word	0x0801a437
 801a2a8:	0801a437 	.word	0x0801a437
 801a2ac:	0801a3f5 	.word	0x0801a3f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	68b9      	ldr	r1, [r7, #8]
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f000 fa90 	bl	801a7dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	699a      	ldr	r2, [r3, #24]
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	f042 0208 	orr.w	r2, r2, #8
 801a2ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	699a      	ldr	r2, [r3, #24]
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	f022 0204 	bic.w	r2, r2, #4
 801a2da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a2dc:	68fb      	ldr	r3, [r7, #12]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	6999      	ldr	r1, [r3, #24]
 801a2e2:	68bb      	ldr	r3, [r7, #8]
 801a2e4:	691a      	ldr	r2, [r3, #16]
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	430a      	orrs	r2, r1
 801a2ec:	619a      	str	r2, [r3, #24]
      break;
 801a2ee:	e0a5      	b.n	801a43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	68b9      	ldr	r1, [r7, #8]
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f000 fb00 	bl	801a8fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	699a      	ldr	r2, [r3, #24]
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a30a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	699a      	ldr	r2, [r3, #24]
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a31a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	6999      	ldr	r1, [r3, #24]
 801a322:	68bb      	ldr	r3, [r7, #8]
 801a324:	691b      	ldr	r3, [r3, #16]
 801a326:	021a      	lsls	r2, r3, #8
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	430a      	orrs	r2, r1
 801a32e:	619a      	str	r2, [r3, #24]
      break;
 801a330:	e084      	b.n	801a43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a332:	68fb      	ldr	r3, [r7, #12]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	68b9      	ldr	r1, [r7, #8]
 801a338:	4618      	mov	r0, r3
 801a33a:	f000 fb69 	bl	801aa10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	69da      	ldr	r2, [r3, #28]
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	f042 0208 	orr.w	r2, r2, #8
 801a34c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a34e:	68fb      	ldr	r3, [r7, #12]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	69da      	ldr	r2, [r3, #28]
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	f022 0204 	bic.w	r2, r2, #4
 801a35c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	69d9      	ldr	r1, [r3, #28]
 801a364:	68bb      	ldr	r3, [r7, #8]
 801a366:	691a      	ldr	r2, [r3, #16]
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	430a      	orrs	r2, r1
 801a36e:	61da      	str	r2, [r3, #28]
      break;
 801a370:	e064      	b.n	801a43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	68b9      	ldr	r1, [r7, #8]
 801a378:	4618      	mov	r0, r3
 801a37a:	f000 fbd1 	bl	801ab20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a37e:	68fb      	ldr	r3, [r7, #12]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	69da      	ldr	r2, [r3, #28]
 801a384:	68fb      	ldr	r3, [r7, #12]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a38c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	69da      	ldr	r2, [r3, #28]
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a39c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	69d9      	ldr	r1, [r3, #28]
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	691b      	ldr	r3, [r3, #16]
 801a3a8:	021a      	lsls	r2, r3, #8
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	430a      	orrs	r2, r1
 801a3b0:	61da      	str	r2, [r3, #28]
      break;
 801a3b2:	e043      	b.n	801a43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	68b9      	ldr	r1, [r7, #8]
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f000 fc1a 	bl	801abf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	f042 0208 	orr.w	r2, r2, #8
 801a3ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801a3d0:	68fb      	ldr	r3, [r7, #12]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	f022 0204 	bic.w	r2, r2, #4
 801a3de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	691a      	ldr	r2, [r3, #16]
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	430a      	orrs	r2, r1
 801a3f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801a3f2:	e023      	b.n	801a43c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	681b      	ldr	r3, [r3, #0]
 801a3f8:	68b9      	ldr	r1, [r7, #8]
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f000 fc5e 	bl	801acbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a406:	68fb      	ldr	r3, [r7, #12]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a40e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a41e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a426:	68bb      	ldr	r3, [r7, #8]
 801a428:	691b      	ldr	r3, [r3, #16]
 801a42a:	021a      	lsls	r2, r3, #8
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	430a      	orrs	r2, r1
 801a432:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801a434:	e002      	b.n	801a43c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801a436:	2301      	movs	r3, #1
 801a438:	75fb      	strb	r3, [r7, #23]
      break;
 801a43a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	2200      	movs	r2, #0
 801a440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a444:	7dfb      	ldrb	r3, [r7, #23]
}
 801a446:	4618      	mov	r0, r3
 801a448:	3718      	adds	r7, #24
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}
 801a44e:	bf00      	nop

0801a450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801a45a:	2300      	movs	r3, #0
 801a45c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a464:	2b01      	cmp	r3, #1
 801a466:	d101      	bne.n	801a46c <HAL_TIM_ConfigClockSource+0x1c>
 801a468:	2302      	movs	r3, #2
 801a46a:	e0b6      	b.n	801a5da <HAL_TIM_ConfigClockSource+0x18a>
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2201      	movs	r2, #1
 801a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2202      	movs	r2, #2
 801a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	689b      	ldr	r3, [r3, #8]
 801a482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 801a48a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801a48e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a490:	68bb      	ldr	r3, [r7, #8]
 801a492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	68ba      	ldr	r2, [r7, #8]
 801a49e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a4a8:	d03e      	beq.n	801a528 <HAL_TIM_ConfigClockSource+0xd8>
 801a4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a4ae:	f200 8087 	bhi.w	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a4b6:	f000 8086 	beq.w	801a5c6 <HAL_TIM_ConfigClockSource+0x176>
 801a4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a4be:	d87f      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4c0:	2b70      	cmp	r3, #112	; 0x70
 801a4c2:	d01a      	beq.n	801a4fa <HAL_TIM_ConfigClockSource+0xaa>
 801a4c4:	2b70      	cmp	r3, #112	; 0x70
 801a4c6:	d87b      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4c8:	2b60      	cmp	r3, #96	; 0x60
 801a4ca:	d050      	beq.n	801a56e <HAL_TIM_ConfigClockSource+0x11e>
 801a4cc:	2b60      	cmp	r3, #96	; 0x60
 801a4ce:	d877      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4d0:	2b50      	cmp	r3, #80	; 0x50
 801a4d2:	d03c      	beq.n	801a54e <HAL_TIM_ConfigClockSource+0xfe>
 801a4d4:	2b50      	cmp	r3, #80	; 0x50
 801a4d6:	d873      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4d8:	2b40      	cmp	r3, #64	; 0x40
 801a4da:	d058      	beq.n	801a58e <HAL_TIM_ConfigClockSource+0x13e>
 801a4dc:	2b40      	cmp	r3, #64	; 0x40
 801a4de:	d86f      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4e0:	2b30      	cmp	r3, #48	; 0x30
 801a4e2:	d064      	beq.n	801a5ae <HAL_TIM_ConfigClockSource+0x15e>
 801a4e4:	2b30      	cmp	r3, #48	; 0x30
 801a4e6:	d86b      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4e8:	2b20      	cmp	r3, #32
 801a4ea:	d060      	beq.n	801a5ae <HAL_TIM_ConfigClockSource+0x15e>
 801a4ec:	2b20      	cmp	r3, #32
 801a4ee:	d867      	bhi.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d05c      	beq.n	801a5ae <HAL_TIM_ConfigClockSource+0x15e>
 801a4f4:	2b10      	cmp	r3, #16
 801a4f6:	d05a      	beq.n	801a5ae <HAL_TIM_ConfigClockSource+0x15e>
 801a4f8:	e062      	b.n	801a5c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a4fe:	683b      	ldr	r3, [r7, #0]
 801a500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a502:	683b      	ldr	r3, [r7, #0]
 801a504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a50a:	f000 fddd 	bl	801b0c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	689b      	ldr	r3, [r3, #8]
 801a514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801a51c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	68ba      	ldr	r2, [r7, #8]
 801a524:	609a      	str	r2, [r3, #8]
      break;
 801a526:	e04f      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801a530:	683b      	ldr	r3, [r7, #0]
 801a532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801a538:	f000 fdc6 	bl	801b0c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	689a      	ldr	r2, [r3, #8]
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a54a:	609a      	str	r2, [r3, #8]
      break;
 801a54c:	e03c      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a552:	683b      	ldr	r3, [r7, #0]
 801a554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a556:	683b      	ldr	r3, [r7, #0]
 801a558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a55a:	461a      	mov	r2, r3
 801a55c:	f000 fc82 	bl	801ae64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	2150      	movs	r1, #80	; 0x50
 801a566:	4618      	mov	r0, r3
 801a568:	f000 fd91 	bl	801b08e <TIM_ITRx_SetConfig>
      break;
 801a56c:	e02c      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a572:	683b      	ldr	r3, [r7, #0]
 801a574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a576:	683b      	ldr	r3, [r7, #0]
 801a578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a57a:	461a      	mov	r2, r3
 801a57c:	f000 fcde 	bl	801af3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2160      	movs	r1, #96	; 0x60
 801a586:	4618      	mov	r0, r3
 801a588:	f000 fd81 	bl	801b08e <TIM_ITRx_SetConfig>
      break;
 801a58c:	e01c      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801a596:	683b      	ldr	r3, [r7, #0]
 801a598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a59a:	461a      	mov	r2, r3
 801a59c:	f000 fc62 	bl	801ae64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2140      	movs	r1, #64	; 0x40
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f000 fd71 	bl	801b08e <TIM_ITRx_SetConfig>
      break;
 801a5ac:	e00c      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	681a      	ldr	r2, [r3, #0]
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	4619      	mov	r1, r3
 801a5b8:	4610      	mov	r0, r2
 801a5ba:	f000 fd68 	bl	801b08e <TIM_ITRx_SetConfig>
      break;
 801a5be:	e003      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	73fb      	strb	r3, [r7, #15]
      break;
 801a5c4:	e000      	b.n	801a5c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 801a5c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2201      	movs	r2, #1
 801a5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5da:	4618      	mov	r0, r3
 801a5dc:	3710      	adds	r7, #16
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bd80      	pop	{r7, pc}
	...

0801a5e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a5e4:	b480      	push	{r7}
 801a5e6:	b085      	sub	sp, #20
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
 801a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801a5f2:	683b      	ldr	r3, [r7, #0]
 801a5f4:	2b0c      	cmp	r3, #12
 801a5f6:	d831      	bhi.n	801a65c <HAL_TIM_ReadCapturedValue+0x78>
 801a5f8:	a201      	add	r2, pc, #4	; (adr r2, 801a600 <HAL_TIM_ReadCapturedValue+0x1c>)
 801a5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5fe:	bf00      	nop
 801a600:	0801a635 	.word	0x0801a635
 801a604:	0801a65d 	.word	0x0801a65d
 801a608:	0801a65d 	.word	0x0801a65d
 801a60c:	0801a65d 	.word	0x0801a65d
 801a610:	0801a63f 	.word	0x0801a63f
 801a614:	0801a65d 	.word	0x0801a65d
 801a618:	0801a65d 	.word	0x0801a65d
 801a61c:	0801a65d 	.word	0x0801a65d
 801a620:	0801a649 	.word	0x0801a649
 801a624:	0801a65d 	.word	0x0801a65d
 801a628:	0801a65d 	.word	0x0801a65d
 801a62c:	0801a65d 	.word	0x0801a65d
 801a630:	0801a653 	.word	0x0801a653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a63a:	60fb      	str	r3, [r7, #12]

      break;
 801a63c:	e00f      	b.n	801a65e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a644:	60fb      	str	r3, [r7, #12]

      break;
 801a646:	e00a      	b.n	801a65e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a64e:	60fb      	str	r3, [r7, #12]

      break;
 801a650:	e005      	b.n	801a65e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a658:	60fb      	str	r3, [r7, #12]

      break;
 801a65a:	e000      	b.n	801a65e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801a65c:	bf00      	nop
  }

  return tmpreg;
 801a65e:	68fb      	ldr	r3, [r7, #12]
}
 801a660:	4618      	mov	r0, r3
 801a662:	3714      	adds	r7, #20
 801a664:	46bd      	mov	sp, r7
 801a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a66a:	4770      	bx	lr

0801a66c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a66c:	b480      	push	{r7}
 801a66e:	b083      	sub	sp, #12
 801a670:	af00      	add	r7, sp, #0
 801a672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a674:	bf00      	nop
 801a676:	370c      	adds	r7, #12
 801a678:	46bd      	mov	sp, r7
 801a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67e:	4770      	bx	lr

0801a680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a680:	b480      	push	{r7}
 801a682:	b083      	sub	sp, #12
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a688:	bf00      	nop
 801a68a:	370c      	adds	r7, #12
 801a68c:	46bd      	mov	sp, r7
 801a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a692:	4770      	bx	lr

0801a694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a694:	b480      	push	{r7}
 801a696:	b083      	sub	sp, #12
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a69c:	bf00      	nop
 801a69e:	370c      	adds	r7, #12
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a6:	4770      	bx	lr

0801a6a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a6a8:	b480      	push	{r7}
 801a6aa:	b085      	sub	sp, #20
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
 801a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	4a40      	ldr	r2, [pc, #256]	; (801a7bc <TIM_Base_SetConfig+0x114>)
 801a6bc:	4293      	cmp	r3, r2
 801a6be:	d013      	beq.n	801a6e8 <TIM_Base_SetConfig+0x40>
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a6c6:	d00f      	beq.n	801a6e8 <TIM_Base_SetConfig+0x40>
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	4a3d      	ldr	r2, [pc, #244]	; (801a7c0 <TIM_Base_SetConfig+0x118>)
 801a6cc:	4293      	cmp	r3, r2
 801a6ce:	d00b      	beq.n	801a6e8 <TIM_Base_SetConfig+0x40>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	4a3c      	ldr	r2, [pc, #240]	; (801a7c4 <TIM_Base_SetConfig+0x11c>)
 801a6d4:	4293      	cmp	r3, r2
 801a6d6:	d007      	beq.n	801a6e8 <TIM_Base_SetConfig+0x40>
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	4a3b      	ldr	r2, [pc, #236]	; (801a7c8 <TIM_Base_SetConfig+0x120>)
 801a6dc:	4293      	cmp	r3, r2
 801a6de:	d003      	beq.n	801a6e8 <TIM_Base_SetConfig+0x40>
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	4a3a      	ldr	r2, [pc, #232]	; (801a7cc <TIM_Base_SetConfig+0x124>)
 801a6e4:	4293      	cmp	r3, r2
 801a6e6:	d108      	bne.n	801a6fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a6ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a6f0:	683b      	ldr	r3, [r7, #0]
 801a6f2:	685b      	ldr	r3, [r3, #4]
 801a6f4:	68fa      	ldr	r2, [r7, #12]
 801a6f6:	4313      	orrs	r3, r2
 801a6f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	4a2f      	ldr	r2, [pc, #188]	; (801a7bc <TIM_Base_SetConfig+0x114>)
 801a6fe:	4293      	cmp	r3, r2
 801a700:	d01f      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a708:	d01b      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	4a2c      	ldr	r2, [pc, #176]	; (801a7c0 <TIM_Base_SetConfig+0x118>)
 801a70e:	4293      	cmp	r3, r2
 801a710:	d017      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	4a2b      	ldr	r2, [pc, #172]	; (801a7c4 <TIM_Base_SetConfig+0x11c>)
 801a716:	4293      	cmp	r3, r2
 801a718:	d013      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	4a2a      	ldr	r2, [pc, #168]	; (801a7c8 <TIM_Base_SetConfig+0x120>)
 801a71e:	4293      	cmp	r3, r2
 801a720:	d00f      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	4a29      	ldr	r2, [pc, #164]	; (801a7cc <TIM_Base_SetConfig+0x124>)
 801a726:	4293      	cmp	r3, r2
 801a728:	d00b      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	4a28      	ldr	r2, [pc, #160]	; (801a7d0 <TIM_Base_SetConfig+0x128>)
 801a72e:	4293      	cmp	r3, r2
 801a730:	d007      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	4a27      	ldr	r2, [pc, #156]	; (801a7d4 <TIM_Base_SetConfig+0x12c>)
 801a736:	4293      	cmp	r3, r2
 801a738:	d003      	beq.n	801a742 <TIM_Base_SetConfig+0x9a>
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	4a26      	ldr	r2, [pc, #152]	; (801a7d8 <TIM_Base_SetConfig+0x130>)
 801a73e:	4293      	cmp	r3, r2
 801a740:	d108      	bne.n	801a754 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a74a:	683b      	ldr	r3, [r7, #0]
 801a74c:	68db      	ldr	r3, [r3, #12]
 801a74e:	68fa      	ldr	r2, [r7, #12]
 801a750:	4313      	orrs	r3, r2
 801a752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801a75a:	683b      	ldr	r3, [r7, #0]
 801a75c:	695b      	ldr	r3, [r3, #20]
 801a75e:	4313      	orrs	r3, r2
 801a760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	68fa      	ldr	r2, [r7, #12]
 801a766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a768:	683b      	ldr	r3, [r7, #0]
 801a76a:	689a      	ldr	r2, [r3, #8]
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a770:	683b      	ldr	r3, [r7, #0]
 801a772:	681a      	ldr	r2, [r3, #0]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	4a10      	ldr	r2, [pc, #64]	; (801a7bc <TIM_Base_SetConfig+0x114>)
 801a77c:	4293      	cmp	r3, r2
 801a77e:	d00f      	beq.n	801a7a0 <TIM_Base_SetConfig+0xf8>
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	4a12      	ldr	r2, [pc, #72]	; (801a7cc <TIM_Base_SetConfig+0x124>)
 801a784:	4293      	cmp	r3, r2
 801a786:	d00b      	beq.n	801a7a0 <TIM_Base_SetConfig+0xf8>
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	4a11      	ldr	r2, [pc, #68]	; (801a7d0 <TIM_Base_SetConfig+0x128>)
 801a78c:	4293      	cmp	r3, r2
 801a78e:	d007      	beq.n	801a7a0 <TIM_Base_SetConfig+0xf8>
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	4a10      	ldr	r2, [pc, #64]	; (801a7d4 <TIM_Base_SetConfig+0x12c>)
 801a794:	4293      	cmp	r3, r2
 801a796:	d003      	beq.n	801a7a0 <TIM_Base_SetConfig+0xf8>
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	4a0f      	ldr	r2, [pc, #60]	; (801a7d8 <TIM_Base_SetConfig+0x130>)
 801a79c:	4293      	cmp	r3, r2
 801a79e:	d103      	bne.n	801a7a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	691a      	ldr	r2, [r3, #16]
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	2201      	movs	r2, #1
 801a7ac:	615a      	str	r2, [r3, #20]
}
 801a7ae:	bf00      	nop
 801a7b0:	3714      	adds	r7, #20
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b8:	4770      	bx	lr
 801a7ba:	bf00      	nop
 801a7bc:	40012c00 	.word	0x40012c00
 801a7c0:	40000400 	.word	0x40000400
 801a7c4:	40000800 	.word	0x40000800
 801a7c8:	40000c00 	.word	0x40000c00
 801a7cc:	40013400 	.word	0x40013400
 801a7d0:	40014000 	.word	0x40014000
 801a7d4:	40014400 	.word	0x40014400
 801a7d8:	40014800 	.word	0x40014800

0801a7dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a7dc:	b480      	push	{r7}
 801a7de:	b087      	sub	sp, #28
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
 801a7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	6a1b      	ldr	r3, [r3, #32]
 801a7ea:	f023 0201 	bic.w	r2, r3, #1
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	6a1b      	ldr	r3, [r3, #32]
 801a7f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	699b      	ldr	r3, [r3, #24]
 801a802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	f023 0303 	bic.w	r3, r3, #3
 801a816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a818:	683b      	ldr	r3, [r7, #0]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	68fa      	ldr	r2, [r7, #12]
 801a81e:	4313      	orrs	r3, r2
 801a820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a822:	697b      	ldr	r3, [r7, #20]
 801a824:	f023 0302 	bic.w	r3, r3, #2
 801a828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a82a:	683b      	ldr	r3, [r7, #0]
 801a82c:	689b      	ldr	r3, [r3, #8]
 801a82e:	697a      	ldr	r2, [r7, #20]
 801a830:	4313      	orrs	r3, r2
 801a832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	4a2c      	ldr	r2, [pc, #176]	; (801a8e8 <TIM_OC1_SetConfig+0x10c>)
 801a838:	4293      	cmp	r3, r2
 801a83a:	d00f      	beq.n	801a85c <TIM_OC1_SetConfig+0x80>
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	4a2b      	ldr	r2, [pc, #172]	; (801a8ec <TIM_OC1_SetConfig+0x110>)
 801a840:	4293      	cmp	r3, r2
 801a842:	d00b      	beq.n	801a85c <TIM_OC1_SetConfig+0x80>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	4a2a      	ldr	r2, [pc, #168]	; (801a8f0 <TIM_OC1_SetConfig+0x114>)
 801a848:	4293      	cmp	r3, r2
 801a84a:	d007      	beq.n	801a85c <TIM_OC1_SetConfig+0x80>
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	4a29      	ldr	r2, [pc, #164]	; (801a8f4 <TIM_OC1_SetConfig+0x118>)
 801a850:	4293      	cmp	r3, r2
 801a852:	d003      	beq.n	801a85c <TIM_OC1_SetConfig+0x80>
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	4a28      	ldr	r2, [pc, #160]	; (801a8f8 <TIM_OC1_SetConfig+0x11c>)
 801a858:	4293      	cmp	r3, r2
 801a85a:	d10c      	bne.n	801a876 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	f023 0308 	bic.w	r3, r3, #8
 801a862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801a864:	683b      	ldr	r3, [r7, #0]
 801a866:	68db      	ldr	r3, [r3, #12]
 801a868:	697a      	ldr	r2, [r7, #20]
 801a86a:	4313      	orrs	r3, r2
 801a86c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	f023 0304 	bic.w	r3, r3, #4
 801a874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	4a1b      	ldr	r2, [pc, #108]	; (801a8e8 <TIM_OC1_SetConfig+0x10c>)
 801a87a:	4293      	cmp	r3, r2
 801a87c:	d00f      	beq.n	801a89e <TIM_OC1_SetConfig+0xc2>
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	4a1a      	ldr	r2, [pc, #104]	; (801a8ec <TIM_OC1_SetConfig+0x110>)
 801a882:	4293      	cmp	r3, r2
 801a884:	d00b      	beq.n	801a89e <TIM_OC1_SetConfig+0xc2>
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	4a19      	ldr	r2, [pc, #100]	; (801a8f0 <TIM_OC1_SetConfig+0x114>)
 801a88a:	4293      	cmp	r3, r2
 801a88c:	d007      	beq.n	801a89e <TIM_OC1_SetConfig+0xc2>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	4a18      	ldr	r2, [pc, #96]	; (801a8f4 <TIM_OC1_SetConfig+0x118>)
 801a892:	4293      	cmp	r3, r2
 801a894:	d003      	beq.n	801a89e <TIM_OC1_SetConfig+0xc2>
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	4a17      	ldr	r2, [pc, #92]	; (801a8f8 <TIM_OC1_SetConfig+0x11c>)
 801a89a:	4293      	cmp	r3, r2
 801a89c:	d111      	bne.n	801a8c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801a89e:	693b      	ldr	r3, [r7, #16]
 801a8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801a8a6:	693b      	ldr	r3, [r7, #16]
 801a8a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801a8ae:	683b      	ldr	r3, [r7, #0]
 801a8b0:	695b      	ldr	r3, [r3, #20]
 801a8b2:	693a      	ldr	r2, [r7, #16]
 801a8b4:	4313      	orrs	r3, r2
 801a8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801a8b8:	683b      	ldr	r3, [r7, #0]
 801a8ba:	699b      	ldr	r3, [r3, #24]
 801a8bc:	693a      	ldr	r2, [r7, #16]
 801a8be:	4313      	orrs	r3, r2
 801a8c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	693a      	ldr	r2, [r7, #16]
 801a8c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	68fa      	ldr	r2, [r7, #12]
 801a8cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	685a      	ldr	r2, [r3, #4]
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	697a      	ldr	r2, [r7, #20]
 801a8da:	621a      	str	r2, [r3, #32]
}
 801a8dc:	bf00      	nop
 801a8de:	371c      	adds	r7, #28
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e6:	4770      	bx	lr
 801a8e8:	40012c00 	.word	0x40012c00
 801a8ec:	40013400 	.word	0x40013400
 801a8f0:	40014000 	.word	0x40014000
 801a8f4:	40014400 	.word	0x40014400
 801a8f8:	40014800 	.word	0x40014800

0801a8fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a8fc:	b480      	push	{r7}
 801a8fe:	b087      	sub	sp, #28
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
 801a904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	6a1b      	ldr	r3, [r3, #32]
 801a90a:	f023 0210 	bic.w	r2, r3, #16
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	6a1b      	ldr	r3, [r3, #32]
 801a916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	685b      	ldr	r3, [r3, #4]
 801a91c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	699b      	ldr	r3, [r3, #24]
 801a922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801a92a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	021b      	lsls	r3, r3, #8
 801a93e:	68fa      	ldr	r2, [r7, #12]
 801a940:	4313      	orrs	r3, r2
 801a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a944:	697b      	ldr	r3, [r7, #20]
 801a946:	f023 0320 	bic.w	r3, r3, #32
 801a94a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	689b      	ldr	r3, [r3, #8]
 801a950:	011b      	lsls	r3, r3, #4
 801a952:	697a      	ldr	r2, [r7, #20]
 801a954:	4313      	orrs	r3, r2
 801a956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	4a28      	ldr	r2, [pc, #160]	; (801a9fc <TIM_OC2_SetConfig+0x100>)
 801a95c:	4293      	cmp	r3, r2
 801a95e:	d003      	beq.n	801a968 <TIM_OC2_SetConfig+0x6c>
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	4a27      	ldr	r2, [pc, #156]	; (801aa00 <TIM_OC2_SetConfig+0x104>)
 801a964:	4293      	cmp	r3, r2
 801a966:	d10d      	bne.n	801a984 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801a968:	697b      	ldr	r3, [r7, #20]
 801a96a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a96e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801a970:	683b      	ldr	r3, [r7, #0]
 801a972:	68db      	ldr	r3, [r3, #12]
 801a974:	011b      	lsls	r3, r3, #4
 801a976:	697a      	ldr	r2, [r7, #20]
 801a978:	4313      	orrs	r3, r2
 801a97a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	4a1d      	ldr	r2, [pc, #116]	; (801a9fc <TIM_OC2_SetConfig+0x100>)
 801a988:	4293      	cmp	r3, r2
 801a98a:	d00f      	beq.n	801a9ac <TIM_OC2_SetConfig+0xb0>
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	4a1c      	ldr	r2, [pc, #112]	; (801aa00 <TIM_OC2_SetConfig+0x104>)
 801a990:	4293      	cmp	r3, r2
 801a992:	d00b      	beq.n	801a9ac <TIM_OC2_SetConfig+0xb0>
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	4a1b      	ldr	r2, [pc, #108]	; (801aa04 <TIM_OC2_SetConfig+0x108>)
 801a998:	4293      	cmp	r3, r2
 801a99a:	d007      	beq.n	801a9ac <TIM_OC2_SetConfig+0xb0>
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	4a1a      	ldr	r2, [pc, #104]	; (801aa08 <TIM_OC2_SetConfig+0x10c>)
 801a9a0:	4293      	cmp	r3, r2
 801a9a2:	d003      	beq.n	801a9ac <TIM_OC2_SetConfig+0xb0>
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	4a19      	ldr	r2, [pc, #100]	; (801aa0c <TIM_OC2_SetConfig+0x110>)
 801a9a8:	4293      	cmp	r3, r2
 801a9aa:	d113      	bne.n	801a9d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801a9ac:	693b      	ldr	r3, [r7, #16]
 801a9ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a9b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801a9b4:	693b      	ldr	r3, [r7, #16]
 801a9b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a9ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801a9bc:	683b      	ldr	r3, [r7, #0]
 801a9be:	695b      	ldr	r3, [r3, #20]
 801a9c0:	009b      	lsls	r3, r3, #2
 801a9c2:	693a      	ldr	r2, [r7, #16]
 801a9c4:	4313      	orrs	r3, r2
 801a9c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801a9c8:	683b      	ldr	r3, [r7, #0]
 801a9ca:	699b      	ldr	r3, [r3, #24]
 801a9cc:	009b      	lsls	r3, r3, #2
 801a9ce:	693a      	ldr	r2, [r7, #16]
 801a9d0:	4313      	orrs	r3, r2
 801a9d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	693a      	ldr	r2, [r7, #16]
 801a9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	68fa      	ldr	r2, [r7, #12]
 801a9de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	685a      	ldr	r2, [r3, #4]
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	697a      	ldr	r2, [r7, #20]
 801a9ec:	621a      	str	r2, [r3, #32]
}
 801a9ee:	bf00      	nop
 801a9f0:	371c      	adds	r7, #28
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f8:	4770      	bx	lr
 801a9fa:	bf00      	nop
 801a9fc:	40012c00 	.word	0x40012c00
 801aa00:	40013400 	.word	0x40013400
 801aa04:	40014000 	.word	0x40014000
 801aa08:	40014400 	.word	0x40014400
 801aa0c:	40014800 	.word	0x40014800

0801aa10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801aa10:	b480      	push	{r7}
 801aa12:	b087      	sub	sp, #28
 801aa14:	af00      	add	r7, sp, #0
 801aa16:	6078      	str	r0, [r7, #4]
 801aa18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	6a1b      	ldr	r3, [r3, #32]
 801aa1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	6a1b      	ldr	r3, [r3, #32]
 801aa2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	685b      	ldr	r3, [r3, #4]
 801aa30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	69db      	ldr	r3, [r3, #28]
 801aa36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801aa3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aa42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	f023 0303 	bic.w	r3, r3, #3
 801aa4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	68fa      	ldr	r2, [r7, #12]
 801aa52:	4313      	orrs	r3, r2
 801aa54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801aa56:	697b      	ldr	r3, [r7, #20]
 801aa58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801aa5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	689b      	ldr	r3, [r3, #8]
 801aa62:	021b      	lsls	r3, r3, #8
 801aa64:	697a      	ldr	r2, [r7, #20]
 801aa66:	4313      	orrs	r3, r2
 801aa68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	4a27      	ldr	r2, [pc, #156]	; (801ab0c <TIM_OC3_SetConfig+0xfc>)
 801aa6e:	4293      	cmp	r3, r2
 801aa70:	d003      	beq.n	801aa7a <TIM_OC3_SetConfig+0x6a>
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	4a26      	ldr	r2, [pc, #152]	; (801ab10 <TIM_OC3_SetConfig+0x100>)
 801aa76:	4293      	cmp	r3, r2
 801aa78:	d10d      	bne.n	801aa96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801aa80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801aa82:	683b      	ldr	r3, [r7, #0]
 801aa84:	68db      	ldr	r3, [r3, #12]
 801aa86:	021b      	lsls	r3, r3, #8
 801aa88:	697a      	ldr	r2, [r7, #20]
 801aa8a:	4313      	orrs	r3, r2
 801aa8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801aa94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	4a1c      	ldr	r2, [pc, #112]	; (801ab0c <TIM_OC3_SetConfig+0xfc>)
 801aa9a:	4293      	cmp	r3, r2
 801aa9c:	d00f      	beq.n	801aabe <TIM_OC3_SetConfig+0xae>
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	4a1b      	ldr	r2, [pc, #108]	; (801ab10 <TIM_OC3_SetConfig+0x100>)
 801aaa2:	4293      	cmp	r3, r2
 801aaa4:	d00b      	beq.n	801aabe <TIM_OC3_SetConfig+0xae>
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	4a1a      	ldr	r2, [pc, #104]	; (801ab14 <TIM_OC3_SetConfig+0x104>)
 801aaaa:	4293      	cmp	r3, r2
 801aaac:	d007      	beq.n	801aabe <TIM_OC3_SetConfig+0xae>
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	4a19      	ldr	r2, [pc, #100]	; (801ab18 <TIM_OC3_SetConfig+0x108>)
 801aab2:	4293      	cmp	r3, r2
 801aab4:	d003      	beq.n	801aabe <TIM_OC3_SetConfig+0xae>
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	4a18      	ldr	r2, [pc, #96]	; (801ab1c <TIM_OC3_SetConfig+0x10c>)
 801aaba:	4293      	cmp	r3, r2
 801aabc:	d113      	bne.n	801aae6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801aac6:	693b      	ldr	r3, [r7, #16]
 801aac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801aacc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801aace:	683b      	ldr	r3, [r7, #0]
 801aad0:	695b      	ldr	r3, [r3, #20]
 801aad2:	011b      	lsls	r3, r3, #4
 801aad4:	693a      	ldr	r2, [r7, #16]
 801aad6:	4313      	orrs	r3, r2
 801aad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801aada:	683b      	ldr	r3, [r7, #0]
 801aadc:	699b      	ldr	r3, [r3, #24]
 801aade:	011b      	lsls	r3, r3, #4
 801aae0:	693a      	ldr	r2, [r7, #16]
 801aae2:	4313      	orrs	r3, r2
 801aae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	693a      	ldr	r2, [r7, #16]
 801aaea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	68fa      	ldr	r2, [r7, #12]
 801aaf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	685a      	ldr	r2, [r3, #4]
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	697a      	ldr	r2, [r7, #20]
 801aafe:	621a      	str	r2, [r3, #32]
}
 801ab00:	bf00      	nop
 801ab02:	371c      	adds	r7, #28
 801ab04:	46bd      	mov	sp, r7
 801ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0a:	4770      	bx	lr
 801ab0c:	40012c00 	.word	0x40012c00
 801ab10:	40013400 	.word	0x40013400
 801ab14:	40014000 	.word	0x40014000
 801ab18:	40014400 	.word	0x40014400
 801ab1c:	40014800 	.word	0x40014800

0801ab20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ab20:	b480      	push	{r7}
 801ab22:	b087      	sub	sp, #28
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	6a1b      	ldr	r3, [r3, #32]
 801ab2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	6a1b      	ldr	r3, [r3, #32]
 801ab3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	685b      	ldr	r3, [r3, #4]
 801ab40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	69db      	ldr	r3, [r3, #28]
 801ab46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ab4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ab52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ab5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	021b      	lsls	r3, r3, #8
 801ab62:	68fa      	ldr	r2, [r7, #12]
 801ab64:	4313      	orrs	r3, r2
 801ab66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ab68:	693b      	ldr	r3, [r7, #16]
 801ab6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ab6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ab70:	683b      	ldr	r3, [r7, #0]
 801ab72:	689b      	ldr	r3, [r3, #8]
 801ab74:	031b      	lsls	r3, r3, #12
 801ab76:	693a      	ldr	r2, [r7, #16]
 801ab78:	4313      	orrs	r3, r2
 801ab7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	4a18      	ldr	r2, [pc, #96]	; (801abe0 <TIM_OC4_SetConfig+0xc0>)
 801ab80:	4293      	cmp	r3, r2
 801ab82:	d00f      	beq.n	801aba4 <TIM_OC4_SetConfig+0x84>
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	4a17      	ldr	r2, [pc, #92]	; (801abe4 <TIM_OC4_SetConfig+0xc4>)
 801ab88:	4293      	cmp	r3, r2
 801ab8a:	d00b      	beq.n	801aba4 <TIM_OC4_SetConfig+0x84>
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	4a16      	ldr	r2, [pc, #88]	; (801abe8 <TIM_OC4_SetConfig+0xc8>)
 801ab90:	4293      	cmp	r3, r2
 801ab92:	d007      	beq.n	801aba4 <TIM_OC4_SetConfig+0x84>
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	4a15      	ldr	r2, [pc, #84]	; (801abec <TIM_OC4_SetConfig+0xcc>)
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	d003      	beq.n	801aba4 <TIM_OC4_SetConfig+0x84>
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	4a14      	ldr	r2, [pc, #80]	; (801abf0 <TIM_OC4_SetConfig+0xd0>)
 801aba0:	4293      	cmp	r3, r2
 801aba2:	d109      	bne.n	801abb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801aba4:	697b      	ldr	r3, [r7, #20]
 801aba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801abaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	695b      	ldr	r3, [r3, #20]
 801abb0:	019b      	lsls	r3, r3, #6
 801abb2:	697a      	ldr	r2, [r7, #20]
 801abb4:	4313      	orrs	r3, r2
 801abb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	697a      	ldr	r2, [r7, #20]
 801abbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	68fa      	ldr	r2, [r7, #12]
 801abc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	685a      	ldr	r2, [r3, #4]
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	693a      	ldr	r2, [r7, #16]
 801abd0:	621a      	str	r2, [r3, #32]
}
 801abd2:	bf00      	nop
 801abd4:	371c      	adds	r7, #28
 801abd6:	46bd      	mov	sp, r7
 801abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop
 801abe0:	40012c00 	.word	0x40012c00
 801abe4:	40013400 	.word	0x40013400
 801abe8:	40014000 	.word	0x40014000
 801abec:	40014400 	.word	0x40014400
 801abf0:	40014800 	.word	0x40014800

0801abf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801abf4:	b480      	push	{r7}
 801abf6:	b087      	sub	sp, #28
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
 801abfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	6a1b      	ldr	r3, [r3, #32]
 801ac02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	6a1b      	ldr	r3, [r3, #32]
 801ac0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	685b      	ldr	r3, [r3, #4]
 801ac14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ac22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ac26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ac28:	683b      	ldr	r3, [r7, #0]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	68fa      	ldr	r2, [r7, #12]
 801ac2e:	4313      	orrs	r3, r2
 801ac30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801ac32:	693b      	ldr	r3, [r7, #16]
 801ac34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ac38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801ac3a:	683b      	ldr	r3, [r7, #0]
 801ac3c:	689b      	ldr	r3, [r3, #8]
 801ac3e:	041b      	lsls	r3, r3, #16
 801ac40:	693a      	ldr	r2, [r7, #16]
 801ac42:	4313      	orrs	r3, r2
 801ac44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	4a17      	ldr	r2, [pc, #92]	; (801aca8 <TIM_OC5_SetConfig+0xb4>)
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	d00f      	beq.n	801ac6e <TIM_OC5_SetConfig+0x7a>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	4a16      	ldr	r2, [pc, #88]	; (801acac <TIM_OC5_SetConfig+0xb8>)
 801ac52:	4293      	cmp	r3, r2
 801ac54:	d00b      	beq.n	801ac6e <TIM_OC5_SetConfig+0x7a>
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	4a15      	ldr	r2, [pc, #84]	; (801acb0 <TIM_OC5_SetConfig+0xbc>)
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	d007      	beq.n	801ac6e <TIM_OC5_SetConfig+0x7a>
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	4a14      	ldr	r2, [pc, #80]	; (801acb4 <TIM_OC5_SetConfig+0xc0>)
 801ac62:	4293      	cmp	r3, r2
 801ac64:	d003      	beq.n	801ac6e <TIM_OC5_SetConfig+0x7a>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	4a13      	ldr	r2, [pc, #76]	; (801acb8 <TIM_OC5_SetConfig+0xc4>)
 801ac6a:	4293      	cmp	r3, r2
 801ac6c:	d109      	bne.n	801ac82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ac6e:	697b      	ldr	r3, [r7, #20]
 801ac70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ac74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ac76:	683b      	ldr	r3, [r7, #0]
 801ac78:	695b      	ldr	r3, [r3, #20]
 801ac7a:	021b      	lsls	r3, r3, #8
 801ac7c:	697a      	ldr	r2, [r7, #20]
 801ac7e:	4313      	orrs	r3, r2
 801ac80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	697a      	ldr	r2, [r7, #20]
 801ac86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	68fa      	ldr	r2, [r7, #12]
 801ac8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	685a      	ldr	r2, [r3, #4]
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	693a      	ldr	r2, [r7, #16]
 801ac9a:	621a      	str	r2, [r3, #32]
}
 801ac9c:	bf00      	nop
 801ac9e:	371c      	adds	r7, #28
 801aca0:	46bd      	mov	sp, r7
 801aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aca6:	4770      	bx	lr
 801aca8:	40012c00 	.word	0x40012c00
 801acac:	40013400 	.word	0x40013400
 801acb0:	40014000 	.word	0x40014000
 801acb4:	40014400 	.word	0x40014400
 801acb8:	40014800 	.word	0x40014800

0801acbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801acbc:	b480      	push	{r7}
 801acbe:	b087      	sub	sp, #28
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	6a1b      	ldr	r3, [r3, #32]
 801acca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	6a1b      	ldr	r3, [r3, #32]
 801acd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	685b      	ldr	r3, [r3, #4]
 801acdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801acea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801acee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	021b      	lsls	r3, r3, #8
 801acf6:	68fa      	ldr	r2, [r7, #12]
 801acf8:	4313      	orrs	r3, r2
 801acfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801acfc:	693b      	ldr	r3, [r7, #16]
 801acfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ad02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ad04:	683b      	ldr	r3, [r7, #0]
 801ad06:	689b      	ldr	r3, [r3, #8]
 801ad08:	051b      	lsls	r3, r3, #20
 801ad0a:	693a      	ldr	r2, [r7, #16]
 801ad0c:	4313      	orrs	r3, r2
 801ad0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	4a18      	ldr	r2, [pc, #96]	; (801ad74 <TIM_OC6_SetConfig+0xb8>)
 801ad14:	4293      	cmp	r3, r2
 801ad16:	d00f      	beq.n	801ad38 <TIM_OC6_SetConfig+0x7c>
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	4a17      	ldr	r2, [pc, #92]	; (801ad78 <TIM_OC6_SetConfig+0xbc>)
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	d00b      	beq.n	801ad38 <TIM_OC6_SetConfig+0x7c>
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	4a16      	ldr	r2, [pc, #88]	; (801ad7c <TIM_OC6_SetConfig+0xc0>)
 801ad24:	4293      	cmp	r3, r2
 801ad26:	d007      	beq.n	801ad38 <TIM_OC6_SetConfig+0x7c>
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	4a15      	ldr	r2, [pc, #84]	; (801ad80 <TIM_OC6_SetConfig+0xc4>)
 801ad2c:	4293      	cmp	r3, r2
 801ad2e:	d003      	beq.n	801ad38 <TIM_OC6_SetConfig+0x7c>
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	4a14      	ldr	r2, [pc, #80]	; (801ad84 <TIM_OC6_SetConfig+0xc8>)
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d109      	bne.n	801ad4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ad38:	697b      	ldr	r3, [r7, #20]
 801ad3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ad3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	695b      	ldr	r3, [r3, #20]
 801ad44:	029b      	lsls	r3, r3, #10
 801ad46:	697a      	ldr	r2, [r7, #20]
 801ad48:	4313      	orrs	r3, r2
 801ad4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	697a      	ldr	r2, [r7, #20]
 801ad50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	68fa      	ldr	r2, [r7, #12]
 801ad56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ad58:	683b      	ldr	r3, [r7, #0]
 801ad5a:	685a      	ldr	r2, [r3, #4]
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	693a      	ldr	r2, [r7, #16]
 801ad64:	621a      	str	r2, [r3, #32]
}
 801ad66:	bf00      	nop
 801ad68:	371c      	adds	r7, #28
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad70:	4770      	bx	lr
 801ad72:	bf00      	nop
 801ad74:	40012c00 	.word	0x40012c00
 801ad78:	40013400 	.word	0x40013400
 801ad7c:	40014000 	.word	0x40014000
 801ad80:	40014400 	.word	0x40014400
 801ad84:	40014800 	.word	0x40014800

0801ad88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801ad88:	b480      	push	{r7}
 801ad8a:	b087      	sub	sp, #28
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	60f8      	str	r0, [r7, #12]
 801ad90:	60b9      	str	r1, [r7, #8]
 801ad92:	607a      	str	r2, [r7, #4]
 801ad94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ad96:	68fb      	ldr	r3, [r7, #12]
 801ad98:	6a1b      	ldr	r3, [r3, #32]
 801ad9a:	f023 0201 	bic.w	r2, r3, #1
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	699b      	ldr	r3, [r3, #24]
 801ada6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	6a1b      	ldr	r3, [r3, #32]
 801adac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	4a26      	ldr	r2, [pc, #152]	; (801ae4c <TIM_TI1_SetConfig+0xc4>)
 801adb2:	4293      	cmp	r3, r2
 801adb4:	d017      	beq.n	801ade6 <TIM_TI1_SetConfig+0x5e>
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801adbc:	d013      	beq.n	801ade6 <TIM_TI1_SetConfig+0x5e>
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	4a23      	ldr	r2, [pc, #140]	; (801ae50 <TIM_TI1_SetConfig+0xc8>)
 801adc2:	4293      	cmp	r3, r2
 801adc4:	d00f      	beq.n	801ade6 <TIM_TI1_SetConfig+0x5e>
 801adc6:	68fb      	ldr	r3, [r7, #12]
 801adc8:	4a22      	ldr	r2, [pc, #136]	; (801ae54 <TIM_TI1_SetConfig+0xcc>)
 801adca:	4293      	cmp	r3, r2
 801adcc:	d00b      	beq.n	801ade6 <TIM_TI1_SetConfig+0x5e>
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	4a21      	ldr	r2, [pc, #132]	; (801ae58 <TIM_TI1_SetConfig+0xd0>)
 801add2:	4293      	cmp	r3, r2
 801add4:	d007      	beq.n	801ade6 <TIM_TI1_SetConfig+0x5e>
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	4a20      	ldr	r2, [pc, #128]	; (801ae5c <TIM_TI1_SetConfig+0xd4>)
 801adda:	4293      	cmp	r3, r2
 801addc:	d003      	beq.n	801ade6 <TIM_TI1_SetConfig+0x5e>
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	4a1f      	ldr	r2, [pc, #124]	; (801ae60 <TIM_TI1_SetConfig+0xd8>)
 801ade2:	4293      	cmp	r3, r2
 801ade4:	d101      	bne.n	801adea <TIM_TI1_SetConfig+0x62>
 801ade6:	2301      	movs	r3, #1
 801ade8:	e000      	b.n	801adec <TIM_TI1_SetConfig+0x64>
 801adea:	2300      	movs	r3, #0
 801adec:	2b00      	cmp	r3, #0
 801adee:	d008      	beq.n	801ae02 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801adf0:	697b      	ldr	r3, [r7, #20]
 801adf2:	f023 0303 	bic.w	r3, r3, #3
 801adf6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801adf8:	697a      	ldr	r2, [r7, #20]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	4313      	orrs	r3, r2
 801adfe:	617b      	str	r3, [r7, #20]
 801ae00:	e003      	b.n	801ae0a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801ae02:	697b      	ldr	r3, [r7, #20]
 801ae04:	f043 0301 	orr.w	r3, r3, #1
 801ae08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ae0a:	697b      	ldr	r3, [r7, #20]
 801ae0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ae10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801ae12:	683b      	ldr	r3, [r7, #0]
 801ae14:	011b      	lsls	r3, r3, #4
 801ae16:	b2db      	uxtb	r3, r3
 801ae18:	697a      	ldr	r2, [r7, #20]
 801ae1a:	4313      	orrs	r3, r2
 801ae1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ae1e:	693b      	ldr	r3, [r7, #16]
 801ae20:	f023 030a 	bic.w	r3, r3, #10
 801ae24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801ae26:	68bb      	ldr	r3, [r7, #8]
 801ae28:	f003 030a 	and.w	r3, r3, #10
 801ae2c:	693a      	ldr	r2, [r7, #16]
 801ae2e:	4313      	orrs	r3, r2
 801ae30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ae32:	68fb      	ldr	r3, [r7, #12]
 801ae34:	697a      	ldr	r2, [r7, #20]
 801ae36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	693a      	ldr	r2, [r7, #16]
 801ae3c:	621a      	str	r2, [r3, #32]
}
 801ae3e:	bf00      	nop
 801ae40:	371c      	adds	r7, #28
 801ae42:	46bd      	mov	sp, r7
 801ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae48:	4770      	bx	lr
 801ae4a:	bf00      	nop
 801ae4c:	40012c00 	.word	0x40012c00
 801ae50:	40000400 	.word	0x40000400
 801ae54:	40000800 	.word	0x40000800
 801ae58:	40000c00 	.word	0x40000c00
 801ae5c:	40013400 	.word	0x40013400
 801ae60:	40014000 	.word	0x40014000

0801ae64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ae64:	b480      	push	{r7}
 801ae66:	b087      	sub	sp, #28
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	60f8      	str	r0, [r7, #12]
 801ae6c:	60b9      	str	r1, [r7, #8]
 801ae6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ae70:	68fb      	ldr	r3, [r7, #12]
 801ae72:	6a1b      	ldr	r3, [r3, #32]
 801ae74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ae76:	68fb      	ldr	r3, [r7, #12]
 801ae78:	6a1b      	ldr	r3, [r3, #32]
 801ae7a:	f023 0201 	bic.w	r2, r3, #1
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	699b      	ldr	r3, [r3, #24]
 801ae86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ae88:	693b      	ldr	r3, [r7, #16]
 801ae8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ae8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	011b      	lsls	r3, r3, #4
 801ae94:	693a      	ldr	r2, [r7, #16]
 801ae96:	4313      	orrs	r3, r2
 801ae98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ae9a:	697b      	ldr	r3, [r7, #20]
 801ae9c:	f023 030a 	bic.w	r3, r3, #10
 801aea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801aea2:	697a      	ldr	r2, [r7, #20]
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	4313      	orrs	r3, r2
 801aea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	693a      	ldr	r2, [r7, #16]
 801aeae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	697a      	ldr	r2, [r7, #20]
 801aeb4:	621a      	str	r2, [r3, #32]
}
 801aeb6:	bf00      	nop
 801aeb8:	371c      	adds	r7, #28
 801aeba:	46bd      	mov	sp, r7
 801aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec0:	4770      	bx	lr

0801aec2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801aec2:	b480      	push	{r7}
 801aec4:	b087      	sub	sp, #28
 801aec6:	af00      	add	r7, sp, #0
 801aec8:	60f8      	str	r0, [r7, #12]
 801aeca:	60b9      	str	r1, [r7, #8]
 801aecc:	607a      	str	r2, [r7, #4]
 801aece:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	6a1b      	ldr	r3, [r3, #32]
 801aed4:	f023 0210 	bic.w	r2, r3, #16
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801aedc:	68fb      	ldr	r3, [r7, #12]
 801aede:	699b      	ldr	r3, [r3, #24]
 801aee0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	6a1b      	ldr	r3, [r3, #32]
 801aee6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801aee8:	697b      	ldr	r3, [r7, #20]
 801aeea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801aeee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	021b      	lsls	r3, r3, #8
 801aef4:	697a      	ldr	r2, [r7, #20]
 801aef6:	4313      	orrs	r3, r2
 801aef8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801aefa:	697b      	ldr	r3, [r7, #20]
 801aefc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801af00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801af02:	683b      	ldr	r3, [r7, #0]
 801af04:	031b      	lsls	r3, r3, #12
 801af06:	b29b      	uxth	r3, r3
 801af08:	697a      	ldr	r2, [r7, #20]
 801af0a:	4313      	orrs	r3, r2
 801af0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801af0e:	693b      	ldr	r3, [r7, #16]
 801af10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801af14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801af16:	68bb      	ldr	r3, [r7, #8]
 801af18:	011b      	lsls	r3, r3, #4
 801af1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801af1e:	693a      	ldr	r2, [r7, #16]
 801af20:	4313      	orrs	r3, r2
 801af22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	697a      	ldr	r2, [r7, #20]
 801af28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	693a      	ldr	r2, [r7, #16]
 801af2e:	621a      	str	r2, [r3, #32]
}
 801af30:	bf00      	nop
 801af32:	371c      	adds	r7, #28
 801af34:	46bd      	mov	sp, r7
 801af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3a:	4770      	bx	lr

0801af3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801af3c:	b480      	push	{r7}
 801af3e:	b087      	sub	sp, #28
 801af40:	af00      	add	r7, sp, #0
 801af42:	60f8      	str	r0, [r7, #12]
 801af44:	60b9      	str	r1, [r7, #8]
 801af46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	6a1b      	ldr	r3, [r3, #32]
 801af4c:	f023 0210 	bic.w	r2, r3, #16
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	699b      	ldr	r3, [r3, #24]
 801af58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	6a1b      	ldr	r3, [r3, #32]
 801af5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801af60:	697b      	ldr	r3, [r7, #20]
 801af62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801af66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	031b      	lsls	r3, r3, #12
 801af6c:	697a      	ldr	r2, [r7, #20]
 801af6e:	4313      	orrs	r3, r2
 801af70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801af72:	693b      	ldr	r3, [r7, #16]
 801af74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801af78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	011b      	lsls	r3, r3, #4
 801af7e:	693a      	ldr	r2, [r7, #16]
 801af80:	4313      	orrs	r3, r2
 801af82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	697a      	ldr	r2, [r7, #20]
 801af88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	693a      	ldr	r2, [r7, #16]
 801af8e:	621a      	str	r2, [r3, #32]
}
 801af90:	bf00      	nop
 801af92:	371c      	adds	r7, #28
 801af94:	46bd      	mov	sp, r7
 801af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9a:	4770      	bx	lr

0801af9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801af9c:	b480      	push	{r7}
 801af9e:	b087      	sub	sp, #28
 801afa0:	af00      	add	r7, sp, #0
 801afa2:	60f8      	str	r0, [r7, #12]
 801afa4:	60b9      	str	r1, [r7, #8]
 801afa6:	607a      	str	r2, [r7, #4]
 801afa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	6a1b      	ldr	r3, [r3, #32]
 801afae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	69db      	ldr	r3, [r3, #28]
 801afba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	6a1b      	ldr	r3, [r3, #32]
 801afc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801afc2:	697b      	ldr	r3, [r7, #20]
 801afc4:	f023 0303 	bic.w	r3, r3, #3
 801afc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801afca:	697a      	ldr	r2, [r7, #20]
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	4313      	orrs	r3, r2
 801afd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801afd2:	697b      	ldr	r3, [r7, #20]
 801afd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801afd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801afda:	683b      	ldr	r3, [r7, #0]
 801afdc:	011b      	lsls	r3, r3, #4
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	697a      	ldr	r2, [r7, #20]
 801afe2:	4313      	orrs	r3, r2
 801afe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801afe6:	693b      	ldr	r3, [r7, #16]
 801afe8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801afec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801afee:	68bb      	ldr	r3, [r7, #8]
 801aff0:	021b      	lsls	r3, r3, #8
 801aff2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801aff6:	693a      	ldr	r2, [r7, #16]
 801aff8:	4313      	orrs	r3, r2
 801affa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	697a      	ldr	r2, [r7, #20]
 801b000:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	693a      	ldr	r2, [r7, #16]
 801b006:	621a      	str	r2, [r3, #32]
}
 801b008:	bf00      	nop
 801b00a:	371c      	adds	r7, #28
 801b00c:	46bd      	mov	sp, r7
 801b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b012:	4770      	bx	lr

0801b014 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b014:	b480      	push	{r7}
 801b016:	b087      	sub	sp, #28
 801b018:	af00      	add	r7, sp, #0
 801b01a:	60f8      	str	r0, [r7, #12]
 801b01c:	60b9      	str	r1, [r7, #8]
 801b01e:	607a      	str	r2, [r7, #4]
 801b020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	6a1b      	ldr	r3, [r3, #32]
 801b026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	69db      	ldr	r3, [r3, #28]
 801b032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	6a1b      	ldr	r3, [r3, #32]
 801b038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801b03a:	697b      	ldr	r3, [r7, #20]
 801b03c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b040:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	021b      	lsls	r3, r3, #8
 801b046:	697a      	ldr	r2, [r7, #20]
 801b048:	4313      	orrs	r3, r2
 801b04a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b052:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801b054:	683b      	ldr	r3, [r7, #0]
 801b056:	031b      	lsls	r3, r3, #12
 801b058:	b29b      	uxth	r3, r3
 801b05a:	697a      	ldr	r2, [r7, #20]
 801b05c:	4313      	orrs	r3, r2
 801b05e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801b060:	693b      	ldr	r3, [r7, #16]
 801b062:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801b066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801b068:	68bb      	ldr	r3, [r7, #8]
 801b06a:	031b      	lsls	r3, r3, #12
 801b06c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801b070:	693a      	ldr	r2, [r7, #16]
 801b072:	4313      	orrs	r3, r2
 801b074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	697a      	ldr	r2, [r7, #20]
 801b07a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	693a      	ldr	r2, [r7, #16]
 801b080:	621a      	str	r2, [r3, #32]
}
 801b082:	bf00      	nop
 801b084:	371c      	adds	r7, #28
 801b086:	46bd      	mov	sp, r7
 801b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b08c:	4770      	bx	lr

0801b08e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b08e:	b480      	push	{r7}
 801b090:	b085      	sub	sp, #20
 801b092:	af00      	add	r7, sp, #0
 801b094:	6078      	str	r0, [r7, #4]
 801b096:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	689b      	ldr	r3, [r3, #8]
 801b09c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801b0a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b0a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b0aa:	683a      	ldr	r2, [r7, #0]
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	4313      	orrs	r3, r2
 801b0b0:	f043 0307 	orr.w	r3, r3, #7
 801b0b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	68fa      	ldr	r2, [r7, #12]
 801b0ba:	609a      	str	r2, [r3, #8]
}
 801b0bc:	bf00      	nop
 801b0be:	3714      	adds	r7, #20
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0c6:	4770      	bx	lr

0801b0c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b0c8:	b480      	push	{r7}
 801b0ca:	b087      	sub	sp, #28
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	60f8      	str	r0, [r7, #12]
 801b0d0:	60b9      	str	r1, [r7, #8]
 801b0d2:	607a      	str	r2, [r7, #4]
 801b0d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	689b      	ldr	r3, [r3, #8]
 801b0da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b0dc:	697b      	ldr	r3, [r7, #20]
 801b0de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b0e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	021a      	lsls	r2, r3, #8
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	431a      	orrs	r2, r3
 801b0ec:	68bb      	ldr	r3, [r7, #8]
 801b0ee:	4313      	orrs	r3, r2
 801b0f0:	697a      	ldr	r2, [r7, #20]
 801b0f2:	4313      	orrs	r3, r2
 801b0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	697a      	ldr	r2, [r7, #20]
 801b0fa:	609a      	str	r2, [r3, #8]
}
 801b0fc:	bf00      	nop
 801b0fe:	371c      	adds	r7, #28
 801b100:	46bd      	mov	sp, r7
 801b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b106:	4770      	bx	lr

0801b108 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b108:	b480      	push	{r7}
 801b10a:	b087      	sub	sp, #28
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	60f8      	str	r0, [r7, #12]
 801b110:	60b9      	str	r1, [r7, #8]
 801b112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b114:	68bb      	ldr	r3, [r7, #8]
 801b116:	f003 031f 	and.w	r3, r3, #31
 801b11a:	2201      	movs	r2, #1
 801b11c:	fa02 f303 	lsl.w	r3, r2, r3
 801b120:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	6a1a      	ldr	r2, [r3, #32]
 801b126:	697b      	ldr	r3, [r7, #20]
 801b128:	43db      	mvns	r3, r3
 801b12a:	401a      	ands	r2, r3
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	6a1a      	ldr	r2, [r3, #32]
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	f003 031f 	and.w	r3, r3, #31
 801b13a:	6879      	ldr	r1, [r7, #4]
 801b13c:	fa01 f303 	lsl.w	r3, r1, r3
 801b140:	431a      	orrs	r2, r3
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	621a      	str	r2, [r3, #32]
}
 801b146:	bf00      	nop
 801b148:	371c      	adds	r7, #28
 801b14a:	46bd      	mov	sp, r7
 801b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b150:	4770      	bx	lr
	...

0801b154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b154:	b480      	push	{r7}
 801b156:	b085      	sub	sp, #20
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
 801b15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b164:	2b01      	cmp	r3, #1
 801b166:	d101      	bne.n	801b16c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b168:	2302      	movs	r3, #2
 801b16a:	e068      	b.n	801b23e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	2201      	movs	r2, #1
 801b170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	2202      	movs	r2, #2
 801b178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	685b      	ldr	r3, [r3, #4]
 801b182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	689b      	ldr	r3, [r3, #8]
 801b18a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	4a2e      	ldr	r2, [pc, #184]	; (801b24c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801b192:	4293      	cmp	r3, r2
 801b194:	d004      	beq.n	801b1a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	4a2d      	ldr	r2, [pc, #180]	; (801b250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801b19c:	4293      	cmp	r3, r2
 801b19e:	d108      	bne.n	801b1b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801b1a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	685b      	ldr	r3, [r3, #4]
 801b1ac:	68fa      	ldr	r2, [r7, #12]
 801b1ae:	4313      	orrs	r3, r2
 801b1b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b1b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b1ba:	683b      	ldr	r3, [r7, #0]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	68fa      	ldr	r2, [r7, #12]
 801b1c0:	4313      	orrs	r3, r2
 801b1c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	68fa      	ldr	r2, [r7, #12]
 801b1ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	4a1e      	ldr	r2, [pc, #120]	; (801b24c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801b1d2:	4293      	cmp	r3, r2
 801b1d4:	d01d      	beq.n	801b212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b1de:	d018      	beq.n	801b212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	4a1b      	ldr	r2, [pc, #108]	; (801b254 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801b1e6:	4293      	cmp	r3, r2
 801b1e8:	d013      	beq.n	801b212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	4a1a      	ldr	r2, [pc, #104]	; (801b258 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801b1f0:	4293      	cmp	r3, r2
 801b1f2:	d00e      	beq.n	801b212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	4a18      	ldr	r2, [pc, #96]	; (801b25c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801b1fa:	4293      	cmp	r3, r2
 801b1fc:	d009      	beq.n	801b212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4a13      	ldr	r2, [pc, #76]	; (801b250 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801b204:	4293      	cmp	r3, r2
 801b206:	d004      	beq.n	801b212 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	4a14      	ldr	r2, [pc, #80]	; (801b260 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801b20e:	4293      	cmp	r3, r2
 801b210:	d10c      	bne.n	801b22c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	689b      	ldr	r3, [r3, #8]
 801b21e:	68ba      	ldr	r2, [r7, #8]
 801b220:	4313      	orrs	r3, r2
 801b222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	68ba      	ldr	r2, [r7, #8]
 801b22a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	2201      	movs	r2, #1
 801b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2200      	movs	r2, #0
 801b238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b23c:	2300      	movs	r3, #0
}
 801b23e:	4618      	mov	r0, r3
 801b240:	3714      	adds	r7, #20
 801b242:	46bd      	mov	sp, r7
 801b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b248:	4770      	bx	lr
 801b24a:	bf00      	nop
 801b24c:	40012c00 	.word	0x40012c00
 801b250:	40013400 	.word	0x40013400
 801b254:	40000400 	.word	0x40000400
 801b258:	40000800 	.word	0x40000800
 801b25c:	40000c00 	.word	0x40000c00
 801b260:	40014000 	.word	0x40014000

0801b264 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801b264:	b480      	push	{r7}
 801b266:	b085      	sub	sp, #20
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
 801b26c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801b26e:	2300      	movs	r3, #0
 801b270:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b278:	2b01      	cmp	r3, #1
 801b27a:	d101      	bne.n	801b280 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801b27c:	2302      	movs	r3, #2
 801b27e:	e087      	b.n	801b390 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	2201      	movs	r2, #1
 801b284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801b28e:	683b      	ldr	r3, [r7, #0]
 801b290:	68db      	ldr	r3, [r3, #12]
 801b292:	4313      	orrs	r3, r2
 801b294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b29c:	683b      	ldr	r3, [r7, #0]
 801b29e:	689b      	ldr	r3, [r3, #8]
 801b2a0:	4313      	orrs	r3, r2
 801b2a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	685b      	ldr	r3, [r3, #4]
 801b2ae:	4313      	orrs	r3, r2
 801b2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801b2b2:	68fb      	ldr	r3, [r7, #12]
 801b2b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	4313      	orrs	r3, r2
 801b2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b2c6:	683b      	ldr	r3, [r7, #0]
 801b2c8:	691b      	ldr	r3, [r3, #16]
 801b2ca:	4313      	orrs	r3, r2
 801b2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	695b      	ldr	r3, [r3, #20]
 801b2d8:	4313      	orrs	r3, r2
 801b2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801b2e2:	683b      	ldr	r3, [r7, #0]
 801b2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2e6:	4313      	orrs	r3, r2
 801b2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801b2f0:	683b      	ldr	r3, [r7, #0]
 801b2f2:	699b      	ldr	r3, [r3, #24]
 801b2f4:	041b      	lsls	r3, r3, #16
 801b2f6:	4313      	orrs	r3, r2
 801b2f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	4a27      	ldr	r2, [pc, #156]	; (801b39c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801b300:	4293      	cmp	r3, r2
 801b302:	d004      	beq.n	801b30e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	4a25      	ldr	r2, [pc, #148]	; (801b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801b30a:	4293      	cmp	r3, r2
 801b30c:	d106      	bne.n	801b31c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b314:	683b      	ldr	r3, [r7, #0]
 801b316:	69db      	ldr	r3, [r3, #28]
 801b318:	4313      	orrs	r3, r2
 801b31a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	4a1e      	ldr	r2, [pc, #120]	; (801b39c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801b322:	4293      	cmp	r3, r2
 801b324:	d004      	beq.n	801b330 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	4a1d      	ldr	r2, [pc, #116]	; (801b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801b32c:	4293      	cmp	r3, r2
 801b32e:	d126      	bne.n	801b37e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801b336:	683b      	ldr	r3, [r7, #0]
 801b338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b33a:	051b      	lsls	r3, r3, #20
 801b33c:	4313      	orrs	r3, r2
 801b33e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801b346:	683b      	ldr	r3, [r7, #0]
 801b348:	6a1b      	ldr	r3, [r3, #32]
 801b34a:	4313      	orrs	r3, r2
 801b34c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801b354:	683b      	ldr	r3, [r7, #0]
 801b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b358:	4313      	orrs	r3, r2
 801b35a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	4a0e      	ldr	r2, [pc, #56]	; (801b39c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801b362:	4293      	cmp	r3, r2
 801b364:	d004      	beq.n	801b370 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	4a0d      	ldr	r2, [pc, #52]	; (801b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801b36c:	4293      	cmp	r3, r2
 801b36e:	d106      	bne.n	801b37e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801b370:	68fb      	ldr	r3, [r7, #12]
 801b372:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b37a:	4313      	orrs	r3, r2
 801b37c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	68fa      	ldr	r2, [r7, #12]
 801b384:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	2200      	movs	r2, #0
 801b38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b38e:	2300      	movs	r3, #0
}
 801b390:	4618      	mov	r0, r3
 801b392:	3714      	adds	r7, #20
 801b394:	46bd      	mov	sp, r7
 801b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b39a:	4770      	bx	lr
 801b39c:	40012c00 	.word	0x40012c00
 801b3a0:	40013400 	.word	0x40013400

0801b3a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b3a4:	b480      	push	{r7}
 801b3a6:	b083      	sub	sp, #12
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b3ac:	bf00      	nop
 801b3ae:	370c      	adds	r7, #12
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b6:	4770      	bx	lr

0801b3b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b3b8:	b480      	push	{r7}
 801b3ba:	b083      	sub	sp, #12
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b3c0:	bf00      	nop
 801b3c2:	370c      	adds	r7, #12
 801b3c4:	46bd      	mov	sp, r7
 801b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ca:	4770      	bx	lr

0801b3cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801b3cc:	b480      	push	{r7}
 801b3ce:	b083      	sub	sp, #12
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801b3d4:	bf00      	nop
 801b3d6:	370c      	adds	r7, #12
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3de:	4770      	bx	lr

0801b3e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b082      	sub	sp, #8
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d101      	bne.n	801b3f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b3ee:	2301      	movs	r3, #1
 801b3f0:	e042      	b.n	801b478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d106      	bne.n	801b40a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	2200      	movs	r2, #0
 801b400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b404:	6878      	ldr	r0, [r7, #4]
 801b406:	f7f7 fa01 	bl	801280c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	2224      	movs	r2, #36	; 0x24
 801b40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	681a      	ldr	r2, [r3, #0]
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	f022 0201 	bic.w	r2, r2, #1
 801b420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b422:	6878      	ldr	r0, [r7, #4]
 801b424:	f000 fc4a 	bl	801bcbc <UART_SetConfig>
 801b428:	4603      	mov	r3, r0
 801b42a:	2b01      	cmp	r3, #1
 801b42c:	d101      	bne.n	801b432 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801b42e:	2301      	movs	r3, #1
 801b430:	e022      	b.n	801b478 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b436:	2b00      	cmp	r3, #0
 801b438:	d002      	beq.n	801b440 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801b43a:	6878      	ldr	r0, [r7, #4]
 801b43c:	f000 ff3e 	bl	801c2bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	685a      	ldr	r2, [r3, #4]
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b44e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	689a      	ldr	r2, [r3, #8]
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b45e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	681a      	ldr	r2, [r3, #0]
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	f042 0201 	orr.w	r2, r2, #1
 801b46e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b470:	6878      	ldr	r0, [r7, #4]
 801b472:	f000 ffc5 	bl	801c400 <UART_CheckIdleState>
 801b476:	4603      	mov	r3, r0
}
 801b478:	4618      	mov	r0, r3
 801b47a:	3708      	adds	r7, #8
 801b47c:	46bd      	mov	sp, r7
 801b47e:	bd80      	pop	{r7, pc}

0801b480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b480:	b580      	push	{r7, lr}
 801b482:	b08a      	sub	sp, #40	; 0x28
 801b484:	af02      	add	r7, sp, #8
 801b486:	60f8      	str	r0, [r7, #12]
 801b488:	60b9      	str	r1, [r7, #8]
 801b48a:	603b      	str	r3, [r7, #0]
 801b48c:	4613      	mov	r3, r2
 801b48e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b496:	2b20      	cmp	r3, #32
 801b498:	d17b      	bne.n	801b592 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801b49a:	68bb      	ldr	r3, [r7, #8]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d002      	beq.n	801b4a6 <HAL_UART_Transmit+0x26>
 801b4a0:	88fb      	ldrh	r3, [r7, #6]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d101      	bne.n	801b4aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801b4a6:	2301      	movs	r3, #1
 801b4a8:	e074      	b.n	801b594 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b4aa:	68fb      	ldr	r3, [r7, #12]
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	2221      	movs	r2, #33	; 0x21
 801b4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b4ba:	f7f8 f82b 	bl	8013514 <HAL_GetTick>
 801b4be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	88fa      	ldrh	r2, [r7, #6]
 801b4c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	88fa      	ldrh	r2, [r7, #6]
 801b4cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	689b      	ldr	r3, [r3, #8]
 801b4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b4d8:	d108      	bne.n	801b4ec <HAL_UART_Transmit+0x6c>
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	691b      	ldr	r3, [r3, #16]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d104      	bne.n	801b4ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b4e6:	68bb      	ldr	r3, [r7, #8]
 801b4e8:	61bb      	str	r3, [r7, #24]
 801b4ea:	e003      	b.n	801b4f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b4f4:	e030      	b.n	801b558 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	9300      	str	r3, [sp, #0]
 801b4fa:	697b      	ldr	r3, [r7, #20]
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	2180      	movs	r1, #128	; 0x80
 801b500:	68f8      	ldr	r0, [r7, #12]
 801b502:	f001 f827 	bl	801c554 <UART_WaitOnFlagUntilTimeout>
 801b506:	4603      	mov	r3, r0
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d005      	beq.n	801b518 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	2220      	movs	r2, #32
 801b510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801b514:	2303      	movs	r3, #3
 801b516:	e03d      	b.n	801b594 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801b518:	69fb      	ldr	r3, [r7, #28]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d10b      	bne.n	801b536 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b51e:	69bb      	ldr	r3, [r7, #24]
 801b520:	881b      	ldrh	r3, [r3, #0]
 801b522:	461a      	mov	r2, r3
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	681b      	ldr	r3, [r3, #0]
 801b528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b52c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b52e:	69bb      	ldr	r3, [r7, #24]
 801b530:	3302      	adds	r3, #2
 801b532:	61bb      	str	r3, [r7, #24]
 801b534:	e007      	b.n	801b546 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b536:	69fb      	ldr	r3, [r7, #28]
 801b538:	781a      	ldrb	r2, [r3, #0]
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	3301      	adds	r3, #1
 801b544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b546:	68fb      	ldr	r3, [r7, #12]
 801b548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b54c:	b29b      	uxth	r3, r3
 801b54e:	3b01      	subs	r3, #1
 801b550:	b29a      	uxth	r2, r3
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801b558:	68fb      	ldr	r3, [r7, #12]
 801b55a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801b55e:	b29b      	uxth	r3, r3
 801b560:	2b00      	cmp	r3, #0
 801b562:	d1c8      	bne.n	801b4f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	9300      	str	r3, [sp, #0]
 801b568:	697b      	ldr	r3, [r7, #20]
 801b56a:	2200      	movs	r2, #0
 801b56c:	2140      	movs	r1, #64	; 0x40
 801b56e:	68f8      	ldr	r0, [r7, #12]
 801b570:	f000 fff0 	bl	801c554 <UART_WaitOnFlagUntilTimeout>
 801b574:	4603      	mov	r3, r0
 801b576:	2b00      	cmp	r3, #0
 801b578:	d005      	beq.n	801b586 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	2220      	movs	r2, #32
 801b57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801b582:	2303      	movs	r3, #3
 801b584:	e006      	b.n	801b594 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	2220      	movs	r2, #32
 801b58a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801b58e:	2300      	movs	r3, #0
 801b590:	e000      	b.n	801b594 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801b592:	2302      	movs	r3, #2
  }
}
 801b594:	4618      	mov	r0, r3
 801b596:	3720      	adds	r7, #32
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}

0801b59c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b08a      	sub	sp, #40	; 0x28
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	60f8      	str	r0, [r7, #12]
 801b5a4:	60b9      	str	r1, [r7, #8]
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b5b0:	2b20      	cmp	r3, #32
 801b5b2:	d137      	bne.n	801b624 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d002      	beq.n	801b5c0 <HAL_UART_Receive_IT+0x24>
 801b5ba:	88fb      	ldrh	r3, [r7, #6]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d101      	bne.n	801b5c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801b5c0:	2301      	movs	r3, #1
 801b5c2:	e030      	b.n	801b626 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	2200      	movs	r2, #0
 801b5c8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	4a18      	ldr	r2, [pc, #96]	; (801b630 <HAL_UART_Receive_IT+0x94>)
 801b5d0:	4293      	cmp	r3, r2
 801b5d2:	d01f      	beq.n	801b614 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	685b      	ldr	r3, [r3, #4]
 801b5da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d018      	beq.n	801b614 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5e8:	697b      	ldr	r3, [r7, #20]
 801b5ea:	e853 3f00 	ldrex	r3, [r3]
 801b5ee:	613b      	str	r3, [r7, #16]
   return(result);
 801b5f0:	693b      	ldr	r3, [r7, #16]
 801b5f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801b5f6:	627b      	str	r3, [r7, #36]	; 0x24
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	461a      	mov	r2, r3
 801b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b600:	623b      	str	r3, [r7, #32]
 801b602:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b604:	69f9      	ldr	r1, [r7, #28]
 801b606:	6a3a      	ldr	r2, [r7, #32]
 801b608:	e841 2300 	strex	r3, r2, [r1]
 801b60c:	61bb      	str	r3, [r7, #24]
   return(result);
 801b60e:	69bb      	ldr	r3, [r7, #24]
 801b610:	2b00      	cmp	r3, #0
 801b612:	d1e6      	bne.n	801b5e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801b614:	88fb      	ldrh	r3, [r7, #6]
 801b616:	461a      	mov	r2, r3
 801b618:	68b9      	ldr	r1, [r7, #8]
 801b61a:	68f8      	ldr	r0, [r7, #12]
 801b61c:	f001 f802 	bl	801c624 <UART_Start_Receive_IT>
 801b620:	4603      	mov	r3, r0
 801b622:	e000      	b.n	801b626 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801b624:	2302      	movs	r3, #2
  }
}
 801b626:	4618      	mov	r0, r3
 801b628:	3728      	adds	r7, #40	; 0x28
 801b62a:	46bd      	mov	sp, r7
 801b62c:	bd80      	pop	{r7, pc}
 801b62e:	bf00      	nop
 801b630:	40008000 	.word	0x40008000

0801b634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b0ba      	sub	sp, #232	; 0xe8
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	69db      	ldr	r3, [r3, #28]
 801b642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	681b      	ldr	r3, [r3, #0]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	689b      	ldr	r3, [r3, #8]
 801b656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b65a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b65e:	f640 030f 	movw	r3, #2063	; 0x80f
 801b662:	4013      	ands	r3, r2
 801b664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d11b      	bne.n	801b6a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b674:	f003 0320 	and.w	r3, r3, #32
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d015      	beq.n	801b6a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b680:	f003 0320 	and.w	r3, r3, #32
 801b684:	2b00      	cmp	r3, #0
 801b686:	d105      	bne.n	801b694 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801b688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b68c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b690:	2b00      	cmp	r3, #0
 801b692:	d009      	beq.n	801b6a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b698:	2b00      	cmp	r3, #0
 801b69a:	f000 82e3 	beq.w	801bc64 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6a2:	6878      	ldr	r0, [r7, #4]
 801b6a4:	4798      	blx	r3
      }
      return;
 801b6a6:	e2dd      	b.n	801bc64 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b6a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	f000 8123 	beq.w	801b8f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801b6b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b6b6:	4b8d      	ldr	r3, [pc, #564]	; (801b8ec <HAL_UART_IRQHandler+0x2b8>)
 801b6b8:	4013      	ands	r3, r2
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d106      	bne.n	801b6cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801b6be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b6c2:	4b8b      	ldr	r3, [pc, #556]	; (801b8f0 <HAL_UART_IRQHandler+0x2bc>)
 801b6c4:	4013      	ands	r3, r2
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	f000 8116 	beq.w	801b8f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b6d0:	f003 0301 	and.w	r3, r3, #1
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d011      	beq.n	801b6fc <HAL_UART_IRQHandler+0xc8>
 801b6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d00b      	beq.n	801b6fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	2201      	movs	r2, #1
 801b6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b6f2:	f043 0201 	orr.w	r2, r3, #1
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b700:	f003 0302 	and.w	r3, r3, #2
 801b704:	2b00      	cmp	r3, #0
 801b706:	d011      	beq.n	801b72c <HAL_UART_IRQHandler+0xf8>
 801b708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b70c:	f003 0301 	and.w	r3, r3, #1
 801b710:	2b00      	cmp	r3, #0
 801b712:	d00b      	beq.n	801b72c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2202      	movs	r2, #2
 801b71a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b722:	f043 0204 	orr.w	r2, r3, #4
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b730:	f003 0304 	and.w	r3, r3, #4
 801b734:	2b00      	cmp	r3, #0
 801b736:	d011      	beq.n	801b75c <HAL_UART_IRQHandler+0x128>
 801b738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b73c:	f003 0301 	and.w	r3, r3, #1
 801b740:	2b00      	cmp	r3, #0
 801b742:	d00b      	beq.n	801b75c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	2204      	movs	r2, #4
 801b74a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b752:	f043 0202 	orr.w	r2, r3, #2
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b760:	f003 0308 	and.w	r3, r3, #8
 801b764:	2b00      	cmp	r3, #0
 801b766:	d017      	beq.n	801b798 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801b768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b76c:	f003 0320 	and.w	r3, r3, #32
 801b770:	2b00      	cmp	r3, #0
 801b772:	d105      	bne.n	801b780 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801b774:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b778:	4b5c      	ldr	r3, [pc, #368]	; (801b8ec <HAL_UART_IRQHandler+0x2b8>)
 801b77a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d00b      	beq.n	801b798 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	2208      	movs	r2, #8
 801b786:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b78e:	f043 0208 	orr.w	r2, r3, #8
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d012      	beq.n	801b7ca <HAL_UART_IRQHandler+0x196>
 801b7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d00c      	beq.n	801b7ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	681b      	ldr	r3, [r3, #0]
 801b7b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b7b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7c0:	f043 0220 	orr.w	r2, r3, #32
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	f000 8249 	beq.w	801bc68 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801b7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7da:	f003 0320 	and.w	r3, r3, #32
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d013      	beq.n	801b80a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801b7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7e6:	f003 0320 	and.w	r3, r3, #32
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d105      	bne.n	801b7fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801b7ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b7f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d007      	beq.n	801b80a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d003      	beq.n	801b80a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b806:	6878      	ldr	r0, [r7, #4]
 801b808:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	689b      	ldr	r3, [r3, #8]
 801b81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b81e:	2b40      	cmp	r3, #64	; 0x40
 801b820:	d005      	beq.n	801b82e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b826:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d054      	beq.n	801b8d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	f001 f81a 	bl	801c868 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	689b      	ldr	r3, [r3, #8]
 801b83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b83e:	2b40      	cmp	r3, #64	; 0x40
 801b840:	d146      	bne.n	801b8d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	3308      	adds	r3, #8
 801b848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b850:	e853 3f00 	ldrex	r3, [r3]
 801b854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	3308      	adds	r3, #8
 801b86a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b86e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b87a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b87e:	e841 2300 	strex	r3, r2, [r1]
 801b882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d1d9      	bne.n	801b842 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b894:	2b00      	cmp	r3, #0
 801b896:	d017      	beq.n	801b8c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b89e:	4a15      	ldr	r2, [pc, #84]	; (801b8f4 <HAL_UART_IRQHandler+0x2c0>)
 801b8a0:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f7f9 fce0 	bl	801526e <HAL_DMA_Abort_IT>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d019      	beq.n	801b8e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8bc:	687a      	ldr	r2, [r7, #4]
 801b8be:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b8c2:	4610      	mov	r0, r2
 801b8c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8c6:	e00f      	b.n	801b8e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801b8c8:	6878      	ldr	r0, [r7, #4]
 801b8ca:	f000 f9e1 	bl	801bc90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8ce:	e00b      	b.n	801b8e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801b8d0:	6878      	ldr	r0, [r7, #4]
 801b8d2:	f000 f9dd 	bl	801bc90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8d6:	e007      	b.n	801b8e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801b8d8:	6878      	ldr	r0, [r7, #4]
 801b8da:	f000 f9d9 	bl	801bc90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801b8e6:	e1bf      	b.n	801bc68 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b8e8:	bf00      	nop
    return;
 801b8ea:	e1bd      	b.n	801bc68 <HAL_UART_IRQHandler+0x634>
 801b8ec:	10000001 	.word	0x10000001
 801b8f0:	04000120 	.word	0x04000120
 801b8f4:	0801c935 	.word	0x0801c935

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8fc:	2b01      	cmp	r3, #1
 801b8fe:	f040 8153 	bne.w	801bba8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b906:	f003 0310 	and.w	r3, r3, #16
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	f000 814c 	beq.w	801bba8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b914:	f003 0310 	and.w	r3, r3, #16
 801b918:	2b00      	cmp	r3, #0
 801b91a:	f000 8145 	beq.w	801bba8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	2210      	movs	r2, #16
 801b924:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	689b      	ldr	r3, [r3, #8]
 801b92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b930:	2b40      	cmp	r3, #64	; 0x40
 801b932:	f040 80bb 	bne.w	801baac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	685b      	ldr	r3, [r3, #4]
 801b940:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f000 818f 	beq.w	801bc6c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801b954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b958:	429a      	cmp	r2, r3
 801b95a:	f080 8187 	bcs.w	801bc6c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	f003 0320 	and.w	r3, r3, #32
 801b976:	2b00      	cmp	r3, #0
 801b978:	f040 8087 	bne.w	801ba8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b988:	e853 3f00 	ldrex	r3, [r3]
 801b98c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	461a      	mov	r2, r3
 801b9a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b9a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b9aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b9b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b9b6:	e841 2300 	strex	r3, r2, [r1]
 801b9ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b9be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d1da      	bne.n	801b97c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	3308      	adds	r3, #8
 801b9cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9d0:	e853 3f00 	ldrex	r3, [r3]
 801b9d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b9d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b9d8:	f023 0301 	bic.w	r3, r3, #1
 801b9dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	3308      	adds	r3, #8
 801b9e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b9ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b9ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b9f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b9f6:	e841 2300 	strex	r3, r2, [r1]
 801b9fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b9fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d1e1      	bne.n	801b9c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	3308      	adds	r3, #8
 801ba08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba0c:	e853 3f00 	ldrex	r3, [r3]
 801ba10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801ba12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ba14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ba18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	3308      	adds	r3, #8
 801ba22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801ba26:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ba28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801ba2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ba2e:	e841 2300 	strex	r3, r2, [r1]
 801ba32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801ba34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d1e3      	bne.n	801ba02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	2220      	movs	r2, #32
 801ba3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	2200      	movs	r2, #0
 801ba46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ba4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba50:	e853 3f00 	ldrex	r3, [r3]
 801ba54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ba56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ba58:	f023 0310 	bic.w	r3, r3, #16
 801ba5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	461a      	mov	r2, r3
 801ba66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ba6a:	65bb      	str	r3, [r7, #88]	; 0x58
 801ba6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ba6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ba70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ba72:	e841 2300 	strex	r3, r2, [r1]
 801ba76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801ba78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d1e4      	bne.n	801ba48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ba84:	4618      	mov	r0, r3
 801ba86:	f7f9 fb96 	bl	80151b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	2202      	movs	r2, #2
 801ba8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ba9c:	b29b      	uxth	r3, r3
 801ba9e:	1ad3      	subs	r3, r2, r3
 801baa0:	b29b      	uxth	r3, r3
 801baa2:	4619      	mov	r1, r3
 801baa4:	6878      	ldr	r0, [r7, #4]
 801baa6:	f000 f8fd 	bl	801bca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801baaa:	e0df      	b.n	801bc6c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bab8:	b29b      	uxth	r3, r3
 801baba:	1ad3      	subs	r3, r2, r3
 801babc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801bac6:	b29b      	uxth	r3, r3
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f000 80d1 	beq.w	801bc70 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801bace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	f000 80cc 	beq.w	801bc70 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bae0:	e853 3f00 	ldrex	r3, [r3]
 801bae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801baec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	461a      	mov	r2, r3
 801baf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bafa:	647b      	str	r3, [r7, #68]	; 0x44
 801bafc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bafe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bb00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bb02:	e841 2300 	strex	r3, r2, [r1]
 801bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d1e4      	bne.n	801bad8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	3308      	adds	r3, #8
 801bb14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb18:	e853 3f00 	ldrex	r3, [r3]
 801bb1c:	623b      	str	r3, [r7, #32]
   return(result);
 801bb1e:	6a3b      	ldr	r3, [r7, #32]
 801bb20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801bb24:	f023 0301 	bic.w	r3, r3, #1
 801bb28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	3308      	adds	r3, #8
 801bb32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bb36:	633a      	str	r2, [r7, #48]	; 0x30
 801bb38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bb3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bb3e:	e841 2300 	strex	r3, r2, [r1]
 801bb42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d1e1      	bne.n	801bb0e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	2220      	movs	r2, #32
 801bb4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	2200      	movs	r2, #0
 801bb56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	681b      	ldr	r3, [r3, #0]
 801bb62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb64:	693b      	ldr	r3, [r7, #16]
 801bb66:	e853 3f00 	ldrex	r3, [r3]
 801bb6a:	60fb      	str	r3, [r7, #12]
   return(result);
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	f023 0310 	bic.w	r3, r3, #16
 801bb72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	461a      	mov	r2, r3
 801bb7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bb80:	61fb      	str	r3, [r7, #28]
 801bb82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb84:	69b9      	ldr	r1, [r7, #24]
 801bb86:	69fa      	ldr	r2, [r7, #28]
 801bb88:	e841 2300 	strex	r3, r2, [r1]
 801bb8c:	617b      	str	r3, [r7, #20]
   return(result);
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d1e4      	bne.n	801bb5e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	2202      	movs	r2, #2
 801bb98:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801bb9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bb9e:	4619      	mov	r1, r3
 801bba0:	6878      	ldr	r0, [r7, #4]
 801bba2:	f000 f87f 	bl	801bca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bba6:	e063      	b.n	801bc70 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801bba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d00e      	beq.n	801bbd2 <HAL_UART_IRQHandler+0x59e>
 801bbb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bbb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d008      	beq.n	801bbd2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801bbc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801bbca:	6878      	ldr	r0, [r7, #4]
 801bbcc:	f001 fc10 	bl	801d3f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bbd0:	e051      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801bbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d014      	beq.n	801bc08 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801bbde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d105      	bne.n	801bbf6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801bbea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bbee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d008      	beq.n	801bc08 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d03a      	beq.n	801bc74 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc02:	6878      	ldr	r0, [r7, #4]
 801bc04:	4798      	blx	r3
    }
    return;
 801bc06:	e035      	b.n	801bc74 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801bc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d009      	beq.n	801bc28 <HAL_UART_IRQHandler+0x5f4>
 801bc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d003      	beq.n	801bc28 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f000 fe9d 	bl	801c960 <UART_EndTransmit_IT>
    return;
 801bc26:	e026      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801bc28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d009      	beq.n	801bc48 <HAL_UART_IRQHandler+0x614>
 801bc34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d003      	beq.n	801bc48 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801bc40:	6878      	ldr	r0, [r7, #4]
 801bc42:	f001 fbe9 	bl	801d418 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bc46:	e016      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801bc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bc4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d010      	beq.n	801bc76 <HAL_UART_IRQHandler+0x642>
 801bc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	da0c      	bge.n	801bc76 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f001 fbd1 	bl	801d404 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bc62:	e008      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
      return;
 801bc64:	bf00      	nop
 801bc66:	e006      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
    return;
 801bc68:	bf00      	nop
 801bc6a:	e004      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
      return;
 801bc6c:	bf00      	nop
 801bc6e:	e002      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
      return;
 801bc70:	bf00      	nop
 801bc72:	e000      	b.n	801bc76 <HAL_UART_IRQHandler+0x642>
    return;
 801bc74:	bf00      	nop
  }
}
 801bc76:	37e8      	adds	r7, #232	; 0xe8
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	bd80      	pop	{r7, pc}

0801bc7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bc7c:	b480      	push	{r7}
 801bc7e:	b083      	sub	sp, #12
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801bc84:	bf00      	nop
 801bc86:	370c      	adds	r7, #12
 801bc88:	46bd      	mov	sp, r7
 801bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc8e:	4770      	bx	lr

0801bc90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bc90:	b480      	push	{r7}
 801bc92:	b083      	sub	sp, #12
 801bc94:	af00      	add	r7, sp, #0
 801bc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801bc98:	bf00      	nop
 801bc9a:	370c      	adds	r7, #12
 801bc9c:	46bd      	mov	sp, r7
 801bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bca2:	4770      	bx	lr

0801bca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801bca4:	b480      	push	{r7}
 801bca6:	b083      	sub	sp, #12
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	460b      	mov	r3, r1
 801bcae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801bcb0:	bf00      	nop
 801bcb2:	370c      	adds	r7, #12
 801bcb4:	46bd      	mov	sp, r7
 801bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcba:	4770      	bx	lr

0801bcbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bcbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bcc0:	b08c      	sub	sp, #48	; 0x30
 801bcc2:	af00      	add	r7, sp, #0
 801bcc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bccc:	697b      	ldr	r3, [r7, #20]
 801bcce:	689a      	ldr	r2, [r3, #8]
 801bcd0:	697b      	ldr	r3, [r7, #20]
 801bcd2:	691b      	ldr	r3, [r3, #16]
 801bcd4:	431a      	orrs	r2, r3
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	695b      	ldr	r3, [r3, #20]
 801bcda:	431a      	orrs	r2, r3
 801bcdc:	697b      	ldr	r3, [r7, #20]
 801bcde:	69db      	ldr	r3, [r3, #28]
 801bce0:	4313      	orrs	r3, r2
 801bce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bce4:	697b      	ldr	r3, [r7, #20]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	681a      	ldr	r2, [r3, #0]
 801bcea:	4baa      	ldr	r3, [pc, #680]	; (801bf94 <UART_SetConfig+0x2d8>)
 801bcec:	4013      	ands	r3, r2
 801bcee:	697a      	ldr	r2, [r7, #20]
 801bcf0:	6812      	ldr	r2, [r2, #0]
 801bcf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bcf4:	430b      	orrs	r3, r1
 801bcf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bcf8:	697b      	ldr	r3, [r7, #20]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	685b      	ldr	r3, [r3, #4]
 801bcfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801bd02:	697b      	ldr	r3, [r7, #20]
 801bd04:	68da      	ldr	r2, [r3, #12]
 801bd06:	697b      	ldr	r3, [r7, #20]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	430a      	orrs	r2, r1
 801bd0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801bd0e:	697b      	ldr	r3, [r7, #20]
 801bd10:	699b      	ldr	r3, [r3, #24]
 801bd12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801bd14:	697b      	ldr	r3, [r7, #20]
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	4a9f      	ldr	r2, [pc, #636]	; (801bf98 <UART_SetConfig+0x2dc>)
 801bd1a:	4293      	cmp	r3, r2
 801bd1c:	d004      	beq.n	801bd28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801bd1e:	697b      	ldr	r3, [r7, #20]
 801bd20:	6a1b      	ldr	r3, [r3, #32]
 801bd22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd24:	4313      	orrs	r3, r2
 801bd26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801bd28:	697b      	ldr	r3, [r7, #20]
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	689b      	ldr	r3, [r3, #8]
 801bd2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801bd32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801bd36:	697a      	ldr	r2, [r7, #20]
 801bd38:	6812      	ldr	r2, [r2, #0]
 801bd3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bd3c:	430b      	orrs	r3, r1
 801bd3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd46:	f023 010f 	bic.w	r1, r3, #15
 801bd4a:	697b      	ldr	r3, [r7, #20]
 801bd4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bd4e:	697b      	ldr	r3, [r7, #20]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	430a      	orrs	r2, r1
 801bd54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bd56:	697b      	ldr	r3, [r7, #20]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	4a90      	ldr	r2, [pc, #576]	; (801bf9c <UART_SetConfig+0x2e0>)
 801bd5c:	4293      	cmp	r3, r2
 801bd5e:	d125      	bne.n	801bdac <UART_SetConfig+0xf0>
 801bd60:	4b8f      	ldr	r3, [pc, #572]	; (801bfa0 <UART_SetConfig+0x2e4>)
 801bd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bd66:	f003 0303 	and.w	r3, r3, #3
 801bd6a:	2b03      	cmp	r3, #3
 801bd6c:	d81a      	bhi.n	801bda4 <UART_SetConfig+0xe8>
 801bd6e:	a201      	add	r2, pc, #4	; (adr r2, 801bd74 <UART_SetConfig+0xb8>)
 801bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd74:	0801bd85 	.word	0x0801bd85
 801bd78:	0801bd95 	.word	0x0801bd95
 801bd7c:	0801bd8d 	.word	0x0801bd8d
 801bd80:	0801bd9d 	.word	0x0801bd9d
 801bd84:	2301      	movs	r3, #1
 801bd86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bd8a:	e116      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bd8c:	2302      	movs	r3, #2
 801bd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bd92:	e112      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bd94:	2304      	movs	r3, #4
 801bd96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bd9a:	e10e      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bd9c:	2308      	movs	r3, #8
 801bd9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bda2:	e10a      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bda4:	2310      	movs	r3, #16
 801bda6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bdaa:	e106      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bdac:	697b      	ldr	r3, [r7, #20]
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	4a7c      	ldr	r2, [pc, #496]	; (801bfa4 <UART_SetConfig+0x2e8>)
 801bdb2:	4293      	cmp	r3, r2
 801bdb4:	d138      	bne.n	801be28 <UART_SetConfig+0x16c>
 801bdb6:	4b7a      	ldr	r3, [pc, #488]	; (801bfa0 <UART_SetConfig+0x2e4>)
 801bdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bdbc:	f003 030c 	and.w	r3, r3, #12
 801bdc0:	2b0c      	cmp	r3, #12
 801bdc2:	d82d      	bhi.n	801be20 <UART_SetConfig+0x164>
 801bdc4:	a201      	add	r2, pc, #4	; (adr r2, 801bdcc <UART_SetConfig+0x110>)
 801bdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdca:	bf00      	nop
 801bdcc:	0801be01 	.word	0x0801be01
 801bdd0:	0801be21 	.word	0x0801be21
 801bdd4:	0801be21 	.word	0x0801be21
 801bdd8:	0801be21 	.word	0x0801be21
 801bddc:	0801be11 	.word	0x0801be11
 801bde0:	0801be21 	.word	0x0801be21
 801bde4:	0801be21 	.word	0x0801be21
 801bde8:	0801be21 	.word	0x0801be21
 801bdec:	0801be09 	.word	0x0801be09
 801bdf0:	0801be21 	.word	0x0801be21
 801bdf4:	0801be21 	.word	0x0801be21
 801bdf8:	0801be21 	.word	0x0801be21
 801bdfc:	0801be19 	.word	0x0801be19
 801be00:	2300      	movs	r3, #0
 801be02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be06:	e0d8      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be08:	2302      	movs	r3, #2
 801be0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be0e:	e0d4      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be10:	2304      	movs	r3, #4
 801be12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be16:	e0d0      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be18:	2308      	movs	r3, #8
 801be1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be1e:	e0cc      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be20:	2310      	movs	r3, #16
 801be22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be26:	e0c8      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be28:	697b      	ldr	r3, [r7, #20]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	4a5e      	ldr	r2, [pc, #376]	; (801bfa8 <UART_SetConfig+0x2ec>)
 801be2e:	4293      	cmp	r3, r2
 801be30:	d125      	bne.n	801be7e <UART_SetConfig+0x1c2>
 801be32:	4b5b      	ldr	r3, [pc, #364]	; (801bfa0 <UART_SetConfig+0x2e4>)
 801be34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801be3c:	2b30      	cmp	r3, #48	; 0x30
 801be3e:	d016      	beq.n	801be6e <UART_SetConfig+0x1b2>
 801be40:	2b30      	cmp	r3, #48	; 0x30
 801be42:	d818      	bhi.n	801be76 <UART_SetConfig+0x1ba>
 801be44:	2b20      	cmp	r3, #32
 801be46:	d00a      	beq.n	801be5e <UART_SetConfig+0x1a2>
 801be48:	2b20      	cmp	r3, #32
 801be4a:	d814      	bhi.n	801be76 <UART_SetConfig+0x1ba>
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d002      	beq.n	801be56 <UART_SetConfig+0x19a>
 801be50:	2b10      	cmp	r3, #16
 801be52:	d008      	beq.n	801be66 <UART_SetConfig+0x1aa>
 801be54:	e00f      	b.n	801be76 <UART_SetConfig+0x1ba>
 801be56:	2300      	movs	r3, #0
 801be58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be5c:	e0ad      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be5e:	2302      	movs	r3, #2
 801be60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be64:	e0a9      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be66:	2304      	movs	r3, #4
 801be68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be6c:	e0a5      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be6e:	2308      	movs	r3, #8
 801be70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be74:	e0a1      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be76:	2310      	movs	r3, #16
 801be78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801be7c:	e09d      	b.n	801bfba <UART_SetConfig+0x2fe>
 801be7e:	697b      	ldr	r3, [r7, #20]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	4a4a      	ldr	r2, [pc, #296]	; (801bfac <UART_SetConfig+0x2f0>)
 801be84:	4293      	cmp	r3, r2
 801be86:	d125      	bne.n	801bed4 <UART_SetConfig+0x218>
 801be88:	4b45      	ldr	r3, [pc, #276]	; (801bfa0 <UART_SetConfig+0x2e4>)
 801be8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801be8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801be92:	2bc0      	cmp	r3, #192	; 0xc0
 801be94:	d016      	beq.n	801bec4 <UART_SetConfig+0x208>
 801be96:	2bc0      	cmp	r3, #192	; 0xc0
 801be98:	d818      	bhi.n	801becc <UART_SetConfig+0x210>
 801be9a:	2b80      	cmp	r3, #128	; 0x80
 801be9c:	d00a      	beq.n	801beb4 <UART_SetConfig+0x1f8>
 801be9e:	2b80      	cmp	r3, #128	; 0x80
 801bea0:	d814      	bhi.n	801becc <UART_SetConfig+0x210>
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	d002      	beq.n	801beac <UART_SetConfig+0x1f0>
 801bea6:	2b40      	cmp	r3, #64	; 0x40
 801bea8:	d008      	beq.n	801bebc <UART_SetConfig+0x200>
 801beaa:	e00f      	b.n	801becc <UART_SetConfig+0x210>
 801beac:	2300      	movs	r3, #0
 801beae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801beb2:	e082      	b.n	801bfba <UART_SetConfig+0x2fe>
 801beb4:	2302      	movs	r3, #2
 801beb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801beba:	e07e      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bebc:	2304      	movs	r3, #4
 801bebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bec2:	e07a      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bec4:	2308      	movs	r3, #8
 801bec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801beca:	e076      	b.n	801bfba <UART_SetConfig+0x2fe>
 801becc:	2310      	movs	r3, #16
 801bece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bed2:	e072      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	4a35      	ldr	r2, [pc, #212]	; (801bfb0 <UART_SetConfig+0x2f4>)
 801beda:	4293      	cmp	r3, r2
 801bedc:	d12a      	bne.n	801bf34 <UART_SetConfig+0x278>
 801bede:	4b30      	ldr	r3, [pc, #192]	; (801bfa0 <UART_SetConfig+0x2e4>)
 801bee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801beec:	d01a      	beq.n	801bf24 <UART_SetConfig+0x268>
 801beee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bef2:	d81b      	bhi.n	801bf2c <UART_SetConfig+0x270>
 801bef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bef8:	d00c      	beq.n	801bf14 <UART_SetConfig+0x258>
 801befa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801befe:	d815      	bhi.n	801bf2c <UART_SetConfig+0x270>
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d003      	beq.n	801bf0c <UART_SetConfig+0x250>
 801bf04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bf08:	d008      	beq.n	801bf1c <UART_SetConfig+0x260>
 801bf0a:	e00f      	b.n	801bf2c <UART_SetConfig+0x270>
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf12:	e052      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf14:	2302      	movs	r3, #2
 801bf16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf1a:	e04e      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf1c:	2304      	movs	r3, #4
 801bf1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf22:	e04a      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf24:	2308      	movs	r3, #8
 801bf26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf2a:	e046      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf2c:	2310      	movs	r3, #16
 801bf2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf32:	e042      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf34:	697b      	ldr	r3, [r7, #20]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	4a17      	ldr	r2, [pc, #92]	; (801bf98 <UART_SetConfig+0x2dc>)
 801bf3a:	4293      	cmp	r3, r2
 801bf3c:	d13a      	bne.n	801bfb4 <UART_SetConfig+0x2f8>
 801bf3e:	4b18      	ldr	r3, [pc, #96]	; (801bfa0 <UART_SetConfig+0x2e4>)
 801bf40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bf44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801bf48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bf4c:	d01a      	beq.n	801bf84 <UART_SetConfig+0x2c8>
 801bf4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bf52:	d81b      	bhi.n	801bf8c <UART_SetConfig+0x2d0>
 801bf54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf58:	d00c      	beq.n	801bf74 <UART_SetConfig+0x2b8>
 801bf5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bf5e:	d815      	bhi.n	801bf8c <UART_SetConfig+0x2d0>
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d003      	beq.n	801bf6c <UART_SetConfig+0x2b0>
 801bf64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bf68:	d008      	beq.n	801bf7c <UART_SetConfig+0x2c0>
 801bf6a:	e00f      	b.n	801bf8c <UART_SetConfig+0x2d0>
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf72:	e022      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf74:	2302      	movs	r3, #2
 801bf76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf7a:	e01e      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf7c:	2304      	movs	r3, #4
 801bf7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf82:	e01a      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf84:	2308      	movs	r3, #8
 801bf86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf8a:	e016      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf8c:	2310      	movs	r3, #16
 801bf8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801bf92:	e012      	b.n	801bfba <UART_SetConfig+0x2fe>
 801bf94:	cfff69f3 	.word	0xcfff69f3
 801bf98:	40008000 	.word	0x40008000
 801bf9c:	40013800 	.word	0x40013800
 801bfa0:	40021000 	.word	0x40021000
 801bfa4:	40004400 	.word	0x40004400
 801bfa8:	40004800 	.word	0x40004800
 801bfac:	40004c00 	.word	0x40004c00
 801bfb0:	40005000 	.word	0x40005000
 801bfb4:	2310      	movs	r3, #16
 801bfb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801bfba:	697b      	ldr	r3, [r7, #20]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	4ab0      	ldr	r2, [pc, #704]	; (801c280 <UART_SetConfig+0x5c4>)
 801bfc0:	4293      	cmp	r3, r2
 801bfc2:	f040 809b 	bne.w	801c0fc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801bfc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801bfca:	2b08      	cmp	r3, #8
 801bfcc:	d827      	bhi.n	801c01e <UART_SetConfig+0x362>
 801bfce:	a201      	add	r2, pc, #4	; (adr r2, 801bfd4 <UART_SetConfig+0x318>)
 801bfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bfd4:	0801bff9 	.word	0x0801bff9
 801bfd8:	0801c001 	.word	0x0801c001
 801bfdc:	0801c009 	.word	0x0801c009
 801bfe0:	0801c01f 	.word	0x0801c01f
 801bfe4:	0801c00f 	.word	0x0801c00f
 801bfe8:	0801c01f 	.word	0x0801c01f
 801bfec:	0801c01f 	.word	0x0801c01f
 801bff0:	0801c01f 	.word	0x0801c01f
 801bff4:	0801c017 	.word	0x0801c017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bff8:	f7fb fb60 	bl	80176bc <HAL_RCC_GetPCLK1Freq>
 801bffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801bffe:	e014      	b.n	801c02a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c000:	f7fb fb70 	bl	80176e4 <HAL_RCC_GetPCLK2Freq>
 801c004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c006:	e010      	b.n	801c02a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c008:	4b9e      	ldr	r3, [pc, #632]	; (801c284 <UART_SetConfig+0x5c8>)
 801c00a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c00c:	e00d      	b.n	801c02a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c00e:	f7fb faa3 	bl	8017558 <HAL_RCC_GetSysClockFreq>
 801c012:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c014:	e009      	b.n	801c02a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c01a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c01c:	e005      	b.n	801c02a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 801c01e:	2300      	movs	r3, #0
 801c020:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c022:	2301      	movs	r3, #1
 801c024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	f000 8130 	beq.w	801c292 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801c032:	697b      	ldr	r3, [r7, #20]
 801c034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c036:	4a94      	ldr	r2, [pc, #592]	; (801c288 <UART_SetConfig+0x5cc>)
 801c038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c03c:	461a      	mov	r2, r3
 801c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c040:	fbb3 f3f2 	udiv	r3, r3, r2
 801c044:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c046:	697b      	ldr	r3, [r7, #20]
 801c048:	685a      	ldr	r2, [r3, #4]
 801c04a:	4613      	mov	r3, r2
 801c04c:	005b      	lsls	r3, r3, #1
 801c04e:	4413      	add	r3, r2
 801c050:	69ba      	ldr	r2, [r7, #24]
 801c052:	429a      	cmp	r2, r3
 801c054:	d305      	bcc.n	801c062 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	685b      	ldr	r3, [r3, #4]
 801c05a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801c05c:	69ba      	ldr	r2, [r7, #24]
 801c05e:	429a      	cmp	r2, r3
 801c060:	d903      	bls.n	801c06a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 801c062:	2301      	movs	r3, #1
 801c064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c068:	e113      	b.n	801c292 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c06c:	2200      	movs	r2, #0
 801c06e:	60bb      	str	r3, [r7, #8]
 801c070:	60fa      	str	r2, [r7, #12]
 801c072:	697b      	ldr	r3, [r7, #20]
 801c074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c076:	4a84      	ldr	r2, [pc, #528]	; (801c288 <UART_SetConfig+0x5cc>)
 801c078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c07c:	b29b      	uxth	r3, r3
 801c07e:	2200      	movs	r2, #0
 801c080:	603b      	str	r3, [r7, #0]
 801c082:	607a      	str	r2, [r7, #4]
 801c084:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801c08c:	f7e4 fdc6 	bl	8000c1c <__aeabi_uldivmod>
 801c090:	4602      	mov	r2, r0
 801c092:	460b      	mov	r3, r1
 801c094:	4610      	mov	r0, r2
 801c096:	4619      	mov	r1, r3
 801c098:	f04f 0200 	mov.w	r2, #0
 801c09c:	f04f 0300 	mov.w	r3, #0
 801c0a0:	020b      	lsls	r3, r1, #8
 801c0a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801c0a6:	0202      	lsls	r2, r0, #8
 801c0a8:	6979      	ldr	r1, [r7, #20]
 801c0aa:	6849      	ldr	r1, [r1, #4]
 801c0ac:	0849      	lsrs	r1, r1, #1
 801c0ae:	2000      	movs	r0, #0
 801c0b0:	460c      	mov	r4, r1
 801c0b2:	4605      	mov	r5, r0
 801c0b4:	eb12 0804 	adds.w	r8, r2, r4
 801c0b8:	eb43 0905 	adc.w	r9, r3, r5
 801c0bc:	697b      	ldr	r3, [r7, #20]
 801c0be:	685b      	ldr	r3, [r3, #4]
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	469a      	mov	sl, r3
 801c0c4:	4693      	mov	fp, r2
 801c0c6:	4652      	mov	r2, sl
 801c0c8:	465b      	mov	r3, fp
 801c0ca:	4640      	mov	r0, r8
 801c0cc:	4649      	mov	r1, r9
 801c0ce:	f7e4 fda5 	bl	8000c1c <__aeabi_uldivmod>
 801c0d2:	4602      	mov	r2, r0
 801c0d4:	460b      	mov	r3, r1
 801c0d6:	4613      	mov	r3, r2
 801c0d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801c0da:	6a3b      	ldr	r3, [r7, #32]
 801c0dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c0e0:	d308      	bcc.n	801c0f4 <UART_SetConfig+0x438>
 801c0e2:	6a3b      	ldr	r3, [r7, #32]
 801c0e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c0e8:	d204      	bcs.n	801c0f4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 801c0ea:	697b      	ldr	r3, [r7, #20]
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	6a3a      	ldr	r2, [r7, #32]
 801c0f0:	60da      	str	r2, [r3, #12]
 801c0f2:	e0ce      	b.n	801c292 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 801c0f4:	2301      	movs	r3, #1
 801c0f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c0fa:	e0ca      	b.n	801c292 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	69db      	ldr	r3, [r3, #28]
 801c100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c104:	d166      	bne.n	801c1d4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 801c106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c10a:	2b08      	cmp	r3, #8
 801c10c:	d827      	bhi.n	801c15e <UART_SetConfig+0x4a2>
 801c10e:	a201      	add	r2, pc, #4	; (adr r2, 801c114 <UART_SetConfig+0x458>)
 801c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c114:	0801c139 	.word	0x0801c139
 801c118:	0801c141 	.word	0x0801c141
 801c11c:	0801c149 	.word	0x0801c149
 801c120:	0801c15f 	.word	0x0801c15f
 801c124:	0801c14f 	.word	0x0801c14f
 801c128:	0801c15f 	.word	0x0801c15f
 801c12c:	0801c15f 	.word	0x0801c15f
 801c130:	0801c15f 	.word	0x0801c15f
 801c134:	0801c157 	.word	0x0801c157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c138:	f7fb fac0 	bl	80176bc <HAL_RCC_GetPCLK1Freq>
 801c13c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c13e:	e014      	b.n	801c16a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c140:	f7fb fad0 	bl	80176e4 <HAL_RCC_GetPCLK2Freq>
 801c144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c146:	e010      	b.n	801c16a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c148:	4b4e      	ldr	r3, [pc, #312]	; (801c284 <UART_SetConfig+0x5c8>)
 801c14a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c14c:	e00d      	b.n	801c16a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c14e:	f7fb fa03 	bl	8017558 <HAL_RCC_GetSysClockFreq>
 801c152:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c154:	e009      	b.n	801c16a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c15a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c15c:	e005      	b.n	801c16a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 801c15e:	2300      	movs	r3, #0
 801c160:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c162:	2301      	movs	r3, #1
 801c164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	f000 8090 	beq.w	801c292 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c176:	4a44      	ldr	r2, [pc, #272]	; (801c288 <UART_SetConfig+0x5cc>)
 801c178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c17c:	461a      	mov	r2, r3
 801c17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c180:	fbb3 f3f2 	udiv	r3, r3, r2
 801c184:	005a      	lsls	r2, r3, #1
 801c186:	697b      	ldr	r3, [r7, #20]
 801c188:	685b      	ldr	r3, [r3, #4]
 801c18a:	085b      	lsrs	r3, r3, #1
 801c18c:	441a      	add	r2, r3
 801c18e:	697b      	ldr	r3, [r7, #20]
 801c190:	685b      	ldr	r3, [r3, #4]
 801c192:	fbb2 f3f3 	udiv	r3, r2, r3
 801c196:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c198:	6a3b      	ldr	r3, [r7, #32]
 801c19a:	2b0f      	cmp	r3, #15
 801c19c:	d916      	bls.n	801c1cc <UART_SetConfig+0x510>
 801c19e:	6a3b      	ldr	r3, [r7, #32]
 801c1a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c1a4:	d212      	bcs.n	801c1cc <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c1a6:	6a3b      	ldr	r3, [r7, #32]
 801c1a8:	b29b      	uxth	r3, r3
 801c1aa:	f023 030f 	bic.w	r3, r3, #15
 801c1ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c1b0:	6a3b      	ldr	r3, [r7, #32]
 801c1b2:	085b      	lsrs	r3, r3, #1
 801c1b4:	b29b      	uxth	r3, r3
 801c1b6:	f003 0307 	and.w	r3, r3, #7
 801c1ba:	b29a      	uxth	r2, r3
 801c1bc:	8bfb      	ldrh	r3, [r7, #30]
 801c1be:	4313      	orrs	r3, r2
 801c1c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801c1c2:	697b      	ldr	r3, [r7, #20]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	8bfa      	ldrh	r2, [r7, #30]
 801c1c8:	60da      	str	r2, [r3, #12]
 801c1ca:	e062      	b.n	801c292 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 801c1cc:	2301      	movs	r3, #1
 801c1ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801c1d2:	e05e      	b.n	801c292 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 801c1d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801c1d8:	2b08      	cmp	r3, #8
 801c1da:	d828      	bhi.n	801c22e <UART_SetConfig+0x572>
 801c1dc:	a201      	add	r2, pc, #4	; (adr r2, 801c1e4 <UART_SetConfig+0x528>)
 801c1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1e2:	bf00      	nop
 801c1e4:	0801c209 	.word	0x0801c209
 801c1e8:	0801c211 	.word	0x0801c211
 801c1ec:	0801c219 	.word	0x0801c219
 801c1f0:	0801c22f 	.word	0x0801c22f
 801c1f4:	0801c21f 	.word	0x0801c21f
 801c1f8:	0801c22f 	.word	0x0801c22f
 801c1fc:	0801c22f 	.word	0x0801c22f
 801c200:	0801c22f 	.word	0x0801c22f
 801c204:	0801c227 	.word	0x0801c227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c208:	f7fb fa58 	bl	80176bc <HAL_RCC_GetPCLK1Freq>
 801c20c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c20e:	e014      	b.n	801c23a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c210:	f7fb fa68 	bl	80176e4 <HAL_RCC_GetPCLK2Freq>
 801c214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c216:	e010      	b.n	801c23a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c218:	4b1a      	ldr	r3, [pc, #104]	; (801c284 <UART_SetConfig+0x5c8>)
 801c21a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c21c:	e00d      	b.n	801c23a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c21e:	f7fb f99b 	bl	8017558 <HAL_RCC_GetSysClockFreq>
 801c222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801c224:	e009      	b.n	801c23a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c22a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801c22c:	e005      	b.n	801c23a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 801c22e:	2300      	movs	r3, #0
 801c230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801c232:	2301      	movs	r3, #1
 801c234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801c238:	bf00      	nop
    }

    if (pclk != 0U)
 801c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d028      	beq.n	801c292 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801c240:	697b      	ldr	r3, [r7, #20]
 801c242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c244:	4a10      	ldr	r2, [pc, #64]	; (801c288 <UART_SetConfig+0x5cc>)
 801c246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801c24a:	461a      	mov	r2, r3
 801c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24e:	fbb3 f2f2 	udiv	r2, r3, r2
 801c252:	697b      	ldr	r3, [r7, #20]
 801c254:	685b      	ldr	r3, [r3, #4]
 801c256:	085b      	lsrs	r3, r3, #1
 801c258:	441a      	add	r2, r3
 801c25a:	697b      	ldr	r3, [r7, #20]
 801c25c:	685b      	ldr	r3, [r3, #4]
 801c25e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c262:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c264:	6a3b      	ldr	r3, [r7, #32]
 801c266:	2b0f      	cmp	r3, #15
 801c268:	d910      	bls.n	801c28c <UART_SetConfig+0x5d0>
 801c26a:	6a3b      	ldr	r3, [r7, #32]
 801c26c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c270:	d20c      	bcs.n	801c28c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801c272:	6a3b      	ldr	r3, [r7, #32]
 801c274:	b29a      	uxth	r2, r3
 801c276:	697b      	ldr	r3, [r7, #20]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	60da      	str	r2, [r3, #12]
 801c27c:	e009      	b.n	801c292 <UART_SetConfig+0x5d6>
 801c27e:	bf00      	nop
 801c280:	40008000 	.word	0x40008000
 801c284:	00f42400 	.word	0x00f42400
 801c288:	08023efc 	.word	0x08023efc
      }
      else
      {
        ret = HAL_ERROR;
 801c28c:	2301      	movs	r3, #1
 801c28e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801c292:	697b      	ldr	r3, [r7, #20]
 801c294:	2201      	movs	r2, #1
 801c296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801c29a:	697b      	ldr	r3, [r7, #20]
 801c29c:	2201      	movs	r2, #1
 801c29e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801c2a2:	697b      	ldr	r3, [r7, #20]
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801c2a8:	697b      	ldr	r3, [r7, #20]
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801c2ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	3730      	adds	r7, #48	; 0x30
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c2bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801c2bc:	b480      	push	{r7}
 801c2be:	b083      	sub	sp, #12
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2c8:	f003 0301 	and.w	r3, r3, #1
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d00a      	beq.n	801c2e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	685b      	ldr	r3, [r3, #4]
 801c2d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	430a      	orrs	r2, r1
 801c2e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2ea:	f003 0302 	and.w	r3, r3, #2
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d00a      	beq.n	801c308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	685b      	ldr	r3, [r3, #4]
 801c2f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	430a      	orrs	r2, r1
 801c306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c30c:	f003 0304 	and.w	r3, r3, #4
 801c310:	2b00      	cmp	r3, #0
 801c312:	d00a      	beq.n	801c32a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	685b      	ldr	r3, [r3, #4]
 801c31a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	430a      	orrs	r2, r1
 801c328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c32e:	f003 0308 	and.w	r3, r3, #8
 801c332:	2b00      	cmp	r3, #0
 801c334:	d00a      	beq.n	801c34c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	685b      	ldr	r3, [r3, #4]
 801c33c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	430a      	orrs	r2, r1
 801c34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c350:	f003 0310 	and.w	r3, r3, #16
 801c354:	2b00      	cmp	r3, #0
 801c356:	d00a      	beq.n	801c36e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	689b      	ldr	r3, [r3, #8]
 801c35e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	430a      	orrs	r2, r1
 801c36c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c372:	f003 0320 	and.w	r3, r3, #32
 801c376:	2b00      	cmp	r3, #0
 801c378:	d00a      	beq.n	801c390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	689b      	ldr	r3, [r3, #8]
 801c380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	430a      	orrs	r2, r1
 801c38e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d01a      	beq.n	801c3d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	685b      	ldr	r3, [r3, #4]
 801c3a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	430a      	orrs	r2, r1
 801c3b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c3b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c3ba:	d10a      	bne.n	801c3d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	685b      	ldr	r3, [r3, #4]
 801c3c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	430a      	orrs	r2, r1
 801c3d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d00a      	beq.n	801c3f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	685b      	ldr	r3, [r3, #4]
 801c3e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	430a      	orrs	r2, r1
 801c3f2:	605a      	str	r2, [r3, #4]
  }
}
 801c3f4:	bf00      	nop
 801c3f6:	370c      	adds	r7, #12
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3fe:	4770      	bx	lr

0801c400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801c400:	b580      	push	{r7, lr}
 801c402:	b098      	sub	sp, #96	; 0x60
 801c404:	af02      	add	r7, sp, #8
 801c406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	2200      	movs	r2, #0
 801c40c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801c410:	f7f7 f880 	bl	8013514 <HAL_GetTick>
 801c414:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	f003 0308 	and.w	r3, r3, #8
 801c420:	2b08      	cmp	r3, #8
 801c422:	d12f      	bne.n	801c484 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c428:	9300      	str	r3, [sp, #0]
 801c42a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c42c:	2200      	movs	r2, #0
 801c42e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c432:	6878      	ldr	r0, [r7, #4]
 801c434:	f000 f88e 	bl	801c554 <UART_WaitOnFlagUntilTimeout>
 801c438:	4603      	mov	r3, r0
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d022      	beq.n	801c484 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c446:	e853 3f00 	ldrex	r3, [r3]
 801c44a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c44e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801c452:	653b      	str	r3, [r7, #80]	; 0x50
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	461a      	mov	r2, r3
 801c45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c45c:	647b      	str	r3, [r7, #68]	; 0x44
 801c45e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c460:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c464:	e841 2300 	strex	r3, r2, [r1]
 801c468:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d1e6      	bne.n	801c43e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	2220      	movs	r2, #32
 801c474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	2200      	movs	r2, #0
 801c47c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c480:	2303      	movs	r3, #3
 801c482:	e063      	b.n	801c54c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	f003 0304 	and.w	r3, r3, #4
 801c48e:	2b04      	cmp	r3, #4
 801c490:	d149      	bne.n	801c526 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c492:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c496:	9300      	str	r3, [sp, #0]
 801c498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c49a:	2200      	movs	r2, #0
 801c49c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801c4a0:	6878      	ldr	r0, [r7, #4]
 801c4a2:	f000 f857 	bl	801c554 <UART_WaitOnFlagUntilTimeout>
 801c4a6:	4603      	mov	r3, r0
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d03c      	beq.n	801c526 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4b4:	e853 3f00 	ldrex	r3, [r3]
 801c4b8:	623b      	str	r3, [r7, #32]
   return(result);
 801c4ba:	6a3b      	ldr	r3, [r7, #32]
 801c4bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c4c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	461a      	mov	r2, r3
 801c4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c4ca:	633b      	str	r3, [r7, #48]	; 0x30
 801c4cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c4d2:	e841 2300 	strex	r3, r2, [r1]
 801c4d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d1e6      	bne.n	801c4ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	3308      	adds	r3, #8
 801c4e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4e6:	693b      	ldr	r3, [r7, #16]
 801c4e8:	e853 3f00 	ldrex	r3, [r3]
 801c4ec:	60fb      	str	r3, [r7, #12]
   return(result);
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	f023 0301 	bic.w	r3, r3, #1
 801c4f4:	64bb      	str	r3, [r7, #72]	; 0x48
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	3308      	adds	r3, #8
 801c4fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4fe:	61fa      	str	r2, [r7, #28]
 801c500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c502:	69b9      	ldr	r1, [r7, #24]
 801c504:	69fa      	ldr	r2, [r7, #28]
 801c506:	e841 2300 	strex	r3, r2, [r1]
 801c50a:	617b      	str	r3, [r7, #20]
   return(result);
 801c50c:	697b      	ldr	r3, [r7, #20]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d1e5      	bne.n	801c4de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	2220      	movs	r2, #32
 801c516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	2200      	movs	r2, #0
 801c51e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c522:	2303      	movs	r3, #3
 801c524:	e012      	b.n	801c54c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	2220      	movs	r2, #32
 801c52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	2220      	movs	r2, #32
 801c532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	2200      	movs	r2, #0
 801c53a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	2200      	movs	r2, #0
 801c540:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	2200      	movs	r2, #0
 801c546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801c54a:	2300      	movs	r3, #0
}
 801c54c:	4618      	mov	r0, r3
 801c54e:	3758      	adds	r7, #88	; 0x58
 801c550:	46bd      	mov	sp, r7
 801c552:	bd80      	pop	{r7, pc}

0801c554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801c554:	b580      	push	{r7, lr}
 801c556:	b084      	sub	sp, #16
 801c558:	af00      	add	r7, sp, #0
 801c55a:	60f8      	str	r0, [r7, #12]
 801c55c:	60b9      	str	r1, [r7, #8]
 801c55e:	603b      	str	r3, [r7, #0]
 801c560:	4613      	mov	r3, r2
 801c562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c564:	e049      	b.n	801c5fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c566:	69bb      	ldr	r3, [r7, #24]
 801c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c56c:	d045      	beq.n	801c5fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c56e:	f7f6 ffd1 	bl	8013514 <HAL_GetTick>
 801c572:	4602      	mov	r2, r0
 801c574:	683b      	ldr	r3, [r7, #0]
 801c576:	1ad3      	subs	r3, r2, r3
 801c578:	69ba      	ldr	r2, [r7, #24]
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d302      	bcc.n	801c584 <UART_WaitOnFlagUntilTimeout+0x30>
 801c57e:	69bb      	ldr	r3, [r7, #24]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d101      	bne.n	801c588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801c584:	2303      	movs	r3, #3
 801c586:	e048      	b.n	801c61a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	f003 0304 	and.w	r3, r3, #4
 801c592:	2b00      	cmp	r3, #0
 801c594:	d031      	beq.n	801c5fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	69db      	ldr	r3, [r3, #28]
 801c59c:	f003 0308 	and.w	r3, r3, #8
 801c5a0:	2b08      	cmp	r3, #8
 801c5a2:	d110      	bne.n	801c5c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	2208      	movs	r2, #8
 801c5aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801c5ac:	68f8      	ldr	r0, [r7, #12]
 801c5ae:	f000 f95b 	bl	801c868 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	2208      	movs	r2, #8
 801c5b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801c5c2:	2301      	movs	r3, #1
 801c5c4:	e029      	b.n	801c61a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c5c6:	68fb      	ldr	r3, [r7, #12]
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	69db      	ldr	r3, [r3, #28]
 801c5cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c5d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c5d4:	d111      	bne.n	801c5fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	681b      	ldr	r3, [r3, #0]
 801c5da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c5de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801c5e0:	68f8      	ldr	r0, [r7, #12]
 801c5e2:	f000 f941 	bl	801c868 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	2220      	movs	r2, #32
 801c5ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	2200      	movs	r2, #0
 801c5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801c5f6:	2303      	movs	r3, #3
 801c5f8:	e00f      	b.n	801c61a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	69da      	ldr	r2, [r3, #28]
 801c600:	68bb      	ldr	r3, [r7, #8]
 801c602:	4013      	ands	r3, r2
 801c604:	68ba      	ldr	r2, [r7, #8]
 801c606:	429a      	cmp	r2, r3
 801c608:	bf0c      	ite	eq
 801c60a:	2301      	moveq	r3, #1
 801c60c:	2300      	movne	r3, #0
 801c60e:	b2db      	uxtb	r3, r3
 801c610:	461a      	mov	r2, r3
 801c612:	79fb      	ldrb	r3, [r7, #7]
 801c614:	429a      	cmp	r2, r3
 801c616:	d0a6      	beq.n	801c566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c618:	2300      	movs	r3, #0
}
 801c61a:	4618      	mov	r0, r3
 801c61c:	3710      	adds	r7, #16
 801c61e:	46bd      	mov	sp, r7
 801c620:	bd80      	pop	{r7, pc}
	...

0801c624 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c624:	b480      	push	{r7}
 801c626:	b0a3      	sub	sp, #140	; 0x8c
 801c628:	af00      	add	r7, sp, #0
 801c62a:	60f8      	str	r0, [r7, #12]
 801c62c:	60b9      	str	r1, [r7, #8]
 801c62e:	4613      	mov	r3, r2
 801c630:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	68ba      	ldr	r2, [r7, #8]
 801c636:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	88fa      	ldrh	r2, [r7, #6]
 801c63c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801c640:	68fb      	ldr	r3, [r7, #12]
 801c642:	88fa      	ldrh	r2, [r7, #6]
 801c644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	2200      	movs	r2, #0
 801c64c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	689b      	ldr	r3, [r3, #8]
 801c652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c656:	d10e      	bne.n	801c676 <UART_Start_Receive_IT+0x52>
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	691b      	ldr	r3, [r3, #16]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d105      	bne.n	801c66c <UART_Start_Receive_IT+0x48>
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c666:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c66a:	e02d      	b.n	801c6c8 <UART_Start_Receive_IT+0xa4>
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	22ff      	movs	r2, #255	; 0xff
 801c670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c674:	e028      	b.n	801c6c8 <UART_Start_Receive_IT+0xa4>
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	689b      	ldr	r3, [r3, #8]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d10d      	bne.n	801c69a <UART_Start_Receive_IT+0x76>
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	691b      	ldr	r3, [r3, #16]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d104      	bne.n	801c690 <UART_Start_Receive_IT+0x6c>
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	22ff      	movs	r2, #255	; 0xff
 801c68a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c68e:	e01b      	b.n	801c6c8 <UART_Start_Receive_IT+0xa4>
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	227f      	movs	r2, #127	; 0x7f
 801c694:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c698:	e016      	b.n	801c6c8 <UART_Start_Receive_IT+0xa4>
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	689b      	ldr	r3, [r3, #8]
 801c69e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c6a2:	d10d      	bne.n	801c6c0 <UART_Start_Receive_IT+0x9c>
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	691b      	ldr	r3, [r3, #16]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d104      	bne.n	801c6b6 <UART_Start_Receive_IT+0x92>
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	227f      	movs	r2, #127	; 0x7f
 801c6b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c6b4:	e008      	b.n	801c6c8 <UART_Start_Receive_IT+0xa4>
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	223f      	movs	r2, #63	; 0x3f
 801c6ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801c6be:	e003      	b.n	801c6c8 <UART_Start_Receive_IT+0xa4>
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c6d0:	68fb      	ldr	r3, [r7, #12]
 801c6d2:	2222      	movs	r2, #34	; 0x22
 801c6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	3308      	adds	r3, #8
 801c6de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c6e2:	e853 3f00 	ldrex	r3, [r3]
 801c6e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801c6e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c6ea:	f043 0301 	orr.w	r3, r3, #1
 801c6ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	3308      	adds	r3, #8
 801c6f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801c6fc:	673a      	str	r2, [r7, #112]	; 0x70
 801c6fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c700:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801c702:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c704:	e841 2300 	strex	r3, r2, [r1]
 801c708:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801c70a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d1e3      	bne.n	801c6d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c718:	d14f      	bne.n	801c7ba <UART_Start_Receive_IT+0x196>
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c720:	88fa      	ldrh	r2, [r7, #6]
 801c722:	429a      	cmp	r2, r3
 801c724:	d349      	bcc.n	801c7ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	689b      	ldr	r3, [r3, #8]
 801c72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c72e:	d107      	bne.n	801c740 <UART_Start_Receive_IT+0x11c>
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	691b      	ldr	r3, [r3, #16]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d103      	bne.n	801c740 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	4a47      	ldr	r2, [pc, #284]	; (801c858 <UART_Start_Receive_IT+0x234>)
 801c73c:	675a      	str	r2, [r3, #116]	; 0x74
 801c73e:	e002      	b.n	801c746 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	4a46      	ldr	r2, [pc, #280]	; (801c85c <UART_Start_Receive_IT+0x238>)
 801c744:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	691b      	ldr	r3, [r3, #16]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d01a      	beq.n	801c784 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c756:	e853 3f00 	ldrex	r3, [r3]
 801c75a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801c75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c762:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	461a      	mov	r2, r3
 801c76c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801c770:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c772:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c774:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c776:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c778:	e841 2300 	strex	r3, r2, [r1]
 801c77c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c77e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c780:	2b00      	cmp	r3, #0
 801c782:	d1e4      	bne.n	801c74e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	3308      	adds	r3, #8
 801c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c78e:	e853 3f00 	ldrex	r3, [r3]
 801c792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c79a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	3308      	adds	r3, #8
 801c7a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c7a4:	64ba      	str	r2, [r7, #72]	; 0x48
 801c7a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c7aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c7ac:	e841 2300 	strex	r3, r2, [r1]
 801c7b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c7b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d1e5      	bne.n	801c784 <UART_Start_Receive_IT+0x160>
 801c7b8:	e046      	b.n	801c848 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c7ba:	68fb      	ldr	r3, [r7, #12]
 801c7bc:	689b      	ldr	r3, [r3, #8]
 801c7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c7c2:	d107      	bne.n	801c7d4 <UART_Start_Receive_IT+0x1b0>
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	691b      	ldr	r3, [r3, #16]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d103      	bne.n	801c7d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	4a24      	ldr	r2, [pc, #144]	; (801c860 <UART_Start_Receive_IT+0x23c>)
 801c7d0:	675a      	str	r2, [r3, #116]	; 0x74
 801c7d2:	e002      	b.n	801c7da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	4a23      	ldr	r2, [pc, #140]	; (801c864 <UART_Start_Receive_IT+0x240>)
 801c7d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	691b      	ldr	r3, [r3, #16]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d019      	beq.n	801c816 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7ea:	e853 3f00 	ldrex	r3, [r3]
 801c7ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c7f6:	677b      	str	r3, [r7, #116]	; 0x74
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	461a      	mov	r2, r3
 801c7fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c800:	637b      	str	r3, [r7, #52]	; 0x34
 801c802:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c808:	e841 2300 	strex	r3, r2, [r1]
 801c80c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c810:	2b00      	cmp	r3, #0
 801c812:	d1e6      	bne.n	801c7e2 <UART_Start_Receive_IT+0x1be>
 801c814:	e018      	b.n	801c848 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	e853 3f00 	ldrex	r3, [r3]
 801c822:	613b      	str	r3, [r7, #16]
   return(result);
 801c824:	693b      	ldr	r3, [r7, #16]
 801c826:	f043 0320 	orr.w	r3, r3, #32
 801c82a:	67bb      	str	r3, [r7, #120]	; 0x78
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	461a      	mov	r2, r3
 801c832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c834:	623b      	str	r3, [r7, #32]
 801c836:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c838:	69f9      	ldr	r1, [r7, #28]
 801c83a:	6a3a      	ldr	r2, [r7, #32]
 801c83c:	e841 2300 	strex	r3, r2, [r1]
 801c840:	61bb      	str	r3, [r7, #24]
   return(result);
 801c842:	69bb      	ldr	r3, [r7, #24]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d1e6      	bne.n	801c816 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801c848:	2300      	movs	r3, #0
}
 801c84a:	4618      	mov	r0, r3
 801c84c:	378c      	adds	r7, #140	; 0x8c
 801c84e:	46bd      	mov	sp, r7
 801c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c854:	4770      	bx	lr
 801c856:	bf00      	nop
 801c858:	0801d089 	.word	0x0801d089
 801c85c:	0801cd29 	.word	0x0801cd29
 801c860:	0801cb71 	.word	0x0801cb71
 801c864:	0801c9b9 	.word	0x0801c9b9

0801c868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c868:	b480      	push	{r7}
 801c86a:	b095      	sub	sp, #84	; 0x54
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c878:	e853 3f00 	ldrex	r3, [r3]
 801c87c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c884:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	461a      	mov	r2, r3
 801c88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c88e:	643b      	str	r3, [r7, #64]	; 0x40
 801c890:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c896:	e841 2300 	strex	r3, r2, [r1]
 801c89a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d1e6      	bne.n	801c870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	3308      	adds	r3, #8
 801c8a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8aa:	6a3b      	ldr	r3, [r7, #32]
 801c8ac:	e853 3f00 	ldrex	r3, [r3]
 801c8b0:	61fb      	str	r3, [r7, #28]
   return(result);
 801c8b2:	69fb      	ldr	r3, [r7, #28]
 801c8b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c8b8:	f023 0301 	bic.w	r3, r3, #1
 801c8bc:	64bb      	str	r3, [r7, #72]	; 0x48
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	681b      	ldr	r3, [r3, #0]
 801c8c2:	3308      	adds	r3, #8
 801c8c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c8c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c8c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c8cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8ce:	e841 2300 	strex	r3, r2, [r1]
 801c8d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d1e3      	bne.n	801c8a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c8de:	2b01      	cmp	r3, #1
 801c8e0:	d118      	bne.n	801c914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	e853 3f00 	ldrex	r3, [r3]
 801c8ee:	60bb      	str	r3, [r7, #8]
   return(result);
 801c8f0:	68bb      	ldr	r3, [r7, #8]
 801c8f2:	f023 0310 	bic.w	r3, r3, #16
 801c8f6:	647b      	str	r3, [r7, #68]	; 0x44
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	461a      	mov	r2, r3
 801c8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c900:	61bb      	str	r3, [r7, #24]
 801c902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c904:	6979      	ldr	r1, [r7, #20]
 801c906:	69ba      	ldr	r2, [r7, #24]
 801c908:	e841 2300 	strex	r3, r2, [r1]
 801c90c:	613b      	str	r3, [r7, #16]
   return(result);
 801c90e:	693b      	ldr	r3, [r7, #16]
 801c910:	2b00      	cmp	r3, #0
 801c912:	d1e6      	bne.n	801c8e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	2220      	movs	r2, #32
 801c918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2200      	movs	r2, #0
 801c920:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	2200      	movs	r2, #0
 801c926:	675a      	str	r2, [r3, #116]	; 0x74
}
 801c928:	bf00      	nop
 801c92a:	3754      	adds	r7, #84	; 0x54
 801c92c:	46bd      	mov	sp, r7
 801c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c932:	4770      	bx	lr

0801c934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c934:	b580      	push	{r7, lr}
 801c936:	b084      	sub	sp, #16
 801c938:	af00      	add	r7, sp, #0
 801c93a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	2200      	movs	r2, #0
 801c946:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	2200      	movs	r2, #0
 801c94e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c952:	68f8      	ldr	r0, [r7, #12]
 801c954:	f7ff f99c 	bl	801bc90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c958:	bf00      	nop
 801c95a:	3710      	adds	r7, #16
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bd80      	pop	{r7, pc}

0801c960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b088      	sub	sp, #32
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	e853 3f00 	ldrex	r3, [r3]
 801c974:	60bb      	str	r3, [r7, #8]
   return(result);
 801c976:	68bb      	ldr	r3, [r7, #8]
 801c978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c97c:	61fb      	str	r3, [r7, #28]
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	461a      	mov	r2, r3
 801c984:	69fb      	ldr	r3, [r7, #28]
 801c986:	61bb      	str	r3, [r7, #24]
 801c988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c98a:	6979      	ldr	r1, [r7, #20]
 801c98c:	69ba      	ldr	r2, [r7, #24]
 801c98e:	e841 2300 	strex	r3, r2, [r1]
 801c992:	613b      	str	r3, [r7, #16]
   return(result);
 801c994:	693b      	ldr	r3, [r7, #16]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d1e6      	bne.n	801c968 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	2220      	movs	r2, #32
 801c99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c9a8:	6878      	ldr	r0, [r7, #4]
 801c9aa:	f7ff f967 	bl	801bc7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c9ae:	bf00      	nop
 801c9b0:	3720      	adds	r7, #32
 801c9b2:	46bd      	mov	sp, r7
 801c9b4:	bd80      	pop	{r7, pc}
	...

0801c9b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b09c      	sub	sp, #112	; 0x70
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c9c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c9d0:	2b22      	cmp	r3, #34	; 0x22
 801c9d2:	f040 80be 	bne.w	801cb52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c9e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801c9e4:	b2d9      	uxtb	r1, r3
 801c9e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801c9ea:	b2da      	uxtb	r2, r3
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9f0:	400a      	ands	r2, r1
 801c9f2:	b2d2      	uxtb	r2, r2
 801c9f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9fa:	1c5a      	adds	r2, r3, #1
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ca06:	b29b      	uxth	r3, r3
 801ca08:	3b01      	subs	r3, #1
 801ca0a:	b29a      	uxth	r2, r3
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ca18:	b29b      	uxth	r3, r3
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	f040 80a1 	bne.w	801cb62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca28:	e853 3f00 	ldrex	r3, [r3]
 801ca2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801ca2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ca30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ca34:	66bb      	str	r3, [r7, #104]	; 0x68
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	461a      	mov	r2, r3
 801ca3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ca3e:	65bb      	str	r3, [r7, #88]	; 0x58
 801ca40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ca44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ca46:	e841 2300 	strex	r3, r2, [r1]
 801ca4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801ca4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d1e6      	bne.n	801ca20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	3308      	adds	r3, #8
 801ca58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca5c:	e853 3f00 	ldrex	r3, [r3]
 801ca60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca64:	f023 0301 	bic.w	r3, r3, #1
 801ca68:	667b      	str	r3, [r7, #100]	; 0x64
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	3308      	adds	r3, #8
 801ca70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ca72:	647a      	str	r2, [r7, #68]	; 0x44
 801ca74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ca78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ca7a:	e841 2300 	strex	r3, r2, [r1]
 801ca7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ca80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d1e5      	bne.n	801ca52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	2220      	movs	r2, #32
 801ca8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	2200      	movs	r2, #0
 801ca92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	2200      	movs	r2, #0
 801ca98:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	4a33      	ldr	r2, [pc, #204]	; (801cb6c <UART_RxISR_8BIT+0x1b4>)
 801caa0:	4293      	cmp	r3, r2
 801caa2:	d01f      	beq.n	801cae4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	685b      	ldr	r3, [r3, #4]
 801caaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d018      	beq.n	801cae4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caba:	e853 3f00 	ldrex	r3, [r3]
 801cabe:	623b      	str	r3, [r7, #32]
   return(result);
 801cac0:	6a3b      	ldr	r3, [r7, #32]
 801cac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801cac6:	663b      	str	r3, [r7, #96]	; 0x60
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	461a      	mov	r2, r3
 801cace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cad0:	633b      	str	r3, [r7, #48]	; 0x30
 801cad2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cad8:	e841 2300 	strex	r3, r2, [r1]
 801cadc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d1e6      	bne.n	801cab2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cae8:	2b01      	cmp	r3, #1
 801caea:	d12e      	bne.n	801cb4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2200      	movs	r2, #0
 801caf0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caf8:	693b      	ldr	r3, [r7, #16]
 801cafa:	e853 3f00 	ldrex	r3, [r3]
 801cafe:	60fb      	str	r3, [r7, #12]
   return(result);
 801cb00:	68fb      	ldr	r3, [r7, #12]
 801cb02:	f023 0310 	bic.w	r3, r3, #16
 801cb06:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	461a      	mov	r2, r3
 801cb0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb10:	61fb      	str	r3, [r7, #28]
 801cb12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cb14:	69b9      	ldr	r1, [r7, #24]
 801cb16:	69fa      	ldr	r2, [r7, #28]
 801cb18:	e841 2300 	strex	r3, r2, [r1]
 801cb1c:	617b      	str	r3, [r7, #20]
   return(result);
 801cb1e:	697b      	ldr	r3, [r7, #20]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d1e6      	bne.n	801caf2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	69db      	ldr	r3, [r3, #28]
 801cb2a:	f003 0310 	and.w	r3, r3, #16
 801cb2e:	2b10      	cmp	r3, #16
 801cb30:	d103      	bne.n	801cb3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	2210      	movs	r2, #16
 801cb38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801cb40:	4619      	mov	r1, r3
 801cb42:	6878      	ldr	r0, [r7, #4]
 801cb44:	f7ff f8ae 	bl	801bca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cb48:	e00b      	b.n	801cb62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801cb4a:	6878      	ldr	r0, [r7, #4]
 801cb4c:	f7e7 f8b6 	bl	8003cbc <HAL_UART_RxCpltCallback>
}
 801cb50:	e007      	b.n	801cb62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	699a      	ldr	r2, [r3, #24]
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	f042 0208 	orr.w	r2, r2, #8
 801cb60:	619a      	str	r2, [r3, #24]
}
 801cb62:	bf00      	nop
 801cb64:	3770      	adds	r7, #112	; 0x70
 801cb66:	46bd      	mov	sp, r7
 801cb68:	bd80      	pop	{r7, pc}
 801cb6a:	bf00      	nop
 801cb6c:	40008000 	.word	0x40008000

0801cb70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	b09c      	sub	sp, #112	; 0x70
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cb7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cb88:	2b22      	cmp	r3, #34	; 0x22
 801cb8a:	f040 80be 	bne.w	801cd0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801cb9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801cba2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801cba6:	4013      	ands	r3, r2
 801cba8:	b29a      	uxth	r2, r3
 801cbaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cbac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cbb2:	1c9a      	adds	r2, r3, #2
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cbbe:	b29b      	uxth	r3, r3
 801cbc0:	3b01      	subs	r3, #1
 801cbc2:	b29a      	uxth	r2, r3
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cbd0:	b29b      	uxth	r3, r3
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	f040 80a1 	bne.w	801cd1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cbe0:	e853 3f00 	ldrex	r3, [r3]
 801cbe4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801cbe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cbe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801cbec:	667b      	str	r3, [r7, #100]	; 0x64
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	461a      	mov	r2, r3
 801cbf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801cbf6:	657b      	str	r3, [r7, #84]	; 0x54
 801cbf8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cbfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cbfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cbfe:	e841 2300 	strex	r3, r2, [r1]
 801cc02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801cc04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d1e6      	bne.n	801cbd8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	3308      	adds	r3, #8
 801cc10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc14:	e853 3f00 	ldrex	r3, [r3]
 801cc18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc1c:	f023 0301 	bic.w	r3, r3, #1
 801cc20:	663b      	str	r3, [r7, #96]	; 0x60
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	3308      	adds	r3, #8
 801cc28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cc2a:	643a      	str	r2, [r7, #64]	; 0x40
 801cc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cc2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cc30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cc32:	e841 2300 	strex	r3, r2, [r1]
 801cc36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d1e5      	bne.n	801cc0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	2220      	movs	r2, #32
 801cc42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	2200      	movs	r2, #0
 801cc4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	2200      	movs	r2, #0
 801cc50:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	4a33      	ldr	r2, [pc, #204]	; (801cd24 <UART_RxISR_16BIT+0x1b4>)
 801cc58:	4293      	cmp	r3, r2
 801cc5a:	d01f      	beq.n	801cc9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	685b      	ldr	r3, [r3, #4]
 801cc62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d018      	beq.n	801cc9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cc6a:	687b      	ldr	r3, [r7, #4]
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cc70:	6a3b      	ldr	r3, [r7, #32]
 801cc72:	e853 3f00 	ldrex	r3, [r3]
 801cc76:	61fb      	str	r3, [r7, #28]
   return(result);
 801cc78:	69fb      	ldr	r3, [r7, #28]
 801cc7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801cc7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	461a      	mov	r2, r3
 801cc86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cc88:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cc8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cc8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cc90:	e841 2300 	strex	r3, r2, [r1]
 801cc94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d1e6      	bne.n	801cc6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cca0:	2b01      	cmp	r3, #1
 801cca2:	d12e      	bne.n	801cd02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	2200      	movs	r2, #0
 801cca8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	e853 3f00 	ldrex	r3, [r3]
 801ccb6:	60bb      	str	r3, [r7, #8]
   return(result);
 801ccb8:	68bb      	ldr	r3, [r7, #8]
 801ccba:	f023 0310 	bic.w	r3, r3, #16
 801ccbe:	65bb      	str	r3, [r7, #88]	; 0x58
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	461a      	mov	r2, r3
 801ccc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ccc8:	61bb      	str	r3, [r7, #24]
 801ccca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cccc:	6979      	ldr	r1, [r7, #20]
 801ccce:	69ba      	ldr	r2, [r7, #24]
 801ccd0:	e841 2300 	strex	r3, r2, [r1]
 801ccd4:	613b      	str	r3, [r7, #16]
   return(result);
 801ccd6:	693b      	ldr	r3, [r7, #16]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d1e6      	bne.n	801ccaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	69db      	ldr	r3, [r3, #28]
 801cce2:	f003 0310 	and.w	r3, r3, #16
 801cce6:	2b10      	cmp	r3, #16
 801cce8:	d103      	bne.n	801ccf2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	2210      	movs	r2, #16
 801ccf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801ccf8:	4619      	mov	r1, r3
 801ccfa:	6878      	ldr	r0, [r7, #4]
 801ccfc:	f7fe ffd2 	bl	801bca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cd00:	e00b      	b.n	801cd1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801cd02:	6878      	ldr	r0, [r7, #4]
 801cd04:	f7e6 ffda 	bl	8003cbc <HAL_UART_RxCpltCallback>
}
 801cd08:	e007      	b.n	801cd1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	699a      	ldr	r2, [r3, #24]
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	f042 0208 	orr.w	r2, r2, #8
 801cd18:	619a      	str	r2, [r3, #24]
}
 801cd1a:	bf00      	nop
 801cd1c:	3770      	adds	r7, #112	; 0x70
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	bd80      	pop	{r7, pc}
 801cd22:	bf00      	nop
 801cd24:	40008000 	.word	0x40008000

0801cd28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801cd28:	b580      	push	{r7, lr}
 801cd2a:	b0ac      	sub	sp, #176	; 0xb0
 801cd2c:	af00      	add	r7, sp, #0
 801cd2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cd36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	69db      	ldr	r3, [r3, #28]
 801cd40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	689b      	ldr	r3, [r3, #8]
 801cd54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cd5e:	2b22      	cmp	r3, #34	; 0x22
 801cd60:	f040 8182 	bne.w	801d068 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cd6a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801cd6e:	e125      	b.n	801cfbc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd76:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801cd7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801cd7e:	b2d9      	uxtb	r1, r3
 801cd80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801cd84:	b2da      	uxtb	r2, r3
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd8a:	400a      	ands	r2, r1
 801cd8c:	b2d2      	uxtb	r2, r2
 801cd8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd94:	1c5a      	adds	r2, r3, #1
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cda0:	b29b      	uxth	r3, r3
 801cda2:	3b01      	subs	r3, #1
 801cda4:	b29a      	uxth	r2, r3
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	69db      	ldr	r3, [r3, #28]
 801cdb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801cdb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cdba:	f003 0307 	and.w	r3, r3, #7
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d053      	beq.n	801ce6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801cdc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cdc6:	f003 0301 	and.w	r3, r3, #1
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d011      	beq.n	801cdf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801cdce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d00b      	beq.n	801cdf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	2201      	movs	r2, #1
 801cde0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cde8:	f043 0201 	orr.w	r2, r3, #1
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cdf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cdf6:	f003 0302 	and.w	r3, r3, #2
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d011      	beq.n	801ce22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801cdfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ce02:	f003 0301 	and.w	r3, r3, #1
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d00b      	beq.n	801ce22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	2202      	movs	r2, #2
 801ce10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce18:	f043 0204 	orr.w	r2, r3, #4
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ce22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ce26:	f003 0304 	and.w	r3, r3, #4
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d011      	beq.n	801ce52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801ce2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ce32:	f003 0301 	and.w	r3, r3, #1
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d00b      	beq.n	801ce52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	2204      	movs	r2, #4
 801ce40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce48:	f043 0202 	orr.w	r2, r3, #2
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d006      	beq.n	801ce6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801ce5c:	6878      	ldr	r0, [r7, #4]
 801ce5e:	f7fe ff17 	bl	801bc90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	2200      	movs	r2, #0
 801ce66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801ce70:	b29b      	uxth	r3, r3
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	f040 80a2 	bne.w	801cfbc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ce7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce80:	e853 3f00 	ldrex	r3, [r3]
 801ce84:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801ce86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ce88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ce8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	461a      	mov	r2, r3
 801ce96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ce9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ce9c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ce9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801cea0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801cea2:	e841 2300 	strex	r3, r2, [r1]
 801cea6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 801cea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d1e4      	bne.n	801ce78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	3308      	adds	r3, #8
 801ceb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ceb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ceb8:	e853 3f00 	ldrex	r3, [r3]
 801cebc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801cebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cec4:	f023 0301 	bic.w	r3, r3, #1
 801cec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	3308      	adds	r3, #8
 801ced2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ced6:	66ba      	str	r2, [r7, #104]	; 0x68
 801ced8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ceda:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801cedc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cede:	e841 2300 	strex	r3, r2, [r1]
 801cee2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801cee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d1e1      	bne.n	801ceae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	2220      	movs	r2, #32
 801ceee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	2200      	movs	r2, #0
 801cef6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	2200      	movs	r2, #0
 801cefc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	4a5f      	ldr	r2, [pc, #380]	; (801d080 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801cf04:	4293      	cmp	r3, r2
 801cf06:	d021      	beq.n	801cf4c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	685b      	ldr	r3, [r3, #4]
 801cf0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d01a      	beq.n	801cf4c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cf1e:	e853 3f00 	ldrex	r3, [r3]
 801cf22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801cf24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cf26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801cf2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	461a      	mov	r2, r3
 801cf34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf38:	657b      	str	r3, [r7, #84]	; 0x54
 801cf3a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801cf3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cf40:	e841 2300 	strex	r3, r2, [r1]
 801cf44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801cf46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	d1e4      	bne.n	801cf16 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf50:	2b01      	cmp	r3, #1
 801cf52:	d130      	bne.n	801cfb6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	2200      	movs	r2, #0
 801cf58:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cf60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf62:	e853 3f00 	ldrex	r3, [r3]
 801cf66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf6a:	f023 0310 	bic.w	r3, r3, #16
 801cf6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	461a      	mov	r2, r3
 801cf78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cf7c:	643b      	str	r3, [r7, #64]	; 0x40
 801cf7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cf80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cf82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cf84:	e841 2300 	strex	r3, r2, [r1]
 801cf88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d1e4      	bne.n	801cf5a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	69db      	ldr	r3, [r3, #28]
 801cf96:	f003 0310 	and.w	r3, r3, #16
 801cf9a:	2b10      	cmp	r3, #16
 801cf9c:	d103      	bne.n	801cfa6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	2210      	movs	r2, #16
 801cfa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801cfac:	4619      	mov	r1, r3
 801cfae:	6878      	ldr	r0, [r7, #4]
 801cfb0:	f7fe fe78 	bl	801bca4 <HAL_UARTEx_RxEventCallback>
 801cfb4:	e002      	b.n	801cfbc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801cfb6:	6878      	ldr	r0, [r7, #4]
 801cfb8:	f7e6 fe80 	bl	8003cbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801cfbc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d006      	beq.n	801cfd2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801cfc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801cfc8:	f003 0320 	and.w	r3, r3, #32
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	f47f aecf 	bne.w	801cd70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801cfd8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801cfdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d049      	beq.n	801d078 <UART_RxISR_8BIT_FIFOEN+0x350>
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801cfea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801cfee:	429a      	cmp	r2, r3
 801cff0:	d242      	bcs.n	801d078 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	3308      	adds	r3, #8
 801cff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cffa:	6a3b      	ldr	r3, [r7, #32]
 801cffc:	e853 3f00 	ldrex	r3, [r3]
 801d000:	61fb      	str	r3, [r7, #28]
   return(result);
 801d002:	69fb      	ldr	r3, [r7, #28]
 801d004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	3308      	adds	r3, #8
 801d012:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d016:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d01a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d01e:	e841 2300 	strex	r3, r2, [r1]
 801d022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d026:	2b00      	cmp	r3, #0
 801d028:	d1e3      	bne.n	801cff2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	4a15      	ldr	r2, [pc, #84]	; (801d084 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801d02e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	e853 3f00 	ldrex	r3, [r3]
 801d03c:	60bb      	str	r3, [r7, #8]
   return(result);
 801d03e:	68bb      	ldr	r3, [r7, #8]
 801d040:	f043 0320 	orr.w	r3, r3, #32
 801d044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	681b      	ldr	r3, [r3, #0]
 801d04c:	461a      	mov	r2, r3
 801d04e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d052:	61bb      	str	r3, [r7, #24]
 801d054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d056:	6979      	ldr	r1, [r7, #20]
 801d058:	69ba      	ldr	r2, [r7, #24]
 801d05a:	e841 2300 	strex	r3, r2, [r1]
 801d05e:	613b      	str	r3, [r7, #16]
   return(result);
 801d060:	693b      	ldr	r3, [r7, #16]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d1e4      	bne.n	801d030 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d066:	e007      	b.n	801d078 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	699a      	ldr	r2, [r3, #24]
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	681b      	ldr	r3, [r3, #0]
 801d072:	f042 0208 	orr.w	r2, r2, #8
 801d076:	619a      	str	r2, [r3, #24]
}
 801d078:	bf00      	nop
 801d07a:	37b0      	adds	r7, #176	; 0xb0
 801d07c:	46bd      	mov	sp, r7
 801d07e:	bd80      	pop	{r7, pc}
 801d080:	40008000 	.word	0x40008000
 801d084:	0801c9b9 	.word	0x0801c9b9

0801d088 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801d088:	b580      	push	{r7, lr}
 801d08a:	b0ae      	sub	sp, #184	; 0xb8
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d096:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	69db      	ldr	r3, [r3, #28]
 801d0a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	681b      	ldr	r3, [r3, #0]
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	689b      	ldr	r3, [r3, #8]
 801d0b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d0be:	2b22      	cmp	r3, #34	; 0x22
 801d0c0:	f040 8186 	bne.w	801d3d0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d0ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d0ce:	e129      	b.n	801d324 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d0de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801d0e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801d0e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d0ea:	4013      	ands	r3, r2
 801d0ec:	b29a      	uxth	r2, r3
 801d0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801d0f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d0f8:	1c9a      	adds	r2, r3, #2
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d104:	b29b      	uxth	r3, r3
 801d106:	3b01      	subs	r3, #1
 801d108:	b29a      	uxth	r2, r3
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	69db      	ldr	r3, [r3, #28]
 801d116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801d11a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d11e:	f003 0307 	and.w	r3, r3, #7
 801d122:	2b00      	cmp	r3, #0
 801d124:	d053      	beq.n	801d1ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d12a:	f003 0301 	and.w	r3, r3, #1
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d011      	beq.n	801d156 <UART_RxISR_16BIT_FIFOEN+0xce>
 801d132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d00b      	beq.n	801d156 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	2201      	movs	r2, #1
 801d144:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d14c:	f043 0201 	orr.w	r2, r3, #1
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d15a:	f003 0302 	and.w	r3, r3, #2
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d011      	beq.n	801d186 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801d162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d166:	f003 0301 	and.w	r3, r3, #1
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d00b      	beq.n	801d186 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	2202      	movs	r2, #2
 801d174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d17c:	f043 0204 	orr.w	r2, r3, #4
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d18a:	f003 0304 	and.w	r3, r3, #4
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d011      	beq.n	801d1b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801d192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801d196:	f003 0301 	and.w	r3, r3, #1
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d00b      	beq.n	801d1b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	2204      	movs	r2, #4
 801d1a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d1ac:	f043 0202 	orr.w	r2, r3, #2
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d006      	beq.n	801d1ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801d1c0:	6878      	ldr	r0, [r7, #4]
 801d1c2:	f7fe fd65 	bl	801bc90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d1d4:	b29b      	uxth	r3, r3
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	f040 80a4 	bne.w	801d324 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d1e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1e4:	e853 3f00 	ldrex	r3, [r3]
 801d1e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801d1ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d1f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	461a      	mov	r2, r3
 801d1fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d1fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d202:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801d206:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801d20a:	e841 2300 	strex	r3, r2, [r1]
 801d20e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801d210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d212:	2b00      	cmp	r3, #0
 801d214:	d1e2      	bne.n	801d1dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	3308      	adds	r3, #8
 801d21c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d21e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d220:	e853 3f00 	ldrex	r3, [r3]
 801d224:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801d226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d22c:	f023 0301 	bic.w	r3, r3, #1
 801d230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	681b      	ldr	r3, [r3, #0]
 801d238:	3308      	adds	r3, #8
 801d23a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801d23e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801d244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d246:	e841 2300 	strex	r3, r2, [r1]
 801d24a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801d24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d1e1      	bne.n	801d216 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	2220      	movs	r2, #32
 801d256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	2200      	movs	r2, #0
 801d25e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	2200      	movs	r2, #0
 801d264:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	4a5f      	ldr	r2, [pc, #380]	; (801d3e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801d26c:	4293      	cmp	r3, r2
 801d26e:	d021      	beq.n	801d2b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d01a      	beq.n	801d2b4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d286:	e853 3f00 	ldrex	r3, [r3]
 801d28a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801d28c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d28e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d292:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	461a      	mov	r2, r3
 801d29c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801d2a0:	65bb      	str	r3, [r7, #88]	; 0x58
 801d2a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d2a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d2a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d2a8:	e841 2300 	strex	r3, r2, [r1]
 801d2ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801d2ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d1e4      	bne.n	801d27e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d2b8:	2b01      	cmp	r3, #1
 801d2ba:	d130      	bne.n	801d31e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	2200      	movs	r2, #0
 801d2c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d2ca:	e853 3f00 	ldrex	r3, [r3]
 801d2ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801d2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2d2:	f023 0310 	bic.w	r3, r3, #16
 801d2d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	461a      	mov	r2, r3
 801d2e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d2e4:	647b      	str	r3, [r7, #68]	; 0x44
 801d2e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d2e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801d2ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d2ec:	e841 2300 	strex	r3, r2, [r1]
 801d2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801d2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d1e4      	bne.n	801d2c2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	69db      	ldr	r3, [r3, #28]
 801d2fe:	f003 0310 	and.w	r3, r3, #16
 801d302:	2b10      	cmp	r3, #16
 801d304:	d103      	bne.n	801d30e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	2210      	movs	r2, #16
 801d30c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801d314:	4619      	mov	r1, r3
 801d316:	6878      	ldr	r0, [r7, #4]
 801d318:	f7fe fcc4 	bl	801bca4 <HAL_UARTEx_RxEventCallback>
 801d31c:	e002      	b.n	801d324 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801d31e:	6878      	ldr	r0, [r7, #4]
 801d320:	f7e6 fccc 	bl	8003cbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801d324:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d006      	beq.n	801d33a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801d32c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801d330:	f003 0320 	and.w	r3, r3, #32
 801d334:	2b00      	cmp	r3, #0
 801d336:	f47f aecb 	bne.w	801d0d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801d33a:	687b      	ldr	r3, [r7, #4]
 801d33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801d340:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801d344:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d049      	beq.n	801d3e0 <UART_RxISR_16BIT_FIFOEN+0x358>
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d352:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801d356:	429a      	cmp	r2, r3
 801d358:	d242      	bcs.n	801d3e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	3308      	adds	r3, #8
 801d360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d364:	e853 3f00 	ldrex	r3, [r3]
 801d368:	623b      	str	r3, [r7, #32]
   return(result);
 801d36a:	6a3b      	ldr	r3, [r7, #32]
 801d36c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	3308      	adds	r3, #8
 801d37a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d37e:	633a      	str	r2, [r7, #48]	; 0x30
 801d380:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d386:	e841 2300 	strex	r3, r2, [r1]
 801d38a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801d38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d1e3      	bne.n	801d35a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	4a15      	ldr	r2, [pc, #84]	; (801d3ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 801d396:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d39e:	693b      	ldr	r3, [r7, #16]
 801d3a0:	e853 3f00 	ldrex	r3, [r3]
 801d3a4:	60fb      	str	r3, [r7, #12]
   return(result);
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	f043 0320 	orr.w	r3, r3, #32
 801d3ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	461a      	mov	r2, r3
 801d3b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d3ba:	61fb      	str	r3, [r7, #28]
 801d3bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d3be:	69b9      	ldr	r1, [r7, #24]
 801d3c0:	69fa      	ldr	r2, [r7, #28]
 801d3c2:	e841 2300 	strex	r3, r2, [r1]
 801d3c6:	617b      	str	r3, [r7, #20]
   return(result);
 801d3c8:	697b      	ldr	r3, [r7, #20]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d1e4      	bne.n	801d398 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801d3ce:	e007      	b.n	801d3e0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	699a      	ldr	r2, [r3, #24]
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	f042 0208 	orr.w	r2, r2, #8
 801d3de:	619a      	str	r2, [r3, #24]
}
 801d3e0:	bf00      	nop
 801d3e2:	37b8      	adds	r7, #184	; 0xb8
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}
 801d3e8:	40008000 	.word	0x40008000
 801d3ec:	0801cb71 	.word	0x0801cb71

0801d3f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801d3f0:	b480      	push	{r7}
 801d3f2:	b083      	sub	sp, #12
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801d3f8:	bf00      	nop
 801d3fa:	370c      	adds	r7, #12
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d402:	4770      	bx	lr

0801d404 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801d404:	b480      	push	{r7}
 801d406:	b083      	sub	sp, #12
 801d408:	af00      	add	r7, sp, #0
 801d40a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801d40c:	bf00      	nop
 801d40e:	370c      	adds	r7, #12
 801d410:	46bd      	mov	sp, r7
 801d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d416:	4770      	bx	lr

0801d418 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801d418:	b480      	push	{r7}
 801d41a:	b083      	sub	sp, #12
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801d420:	bf00      	nop
 801d422:	370c      	adds	r7, #12
 801d424:	46bd      	mov	sp, r7
 801d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d42a:	4770      	bx	lr

0801d42c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801d42c:	b480      	push	{r7}
 801d42e:	b085      	sub	sp, #20
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d43a:	2b01      	cmp	r3, #1
 801d43c:	d101      	bne.n	801d442 <HAL_UARTEx_DisableFifoMode+0x16>
 801d43e:	2302      	movs	r3, #2
 801d440:	e027      	b.n	801d492 <HAL_UARTEx_DisableFifoMode+0x66>
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	2201      	movs	r2, #1
 801d446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d44a:	687b      	ldr	r3, [r7, #4]
 801d44c:	2224      	movs	r2, #36	; 0x24
 801d44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	681a      	ldr	r2, [r3, #0]
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	f022 0201 	bic.w	r2, r2, #1
 801d468:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801d470:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	2200      	movs	r2, #0
 801d476:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	68fa      	ldr	r2, [r7, #12]
 801d47e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	2220      	movs	r2, #32
 801d484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	2200      	movs	r2, #0
 801d48c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d490:	2300      	movs	r3, #0
}
 801d492:	4618      	mov	r0, r3
 801d494:	3714      	adds	r7, #20
 801d496:	46bd      	mov	sp, r7
 801d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d49c:	4770      	bx	lr

0801d49e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d49e:	b580      	push	{r7, lr}
 801d4a0:	b084      	sub	sp, #16
 801d4a2:	af00      	add	r7, sp, #0
 801d4a4:	6078      	str	r0, [r7, #4]
 801d4a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d4ae:	2b01      	cmp	r3, #1
 801d4b0:	d101      	bne.n	801d4b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801d4b2:	2302      	movs	r3, #2
 801d4b4:	e02d      	b.n	801d512 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	2201      	movs	r2, #1
 801d4ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	2224      	movs	r2, #36	; 0x24
 801d4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d4c6:	687b      	ldr	r3, [r7, #4]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	681a      	ldr	r2, [r3, #0]
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	f022 0201 	bic.w	r2, r2, #1
 801d4dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	689b      	ldr	r3, [r3, #8]
 801d4e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	683a      	ldr	r2, [r7, #0]
 801d4ee:	430a      	orrs	r2, r1
 801d4f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d4f2:	6878      	ldr	r0, [r7, #4]
 801d4f4:	f000 f850 	bl	801d598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	68fa      	ldr	r2, [r7, #12]
 801d4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	2220      	movs	r2, #32
 801d504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	2200      	movs	r2, #0
 801d50c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d510:	2300      	movs	r3, #0
}
 801d512:	4618      	mov	r0, r3
 801d514:	3710      	adds	r7, #16
 801d516:	46bd      	mov	sp, r7
 801d518:	bd80      	pop	{r7, pc}

0801d51a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801d51a:	b580      	push	{r7, lr}
 801d51c:	b084      	sub	sp, #16
 801d51e:	af00      	add	r7, sp, #0
 801d520:	6078      	str	r0, [r7, #4]
 801d522:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801d52a:	2b01      	cmp	r3, #1
 801d52c:	d101      	bne.n	801d532 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801d52e:	2302      	movs	r3, #2
 801d530:	e02d      	b.n	801d58e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	2201      	movs	r2, #1
 801d536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	2224      	movs	r2, #36	; 0x24
 801d53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	681b      	ldr	r3, [r3, #0]
 801d54e:	681a      	ldr	r2, [r3, #0]
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	681b      	ldr	r3, [r3, #0]
 801d554:	f022 0201 	bic.w	r2, r2, #1
 801d558:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	689b      	ldr	r3, [r3, #8]
 801d560:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	683a      	ldr	r2, [r7, #0]
 801d56a:	430a      	orrs	r2, r1
 801d56c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801d56e:	6878      	ldr	r0, [r7, #4]
 801d570:	f000 f812 	bl	801d598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	68fa      	ldr	r2, [r7, #12]
 801d57a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	2220      	movs	r2, #32
 801d580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	2200      	movs	r2, #0
 801d588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801d58c:	2300      	movs	r3, #0
}
 801d58e:	4618      	mov	r0, r3
 801d590:	3710      	adds	r7, #16
 801d592:	46bd      	mov	sp, r7
 801d594:	bd80      	pop	{r7, pc}
	...

0801d598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801d598:	b480      	push	{r7}
 801d59a:	b085      	sub	sp, #20
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d108      	bne.n	801d5ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	2201      	movs	r2, #1
 801d5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	2201      	movs	r2, #1
 801d5b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801d5b8:	e031      	b.n	801d61e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801d5ba:	2308      	movs	r3, #8
 801d5bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801d5be:	2308      	movs	r3, #8
 801d5c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	689b      	ldr	r3, [r3, #8]
 801d5c8:	0e5b      	lsrs	r3, r3, #25
 801d5ca:	b2db      	uxtb	r3, r3
 801d5cc:	f003 0307 	and.w	r3, r3, #7
 801d5d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	689b      	ldr	r3, [r3, #8]
 801d5d8:	0f5b      	lsrs	r3, r3, #29
 801d5da:	b2db      	uxtb	r3, r3
 801d5dc:	f003 0307 	and.w	r3, r3, #7
 801d5e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d5e2:	7bbb      	ldrb	r3, [r7, #14]
 801d5e4:	7b3a      	ldrb	r2, [r7, #12]
 801d5e6:	4911      	ldr	r1, [pc, #68]	; (801d62c <UARTEx_SetNbDataToProcess+0x94>)
 801d5e8:	5c8a      	ldrb	r2, [r1, r2]
 801d5ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801d5ee:	7b3a      	ldrb	r2, [r7, #12]
 801d5f0:	490f      	ldr	r1, [pc, #60]	; (801d630 <UARTEx_SetNbDataToProcess+0x98>)
 801d5f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801d5f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801d5f8:	b29a      	uxth	r2, r3
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d600:	7bfb      	ldrb	r3, [r7, #15]
 801d602:	7b7a      	ldrb	r2, [r7, #13]
 801d604:	4909      	ldr	r1, [pc, #36]	; (801d62c <UARTEx_SetNbDataToProcess+0x94>)
 801d606:	5c8a      	ldrb	r2, [r1, r2]
 801d608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801d60c:	7b7a      	ldrb	r2, [r7, #13]
 801d60e:	4908      	ldr	r1, [pc, #32]	; (801d630 <UARTEx_SetNbDataToProcess+0x98>)
 801d610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801d612:	fb93 f3f2 	sdiv	r3, r3, r2
 801d616:	b29a      	uxth	r2, r3
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801d61e:	bf00      	nop
 801d620:	3714      	adds	r7, #20
 801d622:	46bd      	mov	sp, r7
 801d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d628:	4770      	bx	lr
 801d62a:	bf00      	nop
 801d62c:	08023f14 	.word	0x08023f14
 801d630:	08023f1c 	.word	0x08023f1c

0801d634 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801d634:	b480      	push	{r7}
 801d636:	b08b      	sub	sp, #44	; 0x2c
 801d638:	af00      	add	r7, sp, #0
 801d63a:	60f8      	str	r0, [r7, #12]
 801d63c:	60b9      	str	r1, [r7, #8]
 801d63e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	681a      	ldr	r2, [r3, #0]
 801d644:	68bb      	ldr	r3, [r7, #8]
 801d646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d648:	697b      	ldr	r3, [r7, #20]
 801d64a:	fa93 f3a3 	rbit	r3, r3
 801d64e:	613b      	str	r3, [r7, #16]
  return result;
 801d650:	693b      	ldr	r3, [r7, #16]
 801d652:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d654:	69bb      	ldr	r3, [r7, #24]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d101      	bne.n	801d65e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 801d65a:	2320      	movs	r3, #32
 801d65c:	e003      	b.n	801d666 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801d65e:	69bb      	ldr	r3, [r7, #24]
 801d660:	fab3 f383 	clz	r3, r3
 801d664:	b2db      	uxtb	r3, r3
 801d666:	005b      	lsls	r3, r3, #1
 801d668:	2103      	movs	r1, #3
 801d66a:	fa01 f303 	lsl.w	r3, r1, r3
 801d66e:	43db      	mvns	r3, r3
 801d670:	401a      	ands	r2, r3
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d676:	6a3b      	ldr	r3, [r7, #32]
 801d678:	fa93 f3a3 	rbit	r3, r3
 801d67c:	61fb      	str	r3, [r7, #28]
  return result;
 801d67e:	69fb      	ldr	r3, [r7, #28]
 801d680:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d684:	2b00      	cmp	r3, #0
 801d686:	d101      	bne.n	801d68c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 801d688:	2320      	movs	r3, #32
 801d68a:	e003      	b.n	801d694 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 801d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d68e:	fab3 f383 	clz	r3, r3
 801d692:	b2db      	uxtb	r3, r3
 801d694:	005b      	lsls	r3, r3, #1
 801d696:	6879      	ldr	r1, [r7, #4]
 801d698:	fa01 f303 	lsl.w	r3, r1, r3
 801d69c:	431a      	orrs	r2, r3
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	601a      	str	r2, [r3, #0]
}
 801d6a2:	bf00      	nop
 801d6a4:	372c      	adds	r7, #44	; 0x2c
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ac:	4770      	bx	lr

0801d6ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801d6ae:	b480      	push	{r7}
 801d6b0:	b085      	sub	sp, #20
 801d6b2:	af00      	add	r7, sp, #0
 801d6b4:	60f8      	str	r0, [r7, #12]
 801d6b6:	60b9      	str	r1, [r7, #8]
 801d6b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	685a      	ldr	r2, [r3, #4]
 801d6be:	68bb      	ldr	r3, [r7, #8]
 801d6c0:	43db      	mvns	r3, r3
 801d6c2:	401a      	ands	r2, r3
 801d6c4:	68bb      	ldr	r3, [r7, #8]
 801d6c6:	6879      	ldr	r1, [r7, #4]
 801d6c8:	fb01 f303 	mul.w	r3, r1, r3
 801d6cc:	431a      	orrs	r2, r3
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	605a      	str	r2, [r3, #4]
}
 801d6d2:	bf00      	nop
 801d6d4:	3714      	adds	r7, #20
 801d6d6:	46bd      	mov	sp, r7
 801d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6dc:	4770      	bx	lr

0801d6de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801d6de:	b480      	push	{r7}
 801d6e0:	b08b      	sub	sp, #44	; 0x2c
 801d6e2:	af00      	add	r7, sp, #0
 801d6e4:	60f8      	str	r0, [r7, #12]
 801d6e6:	60b9      	str	r1, [r7, #8]
 801d6e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	689a      	ldr	r2, [r3, #8]
 801d6ee:	68bb      	ldr	r3, [r7, #8]
 801d6f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d6f2:	697b      	ldr	r3, [r7, #20]
 801d6f4:	fa93 f3a3 	rbit	r3, r3
 801d6f8:	613b      	str	r3, [r7, #16]
  return result;
 801d6fa:	693b      	ldr	r3, [r7, #16]
 801d6fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d6fe:	69bb      	ldr	r3, [r7, #24]
 801d700:	2b00      	cmp	r3, #0
 801d702:	d101      	bne.n	801d708 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 801d704:	2320      	movs	r3, #32
 801d706:	e003      	b.n	801d710 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 801d708:	69bb      	ldr	r3, [r7, #24]
 801d70a:	fab3 f383 	clz	r3, r3
 801d70e:	b2db      	uxtb	r3, r3
 801d710:	005b      	lsls	r3, r3, #1
 801d712:	2103      	movs	r1, #3
 801d714:	fa01 f303 	lsl.w	r3, r1, r3
 801d718:	43db      	mvns	r3, r3
 801d71a:	401a      	ands	r2, r3
 801d71c:	68bb      	ldr	r3, [r7, #8]
 801d71e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d720:	6a3b      	ldr	r3, [r7, #32]
 801d722:	fa93 f3a3 	rbit	r3, r3
 801d726:	61fb      	str	r3, [r7, #28]
  return result;
 801d728:	69fb      	ldr	r3, [r7, #28]
 801d72a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d101      	bne.n	801d736 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801d732:	2320      	movs	r3, #32
 801d734:	e003      	b.n	801d73e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 801d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d738:	fab3 f383 	clz	r3, r3
 801d73c:	b2db      	uxtb	r3, r3
 801d73e:	005b      	lsls	r3, r3, #1
 801d740:	6879      	ldr	r1, [r7, #4]
 801d742:	fa01 f303 	lsl.w	r3, r1, r3
 801d746:	431a      	orrs	r2, r3
 801d748:	68fb      	ldr	r3, [r7, #12]
 801d74a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 801d74c:	bf00      	nop
 801d74e:	372c      	adds	r7, #44	; 0x2c
 801d750:	46bd      	mov	sp, r7
 801d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d756:	4770      	bx	lr

0801d758 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 801d758:	b480      	push	{r7}
 801d75a:	b08b      	sub	sp, #44	; 0x2c
 801d75c:	af00      	add	r7, sp, #0
 801d75e:	60f8      	str	r0, [r7, #12]
 801d760:	60b9      	str	r1, [r7, #8]
 801d762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	68da      	ldr	r2, [r3, #12]
 801d768:	68bb      	ldr	r3, [r7, #8]
 801d76a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d76c:	697b      	ldr	r3, [r7, #20]
 801d76e:	fa93 f3a3 	rbit	r3, r3
 801d772:	613b      	str	r3, [r7, #16]
  return result;
 801d774:	693b      	ldr	r3, [r7, #16]
 801d776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d778:	69bb      	ldr	r3, [r7, #24]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d101      	bne.n	801d782 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801d77e:	2320      	movs	r3, #32
 801d780:	e003      	b.n	801d78a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801d782:	69bb      	ldr	r3, [r7, #24]
 801d784:	fab3 f383 	clz	r3, r3
 801d788:	b2db      	uxtb	r3, r3
 801d78a:	005b      	lsls	r3, r3, #1
 801d78c:	2103      	movs	r1, #3
 801d78e:	fa01 f303 	lsl.w	r3, r1, r3
 801d792:	43db      	mvns	r3, r3
 801d794:	401a      	ands	r2, r3
 801d796:	68bb      	ldr	r3, [r7, #8]
 801d798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d79a:	6a3b      	ldr	r3, [r7, #32]
 801d79c:	fa93 f3a3 	rbit	r3, r3
 801d7a0:	61fb      	str	r3, [r7, #28]
  return result;
 801d7a2:	69fb      	ldr	r3, [r7, #28]
 801d7a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d101      	bne.n	801d7b0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 801d7ac:	2320      	movs	r3, #32
 801d7ae:	e003      	b.n	801d7b8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7b2:	fab3 f383 	clz	r3, r3
 801d7b6:	b2db      	uxtb	r3, r3
 801d7b8:	005b      	lsls	r3, r3, #1
 801d7ba:	6879      	ldr	r1, [r7, #4]
 801d7bc:	fa01 f303 	lsl.w	r3, r1, r3
 801d7c0:	431a      	orrs	r2, r3
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	60da      	str	r2, [r3, #12]
}
 801d7c6:	bf00      	nop
 801d7c8:	372c      	adds	r7, #44	; 0x2c
 801d7ca:	46bd      	mov	sp, r7
 801d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7d0:	4770      	bx	lr

0801d7d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801d7d2:	b480      	push	{r7}
 801d7d4:	b08b      	sub	sp, #44	; 0x2c
 801d7d6:	af00      	add	r7, sp, #0
 801d7d8:	60f8      	str	r0, [r7, #12]
 801d7da:	60b9      	str	r1, [r7, #8]
 801d7dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	6a1a      	ldr	r2, [r3, #32]
 801d7e2:	68bb      	ldr	r3, [r7, #8]
 801d7e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	fa93 f3a3 	rbit	r3, r3
 801d7ec:	613b      	str	r3, [r7, #16]
  return result;
 801d7ee:	693b      	ldr	r3, [r7, #16]
 801d7f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d7f2:	69bb      	ldr	r3, [r7, #24]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d101      	bne.n	801d7fc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 801d7f8:	2320      	movs	r3, #32
 801d7fa:	e003      	b.n	801d804 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 801d7fc:	69bb      	ldr	r3, [r7, #24]
 801d7fe:	fab3 f383 	clz	r3, r3
 801d802:	b2db      	uxtb	r3, r3
 801d804:	009b      	lsls	r3, r3, #2
 801d806:	210f      	movs	r1, #15
 801d808:	fa01 f303 	lsl.w	r3, r1, r3
 801d80c:	43db      	mvns	r3, r3
 801d80e:	401a      	ands	r2, r3
 801d810:	68bb      	ldr	r3, [r7, #8]
 801d812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d814:	6a3b      	ldr	r3, [r7, #32]
 801d816:	fa93 f3a3 	rbit	r3, r3
 801d81a:	61fb      	str	r3, [r7, #28]
  return result;
 801d81c:	69fb      	ldr	r3, [r7, #28]
 801d81e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d822:	2b00      	cmp	r3, #0
 801d824:	d101      	bne.n	801d82a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 801d826:	2320      	movs	r3, #32
 801d828:	e003      	b.n	801d832 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 801d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d82c:	fab3 f383 	clz	r3, r3
 801d830:	b2db      	uxtb	r3, r3
 801d832:	009b      	lsls	r3, r3, #2
 801d834:	6879      	ldr	r1, [r7, #4]
 801d836:	fa01 f303 	lsl.w	r3, r1, r3
 801d83a:	431a      	orrs	r2, r3
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 801d840:	bf00      	nop
 801d842:	372c      	adds	r7, #44	; 0x2c
 801d844:	46bd      	mov	sp, r7
 801d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d84a:	4770      	bx	lr

0801d84c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801d84c:	b480      	push	{r7}
 801d84e:	b08b      	sub	sp, #44	; 0x2c
 801d850:	af00      	add	r7, sp, #0
 801d852:	60f8      	str	r0, [r7, #12]
 801d854:	60b9      	str	r1, [r7, #8]
 801d856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d85c:	68bb      	ldr	r3, [r7, #8]
 801d85e:	0a1b      	lsrs	r3, r3, #8
 801d860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d862:	697b      	ldr	r3, [r7, #20]
 801d864:	fa93 f3a3 	rbit	r3, r3
 801d868:	613b      	str	r3, [r7, #16]
  return result;
 801d86a:	693b      	ldr	r3, [r7, #16]
 801d86c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801d86e:	69bb      	ldr	r3, [r7, #24]
 801d870:	2b00      	cmp	r3, #0
 801d872:	d101      	bne.n	801d878 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 801d874:	2320      	movs	r3, #32
 801d876:	e003      	b.n	801d880 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 801d878:	69bb      	ldr	r3, [r7, #24]
 801d87a:	fab3 f383 	clz	r3, r3
 801d87e:	b2db      	uxtb	r3, r3
 801d880:	009b      	lsls	r3, r3, #2
 801d882:	210f      	movs	r1, #15
 801d884:	fa01 f303 	lsl.w	r3, r1, r3
 801d888:	43db      	mvns	r3, r3
 801d88a:	401a      	ands	r2, r3
 801d88c:	68bb      	ldr	r3, [r7, #8]
 801d88e:	0a1b      	lsrs	r3, r3, #8
 801d890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d892:	6a3b      	ldr	r3, [r7, #32]
 801d894:	fa93 f3a3 	rbit	r3, r3
 801d898:	61fb      	str	r3, [r7, #28]
  return result;
 801d89a:	69fb      	ldr	r3, [r7, #28]
 801d89c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d101      	bne.n	801d8a8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 801d8a4:	2320      	movs	r3, #32
 801d8a6:	e003      	b.n	801d8b0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 801d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8aa:	fab3 f383 	clz	r3, r3
 801d8ae:	b2db      	uxtb	r3, r3
 801d8b0:	009b      	lsls	r3, r3, #2
 801d8b2:	6879      	ldr	r1, [r7, #4]
 801d8b4:	fa01 f303 	lsl.w	r3, r1, r3
 801d8b8:	431a      	orrs	r2, r3
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801d8be:	bf00      	nop
 801d8c0:	372c      	adds	r7, #44	; 0x2c
 801d8c2:	46bd      	mov	sp, r7
 801d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8c8:	4770      	bx	lr

0801d8ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801d8ca:	b580      	push	{r7, lr}
 801d8cc:	b088      	sub	sp, #32
 801d8ce:	af00      	add	r7, sp, #0
 801d8d0:	6078      	str	r0, [r7, #4]
 801d8d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801d8d4:	683b      	ldr	r3, [r7, #0]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801d8da:	693b      	ldr	r3, [r7, #16]
 801d8dc:	fa93 f3a3 	rbit	r3, r3
 801d8e0:	60fb      	str	r3, [r7, #12]
  return result;
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801d8e6:	697b      	ldr	r3, [r7, #20]
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d101      	bne.n	801d8f0 <LL_GPIO_Init+0x26>
    return 32U;
 801d8ec:	2320      	movs	r3, #32
 801d8ee:	e003      	b.n	801d8f8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 801d8f0:	697b      	ldr	r3, [r7, #20]
 801d8f2:	fab3 f383 	clz	r3, r3
 801d8f6:	b2db      	uxtb	r3, r3
 801d8f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801d8fa:	e047      	b.n	801d98c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	681a      	ldr	r2, [r3, #0]
 801d900:	2101      	movs	r1, #1
 801d902:	69fb      	ldr	r3, [r7, #28]
 801d904:	fa01 f303 	lsl.w	r3, r1, r3
 801d908:	4013      	ands	r3, r2
 801d90a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 801d90c:	69bb      	ldr	r3, [r7, #24]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d039      	beq.n	801d986 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	685b      	ldr	r3, [r3, #4]
 801d916:	2b01      	cmp	r3, #1
 801d918:	d003      	beq.n	801d922 <LL_GPIO_Init+0x58>
 801d91a:	683b      	ldr	r3, [r7, #0]
 801d91c:	685b      	ldr	r3, [r3, #4]
 801d91e:	2b02      	cmp	r3, #2
 801d920:	d10d      	bne.n	801d93e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	689b      	ldr	r3, [r3, #8]
 801d926:	461a      	mov	r2, r3
 801d928:	69b9      	ldr	r1, [r7, #24]
 801d92a:	6878      	ldr	r0, [r7, #4]
 801d92c:	f7ff fed7 	bl	801d6de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 801d930:	683b      	ldr	r3, [r7, #0]
 801d932:	68db      	ldr	r3, [r3, #12]
 801d934:	461a      	mov	r2, r3
 801d936:	69b9      	ldr	r1, [r7, #24]
 801d938:	6878      	ldr	r0, [r7, #4]
 801d93a:	f7ff feb8 	bl	801d6ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 801d93e:	683b      	ldr	r3, [r7, #0]
 801d940:	691b      	ldr	r3, [r3, #16]
 801d942:	461a      	mov	r2, r3
 801d944:	69b9      	ldr	r1, [r7, #24]
 801d946:	6878      	ldr	r0, [r7, #4]
 801d948:	f7ff ff06 	bl	801d758 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801d94c:	683b      	ldr	r3, [r7, #0]
 801d94e:	685b      	ldr	r3, [r3, #4]
 801d950:	2b02      	cmp	r3, #2
 801d952:	d111      	bne.n	801d978 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 801d954:	69bb      	ldr	r3, [r7, #24]
 801d956:	2bff      	cmp	r3, #255	; 0xff
 801d958:	d807      	bhi.n	801d96a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801d95a:	683b      	ldr	r3, [r7, #0]
 801d95c:	695b      	ldr	r3, [r3, #20]
 801d95e:	461a      	mov	r2, r3
 801d960:	69b9      	ldr	r1, [r7, #24]
 801d962:	6878      	ldr	r0, [r7, #4]
 801d964:	f7ff ff35 	bl	801d7d2 <LL_GPIO_SetAFPin_0_7>
 801d968:	e006      	b.n	801d978 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801d96a:	683b      	ldr	r3, [r7, #0]
 801d96c:	695b      	ldr	r3, [r3, #20]
 801d96e:	461a      	mov	r2, r3
 801d970:	69b9      	ldr	r1, [r7, #24]
 801d972:	6878      	ldr	r0, [r7, #4]
 801d974:	f7ff ff6a 	bl	801d84c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801d978:	683b      	ldr	r3, [r7, #0]
 801d97a:	685b      	ldr	r3, [r3, #4]
 801d97c:	461a      	mov	r2, r3
 801d97e:	69b9      	ldr	r1, [r7, #24]
 801d980:	6878      	ldr	r0, [r7, #4]
 801d982:	f7ff fe57 	bl	801d634 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801d986:	69fb      	ldr	r3, [r7, #28]
 801d988:	3301      	adds	r3, #1
 801d98a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801d98c:	683b      	ldr	r3, [r7, #0]
 801d98e:	681a      	ldr	r2, [r3, #0]
 801d990:	69fb      	ldr	r3, [r7, #28]
 801d992:	fa22 f303 	lsr.w	r3, r2, r3
 801d996:	2b00      	cmp	r3, #0
 801d998:	d1b0      	bne.n	801d8fc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 801d99a:	2300      	movs	r3, #0
}
 801d99c:	4618      	mov	r0, r3
 801d99e:	3720      	adds	r7, #32
 801d9a0:	46bd      	mov	sp, r7
 801d9a2:	bd80      	pop	{r7, pc}

0801d9a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801d9a4:	b480      	push	{r7}
 801d9a6:	b085      	sub	sp, #20
 801d9a8:	af00      	add	r7, sp, #0
 801d9aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801d9ac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801d9b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801d9b8:	b29a      	uxth	r2, r3
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	b29b      	uxth	r3, r3
 801d9be:	43db      	mvns	r3, r3
 801d9c0:	b29b      	uxth	r3, r3
 801d9c2:	4013      	ands	r3, r2
 801d9c4:	b29a      	uxth	r2, r3
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801d9cc:	2300      	movs	r3, #0
}
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	3714      	adds	r7, #20
 801d9d2:	46bd      	mov	sp, r7
 801d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d8:	4770      	bx	lr

0801d9da <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801d9da:	b084      	sub	sp, #16
 801d9dc:	b480      	push	{r7}
 801d9de:	b083      	sub	sp, #12
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	6078      	str	r0, [r7, #4]
 801d9e4:	f107 0014 	add.w	r0, r7, #20
 801d9e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	2201      	movs	r2, #1
 801d9f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	2200      	movs	r2, #0
 801da00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	2200      	movs	r2, #0
 801da08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801da0c:	2300      	movs	r3, #0
}
 801da0e:	4618      	mov	r0, r3
 801da10:	370c      	adds	r7, #12
 801da12:	46bd      	mov	sp, r7
 801da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da18:	b004      	add	sp, #16
 801da1a:	4770      	bx	lr

0801da1c <__NVIC_SetPriority>:
{
 801da1c:	b480      	push	{r7}
 801da1e:	b083      	sub	sp, #12
 801da20:	af00      	add	r7, sp, #0
 801da22:	4603      	mov	r3, r0
 801da24:	6039      	str	r1, [r7, #0]
 801da26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801da28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	db0a      	blt.n	801da46 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801da30:	683b      	ldr	r3, [r7, #0]
 801da32:	b2da      	uxtb	r2, r3
 801da34:	490c      	ldr	r1, [pc, #48]	; (801da68 <__NVIC_SetPriority+0x4c>)
 801da36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da3a:	0152      	lsls	r2, r2, #5
 801da3c:	b2d2      	uxtb	r2, r2
 801da3e:	440b      	add	r3, r1
 801da40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801da44:	e00a      	b.n	801da5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801da46:	683b      	ldr	r3, [r7, #0]
 801da48:	b2da      	uxtb	r2, r3
 801da4a:	4908      	ldr	r1, [pc, #32]	; (801da6c <__NVIC_SetPriority+0x50>)
 801da4c:	79fb      	ldrb	r3, [r7, #7]
 801da4e:	f003 030f 	and.w	r3, r3, #15
 801da52:	3b04      	subs	r3, #4
 801da54:	0152      	lsls	r2, r2, #5
 801da56:	b2d2      	uxtb	r2, r2
 801da58:	440b      	add	r3, r1
 801da5a:	761a      	strb	r2, [r3, #24]
}
 801da5c:	bf00      	nop
 801da5e:	370c      	adds	r7, #12
 801da60:	46bd      	mov	sp, r7
 801da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da66:	4770      	bx	lr
 801da68:	e000e100 	.word	0xe000e100
 801da6c:	e000ed00 	.word	0xe000ed00

0801da70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801da70:	b580      	push	{r7, lr}
 801da72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801da74:	4b05      	ldr	r3, [pc, #20]	; (801da8c <SysTick_Handler+0x1c>)
 801da76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801da78:	f001 fcbc 	bl	801f3f4 <xTaskGetSchedulerState>
 801da7c:	4603      	mov	r3, r0
 801da7e:	2b01      	cmp	r3, #1
 801da80:	d001      	beq.n	801da86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801da82:	f002 f911 	bl	801fca8 <xPortSysTickHandler>
  }
}
 801da86:	bf00      	nop
 801da88:	bd80      	pop	{r7, pc}
 801da8a:	bf00      	nop
 801da8c:	e000e010 	.word	0xe000e010

0801da90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801da90:	b580      	push	{r7, lr}
 801da92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801da94:	2100      	movs	r1, #0
 801da96:	f06f 0004 	mvn.w	r0, #4
 801da9a:	f7ff ffbf 	bl	801da1c <__NVIC_SetPriority>
#endif
}
 801da9e:	bf00      	nop
 801daa0:	bd80      	pop	{r7, pc}
	...

0801daa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801daa4:	b480      	push	{r7}
 801daa6:	b083      	sub	sp, #12
 801daa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801daaa:	f3ef 8305 	mrs	r3, IPSR
 801daae:	603b      	str	r3, [r7, #0]
  return(result);
 801dab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	d003      	beq.n	801dabe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801dab6:	f06f 0305 	mvn.w	r3, #5
 801daba:	607b      	str	r3, [r7, #4]
 801dabc:	e00c      	b.n	801dad8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801dabe:	4b0a      	ldr	r3, [pc, #40]	; (801dae8 <osKernelInitialize+0x44>)
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d105      	bne.n	801dad2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801dac6:	4b08      	ldr	r3, [pc, #32]	; (801dae8 <osKernelInitialize+0x44>)
 801dac8:	2201      	movs	r2, #1
 801daca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801dacc:	2300      	movs	r3, #0
 801dace:	607b      	str	r3, [r7, #4]
 801dad0:	e002      	b.n	801dad8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801dad2:	f04f 33ff 	mov.w	r3, #4294967295
 801dad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801dad8:	687b      	ldr	r3, [r7, #4]
}
 801dada:	4618      	mov	r0, r3
 801dadc:	370c      	adds	r7, #12
 801dade:	46bd      	mov	sp, r7
 801dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae4:	4770      	bx	lr
 801dae6:	bf00      	nop
 801dae8:	20000f34 	.word	0x20000f34

0801daec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801daec:	b580      	push	{r7, lr}
 801daee:	b082      	sub	sp, #8
 801daf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801daf2:	f3ef 8305 	mrs	r3, IPSR
 801daf6:	603b      	str	r3, [r7, #0]
  return(result);
 801daf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d003      	beq.n	801db06 <osKernelStart+0x1a>
    stat = osErrorISR;
 801dafe:	f06f 0305 	mvn.w	r3, #5
 801db02:	607b      	str	r3, [r7, #4]
 801db04:	e010      	b.n	801db28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801db06:	4b0b      	ldr	r3, [pc, #44]	; (801db34 <osKernelStart+0x48>)
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	2b01      	cmp	r3, #1
 801db0c:	d109      	bne.n	801db22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801db0e:	f7ff ffbf 	bl	801da90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801db12:	4b08      	ldr	r3, [pc, #32]	; (801db34 <osKernelStart+0x48>)
 801db14:	2202      	movs	r2, #2
 801db16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801db18:	f001 f88e 	bl	801ec38 <vTaskStartScheduler>
      stat = osOK;
 801db1c:	2300      	movs	r3, #0
 801db1e:	607b      	str	r3, [r7, #4]
 801db20:	e002      	b.n	801db28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801db22:	f04f 33ff 	mov.w	r3, #4294967295
 801db26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801db28:	687b      	ldr	r3, [r7, #4]
}
 801db2a:	4618      	mov	r0, r3
 801db2c:	3708      	adds	r7, #8
 801db2e:	46bd      	mov	sp, r7
 801db30:	bd80      	pop	{r7, pc}
 801db32:	bf00      	nop
 801db34:	20000f34 	.word	0x20000f34

0801db38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801db38:	b580      	push	{r7, lr}
 801db3a:	b08e      	sub	sp, #56	; 0x38
 801db3c:	af04      	add	r7, sp, #16
 801db3e:	60f8      	str	r0, [r7, #12]
 801db40:	60b9      	str	r1, [r7, #8]
 801db42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801db44:	2300      	movs	r3, #0
 801db46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801db48:	f3ef 8305 	mrs	r3, IPSR
 801db4c:	617b      	str	r3, [r7, #20]
  return(result);
 801db4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801db50:	2b00      	cmp	r3, #0
 801db52:	d17e      	bne.n	801dc52 <osThreadNew+0x11a>
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	2b00      	cmp	r3, #0
 801db58:	d07b      	beq.n	801dc52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801db5a:	2380      	movs	r3, #128	; 0x80
 801db5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801db5e:	2318      	movs	r3, #24
 801db60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801db62:	2300      	movs	r3, #0
 801db64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801db66:	f04f 33ff 	mov.w	r3, #4294967295
 801db6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d045      	beq.n	801dbfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801db72:	687b      	ldr	r3, [r7, #4]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	2b00      	cmp	r3, #0
 801db78:	d002      	beq.n	801db80 <osThreadNew+0x48>
        name = attr->name;
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	699b      	ldr	r3, [r3, #24]
 801db84:	2b00      	cmp	r3, #0
 801db86:	d002      	beq.n	801db8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	699b      	ldr	r3, [r3, #24]
 801db8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801db8e:	69fb      	ldr	r3, [r7, #28]
 801db90:	2b00      	cmp	r3, #0
 801db92:	d008      	beq.n	801dba6 <osThreadNew+0x6e>
 801db94:	69fb      	ldr	r3, [r7, #28]
 801db96:	2b38      	cmp	r3, #56	; 0x38
 801db98:	d805      	bhi.n	801dba6 <osThreadNew+0x6e>
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	685b      	ldr	r3, [r3, #4]
 801db9e:	f003 0301 	and.w	r3, r3, #1
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d001      	beq.n	801dbaa <osThreadNew+0x72>
        return (NULL);
 801dba6:	2300      	movs	r3, #0
 801dba8:	e054      	b.n	801dc54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	695b      	ldr	r3, [r3, #20]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d003      	beq.n	801dbba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	695b      	ldr	r3, [r3, #20]
 801dbb6:	089b      	lsrs	r3, r3, #2
 801dbb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	689b      	ldr	r3, [r3, #8]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d00e      	beq.n	801dbe0 <osThreadNew+0xa8>
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	68db      	ldr	r3, [r3, #12]
 801dbc6:	2b5b      	cmp	r3, #91	; 0x5b
 801dbc8:	d90a      	bls.n	801dbe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d006      	beq.n	801dbe0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	695b      	ldr	r3, [r3, #20]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d002      	beq.n	801dbe0 <osThreadNew+0xa8>
        mem = 1;
 801dbda:	2301      	movs	r3, #1
 801dbdc:	61bb      	str	r3, [r7, #24]
 801dbde:	e010      	b.n	801dc02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	689b      	ldr	r3, [r3, #8]
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d10c      	bne.n	801dc02 <osThreadNew+0xca>
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	68db      	ldr	r3, [r3, #12]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d108      	bne.n	801dc02 <osThreadNew+0xca>
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	691b      	ldr	r3, [r3, #16]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d104      	bne.n	801dc02 <osThreadNew+0xca>
          mem = 0;
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	61bb      	str	r3, [r7, #24]
 801dbfc:	e001      	b.n	801dc02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801dbfe:	2300      	movs	r3, #0
 801dc00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801dc02:	69bb      	ldr	r3, [r7, #24]
 801dc04:	2b01      	cmp	r3, #1
 801dc06:	d110      	bne.n	801dc2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801dc0c:	687a      	ldr	r2, [r7, #4]
 801dc0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801dc10:	9202      	str	r2, [sp, #8]
 801dc12:	9301      	str	r3, [sp, #4]
 801dc14:	69fb      	ldr	r3, [r7, #28]
 801dc16:	9300      	str	r3, [sp, #0]
 801dc18:	68bb      	ldr	r3, [r7, #8]
 801dc1a:	6a3a      	ldr	r2, [r7, #32]
 801dc1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc1e:	68f8      	ldr	r0, [r7, #12]
 801dc20:	f000 fd30 	bl	801e684 <xTaskCreateStatic>
 801dc24:	4603      	mov	r3, r0
 801dc26:	613b      	str	r3, [r7, #16]
 801dc28:	e013      	b.n	801dc52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801dc2a:	69bb      	ldr	r3, [r7, #24]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d110      	bne.n	801dc52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801dc30:	6a3b      	ldr	r3, [r7, #32]
 801dc32:	b29a      	uxth	r2, r3
 801dc34:	f107 0310 	add.w	r3, r7, #16
 801dc38:	9301      	str	r3, [sp, #4]
 801dc3a:	69fb      	ldr	r3, [r7, #28]
 801dc3c:	9300      	str	r3, [sp, #0]
 801dc3e:	68bb      	ldr	r3, [r7, #8]
 801dc40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dc42:	68f8      	ldr	r0, [r7, #12]
 801dc44:	f000 fd63 	bl	801e70e <xTaskCreate>
 801dc48:	4603      	mov	r3, r0
 801dc4a:	2b01      	cmp	r3, #1
 801dc4c:	d001      	beq.n	801dc52 <osThreadNew+0x11a>
            hTask = NULL;
 801dc4e:	2300      	movs	r3, #0
 801dc50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801dc52:	693b      	ldr	r3, [r7, #16]
}
 801dc54:	4618      	mov	r0, r3
 801dc56:	3728      	adds	r7, #40	; 0x28
 801dc58:	46bd      	mov	sp, r7
 801dc5a:	bd80      	pop	{r7, pc}

0801dc5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801dc5c:	b480      	push	{r7}
 801dc5e:	b085      	sub	sp, #20
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	60f8      	str	r0, [r7, #12]
 801dc64:	60b9      	str	r1, [r7, #8]
 801dc66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	4a07      	ldr	r2, [pc, #28]	; (801dc88 <vApplicationGetIdleTaskMemory+0x2c>)
 801dc6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	4a06      	ldr	r2, [pc, #24]	; (801dc8c <vApplicationGetIdleTaskMemory+0x30>)
 801dc72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	2280      	movs	r2, #128	; 0x80
 801dc78:	601a      	str	r2, [r3, #0]
}
 801dc7a:	bf00      	nop
 801dc7c:	3714      	adds	r7, #20
 801dc7e:	46bd      	mov	sp, r7
 801dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc84:	4770      	bx	lr
 801dc86:	bf00      	nop
 801dc88:	20000f38 	.word	0x20000f38
 801dc8c:	20000f94 	.word	0x20000f94

0801dc90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801dc90:	b480      	push	{r7}
 801dc92:	b085      	sub	sp, #20
 801dc94:	af00      	add	r7, sp, #0
 801dc96:	60f8      	str	r0, [r7, #12]
 801dc98:	60b9      	str	r1, [r7, #8]
 801dc9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	4a07      	ldr	r2, [pc, #28]	; (801dcbc <vApplicationGetTimerTaskMemory+0x2c>)
 801dca0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801dca2:	68bb      	ldr	r3, [r7, #8]
 801dca4:	4a06      	ldr	r2, [pc, #24]	; (801dcc0 <vApplicationGetTimerTaskMemory+0x30>)
 801dca6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 801dcae:	601a      	str	r2, [r3, #0]
}
 801dcb0:	bf00      	nop
 801dcb2:	3714      	adds	r7, #20
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcba:	4770      	bx	lr
 801dcbc:	20001194 	.word	0x20001194
 801dcc0:	200011f0 	.word	0x200011f0

0801dcc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801dcc4:	b480      	push	{r7}
 801dcc6:	b083      	sub	sp, #12
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	f103 0208 	add.w	r2, r3, #8
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	f04f 32ff 	mov.w	r2, #4294967295
 801dcdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	f103 0208 	add.w	r2, r3, #8
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	f103 0208 	add.w	r2, r3, #8
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	2200      	movs	r2, #0
 801dcf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801dcf8:	bf00      	nop
 801dcfa:	370c      	adds	r7, #12
 801dcfc:	46bd      	mov	sp, r7
 801dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd02:	4770      	bx	lr

0801dd04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801dd04:	b480      	push	{r7}
 801dd06:	b083      	sub	sp, #12
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	2200      	movs	r2, #0
 801dd10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801dd12:	bf00      	nop
 801dd14:	370c      	adds	r7, #12
 801dd16:	46bd      	mov	sp, r7
 801dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd1c:	4770      	bx	lr

0801dd1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801dd1e:	b480      	push	{r7}
 801dd20:	b085      	sub	sp, #20
 801dd22:	af00      	add	r7, sp, #0
 801dd24:	6078      	str	r0, [r7, #4]
 801dd26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	685b      	ldr	r3, [r3, #4]
 801dd2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801dd2e:	683b      	ldr	r3, [r7, #0]
 801dd30:	68fa      	ldr	r2, [r7, #12]
 801dd32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	689a      	ldr	r2, [r3, #8]
 801dd38:	683b      	ldr	r3, [r7, #0]
 801dd3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	689b      	ldr	r3, [r3, #8]
 801dd40:	683a      	ldr	r2, [r7, #0]
 801dd42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	683a      	ldr	r2, [r7, #0]
 801dd48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801dd4a:	683b      	ldr	r3, [r7, #0]
 801dd4c:	687a      	ldr	r2, [r7, #4]
 801dd4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	1c5a      	adds	r2, r3, #1
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	601a      	str	r2, [r3, #0]
}
 801dd5a:	bf00      	nop
 801dd5c:	3714      	adds	r7, #20
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd64:	4770      	bx	lr

0801dd66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801dd66:	b480      	push	{r7}
 801dd68:	b085      	sub	sp, #20
 801dd6a:	af00      	add	r7, sp, #0
 801dd6c:	6078      	str	r0, [r7, #4]
 801dd6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801dd70:	683b      	ldr	r3, [r7, #0]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801dd76:	68bb      	ldr	r3, [r7, #8]
 801dd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd7c:	d103      	bne.n	801dd86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	691b      	ldr	r3, [r3, #16]
 801dd82:	60fb      	str	r3, [r7, #12]
 801dd84:	e00c      	b.n	801dda0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	3308      	adds	r3, #8
 801dd8a:	60fb      	str	r3, [r7, #12]
 801dd8c:	e002      	b.n	801dd94 <vListInsert+0x2e>
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	685b      	ldr	r3, [r3, #4]
 801dd92:	60fb      	str	r3, [r7, #12]
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	685b      	ldr	r3, [r3, #4]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	68ba      	ldr	r2, [r7, #8]
 801dd9c:	429a      	cmp	r2, r3
 801dd9e:	d2f6      	bcs.n	801dd8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801dda0:	68fb      	ldr	r3, [r7, #12]
 801dda2:	685a      	ldr	r2, [r3, #4]
 801dda4:	683b      	ldr	r3, [r7, #0]
 801dda6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801dda8:	683b      	ldr	r3, [r7, #0]
 801ddaa:	685b      	ldr	r3, [r3, #4]
 801ddac:	683a      	ldr	r2, [r7, #0]
 801ddae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801ddb0:	683b      	ldr	r3, [r7, #0]
 801ddb2:	68fa      	ldr	r2, [r7, #12]
 801ddb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	683a      	ldr	r2, [r7, #0]
 801ddba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801ddbc:	683b      	ldr	r3, [r7, #0]
 801ddbe:	687a      	ldr	r2, [r7, #4]
 801ddc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	1c5a      	adds	r2, r3, #1
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	601a      	str	r2, [r3, #0]
}
 801ddcc:	bf00      	nop
 801ddce:	3714      	adds	r7, #20
 801ddd0:	46bd      	mov	sp, r7
 801ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddd6:	4770      	bx	lr

0801ddd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801ddd8:	b480      	push	{r7}
 801ddda:	b085      	sub	sp, #20
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801dde0:	687b      	ldr	r3, [r7, #4]
 801dde2:	691b      	ldr	r3, [r3, #16]
 801dde4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	685b      	ldr	r3, [r3, #4]
 801ddea:	687a      	ldr	r2, [r7, #4]
 801ddec:	6892      	ldr	r2, [r2, #8]
 801ddee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801ddf0:	687b      	ldr	r3, [r7, #4]
 801ddf2:	689b      	ldr	r3, [r3, #8]
 801ddf4:	687a      	ldr	r2, [r7, #4]
 801ddf6:	6852      	ldr	r2, [r2, #4]
 801ddf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	685b      	ldr	r3, [r3, #4]
 801ddfe:	687a      	ldr	r2, [r7, #4]
 801de00:	429a      	cmp	r2, r3
 801de02:	d103      	bne.n	801de0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	689a      	ldr	r2, [r3, #8]
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	2200      	movs	r2, #0
 801de10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801de12:	68fb      	ldr	r3, [r7, #12]
 801de14:	681b      	ldr	r3, [r3, #0]
 801de16:	1e5a      	subs	r2, r3, #1
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	681b      	ldr	r3, [r3, #0]
}
 801de20:	4618      	mov	r0, r3
 801de22:	3714      	adds	r7, #20
 801de24:	46bd      	mov	sp, r7
 801de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de2a:	4770      	bx	lr

0801de2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801de2c:	b580      	push	{r7, lr}
 801de2e:	b084      	sub	sp, #16
 801de30:	af00      	add	r7, sp, #0
 801de32:	6078      	str	r0, [r7, #4]
 801de34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d102      	bne.n	801de46 <xQueueGenericReset+0x1a>
 801de40:	f002 f83a 	bl	801feb8 <ulSetInterruptMask>
 801de44:	e7fe      	b.n	801de44 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 801de46:	f001 ff03 	bl	801fc50 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801de4a:	68fb      	ldr	r3, [r7, #12]
 801de4c:	681a      	ldr	r2, [r3, #0]
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801de52:	68f9      	ldr	r1, [r7, #12]
 801de54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801de56:	fb01 f303 	mul.w	r3, r1, r3
 801de5a:	441a      	add	r2, r3
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	2200      	movs	r2, #0
 801de64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	681a      	ldr	r2, [r3, #0]
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681a      	ldr	r2, [r3, #0]
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801de76:	3b01      	subs	r3, #1
 801de78:	68f9      	ldr	r1, [r7, #12]
 801de7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801de7c:	fb01 f303 	mul.w	r3, r1, r3
 801de80:	441a      	add	r2, r3
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801de86:	68fb      	ldr	r3, [r7, #12]
 801de88:	22ff      	movs	r2, #255	; 0xff
 801de8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	22ff      	movs	r2, #255	; 0xff
 801de92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801de96:	683b      	ldr	r3, [r7, #0]
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d10e      	bne.n	801deba <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	691b      	ldr	r3, [r3, #16]
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d014      	beq.n	801dece <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801dea4:	68fb      	ldr	r3, [r7, #12]
 801dea6:	3310      	adds	r3, #16
 801dea8:	4618      	mov	r0, r3
 801deaa:	f001 f90d 	bl	801f0c8 <xTaskRemoveFromEventList>
 801deae:	4603      	mov	r3, r0
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d00c      	beq.n	801dece <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801deb4:	f001 feba 	bl	801fc2c <vPortYield>
 801deb8:	e009      	b.n	801dece <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801deba:	68fb      	ldr	r3, [r7, #12]
 801debc:	3310      	adds	r3, #16
 801debe:	4618      	mov	r0, r3
 801dec0:	f7ff ff00 	bl	801dcc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	3324      	adds	r3, #36	; 0x24
 801dec8:	4618      	mov	r0, r3
 801deca:	f7ff fefb 	bl	801dcc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801dece:	f001 fed1 	bl	801fc74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801ded2:	2301      	movs	r3, #1
}
 801ded4:	4618      	mov	r0, r3
 801ded6:	3710      	adds	r7, #16
 801ded8:	46bd      	mov	sp, r7
 801deda:	bd80      	pop	{r7, pc}

0801dedc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b088      	sub	sp, #32
 801dee0:	af02      	add	r7, sp, #8
 801dee2:	60f8      	str	r0, [r7, #12]
 801dee4:	60b9      	str	r1, [r7, #8]
 801dee6:	607a      	str	r2, [r7, #4]
 801dee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	2b00      	cmp	r3, #0
 801deee:	d102      	bne.n	801def6 <xQueueGenericCreateStatic+0x1a>
 801def0:	f001 ffe2 	bl	801feb8 <ulSetInterruptMask>
 801def4:	e7fe      	b.n	801def4 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801def6:	683b      	ldr	r3, [r7, #0]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d102      	bne.n	801df02 <xQueueGenericCreateStatic+0x26>
 801defc:	f001 ffdc 	bl	801feb8 <ulSetInterruptMask>
 801df00:	e7fe      	b.n	801df00 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	2b00      	cmp	r3, #0
 801df06:	d002      	beq.n	801df0e <xQueueGenericCreateStatic+0x32>
 801df08:	68bb      	ldr	r3, [r7, #8]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d001      	beq.n	801df12 <xQueueGenericCreateStatic+0x36>
 801df0e:	2301      	movs	r3, #1
 801df10:	e000      	b.n	801df14 <xQueueGenericCreateStatic+0x38>
 801df12:	2300      	movs	r3, #0
 801df14:	2b00      	cmp	r3, #0
 801df16:	d102      	bne.n	801df1e <xQueueGenericCreateStatic+0x42>
 801df18:	f001 ffce 	bl	801feb8 <ulSetInterruptMask>
 801df1c:	e7fe      	b.n	801df1c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	2b00      	cmp	r3, #0
 801df22:	d102      	bne.n	801df2a <xQueueGenericCreateStatic+0x4e>
 801df24:	68bb      	ldr	r3, [r7, #8]
 801df26:	2b00      	cmp	r3, #0
 801df28:	d101      	bne.n	801df2e <xQueueGenericCreateStatic+0x52>
 801df2a:	2301      	movs	r3, #1
 801df2c:	e000      	b.n	801df30 <xQueueGenericCreateStatic+0x54>
 801df2e:	2300      	movs	r3, #0
 801df30:	2b00      	cmp	r3, #0
 801df32:	d102      	bne.n	801df3a <xQueueGenericCreateStatic+0x5e>
 801df34:	f001 ffc0 	bl	801feb8 <ulSetInterruptMask>
 801df38:	e7fe      	b.n	801df38 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801df3a:	2350      	movs	r3, #80	; 0x50
 801df3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801df3e:	693b      	ldr	r3, [r7, #16]
 801df40:	2b50      	cmp	r3, #80	; 0x50
 801df42:	d002      	beq.n	801df4a <xQueueGenericCreateStatic+0x6e>
 801df44:	f001 ffb8 	bl	801feb8 <ulSetInterruptMask>
 801df48:	e7fe      	b.n	801df48 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801df4a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801df4c:	683b      	ldr	r3, [r7, #0]
 801df4e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801df50:	697b      	ldr	r3, [r7, #20]
 801df52:	2b00      	cmp	r3, #0
 801df54:	d00d      	beq.n	801df72 <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801df56:	697b      	ldr	r3, [r7, #20]
 801df58:	2201      	movs	r2, #1
 801df5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801df5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 801df62:	697b      	ldr	r3, [r7, #20]
 801df64:	9300      	str	r3, [sp, #0]
 801df66:	4613      	mov	r3, r2
 801df68:	687a      	ldr	r2, [r7, #4]
 801df6a:	68b9      	ldr	r1, [r7, #8]
 801df6c:	68f8      	ldr	r0, [r7, #12]
 801df6e:	f000 f805 	bl	801df7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801df72:	697b      	ldr	r3, [r7, #20]
	}
 801df74:	4618      	mov	r0, r3
 801df76:	3718      	adds	r7, #24
 801df78:	46bd      	mov	sp, r7
 801df7a:	bd80      	pop	{r7, pc}

0801df7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801df7c:	b580      	push	{r7, lr}
 801df7e:	b084      	sub	sp, #16
 801df80:	af00      	add	r7, sp, #0
 801df82:	60f8      	str	r0, [r7, #12]
 801df84:	60b9      	str	r1, [r7, #8]
 801df86:	607a      	str	r2, [r7, #4]
 801df88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801df8a:	68bb      	ldr	r3, [r7, #8]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d103      	bne.n	801df98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801df90:	69bb      	ldr	r3, [r7, #24]
 801df92:	69ba      	ldr	r2, [r7, #24]
 801df94:	601a      	str	r2, [r3, #0]
 801df96:	e002      	b.n	801df9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801df98:	69bb      	ldr	r3, [r7, #24]
 801df9a:	687a      	ldr	r2, [r7, #4]
 801df9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801df9e:	69bb      	ldr	r3, [r7, #24]
 801dfa0:	68fa      	ldr	r2, [r7, #12]
 801dfa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801dfa4:	69bb      	ldr	r3, [r7, #24]
 801dfa6:	68ba      	ldr	r2, [r7, #8]
 801dfa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801dfaa:	2101      	movs	r1, #1
 801dfac:	69b8      	ldr	r0, [r7, #24]
 801dfae:	f7ff ff3d 	bl	801de2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801dfb2:	69bb      	ldr	r3, [r7, #24]
 801dfb4:	78fa      	ldrb	r2, [r7, #3]
 801dfb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801dfba:	bf00      	nop
 801dfbc:	3710      	adds	r7, #16
 801dfbe:	46bd      	mov	sp, r7
 801dfc0:	bd80      	pop	{r7, pc}

0801dfc2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801dfc2:	b580      	push	{r7, lr}
 801dfc4:	b08a      	sub	sp, #40	; 0x28
 801dfc6:	af00      	add	r7, sp, #0
 801dfc8:	60f8      	str	r0, [r7, #12]
 801dfca:	60b9      	str	r1, [r7, #8]
 801dfcc:	607a      	str	r2, [r7, #4]
 801dfce:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801dfd4:	68fb      	ldr	r3, [r7, #12]
 801dfd6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801dfd8:	6a3b      	ldr	r3, [r7, #32]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d102      	bne.n	801dfe4 <xQueueGenericSend+0x22>
 801dfde:	f001 ff6b 	bl	801feb8 <ulSetInterruptMask>
 801dfe2:	e7fe      	b.n	801dfe2 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801dfe4:	68bb      	ldr	r3, [r7, #8]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d103      	bne.n	801dff2 <xQueueGenericSend+0x30>
 801dfea:	6a3b      	ldr	r3, [r7, #32]
 801dfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d101      	bne.n	801dff6 <xQueueGenericSend+0x34>
 801dff2:	2301      	movs	r3, #1
 801dff4:	e000      	b.n	801dff8 <xQueueGenericSend+0x36>
 801dff6:	2300      	movs	r3, #0
 801dff8:	2b00      	cmp	r3, #0
 801dffa:	d102      	bne.n	801e002 <xQueueGenericSend+0x40>
 801dffc:	f001 ff5c 	bl	801feb8 <ulSetInterruptMask>
 801e000:	e7fe      	b.n	801e000 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e002:	683b      	ldr	r3, [r7, #0]
 801e004:	2b02      	cmp	r3, #2
 801e006:	d103      	bne.n	801e010 <xQueueGenericSend+0x4e>
 801e008:	6a3b      	ldr	r3, [r7, #32]
 801e00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e00c:	2b01      	cmp	r3, #1
 801e00e:	d101      	bne.n	801e014 <xQueueGenericSend+0x52>
 801e010:	2301      	movs	r3, #1
 801e012:	e000      	b.n	801e016 <xQueueGenericSend+0x54>
 801e014:	2300      	movs	r3, #0
 801e016:	2b00      	cmp	r3, #0
 801e018:	d102      	bne.n	801e020 <xQueueGenericSend+0x5e>
 801e01a:	f001 ff4d 	bl	801feb8 <ulSetInterruptMask>
 801e01e:	e7fe      	b.n	801e01e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e020:	f001 f9e8 	bl	801f3f4 <xTaskGetSchedulerState>
 801e024:	4603      	mov	r3, r0
 801e026:	2b00      	cmp	r3, #0
 801e028:	d102      	bne.n	801e030 <xQueueGenericSend+0x6e>
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d101      	bne.n	801e034 <xQueueGenericSend+0x72>
 801e030:	2301      	movs	r3, #1
 801e032:	e000      	b.n	801e036 <xQueueGenericSend+0x74>
 801e034:	2300      	movs	r3, #0
 801e036:	2b00      	cmp	r3, #0
 801e038:	d102      	bne.n	801e040 <xQueueGenericSend+0x7e>
 801e03a:	f001 ff3d 	bl	801feb8 <ulSetInterruptMask>
 801e03e:	e7fe      	b.n	801e03e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e040:	f001 fe06 	bl	801fc50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e044:	6a3b      	ldr	r3, [r7, #32]
 801e046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e048:	6a3b      	ldr	r3, [r7, #32]
 801e04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e04c:	429a      	cmp	r2, r3
 801e04e:	d302      	bcc.n	801e056 <xQueueGenericSend+0x94>
 801e050:	683b      	ldr	r3, [r7, #0]
 801e052:	2b02      	cmp	r3, #2
 801e054:	d11d      	bne.n	801e092 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e056:	683a      	ldr	r2, [r7, #0]
 801e058:	68b9      	ldr	r1, [r7, #8]
 801e05a:	6a38      	ldr	r0, [r7, #32]
 801e05c:	f000 f9a4 	bl	801e3a8 <prvCopyDataToQueue>
 801e060:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e062:	6a3b      	ldr	r3, [r7, #32]
 801e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e066:	2b00      	cmp	r3, #0
 801e068:	d00a      	beq.n	801e080 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e06a:	6a3b      	ldr	r3, [r7, #32]
 801e06c:	3324      	adds	r3, #36	; 0x24
 801e06e:	4618      	mov	r0, r3
 801e070:	f001 f82a 	bl	801f0c8 <xTaskRemoveFromEventList>
 801e074:	4603      	mov	r3, r0
 801e076:	2b00      	cmp	r3, #0
 801e078:	d007      	beq.n	801e08a <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801e07a:	f001 fdd7 	bl	801fc2c <vPortYield>
 801e07e:	e004      	b.n	801e08a <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801e080:	69fb      	ldr	r3, [r7, #28]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d001      	beq.n	801e08a <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801e086:	f001 fdd1 	bl	801fc2c <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801e08a:	f001 fdf3 	bl	801fc74 <vPortExitCritical>
				return pdPASS;
 801e08e:	2301      	movs	r3, #1
 801e090:	e05c      	b.n	801e14c <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d103      	bne.n	801e0a0 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e098:	f001 fdec 	bl	801fc74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801e09c:	2300      	movs	r3, #0
 801e09e:	e055      	b.n	801e14c <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d106      	bne.n	801e0b4 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e0a6:	f107 0314 	add.w	r3, r7, #20
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	f001 f868 	bl	801f180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e0b0:	2301      	movs	r3, #1
 801e0b2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e0b4:	f001 fdde 	bl	801fc74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e0b8:	f000 fe14 	bl	801ece4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e0bc:	f001 fdc8 	bl	801fc50 <vPortEnterCritical>
 801e0c0:	6a3b      	ldr	r3, [r7, #32]
 801e0c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e0c6:	b25b      	sxtb	r3, r3
 801e0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0cc:	d103      	bne.n	801e0d6 <xQueueGenericSend+0x114>
 801e0ce:	6a3b      	ldr	r3, [r7, #32]
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e0d6:	6a3b      	ldr	r3, [r7, #32]
 801e0d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e0dc:	b25b      	sxtb	r3, r3
 801e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0e2:	d103      	bne.n	801e0ec <xQueueGenericSend+0x12a>
 801e0e4:	6a3b      	ldr	r3, [r7, #32]
 801e0e6:	2200      	movs	r2, #0
 801e0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e0ec:	f001 fdc2 	bl	801fc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e0f0:	1d3a      	adds	r2, r7, #4
 801e0f2:	f107 0314 	add.w	r3, r7, #20
 801e0f6:	4611      	mov	r1, r2
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f001 f857 	bl	801f1ac <xTaskCheckForTimeOut>
 801e0fe:	4603      	mov	r3, r0
 801e100:	2b00      	cmp	r3, #0
 801e102:	d11d      	bne.n	801e140 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801e104:	6a38      	ldr	r0, [r7, #32]
 801e106:	f000 fa47 	bl	801e598 <prvIsQueueFull>
 801e10a:	4603      	mov	r3, r0
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d011      	beq.n	801e134 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801e110:	6a3b      	ldr	r3, [r7, #32]
 801e112:	3310      	adds	r3, #16
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	4611      	mov	r1, r2
 801e118:	4618      	mov	r0, r3
 801e11a:	f000 ff95 	bl	801f048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801e11e:	6a38      	ldr	r0, [r7, #32]
 801e120:	f000 f9d2 	bl	801e4c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801e124:	f000 fdec 	bl	801ed00 <xTaskResumeAll>
 801e128:	4603      	mov	r3, r0
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d188      	bne.n	801e040 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801e12e:	f001 fd7d 	bl	801fc2c <vPortYield>
 801e132:	e785      	b.n	801e040 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801e134:	6a38      	ldr	r0, [r7, #32]
 801e136:	f000 f9c7 	bl	801e4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e13a:	f000 fde1 	bl	801ed00 <xTaskResumeAll>
 801e13e:	e77f      	b.n	801e040 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801e140:	6a38      	ldr	r0, [r7, #32]
 801e142:	f000 f9c1 	bl	801e4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e146:	f000 fddb 	bl	801ed00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801e14a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801e14c:	4618      	mov	r0, r3
 801e14e:	3728      	adds	r7, #40	; 0x28
 801e150:	46bd      	mov	sp, r7
 801e152:	bd80      	pop	{r7, pc}

0801e154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b08a      	sub	sp, #40	; 0x28
 801e158:	af00      	add	r7, sp, #0
 801e15a:	60f8      	str	r0, [r7, #12]
 801e15c:	60b9      	str	r1, [r7, #8]
 801e15e:	607a      	str	r2, [r7, #4]
 801e160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801e166:	6a3b      	ldr	r3, [r7, #32]
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d102      	bne.n	801e172 <xQueueGenericSendFromISR+0x1e>
 801e16c:	f001 fea4 	bl	801feb8 <ulSetInterruptMask>
 801e170:	e7fe      	b.n	801e170 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e172:	68bb      	ldr	r3, [r7, #8]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d103      	bne.n	801e180 <xQueueGenericSendFromISR+0x2c>
 801e178:	6a3b      	ldr	r3, [r7, #32]
 801e17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d101      	bne.n	801e184 <xQueueGenericSendFromISR+0x30>
 801e180:	2301      	movs	r3, #1
 801e182:	e000      	b.n	801e186 <xQueueGenericSendFromISR+0x32>
 801e184:	2300      	movs	r3, #0
 801e186:	2b00      	cmp	r3, #0
 801e188:	d102      	bne.n	801e190 <xQueueGenericSendFromISR+0x3c>
 801e18a:	f001 fe95 	bl	801feb8 <ulSetInterruptMask>
 801e18e:	e7fe      	b.n	801e18e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e190:	683b      	ldr	r3, [r7, #0]
 801e192:	2b02      	cmp	r3, #2
 801e194:	d103      	bne.n	801e19e <xQueueGenericSendFromISR+0x4a>
 801e196:	6a3b      	ldr	r3, [r7, #32]
 801e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e19a:	2b01      	cmp	r3, #1
 801e19c:	d101      	bne.n	801e1a2 <xQueueGenericSendFromISR+0x4e>
 801e19e:	2301      	movs	r3, #1
 801e1a0:	e000      	b.n	801e1a4 <xQueueGenericSendFromISR+0x50>
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d102      	bne.n	801e1ae <xQueueGenericSendFromISR+0x5a>
 801e1a8:	f001 fe86 	bl	801feb8 <ulSetInterruptMask>
 801e1ac:	e7fe      	b.n	801e1ac <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801e1ae:	f001 fe83 	bl	801feb8 <ulSetInterruptMask>
 801e1b2:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e1b4:	6a3b      	ldr	r3, [r7, #32]
 801e1b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e1b8:	6a3b      	ldr	r3, [r7, #32]
 801e1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e1bc:	429a      	cmp	r2, r3
 801e1be:	d302      	bcc.n	801e1c6 <xQueueGenericSendFromISR+0x72>
 801e1c0:	683b      	ldr	r3, [r7, #0]
 801e1c2:	2b02      	cmp	r3, #2
 801e1c4:	d12d      	bne.n	801e222 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801e1c6:	6a3b      	ldr	r3, [r7, #32]
 801e1c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e1cc:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e1ce:	6a3b      	ldr	r3, [r7, #32]
 801e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1d2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e1d4:	683a      	ldr	r2, [r7, #0]
 801e1d6:	68b9      	ldr	r1, [r7, #8]
 801e1d8:	6a38      	ldr	r0, [r7, #32]
 801e1da:	f000 f8e5 	bl	801e3a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801e1de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e1e6:	d112      	bne.n	801e20e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e1e8:	6a3b      	ldr	r3, [r7, #32]
 801e1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d015      	beq.n	801e21c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e1f0:	6a3b      	ldr	r3, [r7, #32]
 801e1f2:	3324      	adds	r3, #36	; 0x24
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	f000 ff67 	bl	801f0c8 <xTaskRemoveFromEventList>
 801e1fa:	4603      	mov	r3, r0
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d00d      	beq.n	801e21c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	2b00      	cmp	r3, #0
 801e204:	d00a      	beq.n	801e21c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	2201      	movs	r2, #1
 801e20a:	601a      	str	r2, [r3, #0]
 801e20c:	e006      	b.n	801e21c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801e20e:	7efb      	ldrb	r3, [r7, #27]
 801e210:	3301      	adds	r3, #1
 801e212:	b2db      	uxtb	r3, r3
 801e214:	b25a      	sxtb	r2, r3
 801e216:	6a3b      	ldr	r3, [r7, #32]
 801e218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801e21c:	2301      	movs	r3, #1
 801e21e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801e220:	e001      	b.n	801e226 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801e222:	2300      	movs	r3, #0
 801e224:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801e226:	69f8      	ldr	r0, [r7, #28]
 801e228:	f001 fe53 	bl	801fed2 <vClearInterruptMask>

	return xReturn;
 801e22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e22e:	4618      	mov	r0, r3
 801e230:	3728      	adds	r7, #40	; 0x28
 801e232:	46bd      	mov	sp, r7
 801e234:	bd80      	pop	{r7, pc}

0801e236 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801e236:	b580      	push	{r7, lr}
 801e238:	b08a      	sub	sp, #40	; 0x28
 801e23a:	af00      	add	r7, sp, #0
 801e23c:	60f8      	str	r0, [r7, #12]
 801e23e:	60b9      	str	r1, [r7, #8]
 801e240:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801e242:	2300      	movs	r3, #0
 801e244:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801e24a:	6a3b      	ldr	r3, [r7, #32]
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d102      	bne.n	801e256 <xQueueReceive+0x20>
 801e250:	f001 fe32 	bl	801feb8 <ulSetInterruptMask>
 801e254:	e7fe      	b.n	801e254 <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e256:	68bb      	ldr	r3, [r7, #8]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d103      	bne.n	801e264 <xQueueReceive+0x2e>
 801e25c:	6a3b      	ldr	r3, [r7, #32]
 801e25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e260:	2b00      	cmp	r3, #0
 801e262:	d101      	bne.n	801e268 <xQueueReceive+0x32>
 801e264:	2301      	movs	r3, #1
 801e266:	e000      	b.n	801e26a <xQueueReceive+0x34>
 801e268:	2300      	movs	r3, #0
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d102      	bne.n	801e274 <xQueueReceive+0x3e>
 801e26e:	f001 fe23 	bl	801feb8 <ulSetInterruptMask>
 801e272:	e7fe      	b.n	801e272 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e274:	f001 f8be 	bl	801f3f4 <xTaskGetSchedulerState>
 801e278:	4603      	mov	r3, r0
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	d102      	bne.n	801e284 <xQueueReceive+0x4e>
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	2b00      	cmp	r3, #0
 801e282:	d101      	bne.n	801e288 <xQueueReceive+0x52>
 801e284:	2301      	movs	r3, #1
 801e286:	e000      	b.n	801e28a <xQueueReceive+0x54>
 801e288:	2300      	movs	r3, #0
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d102      	bne.n	801e294 <xQueueReceive+0x5e>
 801e28e:	f001 fe13 	bl	801feb8 <ulSetInterruptMask>
 801e292:	e7fe      	b.n	801e292 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e294:	f001 fcdc 	bl	801fc50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e298:	6a3b      	ldr	r3, [r7, #32]
 801e29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e29c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e29e:	69fb      	ldr	r3, [r7, #28]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d019      	beq.n	801e2d8 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801e2a4:	68b9      	ldr	r1, [r7, #8]
 801e2a6:	6a38      	ldr	r0, [r7, #32]
 801e2a8:	f000 f8e8 	bl	801e47c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e2ac:	69fb      	ldr	r3, [r7, #28]
 801e2ae:	1e5a      	subs	r2, r3, #1
 801e2b0:	6a3b      	ldr	r3, [r7, #32]
 801e2b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e2b4:	6a3b      	ldr	r3, [r7, #32]
 801e2b6:	691b      	ldr	r3, [r3, #16]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d009      	beq.n	801e2d0 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e2bc:	6a3b      	ldr	r3, [r7, #32]
 801e2be:	3310      	adds	r3, #16
 801e2c0:	4618      	mov	r0, r3
 801e2c2:	f000 ff01 	bl	801f0c8 <xTaskRemoveFromEventList>
 801e2c6:	4603      	mov	r3, r0
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d001      	beq.n	801e2d0 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801e2cc:	f001 fcae 	bl	801fc2c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801e2d0:	f001 fcd0 	bl	801fc74 <vPortExitCritical>
				return pdPASS;
 801e2d4:	2301      	movs	r3, #1
 801e2d6:	e063      	b.n	801e3a0 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d103      	bne.n	801e2e6 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e2de:	f001 fcc9 	bl	801fc74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801e2e2:	2300      	movs	r3, #0
 801e2e4:	e05c      	b.n	801e3a0 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d106      	bne.n	801e2fa <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e2ec:	f107 0314 	add.w	r3, r7, #20
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	f000 ff45 	bl	801f180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e2f6:	2301      	movs	r3, #1
 801e2f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e2fa:	f001 fcbb 	bl	801fc74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e2fe:	f000 fcf1 	bl	801ece4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e302:	f001 fca5 	bl	801fc50 <vPortEnterCritical>
 801e306:	6a3b      	ldr	r3, [r7, #32]
 801e308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e30c:	b25b      	sxtb	r3, r3
 801e30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e312:	d103      	bne.n	801e31c <xQueueReceive+0xe6>
 801e314:	6a3b      	ldr	r3, [r7, #32]
 801e316:	2200      	movs	r2, #0
 801e318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e31c:	6a3b      	ldr	r3, [r7, #32]
 801e31e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e322:	b25b      	sxtb	r3, r3
 801e324:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e328:	d103      	bne.n	801e332 <xQueueReceive+0xfc>
 801e32a:	6a3b      	ldr	r3, [r7, #32]
 801e32c:	2200      	movs	r2, #0
 801e32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e332:	f001 fc9f 	bl	801fc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e336:	1d3a      	adds	r2, r7, #4
 801e338:	f107 0314 	add.w	r3, r7, #20
 801e33c:	4611      	mov	r1, r2
 801e33e:	4618      	mov	r0, r3
 801e340:	f000 ff34 	bl	801f1ac <xTaskCheckForTimeOut>
 801e344:	4603      	mov	r3, r0
 801e346:	2b00      	cmp	r3, #0
 801e348:	d11d      	bne.n	801e386 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e34a:	6a38      	ldr	r0, [r7, #32]
 801e34c:	f000 f90e 	bl	801e56c <prvIsQueueEmpty>
 801e350:	4603      	mov	r3, r0
 801e352:	2b00      	cmp	r3, #0
 801e354:	d011      	beq.n	801e37a <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801e356:	6a3b      	ldr	r3, [r7, #32]
 801e358:	3324      	adds	r3, #36	; 0x24
 801e35a:	687a      	ldr	r2, [r7, #4]
 801e35c:	4611      	mov	r1, r2
 801e35e:	4618      	mov	r0, r3
 801e360:	f000 fe72 	bl	801f048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801e364:	6a38      	ldr	r0, [r7, #32]
 801e366:	f000 f8af 	bl	801e4c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801e36a:	f000 fcc9 	bl	801ed00 <xTaskResumeAll>
 801e36e:	4603      	mov	r3, r0
 801e370:	2b00      	cmp	r3, #0
 801e372:	d18f      	bne.n	801e294 <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 801e374:	f001 fc5a 	bl	801fc2c <vPortYield>
 801e378:	e78c      	b.n	801e294 <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801e37a:	6a38      	ldr	r0, [r7, #32]
 801e37c:	f000 f8a4 	bl	801e4c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e380:	f000 fcbe 	bl	801ed00 <xTaskResumeAll>
 801e384:	e786      	b.n	801e294 <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801e386:	6a38      	ldr	r0, [r7, #32]
 801e388:	f000 f89e 	bl	801e4c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e38c:	f000 fcb8 	bl	801ed00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e390:	6a38      	ldr	r0, [r7, #32]
 801e392:	f000 f8eb 	bl	801e56c <prvIsQueueEmpty>
 801e396:	4603      	mov	r3, r0
 801e398:	2b00      	cmp	r3, #0
 801e39a:	f43f af7b 	beq.w	801e294 <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801e39e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801e3a0:	4618      	mov	r0, r3
 801e3a2:	3728      	adds	r7, #40	; 0x28
 801e3a4:	46bd      	mov	sp, r7
 801e3a6:	bd80      	pop	{r7, pc}

0801e3a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801e3a8:	b580      	push	{r7, lr}
 801e3aa:	b086      	sub	sp, #24
 801e3ac:	af00      	add	r7, sp, #0
 801e3ae:	60f8      	str	r0, [r7, #12]
 801e3b0:	60b9      	str	r1, [r7, #8]
 801e3b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d10d      	bne.n	801e3e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d14d      	bne.n	801e46a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	689b      	ldr	r3, [r3, #8]
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f001 f82c 	bl	801f430 <xTaskPriorityDisinherit>
 801e3d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801e3da:	68fb      	ldr	r3, [r7, #12]
 801e3dc:	2200      	movs	r2, #0
 801e3de:	609a      	str	r2, [r3, #8]
 801e3e0:	e043      	b.n	801e46a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d119      	bne.n	801e41c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	6858      	ldr	r0, [r3, #4]
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3f0:	461a      	mov	r2, r3
 801e3f2:	68b9      	ldr	r1, [r7, #8]
 801e3f4:	f004 fa27 	bl	8022846 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	685a      	ldr	r2, [r3, #4]
 801e3fc:	68fb      	ldr	r3, [r7, #12]
 801e3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e400:	441a      	add	r2, r3
 801e402:	68fb      	ldr	r3, [r7, #12]
 801e404:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801e406:	68fb      	ldr	r3, [r7, #12]
 801e408:	685a      	ldr	r2, [r3, #4]
 801e40a:	68fb      	ldr	r3, [r7, #12]
 801e40c:	689b      	ldr	r3, [r3, #8]
 801e40e:	429a      	cmp	r2, r3
 801e410:	d32b      	bcc.n	801e46a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801e412:	68fb      	ldr	r3, [r7, #12]
 801e414:	681a      	ldr	r2, [r3, #0]
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	605a      	str	r2, [r3, #4]
 801e41a:	e026      	b.n	801e46a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	68d8      	ldr	r0, [r3, #12]
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e424:	461a      	mov	r2, r3
 801e426:	68b9      	ldr	r1, [r7, #8]
 801e428:	f004 fa0d 	bl	8022846 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	68da      	ldr	r2, [r3, #12]
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e434:	425b      	negs	r3, r3
 801e436:	441a      	add	r2, r3
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	68da      	ldr	r2, [r3, #12]
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	429a      	cmp	r2, r3
 801e446:	d207      	bcs.n	801e458 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	689a      	ldr	r2, [r3, #8]
 801e44c:	68fb      	ldr	r3, [r7, #12]
 801e44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e450:	425b      	negs	r3, r3
 801e452:	441a      	add	r2, r3
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	2b02      	cmp	r3, #2
 801e45c:	d105      	bne.n	801e46a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e45e:	693b      	ldr	r3, [r7, #16]
 801e460:	2b00      	cmp	r3, #0
 801e462:	d002      	beq.n	801e46a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801e464:	693b      	ldr	r3, [r7, #16]
 801e466:	3b01      	subs	r3, #1
 801e468:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801e46a:	693b      	ldr	r3, [r7, #16]
 801e46c:	1c5a      	adds	r2, r3, #1
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801e472:	697b      	ldr	r3, [r7, #20]
}
 801e474:	4618      	mov	r0, r3
 801e476:	3718      	adds	r7, #24
 801e478:	46bd      	mov	sp, r7
 801e47a:	bd80      	pop	{r7, pc}

0801e47c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b082      	sub	sp, #8
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]
 801e484:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d018      	beq.n	801e4c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	68da      	ldr	r2, [r3, #12]
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e496:	441a      	add	r2, r3
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	68da      	ldr	r2, [r3, #12]
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	689b      	ldr	r3, [r3, #8]
 801e4a4:	429a      	cmp	r2, r3
 801e4a6:	d303      	bcc.n	801e4b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	681a      	ldr	r2, [r3, #0]
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	68d9      	ldr	r1, [r3, #12]
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4b8:	461a      	mov	r2, r3
 801e4ba:	6838      	ldr	r0, [r7, #0]
 801e4bc:	f004 f9c3 	bl	8022846 <memcpy>
	}
}
 801e4c0:	bf00      	nop
 801e4c2:	3708      	adds	r7, #8
 801e4c4:	46bd      	mov	sp, r7
 801e4c6:	bd80      	pop	{r7, pc}

0801e4c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801e4c8:	b580      	push	{r7, lr}
 801e4ca:	b084      	sub	sp, #16
 801e4cc:	af00      	add	r7, sp, #0
 801e4ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801e4d0:	f001 fbbe 	bl	801fc50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e4da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e4dc:	e011      	b.n	801e502 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d012      	beq.n	801e50c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	3324      	adds	r3, #36	; 0x24
 801e4ea:	4618      	mov	r0, r3
 801e4ec:	f000 fdec 	bl	801f0c8 <xTaskRemoveFromEventList>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d001      	beq.n	801e4fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801e4f6:	f000 feab 	bl	801f250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801e4fa:	7bfb      	ldrb	r3, [r7, #15]
 801e4fc:	3b01      	subs	r3, #1
 801e4fe:	b2db      	uxtb	r3, r3
 801e500:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801e502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e506:	2b00      	cmp	r3, #0
 801e508:	dce9      	bgt.n	801e4de <prvUnlockQueue+0x16>
 801e50a:	e000      	b.n	801e50e <prvUnlockQueue+0x46>
					break;
 801e50c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801e50e:	687b      	ldr	r3, [r7, #4]
 801e510:	22ff      	movs	r2, #255	; 0xff
 801e512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801e516:	f001 fbad 	bl	801fc74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801e51a:	f001 fb99 	bl	801fc50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e524:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e526:	e011      	b.n	801e54c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	691b      	ldr	r3, [r3, #16]
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	d012      	beq.n	801e556 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	3310      	adds	r3, #16
 801e534:	4618      	mov	r0, r3
 801e536:	f000 fdc7 	bl	801f0c8 <xTaskRemoveFromEventList>
 801e53a:	4603      	mov	r3, r0
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	d001      	beq.n	801e544 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801e540:	f000 fe86 	bl	801f250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801e544:	7bbb      	ldrb	r3, [r7, #14]
 801e546:	3b01      	subs	r3, #1
 801e548:	b2db      	uxtb	r3, r3
 801e54a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801e54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801e550:	2b00      	cmp	r3, #0
 801e552:	dce9      	bgt.n	801e528 <prvUnlockQueue+0x60>
 801e554:	e000      	b.n	801e558 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801e556:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	22ff      	movs	r2, #255	; 0xff
 801e55c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801e560:	f001 fb88 	bl	801fc74 <vPortExitCritical>
}
 801e564:	bf00      	nop
 801e566:	3710      	adds	r7, #16
 801e568:	46bd      	mov	sp, r7
 801e56a:	bd80      	pop	{r7, pc}

0801e56c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801e56c:	b580      	push	{r7, lr}
 801e56e:	b084      	sub	sp, #16
 801e570:	af00      	add	r7, sp, #0
 801e572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801e574:	f001 fb6c 	bl	801fc50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e57c:	2b00      	cmp	r3, #0
 801e57e:	d102      	bne.n	801e586 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801e580:	2301      	movs	r3, #1
 801e582:	60fb      	str	r3, [r7, #12]
 801e584:	e001      	b.n	801e58a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801e586:	2300      	movs	r3, #0
 801e588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801e58a:	f001 fb73 	bl	801fc74 <vPortExitCritical>

	return xReturn;
 801e58e:	68fb      	ldr	r3, [r7, #12]
}
 801e590:	4618      	mov	r0, r3
 801e592:	3710      	adds	r7, #16
 801e594:	46bd      	mov	sp, r7
 801e596:	bd80      	pop	{r7, pc}

0801e598 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801e598:	b580      	push	{r7, lr}
 801e59a:	b084      	sub	sp, #16
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801e5a0:	f001 fb56 	bl	801fc50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5ac:	429a      	cmp	r2, r3
 801e5ae:	d102      	bne.n	801e5b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801e5b0:	2301      	movs	r3, #1
 801e5b2:	60fb      	str	r3, [r7, #12]
 801e5b4:	e001      	b.n	801e5ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801e5ba:	f001 fb5b 	bl	801fc74 <vPortExitCritical>

	return xReturn;
 801e5be:	68fb      	ldr	r3, [r7, #12]
}
 801e5c0:	4618      	mov	r0, r3
 801e5c2:	3710      	adds	r7, #16
 801e5c4:	46bd      	mov	sp, r7
 801e5c6:	bd80      	pop	{r7, pc}

0801e5c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801e5c8:	b480      	push	{r7}
 801e5ca:	b085      	sub	sp, #20
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	6078      	str	r0, [r7, #4]
 801e5d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801e5d2:	2300      	movs	r3, #0
 801e5d4:	60fb      	str	r3, [r7, #12]
 801e5d6:	e014      	b.n	801e602 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801e5d8:	4a0f      	ldr	r2, [pc, #60]	; (801e618 <vQueueAddToRegistry+0x50>)
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d10b      	bne.n	801e5fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801e5e4:	490c      	ldr	r1, [pc, #48]	; (801e618 <vQueueAddToRegistry+0x50>)
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	683a      	ldr	r2, [r7, #0]
 801e5ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801e5ee:	4a0a      	ldr	r2, [pc, #40]	; (801e618 <vQueueAddToRegistry+0x50>)
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	00db      	lsls	r3, r3, #3
 801e5f4:	4413      	add	r3, r2
 801e5f6:	687a      	ldr	r2, [r7, #4]
 801e5f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801e5fa:	e006      	b.n	801e60a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	3301      	adds	r3, #1
 801e600:	60fb      	str	r3, [r7, #12]
 801e602:	68fb      	ldr	r3, [r7, #12]
 801e604:	2b07      	cmp	r3, #7
 801e606:	d9e7      	bls.n	801e5d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801e608:	bf00      	nop
 801e60a:	bf00      	nop
 801e60c:	3714      	adds	r7, #20
 801e60e:	46bd      	mov	sp, r7
 801e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e614:	4770      	bx	lr
 801e616:	bf00      	nop
 801e618:	200015f0 	.word	0x200015f0

0801e61c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801e61c:	b580      	push	{r7, lr}
 801e61e:	b086      	sub	sp, #24
 801e620:	af00      	add	r7, sp, #0
 801e622:	60f8      	str	r0, [r7, #12]
 801e624:	60b9      	str	r1, [r7, #8]
 801e626:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801e628:	68fb      	ldr	r3, [r7, #12]
 801e62a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801e62c:	f001 fb10 	bl	801fc50 <vPortEnterCritical>
 801e630:	697b      	ldr	r3, [r7, #20]
 801e632:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e636:	b25b      	sxtb	r3, r3
 801e638:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e63c:	d103      	bne.n	801e646 <vQueueWaitForMessageRestricted+0x2a>
 801e63e:	697b      	ldr	r3, [r7, #20]
 801e640:	2200      	movs	r2, #0
 801e642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e646:	697b      	ldr	r3, [r7, #20]
 801e648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e64c:	b25b      	sxtb	r3, r3
 801e64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e652:	d103      	bne.n	801e65c <vQueueWaitForMessageRestricted+0x40>
 801e654:	697b      	ldr	r3, [r7, #20]
 801e656:	2200      	movs	r2, #0
 801e658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e65c:	f001 fb0a 	bl	801fc74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801e660:	697b      	ldr	r3, [r7, #20]
 801e662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e664:	2b00      	cmp	r3, #0
 801e666:	d106      	bne.n	801e676 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801e668:	697b      	ldr	r3, [r7, #20]
 801e66a:	3324      	adds	r3, #36	; 0x24
 801e66c:	687a      	ldr	r2, [r7, #4]
 801e66e:	68b9      	ldr	r1, [r7, #8]
 801e670:	4618      	mov	r0, r3
 801e672:	f000 fd05 	bl	801f080 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801e676:	6978      	ldr	r0, [r7, #20]
 801e678:	f7ff ff26 	bl	801e4c8 <prvUnlockQueue>
	}
 801e67c:	bf00      	nop
 801e67e:	3718      	adds	r7, #24
 801e680:	46bd      	mov	sp, r7
 801e682:	bd80      	pop	{r7, pc}

0801e684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801e684:	b580      	push	{r7, lr}
 801e686:	b08c      	sub	sp, #48	; 0x30
 801e688:	af04      	add	r7, sp, #16
 801e68a:	60f8      	str	r0, [r7, #12]
 801e68c:	60b9      	str	r1, [r7, #8]
 801e68e:	607a      	str	r2, [r7, #4]
 801e690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801e692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e694:	2b00      	cmp	r3, #0
 801e696:	d102      	bne.n	801e69e <xTaskCreateStatic+0x1a>
 801e698:	f001 fc0e 	bl	801feb8 <ulSetInterruptMask>
 801e69c:	e7fe      	b.n	801e69c <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 801e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d102      	bne.n	801e6aa <xTaskCreateStatic+0x26>
 801e6a4:	f001 fc08 	bl	801feb8 <ulSetInterruptMask>
 801e6a8:	e7fe      	b.n	801e6a8 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801e6aa:	235c      	movs	r3, #92	; 0x5c
 801e6ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801e6ae:	697b      	ldr	r3, [r7, #20]
 801e6b0:	2b5c      	cmp	r3, #92	; 0x5c
 801e6b2:	d002      	beq.n	801e6ba <xTaskCreateStatic+0x36>
 801e6b4:	f001 fc00 	bl	801feb8 <ulSetInterruptMask>
 801e6b8:	e7fe      	b.n	801e6b8 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801e6ba:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801e6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d01e      	beq.n	801e700 <xTaskCreateStatic+0x7c>
 801e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d01b      	beq.n	801e700 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801e6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6ca:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801e6cc:	69fb      	ldr	r3, [r7, #28]
 801e6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e6d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801e6d2:	69fb      	ldr	r3, [r7, #28]
 801e6d4:	2202      	movs	r2, #2
 801e6d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801e6da:	2300      	movs	r3, #0
 801e6dc:	9303      	str	r3, [sp, #12]
 801e6de:	69fb      	ldr	r3, [r7, #28]
 801e6e0:	9302      	str	r3, [sp, #8]
 801e6e2:	f107 0318 	add.w	r3, r7, #24
 801e6e6:	9301      	str	r3, [sp, #4]
 801e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6ea:	9300      	str	r3, [sp, #0]
 801e6ec:	683b      	ldr	r3, [r7, #0]
 801e6ee:	687a      	ldr	r2, [r7, #4]
 801e6f0:	68b9      	ldr	r1, [r7, #8]
 801e6f2:	68f8      	ldr	r0, [r7, #12]
 801e6f4:	f000 f850 	bl	801e798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801e6f8:	69f8      	ldr	r0, [r7, #28]
 801e6fa:	f000 f8d7 	bl	801e8ac <prvAddNewTaskToReadyList>
 801e6fe:	e001      	b.n	801e704 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 801e700:	2300      	movs	r3, #0
 801e702:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801e704:	69bb      	ldr	r3, [r7, #24]
	}
 801e706:	4618      	mov	r0, r3
 801e708:	3720      	adds	r7, #32
 801e70a:	46bd      	mov	sp, r7
 801e70c:	bd80      	pop	{r7, pc}

0801e70e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801e70e:	b580      	push	{r7, lr}
 801e710:	b08c      	sub	sp, #48	; 0x30
 801e712:	af04      	add	r7, sp, #16
 801e714:	60f8      	str	r0, [r7, #12]
 801e716:	60b9      	str	r1, [r7, #8]
 801e718:	603b      	str	r3, [r7, #0]
 801e71a:	4613      	mov	r3, r2
 801e71c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801e71e:	88fb      	ldrh	r3, [r7, #6]
 801e720:	009b      	lsls	r3, r3, #2
 801e722:	4618      	mov	r0, r3
 801e724:	f001 fc28 	bl	801ff78 <pvPortMalloc>
 801e728:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801e72a:	697b      	ldr	r3, [r7, #20]
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d00e      	beq.n	801e74e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801e730:	205c      	movs	r0, #92	; 0x5c
 801e732:	f001 fc21 	bl	801ff78 <pvPortMalloc>
 801e736:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801e738:	69fb      	ldr	r3, [r7, #28]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d003      	beq.n	801e746 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801e73e:	69fb      	ldr	r3, [r7, #28]
 801e740:	697a      	ldr	r2, [r7, #20]
 801e742:	631a      	str	r2, [r3, #48]	; 0x30
 801e744:	e005      	b.n	801e752 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801e746:	6978      	ldr	r0, [r7, #20]
 801e748:	f001 fcca 	bl	80200e0 <vPortFree>
 801e74c:	e001      	b.n	801e752 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801e74e:	2300      	movs	r3, #0
 801e750:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801e752:	69fb      	ldr	r3, [r7, #28]
 801e754:	2b00      	cmp	r3, #0
 801e756:	d017      	beq.n	801e788 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801e758:	69fb      	ldr	r3, [r7, #28]
 801e75a:	2200      	movs	r2, #0
 801e75c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801e760:	88fa      	ldrh	r2, [r7, #6]
 801e762:	2300      	movs	r3, #0
 801e764:	9303      	str	r3, [sp, #12]
 801e766:	69fb      	ldr	r3, [r7, #28]
 801e768:	9302      	str	r3, [sp, #8]
 801e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e76c:	9301      	str	r3, [sp, #4]
 801e76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e770:	9300      	str	r3, [sp, #0]
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	68b9      	ldr	r1, [r7, #8]
 801e776:	68f8      	ldr	r0, [r7, #12]
 801e778:	f000 f80e 	bl	801e798 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801e77c:	69f8      	ldr	r0, [r7, #28]
 801e77e:	f000 f895 	bl	801e8ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801e782:	2301      	movs	r3, #1
 801e784:	61bb      	str	r3, [r7, #24]
 801e786:	e002      	b.n	801e78e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801e788:	f04f 33ff 	mov.w	r3, #4294967295
 801e78c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801e78e:	69bb      	ldr	r3, [r7, #24]
	}
 801e790:	4618      	mov	r0, r3
 801e792:	3720      	adds	r7, #32
 801e794:	46bd      	mov	sp, r7
 801e796:	bd80      	pop	{r7, pc}

0801e798 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801e798:	b580      	push	{r7, lr}
 801e79a:	b086      	sub	sp, #24
 801e79c:	af00      	add	r7, sp, #0
 801e79e:	60f8      	str	r0, [r7, #12]
 801e7a0:	60b9      	str	r1, [r7, #8]
 801e7a2:	607a      	str	r2, [r7, #4]
 801e7a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	009b      	lsls	r3, r3, #2
 801e7ae:	461a      	mov	r2, r3
 801e7b0:	21a5      	movs	r1, #165	; 0xa5
 801e7b2:	f003 ff78 	bl	80226a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801e7c0:	3b01      	subs	r3, #1
 801e7c2:	009b      	lsls	r3, r3, #2
 801e7c4:	4413      	add	r3, r2
 801e7c6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801e7c8:	693b      	ldr	r3, [r7, #16]
 801e7ca:	f023 0307 	bic.w	r3, r3, #7
 801e7ce:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801e7d0:	693b      	ldr	r3, [r7, #16]
 801e7d2:	f003 0307 	and.w	r3, r3, #7
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d002      	beq.n	801e7e0 <prvInitialiseNewTask+0x48>
 801e7da:	f001 fb6d 	bl	801feb8 <ulSetInterruptMask>
 801e7de:	e7fe      	b.n	801e7de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801e7e0:	68bb      	ldr	r3, [r7, #8]
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	d01f      	beq.n	801e826 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	617b      	str	r3, [r7, #20]
 801e7ea:	e012      	b.n	801e812 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801e7ec:	68ba      	ldr	r2, [r7, #8]
 801e7ee:	697b      	ldr	r3, [r7, #20]
 801e7f0:	4413      	add	r3, r2
 801e7f2:	7819      	ldrb	r1, [r3, #0]
 801e7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e7f6:	697b      	ldr	r3, [r7, #20]
 801e7f8:	4413      	add	r3, r2
 801e7fa:	3334      	adds	r3, #52	; 0x34
 801e7fc:	460a      	mov	r2, r1
 801e7fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801e800:	68ba      	ldr	r2, [r7, #8]
 801e802:	697b      	ldr	r3, [r7, #20]
 801e804:	4413      	add	r3, r2
 801e806:	781b      	ldrb	r3, [r3, #0]
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d006      	beq.n	801e81a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801e80c:	697b      	ldr	r3, [r7, #20]
 801e80e:	3301      	adds	r3, #1
 801e810:	617b      	str	r3, [r7, #20]
 801e812:	697b      	ldr	r3, [r7, #20]
 801e814:	2b0f      	cmp	r3, #15
 801e816:	d9e9      	bls.n	801e7ec <prvInitialiseNewTask+0x54>
 801e818:	e000      	b.n	801e81c <prvInitialiseNewTask+0x84>
			{
				break;
 801e81a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e81e:	2200      	movs	r2, #0
 801e820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801e824:	e003      	b.n	801e82e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e828:	2200      	movs	r2, #0
 801e82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801e82e:	6a3b      	ldr	r3, [r7, #32]
 801e830:	2b37      	cmp	r3, #55	; 0x37
 801e832:	d901      	bls.n	801e838 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801e834:	2337      	movs	r3, #55	; 0x37
 801e836:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e83a:	6a3a      	ldr	r2, [r7, #32]
 801e83c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e840:	6a3a      	ldr	r2, [r7, #32]
 801e842:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e846:	2200      	movs	r2, #0
 801e848:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801e84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e84c:	3304      	adds	r3, #4
 801e84e:	4618      	mov	r0, r3
 801e850:	f7ff fa58 	bl	801dd04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e856:	3318      	adds	r3, #24
 801e858:	4618      	mov	r0, r3
 801e85a:	f7ff fa53 	bl	801dd04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801e85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e864:	6a3b      	ldr	r3, [r7, #32]
 801e866:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e86c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801e86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e872:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e876:	2200      	movs	r2, #0
 801e878:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e87c:	2200      	movs	r2, #0
 801e87e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e884:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801e886:	683b      	ldr	r3, [r7, #0]
 801e888:	68fa      	ldr	r2, [r7, #12]
 801e88a:	6938      	ldr	r0, [r7, #16]
 801e88c:	f001 fa3c 	bl	801fd08 <pxPortInitialiseStack>
 801e890:	4602      	mov	r2, r0
 801e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d002      	beq.n	801e8a2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e8a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801e8a2:	bf00      	nop
 801e8a4:	3718      	adds	r7, #24
 801e8a6:	46bd      	mov	sp, r7
 801e8a8:	bd80      	pop	{r7, pc}
	...

0801e8ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b082      	sub	sp, #8
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801e8b4:	f001 f9cc 	bl	801fc50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801e8b8:	4b2a      	ldr	r3, [pc, #168]	; (801e964 <prvAddNewTaskToReadyList+0xb8>)
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	3301      	adds	r3, #1
 801e8be:	4a29      	ldr	r2, [pc, #164]	; (801e964 <prvAddNewTaskToReadyList+0xb8>)
 801e8c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801e8c2:	4b29      	ldr	r3, [pc, #164]	; (801e968 <prvAddNewTaskToReadyList+0xbc>)
 801e8c4:	681b      	ldr	r3, [r3, #0]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d109      	bne.n	801e8de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801e8ca:	4a27      	ldr	r2, [pc, #156]	; (801e968 <prvAddNewTaskToReadyList+0xbc>)
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801e8d0:	4b24      	ldr	r3, [pc, #144]	; (801e964 <prvAddNewTaskToReadyList+0xb8>)
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	2b01      	cmp	r3, #1
 801e8d6:	d110      	bne.n	801e8fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801e8d8:	f000 fcd6 	bl	801f288 <prvInitialiseTaskLists>
 801e8dc:	e00d      	b.n	801e8fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801e8de:	4b23      	ldr	r3, [pc, #140]	; (801e96c <prvAddNewTaskToReadyList+0xc0>)
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d109      	bne.n	801e8fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801e8e6:	4b20      	ldr	r3, [pc, #128]	; (801e968 <prvAddNewTaskToReadyList+0xbc>)
 801e8e8:	681b      	ldr	r3, [r3, #0]
 801e8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e8f0:	429a      	cmp	r2, r3
 801e8f2:	d802      	bhi.n	801e8fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801e8f4:	4a1c      	ldr	r2, [pc, #112]	; (801e968 <prvAddNewTaskToReadyList+0xbc>)
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801e8fa:	4b1d      	ldr	r3, [pc, #116]	; (801e970 <prvAddNewTaskToReadyList+0xc4>)
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	3301      	adds	r3, #1
 801e900:	4a1b      	ldr	r2, [pc, #108]	; (801e970 <prvAddNewTaskToReadyList+0xc4>)
 801e902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801e904:	4b1a      	ldr	r3, [pc, #104]	; (801e970 <prvAddNewTaskToReadyList+0xc4>)
 801e906:	681a      	ldr	r2, [r3, #0]
 801e908:	687b      	ldr	r3, [r7, #4]
 801e90a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e910:	4b18      	ldr	r3, [pc, #96]	; (801e974 <prvAddNewTaskToReadyList+0xc8>)
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	429a      	cmp	r2, r3
 801e916:	d903      	bls.n	801e920 <prvAddNewTaskToReadyList+0x74>
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e91c:	4a15      	ldr	r2, [pc, #84]	; (801e974 <prvAddNewTaskToReadyList+0xc8>)
 801e91e:	6013      	str	r3, [r2, #0]
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e924:	4613      	mov	r3, r2
 801e926:	009b      	lsls	r3, r3, #2
 801e928:	4413      	add	r3, r2
 801e92a:	009b      	lsls	r3, r3, #2
 801e92c:	4a12      	ldr	r2, [pc, #72]	; (801e978 <prvAddNewTaskToReadyList+0xcc>)
 801e92e:	441a      	add	r2, r3
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	3304      	adds	r3, #4
 801e934:	4619      	mov	r1, r3
 801e936:	4610      	mov	r0, r2
 801e938:	f7ff f9f1 	bl	801dd1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801e93c:	f001 f99a 	bl	801fc74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801e940:	4b0a      	ldr	r3, [pc, #40]	; (801e96c <prvAddNewTaskToReadyList+0xc0>)
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	2b00      	cmp	r3, #0
 801e946:	d008      	beq.n	801e95a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801e948:	4b07      	ldr	r3, [pc, #28]	; (801e968 <prvAddNewTaskToReadyList+0xbc>)
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e952:	429a      	cmp	r2, r3
 801e954:	d201      	bcs.n	801e95a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801e956:	f001 f969 	bl	801fc2c <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801e95a:	bf00      	nop
 801e95c:	3708      	adds	r7, #8
 801e95e:	46bd      	mov	sp, r7
 801e960:	bd80      	pop	{r7, pc}
 801e962:	bf00      	nop
 801e964:	20001b04 	.word	0x20001b04
 801e968:	20001630 	.word	0x20001630
 801e96c:	20001b10 	.word	0x20001b10
 801e970:	20001b20 	.word	0x20001b20
 801e974:	20001b0c 	.word	0x20001b0c
 801e978:	20001634 	.word	0x20001634

0801e97c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801e97c:	b580      	push	{r7, lr}
 801e97e:	b086      	sub	sp, #24
 801e980:	af00      	add	r7, sp, #0
 801e982:	6078      	str	r0, [r7, #4]
 801e984:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801e986:	2300      	movs	r3, #0
 801e988:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	2b00      	cmp	r3, #0
 801e98e:	d102      	bne.n	801e996 <vTaskDelayUntil+0x1a>
 801e990:	f001 fa92 	bl	801feb8 <ulSetInterruptMask>
 801e994:	e7fe      	b.n	801e994 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 801e996:	683b      	ldr	r3, [r7, #0]
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d102      	bne.n	801e9a2 <vTaskDelayUntil+0x26>
 801e99c:	f001 fa8c 	bl	801feb8 <ulSetInterruptMask>
 801e9a0:	e7fe      	b.n	801e9a0 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
 801e9a2:	4b23      	ldr	r3, [pc, #140]	; (801ea30 <vTaskDelayUntil+0xb4>)
 801e9a4:	681b      	ldr	r3, [r3, #0]
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d002      	beq.n	801e9b0 <vTaskDelayUntil+0x34>
 801e9aa:	f001 fa85 	bl	801feb8 <ulSetInterruptMask>
 801e9ae:	e7fe      	b.n	801e9ae <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
 801e9b0:	f000 f998 	bl	801ece4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801e9b4:	4b1f      	ldr	r3, [pc, #124]	; (801ea34 <vTaskDelayUntil+0xb8>)
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	683a      	ldr	r2, [r7, #0]
 801e9c0:	4413      	add	r3, r2
 801e9c2:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	693a      	ldr	r2, [r7, #16]
 801e9ca:	429a      	cmp	r2, r3
 801e9cc:	d20b      	bcs.n	801e9e6 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	68fa      	ldr	r2, [r7, #12]
 801e9d4:	429a      	cmp	r2, r3
 801e9d6:	d211      	bcs.n	801e9fc <vTaskDelayUntil+0x80>
 801e9d8:	68fa      	ldr	r2, [r7, #12]
 801e9da:	693b      	ldr	r3, [r7, #16]
 801e9dc:	429a      	cmp	r2, r3
 801e9de:	d90d      	bls.n	801e9fc <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801e9e0:	2301      	movs	r3, #1
 801e9e2:	617b      	str	r3, [r7, #20]
 801e9e4:	e00a      	b.n	801e9fc <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	68fa      	ldr	r2, [r7, #12]
 801e9ec:	429a      	cmp	r2, r3
 801e9ee:	d303      	bcc.n	801e9f8 <vTaskDelayUntil+0x7c>
 801e9f0:	68fa      	ldr	r2, [r7, #12]
 801e9f2:	693b      	ldr	r3, [r7, #16]
 801e9f4:	429a      	cmp	r2, r3
 801e9f6:	d901      	bls.n	801e9fc <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
 801e9f8:	2301      	movs	r3, #1
 801e9fa:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	68fa      	ldr	r2, [r7, #12]
 801ea00:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801ea02:	697b      	ldr	r3, [r7, #20]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d006      	beq.n	801ea16 <vTaskDelayUntil+0x9a>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801ea08:	68fa      	ldr	r2, [r7, #12]
 801ea0a:	693b      	ldr	r3, [r7, #16]
 801ea0c:	1ad3      	subs	r3, r2, r3
 801ea0e:	2100      	movs	r1, #0
 801ea10:	4618      	mov	r0, r3
 801ea12:	f000 fd6b 	bl	801f4ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801ea16:	f000 f973 	bl	801ed00 <xTaskResumeAll>
 801ea1a:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ea1c:	68bb      	ldr	r3, [r7, #8]
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d101      	bne.n	801ea26 <vTaskDelayUntil+0xaa>
		{
			portYIELD_WITHIN_API();
 801ea22:	f001 f903 	bl	801fc2c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ea26:	bf00      	nop
 801ea28:	3718      	adds	r7, #24
 801ea2a:	46bd      	mov	sp, r7
 801ea2c:	bd80      	pop	{r7, pc}
 801ea2e:	bf00      	nop
 801ea30:	20001b2c 	.word	0x20001b2c
 801ea34:	20001b08 	.word	0x20001b08

0801ea38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	b084      	sub	sp, #16
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ea40:	2300      	movs	r3, #0
 801ea42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d00f      	beq.n	801ea6a <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ea4a:	4b0c      	ldr	r3, [pc, #48]	; (801ea7c <vTaskDelay+0x44>)
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d002      	beq.n	801ea58 <vTaskDelay+0x20>
 801ea52:	f001 fa31 	bl	801feb8 <ulSetInterruptMask>
 801ea56:	e7fe      	b.n	801ea56 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 801ea58:	f000 f944 	bl	801ece4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ea5c:	2100      	movs	r1, #0
 801ea5e:	6878      	ldr	r0, [r7, #4]
 801ea60:	f000 fd44 	bl	801f4ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ea64:	f000 f94c 	bl	801ed00 <xTaskResumeAll>
 801ea68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ea6a:	68fb      	ldr	r3, [r7, #12]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d101      	bne.n	801ea74 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 801ea70:	f001 f8dc 	bl	801fc2c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ea74:	bf00      	nop
 801ea76:	3710      	adds	r7, #16
 801ea78:	46bd      	mov	sp, r7
 801ea7a:	bd80      	pop	{r7, pc}
 801ea7c:	20001b2c 	.word	0x20001b2c

0801ea80 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801ea80:	b580      	push	{r7, lr}
 801ea82:	b084      	sub	sp, #16
 801ea84:	af00      	add	r7, sp, #0
 801ea86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801ea88:	f001 f8e2 	bl	801fc50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2b00      	cmp	r3, #0
 801ea90:	d102      	bne.n	801ea98 <vTaskSuspend+0x18>
 801ea92:	4b29      	ldr	r3, [pc, #164]	; (801eb38 <vTaskSuspend+0xb8>)
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	e000      	b.n	801ea9a <vTaskSuspend+0x1a>
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ea9c:	68fb      	ldr	r3, [r7, #12]
 801ea9e:	3304      	adds	r3, #4
 801eaa0:	4618      	mov	r0, r3
 801eaa2:	f7ff f999 	bl	801ddd8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d004      	beq.n	801eab8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801eaae:	68fb      	ldr	r3, [r7, #12]
 801eab0:	3318      	adds	r3, #24
 801eab2:	4618      	mov	r0, r3
 801eab4:	f7ff f990 	bl	801ddd8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801eab8:	68fb      	ldr	r3, [r7, #12]
 801eaba:	3304      	adds	r3, #4
 801eabc:	4619      	mov	r1, r3
 801eabe:	481f      	ldr	r0, [pc, #124]	; (801eb3c <vTaskSuspend+0xbc>)
 801eac0:	f7ff f92d 	bl	801dd1e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801eac4:	68fb      	ldr	r3, [r7, #12]
 801eac6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801eaca:	b2db      	uxtb	r3, r3
 801eacc:	2b01      	cmp	r3, #1
 801eace:	d103      	bne.n	801ead8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ead0:	68fb      	ldr	r3, [r7, #12]
 801ead2:	2200      	movs	r2, #0
 801ead4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801ead8:	f001 f8cc 	bl	801fc74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801eadc:	4b18      	ldr	r3, [pc, #96]	; (801eb40 <vTaskSuspend+0xc0>)
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	d005      	beq.n	801eaf0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801eae4:	f001 f8b4 	bl	801fc50 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801eae8:	f000 fc64 	bl	801f3b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801eaec:	f001 f8c2 	bl	801fc74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801eaf0:	4b11      	ldr	r3, [pc, #68]	; (801eb38 <vTaskSuspend+0xb8>)
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	68fa      	ldr	r2, [r7, #12]
 801eaf6:	429a      	cmp	r2, r3
 801eaf8:	d119      	bne.n	801eb2e <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 801eafa:	4b11      	ldr	r3, [pc, #68]	; (801eb40 <vTaskSuspend+0xc0>)
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d009      	beq.n	801eb16 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801eb02:	4b10      	ldr	r3, [pc, #64]	; (801eb44 <vTaskSuspend+0xc4>)
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d002      	beq.n	801eb10 <vTaskSuspend+0x90>
 801eb0a:	f001 f9d5 	bl	801feb8 <ulSetInterruptMask>
 801eb0e:	e7fe      	b.n	801eb0e <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801eb10:	f001 f88c 	bl	801fc2c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801eb14:	e00b      	b.n	801eb2e <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801eb16:	4b09      	ldr	r3, [pc, #36]	; (801eb3c <vTaskSuspend+0xbc>)
 801eb18:	681a      	ldr	r2, [r3, #0]
 801eb1a:	4b0b      	ldr	r3, [pc, #44]	; (801eb48 <vTaskSuspend+0xc8>)
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	429a      	cmp	r2, r3
 801eb20:	d103      	bne.n	801eb2a <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801eb22:	4b05      	ldr	r3, [pc, #20]	; (801eb38 <vTaskSuspend+0xb8>)
 801eb24:	2200      	movs	r2, #0
 801eb26:	601a      	str	r2, [r3, #0]
	}
 801eb28:	e001      	b.n	801eb2e <vTaskSuspend+0xae>
					vTaskSwitchContext();
 801eb2a:	f000 fa39 	bl	801efa0 <vTaskSwitchContext>
	}
 801eb2e:	bf00      	nop
 801eb30:	3710      	adds	r7, #16
 801eb32:	46bd      	mov	sp, r7
 801eb34:	bd80      	pop	{r7, pc}
 801eb36:	bf00      	nop
 801eb38:	20001630 	.word	0x20001630
 801eb3c:	20001af0 	.word	0x20001af0
 801eb40:	20001b10 	.word	0x20001b10
 801eb44:	20001b2c 	.word	0x20001b2c
 801eb48:	20001b04 	.word	0x20001b04

0801eb4c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801eb4c:	b580      	push	{r7, lr}
 801eb4e:	b084      	sub	sp, #16
 801eb50:	af00      	add	r7, sp, #0
 801eb52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801eb54:	2300      	movs	r3, #0
 801eb56:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d102      	bne.n	801eb68 <prvTaskIsTaskSuspended+0x1c>
 801eb62:	f001 f9a9 	bl	801feb8 <ulSetInterruptMask>
 801eb66:	e7fe      	b.n	801eb66 <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801eb68:	68bb      	ldr	r3, [r7, #8]
 801eb6a:	695b      	ldr	r3, [r3, #20]
 801eb6c:	4a09      	ldr	r2, [pc, #36]	; (801eb94 <prvTaskIsTaskSuspended+0x48>)
 801eb6e:	4293      	cmp	r3, r2
 801eb70:	d10a      	bne.n	801eb88 <prvTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801eb72:	68bb      	ldr	r3, [r7, #8]
 801eb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb76:	4a08      	ldr	r2, [pc, #32]	; (801eb98 <prvTaskIsTaskSuspended+0x4c>)
 801eb78:	4293      	cmp	r3, r2
 801eb7a:	d005      	beq.n	801eb88 <prvTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801eb7c:	68bb      	ldr	r3, [r7, #8]
 801eb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d101      	bne.n	801eb88 <prvTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
 801eb84:	2301      	movs	r3, #1
 801eb86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801eb88:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801eb8a:	4618      	mov	r0, r3
 801eb8c:	3710      	adds	r7, #16
 801eb8e:	46bd      	mov	sp, r7
 801eb90:	bd80      	pop	{r7, pc}
 801eb92:	bf00      	nop
 801eb94:	20001af0 	.word	0x20001af0
 801eb98:	20001ac4 	.word	0x20001ac4

0801eb9c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801eb9c:	b580      	push	{r7, lr}
 801eb9e:	b084      	sub	sp, #16
 801eba0:	af00      	add	r7, sp, #0
 801eba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	2b00      	cmp	r3, #0
 801ebac:	d102      	bne.n	801ebb4 <vTaskResume+0x18>
 801ebae:	f001 f983 	bl	801feb8 <ulSetInterruptMask>
 801ebb2:	e7fe      	b.n	801ebb2 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801ebb4:	4b1d      	ldr	r3, [pc, #116]	; (801ec2c <vTaskResume+0x90>)
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	68fa      	ldr	r2, [r7, #12]
 801ebba:	429a      	cmp	r2, r3
 801ebbc:	d032      	beq.n	801ec24 <vTaskResume+0x88>
 801ebbe:	68fb      	ldr	r3, [r7, #12]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d02f      	beq.n	801ec24 <vTaskResume+0x88>
		{
			taskENTER_CRITICAL();
 801ebc4:	f001 f844 	bl	801fc50 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801ebc8:	68f8      	ldr	r0, [r7, #12]
 801ebca:	f7ff ffbf 	bl	801eb4c <prvTaskIsTaskSuspended>
 801ebce:	4603      	mov	r3, r0
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d025      	beq.n	801ec20 <vTaskResume+0x84>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801ebd4:	68fb      	ldr	r3, [r7, #12]
 801ebd6:	3304      	adds	r3, #4
 801ebd8:	4618      	mov	r0, r3
 801ebda:	f7ff f8fd 	bl	801ddd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ebe2:	4b13      	ldr	r3, [pc, #76]	; (801ec30 <vTaskResume+0x94>)
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	429a      	cmp	r2, r3
 801ebe8:	d903      	bls.n	801ebf2 <vTaskResume+0x56>
 801ebea:	68fb      	ldr	r3, [r7, #12]
 801ebec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ebee:	4a10      	ldr	r2, [pc, #64]	; (801ec30 <vTaskResume+0x94>)
 801ebf0:	6013      	str	r3, [r2, #0]
 801ebf2:	68fb      	ldr	r3, [r7, #12]
 801ebf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ebf6:	4613      	mov	r3, r2
 801ebf8:	009b      	lsls	r3, r3, #2
 801ebfa:	4413      	add	r3, r2
 801ebfc:	009b      	lsls	r3, r3, #2
 801ebfe:	4a0d      	ldr	r2, [pc, #52]	; (801ec34 <vTaskResume+0x98>)
 801ec00:	441a      	add	r2, r3
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	3304      	adds	r3, #4
 801ec06:	4619      	mov	r1, r3
 801ec08:	4610      	mov	r0, r2
 801ec0a:	f7ff f888 	bl	801dd1e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ec12:	4b06      	ldr	r3, [pc, #24]	; (801ec2c <vTaskResume+0x90>)
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec18:	429a      	cmp	r2, r3
 801ec1a:	d301      	bcc.n	801ec20 <vTaskResume+0x84>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801ec1c:	f001 f806 	bl	801fc2c <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801ec20:	f001 f828 	bl	801fc74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ec24:	bf00      	nop
 801ec26:	3710      	adds	r7, #16
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	bd80      	pop	{r7, pc}
 801ec2c:	20001630 	.word	0x20001630
 801ec30:	20001b0c 	.word	0x20001b0c
 801ec34:	20001634 	.word	0x20001634

0801ec38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801ec38:	b580      	push	{r7, lr}
 801ec3a:	b088      	sub	sp, #32
 801ec3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801ec3e:	2300      	movs	r3, #0
 801ec40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801ec42:	2300      	movs	r3, #0
 801ec44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801ec46:	463a      	mov	r2, r7
 801ec48:	1d39      	adds	r1, r7, #4
 801ec4a:	f107 0308 	add.w	r3, r7, #8
 801ec4e:	4618      	mov	r0, r3
 801ec50:	f7ff f804 	bl	801dc5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ec54:	6839      	ldr	r1, [r7, #0]
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	68ba      	ldr	r2, [r7, #8]
 801ec5a:	9202      	str	r2, [sp, #8]
 801ec5c:	9301      	str	r3, [sp, #4]
 801ec5e:	2300      	movs	r3, #0
 801ec60:	9300      	str	r3, [sp, #0]
 801ec62:	2300      	movs	r3, #0
 801ec64:	460a      	mov	r2, r1
 801ec66:	4919      	ldr	r1, [pc, #100]	; (801eccc <vTaskStartScheduler+0x94>)
 801ec68:	4819      	ldr	r0, [pc, #100]	; (801ecd0 <vTaskStartScheduler+0x98>)
 801ec6a:	f7ff fd0b 	bl	801e684 <xTaskCreateStatic>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	4a18      	ldr	r2, [pc, #96]	; (801ecd4 <vTaskStartScheduler+0x9c>)
 801ec72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ec74:	4b17      	ldr	r3, [pc, #92]	; (801ecd4 <vTaskStartScheduler+0x9c>)
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d002      	beq.n	801ec82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ec7c:	2301      	movs	r3, #1
 801ec7e:	60fb      	str	r3, [r7, #12]
 801ec80:	e001      	b.n	801ec86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801ec82:	2300      	movs	r3, #0
 801ec84:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	2b01      	cmp	r3, #1
 801ec8a:	d102      	bne.n	801ec92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801ec8c:	f000 fc82 	bl	801f594 <xTimerCreateTimerTask>
 801ec90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ec92:	68fb      	ldr	r3, [r7, #12]
 801ec94:	2b01      	cmp	r3, #1
 801ec96:	d10e      	bne.n	801ecb6 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801ec98:	f001 f90e 	bl	801feb8 <ulSetInterruptMask>
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801ec9c:	4b0e      	ldr	r3, [pc, #56]	; (801ecd8 <vTaskStartScheduler+0xa0>)
 801ec9e:	f04f 32ff 	mov.w	r2, #4294967295
 801eca2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801eca4:	4b0d      	ldr	r3, [pc, #52]	; (801ecdc <vTaskStartScheduler+0xa4>)
 801eca6:	2201      	movs	r2, #1
 801eca8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ecaa:	4b0d      	ldr	r3, [pc, #52]	; (801ece0 <vTaskStartScheduler+0xa8>)
 801ecac:	2200      	movs	r2, #0
 801ecae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ecb0:	f001 f8b4 	bl	801fe1c <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ecb4:	e006      	b.n	801ecc4 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ecb6:	68fb      	ldr	r3, [r7, #12]
 801ecb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ecbc:	d102      	bne.n	801ecc4 <vTaskStartScheduler+0x8c>
 801ecbe:	f001 f8fb 	bl	801feb8 <ulSetInterruptMask>
 801ecc2:	e7fe      	b.n	801ecc2 <vTaskStartScheduler+0x8a>
}
 801ecc4:	bf00      	nop
 801ecc6:	3710      	adds	r7, #16
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd80      	pop	{r7, pc}
 801eccc:	08023dc4 	.word	0x08023dc4
 801ecd0:	0801f269 	.word	0x0801f269
 801ecd4:	20001b28 	.word	0x20001b28
 801ecd8:	20001b24 	.word	0x20001b24
 801ecdc:	20001b10 	.word	0x20001b10
 801ece0:	20001b08 	.word	0x20001b08

0801ece4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801ece4:	b480      	push	{r7}
 801ece6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801ece8:	4b04      	ldr	r3, [pc, #16]	; (801ecfc <vTaskSuspendAll+0x18>)
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	3301      	adds	r3, #1
 801ecee:	4a03      	ldr	r2, [pc, #12]	; (801ecfc <vTaskSuspendAll+0x18>)
 801ecf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801ecf2:	bf00      	nop
 801ecf4:	46bd      	mov	sp, r7
 801ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecfa:	4770      	bx	lr
 801ecfc:	20001b2c 	.word	0x20001b2c

0801ed00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801ed00:	b580      	push	{r7, lr}
 801ed02:	b084      	sub	sp, #16
 801ed04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801ed06:	2300      	movs	r3, #0
 801ed08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801ed0a:	2300      	movs	r3, #0
 801ed0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801ed0e:	4b3b      	ldr	r3, [pc, #236]	; (801edfc <xTaskResumeAll+0xfc>)
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d102      	bne.n	801ed1c <xTaskResumeAll+0x1c>
 801ed16:	f001 f8cf 	bl	801feb8 <ulSetInterruptMask>
 801ed1a:	e7fe      	b.n	801ed1a <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ed1c:	f000 ff98 	bl	801fc50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801ed20:	4b36      	ldr	r3, [pc, #216]	; (801edfc <xTaskResumeAll+0xfc>)
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	3b01      	subs	r3, #1
 801ed26:	4a35      	ldr	r2, [pc, #212]	; (801edfc <xTaskResumeAll+0xfc>)
 801ed28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ed2a:	4b34      	ldr	r3, [pc, #208]	; (801edfc <xTaskResumeAll+0xfc>)
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d15c      	bne.n	801edec <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801ed32:	4b33      	ldr	r3, [pc, #204]	; (801ee00 <xTaskResumeAll+0x100>)
 801ed34:	681b      	ldr	r3, [r3, #0]
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d058      	beq.n	801edec <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ed3a:	e02f      	b.n	801ed9c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ed3c:	4b31      	ldr	r3, [pc, #196]	; (801ee04 <xTaskResumeAll+0x104>)
 801ed3e:	68db      	ldr	r3, [r3, #12]
 801ed40:	68db      	ldr	r3, [r3, #12]
 801ed42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	3318      	adds	r3, #24
 801ed48:	4618      	mov	r0, r3
 801ed4a:	f7ff f845 	bl	801ddd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ed4e:	68fb      	ldr	r3, [r7, #12]
 801ed50:	3304      	adds	r3, #4
 801ed52:	4618      	mov	r0, r3
 801ed54:	f7ff f840 	bl	801ddd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ed5c:	4b2a      	ldr	r3, [pc, #168]	; (801ee08 <xTaskResumeAll+0x108>)
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	429a      	cmp	r2, r3
 801ed62:	d903      	bls.n	801ed6c <xTaskResumeAll+0x6c>
 801ed64:	68fb      	ldr	r3, [r7, #12]
 801ed66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed68:	4a27      	ldr	r2, [pc, #156]	; (801ee08 <xTaskResumeAll+0x108>)
 801ed6a:	6013      	str	r3, [r2, #0]
 801ed6c:	68fb      	ldr	r3, [r7, #12]
 801ed6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ed70:	4613      	mov	r3, r2
 801ed72:	009b      	lsls	r3, r3, #2
 801ed74:	4413      	add	r3, r2
 801ed76:	009b      	lsls	r3, r3, #2
 801ed78:	4a24      	ldr	r2, [pc, #144]	; (801ee0c <xTaskResumeAll+0x10c>)
 801ed7a:	441a      	add	r2, r3
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	3304      	adds	r3, #4
 801ed80:	4619      	mov	r1, r3
 801ed82:	4610      	mov	r0, r2
 801ed84:	f7fe ffcb 	bl	801dd1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ed8c:	4b20      	ldr	r3, [pc, #128]	; (801ee10 <xTaskResumeAll+0x110>)
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed92:	429a      	cmp	r2, r3
 801ed94:	d302      	bcc.n	801ed9c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 801ed96:	4b1f      	ldr	r3, [pc, #124]	; (801ee14 <xTaskResumeAll+0x114>)
 801ed98:	2201      	movs	r2, #1
 801ed9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ed9c:	4b19      	ldr	r3, [pc, #100]	; (801ee04 <xTaskResumeAll+0x104>)
 801ed9e:	681b      	ldr	r3, [r3, #0]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d1cb      	bne.n	801ed3c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d001      	beq.n	801edae <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801edaa:	f000 fb03 	bl	801f3b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801edae:	4b1a      	ldr	r3, [pc, #104]	; (801ee18 <xTaskResumeAll+0x118>)
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d010      	beq.n	801eddc <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801edba:	f000 f83f 	bl	801ee3c <xTaskIncrementTick>
 801edbe:	4603      	mov	r3, r0
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d002      	beq.n	801edca <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 801edc4:	4b13      	ldr	r3, [pc, #76]	; (801ee14 <xTaskResumeAll+0x114>)
 801edc6:	2201      	movs	r2, #1
 801edc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	3b01      	subs	r3, #1
 801edce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d1f1      	bne.n	801edba <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 801edd6:	4b10      	ldr	r3, [pc, #64]	; (801ee18 <xTaskResumeAll+0x118>)
 801edd8:	2200      	movs	r2, #0
 801edda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801eddc:	4b0d      	ldr	r3, [pc, #52]	; (801ee14 <xTaskResumeAll+0x114>)
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d003      	beq.n	801edec <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801ede4:	2301      	movs	r3, #1
 801ede6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801ede8:	f000 ff20 	bl	801fc2c <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801edec:	f000 ff42 	bl	801fc74 <vPortExitCritical>

	return xAlreadyYielded;
 801edf0:	68bb      	ldr	r3, [r7, #8]
}
 801edf2:	4618      	mov	r0, r3
 801edf4:	3710      	adds	r7, #16
 801edf6:	46bd      	mov	sp, r7
 801edf8:	bd80      	pop	{r7, pc}
 801edfa:	bf00      	nop
 801edfc:	20001b2c 	.word	0x20001b2c
 801ee00:	20001b04 	.word	0x20001b04
 801ee04:	20001ac4 	.word	0x20001ac4
 801ee08:	20001b0c 	.word	0x20001b0c
 801ee0c:	20001634 	.word	0x20001634
 801ee10:	20001630 	.word	0x20001630
 801ee14:	20001b18 	.word	0x20001b18
 801ee18:	20001b14 	.word	0x20001b14

0801ee1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801ee1c:	b480      	push	{r7}
 801ee1e:	b083      	sub	sp, #12
 801ee20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801ee22:	4b05      	ldr	r3, [pc, #20]	; (801ee38 <xTaskGetTickCount+0x1c>)
 801ee24:	681b      	ldr	r3, [r3, #0]
 801ee26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801ee28:	687b      	ldr	r3, [r7, #4]
}
 801ee2a:	4618      	mov	r0, r3
 801ee2c:	370c      	adds	r7, #12
 801ee2e:	46bd      	mov	sp, r7
 801ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee34:	4770      	bx	lr
 801ee36:	bf00      	nop
 801ee38:	20001b08 	.word	0x20001b08

0801ee3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801ee3c:	b580      	push	{r7, lr}
 801ee3e:	b086      	sub	sp, #24
 801ee40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801ee42:	2300      	movs	r3, #0
 801ee44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ee46:	4b4b      	ldr	r3, [pc, #300]	; (801ef74 <xTaskIncrementTick+0x138>)
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	f040 8087 	bne.w	801ef5e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801ee50:	4b49      	ldr	r3, [pc, #292]	; (801ef78 <xTaskIncrementTick+0x13c>)
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	3301      	adds	r3, #1
 801ee56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801ee58:	4a47      	ldr	r2, [pc, #284]	; (801ef78 <xTaskIncrementTick+0x13c>)
 801ee5a:	693b      	ldr	r3, [r7, #16]
 801ee5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801ee5e:	693b      	ldr	r3, [r7, #16]
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d118      	bne.n	801ee96 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 801ee64:	4b45      	ldr	r3, [pc, #276]	; (801ef7c <xTaskIncrementTick+0x140>)
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d002      	beq.n	801ee74 <xTaskIncrementTick+0x38>
 801ee6e:	f001 f823 	bl	801feb8 <ulSetInterruptMask>
 801ee72:	e7fe      	b.n	801ee72 <xTaskIncrementTick+0x36>
 801ee74:	4b41      	ldr	r3, [pc, #260]	; (801ef7c <xTaskIncrementTick+0x140>)
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	60fb      	str	r3, [r7, #12]
 801ee7a:	4b41      	ldr	r3, [pc, #260]	; (801ef80 <xTaskIncrementTick+0x144>)
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	4a3f      	ldr	r2, [pc, #252]	; (801ef7c <xTaskIncrementTick+0x140>)
 801ee80:	6013      	str	r3, [r2, #0]
 801ee82:	4a3f      	ldr	r2, [pc, #252]	; (801ef80 <xTaskIncrementTick+0x144>)
 801ee84:	68fb      	ldr	r3, [r7, #12]
 801ee86:	6013      	str	r3, [r2, #0]
 801ee88:	4b3e      	ldr	r3, [pc, #248]	; (801ef84 <xTaskIncrementTick+0x148>)
 801ee8a:	681b      	ldr	r3, [r3, #0]
 801ee8c:	3301      	adds	r3, #1
 801ee8e:	4a3d      	ldr	r2, [pc, #244]	; (801ef84 <xTaskIncrementTick+0x148>)
 801ee90:	6013      	str	r3, [r2, #0]
 801ee92:	f000 fa8f 	bl	801f3b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801ee96:	4b3c      	ldr	r3, [pc, #240]	; (801ef88 <xTaskIncrementTick+0x14c>)
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	693a      	ldr	r2, [r7, #16]
 801ee9c:	429a      	cmp	r2, r3
 801ee9e:	d349      	bcc.n	801ef34 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801eea0:	4b36      	ldr	r3, [pc, #216]	; (801ef7c <xTaskIncrementTick+0x140>)
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	d104      	bne.n	801eeb4 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801eeaa:	4b37      	ldr	r3, [pc, #220]	; (801ef88 <xTaskIncrementTick+0x14c>)
 801eeac:	f04f 32ff 	mov.w	r2, #4294967295
 801eeb0:	601a      	str	r2, [r3, #0]
					break;
 801eeb2:	e03f      	b.n	801ef34 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801eeb4:	4b31      	ldr	r3, [pc, #196]	; (801ef7c <xTaskIncrementTick+0x140>)
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	68db      	ldr	r3, [r3, #12]
 801eeba:	68db      	ldr	r3, [r3, #12]
 801eebc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801eebe:	68bb      	ldr	r3, [r7, #8]
 801eec0:	685b      	ldr	r3, [r3, #4]
 801eec2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801eec4:	693a      	ldr	r2, [r7, #16]
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	429a      	cmp	r2, r3
 801eeca:	d203      	bcs.n	801eed4 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801eecc:	4a2e      	ldr	r2, [pc, #184]	; (801ef88 <xTaskIncrementTick+0x14c>)
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801eed2:	e02f      	b.n	801ef34 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801eed4:	68bb      	ldr	r3, [r7, #8]
 801eed6:	3304      	adds	r3, #4
 801eed8:	4618      	mov	r0, r3
 801eeda:	f7fe ff7d 	bl	801ddd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801eede:	68bb      	ldr	r3, [r7, #8]
 801eee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d004      	beq.n	801eef0 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801eee6:	68bb      	ldr	r3, [r7, #8]
 801eee8:	3318      	adds	r3, #24
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7fe ff74 	bl	801ddd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801eef0:	68bb      	ldr	r3, [r7, #8]
 801eef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eef4:	4b25      	ldr	r3, [pc, #148]	; (801ef8c <xTaskIncrementTick+0x150>)
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	429a      	cmp	r2, r3
 801eefa:	d903      	bls.n	801ef04 <xTaskIncrementTick+0xc8>
 801eefc:	68bb      	ldr	r3, [r7, #8]
 801eefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef00:	4a22      	ldr	r2, [pc, #136]	; (801ef8c <xTaskIncrementTick+0x150>)
 801ef02:	6013      	str	r3, [r2, #0]
 801ef04:	68bb      	ldr	r3, [r7, #8]
 801ef06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ef08:	4613      	mov	r3, r2
 801ef0a:	009b      	lsls	r3, r3, #2
 801ef0c:	4413      	add	r3, r2
 801ef0e:	009b      	lsls	r3, r3, #2
 801ef10:	4a1f      	ldr	r2, [pc, #124]	; (801ef90 <xTaskIncrementTick+0x154>)
 801ef12:	441a      	add	r2, r3
 801ef14:	68bb      	ldr	r3, [r7, #8]
 801ef16:	3304      	adds	r3, #4
 801ef18:	4619      	mov	r1, r3
 801ef1a:	4610      	mov	r0, r2
 801ef1c:	f7fe feff 	bl	801dd1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ef20:	68bb      	ldr	r3, [r7, #8]
 801ef22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ef24:	4b1b      	ldr	r3, [pc, #108]	; (801ef94 <xTaskIncrementTick+0x158>)
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef2a:	429a      	cmp	r2, r3
 801ef2c:	d3b8      	bcc.n	801eea0 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 801ef2e:	2301      	movs	r3, #1
 801ef30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ef32:	e7b5      	b.n	801eea0 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801ef34:	4b17      	ldr	r3, [pc, #92]	; (801ef94 <xTaskIncrementTick+0x158>)
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ef3a:	4915      	ldr	r1, [pc, #84]	; (801ef90 <xTaskIncrementTick+0x154>)
 801ef3c:	4613      	mov	r3, r2
 801ef3e:	009b      	lsls	r3, r3, #2
 801ef40:	4413      	add	r3, r2
 801ef42:	009b      	lsls	r3, r3, #2
 801ef44:	440b      	add	r3, r1
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	2b01      	cmp	r3, #1
 801ef4a:	d901      	bls.n	801ef50 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 801ef4c:	2301      	movs	r3, #1
 801ef4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801ef50:	4b11      	ldr	r3, [pc, #68]	; (801ef98 <xTaskIncrementTick+0x15c>)
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d007      	beq.n	801ef68 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801ef58:	2301      	movs	r3, #1
 801ef5a:	617b      	str	r3, [r7, #20]
 801ef5c:	e004      	b.n	801ef68 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801ef5e:	4b0f      	ldr	r3, [pc, #60]	; (801ef9c <xTaskIncrementTick+0x160>)
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	3301      	adds	r3, #1
 801ef64:	4a0d      	ldr	r2, [pc, #52]	; (801ef9c <xTaskIncrementTick+0x160>)
 801ef66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801ef68:	697b      	ldr	r3, [r7, #20]
}
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	3718      	adds	r7, #24
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	bd80      	pop	{r7, pc}
 801ef72:	bf00      	nop
 801ef74:	20001b2c 	.word	0x20001b2c
 801ef78:	20001b08 	.word	0x20001b08
 801ef7c:	20001abc 	.word	0x20001abc
 801ef80:	20001ac0 	.word	0x20001ac0
 801ef84:	20001b1c 	.word	0x20001b1c
 801ef88:	20001b24 	.word	0x20001b24
 801ef8c:	20001b0c 	.word	0x20001b0c
 801ef90:	20001634 	.word	0x20001634
 801ef94:	20001630 	.word	0x20001630
 801ef98:	20001b18 	.word	0x20001b18
 801ef9c:	20001b14 	.word	0x20001b14

0801efa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801efa0:	b580      	push	{r7, lr}
 801efa2:	b082      	sub	sp, #8
 801efa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801efa6:	4b23      	ldr	r3, [pc, #140]	; (801f034 <vTaskSwitchContext+0x94>)
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d003      	beq.n	801efb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801efae:	4b22      	ldr	r3, [pc, #136]	; (801f038 <vTaskSwitchContext+0x98>)
 801efb0:	2201      	movs	r2, #1
 801efb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801efb4:	e039      	b.n	801f02a <vTaskSwitchContext+0x8a>
		xYieldPending = pdFALSE;
 801efb6:	4b20      	ldr	r3, [pc, #128]	; (801f038 <vTaskSwitchContext+0x98>)
 801efb8:	2200      	movs	r2, #0
 801efba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801efbc:	4b1f      	ldr	r3, [pc, #124]	; (801f03c <vTaskSwitchContext+0x9c>)
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	607b      	str	r3, [r7, #4]
 801efc2:	e008      	b.n	801efd6 <vTaskSwitchContext+0x36>
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d102      	bne.n	801efd0 <vTaskSwitchContext+0x30>
 801efca:	f000 ff75 	bl	801feb8 <ulSetInterruptMask>
 801efce:	e7fe      	b.n	801efce <vTaskSwitchContext+0x2e>
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	3b01      	subs	r3, #1
 801efd4:	607b      	str	r3, [r7, #4]
 801efd6:	491a      	ldr	r1, [pc, #104]	; (801f040 <vTaskSwitchContext+0xa0>)
 801efd8:	687a      	ldr	r2, [r7, #4]
 801efda:	4613      	mov	r3, r2
 801efdc:	009b      	lsls	r3, r3, #2
 801efde:	4413      	add	r3, r2
 801efe0:	009b      	lsls	r3, r3, #2
 801efe2:	440b      	add	r3, r1
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d0ec      	beq.n	801efc4 <vTaskSwitchContext+0x24>
 801efea:	687a      	ldr	r2, [r7, #4]
 801efec:	4613      	mov	r3, r2
 801efee:	009b      	lsls	r3, r3, #2
 801eff0:	4413      	add	r3, r2
 801eff2:	009b      	lsls	r3, r3, #2
 801eff4:	4a12      	ldr	r2, [pc, #72]	; (801f040 <vTaskSwitchContext+0xa0>)
 801eff6:	4413      	add	r3, r2
 801eff8:	603b      	str	r3, [r7, #0]
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	685b      	ldr	r3, [r3, #4]
 801effe:	685a      	ldr	r2, [r3, #4]
 801f000:	683b      	ldr	r3, [r7, #0]
 801f002:	605a      	str	r2, [r3, #4]
 801f004:	683b      	ldr	r3, [r7, #0]
 801f006:	685a      	ldr	r2, [r3, #4]
 801f008:	683b      	ldr	r3, [r7, #0]
 801f00a:	3308      	adds	r3, #8
 801f00c:	429a      	cmp	r2, r3
 801f00e:	d104      	bne.n	801f01a <vTaskSwitchContext+0x7a>
 801f010:	683b      	ldr	r3, [r7, #0]
 801f012:	685b      	ldr	r3, [r3, #4]
 801f014:	685a      	ldr	r2, [r3, #4]
 801f016:	683b      	ldr	r3, [r7, #0]
 801f018:	605a      	str	r2, [r3, #4]
 801f01a:	683b      	ldr	r3, [r7, #0]
 801f01c:	685b      	ldr	r3, [r3, #4]
 801f01e:	68db      	ldr	r3, [r3, #12]
 801f020:	4a08      	ldr	r2, [pc, #32]	; (801f044 <vTaskSwitchContext+0xa4>)
 801f022:	6013      	str	r3, [r2, #0]
 801f024:	4a05      	ldr	r2, [pc, #20]	; (801f03c <vTaskSwitchContext+0x9c>)
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	6013      	str	r3, [r2, #0]
}
 801f02a:	bf00      	nop
 801f02c:	3708      	adds	r7, #8
 801f02e:	46bd      	mov	sp, r7
 801f030:	bd80      	pop	{r7, pc}
 801f032:	bf00      	nop
 801f034:	20001b2c 	.word	0x20001b2c
 801f038:	20001b18 	.word	0x20001b18
 801f03c:	20001b0c 	.word	0x20001b0c
 801f040:	20001634 	.word	0x20001634
 801f044:	20001630 	.word	0x20001630

0801f048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801f048:	b580      	push	{r7, lr}
 801f04a:	b082      	sub	sp, #8
 801f04c:	af00      	add	r7, sp, #0
 801f04e:	6078      	str	r0, [r7, #4]
 801f050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d102      	bne.n	801f05e <vTaskPlaceOnEventList+0x16>
 801f058:	f000 ff2e 	bl	801feb8 <ulSetInterruptMask>
 801f05c:	e7fe      	b.n	801f05c <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f05e:	4b07      	ldr	r3, [pc, #28]	; (801f07c <vTaskPlaceOnEventList+0x34>)
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	3318      	adds	r3, #24
 801f064:	4619      	mov	r1, r3
 801f066:	6878      	ldr	r0, [r7, #4]
 801f068:	f7fe fe7d 	bl	801dd66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801f06c:	2101      	movs	r1, #1
 801f06e:	6838      	ldr	r0, [r7, #0]
 801f070:	f000 fa3c 	bl	801f4ec <prvAddCurrentTaskToDelayedList>
}
 801f074:	bf00      	nop
 801f076:	3708      	adds	r7, #8
 801f078:	46bd      	mov	sp, r7
 801f07a:	bd80      	pop	{r7, pc}
 801f07c:	20001630 	.word	0x20001630

0801f080 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f080:	b580      	push	{r7, lr}
 801f082:	b084      	sub	sp, #16
 801f084:	af00      	add	r7, sp, #0
 801f086:	60f8      	str	r0, [r7, #12]
 801f088:	60b9      	str	r1, [r7, #8]
 801f08a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	d102      	bne.n	801f098 <vTaskPlaceOnEventListRestricted+0x18>
 801f092:	f000 ff11 	bl	801feb8 <ulSetInterruptMask>
 801f096:	e7fe      	b.n	801f096 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f098:	4b0a      	ldr	r3, [pc, #40]	; (801f0c4 <vTaskPlaceOnEventListRestricted+0x44>)
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	3318      	adds	r3, #24
 801f09e:	4619      	mov	r1, r3
 801f0a0:	68f8      	ldr	r0, [r7, #12]
 801f0a2:	f7fe fe3c 	bl	801dd1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	2b00      	cmp	r3, #0
 801f0aa:	d002      	beq.n	801f0b2 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 801f0ac:	f04f 33ff 	mov.w	r3, #4294967295
 801f0b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801f0b2:	6879      	ldr	r1, [r7, #4]
 801f0b4:	68b8      	ldr	r0, [r7, #8]
 801f0b6:	f000 fa19 	bl	801f4ec <prvAddCurrentTaskToDelayedList>
	}
 801f0ba:	bf00      	nop
 801f0bc:	3710      	adds	r7, #16
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	bd80      	pop	{r7, pc}
 801f0c2:	bf00      	nop
 801f0c4:	20001630 	.word	0x20001630

0801f0c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801f0c8:	b580      	push	{r7, lr}
 801f0ca:	b084      	sub	sp, #16
 801f0cc:	af00      	add	r7, sp, #0
 801f0ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	68db      	ldr	r3, [r3, #12]
 801f0d4:	68db      	ldr	r3, [r3, #12]
 801f0d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801f0d8:	68bb      	ldr	r3, [r7, #8]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d102      	bne.n	801f0e4 <xTaskRemoveFromEventList+0x1c>
 801f0de:	f000 feeb 	bl	801feb8 <ulSetInterruptMask>
 801f0e2:	e7fe      	b.n	801f0e2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801f0e4:	68bb      	ldr	r3, [r7, #8]
 801f0e6:	3318      	adds	r3, #24
 801f0e8:	4618      	mov	r0, r3
 801f0ea:	f7fe fe75 	bl	801ddd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f0ee:	4b1e      	ldr	r3, [pc, #120]	; (801f168 <xTaskRemoveFromEventList+0xa0>)
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	d11d      	bne.n	801f132 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801f0f6:	68bb      	ldr	r3, [r7, #8]
 801f0f8:	3304      	adds	r3, #4
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	f7fe fe6c 	bl	801ddd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801f100:	68bb      	ldr	r3, [r7, #8]
 801f102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f104:	4b19      	ldr	r3, [pc, #100]	; (801f16c <xTaskRemoveFromEventList+0xa4>)
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	429a      	cmp	r2, r3
 801f10a:	d903      	bls.n	801f114 <xTaskRemoveFromEventList+0x4c>
 801f10c:	68bb      	ldr	r3, [r7, #8]
 801f10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f110:	4a16      	ldr	r2, [pc, #88]	; (801f16c <xTaskRemoveFromEventList+0xa4>)
 801f112:	6013      	str	r3, [r2, #0]
 801f114:	68bb      	ldr	r3, [r7, #8]
 801f116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f118:	4613      	mov	r3, r2
 801f11a:	009b      	lsls	r3, r3, #2
 801f11c:	4413      	add	r3, r2
 801f11e:	009b      	lsls	r3, r3, #2
 801f120:	4a13      	ldr	r2, [pc, #76]	; (801f170 <xTaskRemoveFromEventList+0xa8>)
 801f122:	441a      	add	r2, r3
 801f124:	68bb      	ldr	r3, [r7, #8]
 801f126:	3304      	adds	r3, #4
 801f128:	4619      	mov	r1, r3
 801f12a:	4610      	mov	r0, r2
 801f12c:	f7fe fdf7 	bl	801dd1e <vListInsertEnd>
 801f130:	e005      	b.n	801f13e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801f132:	68bb      	ldr	r3, [r7, #8]
 801f134:	3318      	adds	r3, #24
 801f136:	4619      	mov	r1, r3
 801f138:	480e      	ldr	r0, [pc, #56]	; (801f174 <xTaskRemoveFromEventList+0xac>)
 801f13a:	f7fe fdf0 	bl	801dd1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801f13e:	68bb      	ldr	r3, [r7, #8]
 801f140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f142:	4b0d      	ldr	r3, [pc, #52]	; (801f178 <xTaskRemoveFromEventList+0xb0>)
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f148:	429a      	cmp	r2, r3
 801f14a:	d905      	bls.n	801f158 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801f14c:	2301      	movs	r3, #1
 801f14e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801f150:	4b0a      	ldr	r3, [pc, #40]	; (801f17c <xTaskRemoveFromEventList+0xb4>)
 801f152:	2201      	movs	r2, #1
 801f154:	601a      	str	r2, [r3, #0]
 801f156:	e001      	b.n	801f15c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 801f158:	2300      	movs	r3, #0
 801f15a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801f15c:	68fb      	ldr	r3, [r7, #12]
}
 801f15e:	4618      	mov	r0, r3
 801f160:	3710      	adds	r7, #16
 801f162:	46bd      	mov	sp, r7
 801f164:	bd80      	pop	{r7, pc}
 801f166:	bf00      	nop
 801f168:	20001b2c 	.word	0x20001b2c
 801f16c:	20001b0c 	.word	0x20001b0c
 801f170:	20001634 	.word	0x20001634
 801f174:	20001ac4 	.word	0x20001ac4
 801f178:	20001630 	.word	0x20001630
 801f17c:	20001b18 	.word	0x20001b18

0801f180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801f180:	b480      	push	{r7}
 801f182:	b083      	sub	sp, #12
 801f184:	af00      	add	r7, sp, #0
 801f186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801f188:	4b06      	ldr	r3, [pc, #24]	; (801f1a4 <vTaskInternalSetTimeOutState+0x24>)
 801f18a:	681a      	ldr	r2, [r3, #0]
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801f190:	4b05      	ldr	r3, [pc, #20]	; (801f1a8 <vTaskInternalSetTimeOutState+0x28>)
 801f192:	681a      	ldr	r2, [r3, #0]
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	605a      	str	r2, [r3, #4]
}
 801f198:	bf00      	nop
 801f19a:	370c      	adds	r7, #12
 801f19c:	46bd      	mov	sp, r7
 801f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a2:	4770      	bx	lr
 801f1a4:	20001b1c 	.word	0x20001b1c
 801f1a8:	20001b08 	.word	0x20001b08

0801f1ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b086      	sub	sp, #24
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	6078      	str	r0, [r7, #4]
 801f1b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d102      	bne.n	801f1c2 <xTaskCheckForTimeOut+0x16>
 801f1bc:	f000 fe7c 	bl	801feb8 <ulSetInterruptMask>
 801f1c0:	e7fe      	b.n	801f1c0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 801f1c2:	683b      	ldr	r3, [r7, #0]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d102      	bne.n	801f1ce <xTaskCheckForTimeOut+0x22>
 801f1c8:	f000 fe76 	bl	801feb8 <ulSetInterruptMask>
 801f1cc:	e7fe      	b.n	801f1cc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 801f1ce:	f000 fd3f 	bl	801fc50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801f1d2:	4b1d      	ldr	r3, [pc, #116]	; (801f248 <xTaskCheckForTimeOut+0x9c>)
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	685b      	ldr	r3, [r3, #4]
 801f1dc:	693a      	ldr	r2, [r7, #16]
 801f1de:	1ad3      	subs	r3, r2, r3
 801f1e0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801f1e2:	683b      	ldr	r3, [r7, #0]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1ea:	d102      	bne.n	801f1f2 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801f1ec:	2300      	movs	r3, #0
 801f1ee:	617b      	str	r3, [r7, #20]
 801f1f0:	e023      	b.n	801f23a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	681a      	ldr	r2, [r3, #0]
 801f1f6:	4b15      	ldr	r3, [pc, #84]	; (801f24c <xTaskCheckForTimeOut+0xa0>)
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	429a      	cmp	r2, r3
 801f1fc:	d007      	beq.n	801f20e <xTaskCheckForTimeOut+0x62>
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	685b      	ldr	r3, [r3, #4]
 801f202:	693a      	ldr	r2, [r7, #16]
 801f204:	429a      	cmp	r2, r3
 801f206:	d302      	bcc.n	801f20e <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801f208:	2301      	movs	r3, #1
 801f20a:	617b      	str	r3, [r7, #20]
 801f20c:	e015      	b.n	801f23a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801f20e:	683b      	ldr	r3, [r7, #0]
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	68fa      	ldr	r2, [r7, #12]
 801f214:	429a      	cmp	r2, r3
 801f216:	d20b      	bcs.n	801f230 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801f218:	683b      	ldr	r3, [r7, #0]
 801f21a:	681a      	ldr	r2, [r3, #0]
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	1ad2      	subs	r2, r2, r3
 801f220:	683b      	ldr	r3, [r7, #0]
 801f222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801f224:	6878      	ldr	r0, [r7, #4]
 801f226:	f7ff ffab 	bl	801f180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801f22a:	2300      	movs	r3, #0
 801f22c:	617b      	str	r3, [r7, #20]
 801f22e:	e004      	b.n	801f23a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 801f230:	683b      	ldr	r3, [r7, #0]
 801f232:	2200      	movs	r2, #0
 801f234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801f236:	2301      	movs	r3, #1
 801f238:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801f23a:	f000 fd1b 	bl	801fc74 <vPortExitCritical>

	return xReturn;
 801f23e:	697b      	ldr	r3, [r7, #20]
}
 801f240:	4618      	mov	r0, r3
 801f242:	3718      	adds	r7, #24
 801f244:	46bd      	mov	sp, r7
 801f246:	bd80      	pop	{r7, pc}
 801f248:	20001b08 	.word	0x20001b08
 801f24c:	20001b1c 	.word	0x20001b1c

0801f250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801f250:	b480      	push	{r7}
 801f252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801f254:	4b03      	ldr	r3, [pc, #12]	; (801f264 <vTaskMissedYield+0x14>)
 801f256:	2201      	movs	r2, #1
 801f258:	601a      	str	r2, [r3, #0]
}
 801f25a:	bf00      	nop
 801f25c:	46bd      	mov	sp, r7
 801f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f262:	4770      	bx	lr
 801f264:	20001b18 	.word	0x20001b18

0801f268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b082      	sub	sp, #8
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801f270:	f000 f84a 	bl	801f308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801f274:	4b03      	ldr	r3, [pc, #12]	; (801f284 <prvIdleTask+0x1c>)
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	2b01      	cmp	r3, #1
 801f27a:	d9f9      	bls.n	801f270 <prvIdleTask+0x8>
			{
				taskYIELD();
 801f27c:	f000 fcd6 	bl	801fc2c <vPortYield>
		prvCheckTasksWaitingTermination();
 801f280:	e7f6      	b.n	801f270 <prvIdleTask+0x8>
 801f282:	bf00      	nop
 801f284:	20001634 	.word	0x20001634

0801f288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801f288:	b580      	push	{r7, lr}
 801f28a:	b082      	sub	sp, #8
 801f28c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f28e:	2300      	movs	r3, #0
 801f290:	607b      	str	r3, [r7, #4]
 801f292:	e00c      	b.n	801f2ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801f294:	687a      	ldr	r2, [r7, #4]
 801f296:	4613      	mov	r3, r2
 801f298:	009b      	lsls	r3, r3, #2
 801f29a:	4413      	add	r3, r2
 801f29c:	009b      	lsls	r3, r3, #2
 801f29e:	4a12      	ldr	r2, [pc, #72]	; (801f2e8 <prvInitialiseTaskLists+0x60>)
 801f2a0:	4413      	add	r3, r2
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	f7fe fd0e 	bl	801dcc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	3301      	adds	r3, #1
 801f2ac:	607b      	str	r3, [r7, #4]
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2b37      	cmp	r3, #55	; 0x37
 801f2b2:	d9ef      	bls.n	801f294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801f2b4:	480d      	ldr	r0, [pc, #52]	; (801f2ec <prvInitialiseTaskLists+0x64>)
 801f2b6:	f7fe fd05 	bl	801dcc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801f2ba:	480d      	ldr	r0, [pc, #52]	; (801f2f0 <prvInitialiseTaskLists+0x68>)
 801f2bc:	f7fe fd02 	bl	801dcc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801f2c0:	480c      	ldr	r0, [pc, #48]	; (801f2f4 <prvInitialiseTaskLists+0x6c>)
 801f2c2:	f7fe fcff 	bl	801dcc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801f2c6:	480c      	ldr	r0, [pc, #48]	; (801f2f8 <prvInitialiseTaskLists+0x70>)
 801f2c8:	f7fe fcfc 	bl	801dcc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801f2cc:	480b      	ldr	r0, [pc, #44]	; (801f2fc <prvInitialiseTaskLists+0x74>)
 801f2ce:	f7fe fcf9 	bl	801dcc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801f2d2:	4b0b      	ldr	r3, [pc, #44]	; (801f300 <prvInitialiseTaskLists+0x78>)
 801f2d4:	4a05      	ldr	r2, [pc, #20]	; (801f2ec <prvInitialiseTaskLists+0x64>)
 801f2d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801f2d8:	4b0a      	ldr	r3, [pc, #40]	; (801f304 <prvInitialiseTaskLists+0x7c>)
 801f2da:	4a05      	ldr	r2, [pc, #20]	; (801f2f0 <prvInitialiseTaskLists+0x68>)
 801f2dc:	601a      	str	r2, [r3, #0]
}
 801f2de:	bf00      	nop
 801f2e0:	3708      	adds	r7, #8
 801f2e2:	46bd      	mov	sp, r7
 801f2e4:	bd80      	pop	{r7, pc}
 801f2e6:	bf00      	nop
 801f2e8:	20001634 	.word	0x20001634
 801f2ec:	20001a94 	.word	0x20001a94
 801f2f0:	20001aa8 	.word	0x20001aa8
 801f2f4:	20001ac4 	.word	0x20001ac4
 801f2f8:	20001ad8 	.word	0x20001ad8
 801f2fc:	20001af0 	.word	0x20001af0
 801f300:	20001abc 	.word	0x20001abc
 801f304:	20001ac0 	.word	0x20001ac0

0801f308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801f308:	b580      	push	{r7, lr}
 801f30a:	b082      	sub	sp, #8
 801f30c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801f30e:	e019      	b.n	801f344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801f310:	f000 fc9e 	bl	801fc50 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f314:	4b10      	ldr	r3, [pc, #64]	; (801f358 <prvCheckTasksWaitingTermination+0x50>)
 801f316:	68db      	ldr	r3, [r3, #12]
 801f318:	68db      	ldr	r3, [r3, #12]
 801f31a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	3304      	adds	r3, #4
 801f320:	4618      	mov	r0, r3
 801f322:	f7fe fd59 	bl	801ddd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801f326:	4b0d      	ldr	r3, [pc, #52]	; (801f35c <prvCheckTasksWaitingTermination+0x54>)
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	3b01      	subs	r3, #1
 801f32c:	4a0b      	ldr	r2, [pc, #44]	; (801f35c <prvCheckTasksWaitingTermination+0x54>)
 801f32e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801f330:	4b0b      	ldr	r3, [pc, #44]	; (801f360 <prvCheckTasksWaitingTermination+0x58>)
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	3b01      	subs	r3, #1
 801f336:	4a0a      	ldr	r2, [pc, #40]	; (801f360 <prvCheckTasksWaitingTermination+0x58>)
 801f338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801f33a:	f000 fc9b 	bl	801fc74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801f33e:	6878      	ldr	r0, [r7, #4]
 801f340:	f000 f810 	bl	801f364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801f344:	4b06      	ldr	r3, [pc, #24]	; (801f360 <prvCheckTasksWaitingTermination+0x58>)
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	d1e1      	bne.n	801f310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801f34c:	bf00      	nop
 801f34e:	bf00      	nop
 801f350:	3708      	adds	r7, #8
 801f352:	46bd      	mov	sp, r7
 801f354:	bd80      	pop	{r7, pc}
 801f356:	bf00      	nop
 801f358:	20001ad8 	.word	0x20001ad8
 801f35c:	20001b04 	.word	0x20001b04
 801f360:	20001aec 	.word	0x20001aec

0801f364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801f364:	b580      	push	{r7, lr}
 801f366:	b082      	sub	sp, #8
 801f368:	af00      	add	r7, sp, #0
 801f36a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f372:	2b00      	cmp	r3, #0
 801f374:	d108      	bne.n	801f388 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f37a:	4618      	mov	r0, r3
 801f37c:	f000 feb0 	bl	80200e0 <vPortFree>
				vPortFree( pxTCB );
 801f380:	6878      	ldr	r0, [r7, #4]
 801f382:	f000 fead 	bl	80200e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801f386:	e010      	b.n	801f3aa <prvDeleteTCB+0x46>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f38e:	2b01      	cmp	r3, #1
 801f390:	d103      	bne.n	801f39a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801f392:	6878      	ldr	r0, [r7, #4]
 801f394:	f000 fea4 	bl	80200e0 <vPortFree>
	}
 801f398:	e007      	b.n	801f3aa <prvDeleteTCB+0x46>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f3a0:	2b02      	cmp	r3, #2
 801f3a2:	d002      	beq.n	801f3aa <prvDeleteTCB+0x46>
 801f3a4:	f000 fd88 	bl	801feb8 <ulSetInterruptMask>
 801f3a8:	e7fe      	b.n	801f3a8 <prvDeleteTCB+0x44>
	}
 801f3aa:	bf00      	nop
 801f3ac:	3708      	adds	r7, #8
 801f3ae:	46bd      	mov	sp, r7
 801f3b0:	bd80      	pop	{r7, pc}
	...

0801f3b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801f3b4:	b480      	push	{r7}
 801f3b6:	b083      	sub	sp, #12
 801f3b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f3ba:	4b0c      	ldr	r3, [pc, #48]	; (801f3ec <prvResetNextTaskUnblockTime+0x38>)
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d104      	bne.n	801f3ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801f3c4:	4b0a      	ldr	r3, [pc, #40]	; (801f3f0 <prvResetNextTaskUnblockTime+0x3c>)
 801f3c6:	f04f 32ff 	mov.w	r2, #4294967295
 801f3ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801f3cc:	e008      	b.n	801f3e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f3ce:	4b07      	ldr	r3, [pc, #28]	; (801f3ec <prvResetNextTaskUnblockTime+0x38>)
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	68db      	ldr	r3, [r3, #12]
 801f3d4:	68db      	ldr	r3, [r3, #12]
 801f3d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	685b      	ldr	r3, [r3, #4]
 801f3dc:	4a04      	ldr	r2, [pc, #16]	; (801f3f0 <prvResetNextTaskUnblockTime+0x3c>)
 801f3de:	6013      	str	r3, [r2, #0]
}
 801f3e0:	bf00      	nop
 801f3e2:	370c      	adds	r7, #12
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ea:	4770      	bx	lr
 801f3ec:	20001abc 	.word	0x20001abc
 801f3f0:	20001b24 	.word	0x20001b24

0801f3f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801f3f4:	b480      	push	{r7}
 801f3f6:	b083      	sub	sp, #12
 801f3f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801f3fa:	4b0b      	ldr	r3, [pc, #44]	; (801f428 <xTaskGetSchedulerState+0x34>)
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d102      	bne.n	801f408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801f402:	2301      	movs	r3, #1
 801f404:	607b      	str	r3, [r7, #4]
 801f406:	e008      	b.n	801f41a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f408:	4b08      	ldr	r3, [pc, #32]	; (801f42c <xTaskGetSchedulerState+0x38>)
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d102      	bne.n	801f416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801f410:	2302      	movs	r3, #2
 801f412:	607b      	str	r3, [r7, #4]
 801f414:	e001      	b.n	801f41a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801f416:	2300      	movs	r3, #0
 801f418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801f41a:	687b      	ldr	r3, [r7, #4]
	}
 801f41c:	4618      	mov	r0, r3
 801f41e:	370c      	adds	r7, #12
 801f420:	46bd      	mov	sp, r7
 801f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f426:	4770      	bx	lr
 801f428:	20001b10 	.word	0x20001b10
 801f42c:	20001b2c 	.word	0x20001b2c

0801f430 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801f430:	b580      	push	{r7, lr}
 801f432:	b084      	sub	sp, #16
 801f434:	af00      	add	r7, sp, #0
 801f436:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801f43c:	2300      	movs	r3, #0
 801f43e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	2b00      	cmp	r3, #0
 801f444:	d046      	beq.n	801f4d4 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801f446:	4b26      	ldr	r3, [pc, #152]	; (801f4e0 <xTaskPriorityDisinherit+0xb0>)
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	68ba      	ldr	r2, [r7, #8]
 801f44c:	429a      	cmp	r2, r3
 801f44e:	d002      	beq.n	801f456 <xTaskPriorityDisinherit+0x26>
 801f450:	f000 fd32 	bl	801feb8 <ulSetInterruptMask>
 801f454:	e7fe      	b.n	801f454 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 801f456:	68bb      	ldr	r3, [r7, #8]
 801f458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d102      	bne.n	801f464 <xTaskPriorityDisinherit+0x34>
 801f45e:	f000 fd2b 	bl	801feb8 <ulSetInterruptMask>
 801f462:	e7fe      	b.n	801f462 <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 801f464:	68bb      	ldr	r3, [r7, #8]
 801f466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f468:	1e5a      	subs	r2, r3, #1
 801f46a:	68bb      	ldr	r3, [r7, #8]
 801f46c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801f46e:	68bb      	ldr	r3, [r7, #8]
 801f470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f472:	68bb      	ldr	r3, [r7, #8]
 801f474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f476:	429a      	cmp	r2, r3
 801f478:	d02c      	beq.n	801f4d4 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801f47a:	68bb      	ldr	r3, [r7, #8]
 801f47c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d128      	bne.n	801f4d4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f482:	68bb      	ldr	r3, [r7, #8]
 801f484:	3304      	adds	r3, #4
 801f486:	4618      	mov	r0, r3
 801f488:	f7fe fca6 	bl	801ddd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801f48c:	68bb      	ldr	r3, [r7, #8]
 801f48e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f490:	68bb      	ldr	r3, [r7, #8]
 801f492:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f494:	68bb      	ldr	r3, [r7, #8]
 801f496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f498:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801f49c:	68bb      	ldr	r3, [r7, #8]
 801f49e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801f4a0:	68bb      	ldr	r3, [r7, #8]
 801f4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f4a4:	4b0f      	ldr	r3, [pc, #60]	; (801f4e4 <xTaskPriorityDisinherit+0xb4>)
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	429a      	cmp	r2, r3
 801f4aa:	d903      	bls.n	801f4b4 <xTaskPriorityDisinherit+0x84>
 801f4ac:	68bb      	ldr	r3, [r7, #8]
 801f4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4b0:	4a0c      	ldr	r2, [pc, #48]	; (801f4e4 <xTaskPriorityDisinherit+0xb4>)
 801f4b2:	6013      	str	r3, [r2, #0]
 801f4b4:	68bb      	ldr	r3, [r7, #8]
 801f4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f4b8:	4613      	mov	r3, r2
 801f4ba:	009b      	lsls	r3, r3, #2
 801f4bc:	4413      	add	r3, r2
 801f4be:	009b      	lsls	r3, r3, #2
 801f4c0:	4a09      	ldr	r2, [pc, #36]	; (801f4e8 <xTaskPriorityDisinherit+0xb8>)
 801f4c2:	441a      	add	r2, r3
 801f4c4:	68bb      	ldr	r3, [r7, #8]
 801f4c6:	3304      	adds	r3, #4
 801f4c8:	4619      	mov	r1, r3
 801f4ca:	4610      	mov	r0, r2
 801f4cc:	f7fe fc27 	bl	801dd1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801f4d0:	2301      	movs	r3, #1
 801f4d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801f4d4:	68fb      	ldr	r3, [r7, #12]
	}
 801f4d6:	4618      	mov	r0, r3
 801f4d8:	3710      	adds	r7, #16
 801f4da:	46bd      	mov	sp, r7
 801f4dc:	bd80      	pop	{r7, pc}
 801f4de:	bf00      	nop
 801f4e0:	20001630 	.word	0x20001630
 801f4e4:	20001b0c 	.word	0x20001b0c
 801f4e8:	20001634 	.word	0x20001634

0801f4ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801f4ec:	b580      	push	{r7, lr}
 801f4ee:	b084      	sub	sp, #16
 801f4f0:	af00      	add	r7, sp, #0
 801f4f2:	6078      	str	r0, [r7, #4]
 801f4f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801f4f6:	4b21      	ldr	r3, [pc, #132]	; (801f57c <prvAddCurrentTaskToDelayedList+0x90>)
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f4fc:	4b20      	ldr	r3, [pc, #128]	; (801f580 <prvAddCurrentTaskToDelayedList+0x94>)
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	3304      	adds	r3, #4
 801f502:	4618      	mov	r0, r3
 801f504:	f7fe fc68 	bl	801ddd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f50e:	d10a      	bne.n	801f526 <prvAddCurrentTaskToDelayedList+0x3a>
 801f510:	683b      	ldr	r3, [r7, #0]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d007      	beq.n	801f526 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801f516:	4b1a      	ldr	r3, [pc, #104]	; (801f580 <prvAddCurrentTaskToDelayedList+0x94>)
 801f518:	681b      	ldr	r3, [r3, #0]
 801f51a:	3304      	adds	r3, #4
 801f51c:	4619      	mov	r1, r3
 801f51e:	4819      	ldr	r0, [pc, #100]	; (801f584 <prvAddCurrentTaskToDelayedList+0x98>)
 801f520:	f7fe fbfd 	bl	801dd1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801f524:	e026      	b.n	801f574 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801f526:	68fa      	ldr	r2, [r7, #12]
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	4413      	add	r3, r2
 801f52c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801f52e:	4b14      	ldr	r3, [pc, #80]	; (801f580 <prvAddCurrentTaskToDelayedList+0x94>)
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	68ba      	ldr	r2, [r7, #8]
 801f534:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801f536:	68ba      	ldr	r2, [r7, #8]
 801f538:	68fb      	ldr	r3, [r7, #12]
 801f53a:	429a      	cmp	r2, r3
 801f53c:	d209      	bcs.n	801f552 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801f53e:	4b12      	ldr	r3, [pc, #72]	; (801f588 <prvAddCurrentTaskToDelayedList+0x9c>)
 801f540:	681a      	ldr	r2, [r3, #0]
 801f542:	4b0f      	ldr	r3, [pc, #60]	; (801f580 <prvAddCurrentTaskToDelayedList+0x94>)
 801f544:	681b      	ldr	r3, [r3, #0]
 801f546:	3304      	adds	r3, #4
 801f548:	4619      	mov	r1, r3
 801f54a:	4610      	mov	r0, r2
 801f54c:	f7fe fc0b 	bl	801dd66 <vListInsert>
}
 801f550:	e010      	b.n	801f574 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801f552:	4b0e      	ldr	r3, [pc, #56]	; (801f58c <prvAddCurrentTaskToDelayedList+0xa0>)
 801f554:	681a      	ldr	r2, [r3, #0]
 801f556:	4b0a      	ldr	r3, [pc, #40]	; (801f580 <prvAddCurrentTaskToDelayedList+0x94>)
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	3304      	adds	r3, #4
 801f55c:	4619      	mov	r1, r3
 801f55e:	4610      	mov	r0, r2
 801f560:	f7fe fc01 	bl	801dd66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801f564:	4b0a      	ldr	r3, [pc, #40]	; (801f590 <prvAddCurrentTaskToDelayedList+0xa4>)
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	68ba      	ldr	r2, [r7, #8]
 801f56a:	429a      	cmp	r2, r3
 801f56c:	d202      	bcs.n	801f574 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801f56e:	4a08      	ldr	r2, [pc, #32]	; (801f590 <prvAddCurrentTaskToDelayedList+0xa4>)
 801f570:	68bb      	ldr	r3, [r7, #8]
 801f572:	6013      	str	r3, [r2, #0]
}
 801f574:	bf00      	nop
 801f576:	3710      	adds	r7, #16
 801f578:	46bd      	mov	sp, r7
 801f57a:	bd80      	pop	{r7, pc}
 801f57c:	20001b08 	.word	0x20001b08
 801f580:	20001630 	.word	0x20001630
 801f584:	20001af0 	.word	0x20001af0
 801f588:	20001ac0 	.word	0x20001ac0
 801f58c:	20001abc 	.word	0x20001abc
 801f590:	20001b24 	.word	0x20001b24

0801f594 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801f594:	b580      	push	{r7, lr}
 801f596:	b088      	sub	sp, #32
 801f598:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801f59a:	2300      	movs	r3, #0
 801f59c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801f59e:	f000 fac7 	bl	801fb30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801f5a2:	4b18      	ldr	r3, [pc, #96]	; (801f604 <xTimerCreateTimerTask+0x70>)
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	d020      	beq.n	801f5ec <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801f5aa:	2300      	movs	r3, #0
 801f5ac:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801f5ae:	2300      	movs	r3, #0
 801f5b0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801f5b2:	463a      	mov	r2, r7
 801f5b4:	1d39      	adds	r1, r7, #4
 801f5b6:	f107 0308 	add.w	r3, r7, #8
 801f5ba:	4618      	mov	r0, r3
 801f5bc:	f7fe fb68 	bl	801dc90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801f5c0:	6839      	ldr	r1, [r7, #0]
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	68ba      	ldr	r2, [r7, #8]
 801f5c6:	9202      	str	r2, [sp, #8]
 801f5c8:	9301      	str	r3, [sp, #4]
 801f5ca:	2302      	movs	r3, #2
 801f5cc:	9300      	str	r3, [sp, #0]
 801f5ce:	2300      	movs	r3, #0
 801f5d0:	460a      	mov	r2, r1
 801f5d2:	490d      	ldr	r1, [pc, #52]	; (801f608 <xTimerCreateTimerTask+0x74>)
 801f5d4:	480d      	ldr	r0, [pc, #52]	; (801f60c <xTimerCreateTimerTask+0x78>)
 801f5d6:	f7ff f855 	bl	801e684 <xTaskCreateStatic>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	4a0c      	ldr	r2, [pc, #48]	; (801f610 <xTimerCreateTimerTask+0x7c>)
 801f5de:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801f5e0:	4b0b      	ldr	r3, [pc, #44]	; (801f610 <xTimerCreateTimerTask+0x7c>)
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d001      	beq.n	801f5ec <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801f5e8:	2301      	movs	r3, #1
 801f5ea:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d102      	bne.n	801f5f8 <xTimerCreateTimerTask+0x64>
 801f5f2:	f000 fc61 	bl	801feb8 <ulSetInterruptMask>
 801f5f6:	e7fe      	b.n	801f5f6 <xTimerCreateTimerTask+0x62>
	return xReturn;
 801f5f8:	68fb      	ldr	r3, [r7, #12]
}
 801f5fa:	4618      	mov	r0, r3
 801f5fc:	3710      	adds	r7, #16
 801f5fe:	46bd      	mov	sp, r7
 801f600:	bd80      	pop	{r7, pc}
 801f602:	bf00      	nop
 801f604:	20001b60 	.word	0x20001b60
 801f608:	08023dcc 	.word	0x08023dcc
 801f60c:	0801f729 	.word	0x0801f729
 801f610:	20001b64 	.word	0x20001b64

0801f614 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801f614:	b580      	push	{r7, lr}
 801f616:	b08a      	sub	sp, #40	; 0x28
 801f618:	af00      	add	r7, sp, #0
 801f61a:	60f8      	str	r0, [r7, #12]
 801f61c:	60b9      	str	r1, [r7, #8]
 801f61e:	607a      	str	r2, [r7, #4]
 801f620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801f622:	2300      	movs	r3, #0
 801f624:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801f626:	68fb      	ldr	r3, [r7, #12]
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d102      	bne.n	801f632 <xTimerGenericCommand+0x1e>
 801f62c:	f000 fc44 	bl	801feb8 <ulSetInterruptMask>
 801f630:	e7fe      	b.n	801f630 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801f632:	4b1a      	ldr	r3, [pc, #104]	; (801f69c <xTimerGenericCommand+0x88>)
 801f634:	681b      	ldr	r3, [r3, #0]
 801f636:	2b00      	cmp	r3, #0
 801f638:	d02a      	beq.n	801f690 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801f63a:	68bb      	ldr	r3, [r7, #8]
 801f63c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801f646:	68bb      	ldr	r3, [r7, #8]
 801f648:	2b05      	cmp	r3, #5
 801f64a:	dc18      	bgt.n	801f67e <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801f64c:	f7ff fed2 	bl	801f3f4 <xTaskGetSchedulerState>
 801f650:	4603      	mov	r3, r0
 801f652:	2b02      	cmp	r3, #2
 801f654:	d109      	bne.n	801f66a <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801f656:	4b11      	ldr	r3, [pc, #68]	; (801f69c <xTimerGenericCommand+0x88>)
 801f658:	6818      	ldr	r0, [r3, #0]
 801f65a:	f107 0114 	add.w	r1, r7, #20
 801f65e:	2300      	movs	r3, #0
 801f660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f662:	f7fe fcae 	bl	801dfc2 <xQueueGenericSend>
 801f666:	6278      	str	r0, [r7, #36]	; 0x24
 801f668:	e012      	b.n	801f690 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801f66a:	4b0c      	ldr	r3, [pc, #48]	; (801f69c <xTimerGenericCommand+0x88>)
 801f66c:	6818      	ldr	r0, [r3, #0]
 801f66e:	f107 0114 	add.w	r1, r7, #20
 801f672:	2300      	movs	r3, #0
 801f674:	2200      	movs	r2, #0
 801f676:	f7fe fca4 	bl	801dfc2 <xQueueGenericSend>
 801f67a:	6278      	str	r0, [r7, #36]	; 0x24
 801f67c:	e008      	b.n	801f690 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801f67e:	4b07      	ldr	r3, [pc, #28]	; (801f69c <xTimerGenericCommand+0x88>)
 801f680:	6818      	ldr	r0, [r3, #0]
 801f682:	f107 0114 	add.w	r1, r7, #20
 801f686:	2300      	movs	r3, #0
 801f688:	683a      	ldr	r2, [r7, #0]
 801f68a:	f7fe fd63 	bl	801e154 <xQueueGenericSendFromISR>
 801f68e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801f692:	4618      	mov	r0, r3
 801f694:	3728      	adds	r7, #40	; 0x28
 801f696:	46bd      	mov	sp, r7
 801f698:	bd80      	pop	{r7, pc}
 801f69a:	bf00      	nop
 801f69c:	20001b60 	.word	0x20001b60

0801f6a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801f6a0:	b580      	push	{r7, lr}
 801f6a2:	b086      	sub	sp, #24
 801f6a4:	af02      	add	r7, sp, #8
 801f6a6:	6078      	str	r0, [r7, #4]
 801f6a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f6aa:	4b1e      	ldr	r3, [pc, #120]	; (801f724 <prvProcessExpiredTimer+0x84>)
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	68db      	ldr	r3, [r3, #12]
 801f6b0:	68db      	ldr	r3, [r3, #12]
 801f6b2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801f6b4:	68fb      	ldr	r3, [r7, #12]
 801f6b6:	3304      	adds	r3, #4
 801f6b8:	4618      	mov	r0, r3
 801f6ba:	f7fe fb8d 	bl	801ddd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801f6be:	68fb      	ldr	r3, [r7, #12]
 801f6c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f6c4:	f003 0304 	and.w	r3, r3, #4
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d01a      	beq.n	801f702 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801f6cc:	68fb      	ldr	r3, [r7, #12]
 801f6ce:	699a      	ldr	r2, [r3, #24]
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	18d1      	adds	r1, r2, r3
 801f6d4:	687b      	ldr	r3, [r7, #4]
 801f6d6:	683a      	ldr	r2, [r7, #0]
 801f6d8:	68f8      	ldr	r0, [r7, #12]
 801f6da:	f000 f8c1 	bl	801f860 <prvInsertTimerInActiveList>
 801f6de:	4603      	mov	r3, r0
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d017      	beq.n	801f714 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	9300      	str	r3, [sp, #0]
 801f6e8:	2300      	movs	r3, #0
 801f6ea:	687a      	ldr	r2, [r7, #4]
 801f6ec:	2100      	movs	r1, #0
 801f6ee:	68f8      	ldr	r0, [r7, #12]
 801f6f0:	f7ff ff90 	bl	801f614 <xTimerGenericCommand>
 801f6f4:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801f6f6:	68bb      	ldr	r3, [r7, #8]
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	d10b      	bne.n	801f714 <prvProcessExpiredTimer+0x74>
 801f6fc:	f000 fbdc 	bl	801feb8 <ulSetInterruptMask>
 801f700:	e7fe      	b.n	801f700 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801f702:	68fb      	ldr	r3, [r7, #12]
 801f704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f708:	f023 0301 	bic.w	r3, r3, #1
 801f70c:	b2da      	uxtb	r2, r3
 801f70e:	68fb      	ldr	r3, [r7, #12]
 801f710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801f714:	68fb      	ldr	r3, [r7, #12]
 801f716:	6a1b      	ldr	r3, [r3, #32]
 801f718:	68f8      	ldr	r0, [r7, #12]
 801f71a:	4798      	blx	r3
}
 801f71c:	bf00      	nop
 801f71e:	3710      	adds	r7, #16
 801f720:	46bd      	mov	sp, r7
 801f722:	bd80      	pop	{r7, pc}
 801f724:	20001b58 	.word	0x20001b58

0801f728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801f728:	b580      	push	{r7, lr}
 801f72a:	b084      	sub	sp, #16
 801f72c:	af00      	add	r7, sp, #0
 801f72e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801f730:	f107 0308 	add.w	r3, r7, #8
 801f734:	4618      	mov	r0, r3
 801f736:	f000 f84f 	bl	801f7d8 <prvGetNextExpireTime>
 801f73a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801f73c:	68bb      	ldr	r3, [r7, #8]
 801f73e:	4619      	mov	r1, r3
 801f740:	68f8      	ldr	r0, [r7, #12]
 801f742:	f000 f803 	bl	801f74c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801f746:	f000 f8cd 	bl	801f8e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801f74a:	e7f1      	b.n	801f730 <prvTimerTask+0x8>

0801f74c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801f74c:	b580      	push	{r7, lr}
 801f74e:	b084      	sub	sp, #16
 801f750:	af00      	add	r7, sp, #0
 801f752:	6078      	str	r0, [r7, #4]
 801f754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801f756:	f7ff fac5 	bl	801ece4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801f75a:	f107 0308 	add.w	r3, r7, #8
 801f75e:	4618      	mov	r0, r3
 801f760:	f000 f85e 	bl	801f820 <prvSampleTimeNow>
 801f764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801f766:	68bb      	ldr	r3, [r7, #8]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d12a      	bne.n	801f7c2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801f76c:	683b      	ldr	r3, [r7, #0]
 801f76e:	2b00      	cmp	r3, #0
 801f770:	d10a      	bne.n	801f788 <prvProcessTimerOrBlockTask+0x3c>
 801f772:	687a      	ldr	r2, [r7, #4]
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	429a      	cmp	r2, r3
 801f778:	d806      	bhi.n	801f788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801f77a:	f7ff fac1 	bl	801ed00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801f77e:	68f9      	ldr	r1, [r7, #12]
 801f780:	6878      	ldr	r0, [r7, #4]
 801f782:	f7ff ff8d 	bl	801f6a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801f786:	e01e      	b.n	801f7c6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801f788:	683b      	ldr	r3, [r7, #0]
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d008      	beq.n	801f7a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801f78e:	4b10      	ldr	r3, [pc, #64]	; (801f7d0 <prvProcessTimerOrBlockTask+0x84>)
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	2b00      	cmp	r3, #0
 801f796:	d101      	bne.n	801f79c <prvProcessTimerOrBlockTask+0x50>
 801f798:	2301      	movs	r3, #1
 801f79a:	e000      	b.n	801f79e <prvProcessTimerOrBlockTask+0x52>
 801f79c:	2300      	movs	r3, #0
 801f79e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801f7a0:	4b0c      	ldr	r3, [pc, #48]	; (801f7d4 <prvProcessTimerOrBlockTask+0x88>)
 801f7a2:	6818      	ldr	r0, [r3, #0]
 801f7a4:	687a      	ldr	r2, [r7, #4]
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	1ad3      	subs	r3, r2, r3
 801f7aa:	683a      	ldr	r2, [r7, #0]
 801f7ac:	4619      	mov	r1, r3
 801f7ae:	f7fe ff35 	bl	801e61c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801f7b2:	f7ff faa5 	bl	801ed00 <xTaskResumeAll>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d104      	bne.n	801f7c6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 801f7bc:	f000 fa36 	bl	801fc2c <vPortYield>
}
 801f7c0:	e001      	b.n	801f7c6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 801f7c2:	f7ff fa9d 	bl	801ed00 <xTaskResumeAll>
}
 801f7c6:	bf00      	nop
 801f7c8:	3710      	adds	r7, #16
 801f7ca:	46bd      	mov	sp, r7
 801f7cc:	bd80      	pop	{r7, pc}
 801f7ce:	bf00      	nop
 801f7d0:	20001b5c 	.word	0x20001b5c
 801f7d4:	20001b60 	.word	0x20001b60

0801f7d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801f7d8:	b480      	push	{r7}
 801f7da:	b085      	sub	sp, #20
 801f7dc:	af00      	add	r7, sp, #0
 801f7de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801f7e0:	4b0e      	ldr	r3, [pc, #56]	; (801f81c <prvGetNextExpireTime+0x44>)
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d101      	bne.n	801f7ee <prvGetNextExpireTime+0x16>
 801f7ea:	2201      	movs	r2, #1
 801f7ec:	e000      	b.n	801f7f0 <prvGetNextExpireTime+0x18>
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d105      	bne.n	801f808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801f7fc:	4b07      	ldr	r3, [pc, #28]	; (801f81c <prvGetNextExpireTime+0x44>)
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	68db      	ldr	r3, [r3, #12]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	60fb      	str	r3, [r7, #12]
 801f806:	e001      	b.n	801f80c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801f808:	2300      	movs	r3, #0
 801f80a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801f80c:	68fb      	ldr	r3, [r7, #12]
}
 801f80e:	4618      	mov	r0, r3
 801f810:	3714      	adds	r7, #20
 801f812:	46bd      	mov	sp, r7
 801f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f818:	4770      	bx	lr
 801f81a:	bf00      	nop
 801f81c:	20001b58 	.word	0x20001b58

0801f820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801f820:	b580      	push	{r7, lr}
 801f822:	b084      	sub	sp, #16
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801f828:	f7ff faf8 	bl	801ee1c <xTaskGetTickCount>
 801f82c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801f82e:	4b0b      	ldr	r3, [pc, #44]	; (801f85c <prvSampleTimeNow+0x3c>)
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	68fa      	ldr	r2, [r7, #12]
 801f834:	429a      	cmp	r2, r3
 801f836:	d205      	bcs.n	801f844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801f838:	f000 f91e 	bl	801fa78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	2201      	movs	r2, #1
 801f840:	601a      	str	r2, [r3, #0]
 801f842:	e002      	b.n	801f84a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	2200      	movs	r2, #0
 801f848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801f84a:	4a04      	ldr	r2, [pc, #16]	; (801f85c <prvSampleTimeNow+0x3c>)
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801f850:	68fb      	ldr	r3, [r7, #12]
}
 801f852:	4618      	mov	r0, r3
 801f854:	3710      	adds	r7, #16
 801f856:	46bd      	mov	sp, r7
 801f858:	bd80      	pop	{r7, pc}
 801f85a:	bf00      	nop
 801f85c:	20001b68 	.word	0x20001b68

0801f860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801f860:	b580      	push	{r7, lr}
 801f862:	b086      	sub	sp, #24
 801f864:	af00      	add	r7, sp, #0
 801f866:	60f8      	str	r0, [r7, #12]
 801f868:	60b9      	str	r1, [r7, #8]
 801f86a:	607a      	str	r2, [r7, #4]
 801f86c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801f86e:	2300      	movs	r3, #0
 801f870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	68ba      	ldr	r2, [r7, #8]
 801f876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	68fa      	ldr	r2, [r7, #12]
 801f87c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801f87e:	68ba      	ldr	r2, [r7, #8]
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	429a      	cmp	r2, r3
 801f884:	d812      	bhi.n	801f8ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f886:	687a      	ldr	r2, [r7, #4]
 801f888:	683b      	ldr	r3, [r7, #0]
 801f88a:	1ad2      	subs	r2, r2, r3
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	699b      	ldr	r3, [r3, #24]
 801f890:	429a      	cmp	r2, r3
 801f892:	d302      	bcc.n	801f89a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801f894:	2301      	movs	r3, #1
 801f896:	617b      	str	r3, [r7, #20]
 801f898:	e01b      	b.n	801f8d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801f89a:	4b10      	ldr	r3, [pc, #64]	; (801f8dc <prvInsertTimerInActiveList+0x7c>)
 801f89c:	681a      	ldr	r2, [r3, #0]
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	3304      	adds	r3, #4
 801f8a2:	4619      	mov	r1, r3
 801f8a4:	4610      	mov	r0, r2
 801f8a6:	f7fe fa5e 	bl	801dd66 <vListInsert>
 801f8aa:	e012      	b.n	801f8d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801f8ac:	687a      	ldr	r2, [r7, #4]
 801f8ae:	683b      	ldr	r3, [r7, #0]
 801f8b0:	429a      	cmp	r2, r3
 801f8b2:	d206      	bcs.n	801f8c2 <prvInsertTimerInActiveList+0x62>
 801f8b4:	68ba      	ldr	r2, [r7, #8]
 801f8b6:	683b      	ldr	r3, [r7, #0]
 801f8b8:	429a      	cmp	r2, r3
 801f8ba:	d302      	bcc.n	801f8c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801f8bc:	2301      	movs	r3, #1
 801f8be:	617b      	str	r3, [r7, #20]
 801f8c0:	e007      	b.n	801f8d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801f8c2:	4b07      	ldr	r3, [pc, #28]	; (801f8e0 <prvInsertTimerInActiveList+0x80>)
 801f8c4:	681a      	ldr	r2, [r3, #0]
 801f8c6:	68fb      	ldr	r3, [r7, #12]
 801f8c8:	3304      	adds	r3, #4
 801f8ca:	4619      	mov	r1, r3
 801f8cc:	4610      	mov	r0, r2
 801f8ce:	f7fe fa4a 	bl	801dd66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801f8d2:	697b      	ldr	r3, [r7, #20]
}
 801f8d4:	4618      	mov	r0, r3
 801f8d6:	3718      	adds	r7, #24
 801f8d8:	46bd      	mov	sp, r7
 801f8da:	bd80      	pop	{r7, pc}
 801f8dc:	20001b5c 	.word	0x20001b5c
 801f8e0:	20001b58 	.word	0x20001b58

0801f8e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	b08c      	sub	sp, #48	; 0x30
 801f8e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801f8ea:	e0b2      	b.n	801fa52 <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801f8ec:	68bb      	ldr	r3, [r7, #8]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	da11      	bge.n	801f916 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801f8f2:	f107 0308 	add.w	r3, r7, #8
 801f8f6:	3304      	adds	r3, #4
 801f8f8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d102      	bne.n	801f906 <prvProcessReceivedCommands+0x22>
 801f900:	f000 fada 	bl	801feb8 <ulSetInterruptMask>
 801f904:	e7fe      	b.n	801f904 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f90c:	6850      	ldr	r0, [r2, #4]
 801f90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f910:	6892      	ldr	r2, [r2, #8]
 801f912:	4611      	mov	r1, r2
 801f914:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801f916:	68bb      	ldr	r3, [r7, #8]
 801f918:	2b00      	cmp	r3, #0
 801f91a:	f2c0 809a 	blt.w	801fa52 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801f91e:	693b      	ldr	r3, [r7, #16]
 801f920:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801f922:	6a3b      	ldr	r3, [r7, #32]
 801f924:	695b      	ldr	r3, [r3, #20]
 801f926:	2b00      	cmp	r3, #0
 801f928:	d004      	beq.n	801f934 <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801f92a:	6a3b      	ldr	r3, [r7, #32]
 801f92c:	3304      	adds	r3, #4
 801f92e:	4618      	mov	r0, r3
 801f930:	f7fe fa52 	bl	801ddd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801f934:	1d3b      	adds	r3, r7, #4
 801f936:	4618      	mov	r0, r3
 801f938:	f7ff ff72 	bl	801f820 <prvSampleTimeNow>
 801f93c:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801f93e:	68bb      	ldr	r3, [r7, #8]
 801f940:	2b09      	cmp	r3, #9
 801f942:	f200 8085 	bhi.w	801fa50 <prvProcessReceivedCommands+0x16c>
 801f946:	a201      	add	r2, pc, #4	; (adr r2, 801f94c <prvProcessReceivedCommands+0x68>)
 801f948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f94c:	0801f975 	.word	0x0801f975
 801f950:	0801f975 	.word	0x0801f975
 801f954:	0801f975 	.word	0x0801f975
 801f958:	0801f9d9 	.word	0x0801f9d9
 801f95c:	0801f9ed 	.word	0x0801f9ed
 801f960:	0801fa27 	.word	0x0801fa27
 801f964:	0801f975 	.word	0x0801f975
 801f968:	0801f975 	.word	0x0801f975
 801f96c:	0801f9d9 	.word	0x0801f9d9
 801f970:	0801f9ed 	.word	0x0801f9ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801f974:	6a3b      	ldr	r3, [r7, #32]
 801f976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f97a:	f043 0301 	orr.w	r3, r3, #1
 801f97e:	b2da      	uxtb	r2, r3
 801f980:	6a3b      	ldr	r3, [r7, #32]
 801f982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801f986:	68fa      	ldr	r2, [r7, #12]
 801f988:	6a3b      	ldr	r3, [r7, #32]
 801f98a:	699b      	ldr	r3, [r3, #24]
 801f98c:	18d1      	adds	r1, r2, r3
 801f98e:	68fb      	ldr	r3, [r7, #12]
 801f990:	69fa      	ldr	r2, [r7, #28]
 801f992:	6a38      	ldr	r0, [r7, #32]
 801f994:	f7ff ff64 	bl	801f860 <prvInsertTimerInActiveList>
 801f998:	4603      	mov	r3, r0
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d059      	beq.n	801fa52 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801f99e:	6a3b      	ldr	r3, [r7, #32]
 801f9a0:	6a1b      	ldr	r3, [r3, #32]
 801f9a2:	6a38      	ldr	r0, [r7, #32]
 801f9a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801f9a6:	6a3b      	ldr	r3, [r7, #32]
 801f9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f9ac:	f003 0304 	and.w	r3, r3, #4
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d04e      	beq.n	801fa52 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801f9b4:	68fa      	ldr	r2, [r7, #12]
 801f9b6:	6a3b      	ldr	r3, [r7, #32]
 801f9b8:	699b      	ldr	r3, [r3, #24]
 801f9ba:	441a      	add	r2, r3
 801f9bc:	2300      	movs	r3, #0
 801f9be:	9300      	str	r3, [sp, #0]
 801f9c0:	2300      	movs	r3, #0
 801f9c2:	2100      	movs	r1, #0
 801f9c4:	6a38      	ldr	r0, [r7, #32]
 801f9c6:	f7ff fe25 	bl	801f614 <xTimerGenericCommand>
 801f9ca:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801f9cc:	69bb      	ldr	r3, [r7, #24]
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	d13f      	bne.n	801fa52 <prvProcessReceivedCommands+0x16e>
 801f9d2:	f000 fa71 	bl	801feb8 <ulSetInterruptMask>
 801f9d6:	e7fe      	b.n	801f9d6 <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801f9d8:	6a3b      	ldr	r3, [r7, #32]
 801f9da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f9de:	f023 0301 	bic.w	r3, r3, #1
 801f9e2:	b2da      	uxtb	r2, r3
 801f9e4:	6a3b      	ldr	r3, [r7, #32]
 801f9e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801f9ea:	e032      	b.n	801fa52 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801f9ec:	6a3b      	ldr	r3, [r7, #32]
 801f9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801f9f2:	f043 0301 	orr.w	r3, r3, #1
 801f9f6:	b2da      	uxtb	r2, r3
 801f9f8:	6a3b      	ldr	r3, [r7, #32]
 801f9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801f9fe:	68fa      	ldr	r2, [r7, #12]
 801fa00:	6a3b      	ldr	r3, [r7, #32]
 801fa02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801fa04:	6a3b      	ldr	r3, [r7, #32]
 801fa06:	699b      	ldr	r3, [r3, #24]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d102      	bne.n	801fa12 <prvProcessReceivedCommands+0x12e>
 801fa0c:	f000 fa54 	bl	801feb8 <ulSetInterruptMask>
 801fa10:	e7fe      	b.n	801fa10 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801fa12:	6a3b      	ldr	r3, [r7, #32]
 801fa14:	699a      	ldr	r2, [r3, #24]
 801fa16:	69fb      	ldr	r3, [r7, #28]
 801fa18:	18d1      	adds	r1, r2, r3
 801fa1a:	69fb      	ldr	r3, [r7, #28]
 801fa1c:	69fa      	ldr	r2, [r7, #28]
 801fa1e:	6a38      	ldr	r0, [r7, #32]
 801fa20:	f7ff ff1e 	bl	801f860 <prvInsertTimerInActiveList>
					break;
 801fa24:	e015      	b.n	801fa52 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801fa26:	6a3b      	ldr	r3, [r7, #32]
 801fa28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa2c:	f003 0302 	and.w	r3, r3, #2
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d103      	bne.n	801fa3c <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801fa34:	6a38      	ldr	r0, [r7, #32]
 801fa36:	f000 fb53 	bl	80200e0 <vPortFree>
 801fa3a:	e00a      	b.n	801fa52 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801fa3c:	6a3b      	ldr	r3, [r7, #32]
 801fa3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801fa42:	f023 0301 	bic.w	r3, r3, #1
 801fa46:	b2da      	uxtb	r2, r3
 801fa48:	6a3b      	ldr	r3, [r7, #32]
 801fa4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801fa4e:	e000      	b.n	801fa52 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 801fa50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801fa52:	4b08      	ldr	r3, [pc, #32]	; (801fa74 <prvProcessReceivedCommands+0x190>)
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	f107 0108 	add.w	r1, r7, #8
 801fa5a:	2200      	movs	r2, #0
 801fa5c:	4618      	mov	r0, r3
 801fa5e:	f7fe fbea 	bl	801e236 <xQueueReceive>
 801fa62:	4603      	mov	r3, r0
 801fa64:	2b00      	cmp	r3, #0
 801fa66:	f47f af41 	bne.w	801f8ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801fa6a:	bf00      	nop
 801fa6c:	bf00      	nop
 801fa6e:	3728      	adds	r7, #40	; 0x28
 801fa70:	46bd      	mov	sp, r7
 801fa72:	bd80      	pop	{r7, pc}
 801fa74:	20001b60 	.word	0x20001b60

0801fa78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801fa78:	b580      	push	{r7, lr}
 801fa7a:	b088      	sub	sp, #32
 801fa7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801fa7e:	e040      	b.n	801fb02 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801fa80:	4b29      	ldr	r3, [pc, #164]	; (801fb28 <prvSwitchTimerLists+0xb0>)
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	68db      	ldr	r3, [r3, #12]
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801fa8a:	4b27      	ldr	r3, [pc, #156]	; (801fb28 <prvSwitchTimerLists+0xb0>)
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	68db      	ldr	r3, [r3, #12]
 801fa90:	68db      	ldr	r3, [r3, #12]
 801fa92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801fa94:	68fb      	ldr	r3, [r7, #12]
 801fa96:	3304      	adds	r3, #4
 801fa98:	4618      	mov	r0, r3
 801fa9a:	f7fe f99d 	bl	801ddd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801fa9e:	68fb      	ldr	r3, [r7, #12]
 801faa0:	6a1b      	ldr	r3, [r3, #32]
 801faa2:	68f8      	ldr	r0, [r7, #12]
 801faa4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801faa6:	68fb      	ldr	r3, [r7, #12]
 801faa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801faac:	f003 0304 	and.w	r3, r3, #4
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d026      	beq.n	801fb02 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801fab4:	68fb      	ldr	r3, [r7, #12]
 801fab6:	699b      	ldr	r3, [r3, #24]
 801fab8:	693a      	ldr	r2, [r7, #16]
 801faba:	4413      	add	r3, r2
 801fabc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801fabe:	68ba      	ldr	r2, [r7, #8]
 801fac0:	693b      	ldr	r3, [r7, #16]
 801fac2:	429a      	cmp	r2, r3
 801fac4:	d90e      	bls.n	801fae4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801fac6:	68fb      	ldr	r3, [r7, #12]
 801fac8:	68ba      	ldr	r2, [r7, #8]
 801faca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801facc:	68fb      	ldr	r3, [r7, #12]
 801face:	68fa      	ldr	r2, [r7, #12]
 801fad0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801fad2:	4b15      	ldr	r3, [pc, #84]	; (801fb28 <prvSwitchTimerLists+0xb0>)
 801fad4:	681a      	ldr	r2, [r3, #0]
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	3304      	adds	r3, #4
 801fada:	4619      	mov	r1, r3
 801fadc:	4610      	mov	r0, r2
 801fade:	f7fe f942 	bl	801dd66 <vListInsert>
 801fae2:	e00e      	b.n	801fb02 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801fae4:	2300      	movs	r3, #0
 801fae6:	9300      	str	r3, [sp, #0]
 801fae8:	2300      	movs	r3, #0
 801faea:	693a      	ldr	r2, [r7, #16]
 801faec:	2100      	movs	r1, #0
 801faee:	68f8      	ldr	r0, [r7, #12]
 801faf0:	f7ff fd90 	bl	801f614 <xTimerGenericCommand>
 801faf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d102      	bne.n	801fb02 <prvSwitchTimerLists+0x8a>
 801fafc:	f000 f9dc 	bl	801feb8 <ulSetInterruptMask>
 801fb00:	e7fe      	b.n	801fb00 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801fb02:	4b09      	ldr	r3, [pc, #36]	; (801fb28 <prvSwitchTimerLists+0xb0>)
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	d1b9      	bne.n	801fa80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801fb0c:	4b06      	ldr	r3, [pc, #24]	; (801fb28 <prvSwitchTimerLists+0xb0>)
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801fb12:	4b06      	ldr	r3, [pc, #24]	; (801fb2c <prvSwitchTimerLists+0xb4>)
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	4a04      	ldr	r2, [pc, #16]	; (801fb28 <prvSwitchTimerLists+0xb0>)
 801fb18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801fb1a:	4a04      	ldr	r2, [pc, #16]	; (801fb2c <prvSwitchTimerLists+0xb4>)
 801fb1c:	697b      	ldr	r3, [r7, #20]
 801fb1e:	6013      	str	r3, [r2, #0]
}
 801fb20:	bf00      	nop
 801fb22:	3718      	adds	r7, #24
 801fb24:	46bd      	mov	sp, r7
 801fb26:	bd80      	pop	{r7, pc}
 801fb28:	20001b58 	.word	0x20001b58
 801fb2c:	20001b5c 	.word	0x20001b5c

0801fb30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801fb30:	b580      	push	{r7, lr}
 801fb32:	b082      	sub	sp, #8
 801fb34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801fb36:	f000 f88b 	bl	801fc50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801fb3a:	4b15      	ldr	r3, [pc, #84]	; (801fb90 <prvCheckForValidListAndQueue+0x60>)
 801fb3c:	681b      	ldr	r3, [r3, #0]
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d120      	bne.n	801fb84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801fb42:	4814      	ldr	r0, [pc, #80]	; (801fb94 <prvCheckForValidListAndQueue+0x64>)
 801fb44:	f7fe f8be 	bl	801dcc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801fb48:	4813      	ldr	r0, [pc, #76]	; (801fb98 <prvCheckForValidListAndQueue+0x68>)
 801fb4a:	f7fe f8bb 	bl	801dcc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801fb4e:	4b13      	ldr	r3, [pc, #76]	; (801fb9c <prvCheckForValidListAndQueue+0x6c>)
 801fb50:	4a10      	ldr	r2, [pc, #64]	; (801fb94 <prvCheckForValidListAndQueue+0x64>)
 801fb52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801fb54:	4b12      	ldr	r3, [pc, #72]	; (801fba0 <prvCheckForValidListAndQueue+0x70>)
 801fb56:	4a10      	ldr	r2, [pc, #64]	; (801fb98 <prvCheckForValidListAndQueue+0x68>)
 801fb58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801fb5a:	2300      	movs	r3, #0
 801fb5c:	9300      	str	r3, [sp, #0]
 801fb5e:	4b11      	ldr	r3, [pc, #68]	; (801fba4 <prvCheckForValidListAndQueue+0x74>)
 801fb60:	4a11      	ldr	r2, [pc, #68]	; (801fba8 <prvCheckForValidListAndQueue+0x78>)
 801fb62:	2110      	movs	r1, #16
 801fb64:	200a      	movs	r0, #10
 801fb66:	f7fe f9b9 	bl	801dedc <xQueueGenericCreateStatic>
 801fb6a:	4603      	mov	r3, r0
 801fb6c:	4a08      	ldr	r2, [pc, #32]	; (801fb90 <prvCheckForValidListAndQueue+0x60>)
 801fb6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801fb70:	4b07      	ldr	r3, [pc, #28]	; (801fb90 <prvCheckForValidListAndQueue+0x60>)
 801fb72:	681b      	ldr	r3, [r3, #0]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d005      	beq.n	801fb84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801fb78:	4b05      	ldr	r3, [pc, #20]	; (801fb90 <prvCheckForValidListAndQueue+0x60>)
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	490b      	ldr	r1, [pc, #44]	; (801fbac <prvCheckForValidListAndQueue+0x7c>)
 801fb7e:	4618      	mov	r0, r3
 801fb80:	f7fe fd22 	bl	801e5c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801fb84:	f000 f876 	bl	801fc74 <vPortExitCritical>
}
 801fb88:	bf00      	nop
 801fb8a:	46bd      	mov	sp, r7
 801fb8c:	bd80      	pop	{r7, pc}
 801fb8e:	bf00      	nop
 801fb90:	20001b60 	.word	0x20001b60
 801fb94:	20001b30 	.word	0x20001b30
 801fb98:	20001b44 	.word	0x20001b44
 801fb9c:	20001b58 	.word	0x20001b58
 801fba0:	20001b5c 	.word	0x20001b5c
 801fba4:	20001c0c 	.word	0x20001c0c
 801fba8:	20001b6c 	.word	0x20001b6c
 801fbac:	08023dd4 	.word	0x08023dd4

0801fbb0 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801fbb0:	b480      	push	{r7}
 801fbb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801fbb4:	4b0b      	ldr	r3, [pc, #44]	; (801fbe4 <vPortSetupTimerInterrupt+0x34>)
 801fbb6:	2200      	movs	r2, #0
 801fbb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801fbba:	4b0b      	ldr	r3, [pc, #44]	; (801fbe8 <vPortSetupTimerInterrupt+0x38>)
 801fbbc:	2200      	movs	r2, #0
 801fbbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801fbc0:	4b0a      	ldr	r3, [pc, #40]	; (801fbec <vPortSetupTimerInterrupt+0x3c>)
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	4a0a      	ldr	r2, [pc, #40]	; (801fbf0 <vPortSetupTimerInterrupt+0x40>)
 801fbc6:	fba2 2303 	umull	r2, r3, r2, r3
 801fbca:	099b      	lsrs	r3, r3, #6
 801fbcc:	4a09      	ldr	r2, [pc, #36]	; (801fbf4 <vPortSetupTimerInterrupt+0x44>)
 801fbce:	3b01      	subs	r3, #1
 801fbd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801fbd2:	4b04      	ldr	r3, [pc, #16]	; (801fbe4 <vPortSetupTimerInterrupt+0x34>)
 801fbd4:	2207      	movs	r2, #7
 801fbd6:	601a      	str	r2, [r3, #0]
}
 801fbd8:	bf00      	nop
 801fbda:	46bd      	mov	sp, r7
 801fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbe0:	4770      	bx	lr
 801fbe2:	bf00      	nop
 801fbe4:	e000e010 	.word	0xe000e010
 801fbe8:	e000e018 	.word	0xe000e018
 801fbec:	20000090 	.word	0x20000090
 801fbf0:	10624dd3 	.word	0x10624dd3
 801fbf4:	e000e014 	.word	0xe000e014

0801fbf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	b082      	sub	sp, #8
 801fbfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801fbfe:	2300      	movs	r3, #0
 801fc00:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801fc02:	4b09      	ldr	r3, [pc, #36]	; (801fc28 <prvTaskExitError+0x30>)
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fc0a:	d002      	beq.n	801fc12 <prvTaskExitError+0x1a>
 801fc0c:	f000 f954 	bl	801feb8 <ulSetInterruptMask>
 801fc10:	e7fe      	b.n	801fc10 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801fc12:	f000 f951 	bl	801feb8 <ulSetInterruptMask>

	while( ulDummy == 0 )
 801fc16:	bf00      	nop
 801fc18:	687b      	ldr	r3, [r7, #4]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d0fc      	beq.n	801fc18 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 801fc1e:	bf00      	nop
 801fc20:	bf00      	nop
 801fc22:	3708      	adds	r7, #8
 801fc24:	46bd      	mov	sp, r7
 801fc26:	bd80      	pop	{r7, pc}
 801fc28:	2000009c 	.word	0x2000009c

0801fc2c <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 801fc2c:	b480      	push	{r7}
 801fc2e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801fc30:	4b06      	ldr	r3, [pc, #24]	; (801fc4c <vPortYield+0x20>)
 801fc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fc36:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801fc38:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801fc3c:	f3bf 8f6f 	isb	sy
}
 801fc40:	bf00      	nop
 801fc42:	46bd      	mov	sp, r7
 801fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc48:	4770      	bx	lr
 801fc4a:	bf00      	nop
 801fc4c:	e000ed04 	.word	0xe000ed04

0801fc50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801fc54:	f000 f930 	bl	801feb8 <ulSetInterruptMask>
	ulCriticalNesting++;
 801fc58:	4b05      	ldr	r3, [pc, #20]	; (801fc70 <vPortEnterCritical+0x20>)
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	3301      	adds	r3, #1
 801fc5e:	4a04      	ldr	r2, [pc, #16]	; (801fc70 <vPortEnterCritical+0x20>)
 801fc60:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801fc62:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801fc66:	f3bf 8f6f 	isb	sy
}
 801fc6a:	bf00      	nop
 801fc6c:	bd80      	pop	{r7, pc}
 801fc6e:	bf00      	nop
 801fc70:	2000009c 	.word	0x2000009c

0801fc74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 801fc74:	b580      	push	{r7, lr}
 801fc76:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 801fc78:	4b0a      	ldr	r3, [pc, #40]	; (801fca4 <vPortExitCritical+0x30>)
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d102      	bne.n	801fc86 <vPortExitCritical+0x12>
 801fc80:	f000 f91a 	bl	801feb8 <ulSetInterruptMask>
 801fc84:	e7fe      	b.n	801fc84 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 801fc86:	4b07      	ldr	r3, [pc, #28]	; (801fca4 <vPortExitCritical+0x30>)
 801fc88:	681b      	ldr	r3, [r3, #0]
 801fc8a:	3b01      	subs	r3, #1
 801fc8c:	4a05      	ldr	r2, [pc, #20]	; (801fca4 <vPortExitCritical+0x30>)
 801fc8e:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801fc90:	4b04      	ldr	r3, [pc, #16]	; (801fca4 <vPortExitCritical+0x30>)
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d102      	bne.n	801fc9e <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 801fc98:	2000      	movs	r0, #0
 801fc9a:	f000 f91a 	bl	801fed2 <vClearInterruptMask>
	}
}
 801fc9e:	bf00      	nop
 801fca0:	bd80      	pop	{r7, pc}
 801fca2:	bf00      	nop
 801fca4:	2000009c 	.word	0x2000009c

0801fca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 801fca8:	b580      	push	{r7, lr}
 801fcaa:	b082      	sub	sp, #8
 801fcac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801fcae:	f000 f903 	bl	801feb8 <ulSetInterruptMask>
 801fcb2:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801fcb4:	f7ff f8c2 	bl	801ee3c <xTaskIncrementTick>
 801fcb8:	4603      	mov	r3, r0
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d003      	beq.n	801fcc6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801fcbe:	4b05      	ldr	r3, [pc, #20]	; (801fcd4 <xPortSysTickHandler+0x2c>)
 801fcc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fcc4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801fcc6:	6878      	ldr	r0, [r7, #4]
 801fcc8:	f000 f903 	bl	801fed2 <vClearInterruptMask>
}
 801fccc:	bf00      	nop
 801fcce:	3708      	adds	r7, #8
 801fcd0:	46bd      	mov	sp, r7
 801fcd2:	bd80      	pop	{r7, pc}
 801fcd4:	e000ed04 	.word	0xe000ed04

0801fcd8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 801fcd8:	b580      	push	{r7, lr}
 801fcda:	b084      	sub	sp, #16
 801fcdc:	af00      	add	r7, sp, #0
 801fcde:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	699b      	ldr	r3, [r3, #24]
 801fce4:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 801fce6:	68fb      	ldr	r3, [r7, #12]
 801fce8:	3b02      	subs	r3, #2
 801fcea:	781b      	ldrb	r3, [r3, #0]
 801fcec:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801fcee:	7afb      	ldrb	r3, [r7, #11]
 801fcf0:	2b02      	cmp	r3, #2
 801fcf2:	d102      	bne.n	801fcfa <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 801fcf4:	f000 f8b4 	bl	801fe60 <vRestoreContextOfFirstTask>
		}
		break;
 801fcf8:	e002      	b.n	801fd00 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 801fcfa:	f000 f8dd 	bl	801feb8 <ulSetInterruptMask>
 801fcfe:	e7fe      	b.n	801fcfe <vPortSVCHandler_C+0x26>
		}
	}
}
 801fd00:	bf00      	nop
 801fd02:	3710      	adds	r7, #16
 801fd04:	46bd      	mov	sp, r7
 801fd06:	bd80      	pop	{r7, pc}

0801fd08 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 801fd08:	b480      	push	{r7}
 801fd0a:	b085      	sub	sp, #20
 801fd0c:	af00      	add	r7, sp, #0
 801fd0e:	60f8      	str	r0, [r7, #12]
 801fd10:	60b9      	str	r1, [r7, #8]
 801fd12:	607a      	str	r2, [r7, #4]
 801fd14:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801fd16:	68fb      	ldr	r3, [r7, #12]
 801fd18:	3b04      	subs	r3, #4
 801fd1a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 801fd1c:	68fb      	ldr	r3, [r7, #12]
 801fd1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801fd22:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd24:	68fb      	ldr	r3, [r7, #12]
 801fd26:	3b04      	subs	r3, #4
 801fd28:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	68fb      	ldr	r3, [r7, #12]
 801fd2e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd30:	68fb      	ldr	r3, [r7, #12]
 801fd32:	3b04      	subs	r3, #4
 801fd34:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801fd36:	4a38      	ldr	r2, [pc, #224]	; (801fe18 <pxPortInitialiseStack+0x110>)
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd3c:	68fb      	ldr	r3, [r7, #12]
 801fd3e:	3b04      	subs	r3, #4
 801fd40:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 801fd42:	68fb      	ldr	r3, [r7, #12]
 801fd44:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 801fd48:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd4a:	68fb      	ldr	r3, [r7, #12]
 801fd4c:	3b04      	subs	r3, #4
 801fd4e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 801fd56:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	3b04      	subs	r3, #4
 801fd5c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 801fd5e:	68fb      	ldr	r3, [r7, #12]
 801fd60:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 801fd64:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	3b04      	subs	r3, #4
 801fd6a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 801fd6c:	68fb      	ldr	r3, [r7, #12]
 801fd6e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 801fd72:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd74:	68fb      	ldr	r3, [r7, #12]
 801fd76:	3b04      	subs	r3, #4
 801fd78:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 801fd7a:	683a      	ldr	r2, [r7, #0]
 801fd7c:	68fb      	ldr	r3, [r7, #12]
 801fd7e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd80:	68fb      	ldr	r3, [r7, #12]
 801fd82:	3b04      	subs	r3, #4
 801fd84:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 801fd86:	68fb      	ldr	r3, [r7, #12]
 801fd88:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801fd8c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd8e:	68fb      	ldr	r3, [r7, #12]
 801fd90:	3b04      	subs	r3, #4
 801fd92:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 801fd94:	68fb      	ldr	r3, [r7, #12]
 801fd96:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801fd9a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fd9c:	68fb      	ldr	r3, [r7, #12]
 801fd9e:	3b04      	subs	r3, #4
 801fda0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 801fda8:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdaa:	68fb      	ldr	r3, [r7, #12]
 801fdac:	3b04      	subs	r3, #4
 801fdae:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 801fdb6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdb8:	68fb      	ldr	r3, [r7, #12]
 801fdba:	3b04      	subs	r3, #4
 801fdbc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801fdbe:	68fb      	ldr	r3, [r7, #12]
 801fdc0:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 801fdc4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdc6:	68fb      	ldr	r3, [r7, #12]
 801fdc8:	3b04      	subs	r3, #4
 801fdca:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 801fdcc:	68fb      	ldr	r3, [r7, #12]
 801fdce:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801fdd2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdd4:	68fb      	ldr	r3, [r7, #12]
 801fdd6:	3b04      	subs	r3, #4
 801fdd8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 801fdda:	68fb      	ldr	r3, [r7, #12]
 801fddc:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801fde0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fde2:	68fb      	ldr	r3, [r7, #12]
 801fde4:	3b04      	subs	r3, #4
 801fde6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801fdee:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801fdf0:	68fb      	ldr	r3, [r7, #12]
 801fdf2:	3b04      	subs	r3, #4
 801fdf4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 801fdf6:	68fb      	ldr	r3, [r7, #12]
 801fdf8:	f06f 0243 	mvn.w	r2, #67	; 0x43
 801fdfc:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801fdfe:	68fb      	ldr	r3, [r7, #12]
 801fe00:	3b04      	subs	r3, #4
 801fe02:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 801fe04:	68ba      	ldr	r2, [r7, #8]
 801fe06:	68fb      	ldr	r3, [r7, #12]
 801fe08:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 801fe0a:	68fb      	ldr	r3, [r7, #12]
}
 801fe0c:	4618      	mov	r0, r3
 801fe0e:	3714      	adds	r7, #20
 801fe10:	46bd      	mov	sp, r7
 801fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe16:	4770      	bx	lr
 801fe18:	0801fbf9 	.word	0x0801fbf9

0801fe1c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 801fe1c:	b580      	push	{r7, lr}
 801fe1e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801fe20:	4b0c      	ldr	r3, [pc, #48]	; (801fe54 <xPortStartScheduler+0x38>)
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	4a0b      	ldr	r2, [pc, #44]	; (801fe54 <xPortStartScheduler+0x38>)
 801fe26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801fe2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801fe2c:	4b09      	ldr	r3, [pc, #36]	; (801fe54 <xPortStartScheduler+0x38>)
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	4a08      	ldr	r2, [pc, #32]	; (801fe54 <xPortStartScheduler+0x38>)
 801fe32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801fe36:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 801fe38:	f7ff feba 	bl	801fbb0 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 801fe3c:	4b06      	ldr	r3, [pc, #24]	; (801fe58 <xPortStartScheduler+0x3c>)
 801fe3e:	2200      	movs	r2, #0
 801fe40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 801fe42:	f000 f825 	bl	801fe90 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 801fe46:	f7ff f8ab 	bl	801efa0 <vTaskSwitchContext>
	prvTaskExitError();
 801fe4a:	f7ff fed5 	bl	801fbf8 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 801fe4e:	2300      	movs	r3, #0
}
 801fe50:	4618      	mov	r0, r3
 801fe52:	bd80      	pop	{r7, pc}
 801fe54:	e000ed20 	.word	0xe000ed20
 801fe58:	2000009c 	.word	0x2000009c
 801fe5c:	00000000 	.word	0x00000000

0801fe60 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801fe60:	4a07      	ldr	r2, [pc, #28]	; (801fe80 <pxCurrentTCBConst2>)
 801fe62:	6811      	ldr	r1, [r2, #0]
 801fe64:	6808      	ldr	r0, [r1, #0]
 801fe66:	c806      	ldmia	r0!, {r1, r2}
 801fe68:	f381 880b 	msr	PSPLIM, r1
 801fe6c:	2102      	movs	r1, #2
 801fe6e:	f381 8814 	msr	CONTROL, r1
 801fe72:	3020      	adds	r0, #32
 801fe74:	f380 8809 	msr	PSP, r0
 801fe78:	f3bf 8f6f 	isb	sy
 801fe7c:	4710      	bx	r2
 801fe7e:	bf00      	nop

0801fe80 <pxCurrentTCBConst2>:
 801fe80:	20001630 	.word	0x20001630
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 801fe84:	bf00      	nop
 801fe86:	bf00      	nop
	...

0801fe90 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801fe90:	4807      	ldr	r0, [pc, #28]	; (801feb0 <xVTORConst>)
 801fe92:	6800      	ldr	r0, [r0, #0]
 801fe94:	6800      	ldr	r0, [r0, #0]
 801fe96:	f380 8808 	msr	MSP, r0
 801fe9a:	b662      	cpsie	i
 801fe9c:	b661      	cpsie	f
 801fe9e:	f3bf 8f4f 	dsb	sy
 801fea2:	f3bf 8f6f 	isb	sy
 801fea6:	df02      	svc	2
 801fea8:	bf00      	nop
 801feaa:	bf00      	nop
 801feac:	f3af 8000 	nop.w

0801feb0 <xVTORConst>:
 801feb0:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 801feb4:	bf00      	nop
 801feb6:	bf00      	nop

0801feb8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801feb8:	f3ef 8011 	mrs	r0, BASEPRI
 801febc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 801fec0:	f381 8811 	msr	BASEPRI, r1
 801fec4:	f3bf 8f4f 	dsb	sy
 801fec8:	f3bf 8f6f 	isb	sy
 801fecc:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801fece:	bf00      	nop
 801fed0:	4618      	mov	r0, r3

0801fed2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801fed2:	f380 8811 	msr	BASEPRI, r0
 801fed6:	f3bf 8f4f 	dsb	sy
 801feda:	f3bf 8f6f 	isb	sy
 801fede:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 801fee0:	bf00      	nop
	...

0801fef0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801fef0:	f3ef 8009 	mrs	r0, PSP
 801fef4:	f3ef 820b 	mrs	r2, PSPLIM
 801fef8:	4673      	mov	r3, lr
 801fefa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801fefe:	4a10      	ldr	r2, [pc, #64]	; (801ff40 <pxCurrentTCBConst>)
 801ff00:	6811      	ldr	r1, [r2, #0]
 801ff02:	6008      	str	r0, [r1, #0]
 801ff04:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 801ff08:	f380 8811 	msr	BASEPRI, r0
 801ff0c:	f3bf 8f4f 	dsb	sy
 801ff10:	f3bf 8f6f 	isb	sy
 801ff14:	f7ff f844 	bl	801efa0 <vTaskSwitchContext>
 801ff18:	f04f 0000 	mov.w	r0, #0
 801ff1c:	f380 8811 	msr	BASEPRI, r0
 801ff20:	4a07      	ldr	r2, [pc, #28]	; (801ff40 <pxCurrentTCBConst>)
 801ff22:	6811      	ldr	r1, [r2, #0]
 801ff24:	6808      	ldr	r0, [r1, #0]
 801ff26:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 801ff2a:	f382 880b 	msr	PSPLIM, r2
 801ff2e:	f380 8809 	msr	PSP, r0
 801ff32:	4718      	bx	r3
 801ff34:	f3af 8000 	nop.w
 801ff38:	f3af 8000 	nop.w
 801ff3c:	f3af 8000 	nop.w

0801ff40 <pxCurrentTCBConst>:
 801ff40:	20001630 	.word	0x20001630
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 801ff44:	bf00      	nop
 801ff46:	bf00      	nop
	...

0801ff50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 801ff50:	f01e 0f04 	tst.w	lr, #4
 801ff54:	bf0c      	ite	eq
 801ff56:	f3ef 8008 	mrseq	r0, MSP
 801ff5a:	f3ef 8009 	mrsne	r0, PSP
 801ff5e:	4904      	ldr	r1, [pc, #16]	; (801ff70 <svchandler_address_const>)
 801ff60:	4708      	bx	r1
 801ff62:	bf00      	nop
 801ff64:	f3af 8000 	nop.w
 801ff68:	f3af 8000 	nop.w
 801ff6c:	f3af 8000 	nop.w

0801ff70 <svchandler_address_const>:
 801ff70:	0801fcd9 	.word	0x0801fcd9
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 801ff74:	bf00      	nop
 801ff76:	bf00      	nop

0801ff78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801ff78:	b580      	push	{r7, lr}
 801ff7a:	b086      	sub	sp, #24
 801ff7c:	af00      	add	r7, sp, #0
 801ff7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801ff80:	2300      	movs	r3, #0
 801ff82:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801ff84:	f7fe feae 	bl	801ece4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801ff88:	4b4f      	ldr	r3, [pc, #316]	; (80200c8 <pvPortMalloc+0x150>)
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d101      	bne.n	801ff94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801ff90:	f000 f8f8 	bl	8020184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801ff94:	4b4d      	ldr	r3, [pc, #308]	; (80200cc <pvPortMalloc+0x154>)
 801ff96:	681a      	ldr	r2, [r3, #0]
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	4013      	ands	r3, r2
 801ff9c:	2b00      	cmp	r3, #0
 801ff9e:	f040 8083 	bne.w	80200a8 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d015      	beq.n	801ffd4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 801ffa8:	2208      	movs	r2, #8
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	4413      	add	r3, r2
 801ffae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	f003 0307 	and.w	r3, r3, #7
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	d00c      	beq.n	801ffd4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	f023 0307 	bic.w	r3, r3, #7
 801ffc0:	3308      	adds	r3, #8
 801ffc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	f003 0307 	and.w	r3, r3, #7
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d002      	beq.n	801ffd4 <pvPortMalloc+0x5c>
 801ffce:	f7ff ff73 	bl	801feb8 <ulSetInterruptMask>
 801ffd2:	e7fe      	b.n	801ffd2 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d066      	beq.n	80200a8 <pvPortMalloc+0x130>
 801ffda:	4b3d      	ldr	r3, [pc, #244]	; (80200d0 <pvPortMalloc+0x158>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	687a      	ldr	r2, [r7, #4]
 801ffe0:	429a      	cmp	r2, r3
 801ffe2:	d861      	bhi.n	80200a8 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801ffe4:	4b3b      	ldr	r3, [pc, #236]	; (80200d4 <pvPortMalloc+0x15c>)
 801ffe6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801ffe8:	4b3a      	ldr	r3, [pc, #232]	; (80200d4 <pvPortMalloc+0x15c>)
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801ffee:	e004      	b.n	801fffa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 801fff0:	697b      	ldr	r3, [r7, #20]
 801fff2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801fff4:	697b      	ldr	r3, [r7, #20]
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801fffa:	697b      	ldr	r3, [r7, #20]
 801fffc:	685b      	ldr	r3, [r3, #4]
 801fffe:	687a      	ldr	r2, [r7, #4]
 8020000:	429a      	cmp	r2, r3
 8020002:	d903      	bls.n	802000c <pvPortMalloc+0x94>
 8020004:	697b      	ldr	r3, [r7, #20]
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	2b00      	cmp	r3, #0
 802000a:	d1f1      	bne.n	801fff0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 802000c:	4b2e      	ldr	r3, [pc, #184]	; (80200c8 <pvPortMalloc+0x150>)
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	697a      	ldr	r2, [r7, #20]
 8020012:	429a      	cmp	r2, r3
 8020014:	d048      	beq.n	80200a8 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8020016:	693b      	ldr	r3, [r7, #16]
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	2208      	movs	r2, #8
 802001c:	4413      	add	r3, r2
 802001e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8020020:	697b      	ldr	r3, [r7, #20]
 8020022:	681a      	ldr	r2, [r3, #0]
 8020024:	693b      	ldr	r3, [r7, #16]
 8020026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8020028:	697b      	ldr	r3, [r7, #20]
 802002a:	685a      	ldr	r2, [r3, #4]
 802002c:	687b      	ldr	r3, [r7, #4]
 802002e:	1ad2      	subs	r2, r2, r3
 8020030:	2308      	movs	r3, #8
 8020032:	005b      	lsls	r3, r3, #1
 8020034:	429a      	cmp	r2, r3
 8020036:	d917      	bls.n	8020068 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8020038:	697a      	ldr	r2, [r7, #20]
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	4413      	add	r3, r2
 802003e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020040:	68bb      	ldr	r3, [r7, #8]
 8020042:	f003 0307 	and.w	r3, r3, #7
 8020046:	2b00      	cmp	r3, #0
 8020048:	d002      	beq.n	8020050 <pvPortMalloc+0xd8>
 802004a:	f7ff ff35 	bl	801feb8 <ulSetInterruptMask>
 802004e:	e7fe      	b.n	802004e <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8020050:	697b      	ldr	r3, [r7, #20]
 8020052:	685a      	ldr	r2, [r3, #4]
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	1ad2      	subs	r2, r2, r3
 8020058:	68bb      	ldr	r3, [r7, #8]
 802005a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 802005c:	697b      	ldr	r3, [r7, #20]
 802005e:	687a      	ldr	r2, [r7, #4]
 8020060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8020062:	68b8      	ldr	r0, [r7, #8]
 8020064:	f000 f8f0 	bl	8020248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8020068:	4b19      	ldr	r3, [pc, #100]	; (80200d0 <pvPortMalloc+0x158>)
 802006a:	681a      	ldr	r2, [r3, #0]
 802006c:	697b      	ldr	r3, [r7, #20]
 802006e:	685b      	ldr	r3, [r3, #4]
 8020070:	1ad3      	subs	r3, r2, r3
 8020072:	4a17      	ldr	r2, [pc, #92]	; (80200d0 <pvPortMalloc+0x158>)
 8020074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8020076:	4b16      	ldr	r3, [pc, #88]	; (80200d0 <pvPortMalloc+0x158>)
 8020078:	681a      	ldr	r2, [r3, #0]
 802007a:	4b17      	ldr	r3, [pc, #92]	; (80200d8 <pvPortMalloc+0x160>)
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	429a      	cmp	r2, r3
 8020080:	d203      	bcs.n	802008a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020082:	4b13      	ldr	r3, [pc, #76]	; (80200d0 <pvPortMalloc+0x158>)
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	4a14      	ldr	r2, [pc, #80]	; (80200d8 <pvPortMalloc+0x160>)
 8020088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	685a      	ldr	r2, [r3, #4]
 802008e:	4b0f      	ldr	r3, [pc, #60]	; (80200cc <pvPortMalloc+0x154>)
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	431a      	orrs	r2, r3
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020098:	697b      	ldr	r3, [r7, #20]
 802009a:	2200      	movs	r2, #0
 802009c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 802009e:	4b0f      	ldr	r3, [pc, #60]	; (80200dc <pvPortMalloc+0x164>)
 80200a0:	681b      	ldr	r3, [r3, #0]
 80200a2:	3301      	adds	r3, #1
 80200a4:	4a0d      	ldr	r2, [pc, #52]	; (80200dc <pvPortMalloc+0x164>)
 80200a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80200a8:	f7fe fe2a 	bl	801ed00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80200ac:	68fb      	ldr	r3, [r7, #12]
 80200ae:	f003 0307 	and.w	r3, r3, #7
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	d002      	beq.n	80200bc <pvPortMalloc+0x144>
 80200b6:	f7ff feff 	bl	801feb8 <ulSetInterruptMask>
 80200ba:	e7fe      	b.n	80200ba <pvPortMalloc+0x142>
	return pvReturn;
 80200bc:	68fb      	ldr	r3, [r7, #12]
}
 80200be:	4618      	mov	r0, r3
 80200c0:	3718      	adds	r7, #24
 80200c2:	46bd      	mov	sp, r7
 80200c4:	bd80      	pop	{r7, pc}
 80200c6:	bf00      	nop
 80200c8:	20003c64 	.word	0x20003c64
 80200cc:	20003c78 	.word	0x20003c78
 80200d0:	20003c68 	.word	0x20003c68
 80200d4:	20003c5c 	.word	0x20003c5c
 80200d8:	20003c6c 	.word	0x20003c6c
 80200dc:	20003c70 	.word	0x20003c70

080200e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80200e0:	b580      	push	{r7, lr}
 80200e2:	b084      	sub	sp, #16
 80200e4:	af00      	add	r7, sp, #0
 80200e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	d03d      	beq.n	802016e <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80200f2:	2308      	movs	r3, #8
 80200f4:	425b      	negs	r3, r3
 80200f6:	68fa      	ldr	r2, [r7, #12]
 80200f8:	4413      	add	r3, r2
 80200fa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020100:	68bb      	ldr	r3, [r7, #8]
 8020102:	685a      	ldr	r2, [r3, #4]
 8020104:	4b1c      	ldr	r3, [pc, #112]	; (8020178 <vPortFree+0x98>)
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	4013      	ands	r3, r2
 802010a:	2b00      	cmp	r3, #0
 802010c:	d102      	bne.n	8020114 <vPortFree+0x34>
 802010e:	f7ff fed3 	bl	801feb8 <ulSetInterruptMask>
 8020112:	e7fe      	b.n	8020112 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020114:	68bb      	ldr	r3, [r7, #8]
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	2b00      	cmp	r3, #0
 802011a:	d002      	beq.n	8020122 <vPortFree+0x42>
 802011c:	f7ff fecc 	bl	801feb8 <ulSetInterruptMask>
 8020120:	e7fe      	b.n	8020120 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8020122:	68bb      	ldr	r3, [r7, #8]
 8020124:	685a      	ldr	r2, [r3, #4]
 8020126:	4b14      	ldr	r3, [pc, #80]	; (8020178 <vPortFree+0x98>)
 8020128:	681b      	ldr	r3, [r3, #0]
 802012a:	4013      	ands	r3, r2
 802012c:	2b00      	cmp	r3, #0
 802012e:	d01e      	beq.n	802016e <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8020130:	68bb      	ldr	r3, [r7, #8]
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d11a      	bne.n	802016e <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8020138:	68bb      	ldr	r3, [r7, #8]
 802013a:	685a      	ldr	r2, [r3, #4]
 802013c:	4b0e      	ldr	r3, [pc, #56]	; (8020178 <vPortFree+0x98>)
 802013e:	681b      	ldr	r3, [r3, #0]
 8020140:	43db      	mvns	r3, r3
 8020142:	401a      	ands	r2, r3
 8020144:	68bb      	ldr	r3, [r7, #8]
 8020146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8020148:	f7fe fdcc 	bl	801ece4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 802014c:	68bb      	ldr	r3, [r7, #8]
 802014e:	685a      	ldr	r2, [r3, #4]
 8020150:	4b0a      	ldr	r3, [pc, #40]	; (802017c <vPortFree+0x9c>)
 8020152:	681b      	ldr	r3, [r3, #0]
 8020154:	4413      	add	r3, r2
 8020156:	4a09      	ldr	r2, [pc, #36]	; (802017c <vPortFree+0x9c>)
 8020158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 802015a:	68b8      	ldr	r0, [r7, #8]
 802015c:	f000 f874 	bl	8020248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8020160:	4b07      	ldr	r3, [pc, #28]	; (8020180 <vPortFree+0xa0>)
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	3301      	adds	r3, #1
 8020166:	4a06      	ldr	r2, [pc, #24]	; (8020180 <vPortFree+0xa0>)
 8020168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 802016a:	f7fe fdc9 	bl	801ed00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 802016e:	bf00      	nop
 8020170:	3710      	adds	r7, #16
 8020172:	46bd      	mov	sp, r7
 8020174:	bd80      	pop	{r7, pc}
 8020176:	bf00      	nop
 8020178:	20003c78 	.word	0x20003c78
 802017c:	20003c68 	.word	0x20003c68
 8020180:	20003c74 	.word	0x20003c74

08020184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8020184:	b480      	push	{r7}
 8020186:	b085      	sub	sp, #20
 8020188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 802018a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802018e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8020190:	4b27      	ldr	r3, [pc, #156]	; (8020230 <prvHeapInit+0xac>)
 8020192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8020194:	68fb      	ldr	r3, [r7, #12]
 8020196:	f003 0307 	and.w	r3, r3, #7
 802019a:	2b00      	cmp	r3, #0
 802019c:	d00c      	beq.n	80201b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 802019e:	68fb      	ldr	r3, [r7, #12]
 80201a0:	3307      	adds	r3, #7
 80201a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80201a4:	68fb      	ldr	r3, [r7, #12]
 80201a6:	f023 0307 	bic.w	r3, r3, #7
 80201aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80201ac:	68ba      	ldr	r2, [r7, #8]
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	1ad3      	subs	r3, r2, r3
 80201b2:	4a1f      	ldr	r2, [pc, #124]	; (8020230 <prvHeapInit+0xac>)
 80201b4:	4413      	add	r3, r2
 80201b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80201bc:	4a1d      	ldr	r2, [pc, #116]	; (8020234 <prvHeapInit+0xb0>)
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80201c2:	4b1c      	ldr	r3, [pc, #112]	; (8020234 <prvHeapInit+0xb0>)
 80201c4:	2200      	movs	r2, #0
 80201c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	68ba      	ldr	r2, [r7, #8]
 80201cc:	4413      	add	r3, r2
 80201ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80201d0:	2208      	movs	r2, #8
 80201d2:	68fb      	ldr	r3, [r7, #12]
 80201d4:	1a9b      	subs	r3, r3, r2
 80201d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	f023 0307 	bic.w	r3, r3, #7
 80201de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80201e0:	68fb      	ldr	r3, [r7, #12]
 80201e2:	4a15      	ldr	r2, [pc, #84]	; (8020238 <prvHeapInit+0xb4>)
 80201e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80201e6:	4b14      	ldr	r3, [pc, #80]	; (8020238 <prvHeapInit+0xb4>)
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	2200      	movs	r2, #0
 80201ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80201ee:	4b12      	ldr	r3, [pc, #72]	; (8020238 <prvHeapInit+0xb4>)
 80201f0:	681b      	ldr	r3, [r3, #0]
 80201f2:	2200      	movs	r2, #0
 80201f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80201fa:	683b      	ldr	r3, [r7, #0]
 80201fc:	68fa      	ldr	r2, [r7, #12]
 80201fe:	1ad2      	subs	r2, r2, r3
 8020200:	683b      	ldr	r3, [r7, #0]
 8020202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8020204:	4b0c      	ldr	r3, [pc, #48]	; (8020238 <prvHeapInit+0xb4>)
 8020206:	681a      	ldr	r2, [r3, #0]
 8020208:	683b      	ldr	r3, [r7, #0]
 802020a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802020c:	683b      	ldr	r3, [r7, #0]
 802020e:	685b      	ldr	r3, [r3, #4]
 8020210:	4a0a      	ldr	r2, [pc, #40]	; (802023c <prvHeapInit+0xb8>)
 8020212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020214:	683b      	ldr	r3, [r7, #0]
 8020216:	685b      	ldr	r3, [r3, #4]
 8020218:	4a09      	ldr	r2, [pc, #36]	; (8020240 <prvHeapInit+0xbc>)
 802021a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 802021c:	4b09      	ldr	r3, [pc, #36]	; (8020244 <prvHeapInit+0xc0>)
 802021e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020222:	601a      	str	r2, [r3, #0]
}
 8020224:	bf00      	nop
 8020226:	3714      	adds	r7, #20
 8020228:	46bd      	mov	sp, r7
 802022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802022e:	4770      	bx	lr
 8020230:	20001c5c 	.word	0x20001c5c
 8020234:	20003c5c 	.word	0x20003c5c
 8020238:	20003c64 	.word	0x20003c64
 802023c:	20003c6c 	.word	0x20003c6c
 8020240:	20003c68 	.word	0x20003c68
 8020244:	20003c78 	.word	0x20003c78

08020248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8020248:	b480      	push	{r7}
 802024a:	b085      	sub	sp, #20
 802024c:	af00      	add	r7, sp, #0
 802024e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8020250:	4b28      	ldr	r3, [pc, #160]	; (80202f4 <prvInsertBlockIntoFreeList+0xac>)
 8020252:	60fb      	str	r3, [r7, #12]
 8020254:	e002      	b.n	802025c <prvInsertBlockIntoFreeList+0x14>
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	60fb      	str	r3, [r7, #12]
 802025c:	68fb      	ldr	r3, [r7, #12]
 802025e:	681b      	ldr	r3, [r3, #0]
 8020260:	687a      	ldr	r2, [r7, #4]
 8020262:	429a      	cmp	r2, r3
 8020264:	d8f7      	bhi.n	8020256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8020266:	68fb      	ldr	r3, [r7, #12]
 8020268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	685b      	ldr	r3, [r3, #4]
 802026e:	68ba      	ldr	r2, [r7, #8]
 8020270:	4413      	add	r3, r2
 8020272:	687a      	ldr	r2, [r7, #4]
 8020274:	429a      	cmp	r2, r3
 8020276:	d108      	bne.n	802028a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8020278:	68fb      	ldr	r3, [r7, #12]
 802027a:	685a      	ldr	r2, [r3, #4]
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	685b      	ldr	r3, [r3, #4]
 8020280:	441a      	add	r2, r3
 8020282:	68fb      	ldr	r3, [r7, #12]
 8020284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	685b      	ldr	r3, [r3, #4]
 8020292:	68ba      	ldr	r2, [r7, #8]
 8020294:	441a      	add	r2, r3
 8020296:	68fb      	ldr	r3, [r7, #12]
 8020298:	681b      	ldr	r3, [r3, #0]
 802029a:	429a      	cmp	r2, r3
 802029c:	d118      	bne.n	80202d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	681a      	ldr	r2, [r3, #0]
 80202a2:	4b15      	ldr	r3, [pc, #84]	; (80202f8 <prvInsertBlockIntoFreeList+0xb0>)
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	429a      	cmp	r2, r3
 80202a8:	d00d      	beq.n	80202c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	685a      	ldr	r2, [r3, #4]
 80202ae:	68fb      	ldr	r3, [r7, #12]
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	685b      	ldr	r3, [r3, #4]
 80202b4:	441a      	add	r2, r3
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	681a      	ldr	r2, [r3, #0]
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	601a      	str	r2, [r3, #0]
 80202c4:	e008      	b.n	80202d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80202c6:	4b0c      	ldr	r3, [pc, #48]	; (80202f8 <prvInsertBlockIntoFreeList+0xb0>)
 80202c8:	681a      	ldr	r2, [r3, #0]
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	601a      	str	r2, [r3, #0]
 80202ce:	e003      	b.n	80202d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80202d0:	68fb      	ldr	r3, [r7, #12]
 80202d2:	681a      	ldr	r2, [r3, #0]
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80202d8:	68fa      	ldr	r2, [r7, #12]
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	429a      	cmp	r2, r3
 80202de:	d002      	beq.n	80202e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80202e0:	68fb      	ldr	r3, [r7, #12]
 80202e2:	687a      	ldr	r2, [r7, #4]
 80202e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80202e6:	bf00      	nop
 80202e8:	3714      	adds	r7, #20
 80202ea:	46bd      	mov	sp, r7
 80202ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f0:	4770      	bx	lr
 80202f2:	bf00      	nop
 80202f4:	20003c5c 	.word	0x20003c5c
 80202f8:	20003c64 	.word	0x20003c64

080202fc <_ZdlPv>:
 80202fc:	f001 bf94 	b.w	8022228 <free>

08020300 <_ZdlPvj>:
 8020300:	f7ff bffc 	b.w	80202fc <_ZdlPv>

08020304 <_Znwj>:
 8020304:	2801      	cmp	r0, #1
 8020306:	bf38      	it	cc
 8020308:	2001      	movcc	r0, #1
 802030a:	b510      	push	{r4, lr}
 802030c:	4604      	mov	r4, r0
 802030e:	4620      	mov	r0, r4
 8020310:	f001 ff82 	bl	8022218 <malloc>
 8020314:	b100      	cbz	r0, 8020318 <_Znwj+0x14>
 8020316:	bd10      	pop	{r4, pc}
 8020318:	f000 f812 	bl	8020340 <_ZSt15get_new_handlerv>
 802031c:	b908      	cbnz	r0, 8020322 <_Znwj+0x1e>
 802031e:	f001 ff74 	bl	802220a <abort>
 8020322:	4780      	blx	r0
 8020324:	e7f3      	b.n	802030e <_Znwj+0xa>

08020326 <_ZNSaIcEC1Ev>:
 8020326:	4770      	bx	lr

08020328 <_ZNSaIcEC1ERKS_>:
 8020328:	4770      	bx	lr

0802032a <_ZNSaIcED1Ev>:
 802032a:	4770      	bx	lr

0802032c <_ZSt17__throw_bad_allocv>:
 802032c:	b508      	push	{r3, lr}
 802032e:	f001 ff6c 	bl	802220a <abort>

08020332 <_ZSt28__throw_bad_array_new_lengthv>:
 8020332:	b508      	push	{r3, lr}
 8020334:	f001 ff69 	bl	802220a <abort>

08020338 <_ZSt20__throw_length_errorPKc>:
 8020338:	b508      	push	{r3, lr}
 802033a:	f001 ff66 	bl	802220a <abort>
	...

08020340 <_ZSt15get_new_handlerv>:
 8020340:	4b01      	ldr	r3, [pc, #4]	; (8020348 <_ZSt15get_new_handlerv+0x8>)
 8020342:	e8d3 0faf 	lda	r0, [r3]
 8020346:	4770      	bx	lr
 8020348:	20003c7c 	.word	0x20003c7c

0802034c <fmod>:
 802034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802034e:	ec57 6b10 	vmov	r6, r7, d0
 8020352:	ec55 4b11 	vmov	r4, r5, d1
 8020356:	ed2d 8b02 	vpush	{d8}
 802035a:	f000 fa39 	bl	80207d0 <__ieee754_fmod>
 802035e:	4622      	mov	r2, r4
 8020360:	462b      	mov	r3, r5
 8020362:	4630      	mov	r0, r6
 8020364:	4639      	mov	r1, r7
 8020366:	eeb0 8a40 	vmov.f32	s16, s0
 802036a:	eef0 8a60 	vmov.f32	s17, s1
 802036e:	f7e0 fbcf 	bl	8000b10 <__aeabi_dcmpun>
 8020372:	b990      	cbnz	r0, 802039a <fmod+0x4e>
 8020374:	2200      	movs	r2, #0
 8020376:	2300      	movs	r3, #0
 8020378:	4620      	mov	r0, r4
 802037a:	4629      	mov	r1, r5
 802037c:	f7e0 fb96 	bl	8000aac <__aeabi_dcmpeq>
 8020380:	b158      	cbz	r0, 802039a <fmod+0x4e>
 8020382:	f002 fa33 	bl	80227ec <__errno>
 8020386:	2321      	movs	r3, #33	; 0x21
 8020388:	2200      	movs	r2, #0
 802038a:	6003      	str	r3, [r0, #0]
 802038c:	2300      	movs	r3, #0
 802038e:	4610      	mov	r0, r2
 8020390:	4619      	mov	r1, r3
 8020392:	f7e0 fa4d 	bl	8000830 <__aeabi_ddiv>
 8020396:	ec41 0b18 	vmov	d8, r0, r1
 802039a:	eeb0 0a48 	vmov.f32	s0, s16
 802039e:	eef0 0a68 	vmov.f32	s1, s17
 80203a2:	ecbd 8b02 	vpop	{d8}
 80203a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080203a8 <pow>:
 80203a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203aa:	ec55 4b11 	vmov	r4, r5, d1
 80203ae:	ed2d 8b02 	vpush	{d8}
 80203b2:	eeb0 8a40 	vmov.f32	s16, s0
 80203b6:	eef0 8a60 	vmov.f32	s17, s1
 80203ba:	f000 fb19 	bl	80209f0 <__ieee754_pow>
 80203be:	4622      	mov	r2, r4
 80203c0:	462b      	mov	r3, r5
 80203c2:	4620      	mov	r0, r4
 80203c4:	4629      	mov	r1, r5
 80203c6:	ec57 6b10 	vmov	r6, r7, d0
 80203ca:	f7e0 fba1 	bl	8000b10 <__aeabi_dcmpun>
 80203ce:	2800      	cmp	r0, #0
 80203d0:	d13b      	bne.n	802044a <pow+0xa2>
 80203d2:	2200      	movs	r2, #0
 80203d4:	2300      	movs	r3, #0
 80203d6:	ec51 0b18 	vmov	r0, r1, d8
 80203da:	f7e0 fb67 	bl	8000aac <__aeabi_dcmpeq>
 80203de:	b1b8      	cbz	r0, 8020410 <pow+0x68>
 80203e0:	2200      	movs	r2, #0
 80203e2:	2300      	movs	r3, #0
 80203e4:	4620      	mov	r0, r4
 80203e6:	4629      	mov	r1, r5
 80203e8:	f7e0 fb60 	bl	8000aac <__aeabi_dcmpeq>
 80203ec:	2800      	cmp	r0, #0
 80203ee:	d146      	bne.n	802047e <pow+0xd6>
 80203f0:	ec45 4b10 	vmov	d0, r4, r5
 80203f4:	f000 f900 	bl	80205f8 <finite>
 80203f8:	b338      	cbz	r0, 802044a <pow+0xa2>
 80203fa:	2200      	movs	r2, #0
 80203fc:	2300      	movs	r3, #0
 80203fe:	4620      	mov	r0, r4
 8020400:	4629      	mov	r1, r5
 8020402:	f7e0 fb5d 	bl	8000ac0 <__aeabi_dcmplt>
 8020406:	b300      	cbz	r0, 802044a <pow+0xa2>
 8020408:	f002 f9f0 	bl	80227ec <__errno>
 802040c:	2322      	movs	r3, #34	; 0x22
 802040e:	e01b      	b.n	8020448 <pow+0xa0>
 8020410:	ec47 6b10 	vmov	d0, r6, r7
 8020414:	f000 f8f0 	bl	80205f8 <finite>
 8020418:	b9e0      	cbnz	r0, 8020454 <pow+0xac>
 802041a:	eeb0 0a48 	vmov.f32	s0, s16
 802041e:	eef0 0a68 	vmov.f32	s1, s17
 8020422:	f000 f8e9 	bl	80205f8 <finite>
 8020426:	b1a8      	cbz	r0, 8020454 <pow+0xac>
 8020428:	ec45 4b10 	vmov	d0, r4, r5
 802042c:	f000 f8e4 	bl	80205f8 <finite>
 8020430:	b180      	cbz	r0, 8020454 <pow+0xac>
 8020432:	4632      	mov	r2, r6
 8020434:	463b      	mov	r3, r7
 8020436:	4630      	mov	r0, r6
 8020438:	4639      	mov	r1, r7
 802043a:	f7e0 fb69 	bl	8000b10 <__aeabi_dcmpun>
 802043e:	2800      	cmp	r0, #0
 8020440:	d0e2      	beq.n	8020408 <pow+0x60>
 8020442:	f002 f9d3 	bl	80227ec <__errno>
 8020446:	2321      	movs	r3, #33	; 0x21
 8020448:	6003      	str	r3, [r0, #0]
 802044a:	ecbd 8b02 	vpop	{d8}
 802044e:	ec47 6b10 	vmov	d0, r6, r7
 8020452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020454:	2200      	movs	r2, #0
 8020456:	2300      	movs	r3, #0
 8020458:	4630      	mov	r0, r6
 802045a:	4639      	mov	r1, r7
 802045c:	f7e0 fb26 	bl	8000aac <__aeabi_dcmpeq>
 8020460:	2800      	cmp	r0, #0
 8020462:	d0f2      	beq.n	802044a <pow+0xa2>
 8020464:	eeb0 0a48 	vmov.f32	s0, s16
 8020468:	eef0 0a68 	vmov.f32	s1, s17
 802046c:	f000 f8c4 	bl	80205f8 <finite>
 8020470:	2800      	cmp	r0, #0
 8020472:	d0ea      	beq.n	802044a <pow+0xa2>
 8020474:	ec45 4b10 	vmov	d0, r4, r5
 8020478:	f000 f8be 	bl	80205f8 <finite>
 802047c:	e7c3      	b.n	8020406 <pow+0x5e>
 802047e:	2600      	movs	r6, #0
 8020480:	4f00      	ldr	r7, [pc, #0]	; (8020484 <pow+0xdc>)
 8020482:	e7e2      	b.n	802044a <pow+0xa2>
 8020484:	3ff00000 	.word	0x3ff00000

08020488 <sqrt>:
 8020488:	b538      	push	{r3, r4, r5, lr}
 802048a:	ec55 4b10 	vmov	r4, r5, d0
 802048e:	ed2d 8b02 	vpush	{d8}
 8020492:	f000 f8bd 	bl	8020610 <__ieee754_sqrt>
 8020496:	4622      	mov	r2, r4
 8020498:	462b      	mov	r3, r5
 802049a:	4620      	mov	r0, r4
 802049c:	4629      	mov	r1, r5
 802049e:	eeb0 8a40 	vmov.f32	s16, s0
 80204a2:	eef0 8a60 	vmov.f32	s17, s1
 80204a6:	f7e0 fb33 	bl	8000b10 <__aeabi_dcmpun>
 80204aa:	b990      	cbnz	r0, 80204d2 <sqrt+0x4a>
 80204ac:	2200      	movs	r2, #0
 80204ae:	2300      	movs	r3, #0
 80204b0:	4620      	mov	r0, r4
 80204b2:	4629      	mov	r1, r5
 80204b4:	f7e0 fb04 	bl	8000ac0 <__aeabi_dcmplt>
 80204b8:	b158      	cbz	r0, 80204d2 <sqrt+0x4a>
 80204ba:	f002 f997 	bl	80227ec <__errno>
 80204be:	2321      	movs	r3, #33	; 0x21
 80204c0:	2200      	movs	r2, #0
 80204c2:	6003      	str	r3, [r0, #0]
 80204c4:	2300      	movs	r3, #0
 80204c6:	4610      	mov	r0, r2
 80204c8:	4619      	mov	r1, r3
 80204ca:	f7e0 f9b1 	bl	8000830 <__aeabi_ddiv>
 80204ce:	ec41 0b18 	vmov	d8, r0, r1
 80204d2:	eeb0 0a48 	vmov.f32	s0, s16
 80204d6:	eef0 0a68 	vmov.f32	s1, s17
 80204da:	ecbd 8b02 	vpop	{d8}
 80204de:	bd38      	pop	{r3, r4, r5, pc}

080204e0 <atan2f>:
 80204e0:	f001 b864 	b.w	80215ac <__ieee754_atan2f>

080204e4 <cosf>:
 80204e4:	ee10 3a10 	vmov	r3, s0
 80204e8:	b507      	push	{r0, r1, r2, lr}
 80204ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80204ee:	4a1d      	ldr	r2, [pc, #116]	; (8020564 <cosf+0x80>)
 80204f0:	4293      	cmp	r3, r2
 80204f2:	dc06      	bgt.n	8020502 <cosf+0x1e>
 80204f4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8020568 <cosf+0x84>
 80204f8:	b003      	add	sp, #12
 80204fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80204fe:	f000 bfaf 	b.w	8021460 <__kernel_cosf>
 8020502:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020506:	db04      	blt.n	8020512 <cosf+0x2e>
 8020508:	ee30 0a40 	vsub.f32	s0, s0, s0
 802050c:	b003      	add	sp, #12
 802050e:	f85d fb04 	ldr.w	pc, [sp], #4
 8020512:	4668      	mov	r0, sp
 8020514:	f001 f8e8 	bl	80216e8 <__ieee754_rem_pio2f>
 8020518:	f000 0003 	and.w	r0, r0, #3
 802051c:	2801      	cmp	r0, #1
 802051e:	d009      	beq.n	8020534 <cosf+0x50>
 8020520:	2802      	cmp	r0, #2
 8020522:	d010      	beq.n	8020546 <cosf+0x62>
 8020524:	b9b0      	cbnz	r0, 8020554 <cosf+0x70>
 8020526:	eddd 0a01 	vldr	s1, [sp, #4]
 802052a:	ed9d 0a00 	vldr	s0, [sp]
 802052e:	f000 ff97 	bl	8021460 <__kernel_cosf>
 8020532:	e7eb      	b.n	802050c <cosf+0x28>
 8020534:	eddd 0a01 	vldr	s1, [sp, #4]
 8020538:	ed9d 0a00 	vldr	s0, [sp]
 802053c:	f000 ffee 	bl	802151c <__kernel_sinf>
 8020540:	eeb1 0a40 	vneg.f32	s0, s0
 8020544:	e7e2      	b.n	802050c <cosf+0x28>
 8020546:	eddd 0a01 	vldr	s1, [sp, #4]
 802054a:	ed9d 0a00 	vldr	s0, [sp]
 802054e:	f000 ff87 	bl	8021460 <__kernel_cosf>
 8020552:	e7f5      	b.n	8020540 <cosf+0x5c>
 8020554:	2001      	movs	r0, #1
 8020556:	eddd 0a01 	vldr	s1, [sp, #4]
 802055a:	ed9d 0a00 	vldr	s0, [sp]
 802055e:	f000 ffdd 	bl	802151c <__kernel_sinf>
 8020562:	e7d3      	b.n	802050c <cosf+0x28>
 8020564:	3f490fd8 	.word	0x3f490fd8
 8020568:	00000000 	.word	0x00000000

0802056c <sinf>:
 802056c:	ee10 3a10 	vmov	r3, s0
 8020570:	b507      	push	{r0, r1, r2, lr}
 8020572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020576:	4a1e      	ldr	r2, [pc, #120]	; (80205f0 <sinf+0x84>)
 8020578:	4293      	cmp	r3, r2
 802057a:	dc07      	bgt.n	802058c <sinf+0x20>
 802057c:	2000      	movs	r0, #0
 802057e:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80205f4 <sinf+0x88>
 8020582:	b003      	add	sp, #12
 8020584:	f85d eb04 	ldr.w	lr, [sp], #4
 8020588:	f000 bfc8 	b.w	802151c <__kernel_sinf>
 802058c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020590:	db04      	blt.n	802059c <sinf+0x30>
 8020592:	ee30 0a40 	vsub.f32	s0, s0, s0
 8020596:	b003      	add	sp, #12
 8020598:	f85d fb04 	ldr.w	pc, [sp], #4
 802059c:	4668      	mov	r0, sp
 802059e:	f001 f8a3 	bl	80216e8 <__ieee754_rem_pio2f>
 80205a2:	f000 0003 	and.w	r0, r0, #3
 80205a6:	2801      	cmp	r0, #1
 80205a8:	d00a      	beq.n	80205c0 <sinf+0x54>
 80205aa:	2802      	cmp	r0, #2
 80205ac:	d00f      	beq.n	80205ce <sinf+0x62>
 80205ae:	b9c0      	cbnz	r0, 80205e2 <sinf+0x76>
 80205b0:	2001      	movs	r0, #1
 80205b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80205b6:	ed9d 0a00 	vldr	s0, [sp]
 80205ba:	f000 ffaf 	bl	802151c <__kernel_sinf>
 80205be:	e7ea      	b.n	8020596 <sinf+0x2a>
 80205c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80205c4:	ed9d 0a00 	vldr	s0, [sp]
 80205c8:	f000 ff4a 	bl	8021460 <__kernel_cosf>
 80205cc:	e7e3      	b.n	8020596 <sinf+0x2a>
 80205ce:	2001      	movs	r0, #1
 80205d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80205d4:	ed9d 0a00 	vldr	s0, [sp]
 80205d8:	f000 ffa0 	bl	802151c <__kernel_sinf>
 80205dc:	eeb1 0a40 	vneg.f32	s0, s0
 80205e0:	e7d9      	b.n	8020596 <sinf+0x2a>
 80205e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80205e6:	ed9d 0a00 	vldr	s0, [sp]
 80205ea:	f000 ff39 	bl	8021460 <__kernel_cosf>
 80205ee:	e7f5      	b.n	80205dc <sinf+0x70>
 80205f0:	3f490fd8 	.word	0x3f490fd8
 80205f4:	00000000 	.word	0x00000000

080205f8 <finite>:
 80205f8:	b082      	sub	sp, #8
 80205fa:	ed8d 0b00 	vstr	d0, [sp]
 80205fe:	9801      	ldr	r0, [sp, #4]
 8020600:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8020604:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8020608:	0fc0      	lsrs	r0, r0, #31
 802060a:	b002      	add	sp, #8
 802060c:	4770      	bx	lr
	...

08020610 <__ieee754_sqrt>:
 8020610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020614:	4e6b      	ldr	r6, [pc, #428]	; (80207c4 <__ieee754_sqrt+0x1b4>)
 8020616:	ee10 0a10 	vmov	r0, s0
 802061a:	ee10 2a10 	vmov	r2, s0
 802061e:	ec55 4b10 	vmov	r4, r5, d0
 8020622:	43ae      	bics	r6, r5
 8020624:	4629      	mov	r1, r5
 8020626:	462b      	mov	r3, r5
 8020628:	d10d      	bne.n	8020646 <__ieee754_sqrt+0x36>
 802062a:	f7df ffd7 	bl	80005dc <__aeabi_dmul>
 802062e:	4602      	mov	r2, r0
 8020630:	460b      	mov	r3, r1
 8020632:	4620      	mov	r0, r4
 8020634:	4629      	mov	r1, r5
 8020636:	f7df fe1b 	bl	8000270 <__adddf3>
 802063a:	4604      	mov	r4, r0
 802063c:	460d      	mov	r5, r1
 802063e:	ec45 4b10 	vmov	d0, r4, r5
 8020642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020646:	2d00      	cmp	r5, #0
 8020648:	dc0b      	bgt.n	8020662 <__ieee754_sqrt+0x52>
 802064a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802064e:	4326      	orrs	r6, r4
 8020650:	d0f5      	beq.n	802063e <__ieee754_sqrt+0x2e>
 8020652:	b135      	cbz	r5, 8020662 <__ieee754_sqrt+0x52>
 8020654:	f7df fe0a 	bl	800026c <__aeabi_dsub>
 8020658:	4602      	mov	r2, r0
 802065a:	460b      	mov	r3, r1
 802065c:	f7e0 f8e8 	bl	8000830 <__aeabi_ddiv>
 8020660:	e7eb      	b.n	802063a <__ieee754_sqrt+0x2a>
 8020662:	1509      	asrs	r1, r1, #20
 8020664:	f000 8091 	beq.w	802078a <__ieee754_sqrt+0x17a>
 8020668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802066c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8020670:	07c9      	lsls	r1, r1, #31
 8020672:	f04f 0500 	mov.w	r5, #0
 8020676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802067a:	ea4f 0666 	mov.w	r6, r6, asr #1
 802067e:	f04f 0e16 	mov.w	lr, #22
 8020682:	46ac      	mov	ip, r5
 8020684:	bf58      	it	pl
 8020686:	005b      	lslpl	r3, r3, #1
 8020688:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802068c:	bf5c      	itt	pl
 802068e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8020692:	0052      	lslpl	r2, r2, #1
 8020694:	005b      	lsls	r3, r3, #1
 8020696:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802069a:	0052      	lsls	r2, r2, #1
 802069c:	eb0c 0001 	add.w	r0, ip, r1
 80206a0:	4298      	cmp	r0, r3
 80206a2:	bfde      	ittt	le
 80206a4:	1a1b      	suble	r3, r3, r0
 80206a6:	eb00 0c01 	addle.w	ip, r0, r1
 80206aa:	186d      	addle	r5, r5, r1
 80206ac:	f1be 0e01 	subs.w	lr, lr, #1
 80206b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80206b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80206b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80206bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80206c0:	d1ec      	bne.n	802069c <__ieee754_sqrt+0x8c>
 80206c2:	4674      	mov	r4, lr
 80206c4:	2720      	movs	r7, #32
 80206c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80206ca:	4563      	cmp	r3, ip
 80206cc:	eb01 000e 	add.w	r0, r1, lr
 80206d0:	dc02      	bgt.n	80206d8 <__ieee754_sqrt+0xc8>
 80206d2:	d114      	bne.n	80206fe <__ieee754_sqrt+0xee>
 80206d4:	4290      	cmp	r0, r2
 80206d6:	d812      	bhi.n	80206fe <__ieee754_sqrt+0xee>
 80206d8:	2800      	cmp	r0, #0
 80206da:	eb00 0e01 	add.w	lr, r0, r1
 80206de:	da59      	bge.n	8020794 <__ieee754_sqrt+0x184>
 80206e0:	f1be 0f00 	cmp.w	lr, #0
 80206e4:	db56      	blt.n	8020794 <__ieee754_sqrt+0x184>
 80206e6:	f10c 0801 	add.w	r8, ip, #1
 80206ea:	eba3 030c 	sub.w	r3, r3, ip
 80206ee:	4290      	cmp	r0, r2
 80206f0:	440c      	add	r4, r1
 80206f2:	eba2 0200 	sub.w	r2, r2, r0
 80206f6:	bf88      	it	hi
 80206f8:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80206fc:	46c4      	mov	ip, r8
 80206fe:	005b      	lsls	r3, r3, #1
 8020700:	3f01      	subs	r7, #1
 8020702:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8020706:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802070a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802070e:	d1dc      	bne.n	80206ca <__ieee754_sqrt+0xba>
 8020710:	4313      	orrs	r3, r2
 8020712:	d01b      	beq.n	802074c <__ieee754_sqrt+0x13c>
 8020714:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80207c8 <__ieee754_sqrt+0x1b8>
 8020718:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80207cc <__ieee754_sqrt+0x1bc>
 802071c:	e9da 0100 	ldrd	r0, r1, [sl]
 8020720:	e9db 2300 	ldrd	r2, r3, [fp]
 8020724:	e9da 8900 	ldrd	r8, r9, [sl]
 8020728:	f7df fda0 	bl	800026c <__aeabi_dsub>
 802072c:	4602      	mov	r2, r0
 802072e:	460b      	mov	r3, r1
 8020730:	4640      	mov	r0, r8
 8020732:	4649      	mov	r1, r9
 8020734:	f7e0 f9ce 	bl	8000ad4 <__aeabi_dcmple>
 8020738:	b140      	cbz	r0, 802074c <__ieee754_sqrt+0x13c>
 802073a:	f1b4 3fff 	cmp.w	r4, #4294967295
 802073e:	e9da 0100 	ldrd	r0, r1, [sl]
 8020742:	e9db 2300 	ldrd	r2, r3, [fp]
 8020746:	d127      	bne.n	8020798 <__ieee754_sqrt+0x188>
 8020748:	3501      	adds	r5, #1
 802074a:	463c      	mov	r4, r7
 802074c:	106a      	asrs	r2, r5, #1
 802074e:	07e9      	lsls	r1, r5, #31
 8020750:	ea4f 0354 	mov.w	r3, r4, lsr #1
 8020754:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8020758:	bf48      	it	mi
 802075a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802075e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8020762:	461c      	mov	r4, r3
 8020764:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8020768:	e769      	b.n	802063e <__ieee754_sqrt+0x2e>
 802076a:	0ad3      	lsrs	r3, r2, #11
 802076c:	3815      	subs	r0, #21
 802076e:	0552      	lsls	r2, r2, #21
 8020770:	2b00      	cmp	r3, #0
 8020772:	d0fa      	beq.n	802076a <__ieee754_sqrt+0x15a>
 8020774:	02dc      	lsls	r4, r3, #11
 8020776:	d50a      	bpl.n	802078e <__ieee754_sqrt+0x17e>
 8020778:	f1c1 0420 	rsb	r4, r1, #32
 802077c:	1e4d      	subs	r5, r1, #1
 802077e:	fa22 f404 	lsr.w	r4, r2, r4
 8020782:	408a      	lsls	r2, r1
 8020784:	1b41      	subs	r1, r0, r5
 8020786:	4323      	orrs	r3, r4
 8020788:	e76e      	b.n	8020668 <__ieee754_sqrt+0x58>
 802078a:	4608      	mov	r0, r1
 802078c:	e7f0      	b.n	8020770 <__ieee754_sqrt+0x160>
 802078e:	005b      	lsls	r3, r3, #1
 8020790:	3101      	adds	r1, #1
 8020792:	e7ef      	b.n	8020774 <__ieee754_sqrt+0x164>
 8020794:	46e0      	mov	r8, ip
 8020796:	e7a8      	b.n	80206ea <__ieee754_sqrt+0xda>
 8020798:	e9da 8900 	ldrd	r8, r9, [sl]
 802079c:	f7df fd68 	bl	8000270 <__adddf3>
 80207a0:	4602      	mov	r2, r0
 80207a2:	460b      	mov	r3, r1
 80207a4:	4640      	mov	r0, r8
 80207a6:	4649      	mov	r1, r9
 80207a8:	f7e0 f98a 	bl	8000ac0 <__aeabi_dcmplt>
 80207ac:	b128      	cbz	r0, 80207ba <__ieee754_sqrt+0x1aa>
 80207ae:	1ca0      	adds	r0, r4, #2
 80207b0:	f104 0402 	add.w	r4, r4, #2
 80207b4:	bf08      	it	eq
 80207b6:	3501      	addeq	r5, #1
 80207b8:	e7c8      	b.n	802074c <__ieee754_sqrt+0x13c>
 80207ba:	3401      	adds	r4, #1
 80207bc:	f024 0401 	bic.w	r4, r4, #1
 80207c0:	e7c4      	b.n	802074c <__ieee754_sqrt+0x13c>
 80207c2:	bf00      	nop
 80207c4:	7ff00000 	.word	0x7ff00000
 80207c8:	200000a0 	.word	0x200000a0
 80207cc:	200000a8 	.word	0x200000a8

080207d0 <__ieee754_fmod>:
 80207d0:	ec53 2b11 	vmov	r2, r3, d1
 80207d4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80207d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207dc:	ea5c 0402 	orrs.w	r4, ip, r2
 80207e0:	461e      	mov	r6, r3
 80207e2:	ee11 7a10 	vmov	r7, s2
 80207e6:	ee11 ea10 	vmov	lr, s2
 80207ea:	ec51 0b10 	vmov	r0, r1, d0
 80207ee:	d00c      	beq.n	802080a <__ieee754_fmod+0x3a>
 80207f0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80207f4:	4c77      	ldr	r4, [pc, #476]	; (80209d4 <__ieee754_fmod+0x204>)
 80207f6:	4689      	mov	r9, r1
 80207f8:	45a0      	cmp	r8, r4
 80207fa:	dc06      	bgt.n	802080a <__ieee754_fmod+0x3a>
 80207fc:	4254      	negs	r4, r2
 80207fe:	4d76      	ldr	r5, [pc, #472]	; (80209d8 <__ieee754_fmod+0x208>)
 8020800:	4314      	orrs	r4, r2
 8020802:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8020806:	42ac      	cmp	r4, r5
 8020808:	d909      	bls.n	802081e <__ieee754_fmod+0x4e>
 802080a:	f7df fee7 	bl	80005dc <__aeabi_dmul>
 802080e:	4602      	mov	r2, r0
 8020810:	460b      	mov	r3, r1
 8020812:	f7e0 f80d 	bl	8000830 <__aeabi_ddiv>
 8020816:	ec41 0b10 	vmov	d0, r0, r1
 802081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802081e:	45e0      	cmp	r8, ip
 8020820:	ee10 aa10 	vmov	sl, s0
 8020824:	ee10 4a10 	vmov	r4, s0
 8020828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802082c:	dc09      	bgt.n	8020842 <__ieee754_fmod+0x72>
 802082e:	dbf2      	blt.n	8020816 <__ieee754_fmod+0x46>
 8020830:	4290      	cmp	r0, r2
 8020832:	d3f0      	bcc.n	8020816 <__ieee754_fmod+0x46>
 8020834:	d105      	bne.n	8020842 <__ieee754_fmod+0x72>
 8020836:	4b69      	ldr	r3, [pc, #420]	; (80209dc <__ieee754_fmod+0x20c>)
 8020838:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 802083c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020840:	e7e9      	b.n	8020816 <__ieee754_fmod+0x46>
 8020842:	4a65      	ldr	r2, [pc, #404]	; (80209d8 <__ieee754_fmod+0x208>)
 8020844:	ea19 0f02 	tst.w	r9, r2
 8020848:	d148      	bne.n	80208dc <__ieee754_fmod+0x10c>
 802084a:	f1b8 0f00 	cmp.w	r8, #0
 802084e:	d13d      	bne.n	80208cc <__ieee754_fmod+0xfc>
 8020850:	4653      	mov	r3, sl
 8020852:	4963      	ldr	r1, [pc, #396]	; (80209e0 <__ieee754_fmod+0x210>)
 8020854:	2b00      	cmp	r3, #0
 8020856:	dc36      	bgt.n	80208c6 <__ieee754_fmod+0xf6>
 8020858:	4216      	tst	r6, r2
 802085a:	d14f      	bne.n	80208fc <__ieee754_fmod+0x12c>
 802085c:	f1bc 0f00 	cmp.w	ip, #0
 8020860:	d144      	bne.n	80208ec <__ieee754_fmod+0x11c>
 8020862:	463b      	mov	r3, r7
 8020864:	4a5e      	ldr	r2, [pc, #376]	; (80209e0 <__ieee754_fmod+0x210>)
 8020866:	2b00      	cmp	r3, #0
 8020868:	dc3d      	bgt.n	80208e6 <__ieee754_fmod+0x116>
 802086a:	485e      	ldr	r0, [pc, #376]	; (80209e4 <__ieee754_fmod+0x214>)
 802086c:	4281      	cmp	r1, r0
 802086e:	db4a      	blt.n	8020906 <__ieee754_fmod+0x136>
 8020870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020878:	485a      	ldr	r0, [pc, #360]	; (80209e4 <__ieee754_fmod+0x214>)
 802087a:	4282      	cmp	r2, r0
 802087c:	db57      	blt.n	802092e <__ieee754_fmod+0x15e>
 802087e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8020882:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8020886:	1a89      	subs	r1, r1, r2
 8020888:	1b98      	subs	r0, r3, r6
 802088a:	eba4 070e 	sub.w	r7, r4, lr
 802088e:	2900      	cmp	r1, #0
 8020890:	d162      	bne.n	8020958 <__ieee754_fmod+0x188>
 8020892:	4574      	cmp	r4, lr
 8020894:	bf38      	it	cc
 8020896:	f100 30ff 	addcc.w	r0, r0, #4294967295
 802089a:	2800      	cmp	r0, #0
 802089c:	bfa4      	itt	ge
 802089e:	463c      	movge	r4, r7
 80208a0:	4603      	movge	r3, r0
 80208a2:	ea53 0104 	orrs.w	r1, r3, r4
 80208a6:	d0c6      	beq.n	8020836 <__ieee754_fmod+0x66>
 80208a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80208ac:	db69      	blt.n	8020982 <__ieee754_fmod+0x1b2>
 80208ae:	494d      	ldr	r1, [pc, #308]	; (80209e4 <__ieee754_fmod+0x214>)
 80208b0:	428a      	cmp	r2, r1
 80208b2:	db6c      	blt.n	802098e <__ieee754_fmod+0x1be>
 80208b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80208b8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80208bc:	4620      	mov	r0, r4
 80208be:	432b      	orrs	r3, r5
 80208c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80208c4:	e7a7      	b.n	8020816 <__ieee754_fmod+0x46>
 80208c6:	3901      	subs	r1, #1
 80208c8:	005b      	lsls	r3, r3, #1
 80208ca:	e7c3      	b.n	8020854 <__ieee754_fmod+0x84>
 80208cc:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80208d0:	4944      	ldr	r1, [pc, #272]	; (80209e4 <__ieee754_fmod+0x214>)
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	ddc0      	ble.n	8020858 <__ieee754_fmod+0x88>
 80208d6:	3901      	subs	r1, #1
 80208d8:	005b      	lsls	r3, r3, #1
 80208da:	e7fa      	b.n	80208d2 <__ieee754_fmod+0x102>
 80208dc:	ea4f 5128 	mov.w	r1, r8, asr #20
 80208e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80208e4:	e7b8      	b.n	8020858 <__ieee754_fmod+0x88>
 80208e6:	3a01      	subs	r2, #1
 80208e8:	005b      	lsls	r3, r3, #1
 80208ea:	e7bc      	b.n	8020866 <__ieee754_fmod+0x96>
 80208ec:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80208f0:	4a3c      	ldr	r2, [pc, #240]	; (80209e4 <__ieee754_fmod+0x214>)
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	ddb9      	ble.n	802086a <__ieee754_fmod+0x9a>
 80208f6:	3a01      	subs	r2, #1
 80208f8:	005b      	lsls	r3, r3, #1
 80208fa:	e7fa      	b.n	80208f2 <__ieee754_fmod+0x122>
 80208fc:	ea4f 522c 	mov.w	r2, ip, asr #20
 8020900:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020904:	e7b1      	b.n	802086a <__ieee754_fmod+0x9a>
 8020906:	1a40      	subs	r0, r0, r1
 8020908:	281f      	cmp	r0, #31
 802090a:	dc0a      	bgt.n	8020922 <__ieee754_fmod+0x152>
 802090c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8020910:	fa08 f800 	lsl.w	r8, r8, r0
 8020914:	fa0a f400 	lsl.w	r4, sl, r0
 8020918:	fa2a f303 	lsr.w	r3, sl, r3
 802091c:	ea43 0308 	orr.w	r3, r3, r8
 8020920:	e7aa      	b.n	8020878 <__ieee754_fmod+0xa8>
 8020922:	4b31      	ldr	r3, [pc, #196]	; (80209e8 <__ieee754_fmod+0x218>)
 8020924:	2400      	movs	r4, #0
 8020926:	1a5b      	subs	r3, r3, r1
 8020928:	fa0a f303 	lsl.w	r3, sl, r3
 802092c:	e7a4      	b.n	8020878 <__ieee754_fmod+0xa8>
 802092e:	1a80      	subs	r0, r0, r2
 8020930:	281f      	cmp	r0, #31
 8020932:	dc0a      	bgt.n	802094a <__ieee754_fmod+0x17a>
 8020934:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8020938:	fa0c fc00 	lsl.w	ip, ip, r0
 802093c:	fa07 fe00 	lsl.w	lr, r7, r0
 8020940:	fa27 f606 	lsr.w	r6, r7, r6
 8020944:	ea46 060c 	orr.w	r6, r6, ip
 8020948:	e79d      	b.n	8020886 <__ieee754_fmod+0xb6>
 802094a:	4e27      	ldr	r6, [pc, #156]	; (80209e8 <__ieee754_fmod+0x218>)
 802094c:	f04f 0e00 	mov.w	lr, #0
 8020950:	1ab6      	subs	r6, r6, r2
 8020952:	fa07 f606 	lsl.w	r6, r7, r6
 8020956:	e796      	b.n	8020886 <__ieee754_fmod+0xb6>
 8020958:	4574      	cmp	r4, lr
 802095a:	bf38      	it	cc
 802095c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8020960:	2800      	cmp	r0, #0
 8020962:	da05      	bge.n	8020970 <__ieee754_fmod+0x1a0>
 8020964:	0fe0      	lsrs	r0, r4, #31
 8020966:	0064      	lsls	r4, r4, #1
 8020968:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802096c:	3901      	subs	r1, #1
 802096e:	e78b      	b.n	8020888 <__ieee754_fmod+0xb8>
 8020970:	ea50 0307 	orrs.w	r3, r0, r7
 8020974:	f43f af5f 	beq.w	8020836 <__ieee754_fmod+0x66>
 8020978:	0ffb      	lsrs	r3, r7, #31
 802097a:	007c      	lsls	r4, r7, #1
 802097c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020980:	e7f4      	b.n	802096c <__ieee754_fmod+0x19c>
 8020982:	0fe1      	lsrs	r1, r4, #31
 8020984:	3a01      	subs	r2, #1
 8020986:	0064      	lsls	r4, r4, #1
 8020988:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802098c:	e78c      	b.n	80208a8 <__ieee754_fmod+0xd8>
 802098e:	1a89      	subs	r1, r1, r2
 8020990:	2914      	cmp	r1, #20
 8020992:	dc0a      	bgt.n	80209aa <__ieee754_fmod+0x1da>
 8020994:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8020998:	40cc      	lsrs	r4, r1
 802099a:	fa03 f202 	lsl.w	r2, r3, r2
 802099e:	410b      	asrs	r3, r1
 80209a0:	4322      	orrs	r2, r4
 80209a2:	ea43 0105 	orr.w	r1, r3, r5
 80209a6:	4610      	mov	r0, r2
 80209a8:	e735      	b.n	8020816 <__ieee754_fmod+0x46>
 80209aa:	291f      	cmp	r1, #31
 80209ac:	dc07      	bgt.n	80209be <__ieee754_fmod+0x1ee>
 80209ae:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80209b2:	40cc      	lsrs	r4, r1
 80209b4:	fa03 f202 	lsl.w	r2, r3, r2
 80209b8:	4322      	orrs	r2, r4
 80209ba:	462b      	mov	r3, r5
 80209bc:	e7f1      	b.n	80209a2 <__ieee754_fmod+0x1d2>
 80209be:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80209c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80209c6:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80209ca:	32e2      	adds	r2, #226	; 0xe2
 80209cc:	fa43 f202 	asr.w	r2, r3, r2
 80209d0:	e7f3      	b.n	80209ba <__ieee754_fmod+0x1ea>
 80209d2:	bf00      	nop
 80209d4:	7fefffff 	.word	0x7fefffff
 80209d8:	7ff00000 	.word	0x7ff00000
 80209dc:	08023f28 	.word	0x08023f28
 80209e0:	fffffbed 	.word	0xfffffbed
 80209e4:	fffffc02 	.word	0xfffffc02
 80209e8:	fffffbe2 	.word	0xfffffbe2
 80209ec:	00000000 	.word	0x00000000

080209f0 <__ieee754_pow>:
 80209f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209f4:	ed2d 8b06 	vpush	{d8-d10}
 80209f8:	b089      	sub	sp, #36	; 0x24
 80209fa:	ed8d 1b00 	vstr	d1, [sp]
 80209fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8020a02:	ec57 6b10 	vmov	r6, r7, d0
 8020a06:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8020a0a:	ea58 0102 	orrs.w	r1, r8, r2
 8020a0e:	d115      	bne.n	8020a3c <__ieee754_pow+0x4c>
 8020a10:	19b3      	adds	r3, r6, r6
 8020a12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8020a16:	4152      	adcs	r2, r2
 8020a18:	4299      	cmp	r1, r3
 8020a1a:	4b89      	ldr	r3, [pc, #548]	; (8020c40 <__ieee754_pow+0x250>)
 8020a1c:	4193      	sbcs	r3, r2
 8020a1e:	f080 84d2 	bcs.w	80213c6 <__ieee754_pow+0x9d6>
 8020a22:	4630      	mov	r0, r6
 8020a24:	4639      	mov	r1, r7
 8020a26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020a2a:	f7df fc21 	bl	8000270 <__adddf3>
 8020a2e:	ec41 0b10 	vmov	d0, r0, r1
 8020a32:	b009      	add	sp, #36	; 0x24
 8020a34:	ecbd 8b06 	vpop	{d8-d10}
 8020a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a3c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8020a40:	4b80      	ldr	r3, [pc, #512]	; (8020c44 <__ieee754_pow+0x254>)
 8020a42:	463d      	mov	r5, r7
 8020a44:	ee10 aa10 	vmov	sl, s0
 8020a48:	429c      	cmp	r4, r3
 8020a4a:	dc06      	bgt.n	8020a5a <__ieee754_pow+0x6a>
 8020a4c:	d101      	bne.n	8020a52 <__ieee754_pow+0x62>
 8020a4e:	2e00      	cmp	r6, #0
 8020a50:	d1e7      	bne.n	8020a22 <__ieee754_pow+0x32>
 8020a52:	4598      	cmp	r8, r3
 8020a54:	dc01      	bgt.n	8020a5a <__ieee754_pow+0x6a>
 8020a56:	d10f      	bne.n	8020a78 <__ieee754_pow+0x88>
 8020a58:	b172      	cbz	r2, 8020a78 <__ieee754_pow+0x88>
 8020a5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8020a5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8020a62:	ea55 050a 	orrs.w	r5, r5, sl
 8020a66:	d1dc      	bne.n	8020a22 <__ieee754_pow+0x32>
 8020a68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020a6c:	18db      	adds	r3, r3, r3
 8020a6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8020a72:	4152      	adcs	r2, r2
 8020a74:	429d      	cmp	r5, r3
 8020a76:	e7d0      	b.n	8020a1a <__ieee754_pow+0x2a>
 8020a78:	2d00      	cmp	r5, #0
 8020a7a:	da3b      	bge.n	8020af4 <__ieee754_pow+0x104>
 8020a7c:	4b72      	ldr	r3, [pc, #456]	; (8020c48 <__ieee754_pow+0x258>)
 8020a7e:	4598      	cmp	r8, r3
 8020a80:	dc51      	bgt.n	8020b26 <__ieee754_pow+0x136>
 8020a82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8020a86:	4598      	cmp	r8, r3
 8020a88:	f340 84ac 	ble.w	80213e4 <__ieee754_pow+0x9f4>
 8020a8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8020a90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020a94:	2b14      	cmp	r3, #20
 8020a96:	dd0f      	ble.n	8020ab8 <__ieee754_pow+0xc8>
 8020a98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8020a9c:	fa22 f103 	lsr.w	r1, r2, r3
 8020aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8020aa4:	4293      	cmp	r3, r2
 8020aa6:	f040 849d 	bne.w	80213e4 <__ieee754_pow+0x9f4>
 8020aaa:	f001 0101 	and.w	r1, r1, #1
 8020aae:	f1c1 0302 	rsb	r3, r1, #2
 8020ab2:	9304      	str	r3, [sp, #16]
 8020ab4:	b182      	cbz	r2, 8020ad8 <__ieee754_pow+0xe8>
 8020ab6:	e05f      	b.n	8020b78 <__ieee754_pow+0x188>
 8020ab8:	2a00      	cmp	r2, #0
 8020aba:	d15b      	bne.n	8020b74 <__ieee754_pow+0x184>
 8020abc:	f1c3 0314 	rsb	r3, r3, #20
 8020ac0:	fa48 f103 	asr.w	r1, r8, r3
 8020ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8020ac8:	4543      	cmp	r3, r8
 8020aca:	f040 8488 	bne.w	80213de <__ieee754_pow+0x9ee>
 8020ace:	f001 0101 	and.w	r1, r1, #1
 8020ad2:	f1c1 0302 	rsb	r3, r1, #2
 8020ad6:	9304      	str	r3, [sp, #16]
 8020ad8:	4b5c      	ldr	r3, [pc, #368]	; (8020c4c <__ieee754_pow+0x25c>)
 8020ada:	4598      	cmp	r8, r3
 8020adc:	d132      	bne.n	8020b44 <__ieee754_pow+0x154>
 8020ade:	f1b9 0f00 	cmp.w	r9, #0
 8020ae2:	f280 8478 	bge.w	80213d6 <__ieee754_pow+0x9e6>
 8020ae6:	4632      	mov	r2, r6
 8020ae8:	463b      	mov	r3, r7
 8020aea:	2000      	movs	r0, #0
 8020aec:	4957      	ldr	r1, [pc, #348]	; (8020c4c <__ieee754_pow+0x25c>)
 8020aee:	f7df fe9f 	bl	8000830 <__aeabi_ddiv>
 8020af2:	e79c      	b.n	8020a2e <__ieee754_pow+0x3e>
 8020af4:	2300      	movs	r3, #0
 8020af6:	9304      	str	r3, [sp, #16]
 8020af8:	2a00      	cmp	r2, #0
 8020afa:	d13d      	bne.n	8020b78 <__ieee754_pow+0x188>
 8020afc:	4b51      	ldr	r3, [pc, #324]	; (8020c44 <__ieee754_pow+0x254>)
 8020afe:	4598      	cmp	r8, r3
 8020b00:	d1ea      	bne.n	8020ad8 <__ieee754_pow+0xe8>
 8020b02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020b06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8020b0e:	f000 845a 	beq.w	80213c6 <__ieee754_pow+0x9d6>
 8020b12:	4b4f      	ldr	r3, [pc, #316]	; (8020c50 <__ieee754_pow+0x260>)
 8020b14:	429c      	cmp	r4, r3
 8020b16:	dd08      	ble.n	8020b2a <__ieee754_pow+0x13a>
 8020b18:	f1b9 0f00 	cmp.w	r9, #0
 8020b1c:	f2c0 8457 	blt.w	80213ce <__ieee754_pow+0x9de>
 8020b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020b24:	e783      	b.n	8020a2e <__ieee754_pow+0x3e>
 8020b26:	2302      	movs	r3, #2
 8020b28:	e7e5      	b.n	8020af6 <__ieee754_pow+0x106>
 8020b2a:	f1b9 0f00 	cmp.w	r9, #0
 8020b2e:	f04f 0000 	mov.w	r0, #0
 8020b32:	f04f 0100 	mov.w	r1, #0
 8020b36:	f6bf af7a 	bge.w	8020a2e <__ieee754_pow+0x3e>
 8020b3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8020b3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020b42:	e774      	b.n	8020a2e <__ieee754_pow+0x3e>
 8020b44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8020b48:	d106      	bne.n	8020b58 <__ieee754_pow+0x168>
 8020b4a:	4632      	mov	r2, r6
 8020b4c:	463b      	mov	r3, r7
 8020b4e:	4630      	mov	r0, r6
 8020b50:	4639      	mov	r1, r7
 8020b52:	f7df fd43 	bl	80005dc <__aeabi_dmul>
 8020b56:	e76a      	b.n	8020a2e <__ieee754_pow+0x3e>
 8020b58:	4b3e      	ldr	r3, [pc, #248]	; (8020c54 <__ieee754_pow+0x264>)
 8020b5a:	4599      	cmp	r9, r3
 8020b5c:	d10c      	bne.n	8020b78 <__ieee754_pow+0x188>
 8020b5e:	2d00      	cmp	r5, #0
 8020b60:	db0a      	blt.n	8020b78 <__ieee754_pow+0x188>
 8020b62:	ec47 6b10 	vmov	d0, r6, r7
 8020b66:	b009      	add	sp, #36	; 0x24
 8020b68:	ecbd 8b06 	vpop	{d8-d10}
 8020b6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b70:	f7ff bd4e 	b.w	8020610 <__ieee754_sqrt>
 8020b74:	2300      	movs	r3, #0
 8020b76:	9304      	str	r3, [sp, #16]
 8020b78:	ec47 6b10 	vmov	d0, r6, r7
 8020b7c:	f000 fc66 	bl	802144c <fabs>
 8020b80:	ec51 0b10 	vmov	r0, r1, d0
 8020b84:	f1ba 0f00 	cmp.w	sl, #0
 8020b88:	d129      	bne.n	8020bde <__ieee754_pow+0x1ee>
 8020b8a:	b124      	cbz	r4, 8020b96 <__ieee754_pow+0x1a6>
 8020b8c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8020b90:	4b2e      	ldr	r3, [pc, #184]	; (8020c4c <__ieee754_pow+0x25c>)
 8020b92:	429a      	cmp	r2, r3
 8020b94:	d123      	bne.n	8020bde <__ieee754_pow+0x1ee>
 8020b96:	f1b9 0f00 	cmp.w	r9, #0
 8020b9a:	da05      	bge.n	8020ba8 <__ieee754_pow+0x1b8>
 8020b9c:	4602      	mov	r2, r0
 8020b9e:	460b      	mov	r3, r1
 8020ba0:	2000      	movs	r0, #0
 8020ba2:	492a      	ldr	r1, [pc, #168]	; (8020c4c <__ieee754_pow+0x25c>)
 8020ba4:	f7df fe44 	bl	8000830 <__aeabi_ddiv>
 8020ba8:	2d00      	cmp	r5, #0
 8020baa:	f6bf af40 	bge.w	8020a2e <__ieee754_pow+0x3e>
 8020bae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020bb2:	9b04      	ldr	r3, [sp, #16]
 8020bb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020bb8:	431c      	orrs	r4, r3
 8020bba:	d108      	bne.n	8020bce <__ieee754_pow+0x1de>
 8020bbc:	4602      	mov	r2, r0
 8020bbe:	460b      	mov	r3, r1
 8020bc0:	4610      	mov	r0, r2
 8020bc2:	4619      	mov	r1, r3
 8020bc4:	f7df fb52 	bl	800026c <__aeabi_dsub>
 8020bc8:	4602      	mov	r2, r0
 8020bca:	460b      	mov	r3, r1
 8020bcc:	e78f      	b.n	8020aee <__ieee754_pow+0xfe>
 8020bce:	9b04      	ldr	r3, [sp, #16]
 8020bd0:	2b01      	cmp	r3, #1
 8020bd2:	f47f af2c 	bne.w	8020a2e <__ieee754_pow+0x3e>
 8020bd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020bda:	4619      	mov	r1, r3
 8020bdc:	e727      	b.n	8020a2e <__ieee754_pow+0x3e>
 8020bde:	0feb      	lsrs	r3, r5, #31
 8020be0:	3b01      	subs	r3, #1
 8020be2:	9306      	str	r3, [sp, #24]
 8020be4:	9a06      	ldr	r2, [sp, #24]
 8020be6:	9b04      	ldr	r3, [sp, #16]
 8020be8:	4313      	orrs	r3, r2
 8020bea:	d102      	bne.n	8020bf2 <__ieee754_pow+0x202>
 8020bec:	4632      	mov	r2, r6
 8020bee:	463b      	mov	r3, r7
 8020bf0:	e7e6      	b.n	8020bc0 <__ieee754_pow+0x1d0>
 8020bf2:	4b19      	ldr	r3, [pc, #100]	; (8020c58 <__ieee754_pow+0x268>)
 8020bf4:	4598      	cmp	r8, r3
 8020bf6:	f340 80fb 	ble.w	8020df0 <__ieee754_pow+0x400>
 8020bfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8020bfe:	4598      	cmp	r8, r3
 8020c00:	4b13      	ldr	r3, [pc, #76]	; (8020c50 <__ieee754_pow+0x260>)
 8020c02:	dd0c      	ble.n	8020c1e <__ieee754_pow+0x22e>
 8020c04:	429c      	cmp	r4, r3
 8020c06:	dc0f      	bgt.n	8020c28 <__ieee754_pow+0x238>
 8020c08:	f1b9 0f00 	cmp.w	r9, #0
 8020c0c:	da0f      	bge.n	8020c2e <__ieee754_pow+0x23e>
 8020c0e:	2000      	movs	r0, #0
 8020c10:	b009      	add	sp, #36	; 0x24
 8020c12:	ecbd 8b06 	vpop	{d8-d10}
 8020c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c1a:	f001 b812 	b.w	8021c42 <__math_oflow>
 8020c1e:	429c      	cmp	r4, r3
 8020c20:	dbf2      	blt.n	8020c08 <__ieee754_pow+0x218>
 8020c22:	4b0a      	ldr	r3, [pc, #40]	; (8020c4c <__ieee754_pow+0x25c>)
 8020c24:	429c      	cmp	r4, r3
 8020c26:	dd19      	ble.n	8020c5c <__ieee754_pow+0x26c>
 8020c28:	f1b9 0f00 	cmp.w	r9, #0
 8020c2c:	dcef      	bgt.n	8020c0e <__ieee754_pow+0x21e>
 8020c2e:	2000      	movs	r0, #0
 8020c30:	b009      	add	sp, #36	; 0x24
 8020c32:	ecbd 8b06 	vpop	{d8-d10}
 8020c36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c3a:	f000 bff9 	b.w	8021c30 <__math_uflow>
 8020c3e:	bf00      	nop
 8020c40:	fff00000 	.word	0xfff00000
 8020c44:	7ff00000 	.word	0x7ff00000
 8020c48:	433fffff 	.word	0x433fffff
 8020c4c:	3ff00000 	.word	0x3ff00000
 8020c50:	3fefffff 	.word	0x3fefffff
 8020c54:	3fe00000 	.word	0x3fe00000
 8020c58:	41e00000 	.word	0x41e00000
 8020c5c:	2200      	movs	r2, #0
 8020c5e:	4b60      	ldr	r3, [pc, #384]	; (8020de0 <__ieee754_pow+0x3f0>)
 8020c60:	f7df fb04 	bl	800026c <__aeabi_dsub>
 8020c64:	4604      	mov	r4, r0
 8020c66:	460d      	mov	r5, r1
 8020c68:	a353      	add	r3, pc, #332	; (adr r3, 8020db8 <__ieee754_pow+0x3c8>)
 8020c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c6e:	f7df fcb5 	bl	80005dc <__aeabi_dmul>
 8020c72:	4606      	mov	r6, r0
 8020c74:	460f      	mov	r7, r1
 8020c76:	4620      	mov	r0, r4
 8020c78:	4629      	mov	r1, r5
 8020c7a:	a351      	add	r3, pc, #324	; (adr r3, 8020dc0 <__ieee754_pow+0x3d0>)
 8020c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c80:	f7df fcac 	bl	80005dc <__aeabi_dmul>
 8020c84:	2200      	movs	r2, #0
 8020c86:	4682      	mov	sl, r0
 8020c88:	468b      	mov	fp, r1
 8020c8a:	4b56      	ldr	r3, [pc, #344]	; (8020de4 <__ieee754_pow+0x3f4>)
 8020c8c:	4620      	mov	r0, r4
 8020c8e:	4629      	mov	r1, r5
 8020c90:	f7df fca4 	bl	80005dc <__aeabi_dmul>
 8020c94:	4602      	mov	r2, r0
 8020c96:	460b      	mov	r3, r1
 8020c98:	a14b      	add	r1, pc, #300	; (adr r1, 8020dc8 <__ieee754_pow+0x3d8>)
 8020c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020c9e:	f7df fae5 	bl	800026c <__aeabi_dsub>
 8020ca2:	4622      	mov	r2, r4
 8020ca4:	462b      	mov	r3, r5
 8020ca6:	f7df fc99 	bl	80005dc <__aeabi_dmul>
 8020caa:	4602      	mov	r2, r0
 8020cac:	460b      	mov	r3, r1
 8020cae:	2000      	movs	r0, #0
 8020cb0:	494d      	ldr	r1, [pc, #308]	; (8020de8 <__ieee754_pow+0x3f8>)
 8020cb2:	f7df fadb 	bl	800026c <__aeabi_dsub>
 8020cb6:	4680      	mov	r8, r0
 8020cb8:	4689      	mov	r9, r1
 8020cba:	4622      	mov	r2, r4
 8020cbc:	462b      	mov	r3, r5
 8020cbe:	4620      	mov	r0, r4
 8020cc0:	4629      	mov	r1, r5
 8020cc2:	f7df fc8b 	bl	80005dc <__aeabi_dmul>
 8020cc6:	4602      	mov	r2, r0
 8020cc8:	460b      	mov	r3, r1
 8020cca:	4640      	mov	r0, r8
 8020ccc:	4649      	mov	r1, r9
 8020cce:	f7df fc85 	bl	80005dc <__aeabi_dmul>
 8020cd2:	a33f      	add	r3, pc, #252	; (adr r3, 8020dd0 <__ieee754_pow+0x3e0>)
 8020cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cd8:	f7df fc80 	bl	80005dc <__aeabi_dmul>
 8020cdc:	4602      	mov	r2, r0
 8020cde:	460b      	mov	r3, r1
 8020ce0:	4650      	mov	r0, sl
 8020ce2:	4659      	mov	r1, fp
 8020ce4:	f7df fac2 	bl	800026c <__aeabi_dsub>
 8020ce8:	4602      	mov	r2, r0
 8020cea:	460b      	mov	r3, r1
 8020cec:	4680      	mov	r8, r0
 8020cee:	4689      	mov	r9, r1
 8020cf0:	4630      	mov	r0, r6
 8020cf2:	4639      	mov	r1, r7
 8020cf4:	f7df fabc 	bl	8000270 <__adddf3>
 8020cf8:	2000      	movs	r0, #0
 8020cfa:	4632      	mov	r2, r6
 8020cfc:	463b      	mov	r3, r7
 8020cfe:	4604      	mov	r4, r0
 8020d00:	460d      	mov	r5, r1
 8020d02:	f7df fab3 	bl	800026c <__aeabi_dsub>
 8020d06:	4602      	mov	r2, r0
 8020d08:	460b      	mov	r3, r1
 8020d0a:	4640      	mov	r0, r8
 8020d0c:	4649      	mov	r1, r9
 8020d0e:	f7df faad 	bl	800026c <__aeabi_dsub>
 8020d12:	9b04      	ldr	r3, [sp, #16]
 8020d14:	9a06      	ldr	r2, [sp, #24]
 8020d16:	4682      	mov	sl, r0
 8020d18:	3b01      	subs	r3, #1
 8020d1a:	468b      	mov	fp, r1
 8020d1c:	4313      	orrs	r3, r2
 8020d1e:	f040 81e7 	bne.w	80210f0 <__ieee754_pow+0x700>
 8020d22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8020dd8 <__ieee754_pow+0x3e8>
 8020d26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8020d2a:	2600      	movs	r6, #0
 8020d2c:	eeb0 8a47 	vmov.f32	s16, s14
 8020d30:	eef0 8a67 	vmov.f32	s17, s15
 8020d34:	463b      	mov	r3, r7
 8020d36:	4632      	mov	r2, r6
 8020d38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020d3c:	f7df fa96 	bl	800026c <__aeabi_dsub>
 8020d40:	4622      	mov	r2, r4
 8020d42:	462b      	mov	r3, r5
 8020d44:	f7df fc4a 	bl	80005dc <__aeabi_dmul>
 8020d48:	4680      	mov	r8, r0
 8020d4a:	4689      	mov	r9, r1
 8020d4c:	4650      	mov	r0, sl
 8020d4e:	4659      	mov	r1, fp
 8020d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020d54:	f7df fc42 	bl	80005dc <__aeabi_dmul>
 8020d58:	4602      	mov	r2, r0
 8020d5a:	460b      	mov	r3, r1
 8020d5c:	4640      	mov	r0, r8
 8020d5e:	4649      	mov	r1, r9
 8020d60:	f7df fa86 	bl	8000270 <__adddf3>
 8020d64:	4680      	mov	r8, r0
 8020d66:	4689      	mov	r9, r1
 8020d68:	4632      	mov	r2, r6
 8020d6a:	463b      	mov	r3, r7
 8020d6c:	4620      	mov	r0, r4
 8020d6e:	4629      	mov	r1, r5
 8020d70:	f7df fc34 	bl	80005dc <__aeabi_dmul>
 8020d74:	460b      	mov	r3, r1
 8020d76:	4604      	mov	r4, r0
 8020d78:	460d      	mov	r5, r1
 8020d7a:	4602      	mov	r2, r0
 8020d7c:	4649      	mov	r1, r9
 8020d7e:	4640      	mov	r0, r8
 8020d80:	f7df fa76 	bl	8000270 <__adddf3>
 8020d84:	4b19      	ldr	r3, [pc, #100]	; (8020dec <__ieee754_pow+0x3fc>)
 8020d86:	4606      	mov	r6, r0
 8020d88:	460f      	mov	r7, r1
 8020d8a:	4299      	cmp	r1, r3
 8020d8c:	468b      	mov	fp, r1
 8020d8e:	ec45 4b19 	vmov	d9, r4, r5
 8020d92:	f340 82f1 	ble.w	8021378 <__ieee754_pow+0x988>
 8020d96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8020d9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8020d9e:	4303      	orrs	r3, r0
 8020da0:	f000 81e4 	beq.w	802116c <__ieee754_pow+0x77c>
 8020da4:	2200      	movs	r2, #0
 8020da6:	2300      	movs	r3, #0
 8020da8:	ec51 0b18 	vmov	r0, r1, d8
 8020dac:	f7df fe88 	bl	8000ac0 <__aeabi_dcmplt>
 8020db0:	3800      	subs	r0, #0
 8020db2:	bf18      	it	ne
 8020db4:	2001      	movne	r0, #1
 8020db6:	e72b      	b.n	8020c10 <__ieee754_pow+0x220>
 8020db8:	60000000 	.word	0x60000000
 8020dbc:	3ff71547 	.word	0x3ff71547
 8020dc0:	f85ddf44 	.word	0xf85ddf44
 8020dc4:	3e54ae0b 	.word	0x3e54ae0b
 8020dc8:	55555555 	.word	0x55555555
 8020dcc:	3fd55555 	.word	0x3fd55555
 8020dd0:	652b82fe 	.word	0x652b82fe
 8020dd4:	3ff71547 	.word	0x3ff71547
 8020dd8:	00000000 	.word	0x00000000
 8020ddc:	bff00000 	.word	0xbff00000
 8020de0:	3ff00000 	.word	0x3ff00000
 8020de4:	3fd00000 	.word	0x3fd00000
 8020de8:	3fe00000 	.word	0x3fe00000
 8020dec:	408fffff 	.word	0x408fffff
 8020df0:	4bd5      	ldr	r3, [pc, #852]	; (8021148 <__ieee754_pow+0x758>)
 8020df2:	2200      	movs	r2, #0
 8020df4:	402b      	ands	r3, r5
 8020df6:	b92b      	cbnz	r3, 8020e04 <__ieee754_pow+0x414>
 8020df8:	4bd4      	ldr	r3, [pc, #848]	; (802114c <__ieee754_pow+0x75c>)
 8020dfa:	f7df fbef 	bl	80005dc <__aeabi_dmul>
 8020dfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8020e02:	460c      	mov	r4, r1
 8020e04:	1523      	asrs	r3, r4, #20
 8020e06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8020e0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020e0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020e12:	4413      	add	r3, r2
 8020e14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020e18:	9305      	str	r3, [sp, #20]
 8020e1a:	4bcd      	ldr	r3, [pc, #820]	; (8021150 <__ieee754_pow+0x760>)
 8020e1c:	429c      	cmp	r4, r3
 8020e1e:	dd08      	ble.n	8020e32 <__ieee754_pow+0x442>
 8020e20:	4bcc      	ldr	r3, [pc, #816]	; (8021154 <__ieee754_pow+0x764>)
 8020e22:	429c      	cmp	r4, r3
 8020e24:	f340 8162 	ble.w	80210ec <__ieee754_pow+0x6fc>
 8020e28:	9b05      	ldr	r3, [sp, #20]
 8020e2a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8020e2e:	3301      	adds	r3, #1
 8020e30:	9305      	str	r3, [sp, #20]
 8020e32:	2400      	movs	r4, #0
 8020e34:	00e3      	lsls	r3, r4, #3
 8020e36:	4682      	mov	sl, r0
 8020e38:	4629      	mov	r1, r5
 8020e3a:	46ab      	mov	fp, r5
 8020e3c:	9307      	str	r3, [sp, #28]
 8020e3e:	4bc6      	ldr	r3, [pc, #792]	; (8021158 <__ieee754_pow+0x768>)
 8020e40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020e44:	ed93 7b00 	vldr	d7, [r3]
 8020e48:	eeb0 9a47 	vmov.f32	s18, s14
 8020e4c:	eef0 9a67 	vmov.f32	s19, s15
 8020e50:	ec53 2b17 	vmov	r2, r3, d7
 8020e54:	f7df fa0a 	bl	800026c <__aeabi_dsub>
 8020e58:	4652      	mov	r2, sl
 8020e5a:	4606      	mov	r6, r0
 8020e5c:	460f      	mov	r7, r1
 8020e5e:	462b      	mov	r3, r5
 8020e60:	106d      	asrs	r5, r5, #1
 8020e62:	ec51 0b19 	vmov	r0, r1, d9
 8020e66:	f7df fa03 	bl	8000270 <__adddf3>
 8020e6a:	4602      	mov	r2, r0
 8020e6c:	460b      	mov	r3, r1
 8020e6e:	2000      	movs	r0, #0
 8020e70:	49ba      	ldr	r1, [pc, #744]	; (802115c <__ieee754_pow+0x76c>)
 8020e72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8020e76:	f7df fcdb 	bl	8000830 <__aeabi_ddiv>
 8020e7a:	4602      	mov	r2, r0
 8020e7c:	460b      	mov	r3, r1
 8020e7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8020e82:	ec41 0b1a 	vmov	d10, r0, r1
 8020e86:	4630      	mov	r0, r6
 8020e88:	4639      	mov	r1, r7
 8020e8a:	f7df fba7 	bl	80005dc <__aeabi_dmul>
 8020e8e:	2300      	movs	r3, #0
 8020e90:	2200      	movs	r2, #0
 8020e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020e96:	9302      	str	r3, [sp, #8]
 8020e98:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8020e9c:	4614      	mov	r4, r2
 8020e9e:	461d      	mov	r5, r3
 8020ea0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8020ea4:	ec41 0b18 	vmov	d8, r0, r1
 8020ea8:	4640      	mov	r0, r8
 8020eaa:	4649      	mov	r1, r9
 8020eac:	f7df fb96 	bl	80005dc <__aeabi_dmul>
 8020eb0:	4602      	mov	r2, r0
 8020eb2:	460b      	mov	r3, r1
 8020eb4:	4630      	mov	r0, r6
 8020eb6:	4639      	mov	r1, r7
 8020eb8:	f7df f9d8 	bl	800026c <__aeabi_dsub>
 8020ebc:	4606      	mov	r6, r0
 8020ebe:	460f      	mov	r7, r1
 8020ec0:	4620      	mov	r0, r4
 8020ec2:	4629      	mov	r1, r5
 8020ec4:	ec53 2b19 	vmov	r2, r3, d9
 8020ec8:	f7df f9d0 	bl	800026c <__aeabi_dsub>
 8020ecc:	4602      	mov	r2, r0
 8020ece:	460b      	mov	r3, r1
 8020ed0:	4650      	mov	r0, sl
 8020ed2:	4659      	mov	r1, fp
 8020ed4:	f7df f9ca 	bl	800026c <__aeabi_dsub>
 8020ed8:	4642      	mov	r2, r8
 8020eda:	464b      	mov	r3, r9
 8020edc:	f7df fb7e 	bl	80005dc <__aeabi_dmul>
 8020ee0:	4602      	mov	r2, r0
 8020ee2:	460b      	mov	r3, r1
 8020ee4:	4630      	mov	r0, r6
 8020ee6:	4639      	mov	r1, r7
 8020ee8:	f7df f9c0 	bl	800026c <__aeabi_dsub>
 8020eec:	ec53 2b1a 	vmov	r2, r3, d10
 8020ef0:	f7df fb74 	bl	80005dc <__aeabi_dmul>
 8020ef4:	ec53 2b18 	vmov	r2, r3, d8
 8020ef8:	ec41 0b19 	vmov	d9, r0, r1
 8020efc:	ec51 0b18 	vmov	r0, r1, d8
 8020f00:	f7df fb6c 	bl	80005dc <__aeabi_dmul>
 8020f04:	4604      	mov	r4, r0
 8020f06:	460d      	mov	r5, r1
 8020f08:	a37b      	add	r3, pc, #492	; (adr r3, 80210f8 <__ieee754_pow+0x708>)
 8020f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f0e:	f7df fb65 	bl	80005dc <__aeabi_dmul>
 8020f12:	a37b      	add	r3, pc, #492	; (adr r3, 8021100 <__ieee754_pow+0x710>)
 8020f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f18:	f7df f9aa 	bl	8000270 <__adddf3>
 8020f1c:	4622      	mov	r2, r4
 8020f1e:	462b      	mov	r3, r5
 8020f20:	f7df fb5c 	bl	80005dc <__aeabi_dmul>
 8020f24:	a378      	add	r3, pc, #480	; (adr r3, 8021108 <__ieee754_pow+0x718>)
 8020f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f2a:	f7df f9a1 	bl	8000270 <__adddf3>
 8020f2e:	4622      	mov	r2, r4
 8020f30:	462b      	mov	r3, r5
 8020f32:	f7df fb53 	bl	80005dc <__aeabi_dmul>
 8020f36:	a376      	add	r3, pc, #472	; (adr r3, 8021110 <__ieee754_pow+0x720>)
 8020f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f3c:	f7df f998 	bl	8000270 <__adddf3>
 8020f40:	4622      	mov	r2, r4
 8020f42:	462b      	mov	r3, r5
 8020f44:	f7df fb4a 	bl	80005dc <__aeabi_dmul>
 8020f48:	a373      	add	r3, pc, #460	; (adr r3, 8021118 <__ieee754_pow+0x728>)
 8020f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f4e:	f7df f98f 	bl	8000270 <__adddf3>
 8020f52:	4622      	mov	r2, r4
 8020f54:	462b      	mov	r3, r5
 8020f56:	f7df fb41 	bl	80005dc <__aeabi_dmul>
 8020f5a:	a371      	add	r3, pc, #452	; (adr r3, 8021120 <__ieee754_pow+0x730>)
 8020f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f60:	f7df f986 	bl	8000270 <__adddf3>
 8020f64:	4606      	mov	r6, r0
 8020f66:	460f      	mov	r7, r1
 8020f68:	4622      	mov	r2, r4
 8020f6a:	462b      	mov	r3, r5
 8020f6c:	4620      	mov	r0, r4
 8020f6e:	4629      	mov	r1, r5
 8020f70:	f7df fb34 	bl	80005dc <__aeabi_dmul>
 8020f74:	4602      	mov	r2, r0
 8020f76:	460b      	mov	r3, r1
 8020f78:	4630      	mov	r0, r6
 8020f7a:	4639      	mov	r1, r7
 8020f7c:	f7df fb2e 	bl	80005dc <__aeabi_dmul>
 8020f80:	4642      	mov	r2, r8
 8020f82:	4604      	mov	r4, r0
 8020f84:	460d      	mov	r5, r1
 8020f86:	464b      	mov	r3, r9
 8020f88:	ec51 0b18 	vmov	r0, r1, d8
 8020f8c:	f7df f970 	bl	8000270 <__adddf3>
 8020f90:	ec53 2b19 	vmov	r2, r3, d9
 8020f94:	f7df fb22 	bl	80005dc <__aeabi_dmul>
 8020f98:	4622      	mov	r2, r4
 8020f9a:	462b      	mov	r3, r5
 8020f9c:	f7df f968 	bl	8000270 <__adddf3>
 8020fa0:	4642      	mov	r2, r8
 8020fa2:	4682      	mov	sl, r0
 8020fa4:	468b      	mov	fp, r1
 8020fa6:	464b      	mov	r3, r9
 8020fa8:	4640      	mov	r0, r8
 8020faa:	4649      	mov	r1, r9
 8020fac:	f7df fb16 	bl	80005dc <__aeabi_dmul>
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	4b6b      	ldr	r3, [pc, #428]	; (8021160 <__ieee754_pow+0x770>)
 8020fb4:	4606      	mov	r6, r0
 8020fb6:	460f      	mov	r7, r1
 8020fb8:	f7df f95a 	bl	8000270 <__adddf3>
 8020fbc:	4652      	mov	r2, sl
 8020fbe:	465b      	mov	r3, fp
 8020fc0:	f7df f956 	bl	8000270 <__adddf3>
 8020fc4:	2000      	movs	r0, #0
 8020fc6:	460d      	mov	r5, r1
 8020fc8:	460b      	mov	r3, r1
 8020fca:	4604      	mov	r4, r0
 8020fcc:	4602      	mov	r2, r0
 8020fce:	4649      	mov	r1, r9
 8020fd0:	4640      	mov	r0, r8
 8020fd2:	f7df fb03 	bl	80005dc <__aeabi_dmul>
 8020fd6:	2200      	movs	r2, #0
 8020fd8:	4680      	mov	r8, r0
 8020fda:	4689      	mov	r9, r1
 8020fdc:	4b60      	ldr	r3, [pc, #384]	; (8021160 <__ieee754_pow+0x770>)
 8020fde:	4620      	mov	r0, r4
 8020fe0:	4629      	mov	r1, r5
 8020fe2:	f7df f943 	bl	800026c <__aeabi_dsub>
 8020fe6:	4632      	mov	r2, r6
 8020fe8:	463b      	mov	r3, r7
 8020fea:	f7df f93f 	bl	800026c <__aeabi_dsub>
 8020fee:	4602      	mov	r2, r0
 8020ff0:	460b      	mov	r3, r1
 8020ff2:	4650      	mov	r0, sl
 8020ff4:	4659      	mov	r1, fp
 8020ff6:	f7df f939 	bl	800026c <__aeabi_dsub>
 8020ffa:	ec53 2b18 	vmov	r2, r3, d8
 8020ffe:	f7df faed 	bl	80005dc <__aeabi_dmul>
 8021002:	4606      	mov	r6, r0
 8021004:	460f      	mov	r7, r1
 8021006:	4622      	mov	r2, r4
 8021008:	462b      	mov	r3, r5
 802100a:	ec51 0b19 	vmov	r0, r1, d9
 802100e:	f7df fae5 	bl	80005dc <__aeabi_dmul>
 8021012:	4602      	mov	r2, r0
 8021014:	460b      	mov	r3, r1
 8021016:	4630      	mov	r0, r6
 8021018:	4639      	mov	r1, r7
 802101a:	f7df f929 	bl	8000270 <__adddf3>
 802101e:	4606      	mov	r6, r0
 8021020:	460f      	mov	r7, r1
 8021022:	4602      	mov	r2, r0
 8021024:	460b      	mov	r3, r1
 8021026:	4640      	mov	r0, r8
 8021028:	4649      	mov	r1, r9
 802102a:	f7df f921 	bl	8000270 <__adddf3>
 802102e:	2000      	movs	r0, #0
 8021030:	460d      	mov	r5, r1
 8021032:	4604      	mov	r4, r0
 8021034:	a33c      	add	r3, pc, #240	; (adr r3, 8021128 <__ieee754_pow+0x738>)
 8021036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802103a:	f7df facf 	bl	80005dc <__aeabi_dmul>
 802103e:	4642      	mov	r2, r8
 8021040:	464b      	mov	r3, r9
 8021042:	ec41 0b18 	vmov	d8, r0, r1
 8021046:	4620      	mov	r0, r4
 8021048:	4629      	mov	r1, r5
 802104a:	f7df f90f 	bl	800026c <__aeabi_dsub>
 802104e:	4602      	mov	r2, r0
 8021050:	460b      	mov	r3, r1
 8021052:	4630      	mov	r0, r6
 8021054:	4639      	mov	r1, r7
 8021056:	f7df f909 	bl	800026c <__aeabi_dsub>
 802105a:	a335      	add	r3, pc, #212	; (adr r3, 8021130 <__ieee754_pow+0x740>)
 802105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021060:	f7df fabc 	bl	80005dc <__aeabi_dmul>
 8021064:	4606      	mov	r6, r0
 8021066:	460f      	mov	r7, r1
 8021068:	4620      	mov	r0, r4
 802106a:	4629      	mov	r1, r5
 802106c:	a332      	add	r3, pc, #200	; (adr r3, 8021138 <__ieee754_pow+0x748>)
 802106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021072:	f7df fab3 	bl	80005dc <__aeabi_dmul>
 8021076:	4602      	mov	r2, r0
 8021078:	460b      	mov	r3, r1
 802107a:	4630      	mov	r0, r6
 802107c:	4639      	mov	r1, r7
 802107e:	f7df f8f7 	bl	8000270 <__adddf3>
 8021082:	9a07      	ldr	r2, [sp, #28]
 8021084:	4b37      	ldr	r3, [pc, #220]	; (8021164 <__ieee754_pow+0x774>)
 8021086:	4413      	add	r3, r2
 8021088:	e9d3 2300 	ldrd	r2, r3, [r3]
 802108c:	f7df f8f0 	bl	8000270 <__adddf3>
 8021090:	4682      	mov	sl, r0
 8021092:	9805      	ldr	r0, [sp, #20]
 8021094:	468b      	mov	fp, r1
 8021096:	f7df fa37 	bl	8000508 <__aeabi_i2d>
 802109a:	9a07      	ldr	r2, [sp, #28]
 802109c:	4b32      	ldr	r3, [pc, #200]	; (8021168 <__ieee754_pow+0x778>)
 802109e:	4606      	mov	r6, r0
 80210a0:	460f      	mov	r7, r1
 80210a2:	4413      	add	r3, r2
 80210a4:	4652      	mov	r2, sl
 80210a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80210aa:	ec51 0b18 	vmov	r0, r1, d8
 80210ae:	465b      	mov	r3, fp
 80210b0:	f7df f8de 	bl	8000270 <__adddf3>
 80210b4:	4642      	mov	r2, r8
 80210b6:	464b      	mov	r3, r9
 80210b8:	f7df f8da 	bl	8000270 <__adddf3>
 80210bc:	4632      	mov	r2, r6
 80210be:	463b      	mov	r3, r7
 80210c0:	f7df f8d6 	bl	8000270 <__adddf3>
 80210c4:	2000      	movs	r0, #0
 80210c6:	4632      	mov	r2, r6
 80210c8:	463b      	mov	r3, r7
 80210ca:	4604      	mov	r4, r0
 80210cc:	460d      	mov	r5, r1
 80210ce:	f7df f8cd 	bl	800026c <__aeabi_dsub>
 80210d2:	4642      	mov	r2, r8
 80210d4:	464b      	mov	r3, r9
 80210d6:	f7df f8c9 	bl	800026c <__aeabi_dsub>
 80210da:	ec53 2b18 	vmov	r2, r3, d8
 80210de:	f7df f8c5 	bl	800026c <__aeabi_dsub>
 80210e2:	4602      	mov	r2, r0
 80210e4:	460b      	mov	r3, r1
 80210e6:	4650      	mov	r0, sl
 80210e8:	4659      	mov	r1, fp
 80210ea:	e610      	b.n	8020d0e <__ieee754_pow+0x31e>
 80210ec:	2401      	movs	r4, #1
 80210ee:	e6a1      	b.n	8020e34 <__ieee754_pow+0x444>
 80210f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8021140 <__ieee754_pow+0x750>
 80210f4:	e617      	b.n	8020d26 <__ieee754_pow+0x336>
 80210f6:	bf00      	nop
 80210f8:	4a454eef 	.word	0x4a454eef
 80210fc:	3fca7e28 	.word	0x3fca7e28
 8021100:	93c9db65 	.word	0x93c9db65
 8021104:	3fcd864a 	.word	0x3fcd864a
 8021108:	a91d4101 	.word	0xa91d4101
 802110c:	3fd17460 	.word	0x3fd17460
 8021110:	518f264d 	.word	0x518f264d
 8021114:	3fd55555 	.word	0x3fd55555
 8021118:	db6fabff 	.word	0xdb6fabff
 802111c:	3fdb6db6 	.word	0x3fdb6db6
 8021120:	33333303 	.word	0x33333303
 8021124:	3fe33333 	.word	0x3fe33333
 8021128:	e0000000 	.word	0xe0000000
 802112c:	3feec709 	.word	0x3feec709
 8021130:	dc3a03fd 	.word	0xdc3a03fd
 8021134:	3feec709 	.word	0x3feec709
 8021138:	145b01f5 	.word	0x145b01f5
 802113c:	be3e2fe0 	.word	0xbe3e2fe0
 8021140:	00000000 	.word	0x00000000
 8021144:	3ff00000 	.word	0x3ff00000
 8021148:	7ff00000 	.word	0x7ff00000
 802114c:	43400000 	.word	0x43400000
 8021150:	0003988e 	.word	0x0003988e
 8021154:	000bb679 	.word	0x000bb679
 8021158:	08023f38 	.word	0x08023f38
 802115c:	3ff00000 	.word	0x3ff00000
 8021160:	40080000 	.word	0x40080000
 8021164:	08023f58 	.word	0x08023f58
 8021168:	08023f48 	.word	0x08023f48
 802116c:	a3b5      	add	r3, pc, #724	; (adr r3, 8021444 <__ieee754_pow+0xa54>)
 802116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021172:	4640      	mov	r0, r8
 8021174:	4649      	mov	r1, r9
 8021176:	f7df f87b 	bl	8000270 <__adddf3>
 802117a:	4622      	mov	r2, r4
 802117c:	462b      	mov	r3, r5
 802117e:	ec41 0b1a 	vmov	d10, r0, r1
 8021182:	4630      	mov	r0, r6
 8021184:	4639      	mov	r1, r7
 8021186:	f7df f871 	bl	800026c <__aeabi_dsub>
 802118a:	4602      	mov	r2, r0
 802118c:	460b      	mov	r3, r1
 802118e:	ec51 0b1a 	vmov	r0, r1, d10
 8021192:	f7df fcb3 	bl	8000afc <__aeabi_dcmpgt>
 8021196:	2800      	cmp	r0, #0
 8021198:	f47f ae04 	bne.w	8020da4 <__ieee754_pow+0x3b4>
 802119c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80211a0:	4aa3      	ldr	r2, [pc, #652]	; (8021430 <__ieee754_pow+0xa40>)
 80211a2:	4293      	cmp	r3, r2
 80211a4:	f340 8108 	ble.w	80213b8 <__ieee754_pow+0x9c8>
 80211a8:	151b      	asrs	r3, r3, #20
 80211aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80211ae:	48a1      	ldr	r0, [pc, #644]	; (8021434 <__ieee754_pow+0xa44>)
 80211b0:	f1bb 0f00 	cmp.w	fp, #0
 80211b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80211b8:	f04f 0200 	mov.w	r2, #0
 80211bc:	fa4a fa03 	asr.w	sl, sl, r3
 80211c0:	44da      	add	sl, fp
 80211c2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80211c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80211ca:	fa40 f001 	asr.w	r0, r0, r1
 80211ce:	f1c1 0114 	rsb	r1, r1, #20
 80211d2:	ea00 030a 	and.w	r3, r0, sl
 80211d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80211da:	4620      	mov	r0, r4
 80211dc:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80211e0:	fa4a fa01 	asr.w	sl, sl, r1
 80211e4:	4629      	mov	r1, r5
 80211e6:	bfb8      	it	lt
 80211e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80211ec:	f7df f83e 	bl	800026c <__aeabi_dsub>
 80211f0:	ec41 0b19 	vmov	d9, r0, r1
 80211f4:	4642      	mov	r2, r8
 80211f6:	464b      	mov	r3, r9
 80211f8:	ec51 0b19 	vmov	r0, r1, d9
 80211fc:	f7df f838 	bl	8000270 <__adddf3>
 8021200:	2000      	movs	r0, #0
 8021202:	460d      	mov	r5, r1
 8021204:	4604      	mov	r4, r0
 8021206:	a37a      	add	r3, pc, #488	; (adr r3, 80213f0 <__ieee754_pow+0xa00>)
 8021208:	e9d3 2300 	ldrd	r2, r3, [r3]
 802120c:	f7df f9e6 	bl	80005dc <__aeabi_dmul>
 8021210:	4606      	mov	r6, r0
 8021212:	460f      	mov	r7, r1
 8021214:	4620      	mov	r0, r4
 8021216:	4629      	mov	r1, r5
 8021218:	ec53 2b19 	vmov	r2, r3, d9
 802121c:	f7df f826 	bl	800026c <__aeabi_dsub>
 8021220:	4602      	mov	r2, r0
 8021222:	460b      	mov	r3, r1
 8021224:	4640      	mov	r0, r8
 8021226:	4649      	mov	r1, r9
 8021228:	f7df f820 	bl	800026c <__aeabi_dsub>
 802122c:	a372      	add	r3, pc, #456	; (adr r3, 80213f8 <__ieee754_pow+0xa08>)
 802122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021232:	f7df f9d3 	bl	80005dc <__aeabi_dmul>
 8021236:	4680      	mov	r8, r0
 8021238:	4689      	mov	r9, r1
 802123a:	4620      	mov	r0, r4
 802123c:	4629      	mov	r1, r5
 802123e:	a370      	add	r3, pc, #448	; (adr r3, 8021400 <__ieee754_pow+0xa10>)
 8021240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021244:	f7df f9ca 	bl	80005dc <__aeabi_dmul>
 8021248:	4602      	mov	r2, r0
 802124a:	460b      	mov	r3, r1
 802124c:	4640      	mov	r0, r8
 802124e:	4649      	mov	r1, r9
 8021250:	f7df f80e 	bl	8000270 <__adddf3>
 8021254:	4604      	mov	r4, r0
 8021256:	460d      	mov	r5, r1
 8021258:	4602      	mov	r2, r0
 802125a:	460b      	mov	r3, r1
 802125c:	4630      	mov	r0, r6
 802125e:	4639      	mov	r1, r7
 8021260:	f7df f806 	bl	8000270 <__adddf3>
 8021264:	4632      	mov	r2, r6
 8021266:	4680      	mov	r8, r0
 8021268:	4689      	mov	r9, r1
 802126a:	463b      	mov	r3, r7
 802126c:	f7de fffe 	bl	800026c <__aeabi_dsub>
 8021270:	4602      	mov	r2, r0
 8021272:	460b      	mov	r3, r1
 8021274:	4620      	mov	r0, r4
 8021276:	4629      	mov	r1, r5
 8021278:	f7de fff8 	bl	800026c <__aeabi_dsub>
 802127c:	4642      	mov	r2, r8
 802127e:	4606      	mov	r6, r0
 8021280:	460f      	mov	r7, r1
 8021282:	464b      	mov	r3, r9
 8021284:	4640      	mov	r0, r8
 8021286:	4649      	mov	r1, r9
 8021288:	f7df f9a8 	bl	80005dc <__aeabi_dmul>
 802128c:	4604      	mov	r4, r0
 802128e:	460d      	mov	r5, r1
 8021290:	a35d      	add	r3, pc, #372	; (adr r3, 8021408 <__ieee754_pow+0xa18>)
 8021292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021296:	f7df f9a1 	bl	80005dc <__aeabi_dmul>
 802129a:	a35d      	add	r3, pc, #372	; (adr r3, 8021410 <__ieee754_pow+0xa20>)
 802129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212a0:	f7de ffe4 	bl	800026c <__aeabi_dsub>
 80212a4:	4622      	mov	r2, r4
 80212a6:	462b      	mov	r3, r5
 80212a8:	f7df f998 	bl	80005dc <__aeabi_dmul>
 80212ac:	a35a      	add	r3, pc, #360	; (adr r3, 8021418 <__ieee754_pow+0xa28>)
 80212ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212b2:	f7de ffdd 	bl	8000270 <__adddf3>
 80212b6:	4622      	mov	r2, r4
 80212b8:	462b      	mov	r3, r5
 80212ba:	f7df f98f 	bl	80005dc <__aeabi_dmul>
 80212be:	a358      	add	r3, pc, #352	; (adr r3, 8021420 <__ieee754_pow+0xa30>)
 80212c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212c4:	f7de ffd2 	bl	800026c <__aeabi_dsub>
 80212c8:	4622      	mov	r2, r4
 80212ca:	462b      	mov	r3, r5
 80212cc:	f7df f986 	bl	80005dc <__aeabi_dmul>
 80212d0:	a355      	add	r3, pc, #340	; (adr r3, 8021428 <__ieee754_pow+0xa38>)
 80212d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212d6:	f7de ffcb 	bl	8000270 <__adddf3>
 80212da:	4622      	mov	r2, r4
 80212dc:	462b      	mov	r3, r5
 80212de:	f7df f97d 	bl	80005dc <__aeabi_dmul>
 80212e2:	4602      	mov	r2, r0
 80212e4:	460b      	mov	r3, r1
 80212e6:	4640      	mov	r0, r8
 80212e8:	4649      	mov	r1, r9
 80212ea:	f7de ffbf 	bl	800026c <__aeabi_dsub>
 80212ee:	4604      	mov	r4, r0
 80212f0:	460d      	mov	r5, r1
 80212f2:	4602      	mov	r2, r0
 80212f4:	460b      	mov	r3, r1
 80212f6:	4640      	mov	r0, r8
 80212f8:	4649      	mov	r1, r9
 80212fa:	f7df f96f 	bl	80005dc <__aeabi_dmul>
 80212fe:	2200      	movs	r2, #0
 8021300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021304:	ec41 0b19 	vmov	d9, r0, r1
 8021308:	4620      	mov	r0, r4
 802130a:	4629      	mov	r1, r5
 802130c:	f7de ffae 	bl	800026c <__aeabi_dsub>
 8021310:	4602      	mov	r2, r0
 8021312:	460b      	mov	r3, r1
 8021314:	ec51 0b19 	vmov	r0, r1, d9
 8021318:	f7df fa8a 	bl	8000830 <__aeabi_ddiv>
 802131c:	4632      	mov	r2, r6
 802131e:	4604      	mov	r4, r0
 8021320:	460d      	mov	r5, r1
 8021322:	463b      	mov	r3, r7
 8021324:	4640      	mov	r0, r8
 8021326:	4649      	mov	r1, r9
 8021328:	f7df f958 	bl	80005dc <__aeabi_dmul>
 802132c:	4632      	mov	r2, r6
 802132e:	463b      	mov	r3, r7
 8021330:	f7de ff9e 	bl	8000270 <__adddf3>
 8021334:	4602      	mov	r2, r0
 8021336:	460b      	mov	r3, r1
 8021338:	4620      	mov	r0, r4
 802133a:	4629      	mov	r1, r5
 802133c:	f7de ff96 	bl	800026c <__aeabi_dsub>
 8021340:	4642      	mov	r2, r8
 8021342:	464b      	mov	r3, r9
 8021344:	f7de ff92 	bl	800026c <__aeabi_dsub>
 8021348:	460b      	mov	r3, r1
 802134a:	4602      	mov	r2, r0
 802134c:	493a      	ldr	r1, [pc, #232]	; (8021438 <__ieee754_pow+0xa48>)
 802134e:	2000      	movs	r0, #0
 8021350:	f7de ff8c 	bl	800026c <__aeabi_dsub>
 8021354:	ec41 0b10 	vmov	d0, r0, r1
 8021358:	ee10 3a90 	vmov	r3, s1
 802135c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8021360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8021364:	da2b      	bge.n	80213be <__ieee754_pow+0x9ce>
 8021366:	4650      	mov	r0, sl
 8021368:	f000 fbc6 	bl	8021af8 <scalbn>
 802136c:	ec51 0b10 	vmov	r0, r1, d0
 8021370:	ec53 2b18 	vmov	r2, r3, d8
 8021374:	f7ff bbed 	b.w	8020b52 <__ieee754_pow+0x162>
 8021378:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802137c:	4b2f      	ldr	r3, [pc, #188]	; (802143c <__ieee754_pow+0xa4c>)
 802137e:	429e      	cmp	r6, r3
 8021380:	f77f af0c 	ble.w	802119c <__ieee754_pow+0x7ac>
 8021384:	4b2e      	ldr	r3, [pc, #184]	; (8021440 <__ieee754_pow+0xa50>)
 8021386:	440b      	add	r3, r1
 8021388:	4303      	orrs	r3, r0
 802138a:	d009      	beq.n	80213a0 <__ieee754_pow+0x9b0>
 802138c:	2200      	movs	r2, #0
 802138e:	2300      	movs	r3, #0
 8021390:	ec51 0b18 	vmov	r0, r1, d8
 8021394:	f7df fb94 	bl	8000ac0 <__aeabi_dcmplt>
 8021398:	3800      	subs	r0, #0
 802139a:	bf18      	it	ne
 802139c:	2001      	movne	r0, #1
 802139e:	e447      	b.n	8020c30 <__ieee754_pow+0x240>
 80213a0:	4622      	mov	r2, r4
 80213a2:	462b      	mov	r3, r5
 80213a4:	f7de ff62 	bl	800026c <__aeabi_dsub>
 80213a8:	4642      	mov	r2, r8
 80213aa:	464b      	mov	r3, r9
 80213ac:	f7df fb9c 	bl	8000ae8 <__aeabi_dcmpge>
 80213b0:	2800      	cmp	r0, #0
 80213b2:	f43f aef3 	beq.w	802119c <__ieee754_pow+0x7ac>
 80213b6:	e7e9      	b.n	802138c <__ieee754_pow+0x99c>
 80213b8:	f04f 0a00 	mov.w	sl, #0
 80213bc:	e71a      	b.n	80211f4 <__ieee754_pow+0x804>
 80213be:	ec51 0b10 	vmov	r0, r1, d0
 80213c2:	4619      	mov	r1, r3
 80213c4:	e7d4      	b.n	8021370 <__ieee754_pow+0x980>
 80213c6:	2000      	movs	r0, #0
 80213c8:	491b      	ldr	r1, [pc, #108]	; (8021438 <__ieee754_pow+0xa48>)
 80213ca:	f7ff bb30 	b.w	8020a2e <__ieee754_pow+0x3e>
 80213ce:	2000      	movs	r0, #0
 80213d0:	2100      	movs	r1, #0
 80213d2:	f7ff bb2c 	b.w	8020a2e <__ieee754_pow+0x3e>
 80213d6:	4630      	mov	r0, r6
 80213d8:	4639      	mov	r1, r7
 80213da:	f7ff bb28 	b.w	8020a2e <__ieee754_pow+0x3e>
 80213de:	9204      	str	r2, [sp, #16]
 80213e0:	f7ff bb7a 	b.w	8020ad8 <__ieee754_pow+0xe8>
 80213e4:	2300      	movs	r3, #0
 80213e6:	f7ff bb64 	b.w	8020ab2 <__ieee754_pow+0xc2>
 80213ea:	bf00      	nop
 80213ec:	f3af 8000 	nop.w
 80213f0:	00000000 	.word	0x00000000
 80213f4:	3fe62e43 	.word	0x3fe62e43
 80213f8:	fefa39ef 	.word	0xfefa39ef
 80213fc:	3fe62e42 	.word	0x3fe62e42
 8021400:	0ca86c39 	.word	0x0ca86c39
 8021404:	be205c61 	.word	0xbe205c61
 8021408:	72bea4d0 	.word	0x72bea4d0
 802140c:	3e663769 	.word	0x3e663769
 8021410:	c5d26bf1 	.word	0xc5d26bf1
 8021414:	3ebbbd41 	.word	0x3ebbbd41
 8021418:	af25de2c 	.word	0xaf25de2c
 802141c:	3f11566a 	.word	0x3f11566a
 8021420:	16bebd93 	.word	0x16bebd93
 8021424:	3f66c16c 	.word	0x3f66c16c
 8021428:	5555553e 	.word	0x5555553e
 802142c:	3fc55555 	.word	0x3fc55555
 8021430:	3fe00000 	.word	0x3fe00000
 8021434:	fff00000 	.word	0xfff00000
 8021438:	3ff00000 	.word	0x3ff00000
 802143c:	4090cbff 	.word	0x4090cbff
 8021440:	3f6f3400 	.word	0x3f6f3400
 8021444:	652b82fe 	.word	0x652b82fe
 8021448:	3c971547 	.word	0x3c971547

0802144c <fabs>:
 802144c:	ec51 0b10 	vmov	r0, r1, d0
 8021450:	ee10 2a10 	vmov	r2, s0
 8021454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021458:	ec43 2b10 	vmov	d0, r2, r3
 802145c:	4770      	bx	lr
	...

08021460 <__kernel_cosf>:
 8021460:	ee10 3a10 	vmov	r3, s0
 8021464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802146c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021470:	da05      	bge.n	802147e <__kernel_cosf+0x1e>
 8021472:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8021476:	ee17 2a90 	vmov	r2, s15
 802147a:	2a00      	cmp	r2, #0
 802147c:	d03b      	beq.n	80214f6 <__kernel_cosf+0x96>
 802147e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021482:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80214fc <__kernel_cosf+0x9c>
 8021486:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8021500 <__kernel_cosf+0xa0>
 802148a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 802148e:	4a1d      	ldr	r2, [pc, #116]	; (8021504 <__kernel_cosf+0xa4>)
 8021490:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021494:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8021508 <__kernel_cosf+0xa8>
 8021498:	4293      	cmp	r3, r2
 802149a:	eee6 7a07 	vfma.f32	s15, s12, s14
 802149e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 802150c <__kernel_cosf+0xac>
 80214a2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80214a6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8021510 <__kernel_cosf+0xb0>
 80214aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80214ae:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8021514 <__kernel_cosf+0xb4>
 80214b2:	eea7 6a87 	vfma.f32	s12, s15, s14
 80214b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80214ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80214be:	ee26 6a07 	vmul.f32	s12, s12, s14
 80214c2:	eee7 0a06 	vfma.f32	s1, s14, s12
 80214c6:	dc04      	bgt.n	80214d2 <__kernel_cosf+0x72>
 80214c8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80214cc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80214d0:	4770      	bx	lr
 80214d2:	4a11      	ldr	r2, [pc, #68]	; (8021518 <__kernel_cosf+0xb8>)
 80214d4:	4293      	cmp	r3, r2
 80214d6:	bfd6      	itet	le
 80214d8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80214dc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80214e0:	ee07 3a10 	vmovle	s14, r3
 80214e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80214e8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80214ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80214f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80214f4:	4770      	bx	lr
 80214f6:	eeb0 0a66 	vmov.f32	s0, s13
 80214fa:	4770      	bx	lr
 80214fc:	ad47d74e 	.word	0xad47d74e
 8021500:	310f74f6 	.word	0x310f74f6
 8021504:	3e999999 	.word	0x3e999999
 8021508:	b493f27c 	.word	0xb493f27c
 802150c:	37d00d01 	.word	0x37d00d01
 8021510:	bab60b61 	.word	0xbab60b61
 8021514:	3d2aaaab 	.word	0x3d2aaaab
 8021518:	3f480000 	.word	0x3f480000

0802151c <__kernel_sinf>:
 802151c:	ee10 3a10 	vmov	r3, s0
 8021520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021524:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021528:	da04      	bge.n	8021534 <__kernel_sinf+0x18>
 802152a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802152e:	ee17 3a90 	vmov	r3, s15
 8021532:	b35b      	cbz	r3, 802158c <__kernel_sinf+0x70>
 8021534:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021538:	eddf 7a15 	vldr	s15, [pc, #84]	; 8021590 <__kernel_sinf+0x74>
 802153c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8021594 <__kernel_sinf+0x78>
 8021540:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021544:	eddf 7a14 	vldr	s15, [pc, #80]	; 8021598 <__kernel_sinf+0x7c>
 8021548:	ee60 6a07 	vmul.f32	s13, s0, s14
 802154c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021550:	ed9f 6a12 	vldr	s12, [pc, #72]	; 802159c <__kernel_sinf+0x80>
 8021554:	eea7 6a87 	vfma.f32	s12, s15, s14
 8021558:	eddf 7a11 	vldr	s15, [pc, #68]	; 80215a0 <__kernel_sinf+0x84>
 802155c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021560:	b930      	cbnz	r0, 8021570 <__kernel_sinf+0x54>
 8021562:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80215a4 <__kernel_sinf+0x88>
 8021566:	eea7 6a27 	vfma.f32	s12, s14, s15
 802156a:	eea6 0a26 	vfma.f32	s0, s12, s13
 802156e:	4770      	bx	lr
 8021570:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8021574:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8021578:	eee0 7a86 	vfma.f32	s15, s1, s12
 802157c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8021580:	eddf 7a09 	vldr	s15, [pc, #36]	; 80215a8 <__kernel_sinf+0x8c>
 8021584:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8021588:	ee30 0a60 	vsub.f32	s0, s0, s1
 802158c:	4770      	bx	lr
 802158e:	bf00      	nop
 8021590:	2f2ec9d3 	.word	0x2f2ec9d3
 8021594:	b2d72f34 	.word	0xb2d72f34
 8021598:	3638ef1b 	.word	0x3638ef1b
 802159c:	b9500d01 	.word	0xb9500d01
 80215a0:	3c088889 	.word	0x3c088889
 80215a4:	be2aaaab 	.word	0xbe2aaaab
 80215a8:	3e2aaaab 	.word	0x3e2aaaab

080215ac <__ieee754_atan2f>:
 80215ac:	ee10 2a90 	vmov	r2, s1
 80215b0:	eef0 7a40 	vmov.f32	s15, s0
 80215b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80215b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80215bc:	b510      	push	{r4, lr}
 80215be:	dc06      	bgt.n	80215ce <__ieee754_atan2f+0x22>
 80215c0:	ee10 0a10 	vmov	r0, s0
 80215c4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80215c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80215cc:	dd04      	ble.n	80215d8 <__ieee754_atan2f+0x2c>
 80215ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80215d2:	eeb0 0a67 	vmov.f32	s0, s15
 80215d6:	bd10      	pop	{r4, pc}
 80215d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80215dc:	d103      	bne.n	80215e6 <__ieee754_atan2f+0x3a>
 80215de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215e2:	f000 b9ab 	b.w	802193c <atanf>
 80215e6:	1794      	asrs	r4, r2, #30
 80215e8:	f004 0402 	and.w	r4, r4, #2
 80215ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80215f0:	b93b      	cbnz	r3, 8021602 <__ieee754_atan2f+0x56>
 80215f2:	2c02      	cmp	r4, #2
 80215f4:	d05c      	beq.n	80216b0 <__ieee754_atan2f+0x104>
 80215f6:	2c03      	cmp	r4, #3
 80215f8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80216c4 <__ieee754_atan2f+0x118>
 80215fc:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8021600:	e7e7      	b.n	80215d2 <__ieee754_atan2f+0x26>
 8021602:	b939      	cbnz	r1, 8021614 <__ieee754_atan2f+0x68>
 8021604:	2800      	cmp	r0, #0
 8021606:	eddf 7a30 	vldr	s15, [pc, #192]	; 80216c8 <__ieee754_atan2f+0x11c>
 802160a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80216cc <__ieee754_atan2f+0x120>
 802160e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8021612:	e7de      	b.n	80215d2 <__ieee754_atan2f+0x26>
 8021614:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021618:	d110      	bne.n	802163c <__ieee754_atan2f+0x90>
 802161a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802161e:	f104 34ff 	add.w	r4, r4, #4294967295
 8021622:	d107      	bne.n	8021634 <__ieee754_atan2f+0x88>
 8021624:	2c02      	cmp	r4, #2
 8021626:	d846      	bhi.n	80216b6 <__ieee754_atan2f+0x10a>
 8021628:	4b29      	ldr	r3, [pc, #164]	; (80216d0 <__ieee754_atan2f+0x124>)
 802162a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802162e:	edd3 7a00 	vldr	s15, [r3]
 8021632:	e7ce      	b.n	80215d2 <__ieee754_atan2f+0x26>
 8021634:	2c02      	cmp	r4, #2
 8021636:	d841      	bhi.n	80216bc <__ieee754_atan2f+0x110>
 8021638:	4b26      	ldr	r3, [pc, #152]	; (80216d4 <__ieee754_atan2f+0x128>)
 802163a:	e7f6      	b.n	802162a <__ieee754_atan2f+0x7e>
 802163c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021640:	d0e0      	beq.n	8021604 <__ieee754_atan2f+0x58>
 8021642:	1a5b      	subs	r3, r3, r1
 8021644:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8021648:	ea4f 51e3 	mov.w	r1, r3, asr #23
 802164c:	da1a      	bge.n	8021684 <__ieee754_atan2f+0xd8>
 802164e:	2a00      	cmp	r2, #0
 8021650:	da01      	bge.n	8021656 <__ieee754_atan2f+0xaa>
 8021652:	313c      	adds	r1, #60	; 0x3c
 8021654:	db19      	blt.n	802168a <__ieee754_atan2f+0xde>
 8021656:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802165a:	f000 fa43 	bl	8021ae4 <fabsf>
 802165e:	f000 f96d 	bl	802193c <atanf>
 8021662:	eef0 7a40 	vmov.f32	s15, s0
 8021666:	2c01      	cmp	r4, #1
 8021668:	d012      	beq.n	8021690 <__ieee754_atan2f+0xe4>
 802166a:	2c02      	cmp	r4, #2
 802166c:	d017      	beq.n	802169e <__ieee754_atan2f+0xf2>
 802166e:	2c00      	cmp	r4, #0
 8021670:	d0af      	beq.n	80215d2 <__ieee754_atan2f+0x26>
 8021672:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80216d8 <__ieee754_atan2f+0x12c>
 8021676:	ee77 7a87 	vadd.f32	s15, s15, s14
 802167a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80216dc <__ieee754_atan2f+0x130>
 802167e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021682:	e7a6      	b.n	80215d2 <__ieee754_atan2f+0x26>
 8021684:	eddf 7a10 	vldr	s15, [pc, #64]	; 80216c8 <__ieee754_atan2f+0x11c>
 8021688:	e7ed      	b.n	8021666 <__ieee754_atan2f+0xba>
 802168a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80216e0 <__ieee754_atan2f+0x134>
 802168e:	e7ea      	b.n	8021666 <__ieee754_atan2f+0xba>
 8021690:	ee17 3a90 	vmov	r3, s15
 8021694:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021698:	ee07 3a90 	vmov	s15, r3
 802169c:	e799      	b.n	80215d2 <__ieee754_atan2f+0x26>
 802169e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80216d8 <__ieee754_atan2f+0x12c>
 80216a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80216a6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80216dc <__ieee754_atan2f+0x130>
 80216aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80216ae:	e790      	b.n	80215d2 <__ieee754_atan2f+0x26>
 80216b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80216dc <__ieee754_atan2f+0x130>
 80216b4:	e78d      	b.n	80215d2 <__ieee754_atan2f+0x26>
 80216b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80216e4 <__ieee754_atan2f+0x138>
 80216ba:	e78a      	b.n	80215d2 <__ieee754_atan2f+0x26>
 80216bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80216e0 <__ieee754_atan2f+0x134>
 80216c0:	e787      	b.n	80215d2 <__ieee754_atan2f+0x26>
 80216c2:	bf00      	nop
 80216c4:	c0490fdb 	.word	0xc0490fdb
 80216c8:	3fc90fdb 	.word	0x3fc90fdb
 80216cc:	bfc90fdb 	.word	0xbfc90fdb
 80216d0:	08023f68 	.word	0x08023f68
 80216d4:	08023f74 	.word	0x08023f74
 80216d8:	33bbbd2e 	.word	0x33bbbd2e
 80216dc:	40490fdb 	.word	0x40490fdb
 80216e0:	00000000 	.word	0x00000000
 80216e4:	3f490fdb 	.word	0x3f490fdb

080216e8 <__ieee754_rem_pio2f>:
 80216e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216ea:	ee10 6a10 	vmov	r6, s0
 80216ee:	4b85      	ldr	r3, [pc, #532]	; (8021904 <__ieee754_rem_pio2f+0x21c>)
 80216f0:	b087      	sub	sp, #28
 80216f2:	4604      	mov	r4, r0
 80216f4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80216f8:	429d      	cmp	r5, r3
 80216fa:	dc05      	bgt.n	8021708 <__ieee754_rem_pio2f+0x20>
 80216fc:	2300      	movs	r3, #0
 80216fe:	ed80 0a00 	vstr	s0, [r0]
 8021702:	6043      	str	r3, [r0, #4]
 8021704:	2000      	movs	r0, #0
 8021706:	e020      	b.n	802174a <__ieee754_rem_pio2f+0x62>
 8021708:	4b7f      	ldr	r3, [pc, #508]	; (8021908 <__ieee754_rem_pio2f+0x220>)
 802170a:	429d      	cmp	r5, r3
 802170c:	dc38      	bgt.n	8021780 <__ieee754_rem_pio2f+0x98>
 802170e:	2e00      	cmp	r6, #0
 8021710:	f025 050f 	bic.w	r5, r5, #15
 8021714:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802190c <__ieee754_rem_pio2f+0x224>
 8021718:	4b7d      	ldr	r3, [pc, #500]	; (8021910 <__ieee754_rem_pio2f+0x228>)
 802171a:	dd18      	ble.n	802174e <__ieee754_rem_pio2f+0x66>
 802171c:	429d      	cmp	r5, r3
 802171e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8021722:	bf09      	itett	eq
 8021724:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8021914 <__ieee754_rem_pio2f+0x22c>
 8021728:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 8021918 <__ieee754_rem_pio2f+0x230>
 802172c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8021730:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 802191c <__ieee754_rem_pio2f+0x234>
 8021734:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021738:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802173c:	edc0 6a00 	vstr	s13, [r0]
 8021740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021744:	edc0 7a01 	vstr	s15, [r0, #4]
 8021748:	2001      	movs	r0, #1
 802174a:	b007      	add	sp, #28
 802174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802174e:	429d      	cmp	r5, r3
 8021750:	ee70 7a07 	vadd.f32	s15, s0, s14
 8021754:	bf09      	itett	eq
 8021756:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8021914 <__ieee754_rem_pio2f+0x22c>
 802175a:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 8021918 <__ieee754_rem_pio2f+0x230>
 802175e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8021762:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 802191c <__ieee754_rem_pio2f+0x234>
 8021766:	ee77 6a87 	vadd.f32	s13, s15, s14
 802176a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802176e:	edc0 6a00 	vstr	s13, [r0]
 8021772:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021776:	edc0 7a01 	vstr	s15, [r0, #4]
 802177a:	f04f 30ff 	mov.w	r0, #4294967295
 802177e:	e7e4      	b.n	802174a <__ieee754_rem_pio2f+0x62>
 8021780:	4b67      	ldr	r3, [pc, #412]	; (8021920 <__ieee754_rem_pio2f+0x238>)
 8021782:	429d      	cmp	r5, r3
 8021784:	dc70      	bgt.n	8021868 <__ieee754_rem_pio2f+0x180>
 8021786:	f000 f9ad 	bl	8021ae4 <fabsf>
 802178a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802178e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8021924 <__ieee754_rem_pio2f+0x23c>
 8021792:	eee0 7a07 	vfma.f32	s15, s0, s14
 8021796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802179a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802179e:	ee17 0a90 	vmov	r0, s15
 80217a2:	eddf 7a5a 	vldr	s15, [pc, #360]	; 802190c <__ieee754_rem_pio2f+0x224>
 80217a6:	281f      	cmp	r0, #31
 80217a8:	eea7 0a67 	vfms.f32	s0, s14, s15
 80217ac:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8021918 <__ieee754_rem_pio2f+0x230>
 80217b0:	eeb1 6a47 	vneg.f32	s12, s14
 80217b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80217b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80217bc:	ee16 2a90 	vmov	r2, s13
 80217c0:	dc1c      	bgt.n	80217fc <__ieee754_rem_pio2f+0x114>
 80217c2:	1e47      	subs	r7, r0, #1
 80217c4:	4958      	ldr	r1, [pc, #352]	; (8021928 <__ieee754_rem_pio2f+0x240>)
 80217c6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80217ca:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80217ce:	428b      	cmp	r3, r1
 80217d0:	d014      	beq.n	80217fc <__ieee754_rem_pio2f+0x114>
 80217d2:	6022      	str	r2, [r4, #0]
 80217d4:	ed94 7a00 	vldr	s14, [r4]
 80217d8:	2e00      	cmp	r6, #0
 80217da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80217de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80217e2:	ed84 0a01 	vstr	s0, [r4, #4]
 80217e6:	dab0      	bge.n	802174a <__ieee754_rem_pio2f+0x62>
 80217e8:	eeb1 7a47 	vneg.f32	s14, s14
 80217ec:	eeb1 0a40 	vneg.f32	s0, s0
 80217f0:	ed84 7a00 	vstr	s14, [r4]
 80217f4:	ed84 0a01 	vstr	s0, [r4, #4]
 80217f8:	4240      	negs	r0, r0
 80217fa:	e7a6      	b.n	802174a <__ieee754_rem_pio2f+0x62>
 80217fc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8021800:	15eb      	asrs	r3, r5, #23
 8021802:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8021806:	2908      	cmp	r1, #8
 8021808:	dde3      	ble.n	80217d2 <__ieee754_rem_pio2f+0xea>
 802180a:	eef0 6a40 	vmov.f32	s13, s0
 802180e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8021914 <__ieee754_rem_pio2f+0x22c>
 8021812:	eee6 6a25 	vfma.f32	s13, s12, s11
 8021816:	ee70 7a66 	vsub.f32	s15, s0, s13
 802181a:	eee6 7a25 	vfma.f32	s15, s12, s11
 802181e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 802191c <__ieee754_rem_pio2f+0x234>
 8021822:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8021826:	ee76 5ae7 	vsub.f32	s11, s13, s15
 802182a:	ee15 2a90 	vmov	r2, s11
 802182e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8021832:	1a5b      	subs	r3, r3, r1
 8021834:	2b19      	cmp	r3, #25
 8021836:	dc04      	bgt.n	8021842 <__ieee754_rem_pio2f+0x15a>
 8021838:	eeb0 0a66 	vmov.f32	s0, s13
 802183c:	edc4 5a00 	vstr	s11, [r4]
 8021840:	e7c8      	b.n	80217d4 <__ieee754_rem_pio2f+0xec>
 8021842:	eeb0 0a66 	vmov.f32	s0, s13
 8021846:	eddf 5a39 	vldr	s11, [pc, #228]	; 802192c <__ieee754_rem_pio2f+0x244>
 802184a:	eea6 0a25 	vfma.f32	s0, s12, s11
 802184e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8021852:	eddf 6a37 	vldr	s13, [pc, #220]	; 8021930 <__ieee754_rem_pio2f+0x248>
 8021856:	eee6 7a25 	vfma.f32	s15, s12, s11
 802185a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802185e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021862:	ed84 7a00 	vstr	s14, [r4]
 8021866:	e7b5      	b.n	80217d4 <__ieee754_rem_pio2f+0xec>
 8021868:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802186c:	db06      	blt.n	802187c <__ieee754_rem_pio2f+0x194>
 802186e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8021872:	edc0 7a01 	vstr	s15, [r0, #4]
 8021876:	edc0 7a00 	vstr	s15, [r0]
 802187a:	e743      	b.n	8021704 <__ieee754_rem_pio2f+0x1c>
 802187c:	15ea      	asrs	r2, r5, #23
 802187e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8021934 <__ieee754_rem_pio2f+0x24c>
 8021882:	3a86      	subs	r2, #134	; 0x86
 8021884:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8021888:	ee07 3a90 	vmov	s15, r3
 802188c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8021890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021898:	ed8d 7a03 	vstr	s14, [sp, #12]
 802189c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80218a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80218a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80218a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80218ac:	ed8d 7a04 	vstr	s14, [sp, #16]
 80218b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80218b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80218b8:	edcd 7a05 	vstr	s15, [sp, #20]
 80218bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218c0:	d11e      	bne.n	8021900 <__ieee754_rem_pio2f+0x218>
 80218c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80218c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218ca:	bf14      	ite	ne
 80218cc:	2302      	movne	r3, #2
 80218ce:	2301      	moveq	r3, #1
 80218d0:	4919      	ldr	r1, [pc, #100]	; (8021938 <__ieee754_rem_pio2f+0x250>)
 80218d2:	a803      	add	r0, sp, #12
 80218d4:	9101      	str	r1, [sp, #4]
 80218d6:	2102      	movs	r1, #2
 80218d8:	9100      	str	r1, [sp, #0]
 80218da:	4621      	mov	r1, r4
 80218dc:	f000 f9ba 	bl	8021c54 <__kernel_rem_pio2f>
 80218e0:	2e00      	cmp	r6, #0
 80218e2:	f6bf af32 	bge.w	802174a <__ieee754_rem_pio2f+0x62>
 80218e6:	edd4 7a00 	vldr	s15, [r4]
 80218ea:	eef1 7a67 	vneg.f32	s15, s15
 80218ee:	edc4 7a00 	vstr	s15, [r4]
 80218f2:	edd4 7a01 	vldr	s15, [r4, #4]
 80218f6:	eef1 7a67 	vneg.f32	s15, s15
 80218fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80218fe:	e77b      	b.n	80217f8 <__ieee754_rem_pio2f+0x110>
 8021900:	2303      	movs	r3, #3
 8021902:	e7e5      	b.n	80218d0 <__ieee754_rem_pio2f+0x1e8>
 8021904:	3f490fd8 	.word	0x3f490fd8
 8021908:	4016cbe3 	.word	0x4016cbe3
 802190c:	3fc90f80 	.word	0x3fc90f80
 8021910:	3fc90fd0 	.word	0x3fc90fd0
 8021914:	37354400 	.word	0x37354400
 8021918:	37354443 	.word	0x37354443
 802191c:	2e85a308 	.word	0x2e85a308
 8021920:	43490f80 	.word	0x43490f80
 8021924:	3f22f984 	.word	0x3f22f984
 8021928:	08023f80 	.word	0x08023f80
 802192c:	2e85a300 	.word	0x2e85a300
 8021930:	248d3132 	.word	0x248d3132
 8021934:	43800000 	.word	0x43800000
 8021938:	08024000 	.word	0x08024000

0802193c <atanf>:
 802193c:	b538      	push	{r3, r4, r5, lr}
 802193e:	ee10 5a10 	vmov	r5, s0
 8021942:	eef0 7a40 	vmov.f32	s15, s0
 8021946:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 802194a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 802194e:	db0f      	blt.n	8021970 <atanf+0x34>
 8021950:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8021954:	dd04      	ble.n	8021960 <atanf+0x24>
 8021956:	ee70 7a00 	vadd.f32	s15, s0, s0
 802195a:	eeb0 0a67 	vmov.f32	s0, s15
 802195e:	bd38      	pop	{r3, r4, r5, pc}
 8021960:	2d00      	cmp	r5, #0
 8021962:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8021a98 <atanf+0x15c>
 8021966:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8021a9c <atanf+0x160>
 802196a:	fe77 7a87 	vselgt.f32	s15, s15, s14
 802196e:	e7f4      	b.n	802195a <atanf+0x1e>
 8021970:	4b4b      	ldr	r3, [pc, #300]	; (8021aa0 <atanf+0x164>)
 8021972:	429c      	cmp	r4, r3
 8021974:	dc10      	bgt.n	8021998 <atanf+0x5c>
 8021976:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 802197a:	da0a      	bge.n	8021992 <atanf+0x56>
 802197c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8021aa4 <atanf+0x168>
 8021980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021984:	ee30 7a07 	vadd.f32	s14, s0, s14
 8021988:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021990:	dce3      	bgt.n	802195a <atanf+0x1e>
 8021992:	f04f 33ff 	mov.w	r3, #4294967295
 8021996:	e013      	b.n	80219c0 <atanf+0x84>
 8021998:	f000 f8a4 	bl	8021ae4 <fabsf>
 802199c:	4b42      	ldr	r3, [pc, #264]	; (8021aa8 <atanf+0x16c>)
 802199e:	429c      	cmp	r4, r3
 80219a0:	dc4f      	bgt.n	8021a42 <atanf+0x106>
 80219a2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80219a6:	429c      	cmp	r4, r3
 80219a8:	dc41      	bgt.n	8021a2e <atanf+0xf2>
 80219aa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80219ae:	2300      	movs	r3, #0
 80219b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80219b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80219b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80219bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80219c0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8021aac <atanf+0x170>
 80219c4:	1c5a      	adds	r2, r3, #1
 80219c6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8021ab0 <atanf+0x174>
 80219ca:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8021ab4 <atanf+0x178>
 80219ce:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80219d2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80219d6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80219da:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8021ab8 <atanf+0x17c>
 80219de:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80219e2:	eddf 5a36 	vldr	s11, [pc, #216]	; 8021abc <atanf+0x180>
 80219e6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80219ea:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8021ac0 <atanf+0x184>
 80219ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80219f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8021ac4 <atanf+0x188>
 80219f6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80219fa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8021ac8 <atanf+0x18c>
 80219fe:	eea6 5a87 	vfma.f32	s10, s13, s14
 8021a02:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8021acc <atanf+0x190>
 8021a06:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021a0a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8021ad0 <atanf+0x194>
 8021a0e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8021a12:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021ad4 <atanf+0x198>
 8021a16:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021a1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021a1e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021a22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021a26:	d121      	bne.n	8021a6c <atanf+0x130>
 8021a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021a2c:	e795      	b.n	802195a <atanf+0x1e>
 8021a2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021a32:	2301      	movs	r3, #1
 8021a34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021a38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021a3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021a40:	e7be      	b.n	80219c0 <atanf+0x84>
 8021a42:	4b25      	ldr	r3, [pc, #148]	; (8021ad8 <atanf+0x19c>)
 8021a44:	429c      	cmp	r4, r3
 8021a46:	dc0b      	bgt.n	8021a60 <atanf+0x124>
 8021a48:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8021a4c:	2302      	movs	r3, #2
 8021a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021a52:	ee70 6a67 	vsub.f32	s13, s0, s15
 8021a56:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021a5e:	e7af      	b.n	80219c0 <atanf+0x84>
 8021a60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8021a64:	2303      	movs	r3, #3
 8021a66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021a6a:	e7a9      	b.n	80219c0 <atanf+0x84>
 8021a6c:	4a1b      	ldr	r2, [pc, #108]	; (8021adc <atanf+0x1a0>)
 8021a6e:	2d00      	cmp	r5, #0
 8021a70:	491b      	ldr	r1, [pc, #108]	; (8021ae0 <atanf+0x1a4>)
 8021a72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021a76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021a7a:	edd3 6a00 	vldr	s13, [r3]
 8021a7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8021a82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8021a86:	edd2 7a00 	vldr	s15, [r2]
 8021a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021a8e:	bfb8      	it	lt
 8021a90:	eef1 7a67 	vneglt.f32	s15, s15
 8021a94:	e761      	b.n	802195a <atanf+0x1e>
 8021a96:	bf00      	nop
 8021a98:	3fc90fdb 	.word	0x3fc90fdb
 8021a9c:	bfc90fdb 	.word	0xbfc90fdb
 8021aa0:	3edfffff 	.word	0x3edfffff
 8021aa4:	7149f2ca 	.word	0x7149f2ca
 8021aa8:	3f97ffff 	.word	0x3f97ffff
 8021aac:	3c8569d7 	.word	0x3c8569d7
 8021ab0:	3d4bda59 	.word	0x3d4bda59
 8021ab4:	bd6ef16b 	.word	0xbd6ef16b
 8021ab8:	3d886b35 	.word	0x3d886b35
 8021abc:	3dba2e6e 	.word	0x3dba2e6e
 8021ac0:	3e124925 	.word	0x3e124925
 8021ac4:	3eaaaaab 	.word	0x3eaaaaab
 8021ac8:	bd15a221 	.word	0xbd15a221
 8021acc:	bd9d8795 	.word	0xbd9d8795
 8021ad0:	bde38e38 	.word	0xbde38e38
 8021ad4:	be4ccccd 	.word	0xbe4ccccd
 8021ad8:	401bffff 	.word	0x401bffff
 8021adc:	08024318 	.word	0x08024318
 8021ae0:	08024328 	.word	0x08024328

08021ae4 <fabsf>:
 8021ae4:	ee10 3a10 	vmov	r3, s0
 8021ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021aec:	ee00 3a10 	vmov	s0, r3
 8021af0:	4770      	bx	lr
 8021af2:	0000      	movs	r0, r0
 8021af4:	0000      	movs	r0, r0
	...

08021af8 <scalbn>:
 8021af8:	b570      	push	{r4, r5, r6, lr}
 8021afa:	ec55 4b10 	vmov	r4, r5, d0
 8021afe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8021b02:	4606      	mov	r6, r0
 8021b04:	462b      	mov	r3, r5
 8021b06:	b999      	cbnz	r1, 8021b30 <scalbn+0x38>
 8021b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021b0c:	4323      	orrs	r3, r4
 8021b0e:	d03f      	beq.n	8021b90 <scalbn+0x98>
 8021b10:	4b35      	ldr	r3, [pc, #212]	; (8021be8 <scalbn+0xf0>)
 8021b12:	4629      	mov	r1, r5
 8021b14:	2200      	movs	r2, #0
 8021b16:	ee10 0a10 	vmov	r0, s0
 8021b1a:	f7de fd5f 	bl	80005dc <__aeabi_dmul>
 8021b1e:	4b33      	ldr	r3, [pc, #204]	; (8021bec <scalbn+0xf4>)
 8021b20:	4604      	mov	r4, r0
 8021b22:	460d      	mov	r5, r1
 8021b24:	429e      	cmp	r6, r3
 8021b26:	da10      	bge.n	8021b4a <scalbn+0x52>
 8021b28:	a327      	add	r3, pc, #156	; (adr r3, 8021bc8 <scalbn+0xd0>)
 8021b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b2e:	e01f      	b.n	8021b70 <scalbn+0x78>
 8021b30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8021b34:	4291      	cmp	r1, r2
 8021b36:	d10c      	bne.n	8021b52 <scalbn+0x5a>
 8021b38:	ee10 2a10 	vmov	r2, s0
 8021b3c:	4620      	mov	r0, r4
 8021b3e:	4629      	mov	r1, r5
 8021b40:	f7de fb96 	bl	8000270 <__adddf3>
 8021b44:	4604      	mov	r4, r0
 8021b46:	460d      	mov	r5, r1
 8021b48:	e022      	b.n	8021b90 <scalbn+0x98>
 8021b4a:	460b      	mov	r3, r1
 8021b4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8021b50:	3936      	subs	r1, #54	; 0x36
 8021b52:	f24c 3250 	movw	r2, #50000	; 0xc350
 8021b56:	4296      	cmp	r6, r2
 8021b58:	dd0d      	ble.n	8021b76 <scalbn+0x7e>
 8021b5a:	2d00      	cmp	r5, #0
 8021b5c:	a11c      	add	r1, pc, #112	; (adr r1, 8021bd0 <scalbn+0xd8>)
 8021b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021b62:	da02      	bge.n	8021b6a <scalbn+0x72>
 8021b64:	a11c      	add	r1, pc, #112	; (adr r1, 8021bd8 <scalbn+0xe0>)
 8021b66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021b6a:	a319      	add	r3, pc, #100	; (adr r3, 8021bd0 <scalbn+0xd8>)
 8021b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b70:	f7de fd34 	bl	80005dc <__aeabi_dmul>
 8021b74:	e7e6      	b.n	8021b44 <scalbn+0x4c>
 8021b76:	1872      	adds	r2, r6, r1
 8021b78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8021b7c:	428a      	cmp	r2, r1
 8021b7e:	dcec      	bgt.n	8021b5a <scalbn+0x62>
 8021b80:	2a00      	cmp	r2, #0
 8021b82:	dd08      	ble.n	8021b96 <scalbn+0x9e>
 8021b84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021b88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021b8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8021b90:	ec45 4b10 	vmov	d0, r4, r5
 8021b94:	bd70      	pop	{r4, r5, r6, pc}
 8021b96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8021b9a:	da08      	bge.n	8021bae <scalbn+0xb6>
 8021b9c:	2d00      	cmp	r5, #0
 8021b9e:	a10a      	add	r1, pc, #40	; (adr r1, 8021bc8 <scalbn+0xd0>)
 8021ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021ba4:	dac0      	bge.n	8021b28 <scalbn+0x30>
 8021ba6:	a10e      	add	r1, pc, #56	; (adr r1, 8021be0 <scalbn+0xe8>)
 8021ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021bac:	e7bc      	b.n	8021b28 <scalbn+0x30>
 8021bae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8021bb2:	3236      	adds	r2, #54	; 0x36
 8021bb4:	4620      	mov	r0, r4
 8021bb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021bba:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	4b0b      	ldr	r3, [pc, #44]	; (8021bf0 <scalbn+0xf8>)
 8021bc2:	e7d5      	b.n	8021b70 <scalbn+0x78>
 8021bc4:	f3af 8000 	nop.w
 8021bc8:	c2f8f359 	.word	0xc2f8f359
 8021bcc:	01a56e1f 	.word	0x01a56e1f
 8021bd0:	8800759c 	.word	0x8800759c
 8021bd4:	7e37e43c 	.word	0x7e37e43c
 8021bd8:	8800759c 	.word	0x8800759c
 8021bdc:	fe37e43c 	.word	0xfe37e43c
 8021be0:	c2f8f359 	.word	0xc2f8f359
 8021be4:	81a56e1f 	.word	0x81a56e1f
 8021be8:	43500000 	.word	0x43500000
 8021bec:	ffff3cb0 	.word	0xffff3cb0
 8021bf0:	3c900000 	.word	0x3c900000

08021bf4 <with_errno>:
 8021bf4:	b570      	push	{r4, r5, r6, lr}
 8021bf6:	4604      	mov	r4, r0
 8021bf8:	460d      	mov	r5, r1
 8021bfa:	4616      	mov	r6, r2
 8021bfc:	f000 fdf6 	bl	80227ec <__errno>
 8021c00:	4629      	mov	r1, r5
 8021c02:	6006      	str	r6, [r0, #0]
 8021c04:	4620      	mov	r0, r4
 8021c06:	bd70      	pop	{r4, r5, r6, pc}

08021c08 <xflow>:
 8021c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021c0a:	4614      	mov	r4, r2
 8021c0c:	461d      	mov	r5, r3
 8021c0e:	b108      	cbz	r0, 8021c14 <xflow+0xc>
 8021c10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021c14:	4620      	mov	r0, r4
 8021c16:	4629      	mov	r1, r5
 8021c18:	e9cd 2300 	strd	r2, r3, [sp]
 8021c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021c20:	f7de fcdc 	bl	80005dc <__aeabi_dmul>
 8021c24:	2222      	movs	r2, #34	; 0x22
 8021c26:	b003      	add	sp, #12
 8021c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021c2c:	f7ff bfe2 	b.w	8021bf4 <with_errno>

08021c30 <__math_uflow>:
 8021c30:	b508      	push	{r3, lr}
 8021c32:	2200      	movs	r2, #0
 8021c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021c38:	f7ff ffe6 	bl	8021c08 <xflow>
 8021c3c:	ec41 0b10 	vmov	d0, r0, r1
 8021c40:	bd08      	pop	{r3, pc}

08021c42 <__math_oflow>:
 8021c42:	b508      	push	{r3, lr}
 8021c44:	2200      	movs	r2, #0
 8021c46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8021c4a:	f7ff ffdd 	bl	8021c08 <xflow>
 8021c4e:	ec41 0b10 	vmov	d0, r0, r1
 8021c52:	bd08      	pop	{r3, pc}

08021c54 <__kernel_rem_pio2f>:
 8021c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c58:	ed2d 8b04 	vpush	{d8-d9}
 8021c5c:	b0d9      	sub	sp, #356	; 0x164
 8021c5e:	4688      	mov	r8, r1
 8021c60:	49b9      	ldr	r1, [pc, #740]	; (8021f48 <__kernel_rem_pio2f+0x2f4>)
 8021c62:	9002      	str	r0, [sp, #8]
 8021c64:	9866      	ldr	r0, [sp, #408]	; 0x198
 8021c66:	9301      	str	r3, [sp, #4]
 8021c68:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8021c6c:	9901      	ldr	r1, [sp, #4]
 8021c6e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8021c70:	f101 3bff 	add.w	fp, r1, #4294967295
 8021c74:	1d11      	adds	r1, r2, #4
 8021c76:	db25      	blt.n	8021cc4 <__kernel_rem_pio2f+0x70>
 8021c78:	1ed0      	subs	r0, r2, #3
 8021c7a:	bf48      	it	mi
 8021c7c:	1d10      	addmi	r0, r2, #4
 8021c7e:	10c0      	asrs	r0, r0, #3
 8021c80:	1c45      	adds	r5, r0, #1
 8021c82:	eba0 070b 	sub.w	r7, r0, fp
 8021c86:	eb0a 0c0b 	add.w	ip, sl, fp
 8021c8a:	ae1c      	add	r6, sp, #112	; 0x70
 8021c8c:	00e9      	lsls	r1, r5, #3
 8021c8e:	2400      	movs	r4, #0
 8021c90:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8021c94:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8021f58 <__kernel_rem_pio2f+0x304>
 8021c98:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8021c9c:	9103      	str	r1, [sp, #12]
 8021c9e:	4564      	cmp	r4, ip
 8021ca0:	dd12      	ble.n	8021cc8 <__kernel_rem_pio2f+0x74>
 8021ca2:	ac1c      	add	r4, sp, #112	; 0x70
 8021ca4:	9901      	ldr	r1, [sp, #4]
 8021ca6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8021caa:	f04f 0c00 	mov.w	ip, #0
 8021cae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021cb2:	45d4      	cmp	ip, sl
 8021cb4:	dc29      	bgt.n	8021d0a <__kernel_rem_pio2f+0xb6>
 8021cb6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8021cba:	4627      	mov	r7, r4
 8021cbc:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8021f58 <__kernel_rem_pio2f+0x304>
 8021cc0:	2600      	movs	r6, #0
 8021cc2:	e018      	b.n	8021cf6 <__kernel_rem_pio2f+0xa2>
 8021cc4:	2000      	movs	r0, #0
 8021cc6:	e7db      	b.n	8021c80 <__kernel_rem_pio2f+0x2c>
 8021cc8:	42e7      	cmn	r7, r4
 8021cca:	bf54      	ite	pl
 8021ccc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8021cd0:	eef0 7a47 	vmovmi.f32	s15, s14
 8021cd4:	f104 0401 	add.w	r4, r4, #1
 8021cd8:	bf5c      	itt	pl
 8021cda:	ee07 1a90 	vmovpl	s15, r1
 8021cde:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8021ce2:	ece6 7a01 	vstmia	r6!, {s15}
 8021ce6:	e7da      	b.n	8021c9e <__kernel_rem_pio2f+0x4a>
 8021ce8:	ecfe 6a01 	vldmia	lr!, {s13}
 8021cec:	3601      	adds	r6, #1
 8021cee:	ed97 7a00 	vldr	s14, [r7]
 8021cf2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021cf6:	455e      	cmp	r6, fp
 8021cf8:	f1a7 0704 	sub.w	r7, r7, #4
 8021cfc:	ddf4      	ble.n	8021ce8 <__kernel_rem_pio2f+0x94>
 8021cfe:	f10c 0c01 	add.w	ip, ip, #1
 8021d02:	3404      	adds	r4, #4
 8021d04:	ece9 7a01 	vstmia	r9!, {s15}
 8021d08:	e7d3      	b.n	8021cb2 <__kernel_rem_pio2f+0x5e>
 8021d0a:	a908      	add	r1, sp, #32
 8021d0c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8021d10:	4656      	mov	r6, sl
 8021d12:	eddf 8a90 	vldr	s17, [pc, #576]	; 8021f54 <__kernel_rem_pio2f+0x300>
 8021d16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021d1a:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8021f50 <__kernel_rem_pio2f+0x2fc>
 8021d1e:	9304      	str	r3, [sp, #16]
 8021d20:	9105      	str	r1, [sp, #20]
 8021d22:	00b3      	lsls	r3, r6, #2
 8021d24:	ac08      	add	r4, sp, #32
 8021d26:	4637      	mov	r7, r6
 8021d28:	9306      	str	r3, [sp, #24]
 8021d2a:	ab58      	add	r3, sp, #352	; 0x160
 8021d2c:	46a4      	mov	ip, r4
 8021d2e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8021d32:	ab44      	add	r3, sp, #272	; 0x110
 8021d34:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8021d38:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8021d3c:	2f00      	cmp	r7, #0
 8021d3e:	f1a0 0004 	sub.w	r0, r0, #4
 8021d42:	dc4a      	bgt.n	8021dda <__kernel_rem_pio2f+0x186>
 8021d44:	4628      	mov	r0, r5
 8021d46:	9207      	str	r2, [sp, #28]
 8021d48:	f000 f9f8 	bl	802213c <scalbnf>
 8021d4c:	eeb0 8a40 	vmov.f32	s16, s0
 8021d50:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8021d54:	ee28 0a00 	vmul.f32	s0, s16, s0
 8021d58:	f000 fa54 	bl	8022204 <floorf>
 8021d5c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8021d60:	2d00      	cmp	r5, #0
 8021d62:	9a07      	ldr	r2, [sp, #28]
 8021d64:	eea0 8a67 	vfms.f32	s16, s0, s15
 8021d68:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8021d6c:	ee17 9a90 	vmov	r9, s15
 8021d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021d74:	ee38 8a67 	vsub.f32	s16, s16, s15
 8021d78:	dd41      	ble.n	8021dfe <__kernel_rem_pio2f+0x1aa>
 8021d7a:	f106 3cff 	add.w	ip, r6, #4294967295
 8021d7e:	ab08      	add	r3, sp, #32
 8021d80:	f1c5 0e08 	rsb	lr, r5, #8
 8021d84:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8021d88:	fa47 f00e 	asr.w	r0, r7, lr
 8021d8c:	4481      	add	r9, r0
 8021d8e:	fa00 f00e 	lsl.w	r0, r0, lr
 8021d92:	1a3f      	subs	r7, r7, r0
 8021d94:	f1c5 0007 	rsb	r0, r5, #7
 8021d98:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8021d9c:	4107      	asrs	r7, r0
 8021d9e:	2f00      	cmp	r7, #0
 8021da0:	dd3c      	ble.n	8021e1c <__kernel_rem_pio2f+0x1c8>
 8021da2:	f04f 0e00 	mov.w	lr, #0
 8021da6:	f109 0901 	add.w	r9, r9, #1
 8021daa:	4671      	mov	r1, lr
 8021dac:	4576      	cmp	r6, lr
 8021dae:	dc67      	bgt.n	8021e80 <__kernel_rem_pio2f+0x22c>
 8021db0:	2d00      	cmp	r5, #0
 8021db2:	dd03      	ble.n	8021dbc <__kernel_rem_pio2f+0x168>
 8021db4:	2d01      	cmp	r5, #1
 8021db6:	d074      	beq.n	8021ea2 <__kernel_rem_pio2f+0x24e>
 8021db8:	2d02      	cmp	r5, #2
 8021dba:	d07b      	beq.n	8021eb4 <__kernel_rem_pio2f+0x260>
 8021dbc:	2f02      	cmp	r7, #2
 8021dbe:	d12d      	bne.n	8021e1c <__kernel_rem_pio2f+0x1c8>
 8021dc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021dc4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8021dc8:	b341      	cbz	r1, 8021e1c <__kernel_rem_pio2f+0x1c8>
 8021dca:	4628      	mov	r0, r5
 8021dcc:	9207      	str	r2, [sp, #28]
 8021dce:	f000 f9b5 	bl	802213c <scalbnf>
 8021dd2:	9a07      	ldr	r2, [sp, #28]
 8021dd4:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021dd8:	e020      	b.n	8021e1c <__kernel_rem_pio2f+0x1c8>
 8021dda:	ee60 7a28 	vmul.f32	s15, s0, s17
 8021dde:	3f01      	subs	r7, #1
 8021de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021de8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8021dec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021df0:	ecac 0a01 	vstmia	ip!, {s0}
 8021df4:	ed90 0a00 	vldr	s0, [r0]
 8021df8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8021dfc:	e79e      	b.n	8021d3c <__kernel_rem_pio2f+0xe8>
 8021dfe:	d105      	bne.n	8021e0c <__kernel_rem_pio2f+0x1b8>
 8021e00:	1e70      	subs	r0, r6, #1
 8021e02:	ab08      	add	r3, sp, #32
 8021e04:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8021e08:	11ff      	asrs	r7, r7, #7
 8021e0a:	e7c8      	b.n	8021d9e <__kernel_rem_pio2f+0x14a>
 8021e0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021e10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e18:	da30      	bge.n	8021e7c <__kernel_rem_pio2f+0x228>
 8021e1a:	2700      	movs	r7, #0
 8021e1c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e24:	f040 809a 	bne.w	8021f5c <__kernel_rem_pio2f+0x308>
 8021e28:	1e74      	subs	r4, r6, #1
 8021e2a:	2100      	movs	r1, #0
 8021e2c:	46a4      	mov	ip, r4
 8021e2e:	45d4      	cmp	ip, sl
 8021e30:	da47      	bge.n	8021ec2 <__kernel_rem_pio2f+0x26e>
 8021e32:	2900      	cmp	r1, #0
 8021e34:	d063      	beq.n	8021efe <__kernel_rem_pio2f+0x2aa>
 8021e36:	ab08      	add	r3, sp, #32
 8021e38:	3d08      	subs	r5, #8
 8021e3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8021e3e:	2b00      	cmp	r3, #0
 8021e40:	d07f      	beq.n	8021f42 <__kernel_rem_pio2f+0x2ee>
 8021e42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021e46:	4628      	mov	r0, r5
 8021e48:	f000 f978 	bl	802213c <scalbnf>
 8021e4c:	1c63      	adds	r3, r4, #1
 8021e4e:	aa44      	add	r2, sp, #272	; 0x110
 8021e50:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8021f54 <__kernel_rem_pio2f+0x300>
 8021e54:	0099      	lsls	r1, r3, #2
 8021e56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021e5a:	4623      	mov	r3, r4
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	f280 80ad 	bge.w	8021fbc <__kernel_rem_pio2f+0x368>
 8021e62:	4623      	mov	r3, r4
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	f2c0 80cb 	blt.w	8022000 <__kernel_rem_pio2f+0x3ac>
 8021e6a:	aa44      	add	r2, sp, #272	; 0x110
 8021e6c:	4e37      	ldr	r6, [pc, #220]	; (8021f4c <__kernel_rem_pio2f+0x2f8>)
 8021e6e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8021f58 <__kernel_rem_pio2f+0x304>
 8021e72:	2000      	movs	r0, #0
 8021e74:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8021e78:	1ae2      	subs	r2, r4, r3
 8021e7a:	e0b6      	b.n	8021fea <__kernel_rem_pio2f+0x396>
 8021e7c:	2702      	movs	r7, #2
 8021e7e:	e790      	b.n	8021da2 <__kernel_rem_pio2f+0x14e>
 8021e80:	6820      	ldr	r0, [r4, #0]
 8021e82:	b949      	cbnz	r1, 8021e98 <__kernel_rem_pio2f+0x244>
 8021e84:	b118      	cbz	r0, 8021e8e <__kernel_rem_pio2f+0x23a>
 8021e86:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8021e8a:	6020      	str	r0, [r4, #0]
 8021e8c:	2001      	movs	r0, #1
 8021e8e:	f10e 0e01 	add.w	lr, lr, #1
 8021e92:	3404      	adds	r4, #4
 8021e94:	4601      	mov	r1, r0
 8021e96:	e789      	b.n	8021dac <__kernel_rem_pio2f+0x158>
 8021e98:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8021e9c:	6020      	str	r0, [r4, #0]
 8021e9e:	4608      	mov	r0, r1
 8021ea0:	e7f5      	b.n	8021e8e <__kernel_rem_pio2f+0x23a>
 8021ea2:	1e74      	subs	r4, r6, #1
 8021ea4:	ab08      	add	r3, sp, #32
 8021ea6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8021eaa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8021eae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8021eb2:	e783      	b.n	8021dbc <__kernel_rem_pio2f+0x168>
 8021eb4:	1e74      	subs	r4, r6, #1
 8021eb6:	ab08      	add	r3, sp, #32
 8021eb8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8021ebc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8021ec0:	e7f5      	b.n	8021eae <__kernel_rem_pio2f+0x25a>
 8021ec2:	ab08      	add	r3, sp, #32
 8021ec4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8021ec8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021ecc:	4301      	orrs	r1, r0
 8021ece:	e7ae      	b.n	8021e2e <__kernel_rem_pio2f+0x1da>
 8021ed0:	3001      	adds	r0, #1
 8021ed2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8021ed6:	2f00      	cmp	r7, #0
 8021ed8:	d0fa      	beq.n	8021ed0 <__kernel_rem_pio2f+0x27c>
 8021eda:	9b06      	ldr	r3, [sp, #24]
 8021edc:	f106 0c01 	add.w	ip, r6, #1
 8021ee0:	4430      	add	r0, r6
 8021ee2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8021ee6:	eb0d 0403 	add.w	r4, sp, r3
 8021eea:	9b01      	ldr	r3, [sp, #4]
 8021eec:	18f7      	adds	r7, r6, r3
 8021eee:	ab1c      	add	r3, sp, #112	; 0x70
 8021ef0:	3c4c      	subs	r4, #76	; 0x4c
 8021ef2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021ef6:	4560      	cmp	r0, ip
 8021ef8:	da04      	bge.n	8021f04 <__kernel_rem_pio2f+0x2b0>
 8021efa:	4606      	mov	r6, r0
 8021efc:	e711      	b.n	8021d22 <__kernel_rem_pio2f+0xce>
 8021efe:	9c05      	ldr	r4, [sp, #20]
 8021f00:	2001      	movs	r0, #1
 8021f02:	e7e6      	b.n	8021ed2 <__kernel_rem_pio2f+0x27e>
 8021f04:	9b04      	ldr	r3, [sp, #16]
 8021f06:	2600      	movs	r6, #0
 8021f08:	f8dd e008 	ldr.w	lr, [sp, #8]
 8021f0c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021f10:	ee07 3a90 	vmov	s15, r3
 8021f14:	9306      	str	r3, [sp, #24]
 8021f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f1a:	ece7 7a01 	vstmia	r7!, {s15}
 8021f1e:	46b9      	mov	r9, r7
 8021f20:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8021f58 <__kernel_rem_pio2f+0x304>
 8021f24:	455e      	cmp	r6, fp
 8021f26:	dd04      	ble.n	8021f32 <__kernel_rem_pio2f+0x2de>
 8021f28:	f10c 0c01 	add.w	ip, ip, #1
 8021f2c:	ece4 7a01 	vstmia	r4!, {s15}
 8021f30:	e7e1      	b.n	8021ef6 <__kernel_rem_pio2f+0x2a2>
 8021f32:	ecfe 6a01 	vldmia	lr!, {s13}
 8021f36:	3601      	adds	r6, #1
 8021f38:	ed39 7a01 	vldmdb	r9!, {s14}
 8021f3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021f40:	e7f0      	b.n	8021f24 <__kernel_rem_pio2f+0x2d0>
 8021f42:	3c01      	subs	r4, #1
 8021f44:	e777      	b.n	8021e36 <__kernel_rem_pio2f+0x1e2>
 8021f46:	bf00      	nop
 8021f48:	08024364 	.word	0x08024364
 8021f4c:	08024338 	.word	0x08024338
 8021f50:	43800000 	.word	0x43800000
 8021f54:	3b800000 	.word	0x3b800000
 8021f58:	00000000 	.word	0x00000000
 8021f5c:	9b03      	ldr	r3, [sp, #12]
 8021f5e:	eeb0 0a48 	vmov.f32	s0, s16
 8021f62:	1a98      	subs	r0, r3, r2
 8021f64:	f000 f8ea 	bl	802213c <scalbnf>
 8021f68:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8021f50 <__kernel_rem_pio2f+0x2fc>
 8021f6c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8021f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f74:	db19      	blt.n	8021faa <__kernel_rem_pio2f+0x356>
 8021f76:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021f54 <__kernel_rem_pio2f+0x300>
 8021f7a:	aa08      	add	r2, sp, #32
 8021f7c:	1c74      	adds	r4, r6, #1
 8021f7e:	3508      	adds	r5, #8
 8021f80:	ee60 7a27 	vmul.f32	s15, s0, s15
 8021f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f8c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8021f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021f94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021f98:	ee10 3a10 	vmov	r3, s0
 8021f9c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8021fa0:	ee17 3a90 	vmov	r3, s15
 8021fa4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8021fa8:	e74b      	b.n	8021e42 <__kernel_rem_pio2f+0x1ee>
 8021faa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021fae:	aa08      	add	r2, sp, #32
 8021fb0:	4634      	mov	r4, r6
 8021fb2:	ee10 3a10 	vmov	r3, s0
 8021fb6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8021fba:	e742      	b.n	8021e42 <__kernel_rem_pio2f+0x1ee>
 8021fbc:	a808      	add	r0, sp, #32
 8021fbe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8021fc2:	3b01      	subs	r3, #1
 8021fc4:	ee07 0a90 	vmov	s15, r0
 8021fc8:	9001      	str	r0, [sp, #4]
 8021fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021fce:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021fd2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021fd6:	ed62 7a01 	vstmdb	r2!, {s15}
 8021fda:	e73f      	b.n	8021e5c <__kernel_rem_pio2f+0x208>
 8021fdc:	ecf6 6a01 	vldmia	r6!, {s13}
 8021fe0:	3001      	adds	r0, #1
 8021fe2:	ecb5 7a01 	vldmia	r5!, {s14}
 8021fe6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021fea:	4550      	cmp	r0, sl
 8021fec:	dc01      	bgt.n	8021ff2 <__kernel_rem_pio2f+0x39e>
 8021fee:	4290      	cmp	r0, r2
 8021ff0:	ddf4      	ble.n	8021fdc <__kernel_rem_pio2f+0x388>
 8021ff2:	a858      	add	r0, sp, #352	; 0x160
 8021ff4:	3b01      	subs	r3, #1
 8021ff6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8021ffa:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8021ffe:	e731      	b.n	8021e64 <__kernel_rem_pio2f+0x210>
 8022000:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8022002:	2b02      	cmp	r3, #2
 8022004:	dc09      	bgt.n	802201a <__kernel_rem_pio2f+0x3c6>
 8022006:	2b00      	cmp	r3, #0
 8022008:	dc2b      	bgt.n	8022062 <__kernel_rem_pio2f+0x40e>
 802200a:	d044      	beq.n	8022096 <__kernel_rem_pio2f+0x442>
 802200c:	f009 0007 	and.w	r0, r9, #7
 8022010:	b059      	add	sp, #356	; 0x164
 8022012:	ecbd 8b04 	vpop	{d8-d9}
 8022016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802201a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 802201c:	2b03      	cmp	r3, #3
 802201e:	d1f5      	bne.n	802200c <__kernel_rem_pio2f+0x3b8>
 8022020:	aa30      	add	r2, sp, #192	; 0xc0
 8022022:	1f0b      	subs	r3, r1, #4
 8022024:	4620      	mov	r0, r4
 8022026:	4413      	add	r3, r2
 8022028:	461a      	mov	r2, r3
 802202a:	2800      	cmp	r0, #0
 802202c:	f1a2 0204 	sub.w	r2, r2, #4
 8022030:	dc52      	bgt.n	80220d8 <__kernel_rem_pio2f+0x484>
 8022032:	4622      	mov	r2, r4
 8022034:	2a01      	cmp	r2, #1
 8022036:	f1a3 0304 	sub.w	r3, r3, #4
 802203a:	dc5d      	bgt.n	80220f8 <__kernel_rem_pio2f+0x4a4>
 802203c:	ab30      	add	r3, sp, #192	; 0xc0
 802203e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8021f58 <__kernel_rem_pio2f+0x304>
 8022042:	440b      	add	r3, r1
 8022044:	2c01      	cmp	r4, #1
 8022046:	dc67      	bgt.n	8022118 <__kernel_rem_pio2f+0x4c4>
 8022048:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 802204c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8022050:	2f00      	cmp	r7, #0
 8022052:	d167      	bne.n	8022124 <__kernel_rem_pio2f+0x4d0>
 8022054:	edc8 6a00 	vstr	s13, [r8]
 8022058:	ed88 7a01 	vstr	s14, [r8, #4]
 802205c:	edc8 7a02 	vstr	s15, [r8, #8]
 8022060:	e7d4      	b.n	802200c <__kernel_rem_pio2f+0x3b8>
 8022062:	ab30      	add	r3, sp, #192	; 0xc0
 8022064:	4622      	mov	r2, r4
 8022066:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8021f58 <__kernel_rem_pio2f+0x304>
 802206a:	440b      	add	r3, r1
 802206c:	2a00      	cmp	r2, #0
 802206e:	da24      	bge.n	80220ba <__kernel_rem_pio2f+0x466>
 8022070:	b34f      	cbz	r7, 80220c6 <__kernel_rem_pio2f+0x472>
 8022072:	eef1 7a47 	vneg.f32	s15, s14
 8022076:	edc8 7a00 	vstr	s15, [r8]
 802207a:	aa31      	add	r2, sp, #196	; 0xc4
 802207c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8022080:	2301      	movs	r3, #1
 8022082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022086:	429c      	cmp	r4, r3
 8022088:	da20      	bge.n	80220cc <__kernel_rem_pio2f+0x478>
 802208a:	b10f      	cbz	r7, 8022090 <__kernel_rem_pio2f+0x43c>
 802208c:	eef1 7a67 	vneg.f32	s15, s15
 8022090:	edc8 7a01 	vstr	s15, [r8, #4]
 8022094:	e7ba      	b.n	802200c <__kernel_rem_pio2f+0x3b8>
 8022096:	ab30      	add	r3, sp, #192	; 0xc0
 8022098:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8021f58 <__kernel_rem_pio2f+0x304>
 802209c:	440b      	add	r3, r1
 802209e:	2c00      	cmp	r4, #0
 80220a0:	da05      	bge.n	80220ae <__kernel_rem_pio2f+0x45a>
 80220a2:	b10f      	cbz	r7, 80220a8 <__kernel_rem_pio2f+0x454>
 80220a4:	eef1 7a67 	vneg.f32	s15, s15
 80220a8:	edc8 7a00 	vstr	s15, [r8]
 80220ac:	e7ae      	b.n	802200c <__kernel_rem_pio2f+0x3b8>
 80220ae:	ed33 7a01 	vldmdb	r3!, {s14}
 80220b2:	3c01      	subs	r4, #1
 80220b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220b8:	e7f1      	b.n	802209e <__kernel_rem_pio2f+0x44a>
 80220ba:	ed73 7a01 	vldmdb	r3!, {s15}
 80220be:	3a01      	subs	r2, #1
 80220c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80220c4:	e7d2      	b.n	802206c <__kernel_rem_pio2f+0x418>
 80220c6:	eef0 7a47 	vmov.f32	s15, s14
 80220ca:	e7d4      	b.n	8022076 <__kernel_rem_pio2f+0x422>
 80220cc:	ecb2 7a01 	vldmia	r2!, {s14}
 80220d0:	3301      	adds	r3, #1
 80220d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220d6:	e7d6      	b.n	8022086 <__kernel_rem_pio2f+0x432>
 80220d8:	edd2 7a00 	vldr	s15, [r2]
 80220dc:	3801      	subs	r0, #1
 80220de:	edd2 6a01 	vldr	s13, [r2, #4]
 80220e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80220e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80220ea:	ed82 7a00 	vstr	s14, [r2]
 80220ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80220f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80220f6:	e798      	b.n	802202a <__kernel_rem_pio2f+0x3d6>
 80220f8:	edd3 7a00 	vldr	s15, [r3]
 80220fc:	3a01      	subs	r2, #1
 80220fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8022102:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8022106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802210a:	ed83 7a00 	vstr	s14, [r3]
 802210e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022112:	edc3 7a01 	vstr	s15, [r3, #4]
 8022116:	e78d      	b.n	8022034 <__kernel_rem_pio2f+0x3e0>
 8022118:	ed33 7a01 	vldmdb	r3!, {s14}
 802211c:	3c01      	subs	r4, #1
 802211e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022122:	e78f      	b.n	8022044 <__kernel_rem_pio2f+0x3f0>
 8022124:	eef1 6a66 	vneg.f32	s13, s13
 8022128:	eeb1 7a47 	vneg.f32	s14, s14
 802212c:	eef1 7a67 	vneg.f32	s15, s15
 8022130:	edc8 6a00 	vstr	s13, [r8]
 8022134:	ed88 7a01 	vstr	s14, [r8, #4]
 8022138:	e790      	b.n	802205c <__kernel_rem_pio2f+0x408>
 802213a:	bf00      	nop

0802213c <scalbnf>:
 802213c:	ee10 3a10 	vmov	r3, s0
 8022140:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8022144:	d02a      	beq.n	802219c <scalbnf+0x60>
 8022146:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802214a:	d302      	bcc.n	8022152 <scalbnf+0x16>
 802214c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022150:	4770      	bx	lr
 8022152:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8022156:	d122      	bne.n	802219e <scalbnf+0x62>
 8022158:	4b23      	ldr	r3, [pc, #140]	; (80221e8 <scalbnf+0xac>)
 802215a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80221ec <scalbnf+0xb0>
 802215e:	4298      	cmp	r0, r3
 8022160:	ee20 0a27 	vmul.f32	s0, s0, s15
 8022164:	db16      	blt.n	8022194 <scalbnf+0x58>
 8022166:	ee10 3a10 	vmov	r3, s0
 802216a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802216e:	3a19      	subs	r2, #25
 8022170:	f24c 3150 	movw	r1, #50000	; 0xc350
 8022174:	4288      	cmp	r0, r1
 8022176:	dd14      	ble.n	80221a2 <scalbnf+0x66>
 8022178:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80221f0 <scalbnf+0xb4>
 802217c:	ee10 3a10 	vmov	r3, s0
 8022180:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80221f4 <scalbnf+0xb8>
 8022184:	eeb0 7a67 	vmov.f32	s14, s15
 8022188:	2b00      	cmp	r3, #0
 802218a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 802218e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8022192:	4770      	bx	lr
 8022194:	eddf 7a18 	vldr	s15, [pc, #96]	; 80221f8 <scalbnf+0xbc>
 8022198:	ee27 0a80 	vmul.f32	s0, s15, s0
 802219c:	4770      	bx	lr
 802219e:	0dd2      	lsrs	r2, r2, #23
 80221a0:	e7e6      	b.n	8022170 <scalbnf+0x34>
 80221a2:	4410      	add	r0, r2
 80221a4:	28fe      	cmp	r0, #254	; 0xfe
 80221a6:	dce7      	bgt.n	8022178 <scalbnf+0x3c>
 80221a8:	2800      	cmp	r0, #0
 80221aa:	dd06      	ble.n	80221ba <scalbnf+0x7e>
 80221ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80221b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80221b4:	ee00 3a10 	vmov	s0, r3
 80221b8:	4770      	bx	lr
 80221ba:	f110 0f16 	cmn.w	r0, #22
 80221be:	da09      	bge.n	80221d4 <scalbnf+0x98>
 80221c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80221f8 <scalbnf+0xbc>
 80221c4:	ee10 3a10 	vmov	r3, s0
 80221c8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80221fc <scalbnf+0xc0>
 80221cc:	eeb0 7a67 	vmov.f32	s14, s15
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	e7da      	b.n	802218a <scalbnf+0x4e>
 80221d4:	3019      	adds	r0, #25
 80221d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80221da:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8022200 <scalbnf+0xc4>
 80221de:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80221e2:	ee07 3a90 	vmov	s15, r3
 80221e6:	e7d7      	b.n	8022198 <scalbnf+0x5c>
 80221e8:	ffff3cb0 	.word	0xffff3cb0
 80221ec:	4c000000 	.word	0x4c000000
 80221f0:	7149f2ca 	.word	0x7149f2ca
 80221f4:	f149f2ca 	.word	0xf149f2ca
 80221f8:	0da24260 	.word	0x0da24260
 80221fc:	8da24260 	.word	0x8da24260
 8022200:	33000000 	.word	0x33000000

08022204 <floorf>:
 8022204:	febb 0a40 	vrintm.f32	s0, s0
 8022208:	4770      	bx	lr

0802220a <abort>:
 802220a:	2006      	movs	r0, #6
 802220c:	b508      	push	{r3, lr}
 802220e:	f000 fa7b 	bl	8022708 <raise>
 8022212:	2001      	movs	r0, #1
 8022214:	f7f0 ffb8 	bl	8013188 <_exit>

08022218 <malloc>:
 8022218:	4b02      	ldr	r3, [pc, #8]	; (8022224 <malloc+0xc>)
 802221a:	4601      	mov	r1, r0
 802221c:	6818      	ldr	r0, [r3, #0]
 802221e:	f000 b82b 	b.w	8022278 <_malloc_r>
 8022222:	bf00      	nop
 8022224:	20000108 	.word	0x20000108

08022228 <free>:
 8022228:	4b02      	ldr	r3, [pc, #8]	; (8022234 <free+0xc>)
 802222a:	4601      	mov	r1, r0
 802222c:	6818      	ldr	r0, [r3, #0]
 802222e:	f000 bb35 	b.w	802289c <_free_r>
 8022232:	bf00      	nop
 8022234:	20000108 	.word	0x20000108

08022238 <sbrk_aligned>:
 8022238:	b570      	push	{r4, r5, r6, lr}
 802223a:	4e0e      	ldr	r6, [pc, #56]	; (8022274 <sbrk_aligned+0x3c>)
 802223c:	460c      	mov	r4, r1
 802223e:	4605      	mov	r5, r0
 8022240:	6831      	ldr	r1, [r6, #0]
 8022242:	b911      	cbnz	r1, 802224a <sbrk_aligned+0x12>
 8022244:	f000 fab0 	bl	80227a8 <_sbrk_r>
 8022248:	6030      	str	r0, [r6, #0]
 802224a:	4621      	mov	r1, r4
 802224c:	4628      	mov	r0, r5
 802224e:	f000 faab 	bl	80227a8 <_sbrk_r>
 8022252:	1c43      	adds	r3, r0, #1
 8022254:	d00a      	beq.n	802226c <sbrk_aligned+0x34>
 8022256:	1cc4      	adds	r4, r0, #3
 8022258:	f024 0403 	bic.w	r4, r4, #3
 802225c:	42a0      	cmp	r0, r4
 802225e:	d007      	beq.n	8022270 <sbrk_aligned+0x38>
 8022260:	1a21      	subs	r1, r4, r0
 8022262:	4628      	mov	r0, r5
 8022264:	f000 faa0 	bl	80227a8 <_sbrk_r>
 8022268:	3001      	adds	r0, #1
 802226a:	d101      	bne.n	8022270 <sbrk_aligned+0x38>
 802226c:	f04f 34ff 	mov.w	r4, #4294967295
 8022270:	4620      	mov	r0, r4
 8022272:	bd70      	pop	{r4, r5, r6, pc}
 8022274:	20003c84 	.word	0x20003c84

08022278 <_malloc_r>:
 8022278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802227c:	1ccd      	adds	r5, r1, #3
 802227e:	4607      	mov	r7, r0
 8022280:	f025 0503 	bic.w	r5, r5, #3
 8022284:	3508      	adds	r5, #8
 8022286:	2d0c      	cmp	r5, #12
 8022288:	bf38      	it	cc
 802228a:	250c      	movcc	r5, #12
 802228c:	2d00      	cmp	r5, #0
 802228e:	db01      	blt.n	8022294 <_malloc_r+0x1c>
 8022290:	42a9      	cmp	r1, r5
 8022292:	d905      	bls.n	80222a0 <_malloc_r+0x28>
 8022294:	230c      	movs	r3, #12
 8022296:	2600      	movs	r6, #0
 8022298:	603b      	str	r3, [r7, #0]
 802229a:	4630      	mov	r0, r6
 802229c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80222a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8022374 <_malloc_r+0xfc>
 80222a4:	f000 f868 	bl	8022378 <__malloc_lock>
 80222a8:	f8d8 3000 	ldr.w	r3, [r8]
 80222ac:	461c      	mov	r4, r3
 80222ae:	bb5c      	cbnz	r4, 8022308 <_malloc_r+0x90>
 80222b0:	4629      	mov	r1, r5
 80222b2:	4638      	mov	r0, r7
 80222b4:	f7ff ffc0 	bl	8022238 <sbrk_aligned>
 80222b8:	1c43      	adds	r3, r0, #1
 80222ba:	4604      	mov	r4, r0
 80222bc:	d155      	bne.n	802236a <_malloc_r+0xf2>
 80222be:	f8d8 4000 	ldr.w	r4, [r8]
 80222c2:	4626      	mov	r6, r4
 80222c4:	2e00      	cmp	r6, #0
 80222c6:	d145      	bne.n	8022354 <_malloc_r+0xdc>
 80222c8:	2c00      	cmp	r4, #0
 80222ca:	d048      	beq.n	802235e <_malloc_r+0xe6>
 80222cc:	6823      	ldr	r3, [r4, #0]
 80222ce:	4631      	mov	r1, r6
 80222d0:	4638      	mov	r0, r7
 80222d2:	eb04 0903 	add.w	r9, r4, r3
 80222d6:	f000 fa67 	bl	80227a8 <_sbrk_r>
 80222da:	4581      	cmp	r9, r0
 80222dc:	d13f      	bne.n	802235e <_malloc_r+0xe6>
 80222de:	6821      	ldr	r1, [r4, #0]
 80222e0:	4638      	mov	r0, r7
 80222e2:	1a6d      	subs	r5, r5, r1
 80222e4:	4629      	mov	r1, r5
 80222e6:	f7ff ffa7 	bl	8022238 <sbrk_aligned>
 80222ea:	3001      	adds	r0, #1
 80222ec:	d037      	beq.n	802235e <_malloc_r+0xe6>
 80222ee:	6823      	ldr	r3, [r4, #0]
 80222f0:	442b      	add	r3, r5
 80222f2:	6023      	str	r3, [r4, #0]
 80222f4:	f8d8 3000 	ldr.w	r3, [r8]
 80222f8:	2b00      	cmp	r3, #0
 80222fa:	d038      	beq.n	802236e <_malloc_r+0xf6>
 80222fc:	685a      	ldr	r2, [r3, #4]
 80222fe:	42a2      	cmp	r2, r4
 8022300:	d12b      	bne.n	802235a <_malloc_r+0xe2>
 8022302:	2200      	movs	r2, #0
 8022304:	605a      	str	r2, [r3, #4]
 8022306:	e00f      	b.n	8022328 <_malloc_r+0xb0>
 8022308:	6822      	ldr	r2, [r4, #0]
 802230a:	1b52      	subs	r2, r2, r5
 802230c:	d41f      	bmi.n	802234e <_malloc_r+0xd6>
 802230e:	2a0b      	cmp	r2, #11
 8022310:	d917      	bls.n	8022342 <_malloc_r+0xca>
 8022312:	1961      	adds	r1, r4, r5
 8022314:	42a3      	cmp	r3, r4
 8022316:	6025      	str	r5, [r4, #0]
 8022318:	bf18      	it	ne
 802231a:	6059      	strne	r1, [r3, #4]
 802231c:	6863      	ldr	r3, [r4, #4]
 802231e:	bf08      	it	eq
 8022320:	f8c8 1000 	streq.w	r1, [r8]
 8022324:	5162      	str	r2, [r4, r5]
 8022326:	604b      	str	r3, [r1, #4]
 8022328:	f104 060b 	add.w	r6, r4, #11
 802232c:	4638      	mov	r0, r7
 802232e:	f000 f829 	bl	8022384 <__malloc_unlock>
 8022332:	1d23      	adds	r3, r4, #4
 8022334:	f026 0607 	bic.w	r6, r6, #7
 8022338:	1af2      	subs	r2, r6, r3
 802233a:	d0ae      	beq.n	802229a <_malloc_r+0x22>
 802233c:	1b9b      	subs	r3, r3, r6
 802233e:	50a3      	str	r3, [r4, r2]
 8022340:	e7ab      	b.n	802229a <_malloc_r+0x22>
 8022342:	42a3      	cmp	r3, r4
 8022344:	6862      	ldr	r2, [r4, #4]
 8022346:	d1dd      	bne.n	8022304 <_malloc_r+0x8c>
 8022348:	f8c8 2000 	str.w	r2, [r8]
 802234c:	e7ec      	b.n	8022328 <_malloc_r+0xb0>
 802234e:	4623      	mov	r3, r4
 8022350:	6864      	ldr	r4, [r4, #4]
 8022352:	e7ac      	b.n	80222ae <_malloc_r+0x36>
 8022354:	4634      	mov	r4, r6
 8022356:	6876      	ldr	r6, [r6, #4]
 8022358:	e7b4      	b.n	80222c4 <_malloc_r+0x4c>
 802235a:	4613      	mov	r3, r2
 802235c:	e7cc      	b.n	80222f8 <_malloc_r+0x80>
 802235e:	230c      	movs	r3, #12
 8022360:	4638      	mov	r0, r7
 8022362:	603b      	str	r3, [r7, #0]
 8022364:	f000 f80e 	bl	8022384 <__malloc_unlock>
 8022368:	e797      	b.n	802229a <_malloc_r+0x22>
 802236a:	6025      	str	r5, [r4, #0]
 802236c:	e7dc      	b.n	8022328 <_malloc_r+0xb0>
 802236e:	605b      	str	r3, [r3, #4]
 8022370:	deff      	udf	#255	; 0xff
 8022372:	bf00      	nop
 8022374:	20003c80 	.word	0x20003c80

08022378 <__malloc_lock>:
 8022378:	4801      	ldr	r0, [pc, #4]	; (8022380 <__malloc_lock+0x8>)
 802237a:	f000 ba62 	b.w	8022842 <__retarget_lock_acquire_recursive>
 802237e:	bf00      	nop
 8022380:	20003dc8 	.word	0x20003dc8

08022384 <__malloc_unlock>:
 8022384:	4801      	ldr	r0, [pc, #4]	; (802238c <__malloc_unlock+0x8>)
 8022386:	f000 ba5d 	b.w	8022844 <__retarget_lock_release_recursive>
 802238a:	bf00      	nop
 802238c:	20003dc8 	.word	0x20003dc8

08022390 <rand>:
 8022390:	4b16      	ldr	r3, [pc, #88]	; (80223ec <rand+0x5c>)
 8022392:	b510      	push	{r4, lr}
 8022394:	681c      	ldr	r4, [r3, #0]
 8022396:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022398:	b9b3      	cbnz	r3, 80223c8 <rand+0x38>
 802239a:	2018      	movs	r0, #24
 802239c:	f7ff ff3c 	bl	8022218 <malloc>
 80223a0:	4602      	mov	r2, r0
 80223a2:	6320      	str	r0, [r4, #48]	; 0x30
 80223a4:	b920      	cbnz	r0, 80223b0 <rand+0x20>
 80223a6:	4b12      	ldr	r3, [pc, #72]	; (80223f0 <rand+0x60>)
 80223a8:	2152      	movs	r1, #82	; 0x52
 80223aa:	4812      	ldr	r0, [pc, #72]	; (80223f4 <rand+0x64>)
 80223ac:	f000 fa58 	bl	8022860 <__assert_func>
 80223b0:	4911      	ldr	r1, [pc, #68]	; (80223f8 <rand+0x68>)
 80223b2:	4b12      	ldr	r3, [pc, #72]	; (80223fc <rand+0x6c>)
 80223b4:	e9c0 1300 	strd	r1, r3, [r0]
 80223b8:	4b11      	ldr	r3, [pc, #68]	; (8022400 <rand+0x70>)
 80223ba:	2100      	movs	r1, #0
 80223bc:	6083      	str	r3, [r0, #8]
 80223be:	230b      	movs	r3, #11
 80223c0:	8183      	strh	r3, [r0, #12]
 80223c2:	2001      	movs	r0, #1
 80223c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80223c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80223ca:	480e      	ldr	r0, [pc, #56]	; (8022404 <rand+0x74>)
 80223cc:	690b      	ldr	r3, [r1, #16]
 80223ce:	694c      	ldr	r4, [r1, #20]
 80223d0:	4a0d      	ldr	r2, [pc, #52]	; (8022408 <rand+0x78>)
 80223d2:	4358      	muls	r0, r3
 80223d4:	fb02 0004 	mla	r0, r2, r4, r0
 80223d8:	fba3 3202 	umull	r3, r2, r3, r2
 80223dc:	3301      	adds	r3, #1
 80223de:	eb40 0002 	adc.w	r0, r0, r2
 80223e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80223e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80223ea:	bd10      	pop	{r4, pc}
 80223ec:	20000108 	.word	0x20000108
 80223f0:	08024370 	.word	0x08024370
 80223f4:	08024387 	.word	0x08024387
 80223f8:	abcd330e 	.word	0xabcd330e
 80223fc:	e66d1234 	.word	0xe66d1234
 8022400:	0005deec 	.word	0x0005deec
 8022404:	5851f42d 	.word	0x5851f42d
 8022408:	4c957f2d 	.word	0x4c957f2d

0802240c <std>:
 802240c:	2300      	movs	r3, #0
 802240e:	b510      	push	{r4, lr}
 8022410:	4604      	mov	r4, r0
 8022412:	6083      	str	r3, [r0, #8]
 8022414:	8181      	strh	r1, [r0, #12]
 8022416:	4619      	mov	r1, r3
 8022418:	6643      	str	r3, [r0, #100]	; 0x64
 802241a:	81c2      	strh	r2, [r0, #14]
 802241c:	2208      	movs	r2, #8
 802241e:	6183      	str	r3, [r0, #24]
 8022420:	e9c0 3300 	strd	r3, r3, [r0]
 8022424:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022428:	305c      	adds	r0, #92	; 0x5c
 802242a:	f000 f93c 	bl	80226a6 <memset>
 802242e:	4b0d      	ldr	r3, [pc, #52]	; (8022464 <std+0x58>)
 8022430:	6224      	str	r4, [r4, #32]
 8022432:	6263      	str	r3, [r4, #36]	; 0x24
 8022434:	4b0c      	ldr	r3, [pc, #48]	; (8022468 <std+0x5c>)
 8022436:	62a3      	str	r3, [r4, #40]	; 0x28
 8022438:	4b0c      	ldr	r3, [pc, #48]	; (802246c <std+0x60>)
 802243a:	62e3      	str	r3, [r4, #44]	; 0x2c
 802243c:	4b0c      	ldr	r3, [pc, #48]	; (8022470 <std+0x64>)
 802243e:	6323      	str	r3, [r4, #48]	; 0x30
 8022440:	4b0c      	ldr	r3, [pc, #48]	; (8022474 <std+0x68>)
 8022442:	429c      	cmp	r4, r3
 8022444:	d006      	beq.n	8022454 <std+0x48>
 8022446:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802244a:	4294      	cmp	r4, r2
 802244c:	d002      	beq.n	8022454 <std+0x48>
 802244e:	33d0      	adds	r3, #208	; 0xd0
 8022450:	429c      	cmp	r4, r3
 8022452:	d105      	bne.n	8022460 <std+0x54>
 8022454:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802245c:	f000 b9f0 	b.w	8022840 <__retarget_lock_init_recursive>
 8022460:	bd10      	pop	{r4, pc}
 8022462:	bf00      	nop
 8022464:	080225e9 	.word	0x080225e9
 8022468:	0802260f 	.word	0x0802260f
 802246c:	08022647 	.word	0x08022647
 8022470:	0802266b 	.word	0x0802266b
 8022474:	20003c88 	.word	0x20003c88

08022478 <stdio_exit_handler>:
 8022478:	4a02      	ldr	r2, [pc, #8]	; (8022484 <stdio_exit_handler+0xc>)
 802247a:	4903      	ldr	r1, [pc, #12]	; (8022488 <stdio_exit_handler+0x10>)
 802247c:	4803      	ldr	r0, [pc, #12]	; (802248c <stdio_exit_handler+0x14>)
 802247e:	f000 b869 	b.w	8022554 <_fwalk_sglue>
 8022482:	bf00      	nop
 8022484:	200000b0 	.word	0x200000b0
 8022488:	08023079 	.word	0x08023079
 802248c:	200000bc 	.word	0x200000bc

08022490 <cleanup_stdio>:
 8022490:	6841      	ldr	r1, [r0, #4]
 8022492:	4b0c      	ldr	r3, [pc, #48]	; (80224c4 <cleanup_stdio+0x34>)
 8022494:	4299      	cmp	r1, r3
 8022496:	b510      	push	{r4, lr}
 8022498:	4604      	mov	r4, r0
 802249a:	d001      	beq.n	80224a0 <cleanup_stdio+0x10>
 802249c:	f000 fdec 	bl	8023078 <_fflush_r>
 80224a0:	68a1      	ldr	r1, [r4, #8]
 80224a2:	4b09      	ldr	r3, [pc, #36]	; (80224c8 <cleanup_stdio+0x38>)
 80224a4:	4299      	cmp	r1, r3
 80224a6:	d002      	beq.n	80224ae <cleanup_stdio+0x1e>
 80224a8:	4620      	mov	r0, r4
 80224aa:	f000 fde5 	bl	8023078 <_fflush_r>
 80224ae:	68e1      	ldr	r1, [r4, #12]
 80224b0:	4b06      	ldr	r3, [pc, #24]	; (80224cc <cleanup_stdio+0x3c>)
 80224b2:	4299      	cmp	r1, r3
 80224b4:	d004      	beq.n	80224c0 <cleanup_stdio+0x30>
 80224b6:	4620      	mov	r0, r4
 80224b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224bc:	f000 bddc 	b.w	8023078 <_fflush_r>
 80224c0:	bd10      	pop	{r4, pc}
 80224c2:	bf00      	nop
 80224c4:	20003c88 	.word	0x20003c88
 80224c8:	20003cf0 	.word	0x20003cf0
 80224cc:	20003d58 	.word	0x20003d58

080224d0 <global_stdio_init.part.0>:
 80224d0:	b510      	push	{r4, lr}
 80224d2:	4b0b      	ldr	r3, [pc, #44]	; (8022500 <global_stdio_init.part.0+0x30>)
 80224d4:	2104      	movs	r1, #4
 80224d6:	4c0b      	ldr	r4, [pc, #44]	; (8022504 <global_stdio_init.part.0+0x34>)
 80224d8:	4a0b      	ldr	r2, [pc, #44]	; (8022508 <global_stdio_init.part.0+0x38>)
 80224da:	4620      	mov	r0, r4
 80224dc:	601a      	str	r2, [r3, #0]
 80224de:	2200      	movs	r2, #0
 80224e0:	f7ff ff94 	bl	802240c <std>
 80224e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80224e8:	2201      	movs	r2, #1
 80224ea:	2109      	movs	r1, #9
 80224ec:	f7ff ff8e 	bl	802240c <std>
 80224f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80224f4:	2202      	movs	r2, #2
 80224f6:	2112      	movs	r1, #18
 80224f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224fc:	f7ff bf86 	b.w	802240c <std>
 8022500:	20003dc0 	.word	0x20003dc0
 8022504:	20003c88 	.word	0x20003c88
 8022508:	08022479 	.word	0x08022479

0802250c <__sfp_lock_acquire>:
 802250c:	4801      	ldr	r0, [pc, #4]	; (8022514 <__sfp_lock_acquire+0x8>)
 802250e:	f000 b998 	b.w	8022842 <__retarget_lock_acquire_recursive>
 8022512:	bf00      	nop
 8022514:	20003dc9 	.word	0x20003dc9

08022518 <__sfp_lock_release>:
 8022518:	4801      	ldr	r0, [pc, #4]	; (8022520 <__sfp_lock_release+0x8>)
 802251a:	f000 b993 	b.w	8022844 <__retarget_lock_release_recursive>
 802251e:	bf00      	nop
 8022520:	20003dc9 	.word	0x20003dc9

08022524 <__sinit>:
 8022524:	b510      	push	{r4, lr}
 8022526:	4604      	mov	r4, r0
 8022528:	f7ff fff0 	bl	802250c <__sfp_lock_acquire>
 802252c:	6a23      	ldr	r3, [r4, #32]
 802252e:	b11b      	cbz	r3, 8022538 <__sinit+0x14>
 8022530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022534:	f7ff bff0 	b.w	8022518 <__sfp_lock_release>
 8022538:	4b04      	ldr	r3, [pc, #16]	; (802254c <__sinit+0x28>)
 802253a:	6223      	str	r3, [r4, #32]
 802253c:	4b04      	ldr	r3, [pc, #16]	; (8022550 <__sinit+0x2c>)
 802253e:	681b      	ldr	r3, [r3, #0]
 8022540:	2b00      	cmp	r3, #0
 8022542:	d1f5      	bne.n	8022530 <__sinit+0xc>
 8022544:	f7ff ffc4 	bl	80224d0 <global_stdio_init.part.0>
 8022548:	e7f2      	b.n	8022530 <__sinit+0xc>
 802254a:	bf00      	nop
 802254c:	08022491 	.word	0x08022491
 8022550:	20003dc0 	.word	0x20003dc0

08022554 <_fwalk_sglue>:
 8022554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022558:	4607      	mov	r7, r0
 802255a:	4688      	mov	r8, r1
 802255c:	4614      	mov	r4, r2
 802255e:	2600      	movs	r6, #0
 8022560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022564:	f1b9 0901 	subs.w	r9, r9, #1
 8022568:	d505      	bpl.n	8022576 <_fwalk_sglue+0x22>
 802256a:	6824      	ldr	r4, [r4, #0]
 802256c:	2c00      	cmp	r4, #0
 802256e:	d1f7      	bne.n	8022560 <_fwalk_sglue+0xc>
 8022570:	4630      	mov	r0, r6
 8022572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022576:	89ab      	ldrh	r3, [r5, #12]
 8022578:	2b01      	cmp	r3, #1
 802257a:	d907      	bls.n	802258c <_fwalk_sglue+0x38>
 802257c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022580:	3301      	adds	r3, #1
 8022582:	d003      	beq.n	802258c <_fwalk_sglue+0x38>
 8022584:	4629      	mov	r1, r5
 8022586:	4638      	mov	r0, r7
 8022588:	47c0      	blx	r8
 802258a:	4306      	orrs	r6, r0
 802258c:	3568      	adds	r5, #104	; 0x68
 802258e:	e7e9      	b.n	8022564 <_fwalk_sglue+0x10>

08022590 <siscanf>:
 8022590:	b40e      	push	{r1, r2, r3}
 8022592:	b510      	push	{r4, lr}
 8022594:	b09f      	sub	sp, #124	; 0x7c
 8022596:	f44f 7101 	mov.w	r1, #516	; 0x204
 802259a:	ac21      	add	r4, sp, #132	; 0x84
 802259c:	f8ad 101c 	strh.w	r1, [sp, #28]
 80225a0:	9004      	str	r0, [sp, #16]
 80225a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80225a6:	9008      	str	r0, [sp, #32]
 80225a8:	9201      	str	r2, [sp, #4]
 80225aa:	f7dd fe53 	bl	8000254 <strlen>
 80225ae:	4b0c      	ldr	r3, [pc, #48]	; (80225e0 <siscanf+0x50>)
 80225b0:	a904      	add	r1, sp, #16
 80225b2:	9005      	str	r0, [sp, #20]
 80225b4:	930d      	str	r3, [sp, #52]	; 0x34
 80225b6:	2300      	movs	r3, #0
 80225b8:	9009      	str	r0, [sp, #36]	; 0x24
 80225ba:	9311      	str	r3, [sp, #68]	; 0x44
 80225bc:	9316      	str	r3, [sp, #88]	; 0x58
 80225be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80225c2:	4808      	ldr	r0, [pc, #32]	; (80225e4 <siscanf+0x54>)
 80225c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80225c8:	4623      	mov	r3, r4
 80225ca:	9a01      	ldr	r2, [sp, #4]
 80225cc:	6800      	ldr	r0, [r0, #0]
 80225ce:	9403      	str	r4, [sp, #12]
 80225d0:	f000 fa0a 	bl	80229e8 <__ssvfiscanf_r>
 80225d4:	b01f      	add	sp, #124	; 0x7c
 80225d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225da:	b003      	add	sp, #12
 80225dc:	4770      	bx	lr
 80225de:	bf00      	nop
 80225e0:	0802260b 	.word	0x0802260b
 80225e4:	20000108 	.word	0x20000108

080225e8 <__sread>:
 80225e8:	b510      	push	{r4, lr}
 80225ea:	460c      	mov	r4, r1
 80225ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80225f0:	f000 f8b4 	bl	802275c <_read_r>
 80225f4:	2800      	cmp	r0, #0
 80225f6:	bfab      	itete	ge
 80225f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80225fa:	89a3      	ldrhlt	r3, [r4, #12]
 80225fc:	181b      	addge	r3, r3, r0
 80225fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022602:	bfac      	ite	ge
 8022604:	6563      	strge	r3, [r4, #84]	; 0x54
 8022606:	81a3      	strhlt	r3, [r4, #12]
 8022608:	bd10      	pop	{r4, pc}

0802260a <__seofread>:
 802260a:	2000      	movs	r0, #0
 802260c:	4770      	bx	lr

0802260e <__swrite>:
 802260e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022612:	461f      	mov	r7, r3
 8022614:	898b      	ldrh	r3, [r1, #12]
 8022616:	4605      	mov	r5, r0
 8022618:	460c      	mov	r4, r1
 802261a:	05db      	lsls	r3, r3, #23
 802261c:	4616      	mov	r6, r2
 802261e:	d505      	bpl.n	802262c <__swrite+0x1e>
 8022620:	2302      	movs	r3, #2
 8022622:	2200      	movs	r2, #0
 8022624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022628:	f000 f886 	bl	8022738 <_lseek_r>
 802262c:	89a3      	ldrh	r3, [r4, #12]
 802262e:	4632      	mov	r2, r6
 8022630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022634:	4628      	mov	r0, r5
 8022636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802263a:	81a3      	strh	r3, [r4, #12]
 802263c:	463b      	mov	r3, r7
 802263e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022642:	f000 b8c1 	b.w	80227c8 <_write_r>

08022646 <__sseek>:
 8022646:	b510      	push	{r4, lr}
 8022648:	460c      	mov	r4, r1
 802264a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802264e:	f000 f873 	bl	8022738 <_lseek_r>
 8022652:	1c43      	adds	r3, r0, #1
 8022654:	89a3      	ldrh	r3, [r4, #12]
 8022656:	bf15      	itete	ne
 8022658:	6560      	strne	r0, [r4, #84]	; 0x54
 802265a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802265e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022662:	81a3      	strheq	r3, [r4, #12]
 8022664:	bf18      	it	ne
 8022666:	81a3      	strhne	r3, [r4, #12]
 8022668:	bd10      	pop	{r4, pc}

0802266a <__sclose>:
 802266a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802266e:	f000 b853 	b.w	8022718 <_close_r>

08022672 <memmove>:
 8022672:	4288      	cmp	r0, r1
 8022674:	b510      	push	{r4, lr}
 8022676:	eb01 0402 	add.w	r4, r1, r2
 802267a:	d902      	bls.n	8022682 <memmove+0x10>
 802267c:	4284      	cmp	r4, r0
 802267e:	4623      	mov	r3, r4
 8022680:	d807      	bhi.n	8022692 <memmove+0x20>
 8022682:	1e43      	subs	r3, r0, #1
 8022684:	42a1      	cmp	r1, r4
 8022686:	d008      	beq.n	802269a <memmove+0x28>
 8022688:	f811 2b01 	ldrb.w	r2, [r1], #1
 802268c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022690:	e7f8      	b.n	8022684 <memmove+0x12>
 8022692:	4402      	add	r2, r0
 8022694:	4601      	mov	r1, r0
 8022696:	428a      	cmp	r2, r1
 8022698:	d100      	bne.n	802269c <memmove+0x2a>
 802269a:	bd10      	pop	{r4, pc}
 802269c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80226a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80226a4:	e7f7      	b.n	8022696 <memmove+0x24>

080226a6 <memset>:
 80226a6:	4402      	add	r2, r0
 80226a8:	4603      	mov	r3, r0
 80226aa:	4293      	cmp	r3, r2
 80226ac:	d100      	bne.n	80226b0 <memset+0xa>
 80226ae:	4770      	bx	lr
 80226b0:	f803 1b01 	strb.w	r1, [r3], #1
 80226b4:	e7f9      	b.n	80226aa <memset+0x4>

080226b6 <_raise_r>:
 80226b6:	291f      	cmp	r1, #31
 80226b8:	b538      	push	{r3, r4, r5, lr}
 80226ba:	4604      	mov	r4, r0
 80226bc:	460d      	mov	r5, r1
 80226be:	d904      	bls.n	80226ca <_raise_r+0x14>
 80226c0:	2316      	movs	r3, #22
 80226c2:	6003      	str	r3, [r0, #0]
 80226c4:	f04f 30ff 	mov.w	r0, #4294967295
 80226c8:	bd38      	pop	{r3, r4, r5, pc}
 80226ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80226cc:	b112      	cbz	r2, 80226d4 <_raise_r+0x1e>
 80226ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80226d2:	b94b      	cbnz	r3, 80226e8 <_raise_r+0x32>
 80226d4:	4620      	mov	r0, r4
 80226d6:	f000 f865 	bl	80227a4 <_getpid_r>
 80226da:	462a      	mov	r2, r5
 80226dc:	4601      	mov	r1, r0
 80226de:	4620      	mov	r0, r4
 80226e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80226e4:	f000 b84c 	b.w	8022780 <_kill_r>
 80226e8:	2b01      	cmp	r3, #1
 80226ea:	d00a      	beq.n	8022702 <_raise_r+0x4c>
 80226ec:	1c59      	adds	r1, r3, #1
 80226ee:	d103      	bne.n	80226f8 <_raise_r+0x42>
 80226f0:	2316      	movs	r3, #22
 80226f2:	6003      	str	r3, [r0, #0]
 80226f4:	2001      	movs	r0, #1
 80226f6:	e7e7      	b.n	80226c8 <_raise_r+0x12>
 80226f8:	2400      	movs	r4, #0
 80226fa:	4628      	mov	r0, r5
 80226fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022700:	4798      	blx	r3
 8022702:	2000      	movs	r0, #0
 8022704:	e7e0      	b.n	80226c8 <_raise_r+0x12>
	...

08022708 <raise>:
 8022708:	4b02      	ldr	r3, [pc, #8]	; (8022714 <raise+0xc>)
 802270a:	4601      	mov	r1, r0
 802270c:	6818      	ldr	r0, [r3, #0]
 802270e:	f7ff bfd2 	b.w	80226b6 <_raise_r>
 8022712:	bf00      	nop
 8022714:	20000108 	.word	0x20000108

08022718 <_close_r>:
 8022718:	b538      	push	{r3, r4, r5, lr}
 802271a:	2300      	movs	r3, #0
 802271c:	4d05      	ldr	r5, [pc, #20]	; (8022734 <_close_r+0x1c>)
 802271e:	4604      	mov	r4, r0
 8022720:	4608      	mov	r0, r1
 8022722:	602b      	str	r3, [r5, #0]
 8022724:	f7f0 fd73 	bl	801320e <_close>
 8022728:	1c43      	adds	r3, r0, #1
 802272a:	d102      	bne.n	8022732 <_close_r+0x1a>
 802272c:	682b      	ldr	r3, [r5, #0]
 802272e:	b103      	cbz	r3, 8022732 <_close_r+0x1a>
 8022730:	6023      	str	r3, [r4, #0]
 8022732:	bd38      	pop	{r3, r4, r5, pc}
 8022734:	20003dc4 	.word	0x20003dc4

08022738 <_lseek_r>:
 8022738:	b538      	push	{r3, r4, r5, lr}
 802273a:	4604      	mov	r4, r0
 802273c:	4d06      	ldr	r5, [pc, #24]	; (8022758 <_lseek_r+0x20>)
 802273e:	4608      	mov	r0, r1
 8022740:	4611      	mov	r1, r2
 8022742:	2200      	movs	r2, #0
 8022744:	602a      	str	r2, [r5, #0]
 8022746:	461a      	mov	r2, r3
 8022748:	f7f0 fd88 	bl	801325c <_lseek>
 802274c:	1c43      	adds	r3, r0, #1
 802274e:	d102      	bne.n	8022756 <_lseek_r+0x1e>
 8022750:	682b      	ldr	r3, [r5, #0]
 8022752:	b103      	cbz	r3, 8022756 <_lseek_r+0x1e>
 8022754:	6023      	str	r3, [r4, #0]
 8022756:	bd38      	pop	{r3, r4, r5, pc}
 8022758:	20003dc4 	.word	0x20003dc4

0802275c <_read_r>:
 802275c:	b538      	push	{r3, r4, r5, lr}
 802275e:	4604      	mov	r4, r0
 8022760:	4d06      	ldr	r5, [pc, #24]	; (802277c <_read_r+0x20>)
 8022762:	4608      	mov	r0, r1
 8022764:	4611      	mov	r1, r2
 8022766:	2200      	movs	r2, #0
 8022768:	602a      	str	r2, [r5, #0]
 802276a:	461a      	mov	r2, r3
 802276c:	f7f0 fd16 	bl	801319c <_read>
 8022770:	1c43      	adds	r3, r0, #1
 8022772:	d102      	bne.n	802277a <_read_r+0x1e>
 8022774:	682b      	ldr	r3, [r5, #0]
 8022776:	b103      	cbz	r3, 802277a <_read_r+0x1e>
 8022778:	6023      	str	r3, [r4, #0]
 802277a:	bd38      	pop	{r3, r4, r5, pc}
 802277c:	20003dc4 	.word	0x20003dc4

08022780 <_kill_r>:
 8022780:	b538      	push	{r3, r4, r5, lr}
 8022782:	2300      	movs	r3, #0
 8022784:	4d06      	ldr	r5, [pc, #24]	; (80227a0 <_kill_r+0x20>)
 8022786:	4604      	mov	r4, r0
 8022788:	4608      	mov	r0, r1
 802278a:	4611      	mov	r1, r2
 802278c:	602b      	str	r3, [r5, #0]
 802278e:	f7f0 fceb 	bl	8013168 <_kill>
 8022792:	1c43      	adds	r3, r0, #1
 8022794:	d102      	bne.n	802279c <_kill_r+0x1c>
 8022796:	682b      	ldr	r3, [r5, #0]
 8022798:	b103      	cbz	r3, 802279c <_kill_r+0x1c>
 802279a:	6023      	str	r3, [r4, #0]
 802279c:	bd38      	pop	{r3, r4, r5, pc}
 802279e:	bf00      	nop
 80227a0:	20003dc4 	.word	0x20003dc4

080227a4 <_getpid_r>:
 80227a4:	f7f0 bcd8 	b.w	8013158 <_getpid>

080227a8 <_sbrk_r>:
 80227a8:	b538      	push	{r3, r4, r5, lr}
 80227aa:	2300      	movs	r3, #0
 80227ac:	4d05      	ldr	r5, [pc, #20]	; (80227c4 <_sbrk_r+0x1c>)
 80227ae:	4604      	mov	r4, r0
 80227b0:	4608      	mov	r0, r1
 80227b2:	602b      	str	r3, [r5, #0]
 80227b4:	f7f0 fd60 	bl	8013278 <_sbrk>
 80227b8:	1c43      	adds	r3, r0, #1
 80227ba:	d102      	bne.n	80227c2 <_sbrk_r+0x1a>
 80227bc:	682b      	ldr	r3, [r5, #0]
 80227be:	b103      	cbz	r3, 80227c2 <_sbrk_r+0x1a>
 80227c0:	6023      	str	r3, [r4, #0]
 80227c2:	bd38      	pop	{r3, r4, r5, pc}
 80227c4:	20003dc4 	.word	0x20003dc4

080227c8 <_write_r>:
 80227c8:	b538      	push	{r3, r4, r5, lr}
 80227ca:	4604      	mov	r4, r0
 80227cc:	4d06      	ldr	r5, [pc, #24]	; (80227e8 <_write_r+0x20>)
 80227ce:	4608      	mov	r0, r1
 80227d0:	4611      	mov	r1, r2
 80227d2:	2200      	movs	r2, #0
 80227d4:	602a      	str	r2, [r5, #0]
 80227d6:	461a      	mov	r2, r3
 80227d8:	f7f0 fcfd 	bl	80131d6 <_write>
 80227dc:	1c43      	adds	r3, r0, #1
 80227de:	d102      	bne.n	80227e6 <_write_r+0x1e>
 80227e0:	682b      	ldr	r3, [r5, #0]
 80227e2:	b103      	cbz	r3, 80227e6 <_write_r+0x1e>
 80227e4:	6023      	str	r3, [r4, #0]
 80227e6:	bd38      	pop	{r3, r4, r5, pc}
 80227e8:	20003dc4 	.word	0x20003dc4

080227ec <__errno>:
 80227ec:	4b01      	ldr	r3, [pc, #4]	; (80227f4 <__errno+0x8>)
 80227ee:	6818      	ldr	r0, [r3, #0]
 80227f0:	4770      	bx	lr
 80227f2:	bf00      	nop
 80227f4:	20000108 	.word	0x20000108

080227f8 <__libc_init_array>:
 80227f8:	b570      	push	{r4, r5, r6, lr}
 80227fa:	4d0d      	ldr	r5, [pc, #52]	; (8022830 <__libc_init_array+0x38>)
 80227fc:	2600      	movs	r6, #0
 80227fe:	4c0d      	ldr	r4, [pc, #52]	; (8022834 <__libc_init_array+0x3c>)
 8022800:	1b64      	subs	r4, r4, r5
 8022802:	10a4      	asrs	r4, r4, #2
 8022804:	42a6      	cmp	r6, r4
 8022806:	d109      	bne.n	802281c <__libc_init_array+0x24>
 8022808:	4d0b      	ldr	r5, [pc, #44]	; (8022838 <__libc_init_array+0x40>)
 802280a:	2600      	movs	r6, #0
 802280c:	4c0b      	ldr	r4, [pc, #44]	; (802283c <__libc_init_array+0x44>)
 802280e:	f001 fa0b 	bl	8023c28 <_init>
 8022812:	1b64      	subs	r4, r4, r5
 8022814:	10a4      	asrs	r4, r4, #2
 8022816:	42a6      	cmp	r6, r4
 8022818:	d105      	bne.n	8022826 <__libc_init_array+0x2e>
 802281a:	bd70      	pop	{r4, r5, r6, pc}
 802281c:	f855 3b04 	ldr.w	r3, [r5], #4
 8022820:	3601      	adds	r6, #1
 8022822:	4798      	blx	r3
 8022824:	e7ee      	b.n	8022804 <__libc_init_array+0xc>
 8022826:	f855 3b04 	ldr.w	r3, [r5], #4
 802282a:	3601      	adds	r6, #1
 802282c:	4798      	blx	r3
 802282e:	e7f2      	b.n	8022816 <__libc_init_array+0x1e>
 8022830:	08024574 	.word	0x08024574
 8022834:	08024574 	.word	0x08024574
 8022838:	08024574 	.word	0x08024574
 802283c:	08024584 	.word	0x08024584

08022840 <__retarget_lock_init_recursive>:
 8022840:	4770      	bx	lr

08022842 <__retarget_lock_acquire_recursive>:
 8022842:	4770      	bx	lr

08022844 <__retarget_lock_release_recursive>:
 8022844:	4770      	bx	lr

08022846 <memcpy>:
 8022846:	440a      	add	r2, r1
 8022848:	1e43      	subs	r3, r0, #1
 802284a:	4291      	cmp	r1, r2
 802284c:	d100      	bne.n	8022850 <memcpy+0xa>
 802284e:	4770      	bx	lr
 8022850:	b510      	push	{r4, lr}
 8022852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022856:	4291      	cmp	r1, r2
 8022858:	f803 4f01 	strb.w	r4, [r3, #1]!
 802285c:	d1f9      	bne.n	8022852 <memcpy+0xc>
 802285e:	bd10      	pop	{r4, pc}

08022860 <__assert_func>:
 8022860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022862:	4614      	mov	r4, r2
 8022864:	461a      	mov	r2, r3
 8022866:	4b09      	ldr	r3, [pc, #36]	; (802288c <__assert_func+0x2c>)
 8022868:	4605      	mov	r5, r0
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	68d8      	ldr	r0, [r3, #12]
 802286e:	b14c      	cbz	r4, 8022884 <__assert_func+0x24>
 8022870:	4b07      	ldr	r3, [pc, #28]	; (8022890 <__assert_func+0x30>)
 8022872:	9100      	str	r1, [sp, #0]
 8022874:	4907      	ldr	r1, [pc, #28]	; (8022894 <__assert_func+0x34>)
 8022876:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802287a:	462b      	mov	r3, r5
 802287c:	f000 fc24 	bl	80230c8 <fiprintf>
 8022880:	f7ff fcc3 	bl	802220a <abort>
 8022884:	4b04      	ldr	r3, [pc, #16]	; (8022898 <__assert_func+0x38>)
 8022886:	461c      	mov	r4, r3
 8022888:	e7f3      	b.n	8022872 <__assert_func+0x12>
 802288a:	bf00      	nop
 802288c:	20000108 	.word	0x20000108
 8022890:	080243df 	.word	0x080243df
 8022894:	080243ec 	.word	0x080243ec
 8022898:	0802441a 	.word	0x0802441a

0802289c <_free_r>:
 802289c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802289e:	2900      	cmp	r1, #0
 80228a0:	d043      	beq.n	802292a <_free_r+0x8e>
 80228a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80228a6:	1f0c      	subs	r4, r1, #4
 80228a8:	9001      	str	r0, [sp, #4]
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	bfb8      	it	lt
 80228ae:	18e4      	addlt	r4, r4, r3
 80228b0:	f7ff fd62 	bl	8022378 <__malloc_lock>
 80228b4:	4a1e      	ldr	r2, [pc, #120]	; (8022930 <_free_r+0x94>)
 80228b6:	9801      	ldr	r0, [sp, #4]
 80228b8:	6813      	ldr	r3, [r2, #0]
 80228ba:	b933      	cbnz	r3, 80228ca <_free_r+0x2e>
 80228bc:	6063      	str	r3, [r4, #4]
 80228be:	6014      	str	r4, [r2, #0]
 80228c0:	b003      	add	sp, #12
 80228c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80228c6:	f7ff bd5d 	b.w	8022384 <__malloc_unlock>
 80228ca:	42a3      	cmp	r3, r4
 80228cc:	d908      	bls.n	80228e0 <_free_r+0x44>
 80228ce:	6825      	ldr	r5, [r4, #0]
 80228d0:	1961      	adds	r1, r4, r5
 80228d2:	428b      	cmp	r3, r1
 80228d4:	bf01      	itttt	eq
 80228d6:	6819      	ldreq	r1, [r3, #0]
 80228d8:	685b      	ldreq	r3, [r3, #4]
 80228da:	1949      	addeq	r1, r1, r5
 80228dc:	6021      	streq	r1, [r4, #0]
 80228de:	e7ed      	b.n	80228bc <_free_r+0x20>
 80228e0:	461a      	mov	r2, r3
 80228e2:	685b      	ldr	r3, [r3, #4]
 80228e4:	b10b      	cbz	r3, 80228ea <_free_r+0x4e>
 80228e6:	42a3      	cmp	r3, r4
 80228e8:	d9fa      	bls.n	80228e0 <_free_r+0x44>
 80228ea:	6811      	ldr	r1, [r2, #0]
 80228ec:	1855      	adds	r5, r2, r1
 80228ee:	42a5      	cmp	r5, r4
 80228f0:	d10b      	bne.n	802290a <_free_r+0x6e>
 80228f2:	6824      	ldr	r4, [r4, #0]
 80228f4:	4421      	add	r1, r4
 80228f6:	1854      	adds	r4, r2, r1
 80228f8:	6011      	str	r1, [r2, #0]
 80228fa:	42a3      	cmp	r3, r4
 80228fc:	d1e0      	bne.n	80228c0 <_free_r+0x24>
 80228fe:	681c      	ldr	r4, [r3, #0]
 8022900:	685b      	ldr	r3, [r3, #4]
 8022902:	440c      	add	r4, r1
 8022904:	6053      	str	r3, [r2, #4]
 8022906:	6014      	str	r4, [r2, #0]
 8022908:	e7da      	b.n	80228c0 <_free_r+0x24>
 802290a:	d902      	bls.n	8022912 <_free_r+0x76>
 802290c:	230c      	movs	r3, #12
 802290e:	6003      	str	r3, [r0, #0]
 8022910:	e7d6      	b.n	80228c0 <_free_r+0x24>
 8022912:	6825      	ldr	r5, [r4, #0]
 8022914:	1961      	adds	r1, r4, r5
 8022916:	428b      	cmp	r3, r1
 8022918:	bf02      	ittt	eq
 802291a:	6819      	ldreq	r1, [r3, #0]
 802291c:	685b      	ldreq	r3, [r3, #4]
 802291e:	1949      	addeq	r1, r1, r5
 8022920:	6063      	str	r3, [r4, #4]
 8022922:	bf08      	it	eq
 8022924:	6021      	streq	r1, [r4, #0]
 8022926:	6054      	str	r4, [r2, #4]
 8022928:	e7ca      	b.n	80228c0 <_free_r+0x24>
 802292a:	b003      	add	sp, #12
 802292c:	bd30      	pop	{r4, r5, pc}
 802292e:	bf00      	nop
 8022930:	20003c80 	.word	0x20003c80

08022934 <_sungetc_r>:
 8022934:	b538      	push	{r3, r4, r5, lr}
 8022936:	1c4b      	adds	r3, r1, #1
 8022938:	4614      	mov	r4, r2
 802293a:	d103      	bne.n	8022944 <_sungetc_r+0x10>
 802293c:	f04f 35ff 	mov.w	r5, #4294967295
 8022940:	4628      	mov	r0, r5
 8022942:	bd38      	pop	{r3, r4, r5, pc}
 8022944:	8993      	ldrh	r3, [r2, #12]
 8022946:	b2cd      	uxtb	r5, r1
 8022948:	f023 0320 	bic.w	r3, r3, #32
 802294c:	8193      	strh	r3, [r2, #12]
 802294e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022950:	6852      	ldr	r2, [r2, #4]
 8022952:	b18b      	cbz	r3, 8022978 <_sungetc_r+0x44>
 8022954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022956:	4293      	cmp	r3, r2
 8022958:	dd08      	ble.n	802296c <_sungetc_r+0x38>
 802295a:	6823      	ldr	r3, [r4, #0]
 802295c:	1e5a      	subs	r2, r3, #1
 802295e:	6022      	str	r2, [r4, #0]
 8022960:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022964:	6863      	ldr	r3, [r4, #4]
 8022966:	3301      	adds	r3, #1
 8022968:	6063      	str	r3, [r4, #4]
 802296a:	e7e9      	b.n	8022940 <_sungetc_r+0xc>
 802296c:	4621      	mov	r1, r4
 802296e:	f000 fbf6 	bl	802315e <__submore>
 8022972:	2800      	cmp	r0, #0
 8022974:	d0f1      	beq.n	802295a <_sungetc_r+0x26>
 8022976:	e7e1      	b.n	802293c <_sungetc_r+0x8>
 8022978:	6921      	ldr	r1, [r4, #16]
 802297a:	6823      	ldr	r3, [r4, #0]
 802297c:	b151      	cbz	r1, 8022994 <_sungetc_r+0x60>
 802297e:	4299      	cmp	r1, r3
 8022980:	d208      	bcs.n	8022994 <_sungetc_r+0x60>
 8022982:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8022986:	42a9      	cmp	r1, r5
 8022988:	d104      	bne.n	8022994 <_sungetc_r+0x60>
 802298a:	3b01      	subs	r3, #1
 802298c:	3201      	adds	r2, #1
 802298e:	6023      	str	r3, [r4, #0]
 8022990:	6062      	str	r2, [r4, #4]
 8022992:	e7d5      	b.n	8022940 <_sungetc_r+0xc>
 8022994:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8022998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802299c:	6363      	str	r3, [r4, #52]	; 0x34
 802299e:	2303      	movs	r3, #3
 80229a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80229a2:	4623      	mov	r3, r4
 80229a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80229a8:	6023      	str	r3, [r4, #0]
 80229aa:	2301      	movs	r3, #1
 80229ac:	e7dc      	b.n	8022968 <_sungetc_r+0x34>

080229ae <__ssrefill_r>:
 80229ae:	b510      	push	{r4, lr}
 80229b0:	460c      	mov	r4, r1
 80229b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80229b4:	b169      	cbz	r1, 80229d2 <__ssrefill_r+0x24>
 80229b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80229ba:	4299      	cmp	r1, r3
 80229bc:	d001      	beq.n	80229c2 <__ssrefill_r+0x14>
 80229be:	f7ff ff6d 	bl	802289c <_free_r>
 80229c2:	2000      	movs	r0, #0
 80229c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80229c6:	6360      	str	r0, [r4, #52]	; 0x34
 80229c8:	6063      	str	r3, [r4, #4]
 80229ca:	b113      	cbz	r3, 80229d2 <__ssrefill_r+0x24>
 80229cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80229ce:	6023      	str	r3, [r4, #0]
 80229d0:	bd10      	pop	{r4, pc}
 80229d2:	6923      	ldr	r3, [r4, #16]
 80229d4:	f04f 30ff 	mov.w	r0, #4294967295
 80229d8:	6023      	str	r3, [r4, #0]
 80229da:	2300      	movs	r3, #0
 80229dc:	6063      	str	r3, [r4, #4]
 80229de:	89a3      	ldrh	r3, [r4, #12]
 80229e0:	f043 0320 	orr.w	r3, r3, #32
 80229e4:	81a3      	strh	r3, [r4, #12]
 80229e6:	e7f3      	b.n	80229d0 <__ssrefill_r+0x22>

080229e8 <__ssvfiscanf_r>:
 80229e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80229ec:	460c      	mov	r4, r1
 80229ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80229f2:	2100      	movs	r1, #0
 80229f4:	4606      	mov	r6, r0
 80229f6:	f10d 0804 	add.w	r8, sp, #4
 80229fa:	4fa6      	ldr	r7, [pc, #664]	; (8022c94 <__ssvfiscanf_r+0x2ac>)
 80229fc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8022ca0 <__ssvfiscanf_r+0x2b8>
 8022a00:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8022a04:	9300      	str	r3, [sp, #0]
 8022a06:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8022a0a:	49a3      	ldr	r1, [pc, #652]	; (8022c98 <__ssvfiscanf_r+0x2b0>)
 8022a0c:	91a0      	str	r1, [sp, #640]	; 0x280
 8022a0e:	49a3      	ldr	r1, [pc, #652]	; (8022c9c <__ssvfiscanf_r+0x2b4>)
 8022a10:	91a1      	str	r1, [sp, #644]	; 0x284
 8022a12:	7813      	ldrb	r3, [r2, #0]
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	f000 815a 	beq.w	8022cce <__ssvfiscanf_r+0x2e6>
 8022a1a:	5cf9      	ldrb	r1, [r7, r3]
 8022a1c:	1c55      	adds	r5, r2, #1
 8022a1e:	f011 0108 	ands.w	r1, r1, #8
 8022a22:	d019      	beq.n	8022a58 <__ssvfiscanf_r+0x70>
 8022a24:	6863      	ldr	r3, [r4, #4]
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	dd0f      	ble.n	8022a4a <__ssvfiscanf_r+0x62>
 8022a2a:	6823      	ldr	r3, [r4, #0]
 8022a2c:	781a      	ldrb	r2, [r3, #0]
 8022a2e:	5cba      	ldrb	r2, [r7, r2]
 8022a30:	0712      	lsls	r2, r2, #28
 8022a32:	d401      	bmi.n	8022a38 <__ssvfiscanf_r+0x50>
 8022a34:	462a      	mov	r2, r5
 8022a36:	e7ec      	b.n	8022a12 <__ssvfiscanf_r+0x2a>
 8022a38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022a3a:	3301      	adds	r3, #1
 8022a3c:	3201      	adds	r2, #1
 8022a3e:	6023      	str	r3, [r4, #0]
 8022a40:	9245      	str	r2, [sp, #276]	; 0x114
 8022a42:	6862      	ldr	r2, [r4, #4]
 8022a44:	3a01      	subs	r2, #1
 8022a46:	6062      	str	r2, [r4, #4]
 8022a48:	e7ec      	b.n	8022a24 <__ssvfiscanf_r+0x3c>
 8022a4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022a4c:	4621      	mov	r1, r4
 8022a4e:	4630      	mov	r0, r6
 8022a50:	4798      	blx	r3
 8022a52:	2800      	cmp	r0, #0
 8022a54:	d0e9      	beq.n	8022a2a <__ssvfiscanf_r+0x42>
 8022a56:	e7ed      	b.n	8022a34 <__ssvfiscanf_r+0x4c>
 8022a58:	2b25      	cmp	r3, #37	; 0x25
 8022a5a:	d012      	beq.n	8022a82 <__ssvfiscanf_r+0x9a>
 8022a5c:	469a      	mov	sl, r3
 8022a5e:	6863      	ldr	r3, [r4, #4]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	f340 8092 	ble.w	8022b8a <__ssvfiscanf_r+0x1a2>
 8022a66:	6822      	ldr	r2, [r4, #0]
 8022a68:	7813      	ldrb	r3, [r2, #0]
 8022a6a:	4553      	cmp	r3, sl
 8022a6c:	f040 812f 	bne.w	8022cce <__ssvfiscanf_r+0x2e6>
 8022a70:	6863      	ldr	r3, [r4, #4]
 8022a72:	3201      	adds	r2, #1
 8022a74:	3b01      	subs	r3, #1
 8022a76:	6022      	str	r2, [r4, #0]
 8022a78:	6063      	str	r3, [r4, #4]
 8022a7a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8022a7c:	3301      	adds	r3, #1
 8022a7e:	9345      	str	r3, [sp, #276]	; 0x114
 8022a80:	e7d8      	b.n	8022a34 <__ssvfiscanf_r+0x4c>
 8022a82:	9141      	str	r1, [sp, #260]	; 0x104
 8022a84:	9143      	str	r1, [sp, #268]	; 0x10c
 8022a86:	7853      	ldrb	r3, [r2, #1]
 8022a88:	2b2a      	cmp	r3, #42	; 0x2a
 8022a8a:	bf04      	itt	eq
 8022a8c:	2310      	moveq	r3, #16
 8022a8e:	1c95      	addeq	r5, r2, #2
 8022a90:	f04f 020a 	mov.w	r2, #10
 8022a94:	bf08      	it	eq
 8022a96:	9341      	streq	r3, [sp, #260]	; 0x104
 8022a98:	46aa      	mov	sl, r5
 8022a9a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8022a9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022aa2:	2b09      	cmp	r3, #9
 8022aa4:	d91c      	bls.n	8022ae0 <__ssvfiscanf_r+0xf8>
 8022aa6:	2203      	movs	r2, #3
 8022aa8:	487d      	ldr	r0, [pc, #500]	; (8022ca0 <__ssvfiscanf_r+0x2b8>)
 8022aaa:	f000 fb8f 	bl	80231cc <memchr>
 8022aae:	b138      	cbz	r0, 8022ac0 <__ssvfiscanf_r+0xd8>
 8022ab0:	eba0 0009 	sub.w	r0, r0, r9
 8022ab4:	2301      	movs	r3, #1
 8022ab6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022ab8:	4655      	mov	r5, sl
 8022aba:	4083      	lsls	r3, r0
 8022abc:	4313      	orrs	r3, r2
 8022abe:	9341      	str	r3, [sp, #260]	; 0x104
 8022ac0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022ac4:	2b78      	cmp	r3, #120	; 0x78
 8022ac6:	d806      	bhi.n	8022ad6 <__ssvfiscanf_r+0xee>
 8022ac8:	2b57      	cmp	r3, #87	; 0x57
 8022aca:	d810      	bhi.n	8022aee <__ssvfiscanf_r+0x106>
 8022acc:	2b25      	cmp	r3, #37	; 0x25
 8022ace:	d0c5      	beq.n	8022a5c <__ssvfiscanf_r+0x74>
 8022ad0:	d856      	bhi.n	8022b80 <__ssvfiscanf_r+0x198>
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d064      	beq.n	8022ba0 <__ssvfiscanf_r+0x1b8>
 8022ad6:	2303      	movs	r3, #3
 8022ad8:	9347      	str	r3, [sp, #284]	; 0x11c
 8022ada:	230a      	movs	r3, #10
 8022adc:	9342      	str	r3, [sp, #264]	; 0x108
 8022ade:	e075      	b.n	8022bcc <__ssvfiscanf_r+0x1e4>
 8022ae0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022ae2:	4655      	mov	r5, sl
 8022ae4:	fb02 1103 	mla	r1, r2, r3, r1
 8022ae8:	3930      	subs	r1, #48	; 0x30
 8022aea:	9143      	str	r1, [sp, #268]	; 0x10c
 8022aec:	e7d4      	b.n	8022a98 <__ssvfiscanf_r+0xb0>
 8022aee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8022af2:	2a20      	cmp	r2, #32
 8022af4:	d8ef      	bhi.n	8022ad6 <__ssvfiscanf_r+0xee>
 8022af6:	a101      	add	r1, pc, #4	; (adr r1, 8022afc <__ssvfiscanf_r+0x114>)
 8022af8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022afc:	08022baf 	.word	0x08022baf
 8022b00:	08022ad7 	.word	0x08022ad7
 8022b04:	08022ad7 	.word	0x08022ad7
 8022b08:	08022c0d 	.word	0x08022c0d
 8022b0c:	08022ad7 	.word	0x08022ad7
 8022b10:	08022ad7 	.word	0x08022ad7
 8022b14:	08022ad7 	.word	0x08022ad7
 8022b18:	08022ad7 	.word	0x08022ad7
 8022b1c:	08022ad7 	.word	0x08022ad7
 8022b20:	08022ad7 	.word	0x08022ad7
 8022b24:	08022ad7 	.word	0x08022ad7
 8022b28:	08022c23 	.word	0x08022c23
 8022b2c:	08022c09 	.word	0x08022c09
 8022b30:	08022b87 	.word	0x08022b87
 8022b34:	08022b87 	.word	0x08022b87
 8022b38:	08022b87 	.word	0x08022b87
 8022b3c:	08022ad7 	.word	0x08022ad7
 8022b40:	08022bc5 	.word	0x08022bc5
 8022b44:	08022ad7 	.word	0x08022ad7
 8022b48:	08022ad7 	.word	0x08022ad7
 8022b4c:	08022ad7 	.word	0x08022ad7
 8022b50:	08022ad7 	.word	0x08022ad7
 8022b54:	08022c33 	.word	0x08022c33
 8022b58:	08022c01 	.word	0x08022c01
 8022b5c:	08022ba7 	.word	0x08022ba7
 8022b60:	08022ad7 	.word	0x08022ad7
 8022b64:	08022ad7 	.word	0x08022ad7
 8022b68:	08022c2f 	.word	0x08022c2f
 8022b6c:	08022ad7 	.word	0x08022ad7
 8022b70:	08022c09 	.word	0x08022c09
 8022b74:	08022ad7 	.word	0x08022ad7
 8022b78:	08022ad7 	.word	0x08022ad7
 8022b7c:	08022baf 	.word	0x08022baf
 8022b80:	3b45      	subs	r3, #69	; 0x45
 8022b82:	2b02      	cmp	r3, #2
 8022b84:	d8a7      	bhi.n	8022ad6 <__ssvfiscanf_r+0xee>
 8022b86:	2305      	movs	r3, #5
 8022b88:	e01f      	b.n	8022bca <__ssvfiscanf_r+0x1e2>
 8022b8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022b8c:	4621      	mov	r1, r4
 8022b8e:	4630      	mov	r0, r6
 8022b90:	4798      	blx	r3
 8022b92:	2800      	cmp	r0, #0
 8022b94:	f43f af67 	beq.w	8022a66 <__ssvfiscanf_r+0x7e>
 8022b98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022b9a:	2800      	cmp	r0, #0
 8022b9c:	f040 808d 	bne.w	8022cba <__ssvfiscanf_r+0x2d2>
 8022ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8022ba4:	e08f      	b.n	8022cc6 <__ssvfiscanf_r+0x2de>
 8022ba6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022ba8:	f042 0220 	orr.w	r2, r2, #32
 8022bac:	9241      	str	r2, [sp, #260]	; 0x104
 8022bae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022bb4:	9241      	str	r2, [sp, #260]	; 0x104
 8022bb6:	2210      	movs	r2, #16
 8022bb8:	2b6f      	cmp	r3, #111	; 0x6f
 8022bba:	9242      	str	r2, [sp, #264]	; 0x108
 8022bbc:	bf34      	ite	cc
 8022bbe:	2303      	movcc	r3, #3
 8022bc0:	2304      	movcs	r3, #4
 8022bc2:	e002      	b.n	8022bca <__ssvfiscanf_r+0x1e2>
 8022bc4:	2300      	movs	r3, #0
 8022bc6:	9342      	str	r3, [sp, #264]	; 0x108
 8022bc8:	2303      	movs	r3, #3
 8022bca:	9347      	str	r3, [sp, #284]	; 0x11c
 8022bcc:	6863      	ldr	r3, [r4, #4]
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	dd3e      	ble.n	8022c50 <__ssvfiscanf_r+0x268>
 8022bd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022bd4:	0659      	lsls	r1, r3, #25
 8022bd6:	d404      	bmi.n	8022be2 <__ssvfiscanf_r+0x1fa>
 8022bd8:	6823      	ldr	r3, [r4, #0]
 8022bda:	781a      	ldrb	r2, [r3, #0]
 8022bdc:	5cba      	ldrb	r2, [r7, r2]
 8022bde:	0712      	lsls	r2, r2, #28
 8022be0:	d43d      	bmi.n	8022c5e <__ssvfiscanf_r+0x276>
 8022be2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022be4:	2b02      	cmp	r3, #2
 8022be6:	dc4c      	bgt.n	8022c82 <__ssvfiscanf_r+0x29a>
 8022be8:	466b      	mov	r3, sp
 8022bea:	4622      	mov	r2, r4
 8022bec:	a941      	add	r1, sp, #260	; 0x104
 8022bee:	4630      	mov	r0, r6
 8022bf0:	f000 f872 	bl	8022cd8 <_scanf_chars>
 8022bf4:	2801      	cmp	r0, #1
 8022bf6:	d06a      	beq.n	8022cce <__ssvfiscanf_r+0x2e6>
 8022bf8:	2802      	cmp	r0, #2
 8022bfa:	f47f af1b 	bne.w	8022a34 <__ssvfiscanf_r+0x4c>
 8022bfe:	e7cb      	b.n	8022b98 <__ssvfiscanf_r+0x1b0>
 8022c00:	2308      	movs	r3, #8
 8022c02:	9342      	str	r3, [sp, #264]	; 0x108
 8022c04:	2304      	movs	r3, #4
 8022c06:	e7e0      	b.n	8022bca <__ssvfiscanf_r+0x1e2>
 8022c08:	220a      	movs	r2, #10
 8022c0a:	e7d5      	b.n	8022bb8 <__ssvfiscanf_r+0x1d0>
 8022c0c:	4629      	mov	r1, r5
 8022c0e:	4640      	mov	r0, r8
 8022c10:	f000 fa6c 	bl	80230ec <__sccl>
 8022c14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022c16:	4605      	mov	r5, r0
 8022c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c1c:	9341      	str	r3, [sp, #260]	; 0x104
 8022c1e:	2301      	movs	r3, #1
 8022c20:	e7d3      	b.n	8022bca <__ssvfiscanf_r+0x1e2>
 8022c22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c28:	9341      	str	r3, [sp, #260]	; 0x104
 8022c2a:	2300      	movs	r3, #0
 8022c2c:	e7cd      	b.n	8022bca <__ssvfiscanf_r+0x1e2>
 8022c2e:	2302      	movs	r3, #2
 8022c30:	e7cb      	b.n	8022bca <__ssvfiscanf_r+0x1e2>
 8022c32:	9841      	ldr	r0, [sp, #260]	; 0x104
 8022c34:	06c3      	lsls	r3, r0, #27
 8022c36:	f53f aefd 	bmi.w	8022a34 <__ssvfiscanf_r+0x4c>
 8022c3a:	9b00      	ldr	r3, [sp, #0]
 8022c3c:	07c0      	lsls	r0, r0, #31
 8022c3e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022c40:	f103 0104 	add.w	r1, r3, #4
 8022c44:	9100      	str	r1, [sp, #0]
 8022c46:	681b      	ldr	r3, [r3, #0]
 8022c48:	bf4c      	ite	mi
 8022c4a:	801a      	strhmi	r2, [r3, #0]
 8022c4c:	601a      	strpl	r2, [r3, #0]
 8022c4e:	e6f1      	b.n	8022a34 <__ssvfiscanf_r+0x4c>
 8022c50:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022c52:	4621      	mov	r1, r4
 8022c54:	4630      	mov	r0, r6
 8022c56:	4798      	blx	r3
 8022c58:	2800      	cmp	r0, #0
 8022c5a:	d0ba      	beq.n	8022bd2 <__ssvfiscanf_r+0x1ea>
 8022c5c:	e79c      	b.n	8022b98 <__ssvfiscanf_r+0x1b0>
 8022c5e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022c60:	3201      	adds	r2, #1
 8022c62:	9245      	str	r2, [sp, #276]	; 0x114
 8022c64:	6862      	ldr	r2, [r4, #4]
 8022c66:	3a01      	subs	r2, #1
 8022c68:	2a00      	cmp	r2, #0
 8022c6a:	6062      	str	r2, [r4, #4]
 8022c6c:	dd02      	ble.n	8022c74 <__ssvfiscanf_r+0x28c>
 8022c6e:	3301      	adds	r3, #1
 8022c70:	6023      	str	r3, [r4, #0]
 8022c72:	e7b1      	b.n	8022bd8 <__ssvfiscanf_r+0x1f0>
 8022c74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022c76:	4621      	mov	r1, r4
 8022c78:	4630      	mov	r0, r6
 8022c7a:	4798      	blx	r3
 8022c7c:	2800      	cmp	r0, #0
 8022c7e:	d0ab      	beq.n	8022bd8 <__ssvfiscanf_r+0x1f0>
 8022c80:	e78a      	b.n	8022b98 <__ssvfiscanf_r+0x1b0>
 8022c82:	2b04      	cmp	r3, #4
 8022c84:	dc0e      	bgt.n	8022ca4 <__ssvfiscanf_r+0x2bc>
 8022c86:	466b      	mov	r3, sp
 8022c88:	4622      	mov	r2, r4
 8022c8a:	a941      	add	r1, sp, #260	; 0x104
 8022c8c:	4630      	mov	r0, r6
 8022c8e:	f000 f87d 	bl	8022d8c <_scanf_i>
 8022c92:	e7af      	b.n	8022bf4 <__ssvfiscanf_r+0x20c>
 8022c94:	0802443b 	.word	0x0802443b
 8022c98:	08022935 	.word	0x08022935
 8022c9c:	080229af 	.word	0x080229af
 8022ca0:	0802441b 	.word	0x0802441b
 8022ca4:	4b0b      	ldr	r3, [pc, #44]	; (8022cd4 <__ssvfiscanf_r+0x2ec>)
 8022ca6:	2b00      	cmp	r3, #0
 8022ca8:	f43f aec4 	beq.w	8022a34 <__ssvfiscanf_r+0x4c>
 8022cac:	466b      	mov	r3, sp
 8022cae:	4622      	mov	r2, r4
 8022cb0:	a941      	add	r1, sp, #260	; 0x104
 8022cb2:	4630      	mov	r0, r6
 8022cb4:	f3af 8000 	nop.w
 8022cb8:	e79c      	b.n	8022bf4 <__ssvfiscanf_r+0x20c>
 8022cba:	89a3      	ldrh	r3, [r4, #12]
 8022cbc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022cc0:	bf18      	it	ne
 8022cc2:	f04f 30ff 	movne.w	r0, #4294967295
 8022cc6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8022cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022cce:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022cd0:	e7f9      	b.n	8022cc6 <__ssvfiscanf_r+0x2de>
 8022cd2:	bf00      	nop
 8022cd4:	00000000 	.word	0x00000000

08022cd8 <_scanf_chars>:
 8022cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022cdc:	4615      	mov	r5, r2
 8022cde:	688a      	ldr	r2, [r1, #8]
 8022ce0:	4680      	mov	r8, r0
 8022ce2:	460c      	mov	r4, r1
 8022ce4:	b932      	cbnz	r2, 8022cf4 <_scanf_chars+0x1c>
 8022ce6:	698a      	ldr	r2, [r1, #24]
 8022ce8:	2a00      	cmp	r2, #0
 8022cea:	bf0c      	ite	eq
 8022cec:	2201      	moveq	r2, #1
 8022cee:	f04f 32ff 	movne.w	r2, #4294967295
 8022cf2:	608a      	str	r2, [r1, #8]
 8022cf4:	6822      	ldr	r2, [r4, #0]
 8022cf6:	2700      	movs	r7, #0
 8022cf8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8022d88 <_scanf_chars+0xb0>
 8022cfc:	06d1      	lsls	r1, r2, #27
 8022cfe:	bf5f      	itttt	pl
 8022d00:	681a      	ldrpl	r2, [r3, #0]
 8022d02:	1d11      	addpl	r1, r2, #4
 8022d04:	6019      	strpl	r1, [r3, #0]
 8022d06:	6816      	ldrpl	r6, [r2, #0]
 8022d08:	69a0      	ldr	r0, [r4, #24]
 8022d0a:	b188      	cbz	r0, 8022d30 <_scanf_chars+0x58>
 8022d0c:	2801      	cmp	r0, #1
 8022d0e:	d107      	bne.n	8022d20 <_scanf_chars+0x48>
 8022d10:	682a      	ldr	r2, [r5, #0]
 8022d12:	7811      	ldrb	r1, [r2, #0]
 8022d14:	6962      	ldr	r2, [r4, #20]
 8022d16:	5c52      	ldrb	r2, [r2, r1]
 8022d18:	b952      	cbnz	r2, 8022d30 <_scanf_chars+0x58>
 8022d1a:	2f00      	cmp	r7, #0
 8022d1c:	d031      	beq.n	8022d82 <_scanf_chars+0xaa>
 8022d1e:	e022      	b.n	8022d66 <_scanf_chars+0x8e>
 8022d20:	2802      	cmp	r0, #2
 8022d22:	d120      	bne.n	8022d66 <_scanf_chars+0x8e>
 8022d24:	682b      	ldr	r3, [r5, #0]
 8022d26:	781b      	ldrb	r3, [r3, #0]
 8022d28:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022d2c:	071b      	lsls	r3, r3, #28
 8022d2e:	d41a      	bmi.n	8022d66 <_scanf_chars+0x8e>
 8022d30:	6823      	ldr	r3, [r4, #0]
 8022d32:	3701      	adds	r7, #1
 8022d34:	06da      	lsls	r2, r3, #27
 8022d36:	bf5e      	ittt	pl
 8022d38:	682b      	ldrpl	r3, [r5, #0]
 8022d3a:	781b      	ldrbpl	r3, [r3, #0]
 8022d3c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022d40:	682a      	ldr	r2, [r5, #0]
 8022d42:	686b      	ldr	r3, [r5, #4]
 8022d44:	3201      	adds	r2, #1
 8022d46:	3b01      	subs	r3, #1
 8022d48:	602a      	str	r2, [r5, #0]
 8022d4a:	68a2      	ldr	r2, [r4, #8]
 8022d4c:	606b      	str	r3, [r5, #4]
 8022d4e:	3a01      	subs	r2, #1
 8022d50:	60a2      	str	r2, [r4, #8]
 8022d52:	b142      	cbz	r2, 8022d66 <_scanf_chars+0x8e>
 8022d54:	2b00      	cmp	r3, #0
 8022d56:	dcd7      	bgt.n	8022d08 <_scanf_chars+0x30>
 8022d58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022d5c:	4629      	mov	r1, r5
 8022d5e:	4640      	mov	r0, r8
 8022d60:	4798      	blx	r3
 8022d62:	2800      	cmp	r0, #0
 8022d64:	d0d0      	beq.n	8022d08 <_scanf_chars+0x30>
 8022d66:	6823      	ldr	r3, [r4, #0]
 8022d68:	f013 0310 	ands.w	r3, r3, #16
 8022d6c:	d105      	bne.n	8022d7a <_scanf_chars+0xa2>
 8022d6e:	68e2      	ldr	r2, [r4, #12]
 8022d70:	3201      	adds	r2, #1
 8022d72:	60e2      	str	r2, [r4, #12]
 8022d74:	69a2      	ldr	r2, [r4, #24]
 8022d76:	b102      	cbz	r2, 8022d7a <_scanf_chars+0xa2>
 8022d78:	7033      	strb	r3, [r6, #0]
 8022d7a:	6923      	ldr	r3, [r4, #16]
 8022d7c:	2000      	movs	r0, #0
 8022d7e:	443b      	add	r3, r7
 8022d80:	6123      	str	r3, [r4, #16]
 8022d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d86:	bf00      	nop
 8022d88:	0802443b 	.word	0x0802443b

08022d8c <_scanf_i>:
 8022d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d90:	4698      	mov	r8, r3
 8022d92:	b087      	sub	sp, #28
 8022d94:	4b72      	ldr	r3, [pc, #456]	; (8022f60 <_scanf_i+0x1d4>)
 8022d96:	460c      	mov	r4, r1
 8022d98:	4682      	mov	sl, r0
 8022d9a:	4616      	mov	r6, r2
 8022d9c:	4627      	mov	r7, r4
 8022d9e:	f04f 0b00 	mov.w	fp, #0
 8022da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022da6:	ab03      	add	r3, sp, #12
 8022da8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022dac:	4b6d      	ldr	r3, [pc, #436]	; (8022f64 <_scanf_i+0x1d8>)
 8022dae:	69a1      	ldr	r1, [r4, #24]
 8022db0:	4a6d      	ldr	r2, [pc, #436]	; (8022f68 <_scanf_i+0x1dc>)
 8022db2:	2903      	cmp	r1, #3
 8022db4:	bf18      	it	ne
 8022db6:	461a      	movne	r2, r3
 8022db8:	68a3      	ldr	r3, [r4, #8]
 8022dba:	9201      	str	r2, [sp, #4]
 8022dbc:	1e5a      	subs	r2, r3, #1
 8022dbe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022dc2:	bf89      	itett	hi
 8022dc4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022dc8:	f04f 0900 	movls.w	r9, #0
 8022dcc:	eb03 0905 	addhi.w	r9, r3, r5
 8022dd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022dd4:	bf88      	it	hi
 8022dd6:	60a3      	strhi	r3, [r4, #8]
 8022dd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022ddc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022de0:	463d      	mov	r5, r7
 8022de2:	6023      	str	r3, [r4, #0]
 8022de4:	6831      	ldr	r1, [r6, #0]
 8022de6:	ab03      	add	r3, sp, #12
 8022de8:	2202      	movs	r2, #2
 8022dea:	7809      	ldrb	r1, [r1, #0]
 8022dec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022df0:	f000 f9ec 	bl	80231cc <memchr>
 8022df4:	b328      	cbz	r0, 8022e42 <_scanf_i+0xb6>
 8022df6:	f1bb 0f01 	cmp.w	fp, #1
 8022dfa:	d159      	bne.n	8022eb0 <_scanf_i+0x124>
 8022dfc:	6862      	ldr	r2, [r4, #4]
 8022dfe:	b92a      	cbnz	r2, 8022e0c <_scanf_i+0x80>
 8022e00:	6822      	ldr	r2, [r4, #0]
 8022e02:	2308      	movs	r3, #8
 8022e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022e08:	6063      	str	r3, [r4, #4]
 8022e0a:	6022      	str	r2, [r4, #0]
 8022e0c:	6822      	ldr	r2, [r4, #0]
 8022e0e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022e12:	6022      	str	r2, [r4, #0]
 8022e14:	68a2      	ldr	r2, [r4, #8]
 8022e16:	1e51      	subs	r1, r2, #1
 8022e18:	60a1      	str	r1, [r4, #8]
 8022e1a:	b192      	cbz	r2, 8022e42 <_scanf_i+0xb6>
 8022e1c:	6832      	ldr	r2, [r6, #0]
 8022e1e:	1c51      	adds	r1, r2, #1
 8022e20:	6031      	str	r1, [r6, #0]
 8022e22:	7812      	ldrb	r2, [r2, #0]
 8022e24:	f805 2b01 	strb.w	r2, [r5], #1
 8022e28:	6872      	ldr	r2, [r6, #4]
 8022e2a:	3a01      	subs	r2, #1
 8022e2c:	2a00      	cmp	r2, #0
 8022e2e:	6072      	str	r2, [r6, #4]
 8022e30:	dc07      	bgt.n	8022e42 <_scanf_i+0xb6>
 8022e32:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022e36:	4631      	mov	r1, r6
 8022e38:	4650      	mov	r0, sl
 8022e3a:	4790      	blx	r2
 8022e3c:	2800      	cmp	r0, #0
 8022e3e:	f040 8085 	bne.w	8022f4c <_scanf_i+0x1c0>
 8022e42:	f10b 0b01 	add.w	fp, fp, #1
 8022e46:	f1bb 0f03 	cmp.w	fp, #3
 8022e4a:	d1cb      	bne.n	8022de4 <_scanf_i+0x58>
 8022e4c:	6863      	ldr	r3, [r4, #4]
 8022e4e:	b90b      	cbnz	r3, 8022e54 <_scanf_i+0xc8>
 8022e50:	230a      	movs	r3, #10
 8022e52:	6063      	str	r3, [r4, #4]
 8022e54:	6863      	ldr	r3, [r4, #4]
 8022e56:	f04f 0b00 	mov.w	fp, #0
 8022e5a:	4944      	ldr	r1, [pc, #272]	; (8022f6c <_scanf_i+0x1e0>)
 8022e5c:	6960      	ldr	r0, [r4, #20]
 8022e5e:	1ac9      	subs	r1, r1, r3
 8022e60:	f000 f944 	bl	80230ec <__sccl>
 8022e64:	68a3      	ldr	r3, [r4, #8]
 8022e66:	6822      	ldr	r2, [r4, #0]
 8022e68:	2b00      	cmp	r3, #0
 8022e6a:	d03d      	beq.n	8022ee8 <_scanf_i+0x15c>
 8022e6c:	6831      	ldr	r1, [r6, #0]
 8022e6e:	6960      	ldr	r0, [r4, #20]
 8022e70:	f891 c000 	ldrb.w	ip, [r1]
 8022e74:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022e78:	2800      	cmp	r0, #0
 8022e7a:	d035      	beq.n	8022ee8 <_scanf_i+0x15c>
 8022e7c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022e80:	d124      	bne.n	8022ecc <_scanf_i+0x140>
 8022e82:	0510      	lsls	r0, r2, #20
 8022e84:	d522      	bpl.n	8022ecc <_scanf_i+0x140>
 8022e86:	f10b 0b01 	add.w	fp, fp, #1
 8022e8a:	f1b9 0f00 	cmp.w	r9, #0
 8022e8e:	d003      	beq.n	8022e98 <_scanf_i+0x10c>
 8022e90:	3301      	adds	r3, #1
 8022e92:	f109 39ff 	add.w	r9, r9, #4294967295
 8022e96:	60a3      	str	r3, [r4, #8]
 8022e98:	6873      	ldr	r3, [r6, #4]
 8022e9a:	3b01      	subs	r3, #1
 8022e9c:	2b00      	cmp	r3, #0
 8022e9e:	6073      	str	r3, [r6, #4]
 8022ea0:	dd1b      	ble.n	8022eda <_scanf_i+0x14e>
 8022ea2:	6833      	ldr	r3, [r6, #0]
 8022ea4:	3301      	adds	r3, #1
 8022ea6:	6033      	str	r3, [r6, #0]
 8022ea8:	68a3      	ldr	r3, [r4, #8]
 8022eaa:	3b01      	subs	r3, #1
 8022eac:	60a3      	str	r3, [r4, #8]
 8022eae:	e7d9      	b.n	8022e64 <_scanf_i+0xd8>
 8022eb0:	f1bb 0f02 	cmp.w	fp, #2
 8022eb4:	d1ae      	bne.n	8022e14 <_scanf_i+0x88>
 8022eb6:	6822      	ldr	r2, [r4, #0]
 8022eb8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022ebc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022ec0:	d1bf      	bne.n	8022e42 <_scanf_i+0xb6>
 8022ec2:	2310      	movs	r3, #16
 8022ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022ec8:	6063      	str	r3, [r4, #4]
 8022eca:	e7a2      	b.n	8022e12 <_scanf_i+0x86>
 8022ecc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022ed0:	6022      	str	r2, [r4, #0]
 8022ed2:	780b      	ldrb	r3, [r1, #0]
 8022ed4:	f805 3b01 	strb.w	r3, [r5], #1
 8022ed8:	e7de      	b.n	8022e98 <_scanf_i+0x10c>
 8022eda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022ede:	4631      	mov	r1, r6
 8022ee0:	4650      	mov	r0, sl
 8022ee2:	4798      	blx	r3
 8022ee4:	2800      	cmp	r0, #0
 8022ee6:	d0df      	beq.n	8022ea8 <_scanf_i+0x11c>
 8022ee8:	6823      	ldr	r3, [r4, #0]
 8022eea:	05d9      	lsls	r1, r3, #23
 8022eec:	d50d      	bpl.n	8022f0a <_scanf_i+0x17e>
 8022eee:	42bd      	cmp	r5, r7
 8022ef0:	d909      	bls.n	8022f06 <_scanf_i+0x17a>
 8022ef2:	f105 39ff 	add.w	r9, r5, #4294967295
 8022ef6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022efe:	4632      	mov	r2, r6
 8022f00:	464d      	mov	r5, r9
 8022f02:	4650      	mov	r0, sl
 8022f04:	4798      	blx	r3
 8022f06:	42bd      	cmp	r5, r7
 8022f08:	d028      	beq.n	8022f5c <_scanf_i+0x1d0>
 8022f0a:	6822      	ldr	r2, [r4, #0]
 8022f0c:	f012 0210 	ands.w	r2, r2, #16
 8022f10:	d113      	bne.n	8022f3a <_scanf_i+0x1ae>
 8022f12:	702a      	strb	r2, [r5, #0]
 8022f14:	4639      	mov	r1, r7
 8022f16:	6863      	ldr	r3, [r4, #4]
 8022f18:	4650      	mov	r0, sl
 8022f1a:	9e01      	ldr	r6, [sp, #4]
 8022f1c:	47b0      	blx	r6
 8022f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8022f22:	6821      	ldr	r1, [r4, #0]
 8022f24:	1d1a      	adds	r2, r3, #4
 8022f26:	f011 0f20 	tst.w	r1, #32
 8022f2a:	f8c8 2000 	str.w	r2, [r8]
 8022f2e:	681b      	ldr	r3, [r3, #0]
 8022f30:	d00f      	beq.n	8022f52 <_scanf_i+0x1c6>
 8022f32:	6018      	str	r0, [r3, #0]
 8022f34:	68e3      	ldr	r3, [r4, #12]
 8022f36:	3301      	adds	r3, #1
 8022f38:	60e3      	str	r3, [r4, #12]
 8022f3a:	1bed      	subs	r5, r5, r7
 8022f3c:	6923      	ldr	r3, [r4, #16]
 8022f3e:	2000      	movs	r0, #0
 8022f40:	445d      	add	r5, fp
 8022f42:	442b      	add	r3, r5
 8022f44:	6123      	str	r3, [r4, #16]
 8022f46:	b007      	add	sp, #28
 8022f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f4c:	f04f 0b00 	mov.w	fp, #0
 8022f50:	e7ca      	b.n	8022ee8 <_scanf_i+0x15c>
 8022f52:	07ca      	lsls	r2, r1, #31
 8022f54:	bf4c      	ite	mi
 8022f56:	8018      	strhmi	r0, [r3, #0]
 8022f58:	6018      	strpl	r0, [r3, #0]
 8022f5a:	e7eb      	b.n	8022f34 <_scanf_i+0x1a8>
 8022f5c:	2001      	movs	r0, #1
 8022f5e:	e7f2      	b.n	8022f46 <_scanf_i+0x1ba>
 8022f60:	08023ddc 	.word	0x08023ddc
 8022f64:	08023435 	.word	0x08023435
 8022f68:	0802334d 	.word	0x0802334d
 8022f6c:	0802442f 	.word	0x0802442f

08022f70 <__sflush_r>:
 8022f70:	898a      	ldrh	r2, [r1, #12]
 8022f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f76:	4605      	mov	r5, r0
 8022f78:	0710      	lsls	r0, r2, #28
 8022f7a:	460c      	mov	r4, r1
 8022f7c:	d458      	bmi.n	8023030 <__sflush_r+0xc0>
 8022f7e:	684b      	ldr	r3, [r1, #4]
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	dc05      	bgt.n	8022f90 <__sflush_r+0x20>
 8022f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022f86:	2b00      	cmp	r3, #0
 8022f88:	dc02      	bgt.n	8022f90 <__sflush_r+0x20>
 8022f8a:	2000      	movs	r0, #0
 8022f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022f92:	2e00      	cmp	r6, #0
 8022f94:	d0f9      	beq.n	8022f8a <__sflush_r+0x1a>
 8022f96:	2300      	movs	r3, #0
 8022f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022f9c:	682f      	ldr	r7, [r5, #0]
 8022f9e:	6a21      	ldr	r1, [r4, #32]
 8022fa0:	602b      	str	r3, [r5, #0]
 8022fa2:	d032      	beq.n	802300a <__sflush_r+0x9a>
 8022fa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022fa6:	89a3      	ldrh	r3, [r4, #12]
 8022fa8:	075a      	lsls	r2, r3, #29
 8022faa:	d505      	bpl.n	8022fb8 <__sflush_r+0x48>
 8022fac:	6863      	ldr	r3, [r4, #4]
 8022fae:	1ac0      	subs	r0, r0, r3
 8022fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022fb2:	b10b      	cbz	r3, 8022fb8 <__sflush_r+0x48>
 8022fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022fb6:	1ac0      	subs	r0, r0, r3
 8022fb8:	2300      	movs	r3, #0
 8022fba:	4602      	mov	r2, r0
 8022fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022fbe:	4628      	mov	r0, r5
 8022fc0:	6a21      	ldr	r1, [r4, #32]
 8022fc2:	47b0      	blx	r6
 8022fc4:	1c43      	adds	r3, r0, #1
 8022fc6:	89a3      	ldrh	r3, [r4, #12]
 8022fc8:	d106      	bne.n	8022fd8 <__sflush_r+0x68>
 8022fca:	6829      	ldr	r1, [r5, #0]
 8022fcc:	291d      	cmp	r1, #29
 8022fce:	d82b      	bhi.n	8023028 <__sflush_r+0xb8>
 8022fd0:	4a28      	ldr	r2, [pc, #160]	; (8023074 <__sflush_r+0x104>)
 8022fd2:	410a      	asrs	r2, r1
 8022fd4:	07d6      	lsls	r6, r2, #31
 8022fd6:	d427      	bmi.n	8023028 <__sflush_r+0xb8>
 8022fd8:	2200      	movs	r2, #0
 8022fda:	04d9      	lsls	r1, r3, #19
 8022fdc:	6062      	str	r2, [r4, #4]
 8022fde:	6922      	ldr	r2, [r4, #16]
 8022fe0:	6022      	str	r2, [r4, #0]
 8022fe2:	d504      	bpl.n	8022fee <__sflush_r+0x7e>
 8022fe4:	1c42      	adds	r2, r0, #1
 8022fe6:	d101      	bne.n	8022fec <__sflush_r+0x7c>
 8022fe8:	682b      	ldr	r3, [r5, #0]
 8022fea:	b903      	cbnz	r3, 8022fee <__sflush_r+0x7e>
 8022fec:	6560      	str	r0, [r4, #84]	; 0x54
 8022fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ff0:	602f      	str	r7, [r5, #0]
 8022ff2:	2900      	cmp	r1, #0
 8022ff4:	d0c9      	beq.n	8022f8a <__sflush_r+0x1a>
 8022ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022ffa:	4299      	cmp	r1, r3
 8022ffc:	d002      	beq.n	8023004 <__sflush_r+0x94>
 8022ffe:	4628      	mov	r0, r5
 8023000:	f7ff fc4c 	bl	802289c <_free_r>
 8023004:	2000      	movs	r0, #0
 8023006:	6360      	str	r0, [r4, #52]	; 0x34
 8023008:	e7c0      	b.n	8022f8c <__sflush_r+0x1c>
 802300a:	2301      	movs	r3, #1
 802300c:	4628      	mov	r0, r5
 802300e:	47b0      	blx	r6
 8023010:	1c41      	adds	r1, r0, #1
 8023012:	d1c8      	bne.n	8022fa6 <__sflush_r+0x36>
 8023014:	682b      	ldr	r3, [r5, #0]
 8023016:	2b00      	cmp	r3, #0
 8023018:	d0c5      	beq.n	8022fa6 <__sflush_r+0x36>
 802301a:	2b1d      	cmp	r3, #29
 802301c:	d001      	beq.n	8023022 <__sflush_r+0xb2>
 802301e:	2b16      	cmp	r3, #22
 8023020:	d101      	bne.n	8023026 <__sflush_r+0xb6>
 8023022:	602f      	str	r7, [r5, #0]
 8023024:	e7b1      	b.n	8022f8a <__sflush_r+0x1a>
 8023026:	89a3      	ldrh	r3, [r4, #12]
 8023028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802302c:	81a3      	strh	r3, [r4, #12]
 802302e:	e7ad      	b.n	8022f8c <__sflush_r+0x1c>
 8023030:	690f      	ldr	r7, [r1, #16]
 8023032:	2f00      	cmp	r7, #0
 8023034:	d0a9      	beq.n	8022f8a <__sflush_r+0x1a>
 8023036:	0793      	lsls	r3, r2, #30
 8023038:	680e      	ldr	r6, [r1, #0]
 802303a:	600f      	str	r7, [r1, #0]
 802303c:	bf0c      	ite	eq
 802303e:	694b      	ldreq	r3, [r1, #20]
 8023040:	2300      	movne	r3, #0
 8023042:	eba6 0807 	sub.w	r8, r6, r7
 8023046:	608b      	str	r3, [r1, #8]
 8023048:	f1b8 0f00 	cmp.w	r8, #0
 802304c:	dd9d      	ble.n	8022f8a <__sflush_r+0x1a>
 802304e:	4643      	mov	r3, r8
 8023050:	463a      	mov	r2, r7
 8023052:	6a21      	ldr	r1, [r4, #32]
 8023054:	4628      	mov	r0, r5
 8023056:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023058:	47b0      	blx	r6
 802305a:	2800      	cmp	r0, #0
 802305c:	dc06      	bgt.n	802306c <__sflush_r+0xfc>
 802305e:	89a3      	ldrh	r3, [r4, #12]
 8023060:	f04f 30ff 	mov.w	r0, #4294967295
 8023064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023068:	81a3      	strh	r3, [r4, #12]
 802306a:	e78f      	b.n	8022f8c <__sflush_r+0x1c>
 802306c:	4407      	add	r7, r0
 802306e:	eba8 0800 	sub.w	r8, r8, r0
 8023072:	e7e9      	b.n	8023048 <__sflush_r+0xd8>
 8023074:	dfbffffe 	.word	0xdfbffffe

08023078 <_fflush_r>:
 8023078:	b538      	push	{r3, r4, r5, lr}
 802307a:	690b      	ldr	r3, [r1, #16]
 802307c:	4605      	mov	r5, r0
 802307e:	460c      	mov	r4, r1
 8023080:	b913      	cbnz	r3, 8023088 <_fflush_r+0x10>
 8023082:	2500      	movs	r5, #0
 8023084:	4628      	mov	r0, r5
 8023086:	bd38      	pop	{r3, r4, r5, pc}
 8023088:	b118      	cbz	r0, 8023092 <_fflush_r+0x1a>
 802308a:	6a03      	ldr	r3, [r0, #32]
 802308c:	b90b      	cbnz	r3, 8023092 <_fflush_r+0x1a>
 802308e:	f7ff fa49 	bl	8022524 <__sinit>
 8023092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023096:	2b00      	cmp	r3, #0
 8023098:	d0f3      	beq.n	8023082 <_fflush_r+0xa>
 802309a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802309c:	07d0      	lsls	r0, r2, #31
 802309e:	d404      	bmi.n	80230aa <_fflush_r+0x32>
 80230a0:	0599      	lsls	r1, r3, #22
 80230a2:	d402      	bmi.n	80230aa <_fflush_r+0x32>
 80230a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80230a6:	f7ff fbcc 	bl	8022842 <__retarget_lock_acquire_recursive>
 80230aa:	4628      	mov	r0, r5
 80230ac:	4621      	mov	r1, r4
 80230ae:	f7ff ff5f 	bl	8022f70 <__sflush_r>
 80230b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80230b4:	4605      	mov	r5, r0
 80230b6:	07da      	lsls	r2, r3, #31
 80230b8:	d4e4      	bmi.n	8023084 <_fflush_r+0xc>
 80230ba:	89a3      	ldrh	r3, [r4, #12]
 80230bc:	059b      	lsls	r3, r3, #22
 80230be:	d4e1      	bmi.n	8023084 <_fflush_r+0xc>
 80230c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80230c2:	f7ff fbbf 	bl	8022844 <__retarget_lock_release_recursive>
 80230c6:	e7dd      	b.n	8023084 <_fflush_r+0xc>

080230c8 <fiprintf>:
 80230c8:	b40e      	push	{r1, r2, r3}
 80230ca:	b503      	push	{r0, r1, lr}
 80230cc:	ab03      	add	r3, sp, #12
 80230ce:	4601      	mov	r1, r0
 80230d0:	4805      	ldr	r0, [pc, #20]	; (80230e8 <fiprintf+0x20>)
 80230d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80230d6:	6800      	ldr	r0, [r0, #0]
 80230d8:	9301      	str	r3, [sp, #4]
 80230da:	f000 f9d7 	bl	802348c <_vfiprintf_r>
 80230de:	b002      	add	sp, #8
 80230e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80230e4:	b003      	add	sp, #12
 80230e6:	4770      	bx	lr
 80230e8:	20000108 	.word	0x20000108

080230ec <__sccl>:
 80230ec:	b570      	push	{r4, r5, r6, lr}
 80230ee:	780b      	ldrb	r3, [r1, #0]
 80230f0:	4604      	mov	r4, r0
 80230f2:	3801      	subs	r0, #1
 80230f4:	2b5e      	cmp	r3, #94	; 0x5e
 80230f6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80230fa:	bf13      	iteet	ne
 80230fc:	1c4a      	addne	r2, r1, #1
 80230fe:	1c8a      	addeq	r2, r1, #2
 8023100:	784b      	ldrbeq	r3, [r1, #1]
 8023102:	2100      	movne	r1, #0
 8023104:	bf08      	it	eq
 8023106:	2101      	moveq	r1, #1
 8023108:	f800 1f01 	strb.w	r1, [r0, #1]!
 802310c:	42a8      	cmp	r0, r5
 802310e:	d1fb      	bne.n	8023108 <__sccl+0x1c>
 8023110:	b90b      	cbnz	r3, 8023116 <__sccl+0x2a>
 8023112:	1e50      	subs	r0, r2, #1
 8023114:	bd70      	pop	{r4, r5, r6, pc}
 8023116:	f081 0101 	eor.w	r1, r1, #1
 802311a:	4610      	mov	r0, r2
 802311c:	54e1      	strb	r1, [r4, r3]
 802311e:	4602      	mov	r2, r0
 8023120:	f812 5b01 	ldrb.w	r5, [r2], #1
 8023124:	2d2d      	cmp	r5, #45	; 0x2d
 8023126:	d005      	beq.n	8023134 <__sccl+0x48>
 8023128:	2d5d      	cmp	r5, #93	; 0x5d
 802312a:	d016      	beq.n	802315a <__sccl+0x6e>
 802312c:	2d00      	cmp	r5, #0
 802312e:	d0f1      	beq.n	8023114 <__sccl+0x28>
 8023130:	462b      	mov	r3, r5
 8023132:	e7f2      	b.n	802311a <__sccl+0x2e>
 8023134:	7846      	ldrb	r6, [r0, #1]
 8023136:	2e5d      	cmp	r6, #93	; 0x5d
 8023138:	d0fa      	beq.n	8023130 <__sccl+0x44>
 802313a:	42b3      	cmp	r3, r6
 802313c:	dcf8      	bgt.n	8023130 <__sccl+0x44>
 802313e:	3002      	adds	r0, #2
 8023140:	461a      	mov	r2, r3
 8023142:	3201      	adds	r2, #1
 8023144:	4296      	cmp	r6, r2
 8023146:	54a1      	strb	r1, [r4, r2]
 8023148:	dcfb      	bgt.n	8023142 <__sccl+0x56>
 802314a:	1af2      	subs	r2, r6, r3
 802314c:	1c5d      	adds	r5, r3, #1
 802314e:	3a01      	subs	r2, #1
 8023150:	42b3      	cmp	r3, r6
 8023152:	bfa8      	it	ge
 8023154:	2200      	movge	r2, #0
 8023156:	18ab      	adds	r3, r5, r2
 8023158:	e7e1      	b.n	802311e <__sccl+0x32>
 802315a:	4610      	mov	r0, r2
 802315c:	e7da      	b.n	8023114 <__sccl+0x28>

0802315e <__submore>:
 802315e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023162:	460c      	mov	r4, r1
 8023164:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8023166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802316a:	4299      	cmp	r1, r3
 802316c:	d11a      	bne.n	80231a4 <__submore+0x46>
 802316e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023172:	f7ff f881 	bl	8022278 <_malloc_r>
 8023176:	b918      	cbnz	r0, 8023180 <__submore+0x22>
 8023178:	f04f 30ff 	mov.w	r0, #4294967295
 802317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023184:	6360      	str	r0, [r4, #52]	; 0x34
 8023186:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802318a:	63a3      	str	r3, [r4, #56]	; 0x38
 802318c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8023190:	7083      	strb	r3, [r0, #2]
 8023192:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8023196:	7043      	strb	r3, [r0, #1]
 8023198:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802319c:	7003      	strb	r3, [r0, #0]
 802319e:	6020      	str	r0, [r4, #0]
 80231a0:	2000      	movs	r0, #0
 80231a2:	e7eb      	b.n	802317c <__submore+0x1e>
 80231a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80231a6:	0077      	lsls	r7, r6, #1
 80231a8:	463a      	mov	r2, r7
 80231aa:	f000 f81d 	bl	80231e8 <_realloc_r>
 80231ae:	4605      	mov	r5, r0
 80231b0:	2800      	cmp	r0, #0
 80231b2:	d0e1      	beq.n	8023178 <__submore+0x1a>
 80231b4:	eb00 0806 	add.w	r8, r0, r6
 80231b8:	4601      	mov	r1, r0
 80231ba:	4632      	mov	r2, r6
 80231bc:	4640      	mov	r0, r8
 80231be:	f7ff fb42 	bl	8022846 <memcpy>
 80231c2:	f8c4 8000 	str.w	r8, [r4]
 80231c6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80231ca:	e7e9      	b.n	80231a0 <__submore+0x42>

080231cc <memchr>:
 80231cc:	b2c9      	uxtb	r1, r1
 80231ce:	4402      	add	r2, r0
 80231d0:	b510      	push	{r4, lr}
 80231d2:	4290      	cmp	r0, r2
 80231d4:	4603      	mov	r3, r0
 80231d6:	d101      	bne.n	80231dc <memchr+0x10>
 80231d8:	2300      	movs	r3, #0
 80231da:	e003      	b.n	80231e4 <memchr+0x18>
 80231dc:	781c      	ldrb	r4, [r3, #0]
 80231de:	3001      	adds	r0, #1
 80231e0:	428c      	cmp	r4, r1
 80231e2:	d1f6      	bne.n	80231d2 <memchr+0x6>
 80231e4:	4618      	mov	r0, r3
 80231e6:	bd10      	pop	{r4, pc}

080231e8 <_realloc_r>:
 80231e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231ec:	4680      	mov	r8, r0
 80231ee:	4614      	mov	r4, r2
 80231f0:	460e      	mov	r6, r1
 80231f2:	b921      	cbnz	r1, 80231fe <_realloc_r+0x16>
 80231f4:	4611      	mov	r1, r2
 80231f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80231fa:	f7ff b83d 	b.w	8022278 <_malloc_r>
 80231fe:	b92a      	cbnz	r2, 802320c <_realloc_r+0x24>
 8023200:	4625      	mov	r5, r4
 8023202:	f7ff fb4b 	bl	802289c <_free_r>
 8023206:	4628      	mov	r0, r5
 8023208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802320c:	f000 fc80 	bl	8023b10 <_malloc_usable_size_r>
 8023210:	4284      	cmp	r4, r0
 8023212:	4607      	mov	r7, r0
 8023214:	d802      	bhi.n	802321c <_realloc_r+0x34>
 8023216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802321a:	d812      	bhi.n	8023242 <_realloc_r+0x5a>
 802321c:	4621      	mov	r1, r4
 802321e:	4640      	mov	r0, r8
 8023220:	f7ff f82a 	bl	8022278 <_malloc_r>
 8023224:	4605      	mov	r5, r0
 8023226:	2800      	cmp	r0, #0
 8023228:	d0ed      	beq.n	8023206 <_realloc_r+0x1e>
 802322a:	42bc      	cmp	r4, r7
 802322c:	4622      	mov	r2, r4
 802322e:	4631      	mov	r1, r6
 8023230:	bf28      	it	cs
 8023232:	463a      	movcs	r2, r7
 8023234:	f7ff fb07 	bl	8022846 <memcpy>
 8023238:	4631      	mov	r1, r6
 802323a:	4640      	mov	r0, r8
 802323c:	f7ff fb2e 	bl	802289c <_free_r>
 8023240:	e7e1      	b.n	8023206 <_realloc_r+0x1e>
 8023242:	4635      	mov	r5, r6
 8023244:	e7df      	b.n	8023206 <_realloc_r+0x1e>
	...

08023248 <_strtol_l.constprop.0>:
 8023248:	2b01      	cmp	r3, #1
 802324a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802324e:	d001      	beq.n	8023254 <_strtol_l.constprop.0+0xc>
 8023250:	2b24      	cmp	r3, #36	; 0x24
 8023252:	d906      	bls.n	8023262 <_strtol_l.constprop.0+0x1a>
 8023254:	f7ff faca 	bl	80227ec <__errno>
 8023258:	2316      	movs	r3, #22
 802325a:	6003      	str	r3, [r0, #0]
 802325c:	2000      	movs	r0, #0
 802325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023262:	460d      	mov	r5, r1
 8023264:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8023348 <_strtol_l.constprop.0+0x100>
 8023268:	462e      	mov	r6, r5
 802326a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802326e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8023272:	f017 0708 	ands.w	r7, r7, #8
 8023276:	d1f7      	bne.n	8023268 <_strtol_l.constprop.0+0x20>
 8023278:	2c2d      	cmp	r4, #45	; 0x2d
 802327a:	d132      	bne.n	80232e2 <_strtol_l.constprop.0+0x9a>
 802327c:	782c      	ldrb	r4, [r5, #0]
 802327e:	2701      	movs	r7, #1
 8023280:	1cb5      	adds	r5, r6, #2
 8023282:	2b00      	cmp	r3, #0
 8023284:	d05b      	beq.n	802333e <_strtol_l.constprop.0+0xf6>
 8023286:	2b10      	cmp	r3, #16
 8023288:	d109      	bne.n	802329e <_strtol_l.constprop.0+0x56>
 802328a:	2c30      	cmp	r4, #48	; 0x30
 802328c:	d107      	bne.n	802329e <_strtol_l.constprop.0+0x56>
 802328e:	782c      	ldrb	r4, [r5, #0]
 8023290:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8023294:	2c58      	cmp	r4, #88	; 0x58
 8023296:	d14d      	bne.n	8023334 <_strtol_l.constprop.0+0xec>
 8023298:	786c      	ldrb	r4, [r5, #1]
 802329a:	2310      	movs	r3, #16
 802329c:	3502      	adds	r5, #2
 802329e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80232a2:	f04f 0e00 	mov.w	lr, #0
 80232a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80232aa:	4676      	mov	r6, lr
 80232ac:	fbb8 f9f3 	udiv	r9, r8, r3
 80232b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80232b4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80232b8:	f1bc 0f09 	cmp.w	ip, #9
 80232bc:	d816      	bhi.n	80232ec <_strtol_l.constprop.0+0xa4>
 80232be:	4664      	mov	r4, ip
 80232c0:	42a3      	cmp	r3, r4
 80232c2:	dd24      	ble.n	802330e <_strtol_l.constprop.0+0xc6>
 80232c4:	f1be 3fff 	cmp.w	lr, #4294967295
 80232c8:	d008      	beq.n	80232dc <_strtol_l.constprop.0+0x94>
 80232ca:	45b1      	cmp	r9, r6
 80232cc:	d31c      	bcc.n	8023308 <_strtol_l.constprop.0+0xc0>
 80232ce:	d101      	bne.n	80232d4 <_strtol_l.constprop.0+0x8c>
 80232d0:	45a2      	cmp	sl, r4
 80232d2:	db19      	blt.n	8023308 <_strtol_l.constprop.0+0xc0>
 80232d4:	fb06 4603 	mla	r6, r6, r3, r4
 80232d8:	f04f 0e01 	mov.w	lr, #1
 80232dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80232e0:	e7e8      	b.n	80232b4 <_strtol_l.constprop.0+0x6c>
 80232e2:	2c2b      	cmp	r4, #43	; 0x2b
 80232e4:	bf04      	itt	eq
 80232e6:	782c      	ldrbeq	r4, [r5, #0]
 80232e8:	1cb5      	addeq	r5, r6, #2
 80232ea:	e7ca      	b.n	8023282 <_strtol_l.constprop.0+0x3a>
 80232ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80232f0:	f1bc 0f19 	cmp.w	ip, #25
 80232f4:	d801      	bhi.n	80232fa <_strtol_l.constprop.0+0xb2>
 80232f6:	3c37      	subs	r4, #55	; 0x37
 80232f8:	e7e2      	b.n	80232c0 <_strtol_l.constprop.0+0x78>
 80232fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80232fe:	f1bc 0f19 	cmp.w	ip, #25
 8023302:	d804      	bhi.n	802330e <_strtol_l.constprop.0+0xc6>
 8023304:	3c57      	subs	r4, #87	; 0x57
 8023306:	e7db      	b.n	80232c0 <_strtol_l.constprop.0+0x78>
 8023308:	f04f 3eff 	mov.w	lr, #4294967295
 802330c:	e7e6      	b.n	80232dc <_strtol_l.constprop.0+0x94>
 802330e:	f1be 3fff 	cmp.w	lr, #4294967295
 8023312:	d105      	bne.n	8023320 <_strtol_l.constprop.0+0xd8>
 8023314:	2322      	movs	r3, #34	; 0x22
 8023316:	4646      	mov	r6, r8
 8023318:	6003      	str	r3, [r0, #0]
 802331a:	b942      	cbnz	r2, 802332e <_strtol_l.constprop.0+0xe6>
 802331c:	4630      	mov	r0, r6
 802331e:	e79e      	b.n	802325e <_strtol_l.constprop.0+0x16>
 8023320:	b107      	cbz	r7, 8023324 <_strtol_l.constprop.0+0xdc>
 8023322:	4276      	negs	r6, r6
 8023324:	2a00      	cmp	r2, #0
 8023326:	d0f9      	beq.n	802331c <_strtol_l.constprop.0+0xd4>
 8023328:	f1be 0f00 	cmp.w	lr, #0
 802332c:	d000      	beq.n	8023330 <_strtol_l.constprop.0+0xe8>
 802332e:	1e69      	subs	r1, r5, #1
 8023330:	6011      	str	r1, [r2, #0]
 8023332:	e7f3      	b.n	802331c <_strtol_l.constprop.0+0xd4>
 8023334:	2430      	movs	r4, #48	; 0x30
 8023336:	2b00      	cmp	r3, #0
 8023338:	d1b1      	bne.n	802329e <_strtol_l.constprop.0+0x56>
 802333a:	2308      	movs	r3, #8
 802333c:	e7af      	b.n	802329e <_strtol_l.constprop.0+0x56>
 802333e:	2c30      	cmp	r4, #48	; 0x30
 8023340:	d0a5      	beq.n	802328e <_strtol_l.constprop.0+0x46>
 8023342:	230a      	movs	r3, #10
 8023344:	e7ab      	b.n	802329e <_strtol_l.constprop.0+0x56>
 8023346:	bf00      	nop
 8023348:	0802443b 	.word	0x0802443b

0802334c <_strtol_r>:
 802334c:	f7ff bf7c 	b.w	8023248 <_strtol_l.constprop.0>

08023350 <_strtoul_l.constprop.0>:
 8023350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023354:	4686      	mov	lr, r0
 8023356:	460d      	mov	r5, r1
 8023358:	4f35      	ldr	r7, [pc, #212]	; (8023430 <_strtoul_l.constprop.0+0xe0>)
 802335a:	4628      	mov	r0, r5
 802335c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023360:	5d3e      	ldrb	r6, [r7, r4]
 8023362:	f016 0608 	ands.w	r6, r6, #8
 8023366:	d1f8      	bne.n	802335a <_strtoul_l.constprop.0+0xa>
 8023368:	2c2d      	cmp	r4, #45	; 0x2d
 802336a:	d130      	bne.n	80233ce <_strtoul_l.constprop.0+0x7e>
 802336c:	782c      	ldrb	r4, [r5, #0]
 802336e:	2601      	movs	r6, #1
 8023370:	1c85      	adds	r5, r0, #2
 8023372:	2b00      	cmp	r3, #0
 8023374:	d057      	beq.n	8023426 <_strtoul_l.constprop.0+0xd6>
 8023376:	2b10      	cmp	r3, #16
 8023378:	d109      	bne.n	802338e <_strtoul_l.constprop.0+0x3e>
 802337a:	2c30      	cmp	r4, #48	; 0x30
 802337c:	d107      	bne.n	802338e <_strtoul_l.constprop.0+0x3e>
 802337e:	7828      	ldrb	r0, [r5, #0]
 8023380:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8023384:	2858      	cmp	r0, #88	; 0x58
 8023386:	d149      	bne.n	802341c <_strtoul_l.constprop.0+0xcc>
 8023388:	786c      	ldrb	r4, [r5, #1]
 802338a:	2310      	movs	r3, #16
 802338c:	3502      	adds	r5, #2
 802338e:	f04f 38ff 	mov.w	r8, #4294967295
 8023392:	2700      	movs	r7, #0
 8023394:	fbb8 f8f3 	udiv	r8, r8, r3
 8023398:	fb03 f908 	mul.w	r9, r3, r8
 802339c:	4638      	mov	r0, r7
 802339e:	ea6f 0909 	mvn.w	r9, r9
 80233a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80233a6:	f1bc 0f09 	cmp.w	ip, #9
 80233aa:	d815      	bhi.n	80233d8 <_strtoul_l.constprop.0+0x88>
 80233ac:	4664      	mov	r4, ip
 80233ae:	42a3      	cmp	r3, r4
 80233b0:	dd23      	ble.n	80233fa <_strtoul_l.constprop.0+0xaa>
 80233b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80233b6:	d007      	beq.n	80233c8 <_strtoul_l.constprop.0+0x78>
 80233b8:	4580      	cmp	r8, r0
 80233ba:	d31b      	bcc.n	80233f4 <_strtoul_l.constprop.0+0xa4>
 80233bc:	d101      	bne.n	80233c2 <_strtoul_l.constprop.0+0x72>
 80233be:	45a1      	cmp	r9, r4
 80233c0:	db18      	blt.n	80233f4 <_strtoul_l.constprop.0+0xa4>
 80233c2:	fb00 4003 	mla	r0, r0, r3, r4
 80233c6:	2701      	movs	r7, #1
 80233c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80233cc:	e7e9      	b.n	80233a2 <_strtoul_l.constprop.0+0x52>
 80233ce:	2c2b      	cmp	r4, #43	; 0x2b
 80233d0:	bf04      	itt	eq
 80233d2:	782c      	ldrbeq	r4, [r5, #0]
 80233d4:	1c85      	addeq	r5, r0, #2
 80233d6:	e7cc      	b.n	8023372 <_strtoul_l.constprop.0+0x22>
 80233d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80233dc:	f1bc 0f19 	cmp.w	ip, #25
 80233e0:	d801      	bhi.n	80233e6 <_strtoul_l.constprop.0+0x96>
 80233e2:	3c37      	subs	r4, #55	; 0x37
 80233e4:	e7e3      	b.n	80233ae <_strtoul_l.constprop.0+0x5e>
 80233e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80233ea:	f1bc 0f19 	cmp.w	ip, #25
 80233ee:	d804      	bhi.n	80233fa <_strtoul_l.constprop.0+0xaa>
 80233f0:	3c57      	subs	r4, #87	; 0x57
 80233f2:	e7dc      	b.n	80233ae <_strtoul_l.constprop.0+0x5e>
 80233f4:	f04f 37ff 	mov.w	r7, #4294967295
 80233f8:	e7e6      	b.n	80233c8 <_strtoul_l.constprop.0+0x78>
 80233fa:	1c7b      	adds	r3, r7, #1
 80233fc:	d106      	bne.n	802340c <_strtoul_l.constprop.0+0xbc>
 80233fe:	2322      	movs	r3, #34	; 0x22
 8023400:	4638      	mov	r0, r7
 8023402:	f8ce 3000 	str.w	r3, [lr]
 8023406:	b932      	cbnz	r2, 8023416 <_strtoul_l.constprop.0+0xc6>
 8023408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802340c:	b106      	cbz	r6, 8023410 <_strtoul_l.constprop.0+0xc0>
 802340e:	4240      	negs	r0, r0
 8023410:	2a00      	cmp	r2, #0
 8023412:	d0f9      	beq.n	8023408 <_strtoul_l.constprop.0+0xb8>
 8023414:	b107      	cbz	r7, 8023418 <_strtoul_l.constprop.0+0xc8>
 8023416:	1e69      	subs	r1, r5, #1
 8023418:	6011      	str	r1, [r2, #0]
 802341a:	e7f5      	b.n	8023408 <_strtoul_l.constprop.0+0xb8>
 802341c:	2430      	movs	r4, #48	; 0x30
 802341e:	2b00      	cmp	r3, #0
 8023420:	d1b5      	bne.n	802338e <_strtoul_l.constprop.0+0x3e>
 8023422:	2308      	movs	r3, #8
 8023424:	e7b3      	b.n	802338e <_strtoul_l.constprop.0+0x3e>
 8023426:	2c30      	cmp	r4, #48	; 0x30
 8023428:	d0a9      	beq.n	802337e <_strtoul_l.constprop.0+0x2e>
 802342a:	230a      	movs	r3, #10
 802342c:	e7af      	b.n	802338e <_strtoul_l.constprop.0+0x3e>
 802342e:	bf00      	nop
 8023430:	0802443b 	.word	0x0802443b

08023434 <_strtoul_r>:
 8023434:	f7ff bf8c 	b.w	8023350 <_strtoul_l.constprop.0>

08023438 <__sfputc_r>:
 8023438:	6893      	ldr	r3, [r2, #8]
 802343a:	3b01      	subs	r3, #1
 802343c:	2b00      	cmp	r3, #0
 802343e:	6093      	str	r3, [r2, #8]
 8023440:	b410      	push	{r4}
 8023442:	da08      	bge.n	8023456 <__sfputc_r+0x1e>
 8023444:	6994      	ldr	r4, [r2, #24]
 8023446:	42a3      	cmp	r3, r4
 8023448:	db01      	blt.n	802344e <__sfputc_r+0x16>
 802344a:	290a      	cmp	r1, #10
 802344c:	d103      	bne.n	8023456 <__sfputc_r+0x1e>
 802344e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023452:	f000 bac7 	b.w	80239e4 <__swbuf_r>
 8023456:	6813      	ldr	r3, [r2, #0]
 8023458:	1c58      	adds	r0, r3, #1
 802345a:	6010      	str	r0, [r2, #0]
 802345c:	4608      	mov	r0, r1
 802345e:	7019      	strb	r1, [r3, #0]
 8023460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023464:	4770      	bx	lr

08023466 <__sfputs_r>:
 8023466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023468:	4606      	mov	r6, r0
 802346a:	460f      	mov	r7, r1
 802346c:	4614      	mov	r4, r2
 802346e:	18d5      	adds	r5, r2, r3
 8023470:	42ac      	cmp	r4, r5
 8023472:	d101      	bne.n	8023478 <__sfputs_r+0x12>
 8023474:	2000      	movs	r0, #0
 8023476:	e007      	b.n	8023488 <__sfputs_r+0x22>
 8023478:	463a      	mov	r2, r7
 802347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802347e:	4630      	mov	r0, r6
 8023480:	f7ff ffda 	bl	8023438 <__sfputc_r>
 8023484:	1c43      	adds	r3, r0, #1
 8023486:	d1f3      	bne.n	8023470 <__sfputs_r+0xa>
 8023488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802348c <_vfiprintf_r>:
 802348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023490:	460d      	mov	r5, r1
 8023492:	b09d      	sub	sp, #116	; 0x74
 8023494:	4614      	mov	r4, r2
 8023496:	4698      	mov	r8, r3
 8023498:	4606      	mov	r6, r0
 802349a:	b118      	cbz	r0, 80234a4 <_vfiprintf_r+0x18>
 802349c:	6a03      	ldr	r3, [r0, #32]
 802349e:	b90b      	cbnz	r3, 80234a4 <_vfiprintf_r+0x18>
 80234a0:	f7ff f840 	bl	8022524 <__sinit>
 80234a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234a6:	07d9      	lsls	r1, r3, #31
 80234a8:	d405      	bmi.n	80234b6 <_vfiprintf_r+0x2a>
 80234aa:	89ab      	ldrh	r3, [r5, #12]
 80234ac:	059a      	lsls	r2, r3, #22
 80234ae:	d402      	bmi.n	80234b6 <_vfiprintf_r+0x2a>
 80234b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234b2:	f7ff f9c6 	bl	8022842 <__retarget_lock_acquire_recursive>
 80234b6:	89ab      	ldrh	r3, [r5, #12]
 80234b8:	071b      	lsls	r3, r3, #28
 80234ba:	d501      	bpl.n	80234c0 <_vfiprintf_r+0x34>
 80234bc:	692b      	ldr	r3, [r5, #16]
 80234be:	b99b      	cbnz	r3, 80234e8 <_vfiprintf_r+0x5c>
 80234c0:	4629      	mov	r1, r5
 80234c2:	4630      	mov	r0, r6
 80234c4:	f000 facc 	bl	8023a60 <__swsetup_r>
 80234c8:	b170      	cbz	r0, 80234e8 <_vfiprintf_r+0x5c>
 80234ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234cc:	07dc      	lsls	r4, r3, #31
 80234ce:	d504      	bpl.n	80234da <_vfiprintf_r+0x4e>
 80234d0:	f04f 30ff 	mov.w	r0, #4294967295
 80234d4:	b01d      	add	sp, #116	; 0x74
 80234d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234da:	89ab      	ldrh	r3, [r5, #12]
 80234dc:	0598      	lsls	r0, r3, #22
 80234de:	d4f7      	bmi.n	80234d0 <_vfiprintf_r+0x44>
 80234e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234e2:	f7ff f9af 	bl	8022844 <__retarget_lock_release_recursive>
 80234e6:	e7f3      	b.n	80234d0 <_vfiprintf_r+0x44>
 80234e8:	2300      	movs	r3, #0
 80234ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80234ee:	f04f 0901 	mov.w	r9, #1
 80234f2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80236ac <_vfiprintf_r+0x220>
 80234f6:	9309      	str	r3, [sp, #36]	; 0x24
 80234f8:	2320      	movs	r3, #32
 80234fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80234fe:	2330      	movs	r3, #48	; 0x30
 8023500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023504:	4623      	mov	r3, r4
 8023506:	469a      	mov	sl, r3
 8023508:	f813 2b01 	ldrb.w	r2, [r3], #1
 802350c:	b10a      	cbz	r2, 8023512 <_vfiprintf_r+0x86>
 802350e:	2a25      	cmp	r2, #37	; 0x25
 8023510:	d1f9      	bne.n	8023506 <_vfiprintf_r+0x7a>
 8023512:	ebba 0b04 	subs.w	fp, sl, r4
 8023516:	d00b      	beq.n	8023530 <_vfiprintf_r+0xa4>
 8023518:	465b      	mov	r3, fp
 802351a:	4622      	mov	r2, r4
 802351c:	4629      	mov	r1, r5
 802351e:	4630      	mov	r0, r6
 8023520:	f7ff ffa1 	bl	8023466 <__sfputs_r>
 8023524:	3001      	adds	r0, #1
 8023526:	f000 80a9 	beq.w	802367c <_vfiprintf_r+0x1f0>
 802352a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802352c:	445a      	add	r2, fp
 802352e:	9209      	str	r2, [sp, #36]	; 0x24
 8023530:	f89a 3000 	ldrb.w	r3, [sl]
 8023534:	2b00      	cmp	r3, #0
 8023536:	f000 80a1 	beq.w	802367c <_vfiprintf_r+0x1f0>
 802353a:	2300      	movs	r3, #0
 802353c:	f04f 32ff 	mov.w	r2, #4294967295
 8023540:	f10a 0a01 	add.w	sl, sl, #1
 8023544:	9304      	str	r3, [sp, #16]
 8023546:	9307      	str	r3, [sp, #28]
 8023548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802354c:	931a      	str	r3, [sp, #104]	; 0x68
 802354e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023552:	4654      	mov	r4, sl
 8023554:	2205      	movs	r2, #5
 8023556:	4855      	ldr	r0, [pc, #340]	; (80236ac <_vfiprintf_r+0x220>)
 8023558:	f814 1b01 	ldrb.w	r1, [r4], #1
 802355c:	f7ff fe36 	bl	80231cc <memchr>
 8023560:	9a04      	ldr	r2, [sp, #16]
 8023562:	b9d8      	cbnz	r0, 802359c <_vfiprintf_r+0x110>
 8023564:	06d1      	lsls	r1, r2, #27
 8023566:	bf44      	itt	mi
 8023568:	2320      	movmi	r3, #32
 802356a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802356e:	0713      	lsls	r3, r2, #28
 8023570:	bf44      	itt	mi
 8023572:	232b      	movmi	r3, #43	; 0x2b
 8023574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023578:	f89a 3000 	ldrb.w	r3, [sl]
 802357c:	2b2a      	cmp	r3, #42	; 0x2a
 802357e:	d015      	beq.n	80235ac <_vfiprintf_r+0x120>
 8023580:	9a07      	ldr	r2, [sp, #28]
 8023582:	4654      	mov	r4, sl
 8023584:	2000      	movs	r0, #0
 8023586:	f04f 0c0a 	mov.w	ip, #10
 802358a:	4621      	mov	r1, r4
 802358c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023590:	3b30      	subs	r3, #48	; 0x30
 8023592:	2b09      	cmp	r3, #9
 8023594:	d94d      	bls.n	8023632 <_vfiprintf_r+0x1a6>
 8023596:	b1b0      	cbz	r0, 80235c6 <_vfiprintf_r+0x13a>
 8023598:	9207      	str	r2, [sp, #28]
 802359a:	e014      	b.n	80235c6 <_vfiprintf_r+0x13a>
 802359c:	eba0 0308 	sub.w	r3, r0, r8
 80235a0:	46a2      	mov	sl, r4
 80235a2:	fa09 f303 	lsl.w	r3, r9, r3
 80235a6:	4313      	orrs	r3, r2
 80235a8:	9304      	str	r3, [sp, #16]
 80235aa:	e7d2      	b.n	8023552 <_vfiprintf_r+0xc6>
 80235ac:	9b03      	ldr	r3, [sp, #12]
 80235ae:	1d19      	adds	r1, r3, #4
 80235b0:	681b      	ldr	r3, [r3, #0]
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	9103      	str	r1, [sp, #12]
 80235b6:	bfbb      	ittet	lt
 80235b8:	425b      	neglt	r3, r3
 80235ba:	f042 0202 	orrlt.w	r2, r2, #2
 80235be:	9307      	strge	r3, [sp, #28]
 80235c0:	9307      	strlt	r3, [sp, #28]
 80235c2:	bfb8      	it	lt
 80235c4:	9204      	strlt	r2, [sp, #16]
 80235c6:	7823      	ldrb	r3, [r4, #0]
 80235c8:	2b2e      	cmp	r3, #46	; 0x2e
 80235ca:	d10c      	bne.n	80235e6 <_vfiprintf_r+0x15a>
 80235cc:	7863      	ldrb	r3, [r4, #1]
 80235ce:	2b2a      	cmp	r3, #42	; 0x2a
 80235d0:	d134      	bne.n	802363c <_vfiprintf_r+0x1b0>
 80235d2:	9b03      	ldr	r3, [sp, #12]
 80235d4:	3402      	adds	r4, #2
 80235d6:	1d1a      	adds	r2, r3, #4
 80235d8:	681b      	ldr	r3, [r3, #0]
 80235da:	2b00      	cmp	r3, #0
 80235dc:	9203      	str	r2, [sp, #12]
 80235de:	bfb8      	it	lt
 80235e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80235e4:	9305      	str	r3, [sp, #20]
 80235e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80236bc <_vfiprintf_r+0x230>
 80235ea:	2203      	movs	r2, #3
 80235ec:	7821      	ldrb	r1, [r4, #0]
 80235ee:	4650      	mov	r0, sl
 80235f0:	f7ff fdec 	bl	80231cc <memchr>
 80235f4:	b138      	cbz	r0, 8023606 <_vfiprintf_r+0x17a>
 80235f6:	eba0 000a 	sub.w	r0, r0, sl
 80235fa:	2240      	movs	r2, #64	; 0x40
 80235fc:	9b04      	ldr	r3, [sp, #16]
 80235fe:	3401      	adds	r4, #1
 8023600:	4082      	lsls	r2, r0
 8023602:	4313      	orrs	r3, r2
 8023604:	9304      	str	r3, [sp, #16]
 8023606:	f814 1b01 	ldrb.w	r1, [r4], #1
 802360a:	2206      	movs	r2, #6
 802360c:	4828      	ldr	r0, [pc, #160]	; (80236b0 <_vfiprintf_r+0x224>)
 802360e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023612:	f7ff fddb 	bl	80231cc <memchr>
 8023616:	2800      	cmp	r0, #0
 8023618:	d03f      	beq.n	802369a <_vfiprintf_r+0x20e>
 802361a:	4b26      	ldr	r3, [pc, #152]	; (80236b4 <_vfiprintf_r+0x228>)
 802361c:	bb1b      	cbnz	r3, 8023666 <_vfiprintf_r+0x1da>
 802361e:	9b03      	ldr	r3, [sp, #12]
 8023620:	3307      	adds	r3, #7
 8023622:	f023 0307 	bic.w	r3, r3, #7
 8023626:	3308      	adds	r3, #8
 8023628:	9303      	str	r3, [sp, #12]
 802362a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802362c:	443b      	add	r3, r7
 802362e:	9309      	str	r3, [sp, #36]	; 0x24
 8023630:	e768      	b.n	8023504 <_vfiprintf_r+0x78>
 8023632:	fb0c 3202 	mla	r2, ip, r2, r3
 8023636:	460c      	mov	r4, r1
 8023638:	2001      	movs	r0, #1
 802363a:	e7a6      	b.n	802358a <_vfiprintf_r+0xfe>
 802363c:	2300      	movs	r3, #0
 802363e:	3401      	adds	r4, #1
 8023640:	f04f 0c0a 	mov.w	ip, #10
 8023644:	4619      	mov	r1, r3
 8023646:	9305      	str	r3, [sp, #20]
 8023648:	4620      	mov	r0, r4
 802364a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802364e:	3a30      	subs	r2, #48	; 0x30
 8023650:	2a09      	cmp	r2, #9
 8023652:	d903      	bls.n	802365c <_vfiprintf_r+0x1d0>
 8023654:	2b00      	cmp	r3, #0
 8023656:	d0c6      	beq.n	80235e6 <_vfiprintf_r+0x15a>
 8023658:	9105      	str	r1, [sp, #20]
 802365a:	e7c4      	b.n	80235e6 <_vfiprintf_r+0x15a>
 802365c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023660:	4604      	mov	r4, r0
 8023662:	2301      	movs	r3, #1
 8023664:	e7f0      	b.n	8023648 <_vfiprintf_r+0x1bc>
 8023666:	ab03      	add	r3, sp, #12
 8023668:	462a      	mov	r2, r5
 802366a:	a904      	add	r1, sp, #16
 802366c:	4630      	mov	r0, r6
 802366e:	9300      	str	r3, [sp, #0]
 8023670:	4b11      	ldr	r3, [pc, #68]	; (80236b8 <_vfiprintf_r+0x22c>)
 8023672:	f3af 8000 	nop.w
 8023676:	4607      	mov	r7, r0
 8023678:	1c78      	adds	r0, r7, #1
 802367a:	d1d6      	bne.n	802362a <_vfiprintf_r+0x19e>
 802367c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802367e:	07d9      	lsls	r1, r3, #31
 8023680:	d405      	bmi.n	802368e <_vfiprintf_r+0x202>
 8023682:	89ab      	ldrh	r3, [r5, #12]
 8023684:	059a      	lsls	r2, r3, #22
 8023686:	d402      	bmi.n	802368e <_vfiprintf_r+0x202>
 8023688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802368a:	f7ff f8db 	bl	8022844 <__retarget_lock_release_recursive>
 802368e:	89ab      	ldrh	r3, [r5, #12]
 8023690:	065b      	lsls	r3, r3, #25
 8023692:	f53f af1d 	bmi.w	80234d0 <_vfiprintf_r+0x44>
 8023696:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023698:	e71c      	b.n	80234d4 <_vfiprintf_r+0x48>
 802369a:	ab03      	add	r3, sp, #12
 802369c:	462a      	mov	r2, r5
 802369e:	a904      	add	r1, sp, #16
 80236a0:	4630      	mov	r0, r6
 80236a2:	9300      	str	r3, [sp, #0]
 80236a4:	4b04      	ldr	r3, [pc, #16]	; (80236b8 <_vfiprintf_r+0x22c>)
 80236a6:	f000 f87d 	bl	80237a4 <_printf_i>
 80236aa:	e7e4      	b.n	8023676 <_vfiprintf_r+0x1ea>
 80236ac:	0802453b 	.word	0x0802453b
 80236b0:	08024541 	.word	0x08024541
 80236b4:	00000000 	.word	0x00000000
 80236b8:	08023467 	.word	0x08023467
 80236bc:	0802441b 	.word	0x0802441b

080236c0 <_printf_common>:
 80236c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80236c4:	4616      	mov	r6, r2
 80236c6:	4699      	mov	r9, r3
 80236c8:	688a      	ldr	r2, [r1, #8]
 80236ca:	4607      	mov	r7, r0
 80236cc:	690b      	ldr	r3, [r1, #16]
 80236ce:	460c      	mov	r4, r1
 80236d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80236d4:	4293      	cmp	r3, r2
 80236d6:	bfb8      	it	lt
 80236d8:	4613      	movlt	r3, r2
 80236da:	6033      	str	r3, [r6, #0]
 80236dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80236e0:	b10a      	cbz	r2, 80236e6 <_printf_common+0x26>
 80236e2:	3301      	adds	r3, #1
 80236e4:	6033      	str	r3, [r6, #0]
 80236e6:	6823      	ldr	r3, [r4, #0]
 80236e8:	0699      	lsls	r1, r3, #26
 80236ea:	bf42      	ittt	mi
 80236ec:	6833      	ldrmi	r3, [r6, #0]
 80236ee:	3302      	addmi	r3, #2
 80236f0:	6033      	strmi	r3, [r6, #0]
 80236f2:	6825      	ldr	r5, [r4, #0]
 80236f4:	f015 0506 	ands.w	r5, r5, #6
 80236f8:	d106      	bne.n	8023708 <_printf_common+0x48>
 80236fa:	f104 0a19 	add.w	sl, r4, #25
 80236fe:	68e3      	ldr	r3, [r4, #12]
 8023700:	6832      	ldr	r2, [r6, #0]
 8023702:	1a9b      	subs	r3, r3, r2
 8023704:	42ab      	cmp	r3, r5
 8023706:	dc2b      	bgt.n	8023760 <_printf_common+0xa0>
 8023708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802370c:	1e13      	subs	r3, r2, #0
 802370e:	6822      	ldr	r2, [r4, #0]
 8023710:	bf18      	it	ne
 8023712:	2301      	movne	r3, #1
 8023714:	0692      	lsls	r2, r2, #26
 8023716:	d430      	bmi.n	802377a <_printf_common+0xba>
 8023718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802371c:	4649      	mov	r1, r9
 802371e:	4638      	mov	r0, r7
 8023720:	47c0      	blx	r8
 8023722:	3001      	adds	r0, #1
 8023724:	d023      	beq.n	802376e <_printf_common+0xae>
 8023726:	6823      	ldr	r3, [r4, #0]
 8023728:	341a      	adds	r4, #26
 802372a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802372e:	f003 0306 	and.w	r3, r3, #6
 8023732:	2b04      	cmp	r3, #4
 8023734:	bf0a      	itet	eq
 8023736:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802373a:	2500      	movne	r5, #0
 802373c:	6833      	ldreq	r3, [r6, #0]
 802373e:	f04f 0600 	mov.w	r6, #0
 8023742:	bf08      	it	eq
 8023744:	1aed      	subeq	r5, r5, r3
 8023746:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802374a:	bf08      	it	eq
 802374c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023750:	4293      	cmp	r3, r2
 8023752:	bfc4      	itt	gt
 8023754:	1a9b      	subgt	r3, r3, r2
 8023756:	18ed      	addgt	r5, r5, r3
 8023758:	42b5      	cmp	r5, r6
 802375a:	d11a      	bne.n	8023792 <_printf_common+0xd2>
 802375c:	2000      	movs	r0, #0
 802375e:	e008      	b.n	8023772 <_printf_common+0xb2>
 8023760:	2301      	movs	r3, #1
 8023762:	4652      	mov	r2, sl
 8023764:	4649      	mov	r1, r9
 8023766:	4638      	mov	r0, r7
 8023768:	47c0      	blx	r8
 802376a:	3001      	adds	r0, #1
 802376c:	d103      	bne.n	8023776 <_printf_common+0xb6>
 802376e:	f04f 30ff 	mov.w	r0, #4294967295
 8023772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023776:	3501      	adds	r5, #1
 8023778:	e7c1      	b.n	80236fe <_printf_common+0x3e>
 802377a:	18e1      	adds	r1, r4, r3
 802377c:	1c5a      	adds	r2, r3, #1
 802377e:	2030      	movs	r0, #48	; 0x30
 8023780:	3302      	adds	r3, #2
 8023782:	4422      	add	r2, r4
 8023784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802378c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023790:	e7c2      	b.n	8023718 <_printf_common+0x58>
 8023792:	2301      	movs	r3, #1
 8023794:	4622      	mov	r2, r4
 8023796:	4649      	mov	r1, r9
 8023798:	4638      	mov	r0, r7
 802379a:	47c0      	blx	r8
 802379c:	3001      	adds	r0, #1
 802379e:	d0e6      	beq.n	802376e <_printf_common+0xae>
 80237a0:	3601      	adds	r6, #1
 80237a2:	e7d9      	b.n	8023758 <_printf_common+0x98>

080237a4 <_printf_i>:
 80237a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80237a8:	7e0f      	ldrb	r7, [r1, #24]
 80237aa:	4691      	mov	r9, r2
 80237ac:	4680      	mov	r8, r0
 80237ae:	460c      	mov	r4, r1
 80237b0:	2f78      	cmp	r7, #120	; 0x78
 80237b2:	469a      	mov	sl, r3
 80237b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80237b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80237ba:	d807      	bhi.n	80237cc <_printf_i+0x28>
 80237bc:	2f62      	cmp	r7, #98	; 0x62
 80237be:	d80a      	bhi.n	80237d6 <_printf_i+0x32>
 80237c0:	2f00      	cmp	r7, #0
 80237c2:	f000 80d3 	beq.w	802396c <_printf_i+0x1c8>
 80237c6:	2f58      	cmp	r7, #88	; 0x58
 80237c8:	f000 80bf 	beq.w	802394a <_printf_i+0x1a6>
 80237cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80237d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80237d4:	e03a      	b.n	802384c <_printf_i+0xa8>
 80237d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80237da:	2b15      	cmp	r3, #21
 80237dc:	d8f6      	bhi.n	80237cc <_printf_i+0x28>
 80237de:	a101      	add	r1, pc, #4	; (adr r1, 80237e4 <_printf_i+0x40>)
 80237e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80237e4:	0802383d 	.word	0x0802383d
 80237e8:	08023851 	.word	0x08023851
 80237ec:	080237cd 	.word	0x080237cd
 80237f0:	080237cd 	.word	0x080237cd
 80237f4:	080237cd 	.word	0x080237cd
 80237f8:	080237cd 	.word	0x080237cd
 80237fc:	08023851 	.word	0x08023851
 8023800:	080237cd 	.word	0x080237cd
 8023804:	080237cd 	.word	0x080237cd
 8023808:	080237cd 	.word	0x080237cd
 802380c:	080237cd 	.word	0x080237cd
 8023810:	08023953 	.word	0x08023953
 8023814:	0802387d 	.word	0x0802387d
 8023818:	0802390f 	.word	0x0802390f
 802381c:	080237cd 	.word	0x080237cd
 8023820:	080237cd 	.word	0x080237cd
 8023824:	08023975 	.word	0x08023975
 8023828:	080237cd 	.word	0x080237cd
 802382c:	0802387d 	.word	0x0802387d
 8023830:	080237cd 	.word	0x080237cd
 8023834:	080237cd 	.word	0x080237cd
 8023838:	08023917 	.word	0x08023917
 802383c:	682b      	ldr	r3, [r5, #0]
 802383e:	1d1a      	adds	r2, r3, #4
 8023840:	681b      	ldr	r3, [r3, #0]
 8023842:	602a      	str	r2, [r5, #0]
 8023844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802384c:	2301      	movs	r3, #1
 802384e:	e09e      	b.n	802398e <_printf_i+0x1ea>
 8023850:	6820      	ldr	r0, [r4, #0]
 8023852:	682b      	ldr	r3, [r5, #0]
 8023854:	0607      	lsls	r7, r0, #24
 8023856:	f103 0104 	add.w	r1, r3, #4
 802385a:	6029      	str	r1, [r5, #0]
 802385c:	d501      	bpl.n	8023862 <_printf_i+0xbe>
 802385e:	681e      	ldr	r6, [r3, #0]
 8023860:	e003      	b.n	802386a <_printf_i+0xc6>
 8023862:	0646      	lsls	r6, r0, #25
 8023864:	d5fb      	bpl.n	802385e <_printf_i+0xba>
 8023866:	f9b3 6000 	ldrsh.w	r6, [r3]
 802386a:	2e00      	cmp	r6, #0
 802386c:	da03      	bge.n	8023876 <_printf_i+0xd2>
 802386e:	232d      	movs	r3, #45	; 0x2d
 8023870:	4276      	negs	r6, r6
 8023872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023876:	4859      	ldr	r0, [pc, #356]	; (80239dc <_printf_i+0x238>)
 8023878:	230a      	movs	r3, #10
 802387a:	e012      	b.n	80238a2 <_printf_i+0xfe>
 802387c:	682b      	ldr	r3, [r5, #0]
 802387e:	6820      	ldr	r0, [r4, #0]
 8023880:	1d19      	adds	r1, r3, #4
 8023882:	6029      	str	r1, [r5, #0]
 8023884:	0605      	lsls	r5, r0, #24
 8023886:	d501      	bpl.n	802388c <_printf_i+0xe8>
 8023888:	681e      	ldr	r6, [r3, #0]
 802388a:	e002      	b.n	8023892 <_printf_i+0xee>
 802388c:	0641      	lsls	r1, r0, #25
 802388e:	d5fb      	bpl.n	8023888 <_printf_i+0xe4>
 8023890:	881e      	ldrh	r6, [r3, #0]
 8023892:	2f6f      	cmp	r7, #111	; 0x6f
 8023894:	4851      	ldr	r0, [pc, #324]	; (80239dc <_printf_i+0x238>)
 8023896:	bf0c      	ite	eq
 8023898:	2308      	moveq	r3, #8
 802389a:	230a      	movne	r3, #10
 802389c:	2100      	movs	r1, #0
 802389e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80238a2:	6865      	ldr	r5, [r4, #4]
 80238a4:	2d00      	cmp	r5, #0
 80238a6:	60a5      	str	r5, [r4, #8]
 80238a8:	bfa2      	ittt	ge
 80238aa:	6821      	ldrge	r1, [r4, #0]
 80238ac:	f021 0104 	bicge.w	r1, r1, #4
 80238b0:	6021      	strge	r1, [r4, #0]
 80238b2:	b90e      	cbnz	r6, 80238b8 <_printf_i+0x114>
 80238b4:	2d00      	cmp	r5, #0
 80238b6:	d04a      	beq.n	802394e <_printf_i+0x1aa>
 80238b8:	4615      	mov	r5, r2
 80238ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80238be:	fb03 6711 	mls	r7, r3, r1, r6
 80238c2:	5dc7      	ldrb	r7, [r0, r7]
 80238c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80238c8:	4637      	mov	r7, r6
 80238ca:	460e      	mov	r6, r1
 80238cc:	42bb      	cmp	r3, r7
 80238ce:	d9f4      	bls.n	80238ba <_printf_i+0x116>
 80238d0:	2b08      	cmp	r3, #8
 80238d2:	d10b      	bne.n	80238ec <_printf_i+0x148>
 80238d4:	6823      	ldr	r3, [r4, #0]
 80238d6:	07de      	lsls	r6, r3, #31
 80238d8:	d508      	bpl.n	80238ec <_printf_i+0x148>
 80238da:	6923      	ldr	r3, [r4, #16]
 80238dc:	6861      	ldr	r1, [r4, #4]
 80238de:	4299      	cmp	r1, r3
 80238e0:	bfde      	ittt	le
 80238e2:	2330      	movle	r3, #48	; 0x30
 80238e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80238e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80238ec:	1b52      	subs	r2, r2, r5
 80238ee:	6122      	str	r2, [r4, #16]
 80238f0:	464b      	mov	r3, r9
 80238f2:	aa03      	add	r2, sp, #12
 80238f4:	4621      	mov	r1, r4
 80238f6:	4640      	mov	r0, r8
 80238f8:	f8cd a000 	str.w	sl, [sp]
 80238fc:	f7ff fee0 	bl	80236c0 <_printf_common>
 8023900:	3001      	adds	r0, #1
 8023902:	d149      	bne.n	8023998 <_printf_i+0x1f4>
 8023904:	f04f 30ff 	mov.w	r0, #4294967295
 8023908:	b004      	add	sp, #16
 802390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802390e:	6823      	ldr	r3, [r4, #0]
 8023910:	f043 0320 	orr.w	r3, r3, #32
 8023914:	6023      	str	r3, [r4, #0]
 8023916:	2778      	movs	r7, #120	; 0x78
 8023918:	4831      	ldr	r0, [pc, #196]	; (80239e0 <_printf_i+0x23c>)
 802391a:	6823      	ldr	r3, [r4, #0]
 802391c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023920:	061f      	lsls	r7, r3, #24
 8023922:	6829      	ldr	r1, [r5, #0]
 8023924:	f851 6b04 	ldr.w	r6, [r1], #4
 8023928:	d402      	bmi.n	8023930 <_printf_i+0x18c>
 802392a:	065f      	lsls	r7, r3, #25
 802392c:	bf48      	it	mi
 802392e:	b2b6      	uxthmi	r6, r6
 8023930:	07df      	lsls	r7, r3, #31
 8023932:	6029      	str	r1, [r5, #0]
 8023934:	bf44      	itt	mi
 8023936:	f043 0320 	orrmi.w	r3, r3, #32
 802393a:	6023      	strmi	r3, [r4, #0]
 802393c:	b91e      	cbnz	r6, 8023946 <_printf_i+0x1a2>
 802393e:	6823      	ldr	r3, [r4, #0]
 8023940:	f023 0320 	bic.w	r3, r3, #32
 8023944:	6023      	str	r3, [r4, #0]
 8023946:	2310      	movs	r3, #16
 8023948:	e7a8      	b.n	802389c <_printf_i+0xf8>
 802394a:	4824      	ldr	r0, [pc, #144]	; (80239dc <_printf_i+0x238>)
 802394c:	e7e5      	b.n	802391a <_printf_i+0x176>
 802394e:	4615      	mov	r5, r2
 8023950:	e7be      	b.n	80238d0 <_printf_i+0x12c>
 8023952:	682b      	ldr	r3, [r5, #0]
 8023954:	6826      	ldr	r6, [r4, #0]
 8023956:	1d18      	adds	r0, r3, #4
 8023958:	6961      	ldr	r1, [r4, #20]
 802395a:	6028      	str	r0, [r5, #0]
 802395c:	0635      	lsls	r5, r6, #24
 802395e:	681b      	ldr	r3, [r3, #0]
 8023960:	d501      	bpl.n	8023966 <_printf_i+0x1c2>
 8023962:	6019      	str	r1, [r3, #0]
 8023964:	e002      	b.n	802396c <_printf_i+0x1c8>
 8023966:	0670      	lsls	r0, r6, #25
 8023968:	d5fb      	bpl.n	8023962 <_printf_i+0x1be>
 802396a:	8019      	strh	r1, [r3, #0]
 802396c:	2300      	movs	r3, #0
 802396e:	4615      	mov	r5, r2
 8023970:	6123      	str	r3, [r4, #16]
 8023972:	e7bd      	b.n	80238f0 <_printf_i+0x14c>
 8023974:	682b      	ldr	r3, [r5, #0]
 8023976:	2100      	movs	r1, #0
 8023978:	1d1a      	adds	r2, r3, #4
 802397a:	602a      	str	r2, [r5, #0]
 802397c:	681d      	ldr	r5, [r3, #0]
 802397e:	6862      	ldr	r2, [r4, #4]
 8023980:	4628      	mov	r0, r5
 8023982:	f7ff fc23 	bl	80231cc <memchr>
 8023986:	b108      	cbz	r0, 802398c <_printf_i+0x1e8>
 8023988:	1b40      	subs	r0, r0, r5
 802398a:	6060      	str	r0, [r4, #4]
 802398c:	6863      	ldr	r3, [r4, #4]
 802398e:	6123      	str	r3, [r4, #16]
 8023990:	2300      	movs	r3, #0
 8023992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023996:	e7ab      	b.n	80238f0 <_printf_i+0x14c>
 8023998:	6923      	ldr	r3, [r4, #16]
 802399a:	462a      	mov	r2, r5
 802399c:	4649      	mov	r1, r9
 802399e:	4640      	mov	r0, r8
 80239a0:	47d0      	blx	sl
 80239a2:	3001      	adds	r0, #1
 80239a4:	d0ae      	beq.n	8023904 <_printf_i+0x160>
 80239a6:	6823      	ldr	r3, [r4, #0]
 80239a8:	079b      	lsls	r3, r3, #30
 80239aa:	d413      	bmi.n	80239d4 <_printf_i+0x230>
 80239ac:	68e0      	ldr	r0, [r4, #12]
 80239ae:	9b03      	ldr	r3, [sp, #12]
 80239b0:	4298      	cmp	r0, r3
 80239b2:	bfb8      	it	lt
 80239b4:	4618      	movlt	r0, r3
 80239b6:	e7a7      	b.n	8023908 <_printf_i+0x164>
 80239b8:	2301      	movs	r3, #1
 80239ba:	4632      	mov	r2, r6
 80239bc:	4649      	mov	r1, r9
 80239be:	4640      	mov	r0, r8
 80239c0:	47d0      	blx	sl
 80239c2:	3001      	adds	r0, #1
 80239c4:	d09e      	beq.n	8023904 <_printf_i+0x160>
 80239c6:	3501      	adds	r5, #1
 80239c8:	68e3      	ldr	r3, [r4, #12]
 80239ca:	9903      	ldr	r1, [sp, #12]
 80239cc:	1a5b      	subs	r3, r3, r1
 80239ce:	42ab      	cmp	r3, r5
 80239d0:	dcf2      	bgt.n	80239b8 <_printf_i+0x214>
 80239d2:	e7eb      	b.n	80239ac <_printf_i+0x208>
 80239d4:	2500      	movs	r5, #0
 80239d6:	f104 0619 	add.w	r6, r4, #25
 80239da:	e7f5      	b.n	80239c8 <_printf_i+0x224>
 80239dc:	08024548 	.word	0x08024548
 80239e0:	08024559 	.word	0x08024559

080239e4 <__swbuf_r>:
 80239e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239e6:	460e      	mov	r6, r1
 80239e8:	4614      	mov	r4, r2
 80239ea:	4605      	mov	r5, r0
 80239ec:	b118      	cbz	r0, 80239f6 <__swbuf_r+0x12>
 80239ee:	6a03      	ldr	r3, [r0, #32]
 80239f0:	b90b      	cbnz	r3, 80239f6 <__swbuf_r+0x12>
 80239f2:	f7fe fd97 	bl	8022524 <__sinit>
 80239f6:	69a3      	ldr	r3, [r4, #24]
 80239f8:	60a3      	str	r3, [r4, #8]
 80239fa:	89a3      	ldrh	r3, [r4, #12]
 80239fc:	071a      	lsls	r2, r3, #28
 80239fe:	d525      	bpl.n	8023a4c <__swbuf_r+0x68>
 8023a00:	6923      	ldr	r3, [r4, #16]
 8023a02:	b31b      	cbz	r3, 8023a4c <__swbuf_r+0x68>
 8023a04:	6823      	ldr	r3, [r4, #0]
 8023a06:	b2f6      	uxtb	r6, r6
 8023a08:	6922      	ldr	r2, [r4, #16]
 8023a0a:	4637      	mov	r7, r6
 8023a0c:	1a98      	subs	r0, r3, r2
 8023a0e:	6963      	ldr	r3, [r4, #20]
 8023a10:	4283      	cmp	r3, r0
 8023a12:	dc04      	bgt.n	8023a1e <__swbuf_r+0x3a>
 8023a14:	4621      	mov	r1, r4
 8023a16:	4628      	mov	r0, r5
 8023a18:	f7ff fb2e 	bl	8023078 <_fflush_r>
 8023a1c:	b9e0      	cbnz	r0, 8023a58 <__swbuf_r+0x74>
 8023a1e:	68a3      	ldr	r3, [r4, #8]
 8023a20:	3b01      	subs	r3, #1
 8023a22:	60a3      	str	r3, [r4, #8]
 8023a24:	6823      	ldr	r3, [r4, #0]
 8023a26:	1c5a      	adds	r2, r3, #1
 8023a28:	6022      	str	r2, [r4, #0]
 8023a2a:	701e      	strb	r6, [r3, #0]
 8023a2c:	1c43      	adds	r3, r0, #1
 8023a2e:	6962      	ldr	r2, [r4, #20]
 8023a30:	429a      	cmp	r2, r3
 8023a32:	d004      	beq.n	8023a3e <__swbuf_r+0x5a>
 8023a34:	89a3      	ldrh	r3, [r4, #12]
 8023a36:	07db      	lsls	r3, r3, #31
 8023a38:	d506      	bpl.n	8023a48 <__swbuf_r+0x64>
 8023a3a:	2e0a      	cmp	r6, #10
 8023a3c:	d104      	bne.n	8023a48 <__swbuf_r+0x64>
 8023a3e:	4621      	mov	r1, r4
 8023a40:	4628      	mov	r0, r5
 8023a42:	f7ff fb19 	bl	8023078 <_fflush_r>
 8023a46:	b938      	cbnz	r0, 8023a58 <__swbuf_r+0x74>
 8023a48:	4638      	mov	r0, r7
 8023a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a4c:	4621      	mov	r1, r4
 8023a4e:	4628      	mov	r0, r5
 8023a50:	f000 f806 	bl	8023a60 <__swsetup_r>
 8023a54:	2800      	cmp	r0, #0
 8023a56:	d0d5      	beq.n	8023a04 <__swbuf_r+0x20>
 8023a58:	f04f 37ff 	mov.w	r7, #4294967295
 8023a5c:	e7f4      	b.n	8023a48 <__swbuf_r+0x64>
	...

08023a60 <__swsetup_r>:
 8023a60:	b538      	push	{r3, r4, r5, lr}
 8023a62:	4b2a      	ldr	r3, [pc, #168]	; (8023b0c <__swsetup_r+0xac>)
 8023a64:	4605      	mov	r5, r0
 8023a66:	460c      	mov	r4, r1
 8023a68:	6818      	ldr	r0, [r3, #0]
 8023a6a:	b118      	cbz	r0, 8023a74 <__swsetup_r+0x14>
 8023a6c:	6a03      	ldr	r3, [r0, #32]
 8023a6e:	b90b      	cbnz	r3, 8023a74 <__swsetup_r+0x14>
 8023a70:	f7fe fd58 	bl	8022524 <__sinit>
 8023a74:	89a3      	ldrh	r3, [r4, #12]
 8023a76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023a7a:	0718      	lsls	r0, r3, #28
 8023a7c:	d422      	bmi.n	8023ac4 <__swsetup_r+0x64>
 8023a7e:	06d9      	lsls	r1, r3, #27
 8023a80:	d407      	bmi.n	8023a92 <__swsetup_r+0x32>
 8023a82:	2309      	movs	r3, #9
 8023a84:	602b      	str	r3, [r5, #0]
 8023a86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8023a8e:	81a3      	strh	r3, [r4, #12]
 8023a90:	e034      	b.n	8023afc <__swsetup_r+0x9c>
 8023a92:	0758      	lsls	r0, r3, #29
 8023a94:	d512      	bpl.n	8023abc <__swsetup_r+0x5c>
 8023a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023a98:	b141      	cbz	r1, 8023aac <__swsetup_r+0x4c>
 8023a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023a9e:	4299      	cmp	r1, r3
 8023aa0:	d002      	beq.n	8023aa8 <__swsetup_r+0x48>
 8023aa2:	4628      	mov	r0, r5
 8023aa4:	f7fe fefa 	bl	802289c <_free_r>
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	6363      	str	r3, [r4, #52]	; 0x34
 8023aac:	89a3      	ldrh	r3, [r4, #12]
 8023aae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023ab2:	81a3      	strh	r3, [r4, #12]
 8023ab4:	2300      	movs	r3, #0
 8023ab6:	6063      	str	r3, [r4, #4]
 8023ab8:	6923      	ldr	r3, [r4, #16]
 8023aba:	6023      	str	r3, [r4, #0]
 8023abc:	89a3      	ldrh	r3, [r4, #12]
 8023abe:	f043 0308 	orr.w	r3, r3, #8
 8023ac2:	81a3      	strh	r3, [r4, #12]
 8023ac4:	6923      	ldr	r3, [r4, #16]
 8023ac6:	b94b      	cbnz	r3, 8023adc <__swsetup_r+0x7c>
 8023ac8:	89a3      	ldrh	r3, [r4, #12]
 8023aca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023ad2:	d003      	beq.n	8023adc <__swsetup_r+0x7c>
 8023ad4:	4621      	mov	r1, r4
 8023ad6:	4628      	mov	r0, r5
 8023ad8:	f000 f847 	bl	8023b6a <__smakebuf_r>
 8023adc:	89a0      	ldrh	r0, [r4, #12]
 8023ade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023ae2:	f010 0301 	ands.w	r3, r0, #1
 8023ae6:	d00a      	beq.n	8023afe <__swsetup_r+0x9e>
 8023ae8:	2300      	movs	r3, #0
 8023aea:	60a3      	str	r3, [r4, #8]
 8023aec:	6963      	ldr	r3, [r4, #20]
 8023aee:	425b      	negs	r3, r3
 8023af0:	61a3      	str	r3, [r4, #24]
 8023af2:	6923      	ldr	r3, [r4, #16]
 8023af4:	b943      	cbnz	r3, 8023b08 <__swsetup_r+0xa8>
 8023af6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023afa:	d1c4      	bne.n	8023a86 <__swsetup_r+0x26>
 8023afc:	bd38      	pop	{r3, r4, r5, pc}
 8023afe:	0781      	lsls	r1, r0, #30
 8023b00:	bf58      	it	pl
 8023b02:	6963      	ldrpl	r3, [r4, #20]
 8023b04:	60a3      	str	r3, [r4, #8]
 8023b06:	e7f4      	b.n	8023af2 <__swsetup_r+0x92>
 8023b08:	2000      	movs	r0, #0
 8023b0a:	e7f7      	b.n	8023afc <__swsetup_r+0x9c>
 8023b0c:	20000108 	.word	0x20000108

08023b10 <_malloc_usable_size_r>:
 8023b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023b14:	1f18      	subs	r0, r3, #4
 8023b16:	2b00      	cmp	r3, #0
 8023b18:	bfbc      	itt	lt
 8023b1a:	580b      	ldrlt	r3, [r1, r0]
 8023b1c:	18c0      	addlt	r0, r0, r3
 8023b1e:	4770      	bx	lr

08023b20 <__swhatbuf_r>:
 8023b20:	b570      	push	{r4, r5, r6, lr}
 8023b22:	460c      	mov	r4, r1
 8023b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b28:	b096      	sub	sp, #88	; 0x58
 8023b2a:	4615      	mov	r5, r2
 8023b2c:	2900      	cmp	r1, #0
 8023b2e:	461e      	mov	r6, r3
 8023b30:	da0c      	bge.n	8023b4c <__swhatbuf_r+0x2c>
 8023b32:	89a3      	ldrh	r3, [r4, #12]
 8023b34:	2100      	movs	r1, #0
 8023b36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023b3a:	bf0c      	ite	eq
 8023b3c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023b40:	2340      	movne	r3, #64	; 0x40
 8023b42:	2000      	movs	r0, #0
 8023b44:	6031      	str	r1, [r6, #0]
 8023b46:	602b      	str	r3, [r5, #0]
 8023b48:	b016      	add	sp, #88	; 0x58
 8023b4a:	bd70      	pop	{r4, r5, r6, pc}
 8023b4c:	466a      	mov	r2, sp
 8023b4e:	f000 f849 	bl	8023be4 <_fstat_r>
 8023b52:	2800      	cmp	r0, #0
 8023b54:	dbed      	blt.n	8023b32 <__swhatbuf_r+0x12>
 8023b56:	9901      	ldr	r1, [sp, #4]
 8023b58:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023b5c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023b60:	4259      	negs	r1, r3
 8023b62:	4159      	adcs	r1, r3
 8023b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023b68:	e7eb      	b.n	8023b42 <__swhatbuf_r+0x22>

08023b6a <__smakebuf_r>:
 8023b6a:	898b      	ldrh	r3, [r1, #12]
 8023b6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023b6e:	079d      	lsls	r5, r3, #30
 8023b70:	4606      	mov	r6, r0
 8023b72:	460c      	mov	r4, r1
 8023b74:	d507      	bpl.n	8023b86 <__smakebuf_r+0x1c>
 8023b76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023b7a:	6023      	str	r3, [r4, #0]
 8023b7c:	6123      	str	r3, [r4, #16]
 8023b7e:	2301      	movs	r3, #1
 8023b80:	6163      	str	r3, [r4, #20]
 8023b82:	b002      	add	sp, #8
 8023b84:	bd70      	pop	{r4, r5, r6, pc}
 8023b86:	ab01      	add	r3, sp, #4
 8023b88:	466a      	mov	r2, sp
 8023b8a:	f7ff ffc9 	bl	8023b20 <__swhatbuf_r>
 8023b8e:	9900      	ldr	r1, [sp, #0]
 8023b90:	4605      	mov	r5, r0
 8023b92:	4630      	mov	r0, r6
 8023b94:	f7fe fb70 	bl	8022278 <_malloc_r>
 8023b98:	b948      	cbnz	r0, 8023bae <__smakebuf_r+0x44>
 8023b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b9e:	059a      	lsls	r2, r3, #22
 8023ba0:	d4ef      	bmi.n	8023b82 <__smakebuf_r+0x18>
 8023ba2:	f023 0303 	bic.w	r3, r3, #3
 8023ba6:	f043 0302 	orr.w	r3, r3, #2
 8023baa:	81a3      	strh	r3, [r4, #12]
 8023bac:	e7e3      	b.n	8023b76 <__smakebuf_r+0xc>
 8023bae:	89a3      	ldrh	r3, [r4, #12]
 8023bb0:	6020      	str	r0, [r4, #0]
 8023bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023bb6:	6120      	str	r0, [r4, #16]
 8023bb8:	81a3      	strh	r3, [r4, #12]
 8023bba:	9b00      	ldr	r3, [sp, #0]
 8023bbc:	6163      	str	r3, [r4, #20]
 8023bbe:	9b01      	ldr	r3, [sp, #4]
 8023bc0:	b15b      	cbz	r3, 8023bda <__smakebuf_r+0x70>
 8023bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023bc6:	4630      	mov	r0, r6
 8023bc8:	f000 f81e 	bl	8023c08 <_isatty_r>
 8023bcc:	b128      	cbz	r0, 8023bda <__smakebuf_r+0x70>
 8023bce:	89a3      	ldrh	r3, [r4, #12]
 8023bd0:	f023 0303 	bic.w	r3, r3, #3
 8023bd4:	f043 0301 	orr.w	r3, r3, #1
 8023bd8:	81a3      	strh	r3, [r4, #12]
 8023bda:	89a3      	ldrh	r3, [r4, #12]
 8023bdc:	431d      	orrs	r5, r3
 8023bde:	81a5      	strh	r5, [r4, #12]
 8023be0:	e7cf      	b.n	8023b82 <__smakebuf_r+0x18>
	...

08023be4 <_fstat_r>:
 8023be4:	b538      	push	{r3, r4, r5, lr}
 8023be6:	2300      	movs	r3, #0
 8023be8:	4d06      	ldr	r5, [pc, #24]	; (8023c04 <_fstat_r+0x20>)
 8023bea:	4604      	mov	r4, r0
 8023bec:	4608      	mov	r0, r1
 8023bee:	4611      	mov	r1, r2
 8023bf0:	602b      	str	r3, [r5, #0]
 8023bf2:	f7ef fb18 	bl	8013226 <_fstat>
 8023bf6:	1c43      	adds	r3, r0, #1
 8023bf8:	d102      	bne.n	8023c00 <_fstat_r+0x1c>
 8023bfa:	682b      	ldr	r3, [r5, #0]
 8023bfc:	b103      	cbz	r3, 8023c00 <_fstat_r+0x1c>
 8023bfe:	6023      	str	r3, [r4, #0]
 8023c00:	bd38      	pop	{r3, r4, r5, pc}
 8023c02:	bf00      	nop
 8023c04:	20003dc4 	.word	0x20003dc4

08023c08 <_isatty_r>:
 8023c08:	b538      	push	{r3, r4, r5, lr}
 8023c0a:	2300      	movs	r3, #0
 8023c0c:	4d05      	ldr	r5, [pc, #20]	; (8023c24 <_isatty_r+0x1c>)
 8023c0e:	4604      	mov	r4, r0
 8023c10:	4608      	mov	r0, r1
 8023c12:	602b      	str	r3, [r5, #0]
 8023c14:	f7ef fb17 	bl	8013246 <_isatty>
 8023c18:	1c43      	adds	r3, r0, #1
 8023c1a:	d102      	bne.n	8023c22 <_isatty_r+0x1a>
 8023c1c:	682b      	ldr	r3, [r5, #0]
 8023c1e:	b103      	cbz	r3, 8023c22 <_isatty_r+0x1a>
 8023c20:	6023      	str	r3, [r4, #0]
 8023c22:	bd38      	pop	{r3, r4, r5, pc}
 8023c24:	20003dc4 	.word	0x20003dc4

08023c28 <_init>:
 8023c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c2a:	bf00      	nop
 8023c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023c2e:	bc08      	pop	{r3}
 8023c30:	469e      	mov	lr, r3
 8023c32:	4770      	bx	lr

08023c34 <_fini>:
 8023c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c36:	bf00      	nop
 8023c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023c3a:	bc08      	pop	{r3}
 8023c3c:	469e      	mov	lr, r3
 8023c3e:	4770      	bx	lr
